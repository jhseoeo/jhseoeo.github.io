{"type":"data","nodes":[null,{"type":"data","data":[{"PostContent":1,"meta":2},"\u003Cbr\u003E\n\u003Cp\u003E본 글은 Golang을 공부하며 주요 내용이라 생각되는 것들을 기록해둔 자료이며, Ubuntu 20.04 LTS 기준으로 작성되었습니다.\u003C\u002Fp\u003E\n\u003Cbr\u003E\u003Cbr\u003E\n\u003Ch2 id=\"installation\"\u003E\u003Ca aria-hidden=\"true\" tabindex=\"-1\" href=\"#installation\"\u003E\u003Cspan class=\"icon icon-link\"\u003E\u003C\u002Fspan\u003E\u003C\u002Fa\u003EInstallation\u003C\u002Fh2\u003E\n\u003Chr\u003E\n\u003Cp\u003E터미널에서 \u003Ccode\u003Esudo apt-get install golang-go\u003C\u002Fcode\u003E를 통해 Go를 설치할 수는 있지만, 패키지 매니저를 통해 설치된 Go는 최신 버전이 아니다.\u003C\u002Fp\u003E\n\u003Cp\u003E최신 버전의 Go를 설치하기 위해서는 \u003Ca href=\"https:\u002F\u002Fgo.dev\u002Fdl\u002F\" rel=\"nofollow\"\u003EGo 웹페이지\u003C\u002Fa\u003E에서 설치 파일을 다운받아 설치한다.\u003C\u002Fp\u003E\n\u003Cpre class=\"language-bash\"\u003E\u003C!-- HTML_TAG_START --\u003E\u003Ccode class=\"language-bash\"\u003E\u003Cspan class=\"token function\"\u003Etar\u003C\u002Fspan\u003E \u003Cspan class=\"token parameter variable\"\u003E-C\u003C\u002Fspan\u003E \u002Fusr\u002Flocal \u003Cspan class=\"token parameter variable\"\u003E-xzf\u003C\u002Fspan\u003E go1.18.4.linux-amd64.tar.gz\u003C\u002Fcode\u003E\u003C!-- HTML_TAG_END --\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E위의 버전은 다운로드한 설치 파일의 버전에 맞게 잘 바꿔주도록 하자.\u003C\u002Fp\u003E\n\u003Cbr\u003E\n\u003Cp\u003E\u003Ccode\u003Ebash\u003C\u002Fcode\u003E를 사용한다면 \u003Cem\u003E.profile\u003C\u002Fem\u003E에, \u003Ccode\u003Ezsh\u003C\u002Fcode\u003E라면 \u003Cem\u003E.zshrc\u003C\u002Fem\u003E에 아래 내용을 추가해준다.\u003C\u002Fp\u003E\n\u003Cpre class=\"language-bash\"\u003E\u003C!-- HTML_TAG_START --\u003E\u003Ccode class=\"language-bash\"\u003E\u003Cspan class=\"token builtin class-name\"\u003Eexport\u003C\u002Fspan\u003E \u003Cspan class=\"token assign-left variable\"\u003EGOPATH\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E\u003Cspan class=\"token environment constant\"\u003E$HOME\u003C\u002Fspan\u003E\u002Fgo\n\u003Cspan class=\"token builtin class-name\"\u003Eexport\u003C\u002Fspan\u003E \u003Cspan class=\"token assign-left variable\"\u003E\u003Cspan class=\"token environment constant\"\u003EPATH\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E\u003Cspan class=\"token environment constant\"\u003E$PATH\u003C\u002Fspan\u003E\u003Cspan class=\"token builtin class-name\"\u003E:\u003C\u002Fspan\u003E\u003Cspan class=\"token variable\"\u003E$GOPATH\u003C\u002Fspan\u003E\u002Fbin\u003C\u002Fcode\u003E\u003C!-- HTML_TAG_END --\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E추가하였다면, \u003Ccode\u003Esource ~\u002F.profile\u003C\u002Fcode\u003E 또는 \u003Ccode\u003Esource ~\u002F.zshrc\u003C\u002Fcode\u003E를 입력하여 변경된 설정을 적용한다.\u003C\u002Fp\u003E\n\u003Cbr\u003E\n\u003Cp\u003E이제 잘 설치되었는지 Go 명령어를 실행해보자.\u003C\u002Fp\u003E\n\u003Cpre class=\"language-bash\"\u003E\u003C!-- HTML_TAG_START --\u003E\u003Ccode class=\"language-bash\"\u003Ego version\u003C\u002Fcode\u003E\u003C!-- HTML_TAG_END --\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E잘 설치되었다면, 아래와 같은 결과를 확인할 수 있을 것이다\u003C\u002Fp\u003E\n\u003Cpre class=\"language-bash\"\u003E\u003C!-- HTML_TAG_START --\u003E\u003Ccode class=\"language-bash\"\u003Ego version go1.18.4 linux\u002Famd64\u003C\u002Fcode\u003E\u003C!-- HTML_TAG_END --\u003E\u003C\u002Fpre\u003E\n\u003Cbr\u003E\u003Cbr\u003E\n\u003Ch2 id=\"hello-world\"\u003E\u003Ca aria-hidden=\"true\" tabindex=\"-1\" href=\"#hello-world\"\u003E\u003Cspan class=\"icon icon-link\"\u003E\u003C\u002Fspan\u003E\u003C\u002Fa\u003EHello world\u003C\u002Fh2\u003E\n\u003Chr\u003E\n\u003Cp\u003E파일명이 \u003Ccode\u003Ehello.go\u003C\u002Fcode\u003E인 파일을 생성하여, 아래와 같이 입력한다\u003C\u002Fp\u003E\n\u003Cpre class=\"language-go\"\u003E\u003C!-- HTML_TAG_START --\u003E\u003Ccode class=\"language-go\"\u003E\u003Cspan class=\"token keyword\"\u003Epackage\u003C\u002Fspan\u003E main\n\n\u003Cspan class=\"token keyword\"\u003Eimport\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E\"fmt\"\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"token keyword\"\u003Efunc\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003Emain\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n    fmt\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EPrintln\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token string\"\u003E\"Hello world!\"\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C!-- HTML_TAG_END --\u003E\u003C\u002Fpre\u003E\n\u003Cbr\u003E\n\u003Cp\u003E코드의 모양새는 대충 C\u002FC++과 비슷해 보인다. 중괄호 사용하고, 메인함수 있고, 등등\n이후 아래 명령어를 통해 방금 생성한 \u003Cem\u003Ehello.go\u003C\u002Fem\u003E 파일을 실행해보자.\u003C\u002Fp\u003E\n\u003Cpre class=\"language-bash\"\u003E\u003C!-- HTML_TAG_START --\u003E\u003Ccode class=\"language-bash\"\u003Ego run hello.go\u003C\u002Fcode\u003E\u003C!-- HTML_TAG_END --\u003E\u003C\u002Fpre\u003E\n\u003Cbr\u003E\n\u003Cp\u003EGo에서는 파일을 빌드할 수도 있다. 아래 명령어를 통해 \u003Cem\u003Ehello.go\u003C\u002Fem\u003E 파일을 빌드해보자.\u003C\u002Fp\u003E\n\u003Cpre class=\"language-bash\"\u003E\u003C!-- HTML_TAG_START --\u003E\u003Ccode class=\"language-bash\"\u003Ego build hello.go\u003C\u002Fcode\u003E\u003C!-- HTML_TAG_END --\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E아마 윈도우라면 \u003Cem\u003Ehello.exe\u003C\u002Fem\u003E가, 리눅스라면 \u003Cem\u003Ehello\u003C\u002Fem\u003E 파일이 생성되었을 것이다. (\u003Ccode\u003Esource hello\u003C\u002Fcode\u003E를 입력하여 실행할 수 있다.)\n\u003Ccode\u003E-o\u003C\u002Fcode\u003E 플래그를 통해 빌드로 생성될 실행 파일의 이름 및 경로를 아래와 같이 설정해줄 수 있다.\u003C\u002Fp\u003E\n\u003Cpre class=\"language-bash\"\u003E\u003C!-- HTML_TAG_START --\u003E\u003Ccode class=\"language-bash\"\u003Ego build \u003Cspan class=\"token parameter variable\"\u003E-o\u003C\u002Fspan\u003E hello_world hello.go\u003C\u002Fcode\u003E\u003C!-- HTML_TAG_END --\u003E\u003C\u002Fpre\u003E\n\u003Cbr\u003E\u003Cbr\u003E\n\u003Ch2 id=\"installing-third-party-libraries\"\u003E\u003Ca aria-hidden=\"true\" tabindex=\"-1\" href=\"#installing-third-party-libraries\"\u003E\u003Cspan class=\"icon icon-link\"\u003E\u003C\u002Fspan\u003E\u003C\u002Fa\u003EInstalling third-party libraries\u003C\u002Fh2\u003E\n\u003Chr\u003E\n\u003Cp\u003E\u003Ccode\u003Ego install\u003C\u002Fcode\u003E 명령어를 통해 써드 파티 라이브러리를 설치해보자.\u003C\u002Fp\u003E\n\u003Cpre class=\"language-bash\"\u003E\u003C!-- HTML_TAG_START --\u003E\u003Ccode class=\"language-bash\"\u003Ego \u003Cspan class=\"token function\"\u003Einstall\u003C\u002Fspan\u003E github.com\u002Frakyll\u002Fhey@latest\u003C\u002Fcode\u003E\u003C!-- HTML_TAG_END --\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E\u003Ccode\u003Ego install\u003C\u002Fcode\u003E 명령어는 저장소의 주소를 인자로 받으며, @ 뒤에 다운로드할 버전을 명시할 수 있다. \u003Ccode\u003Elatest\u003C\u002Fcode\u003E는 최신 버전이라는 뜻.\u003C\u002Fp\u003E\n\u003Cbr\u003E\n\u003Cp\u003E설치한 \u003Ccode\u003Ehey\u003C\u002Fcode\u003E 라이브러리를 사용해보자\u003C\u002Fp\u003E\n\u003Cpre class=\"language-bash\"\u003E\u003C!-- HTML_TAG_START --\u003E\u003Ccode class=\"language-bash\"\u003Ehey https:\u002F\u002Fjunhyuk0801.github.io\u003C\u002Fcode\u003E\u003C!-- HTML_TAG_END --\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E실행 결과를 보면 알 수 있다시피, 대충 \u003Ccode\u003Ecurl\u003C\u002Fcode\u003E 비슷한 http 서버 테스트하는 용도의 라이브러리이다.\u003C\u002Fp\u003E\n\u003Cbr\u003E\u003Cbr\u003E\n\u003Ch2 id=\"formatting-codes\"\u003E\u003Ca aria-hidden=\"true\" tabindex=\"-1\" href=\"#formatting-codes\"\u003E\u003Cspan class=\"icon icon-link\"\u003E\u003C\u002Fspan\u003E\u003C\u002Fa\u003EFormatting codes\u003C\u002Fh2\u003E\n\u003Chr\u003E\n\u003Cp\u003EGo에는 표준 포맷(Standard format)이 존재한다. \u003Ccode\u003Ego fmt\u003C\u002Fcode\u003E 명령어로 표준 포맷에 맞게 코드를 포맷할 수 있다. 아래 명령어를 입력하면 현재 디렉토리 내의 모든 \u003Cem\u003E.go\u003C\u002Fem\u003E 파일들을 포매팅할 수 있다.\u003C\u002Fp\u003E\n\u003Cpre class=\"language-bash\"\u003E\u003C!-- HTML_TAG_START --\u003E\u003Ccode class=\"language-bash\"\u003Ego \u003Cspan class=\"token function\"\u003Efmt\u003C\u002Fspan\u003E .\u002F\u003Cspan class=\"token punctuation\"\u003E..\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C!-- HTML_TAG_END --\u003E\u003C\u002Fpre\u003E\n\u003Cbr\u003E\n\u003Cp\u003E보다 향상된 기능의 \u003Ccode\u003Egoimport\u003C\u002Fcode\u003E 모듈이 존재하는데, 아마 불필요하게 import된 라이브러리들을 관리해주는 등의 기능을 추가로 제공해주는 것으로 보인다.\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Ccode\u003Ego install golang.org\u002Fx\u002Ftools\u002Fcmd\u002Fgoimports@latest\u003C\u002Fcode\u003E로 설치한 후, 아래 명령어를 통해 실행한다.\u003C\u002Fp\u003E\n\u003Cpre class=\"language-bash\"\u003E\u003C!-- HTML_TAG_START --\u003E\u003Ccode class=\"language-bash\"\u003Egoimports \u003Cspan class=\"token parameter variable\"\u003E-l\u003C\u002Fspan\u003E \u003Cspan class=\"token parameter variable\"\u003E-w\u003C\u002Fspan\u003E \u003Cspan class=\"token builtin class-name\"\u003E.\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C!-- HTML_TAG_END --\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E\u003Ccode\u003E-l\u003C\u002Fcode\u003E 플래그는 포맷된 내용을 콘솔에 출력하도록 하며, \u003Ccode\u003E-w\u003C\u002Fcode\u003E 플래그는 수정된 내용이 그 파일에 그대로 적용되도록 (추가로 파일이 생성되지 않도록) 한다.\u003C\u002Fp\u003E\n\u003Cbr\u003E\u003Cbr\u003E\n\u003Ch2 id=\"linting-and-vetting\"\u003E\u003Ca aria-hidden=\"true\" tabindex=\"-1\" href=\"#linting-and-vetting\"\u003E\u003Cspan class=\"icon icon-link\"\u003E\u003C\u002Fspan\u003E\u003C\u002Fa\u003ELinting and Vetting\u003C\u002Fh2\u003E\n\u003Chr\u003E\n\u003Cp\u003E\u003Ccode\u003Egolint\u003C\u002Fcode\u003E는 현재 deprecated된 도구이지만, 문법적인 오류를 잡아주는 역할을 한다.\u003C\u002Fp\u003E\n\u003Cpre class=\"language-bash\"\u003E\u003C!-- HTML_TAG_START --\u003E\u003Ccode class=\"language-bash\"\u003Ego \u003Cspan class=\"token function\"\u003Einstall\u003C\u002Fspan\u003E golang.org\u002Fx\u002Flint\u002Fgolint@latest\u003C\u002Fcode\u003E\u003C!-- HTML_TAG_END --\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E위 명령어로 설치 후, 아래 명령어로 실행한다.\u003C\u002Fp\u003E\n\u003Cpre class=\"language-bash\"\u003E\u003C!-- HTML_TAG_START --\u003E\u003Ccode class=\"language-bash\"\u003Egolint .\u002F\u003Cspan class=\"token punctuation\"\u003E..\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C!-- HTML_TAG_END --\u003E\u003C\u002Fpre\u003E\n\u003Cbr\u003E\n\u003Cp\u003E\u003Ccode\u003Ego vet\u003C\u002Fcode\u003E 명령어는 사용되지 않은 변수나, 함수 인자의 잘못된 전달 등의 오류를 잡아준다.\u003C\u002Fp\u003E\n\u003Cpre class=\"language-bash\"\u003E\u003C!-- HTML_TAG_START --\u003E\u003Ccode class=\"language-bash\"\u003Ego vet .\u002F\u003Cspan class=\"token punctuation\"\u003E..\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C!-- HTML_TAG_END --\u003E\u003C\u002Fpre\u003E\n\u003Cbr\u003E\n\u003Cp\u003E위 두 가지 명령어를 동시에 실행하여 주는 써드 파티 도구가 존재한다. \u003Ca href=\"https:\u002F\u002Fgolangci-lint.run\u002Fusage\u002Finstall\u002F\" rel=\"nofollow\"\u003Egolingci-lint\u003C\u002Fa\u003E라는 것인데, 필요하다면 설치해서 써보도록 하자.\u003C\u002Fp\u003E\n\u003Cbr\u003E\u003Cbr\u003E\n\u003Ch2 id=\"vscode\"\u003E\u003Ca aria-hidden=\"true\" tabindex=\"-1\" href=\"#vscode\"\u003E\u003Cspan class=\"icon icon-link\"\u003E\u003C\u002Fspan\u003E\u003C\u002Fa\u003EVSCode\u003C\u002Fh2\u003E\n\u003Chr\u003E\n\u003Cp\u003E본인은 개발환경을 VSCode로 잡았는데, 당연히 Go 확장을 설치해주었다.\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cimg src=\"https:\u002F\u002Fraw.githubusercontent.com\u002Fjunhyuk0801\u002Fjunhyuk0801.github.io\u002Fpost-pictures\u002Fpictures\u002FGolang%20Basics\u002FGolang\u002FGO1\u002F1.PNG\" alt=\"PIC\"\u003E\u003C\u002Fp\u003E\n\u003Cbr\u003E\n\u003Cp\u003E이외에도, \u003Cem\u003Esetting.json\u003C\u002Fem\u003E을 열어 아래 설정들을 추가해주었다.\u003C\u002Fp\u003E\n\u003Cpre class=\"language-json\"\u003E\u003C!-- HTML_TAG_START --\u003E\u003Ccode class=\"language-json\"\u003E\u003Cspan class=\"token property\"\u003E\"go.lintOnSave\"\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E\"file\"\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E\n\u003Cspan class=\"token property\"\u003E\"go.vetOnSave\"\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E\"package\"\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E\n\u003Cspan class=\"token property\"\u003E\"[go]\"\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n    \u003Cspan class=\"token property\"\u003E\"editor.insertSpaces\"\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token boolean\"\u003Etrue\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E\n    \u003Cspan class=\"token property\"\u003E\"editor.formatOnSave\"\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token boolean\"\u003Etrue\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E\n    \u003Cspan class=\"token property\"\u003E\"editor.defaultFormatter\"\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E\"golang.go\"\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C!-- HTML_TAG_END --\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E이와 같이 설정하면, \u003Ccode\u003ECtrl + S\u003C\u002Fcode\u003E를 눌러 저장할 때마다 자동으로 \u003Ccode\u003Efmt\u003C\u002Fcode\u003E, \u003Ccode\u003Elint\u003C\u002Fcode\u003E, \u003Ccode\u003Evet\u003C\u002Fcode\u003E을 실행해주기 때문에 엄청 편리하다.\u003C\u002Fp\u003E\n\u003Cbr\u003E\u003Cbr\u003E\n\u003Ch2 id=\"references\"\u003E\u003Ca aria-hidden=\"true\" tabindex=\"-1\" href=\"#references\"\u003E\u003Cspan class=\"icon icon-link\"\u003E\u003C\u002Fspan\u003E\u003C\u002Fa\u003EReferences\u003C\u002Fh2\u003E\n\u003Chr\u003E\n\u003Ccenter\u003E\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Flearning.oreilly.com\u002Flibrary\u002Fview\u002Flearning-go\u002F9781492077206\u002F\" rel=\"nofollow\"\u003E\u003Cimg src=\"https:\u002F\u002Flearning.oreilly.com\u002Fcovers\u002Furn:orm:book:9781492077206\u002F400w\u002F\"\u003E\u003C\u002Fa\u003E \u003Cbr\u003E\n\u003Ca href=\"https:\u002F\u002Flearning.oreilly.com\u002Flibrary\u002Fview\u002Flearning-go\u002F9781492077206\u002F\" rel=\"nofollow\"\u003EJon Bodner, 『Learning Go』, O’Reilly Media, Inc.\u003C\u002Fa\u003E\u003C\u002Fp\u003E\u003C\u002Fcenter\u003E\n\u003Cbr\u003E\u003Cbr\u003E",{"title":3,"date":4,"excerpt":5,"categories":6,"coverImage":8,"coverWidth":9,"coverHeight":10,"slug":11},"개발환경설정","2022-07-19T00:00:00.000Z","Setting up Golang development environment",[7],"Golang","\u002Fpost_img\u002FGolang_basics\u002Fcover.png",16,9,"GO1"],"uses":{"params":["post"]}}]}