{"type":"data","nodes":[null,{"type":"data","data":[{"PostContent":1,"meta":2},"\u003Cbr\u003E\n\u003Cp\u003E본 글은 Golang을 공부하며 주요 내용이라 생각되는 것들을 기록해둔 자료이며, Ubuntu 20.04 LTS 기준으로 작성되었습니다.\u003C\u002Fp\u003E\n\u003Cbr\u003E\u003Cbr\u003E\n\u003Ch2 id=\"types\"\u003E\u003Ca aria-hidden=\"true\" tabindex=\"-1\" href=\"#types\"\u003E\u003Cspan class=\"icon icon-link\"\u003E\u003C\u002Fspan\u003E\u003C\u002Fa\u003ETypes\u003C\u002Fh2\u003E\n\u003Chr\u003E\n\u003Cp\u003EGo에는 Class나 상속과 같은 개념이 개념이 존재하지 않는다. 대신 타입을 정의하고자 하는 경우, \u003Ccode\u003Etype\u003C\u002Fcode\u003E 키워드를 사용하여 정의한다.\u003C\u002Fp\u003E\n\u003Cpre class=\"language-go\"\u003E\u003C!-- HTML_TAG_START --\u003E\u003Ccode class=\"language-go\"\u003E\u003Cspan class=\"token keyword\"\u003Etype\u003C\u002Fspan\u003E Person \u003Cspan class=\"token keyword\"\u003Estruct\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n    FirstName \u003Cspan class=\"token builtin\"\u003Estring\u003C\u002Fspan\u003E\n    LastName  \u003Cspan class=\"token builtin\"\u003Estring\u003C\u002Fspan\u003E\n    Age       \u003Cspan class=\"token builtin\"\u003Eint\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\n\u003Cspan class=\"token keyword\"\u003Etype\u003C\u002Fspan\u003E Score \u003Cspan class=\"token builtin\"\u003Eint\u003C\u002Fspan\u003E\n\u003Cspan class=\"token keyword\"\u003Etype\u003C\u002Fspan\u003E Converter \u003Cspan class=\"token keyword\"\u003Efunc\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token builtin\"\u003Estring\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E Score\n\u003Cspan class=\"token keyword\"\u003Etype\u003C\u002Fspan\u003E TeamScores \u003Cspan class=\"token keyword\"\u003Emap\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"token builtin\"\u003Estring\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E]\u003C\u002Fspan\u003EScore\n\u003Cspan class=\"token keyword\"\u003Etype\u003C\u002Fspan\u003E Employee Person\u003C\u002Fcode\u003E\u003C!-- HTML_TAG_END --\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E위처럼 정의된 타입들은 이들이 정의된 스코프 내에서만 정의 가능하다.\u003C\u002Fp\u003E\n\u003Cbr\u003E\n\u003Cp\u003E한 가지 짚고 넘어가야 할 점은, 위 예제의 \u003Ccode\u003EScore\u003C\u002Fcode\u003E 타입의 경우 사실상 \u003Ccode\u003Eint\u003C\u002Fcode\u003E와 동일한 타입이다.\n그럼에도 위와 같이 타입명을 지정해준 것은 타입명 자체를 일종의 \u003Cstrong\u003Edocumentation\u003C\u002Fstrong\u003E으로 볼 수 있기 때문이다.\u003C\u002Fp\u003E\n\u003Cp\u003E이러한 타입 지정은 해당 타입의 변수 또는 인스턴스가 코드 내에서 어떠한 역할을 하며,\n어떠한 데이터를 저장할 지에 대한 정보를 제공할 수 있다.\n위 예제에서 \u003Ccode\u003EScore\u003C\u002Fcode\u003E는 \u003Ccode\u003Eint\u003C\u002Fcode\u003E와 똑같은 정수 타입이기는 해도, 무식하게 큰 정수나 음수인 값에 대해서는 유효하지 않은 값임을 파악할 수 있을 것이다.\u003C\u002Fp\u003E\n\u003Cp\u003E위 예제의 \u003Ccode\u003EEmployee\u003C\u002Fcode\u003E은 유저가 정의한 타입을 다시 정의한 경우인데, 이 또한 같은 맥락에서 바라볼 수 있다.\n저장하고 있는 데이터의 종류는 같을지라도, 이들이 사용되어야 할 적합한 맥락에 대해서 정보를 제공할 수 있다.\u003C\u002Fp\u003E\n\u003Cbr\u003E\u003Cbr\u003E\n\u003Ch3 id=\"inheritance-in-go\"\u003E\u003Ca aria-hidden=\"true\" tabindex=\"-1\" href=\"#inheritance-in-go\"\u003E\u003Cspan class=\"icon icon-link\"\u003E\u003C\u002Fspan\u003E\u003C\u002Fa\u003EInheritance in Go?\u003C\u002Fh3\u003E\n\u003Cp\u003EGo에는 객체지향과 상속 개념이 없다. type을 선언할 수 있지만, 이는 말 그대로 어디까지나 선언만 할 수 있는 것이다.\u003C\u002Fp\u003E\n\u003Cpre class=\"language-go\"\u003E\u003C!-- HTML_TAG_START --\u003E\u003Ccode class=\"language-go\"\u003E\u003Cspan class=\"token keyword\"\u003Etype\u003C\u002Fspan\u003E HighScore Score\n\u003Cspan class=\"token keyword\"\u003Etype\u003C\u002Fspan\u003E Employee Person\u003C\u002Fcode\u003E\u003C!-- HTML_TAG_END --\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E위와 같은 \u003Ccode\u003Etype\u003C\u002Fcode\u003E 선언은 상속처럼 보일 수는 있지만, 엄연히 다르다. 실질적으로는 이름만 다른 동일한 타입이 두 개 선언되는 것.\n이들 사이에는 어떠한 계층 구조도 존재하지 않는다.\u003C\u002Fp\u003E\n\u003Cp\u003E객체지향에서 \u003Cem\u003Echild class\u003C\u002Fem\u003E는 \u003Cem\u003Eparent class\u003C\u002Fem\u003E가 가진 모든 메소드와 값들을 사용할 수 있어야 하며, parent class가 사용되는 곳 어디에든 사용될 수 있어야 한다.\n반면 Go에서는, 위 예제의 \u003Ccode\u003EScore\u003C\u002Fcode\u003E 인스턴스가 사용되는 상황에서 \u003Ccode\u003EHighScore\u003C\u002Fcode\u003E 인스턴스를 사용하려면 타입 변환을 해주어야 한다.\u003C\u002Fp\u003E\n\u003Cpre class=\"language-go\"\u003E\u003C!-- HTML_TAG_START --\u003E\u003Ccode class=\"language-go\"\u003E\u003Cspan class=\"token comment\"\u003E\u002F\u002F assigning untyped constants is valid\u003C\u002Fspan\u003E\n\u003Cspan class=\"token keyword\"\u003Evar\u003C\u002Fspan\u003E i \u003Cspan class=\"token builtin\"\u003Eint\u003C\u002Fspan\u003E \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E300\u003C\u002Fspan\u003E\n\u003Cspan class=\"token keyword\"\u003Evar\u003C\u002Fspan\u003E s Score \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E100\u003C\u002Fspan\u003E\n\u003Cspan class=\"token keyword\"\u003Evar\u003C\u002Fspan\u003E hs HighScore \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E200\u003C\u002Fspan\u003E\nhs \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E s                  \u003Cspan class=\"token comment\"\u003E\u002F\u002F compilation error!\u003C\u002Fspan\u003E\ns \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E i                   \u003Cspan class=\"token comment\"\u003E\u002F\u002F compilation error!\u003C\u002Fspan\u003E\ns \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003EScore\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Ei\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E            \u003Cspan class=\"token comment\"\u003E\u002F\u002F ok\u003C\u002Fspan\u003E\nhs \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003EHighScore\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Es\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E       \u003Cspan class=\"token comment\"\u003E\u002F\u002F ok\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C!-- HTML_TAG_END --\u003E\u003C\u002Fpre\u003E\n\u003Cbr\u003E\u003Cbr\u003E\n\u003Ch3 id=\"enumeration-in-go---iota\"\u003E\u003Ca aria-hidden=\"true\" tabindex=\"-1\" href=\"#enumeration-in-go---iota\"\u003E\u003Cspan class=\"icon icon-link\"\u003E\u003C\u002Fspan\u003E\u003C\u002Fa\u003EEnumeration in Go - iota\u003C\u002Fh3\u003E\n\u003Cp\u003E여러 프로그래밍 언어에 존재하는 \u003Cem\u003EEnumeration\u003C\u002Fem\u003E에 대한 개념 대신, Go에는 \u003Ccode\u003Eiota\u003C\u002Fcode\u003E가 존재한다. 바로 예제를 확인해보자.\u003C\u002Fp\u003E\n\u003Cpre class=\"language-go\"\u003E\u003C!-- HTML_TAG_START --\u003E\u003Ccode class=\"language-go\"\u003E\t\u003Cspan class=\"token keyword\"\u003Etype\u003C\u002Fspan\u003E MailCategory \u003Cspan class=\"token builtin\"\u003Eint\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token keyword\"\u003Econst\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\n\t\tUncategorized MailCategory \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token boolean\"\u003Eiota\u003C\u002Fspan\u003E \u003Cspan class=\"token comment\"\u003E\u002F\u002F 0\u003C\u002Fspan\u003E\n\t\tPersonal                          \u003Cspan class=\"token comment\"\u003E\u002F\u002F 1\u003C\u002Fspan\u003E\n\t\tSpam                              \u003Cspan class=\"token comment\"\u003E\u002F\u002F 2\u003C\u002Fspan\u003E\n\t\tSocial                            \u003Cspan class=\"token comment\"\u003E\u002F\u002F 3\u003C\u002Fspan\u003E\n\t\tAdvertisement                     \u003Cspan class=\"token comment\"\u003E\u002F\u002F 4\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\n\tfmt\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EPrintln\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003EUncategorized\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E Personal\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E Spam\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E Social\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E Advertisement\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C!-- HTML_TAG_END --\u003E\u003C\u002Fpre\u003E\n\u003Cpre class=\"language-bash\"\u003E\u003C!-- HTML_TAG_START --\u003E\u003Ccode class=\"language-bash\"\u003E\u003Cspan class=\"token number\"\u003E0\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E1\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E2\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E3\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E4\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C!-- HTML_TAG_END --\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E위 예제의 실행 결과를 확인해보면, 0부터 4까지의 수가 순서대로 할당되었음을 알 수 있다.\n이는 \u003Ccode\u003Eiota\u003C\u002Fcode\u003E가 첫 번째 상수인 \u003Ccode\u003EUncategorized\u003C\u002Fcode\u003E에 0, 두 번째 상수인 \u003Ccode\u003EPersonal\u003C\u002Fcode\u003E에 1, 이런 식으로 점점 증가되게끔 값을 할당하였기 때문이다.\n또한, 만일 새로운 \u003Ccode\u003Econst\u003C\u002Fcode\u003E 선언 블록이 존재할 경우, iota는 0이 될 것이다.\u003C\u002Fp\u003E\n\u003Cbr\u003E\n\u003Cpre class=\"language-go\"\u003E\u003C!-- HTML_TAG_START --\u003E\u003Ccode class=\"language-go\"\u003E\t\u003Cspan class=\"token keyword\"\u003Etype\u003C\u002Fspan\u003E BitField \u003Cspan class=\"token builtin\"\u003Eint\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token keyword\"\u003Econst\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\n\t\tField1 BitField \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E1\u003C\u002Fspan\u003E \u003Cspan class=\"token operator\"\u003E&lt;&lt;\u003C\u002Fspan\u003E \u003Cspan class=\"token boolean\"\u003Eiota\u003C\u002Fspan\u003E \u003Cspan class=\"token comment\"\u003E\u002F\u002F assigned 1\u003C\u002Fspan\u003E\n\t\tField2                      \u003Cspan class=\"token comment\"\u003E\u002F\u002F assigned 2\u003C\u002Fspan\u003E\n\t\tField3                      \u003Cspan class=\"token comment\"\u003E\u002F\u002F assigned 4\u003C\u002Fspan\u003E\n\t\tField4                      \u003Cspan class=\"token comment\"\u003E\u002F\u002F assigned 8\u003C\u002Fspan\u003E\n\t\t\u003Cspan class=\"token boolean\"\u003E_\u003C\u002Fspan\u003E                           \u003Cspan class=\"token comment\"\u003E\u002F\u002F passed 16\u003C\u002Fspan\u003E\n\t\tField6                      \u003Cspan class=\"token comment\"\u003E\u002F\u002F assigned 32\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\n\tfmt\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EPrintln\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003EField1\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E Field2\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E Field3\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E Field4\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E Field6\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C!-- HTML_TAG_END --\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E\u003Ccode\u003E_\u003C\u002Fcode\u003E를 이용하면 iota로 할당되는 값을 건너뛸 수 있다.\n또한 \u003Ccode\u003Eiota\u003C\u002Fcode\u003E를 사용할 때 위와 같은 표현식을 사용하여 값들을 할당할 수도 있다.\n다만 이런 경우, 무슨 목적으로 이런 코드를 짰는지 잘 명시해주는 것이 좋겠다.\u003C\u002Fp\u003E\n\u003Cbr\u003E\n\u003Cp\u003E단 \u003Ccode\u003Eiota\u003C\u002Fcode\u003E를 사용하려면 \u003Ccode\u003Eiota\u003C\u002Fcode\u003E에 의해서 할당되는 값이 큰 의미가 없는 경우여야 한다.\n0, 1, 2, … 등 \u003Ccode\u003Eiota\u003C\u002Fcode\u003E에 의해 할당되는 값들은 단순히 서로를 구분하기 위해서 사용되는 값일 뿐이며, 이 값을 직접적으로 사용해선 안된다.\n만일 \u003Ccode\u003Eiota\u003C\u002Fcode\u003E를 사용하는 \u003Ccode\u003Econst\u003C\u002Fcode\u003E 블록 중간에 새로운 상수를 추가하면 값들이 전체적으로 바뀔 것이다.\n이 때 \u003Ccode\u003Eiota\u003C\u002Fcode\u003E에 의해 할당되는 값을 직접적으로 사용한다면 이에 영향을 받을 것이다.\u003C\u002Fp\u003E\n\u003Cp\u003E특정 인터페이스와 직접적으로 관련되어있지 않은 내부적인 로직에서 사용하는 것이 좋다.\n만약 어느 \u003Ccode\u003Estruct\u003C\u002Fcode\u003E 타입에 \u003Ccode\u003Eiota\u003C\u002Fcode\u003E를 사용하는 Enumeration 필드가 존재하고, 해당 인스턴스들이 DB에 저장되어있다고 가정해보자.\n그런데 \u003Ccode\u003Eiota\u003C\u002Fcode\u003E를 사용하는 \u003Ccode\u003Econst\u003C\u002Fcode\u003E 블록 중간에 새로운 상수를 추가하면 DB에 저장된 값들이 완전히 다른 값을 가리키게 될 것이다.\u003C\u002Fp\u003E\n\u003Cp\u003E따라서 상수의 값이 중요한 경우이거나 내부적인 로직에서 사용하는 것이 아니라면 \u003Ccode\u003Eiota\u003C\u002Fcode\u003E를 쓰지 말고 그냥 값을 직접 할당해주는 편이 좋다.\n그게 아니라면 문서를 잘 써놓자.\u003C\u002Fp\u003E\n\u003Cbr\u003E\u003Cbr\u003E\n\u003Ch2 id=\"methods\"\u003E\u003Ca aria-hidden=\"true\" tabindex=\"-1\" href=\"#methods\"\u003E\u003Cspan class=\"icon icon-link\"\u003E\u003C\u002Fspan\u003E\u003C\u002Fa\u003EMethods\u003C\u002Fh2\u003E\n\u003Chr\u003E\n\u003Cp\u003EGo에서는 \u003Cem\u003EUser-defined type\u003C\u002Fem\u003E에 대해 메소드를 생성할 수 있다.\n일반적인 함수 선언과 유사하지만, \u003Ccode\u003Efunc\u003C\u002Fcode\u003E와 메소드명 사이에 \u003Cstrong\u003Ereceiver\u003C\u002Fstrong\u003E를 명시해준다.\n보통의 변수 선언처럼 변수명을 먼저 적고 타입을 뒤에 적는다.\n일반적으로는 타입명의 맨 앞글자를 소문자로 적는다고 한다.\u003C\u002Fp\u003E\n\u003Cpre class=\"language-go\"\u003E\u003C!-- HTML_TAG_START --\u003E\u003Ccode class=\"language-go\"\u003E\u003Cspan class=\"token keyword\"\u003Etype\u003C\u002Fspan\u003E Person \u003Cspan class=\"token keyword\"\u003Estruct\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n\tFirstName \u003Cspan class=\"token builtin\"\u003Estring\u003C\u002Fspan\u003E\n\tLastName  \u003Cspan class=\"token builtin\"\u003Estring\u003C\u002Fspan\u003E\n\tAge       \u003Cspan class=\"token builtin\"\u003Eint\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"token comment\"\u003E\u002F\u002F defining methods for user-defined type\u003C\u002Fspan\u003E\n\u003Cspan class=\"token keyword\"\u003Efunc\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Ep Person\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003EString\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token builtin\"\u003Estring\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E \u003Cspan class=\"token comment\"\u003E\u002F\u002F The receiver appears between the keyword func and the name of the method\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token keyword\"\u003Ereturn\u003C\u002Fspan\u003E fmt\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003ESprintf\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token string\"\u003E\"%s %s, age %d\"\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E p\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003EFirstName\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E p\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003ELastName\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E p\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003EAge\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"token keyword\"\u003Efunc\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003Emain\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n\tp \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E Person\u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n\t\tFirstName\u003Cspan class=\"token punctuation\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E\"Fred\"\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E\n\t\tLastName\u003Cspan class=\"token punctuation\"\u003E:\u003C\u002Fspan\u003E  \u003Cspan class=\"token string\"\u003E\"Fredson\"\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E\n\t\tAge\u003Cspan class=\"token punctuation\"\u003E:\u003C\u002Fspan\u003E       \u003Cspan class=\"token number\"\u003E52\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\n    \u003Cspan class=\"token comment\"\u003E\u002F\u002F method invocations look familiar to those who have used methods in other languages\u003C\u002Fspan\u003E\n\toutput \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E p\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EString\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\tfmt\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EPrintln\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Eoutput\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C!-- HTML_TAG_END --\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003EGo에서는 함수 오버로딩을 지원하지 않으며, 메소드도 동일하다.\n동일한 타입에서 두개 이상의 동일한 이름을 가진 메소드를 선언할 수 없다.\u003C\u002Fp\u003E\n\u003Cp\u003E또한 타입과 이에 대한 메소드가 선언된 파일을 서로 분리할 수는 있지만, 같은 파일 에서 함께 선언하는 것이 권장된다고 한다.\u003C\u002Fp\u003E\n\u003Cbr\u003E\u003Cbr\u003E\n\u003Ch3 id=\"pointer-receivers\"\u003E\u003Ca aria-hidden=\"true\" tabindex=\"-1\" href=\"#pointer-receivers\"\u003E\u003Cspan class=\"icon icon-link\"\u003E\u003C\u002Fspan\u003E\u003C\u002Fa\u003EPointer Receivers\u003C\u002Fh3\u003E\n\u003Cp\u003E함수에서 포인터 파라미터를 사용할 때처럼, \u003Cem\u003EReceiver\u003C\u002Fem\u003E에도 포인터를 사용할 수 있다.\n이 때 \u003Cem\u003EValue Receiver\u003C\u002Fem\u003E를 사용할 때와의 차이점은 \u003Cem\u003EReceiver\u003C\u002Fem\u003E로 패스한 값이 변경될 수 있다는 것이다.\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cem\u003EPointer Reciver\u003C\u002Fem\u003E에 대한 몇 가지 규칙이 존재한다.\u003C\u002Fp\u003E\n\u003Col\u003E\u003Cli\u003E메소드가 \u003Cem\u003EReciver\u003C\u002Fem\u003E 값을 변경한다면, 반드시 \u003Cem\u003EPointer Reciver\u003C\u002Fem\u003E를 사용한다.\u003C\u002Fli\u003E\n\u003Cli\u003E메소드가 \u003Ccode\u003Enil\u003C\u002Fcode\u003E 인스턴스를 다뤄야 한다면, 반드시 \u003Cem\u003EPointer Reciver\u003C\u002Fem\u003E를 사용한다.\u003C\u002Fli\u003E\n\u003Cli\u003E메소드가 \u003Cem\u003EReciver\u003C\u002Fem\u003E 값을 변경하지 않는다면, \u003Cem\u003EValue Reciver\u003C\u002Fem\u003E를 사용할 수 있다.\u003C\u002Fli\u003E\u003C\u002Fol\u003E\n\u003Cp\u003E\u003Cem\u003EReciver\u003C\u002Fem\u003E 값을 변경하지 않는 메소드에 대해서도 \u003Cem\u003EPointer Reciver\u003C\u002Fem\u003E를 사용하는 것이 국룰이라고 한다.\n다만 난 잘 모르겠다. 개인적으로는 값을 변경하지 않는다면 명시적으로 \u003Cem\u003EValue Reciver\u003C\u002Fem\u003E를 써도 되는 거 아닌가 싶다.\u003C\u002Fp\u003E\n\u003Cbr\u003E\n\u003Cpre class=\"language-go\"\u003E\u003C!-- HTML_TAG_START --\u003E\u003Ccode class=\"language-go\"\u003E\u003Cspan class=\"token keyword\"\u003Etype\u003C\u002Fspan\u003E Counter \u003Cspan class=\"token keyword\"\u003Estruct\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n\ttotal       \u003Cspan class=\"token builtin\"\u003Eint\u003C\u002Fspan\u003E\n\tlastUpdated time\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003ETime\n\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"token comment\"\u003E\u002F\u002F pointer receiver should be used when the method modifies the receiver or handles nil instances\u003C\u002Fspan\u003E\n\u003Cspan class=\"token keyword\"\u003Efunc\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Ec \u003Cspan class=\"token operator\"\u003E*\u003C\u002Fspan\u003ECounter\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003EIncrement\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n\tc\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003Etotal\u003Cspan class=\"token operator\"\u003E++\u003C\u002Fspan\u003E\n\tc\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003ElastUpdated \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E time\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003ENow\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"token comment\"\u003E\u002F\u002F value receiver can be used when the method doesn't modify the receiver\u003C\u002Fspan\u003E\n\u003Cspan class=\"token keyword\"\u003Efunc\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Ec Counter\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003EString\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token builtin\"\u003Estring\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token keyword\"\u003Ereturn\u003C\u002Fspan\u003E fmt\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003ESprintf\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token string\"\u003E\"total: %d, last updated: %v\"\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E c\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003Etotal\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E c\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003ElastUpdated\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"token keyword\"\u003Efunc\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003Emain\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token keyword\"\u003Evar\u003C\u002Fspan\u003E c Counter\n\tfmt\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EPrintln\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Ec\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EString\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token comment\"\u003E\u002F\u002F Go automatically converts it to a pointer type.\u003C\u002Fspan\u003E\n\tc\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EIncrement\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token comment\"\u003E\u002F\u002Fc.Increment() is converted to (&amp;c).Increment()\u003C\u002Fspan\u003E\n\tfmt\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EPrintln\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Ec\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EString\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C!-- HTML_TAG_END --\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E함수에 포인터 파라미터를 넘길 때와는 달리, Receiver에 \u003Ccode\u003E&amp;\u003C\u002Fcode\u003E를 붙이지 않아도 된다.\n위 \u003Ccode\u003Ec.Increment()\u003C\u002Fcode\u003E 부분은 자동으로 \u003Ccode\u003E(&amp;c).Increment()\u003C\u002Fcode\u003E로 변환된다.\n아래 코드는 예제의 실행 결과이다.\u003C\u002Fp\u003E\n\u003Cpre class=\"language-bash\"\u003E\u003C!-- HTML_TAG_START --\u003E\u003Ccode class=\"language-bash\"\u003Etotal: \u003Cspan class=\"token number\"\u003E0\u003C\u002Fspan\u003E, last updated: 0001-01-01 00:00:00 +0000 UTC\ntotal: \u003Cspan class=\"token number\"\u003E1\u003C\u002Fspan\u003E, last updated: \u003Cspan class=\"token number\"\u003E2022\u003C\u002Fspan\u003E-08-10 \u003Cspan class=\"token number\"\u003E17\u003C\u002Fspan\u003E:54:27.046864964 +0900 KST \u003Cspan class=\"token assign-left variable\"\u003Em\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E+0.000053109\u003C\u002Fcode\u003E\u003C!-- HTML_TAG_END --\u003E\u003C\u002Fpre\u003E\n\u003Cbr\u003E\n\u003Cp\u003E이러한 규칙들에 대해 잘 이해하면, 아래 예제의 실행 결과도 알 수 있을 것이다.\u003C\u002Fp\u003E\n\u003Cpre class=\"language-go\"\u003E\u003C!-- HTML_TAG_START --\u003E\u003Ccode class=\"language-go\"\u003E\u003Cspan class=\"token keyword\"\u003Efunc\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003EdoUpdateWrong\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Ec Counter\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n    c\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EIncrement\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n    fmt\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EPrintln\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token string\"\u003E\"in doUpdateWrong:\"\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E c\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EString\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"token keyword\"\u003Efunc\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003EdoUpdateRight\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Ec \u003Cspan class=\"token operator\"\u003E*\u003C\u002Fspan\u003ECounter\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n    c\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EIncrement\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n    fmt\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EPrintln\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token string\"\u003E\"in doUpdateRight:\"\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E c\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EString\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"token keyword\"\u003Efunc\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003Emain\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n    \u003Cspan class=\"token keyword\"\u003Evar\u003C\u002Fspan\u003E c Counter\n    \u003Cspan class=\"token function\"\u003EdoUpdateWrong\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Ec\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n    fmt\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EPrintln\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token string\"\u003E\"in main:\"\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E c\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EString\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n    \u003Cspan class=\"token function\"\u003EdoUpdateRight\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E&amp;\u003C\u002Fspan\u003Ec\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n    fmt\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EPrintln\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token string\"\u003E\"in main:\"\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E c\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EString\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C!-- HTML_TAG_END --\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E\u003Ccode\u003EdoUpdateWrong()\u003C\u002Fcode\u003E 함수의 스코프 내에서 \u003Ccode\u003Ec.Increment()\u003C\u002Fcode\u003E를 호출시 \u003Ccode\u003Ec\u003C\u002Fcode\u003E가 변경되고, 그 결과가 이후 출력에서 반영된다.\n하지만 \u003Ccode\u003EdoUpdateWrong()\u003C\u002Fcode\u003E 함수는 파라미터인 \u003Ccode\u003ECounter\u003C\u002Fcode\u003E를 \u003Cem\u003Epass by value\u003C\u002Fem\u003E로 받았기 때문에 \u003Ccode\u003Emain()\u003C\u002Fcode\u003E 함수로 되돌아왔을 때 변경사항이 유지되지 않는다.\n반면 \u003Ccode\u003EdoUpdateWrong()\u003C\u002Fcode\u003E 함수는 파라미터를 \u003Cem\u003Epass by pointer\u003C\u002Fem\u003E로 받았기에, 변경사항이 유지된다.\u003C\u002Fp\u003E\n\u003Cp\u003E위 예제의 실행 결과는 아래와 같다.\u003C\u002Fp\u003E\n\u003Cpre class=\"language-bash\"\u003E\u003C!-- HTML_TAG_START --\u003E\u003Ccode class=\"language-bash\"\u003E\u003Cspan class=\"token keyword\"\u003Ein\u003C\u002Fspan\u003E doUpdateWrong: total: \u003Cspan class=\"token number\"\u003E1\u003C\u002Fspan\u003E, last updated: \u003Cspan class=\"token number\"\u003E2022\u003C\u002Fspan\u003E-08-11 01:35:23.983808201 +0900 KST \u003Cspan class=\"token assign-left variable\"\u003Em\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E+0.000097936\n\u003Cspan class=\"token keyword\"\u003Ein\u003C\u002Fspan\u003E main: total: \u003Cspan class=\"token number\"\u003E0\u003C\u002Fspan\u003E, last updated: 0001-01-01 00:00:00 +0000 UTC\n\u003Cspan class=\"token keyword\"\u003Ein\u003C\u002Fspan\u003E doUpdateRight: total: \u003Cspan class=\"token number\"\u003E1\u003C\u002Fspan\u003E, last updated: \u003Cspan class=\"token number\"\u003E2022\u003C\u002Fspan\u003E-08-11 01:35:23.983813841 +0900 KST \u003Cspan class=\"token assign-left variable\"\u003Em\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E+0.000103576\n\u003Cspan class=\"token keyword\"\u003Ein\u003C\u002Fspan\u003E main: total: \u003Cspan class=\"token number\"\u003E1\u003C\u002Fspan\u003E, last updated: \u003Cspan class=\"token number\"\u003E2022\u003C\u002Fspan\u003E-08-11 01:35:23.983813841 +0900 KST \u003Cspan class=\"token assign-left variable\"\u003Em\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E+0.000103576\u003C\u002Fcode\u003E\u003C!-- HTML_TAG_END --\u003E\u003C\u002Fpre\u003E\n\u003Cbr\u003E\n\u003Cp\u003E이렇게 유저가 정의한 타입에 Method를 통해 \u003Cem\u003EGetter\u003C\u002Fem\u003E나, \u003Cem\u003EPointer Reciver\u003C\u002Fem\u003E를 이용하여 \u003Cem\u003ESetter\u003C\u002Fem\u003E를 정의할 수는 있다.\n다만 필드에 직접 값을 할당하는 경우가 아니거나, 여러 필드를 한 번의 오퍼레이션으로 처리해야 하는 경우가 아니라면,\nGo에서는 되도록이면 필드값에 직접 접근하는 것을 권장한다.\u003C\u002Fp\u003E\n\u003Cbr\u003E\u003Cbr\u003E\n\u003Cp\u003E\u003Cem\u003EPointer Reciver\u003C\u002Fem\u003E는 \u003Ccode\u003Enil\u003C\u002Fcode\u003E 인스턴스를 다뤄야 할 때 사용할 수 있다.\u003C\u002Fp\u003E\n\u003Cp\u003E다른 언어들의 경우 \u003Ccode\u003Enull\u003C\u002Fcode\u003E이나 \u003Ccode\u003ENone\u003C\u002Fcode\u003E 인스턴스에서 메소드를 호출하면 에러가 발생한다.\nGo에서도 \u003Ccode\u003Enil\u003C\u002Fcode\u003E 인스턴스에서 메소드를 호출할 때 \u003Cem\u003EValue Reciver\u003C\u002Fem\u003E인 경우에는 \u003Cem\u003Epanic\u003C\u002Fem\u003E이 발생하지만, \u003Cem\u003EPointer Reciver\u003C\u002Fem\u003E인 경우 메소드가 정상적으로 호출된다.\n이 경우, 메소드가 \u003Ccode\u003Enil\u003C\u002Fcode\u003E 인스턴스를 처리할 수 있게끔 작성되어 있어야 한다.\u003C\u002Fp\u003E\n\u003Cpre class=\"language-go\"\u003E\u003C!-- HTML_TAG_START --\u003E\u003Ccode class=\"language-go\"\u003E\u003Cspan class=\"token keyword\"\u003Etype\u003C\u002Fspan\u003E IntTree \u003Cspan class=\"token keyword\"\u003Estruct\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n\tval         \u003Cspan class=\"token builtin\"\u003Eint\u003C\u002Fspan\u003E\n\tleft\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E right \u003Cspan class=\"token operator\"\u003E*\u003C\u002Fspan\u003EIntTree\n\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"token keyword\"\u003Efunc\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Eit \u003Cspan class=\"token operator\"\u003E*\u003C\u002Fspan\u003EIntTree\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003EInsert\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Eval \u003Cspan class=\"token builtin\"\u003Eint\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token operator\"\u003E*\u003C\u002Fspan\u003EIntTree \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token keyword\"\u003Eif\u003C\u002Fspan\u003E it \u003Cspan class=\"token operator\"\u003E==\u003C\u002Fspan\u003E \u003Cspan class=\"token boolean\"\u003Enil\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E \u003Cspan class=\"token comment\"\u003E\u002F\u002F case that handles when the receiver is a nil instance\u003C\u002Fspan\u003E\n\t\t\u003Cspan class=\"token keyword\"\u003Ereturn\u003C\u002Fspan\u003E \u003Cspan class=\"token operator\"\u003E&amp;\u003C\u002Fspan\u003EIntTree\u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003Eval\u003Cspan class=\"token punctuation\"\u003E:\u003C\u002Fspan\u003E val\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E \u003Cspan class=\"token comment\"\u003E\u002F\u002F cannot assign its address into receiver directly\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token keyword\"\u003Eif\u003C\u002Fspan\u003E val \u003Cspan class=\"token operator\"\u003E&lt;\u003C\u002Fspan\u003E it\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003Eval \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n\t\tit\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003Eleft \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E it\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003Eleft\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EInsert\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Eval\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E \u003Cspan class=\"token keyword\"\u003Eelse\u003C\u002Fspan\u003E \u003Cspan class=\"token keyword\"\u003Eif\u003C\u002Fspan\u003E val \u003Cspan class=\"token operator\"\u003E\u003E\u003C\u002Fspan\u003E it\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003Eval \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n\t\tit\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003Eright \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E it\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003Eright\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EInsert\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Eval\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token keyword\"\u003Ereturn\u003C\u002Fspan\u003E it\n\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"token keyword\"\u003Efunc\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Eit \u003Cspan class=\"token operator\"\u003E*\u003C\u002Fspan\u003EIntTree\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003EContains\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Eval \u003Cspan class=\"token builtin\"\u003Eint\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token builtin\"\u003Ebool\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token keyword\"\u003Eswitch\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token keyword\"\u003Ecase\u003C\u002Fspan\u003E it \u003Cspan class=\"token operator\"\u003E==\u003C\u002Fspan\u003E \u003Cspan class=\"token boolean\"\u003Enil\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token comment\"\u003E\u002F\u002F case that handles when the receiver is a nil instance\u003C\u002Fspan\u003E\n\t\t\u003Cspan class=\"token keyword\"\u003Ereturn\u003C\u002Fspan\u003E \u003Cspan class=\"token boolean\"\u003Efalse\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token keyword\"\u003Ecase\u003C\u002Fspan\u003E val \u003Cspan class=\"token operator\"\u003E&lt;\u003C\u002Fspan\u003E it\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003Eval\u003Cspan class=\"token punctuation\"\u003E:\u003C\u002Fspan\u003E\n\t\t\u003Cspan class=\"token keyword\"\u003Ereturn\u003C\u002Fspan\u003E it\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003Eleft\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EContains\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Eval\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token keyword\"\u003Ecase\u003C\u002Fspan\u003E val \u003Cspan class=\"token operator\"\u003E\u003E\u003C\u002Fspan\u003E it\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003Eval\u003Cspan class=\"token punctuation\"\u003E:\u003C\u002Fspan\u003E\n\t\t\u003Cspan class=\"token keyword\"\u003Ereturn\u003C\u002Fspan\u003E it\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003Eright\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EContains\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Eval\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token keyword\"\u003Edefault\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E:\u003C\u002Fspan\u003E\n\t\t\u003Cspan class=\"token keyword\"\u003Ereturn\u003C\u002Fspan\u003E \u003Cspan class=\"token boolean\"\u003Etrue\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"token keyword\"\u003Efunc\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003Emain\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token keyword\"\u003Evar\u003C\u002Fspan\u003E it \u003Cspan class=\"token operator\"\u003E*\u003C\u002Fspan\u003EIntTree\n\tit \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E it\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EInsert\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token number\"\u003E5\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\tit \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E it\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EInsert\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token number\"\u003E3\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\tit \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E it\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EInsert\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token number\"\u003E10\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\tit \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E it\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EInsert\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token number\"\u003E2\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\tfmt\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EPrintln\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Eit\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EContains\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token number\"\u003E2\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E  \u003Cspan class=\"token comment\"\u003E\u002F\u002F true\u003C\u002Fspan\u003E\n\tfmt\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EPrintln\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Eit\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EContains\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token number\"\u003E12\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token comment\"\u003E\u002F\u002F false\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C!-- HTML_TAG_END --\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E위 예제는 \u003Ccode\u003Enil\u003C\u002Fcode\u003E 인스턴스를 핸들링할 수 있는 정수형 바이너리 트리의 예제이다.\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Ccode\u003EIntTree.Contains()\u003C\u002Fcode\u003E 메소드는 현재 receiver가 \u003Ccode\u003Enil\u003C\u002Fcode\u003E인지에 따라 해당 값이 포함되어 있는가의 여부를 판단하며\n\u003Ccode\u003EIntTree.Insert()\u003C\u002Fcode\u003E 메소드는 현재 receiver가 \u003Ccode\u003Enil\u003C\u002Fcode\u003E일 경우 현 위치에 값을 추가한 값을 반환한다.\n단, 이때는 포인터 파라미터를 사용할 때처럼 receiver에 특정 주소값을 할당하여도, 원본 포인터가 변경되지는 않는다.\u003C\u002Fp\u003E\n\u003Cbr\u003E\u003Cbr\u003E\n\u003Ch3 id=\"methods-and-functions\"\u003E\u003Ca aria-hidden=\"true\" tabindex=\"-1\" href=\"#methods-and-functions\"\u003E\u003Cspan class=\"icon icon-link\"\u003E\u003C\u002Fspan\u003E\u003C\u002Fa\u003EMethods and Functions\u003C\u002Fh3\u003E\n\u003Cp\u003EGo에서 메소드는 함수와 유사한 점이 많다.\u003C\u002Fp\u003E\n\u003Cpre class=\"language-go\"\u003E\u003C!-- HTML_TAG_START --\u003E\u003Ccode class=\"language-go\"\u003E\u003Cspan class=\"token keyword\"\u003Etype\u003C\u002Fspan\u003E Adder \u003Cspan class=\"token keyword\"\u003Estruct\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n\tstart \u003Cspan class=\"token builtin\"\u003Eint\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"token keyword\"\u003Efunc\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Ea Adder\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003EAddTo\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Eval \u003Cspan class=\"token builtin\"\u003Eint\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token builtin\"\u003Eint\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token keyword\"\u003Ereturn\u003C\u002Fspan\u003E a\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003Estart \u003Cspan class=\"token operator\"\u003E+\u003C\u002Fspan\u003E val\n\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"token keyword\"\u003Efunc\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003Emain\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n\tmyAdder \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E Adder\u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003Estart\u003Cspan class=\"token punctuation\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E10\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\n\tfmt\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EPrintln\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003EmyAdder\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EAddTo\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token number\"\u003E5\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token comment\"\u003E\u002F\u002F prints 15\u003C\u002Fspan\u003E\n\n\tf1 \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E myAdder\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003EAddTo           \u003Cspan class=\"token comment\"\u003E\u002F\u002F We can also assign the method to a variable or pass it to a parameter of type func(int)int\u003C\u002Fspan\u003E\n\tfmt\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EPrintln\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003Ef1\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token number\"\u003E10\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E           \u003Cspan class=\"token comment\"\u003E\u002F\u002F prints 20\u003C\u002Fspan\u003E\n\n\tf2 \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E Adder\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003EAddTo\n\tfmt\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EPrintln\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003Ef2\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003EmyAdder\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E15\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token comment\"\u003E\u002F\u002F prints 25\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C!-- HTML_TAG_END --\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E함수를 변수에 할당하여 사용할 수 있듯, 위 예제의 \u003Ccode\u003Ef1\u003C\u002Fcode\u003E처럼 메소드도 변수에 할당하여 사용할 수 있다.\n이 때 이 메소드의 타입은 \u003Ccode\u003Efunc(int)int\u003C\u002Fcode\u003E가 되며, 이를 \u003Cem\u003Emethod value\u003C\u002Fem\u003E라 한다.\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cem\u003Emethod value\u003C\u002Fem\u003E는 \u003Cem\u003Eclosure\u003C\u002Fem\u003E처럼 파라미터로 넘기거나 할 수도 있다.\n\u003Cem\u003Emethod value\u003C\u002Fem\u003E를 선언할 때 붙어있던 \u003Cem\u003Ereceiver\u003C\u002Fem\u003E가 고정되어 있기 때문에, 이를 호출할 경우 해당 \u003Cem\u003Ereceiver\u003C\u002Fem\u003E가 영향을 받는다.\u003C\u002Fp\u003E\n\u003Cp\u003E위 예제의 \u003Ccode\u003Ef2\u003C\u002Fcode\u003E처럼 그냥 타입명에 메소드를 붙인 것을 변수에 할당할 수도 있다.\n이를 \u003Cem\u003Emethod expression\u003C\u002Fem\u003E이라 한다. 이 때 이 메소드의 타입은 \u003Ccode\u003Efunc(Adder, int) int\u003C\u002Fcode\u003E가 되며, 첫 번째 파라미터가 \u003Cem\u003Ereceiver\u003C\u002Fem\u003E가 된다.\u003C\u002Fp\u003E\n\u003Cp\u003E이렇게 Go에서는 메소드를 함수처럼 사용할 수 있기에 큰 차이가 없기에 어느 것을 사용해야 할지 혼동이 올 수 있다.\n만약 작성하고자 하는 로직이 입력 파라미터에 의해서만 영향을 받는다면 함수를 사용하는 것이 옳다.\n반면 프로그램이 실행되며 설정되고, 실행 중 계속 바뀌는 어떤 값에 의해 로직이 영향을 받을 수 있다.\n그러한 경우 이 값들은 \u003Ccode\u003Estruct\u003C\u002Fcode\u003E에 저장되어야 하고 메소드를 사용하는 것이 좋다.\u003C\u002Fp\u003E\n\u003Cbr\u003E\u003Cbr\u003E\n\u003Ch2 id=\"embedding\"\u003E\u003Ca aria-hidden=\"true\" tabindex=\"-1\" href=\"#embedding\"\u003E\u003Cspan class=\"icon icon-link\"\u003E\u003C\u002Fspan\u003E\u003C\u002Fa\u003EEmbedding\u003C\u002Fh2\u003E\n\u003Chr\u003E\n\u003Cp\u003EGo에는 상속이 없지만 \u003Cstrong\u003EEmbedding\u003C\u002Fstrong\u003E을 통해 구조화된 \u003Ccode\u003Estruct\u003C\u002Fcode\u003E 타입을 구성할 수 있다.\u003C\u002Fp\u003E\n\u003Cp\u003E기본적인 예제는 다음과 같다.\u003C\u002Fp\u003E\n\u003Cpre class=\"language-go\"\u003E\u003C!-- HTML_TAG_START --\u003E\u003Ccode class=\"language-go\"\u003E\u003Cspan class=\"token keyword\"\u003Etype\u003C\u002Fspan\u003E Employee \u003Cspan class=\"token keyword\"\u003Estruct\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n\tName \u003Cspan class=\"token builtin\"\u003Estring\u003C\u002Fspan\u003E\n\tID   \u003Cspan class=\"token builtin\"\u003Estring\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"token keyword\"\u003Efunc\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Ee Employee\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003EDescription\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token builtin\"\u003Estring\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token keyword\"\u003Ereturn\u003C\u002Fspan\u003E fmt\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003ESprintf\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token string\"\u003E\"%s (%s)\"\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E e\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003EName\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E e\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003EID\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"token keyword\"\u003Etype\u003C\u002Fspan\u003E Manager \u003Cspan class=\"token keyword\"\u003Estruct\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token comment\"\u003E\u002F\u002F Employee as an embedded field\u003C\u002Fspan\u003E\n\tEmployee \u003Cspan class=\"token comment\"\u003E\u002F\u002F no name assigned to this filed. only type.\u003C\u002Fspan\u003E\n\tReports  \u003Cspan class=\"token punctuation\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E]\u003C\u002Fspan\u003EEmployee\n\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"token keyword\"\u003Efunc\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Em Manager\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003EFindNewEmployees\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E]\u003C\u002Fspan\u003EEmployee \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token comment\"\u003E\u002F\u002F do business logic\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token keyword\"\u003Ereturn\u003C\u002Fspan\u003E m\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003EReports\n\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"token keyword\"\u003Efunc\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003Emain\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n\tm \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E Manager\u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n\t\tEmployee\u003Cspan class=\"token punctuation\"\u003E:\u003C\u002Fspan\u003E Employee\u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n\t\t\tName\u003Cspan class=\"token punctuation\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E\"Bob Bobson\"\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E\n\t\t\tID\u003Cspan class=\"token punctuation\"\u003E:\u003C\u002Fspan\u003E   \u003Cspan class=\"token string\"\u003E\"12345\"\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E\n\t\t\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E\n\t\tReports\u003Cspan class=\"token punctuation\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E]\u003C\u002Fspan\u003EEmployee\u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\n\tfmt\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EPrintln\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Em\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003EID\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E            \u003Cspan class=\"token comment\"\u003E\u002F\u002F prints 12345\u003C\u002Fspan\u003E\n\tfmt\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EPrintln\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Em\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EDescription\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token comment\"\u003E\u002F\u002F prints Bob Bobson (12345)\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C!-- HTML_TAG_END --\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E\u003Ccode\u003EManager\u003C\u002Fcode\u003E를 정의할 때 \u003Ccode\u003EEmployee\u003C\u002Fcode\u003E를 필드명 없이 선언해줌으로써, \u003Ccode\u003EEmployee\u003C\u002Fcode\u003E는 \u003Ccode\u003EManager\u003C\u002Fcode\u003E의 \u003Cstrong\u003EEmbedded Field\u003C\u002Fstrong\u003E가 된다.\n\u003Ccode\u003EManager\u003C\u002Fcode\u003E에서는 \u003Ccode\u003EEmployee\u003C\u002Fcode\u003E의 필드에 접근할 수 있다.\u003C\u002Fp\u003E\n\u003Cbr\u003E\n\u003Cpre class=\"language-go\"\u003E\u003C!-- HTML_TAG_START --\u003E\u003Ccode class=\"language-go\"\u003E\u003Cspan class=\"token keyword\"\u003Etype\u003C\u002Fspan\u003E Inner \u003Cspan class=\"token keyword\"\u003Estruct\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n    X \u003Cspan class=\"token builtin\"\u003Eint\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"token keyword\"\u003Etype\u003C\u002Fspan\u003E Outer \u003Cspan class=\"token keyword\"\u003Estruct\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n    Inner\n    X \u003Cspan class=\"token builtin\"\u003Eint\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"token keyword\"\u003Efunc\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003Emain\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n\to \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E Outer\u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n\t\tInner\u003Cspan class=\"token punctuation\"\u003E:\u003C\u002Fspan\u003E Inner\u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n\t\t\tX\u003Cspan class=\"token punctuation\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E10\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E\n\t\t\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E\n\t\tX\u003Cspan class=\"token punctuation\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E20\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\n\tfmt\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EPrintln\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Eo\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003EX\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E       \u003Cspan class=\"token comment\"\u003E\u002F\u002F prints 20\u003C\u002Fspan\u003E\n\tfmt\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EPrintln\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Eo\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003EInner\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003EX\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token comment\"\u003E\u002F\u002F prints 10\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C!-- HTML_TAG_END --\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E위 예제처럼 \u003Cem\u003EEmbedding\u003C\u002Fem\u003E된 구조체의 내부와 외부 양쪽에 동일한 필드명을 가진 상황이 생길 수 있다.\u003C\u002Fp\u003E\n\u003Cp\u003E이러한 경우, \u003Ccode\u003EOuter\u003C\u002Fcode\u003E에 있는 \u003Ccode\u003EInner\u003C\u002Fcode\u003E 내부에 위치한 X에 접근하려고 할 때는 \u003Ccode\u003EInner\u003C\u002Fcode\u003E를 명시해줘야 한다.\u003C\u002Fp\u003E\n\u003Cbr\u003E\u003Cbr\u003E\n\u003Cp\u003E\u003Cem\u003EEmbedding\u003C\u002Fem\u003E은 다른 언어에서 찾기 힘든, 흔치 않은 개념이다. 그래서 구조적으로 비슷한 상속과 연관지어서 생각하곤 하는데, \u003Cem\u003EEmbedding\u003C\u002Fem\u003E은 상속과는 명백하게 다르다.\u003C\u002Fp\u003E\n\u003Cbr\u003E\n\u003Cp\u003E위 \u003Ccode\u003EManager\u003C\u002Fcode\u003E와 \u003Ccode\u003EEmployee\u003C\u002Fcode\u003E 예제에 이어서, 아래 예제도 살펴보자.\u003C\u002Fp\u003E\n\u003Cpre class=\"language-go\"\u003E\u003C!-- HTML_TAG_START --\u003E\u003Ccode class=\"language-go\"\u003E\u003Cspan class=\"token keyword\"\u003Evar\u003C\u002Fspan\u003E m Manager \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\u003Cspan class=\"token comment\"\u003E\u002F*fields*\u002F\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\n\u003Cspan class=\"token keyword\"\u003Evar\u003C\u002Fspan\u003E eFail Employee \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E m\t\t\t\u003Cspan class=\"token comment\"\u003E\u002F\u002F complie error\u003C\u002Fspan\u003E\n\u003Cspan class=\"token keyword\"\u003Evar\u003C\u002Fspan\u003E eOk Employee \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E m\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003EEmployee   \u003Cspan class=\"token comment\"\u003E\u002F\u002F successfully compiled\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C!-- HTML_TAG_END --\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E만약 상속이었다면 위 \u003Ccode\u003Evar eFail Employee = m\u003C\u002Fcode\u003E 라인이 정상적으로 컴파일되었을 것이다.\n\u003Ccode\u003EManager\u003C\u002Fcode\u003E를 \u003Ccode\u003EEmployee\u003C\u002Fcode\u003E의 하위 개념으로 보기 때문.\n하지만 \u003Cem\u003EEmbedding\u003C\u002Fem\u003E은 상속과는 차이가 있기 때문에 에러가 발생한다.\u003C\u002Fp\u003E\n\u003Cbr\u003E\n\u003Cp\u003EGo는 상속을 지원하지 않기 때문에 폴리모피즘과는 거리가 있고, \u003Cstrong\u003EDynamic Dispatch\u003C\u002Fstrong\u003E(동적 디스패치)도 존재하지 않는다.\u003C\u002Fp\u003E\n\u003Cpre class=\"language-go\"\u003E\u003C!-- HTML_TAG_START --\u003E\u003Ccode class=\"language-go\"\u003E\u003Cspan class=\"token keyword\"\u003Etype\u003C\u002Fspan\u003E Inner \u003Cspan class=\"token keyword\"\u003Estruct\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n\tA \u003Cspan class=\"token builtin\"\u003Eint\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"token keyword\"\u003Efunc\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Ei Inner\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003EIntPrinter\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Eval \u003Cspan class=\"token builtin\"\u003Eint\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token builtin\"\u003Estring\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token keyword\"\u003Ereturn\u003C\u002Fspan\u003E fmt\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003ESprintf\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token string\"\u003E\"Inner: %d\"\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E val\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token comment\"\u003E\u002F\u002F This always call Inner.IntPrinter()\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"token keyword\"\u003Efunc\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Ei Inner\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003EDouble\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token builtin\"\u003Estring\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token keyword\"\u003Ereturn\u003C\u002Fspan\u003E i\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EIntPrinter\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Ei\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003EA \u003Cspan class=\"token operator\"\u003E*\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E2\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"token keyword\"\u003Etype\u003C\u002Fspan\u003E Outer \u003Cspan class=\"token keyword\"\u003Estruct\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n\tInner\n\tS \u003Cspan class=\"token builtin\"\u003Estring\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"token keyword\"\u003Efunc\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Eo Outer\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003EIntPrinter\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Eval \u003Cspan class=\"token builtin\"\u003Eint\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token builtin\"\u003Estring\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token keyword\"\u003Ereturn\u003C\u002Fspan\u003E fmt\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003ESprintf\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token string\"\u003E\"Outer: %d\"\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E val\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"token keyword\"\u003Efunc\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003Emain\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n\to \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E Outer\u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n\t\tInner\u003Cspan class=\"token punctuation\"\u003E:\u003C\u002Fspan\u003E Inner\u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n\t\t\tA\u003Cspan class=\"token punctuation\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E10\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E\n\t\t\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E\n\t\tS\u003Cspan class=\"token punctuation\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E\"Hello\"\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\n\n\tfmt\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EPrintln\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Eo\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EDouble\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C!-- HTML_TAG_END --\u003E\u003C\u002Fpre\u003E\n\u003Cpre class=\"language-bash\"\u003E\u003C!-- HTML_TAG_START --\u003E\u003Ccode class=\"language-bash\"\u003EInner: \u003Cspan class=\"token number\"\u003E20\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C!-- HTML_TAG_END --\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E위 예제에서 \u003Ccode\u003Eo.Double()\u003C\u002Fcode\u003E를 호출하면 겹치는 메소드명이 없기 때문에 \u003Ccode\u003Eo.Inner.Double()\u003C\u002Fcode\u003E가 자동 호출된다.\n이 때 \u003Ccode\u003Eo.Inner.Double()\u003C\u002Fcode\u003E 내부에서는 \u003Ccode\u003Eo.Inner.IntPrinter()\u003C\u002Fcode\u003E를 호출하기 때문에, \u003Ccode\u003EInner: 20\u003C\u002Fcode\u003E가 출력된 것이다.\n이렇듯 Go에서 메소드는 전혀 오버라이딩되지 않는다.\u003C\u002Fp\u003E\n\u003Cbr\u003E\u003Cbr\u003E\n\u003Ch2 id=\"interface\"\u003E\u003Ca aria-hidden=\"true\" tabindex=\"-1\" href=\"#interface\"\u003E\u003Cspan class=\"icon icon-link\"\u003E\u003C\u002Fspan\u003E\u003C\u002Fa\u003EInterface\u003C\u002Fh2\u003E\n\u003Chr\u003E\n\u003Cp\u003E책에서는 Go의 진정한 꽃이 Goroutine을 위시한 Concurrency가 아니라, 이 \u003Cem\u003EInterface\u003C\u002Fem\u003E라고 하는데, 대체 얼마나 맛집이기에..\u003C\u002Fp\u003E\n\u003Cp\u003E설명에 앞서 인터페이스는 아래와 같이 정의할 수 있다.\u003C\u002Fp\u003E\n\u003Cpre class=\"language-go\"\u003E\u003C!-- HTML_TAG_START --\u003E\u003Ccode class=\"language-go\"\u003E\u003Cspan class=\"token keyword\"\u003Etype\u003C\u002Fspan\u003E Stringer \u003Cspan class=\"token keyword\"\u003Einterface\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token function\"\u003EString\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token builtin\"\u003Estring\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C!-- HTML_TAG_END --\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E\u003Ccode\u003Estruct\u003C\u002Fcode\u003E를 정의하는 것과 큰 차이는 없는 것 같다.\n암묵적인 룰이 하나 있는데, 인터페이스의 이름은 대개 “er”로 끝난다.\n그 예로 \u003Ccode\u003Efmt.Stringer\u003C\u002Fcode\u003E, \u003Ccode\u003Eio.Reader\u003C\u002Fcode\u003E, \u003Ccode\u003Eio.Closer\u003C\u002Fcode\u003E, \u003Ccode\u003Eio.ReadCloser\u003C\u002Fcode\u003E, \u003Ccode\u003Ejson.Marshaler\u003C\u002Fcode\u003E, \u003Ccode\u003Ehttp.Handler\u003C\u002Fcode\u003E 등등이 있다.\u003C\u002Fp\u003E\n\u003Cbr\u003E\n\u003Cp\u003E\u003Cem\u003EInterface\u003C\u002Fem\u003E는 객체지향의 \u003Cem\u003EAbstract Class\u003C\u002Fem\u003E와 유사하지만, 차이점이 있다.\n다른 객체지향 언어에서는 \u003Cem\u003EAbstract Class\u003C\u002Fem\u003E에서 선언된 메소드 등을 \u003Cem\u003EConcrete Class\u003C\u002Fem\u003E에서 구현한다.\u003C\u002Fp\u003E\n\u003Cp\u003E반면 Go의 인터페이스는 \u003Cspan style=\"background-color: #FFF5B1\"\u003E암묵적\u003C\u002Fspan\u003E인 개념이다.\n\u003Cem\u003EConcrete Type\u003C\u002Fem\u003E에서는 인터페이스를 구현한다고 선언하지 않는다.\n만약 \u003Cem\u003EConcrete Type\u003C\u002Fem\u003E에서 구현하는 메소드들이 인터페이스에서 선언된 모든 메소드들을 포함한다면,\n그 때 \u003Cem\u003EConcrete Type\u003C\u002Fem\u003E가 인터페이스를 구현한다고 할 수 있으며, 이래서 암묵적이라는 표현을 사용하는 듯 하다.\n그래서 Go에서는 \u003Cem\u003EConcrete Type\u003C\u002Fem\u003E을 인터페이스에 할당한다는 느낌으로 받아들여야 하는 것 같다.\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cem\u003EInterface\u003C\u002Fem\u003E 덕에 Type-Safe, 디커플링, 정적\u002F동적 언어에서 기능을 연결하는 것이 가능해진다고 하는데, 이건 좀 더 해봐야 알 듯 하다.\u003C\u002Fp\u003E\n\u003Cp\u003EJavascript, Python 등의 동적 타입 언어에서는 인터페이스가 없는 대신 \u003Cem\u003EDuck Typing\u003C\u002Fem\u003E이란 것을 사용한다.\n\u003Cem\u003EDuck Typing\u003C\u002Fem\u003E은 어떤 인스턴스가 원하는 메소드(또는 필드)들을 가지고 있다면, 내가 원하는 타입으로 간주한다는 뜻이다.\n프로젝트의 규모가 너무 크거나, 프로젝트가 너무 오래되어서 의존성을 추적하기 어려운 경우 이런 방식을 사용한다.\u003C\u002Fp\u003E\n\u003Cp\u003E주로 정적 타입 언어를 사용하는 개발자라면 이런 방식에 대해 회의적이다.\n인스턴스의 타입을 명시하지 않으면 어떤 타입인지 확인하기도 어려울 것이며, 어떤 기능을 할 수 있을지 예측할 수 없으리라 생각한다.\u003C\u002Fp\u003E\n\u003Cp\u003E반면 Java에서는 다소 패턴이 다르다. 인터페이스의 정의와 구현이 각각 존재하지만, 인터페이스의 정의만 참조된다.\n주로 동적 타입 언어를 사용하는 개발자들은 이 방식에 대해, 인터페이스가 바뀔 때마다 코드를 다시 짜야 하는 불편한 방식이라고 생각한다.\u003C\u002Fp\u003E\n\u003Cbr\u003E\n\u003Cp\u003E만약 어플리케이션이 잠정적으로 개선될 여지가 있다면 코드에 유연성이 필요하다.\n하지만 코드가 하고 있는 일이 무엇인지에 대해 사람들이 이해할 수 있도록 하는 것도 중요하기에, 코드의 역할과 의존성 등을 명시할 필요도 있다.\nGo의 인터페이스는 양쪽 모두의 입장을 받아들인다.\u003C\u002Fp\u003E\n\u003Cp\u003E아래 예제에서 Interface가 사용된 예시를 확인할 수 있다.\u003C\u002Fp\u003E\n\u003Cpre class=\"language-go\"\u003E\u003C!-- HTML_TAG_START --\u003E\u003Ccode class=\"language-go\"\u003E\u003Cspan class=\"token keyword\"\u003Etype\u003C\u002Fspan\u003E LogicProvider \u003Cspan class=\"token keyword\"\u003Estruct\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"token keyword\"\u003Efunc\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Elp LogicProvider\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003EProcess\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Edata \u003Cspan class=\"token builtin\"\u003Estring\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token builtin\"\u003Estring\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token comment\"\u003E\u002F\u002F do some business logic\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token keyword\"\u003Ereturn\u003C\u002Fspan\u003E data \u003Cspan class=\"token operator\"\u003E+\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E\"!\"\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"token keyword\"\u003Etype\u003C\u002Fspan\u003E Logic \u003Cspan class=\"token keyword\"\u003Einterface\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token function\"\u003EProcess\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Edata \u003Cspan class=\"token builtin\"\u003Estring\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token builtin\"\u003Estring\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"token keyword\"\u003Etype\u003C\u002Fspan\u003E Client \u003Cspan class=\"token keyword\"\u003Estruct\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n\tL Logic\n\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"token keyword\"\u003Efunc\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Ec Client\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003EProgram\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token comment\"\u003E\u002F\u002F get data from somewhere\u003C\u002Fspan\u003E\n\tdata \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E\"hello world\"\u003C\u002Fspan\u003E\n\trefinedData \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E c\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003EL\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EProcess\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Edata\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\tfmt\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EPrintln\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003ErefinedData\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"token keyword\"\u003Efunc\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003Emain\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n\tc \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E Client\u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n\t\tL\u003Cspan class=\"token punctuation\"\u003E:\u003C\u002Fspan\u003E LogicProvider\u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token comment\"\u003E\u002F\u002F concrete type assigned into Client's interface\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\n\tc\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EProgram\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C!-- HTML_TAG_END --\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E\u003Cem\u003EConcrete Type\u003C\u002Fem\u003E 역할을 하는 \u003Ccode\u003ELogicProvider\u003C\u002Fcode\u003E가 정의될 때, 이것이 \u003Ccode\u003ELogic\u003C\u002Fcode\u003E이라는 인터페이스에 관련된 것이라고 선언된 것은 없다.\n\u003Ccode\u003ELogic\u003C\u002Fcode\u003E과 \u003Ccode\u003ELogicProvider\u003C\u002Fcode\u003E이 연결되는 것은, \u003Ccode\u003EClient\u003C\u002Fcode\u003E 인스턴스인 \u003Ccode\u003Ec\u003C\u002Fcode\u003E가 생성될 때이며,\n\u003Ccode\u003ELogicProvider\u003C\u002Fcode\u003E에는 \u003Ccode\u003ELogic\u003C\u002Fcode\u003E에서 정의된 것과 동일한 이름의 메소드인 \u003Ccode\u003EProcess()\u003C\u002Fcode\u003E가 존재할 뿐이다.\n따라서 \u003Ccode\u003ELogicProvider\u003C\u002Fcode\u003E가 \u003Ccode\u003ELogic\u003C\u002Fcode\u003E이라는 인터페이스를 위한 \u003Cem\u003EConcrete Type\u003C\u002Fem\u003E임을 알 수 있도록, 잘 문서화할 필요가 있다.\u003C\u002Fp\u003E\n\u003Cbr\u003E\n\u003Cp\u003EGo에서는 \u003Ccode\u003Eio.Reader\u003C\u002Fcode\u003E나 \u003Ccode\u003Eio.Writer\u003C\u002Fcode\u003E 등, 스탠다드 인터페이스도 존재한다.\n스탠다드 인터페이스를 사용하는 것은 \u003Cem\u003Edecorator\u003C\u002Fem\u003E 패턴과 유사한데,\n특정 인터페이스의 인스턴스를 받아서 동일한 인터페이스의 다른 인스턴스를 반환하는 \u003Cem\u003EFactory Function\u003C\u002Fem\u003E(객체를 반환하는 함수)를 자주 사용하기 때문.\u003C\u002Fp\u003E\n\u003Cp\u003E아래 예제를 확인하자.\u003C\u002Fp\u003E\n\u003Cpre class=\"language-go\"\u003E\u003C!-- HTML_TAG_START --\u003E\u003Ccode class=\"language-go\"\u003E\n\u003Cspan class=\"token keyword\"\u003Efunc\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003Eprocess\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Er io\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003EReader\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token builtin\"\u003Eerror\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token comment\"\u003E\u002F\u002F do something\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"token keyword\"\u003Efunc\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003Eopenfile\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003EfileName \u003Cspan class=\"token builtin\"\u003Estring\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token builtin\"\u003Eerror\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n\tr\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E err \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E os\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EOpen\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003EfileName\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token keyword\"\u003Eif\u003C\u002Fspan\u003E err \u003Cspan class=\"token operator\"\u003E!=\u003C\u002Fspan\u003E \u003Cspan class=\"token boolean\"\u003Enil\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n\t\t\u003Cspan class=\"token keyword\"\u003Ereturn\u003C\u002Fspan\u003E err\n\t\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token keyword\"\u003Edefer\u003C\u002Fspan\u003E r\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003ECLose\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token keyword\"\u003Ereturn\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003Eprocess\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Er\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C!-- HTML_TAG_END --\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E위 코드에서 \u003Ccode\u003Eos.Open()\u003C\u002Fcode\u003E에 의해 반환된 \u003Ccode\u003Eos.File\u003C\u002Fcode\u003E 인스턴스는 \u003Ccode\u003Eio.Reader\u003C\u002Fcode\u003E 인터페이스를 충족시킨다.\n따라서 \u003Ccode\u003Eprocess()\u003C\u002Fcode\u003E 함수 내에서 파일의 데이터를 읽을 수 있다.\u003C\u002Fp\u003E\n\u003Cp\u003E아래 예제는 \u003Ccode\u003Egzip\u003C\u002Fcode\u003E을 통해 파일을 압축 해제할 수 있는 경우에, \u003Ccode\u003Egzip\u003C\u002Fcode\u003E 라이브러리를 사용하여 압축 해제하는 예제이다.\u003C\u002Fp\u003E\n\u003Cpre class=\"language-go\"\u003E\u003C!-- HTML_TAG_START --\u003E\u003Ccode class=\"language-go\"\u003E\u003Cspan class=\"token keyword\"\u003Efunc\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003Eopenfile\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003EfileName \u003Cspan class=\"token builtin\"\u003Estring\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token builtin\"\u003Eerror\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n\tr\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E err \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E os\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EOpen\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003EfileName\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token keyword\"\u003Eif\u003C\u002Fspan\u003E err \u003Cspan class=\"token operator\"\u003E!=\u003C\u002Fspan\u003E \u003Cspan class=\"token boolean\"\u003Enil\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n\tr\teturn err\n\t\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token keyword\"\u003Edefer\u003C\u002Fspan\u003E r\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EClose\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\n\tgz\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E err \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E gzip\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003ENewReader\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Er\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token keyword\"\u003Eif\u003C\u002Fspan\u003E err \u003Cspan class=\"token operator\"\u003E!=\u003C\u002Fspan\u003E \u003Cspan class=\"token boolean\"\u003Enil\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n\t\t\u003Cspan class=\"token keyword\"\u003Ereturn\u003C\u002Fspan\u003E err\n\t\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token keyword\"\u003Edefer\u003C\u002Fspan\u003E gz\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EClose\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token keyword\"\u003Ereturn\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003Eprocess\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Egz\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C!-- HTML_TAG_END --\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E위처럼 스탠다드 라이브러리의 인터페이스가 코드에 잘 어울릴 것 같으면, 사용하는 것이 좋다.\u003C\u002Fp\u003E\n\u003Cp\u003E예제에서는 \u003Ccode\u003Egzip\u003C\u002Fcode\u003E으로 압축 해제된 \u003Ccode\u003Eio.Reader\u003C\u002Fcode\u003E 인터페이스의 인스턴스가 \u003Ccode\u003Egz\u003C\u002Fcode\u003E에 할당되고,\n그 \u003Ccode\u003Egz\u003C\u002Fcode\u003E가 다시 한번 \u003Ccode\u003Eprocess()\u003C\u002Fcode\u003E함수에서 \u003Ccode\u003Eio.Reader\u003C\u002Fcode\u003E의 인스턴스가 된다.\u003C\u002Fp\u003E\n\u003Cp\u003E어느 타입의 메소드들이 특정 인터페이스를 충족시키고도 남는 경우,\n즉 인터페이스에 명시된 것 외의 메소드들이 존재한다고 해도 그 타입은 인터페이스를 충족시킨다.\n이 때문에 한 타입이 두 개 이상의 인터페이스를 동시에 충족시킬 수 있다. 이 때 명시된 것 외의 메소드들은 무시한다.\n이를테면 \u003Ccode\u003Eio.File\u003C\u002Fcode\u003E 타입은 \u003Ccode\u003Eio.Reader\u003C\u002Fcode\u003E와 \u003Ccode\u003Eio.Writer\u003C\u002Fcode\u003E를 동시에 충족시킨다.\n즉, \u003Ccode\u003Eio.File\u003C\u002Fcode\u003E 한 가지 타입으로 읽고 쓰기가 동시에, 각각 지원되는 것이다.\u003C\u002Fp\u003E\n\u003Cbr\u003E\u003Cbr\u003E\n\u003Ch3 id=\"embedding-and-interfaces\"\u003E\u003Ca aria-hidden=\"true\" tabindex=\"-1\" href=\"#embedding-and-interfaces\"\u003E\u003Cspan class=\"icon icon-link\"\u003E\u003C\u002Fspan\u003E\u003C\u002Fa\u003EEmbedding and Interfaces\u003C\u002Fh3\u003E\n\u003Cp\u003E\u003Ccode\u003Estruct\u003C\u002Fcode\u003E 타입을 Embedding하는 것처럼, 인터페이스도 인터페이스 안에 Embedding할 수 있다.\n스탠다드 라이브러리의 \u003Ccode\u003Eio.ReadCloser\u003C\u002Fcode\u003E도 \u003Ccode\u003Eio.Reader\u003C\u002Fcode\u003E와 \u003Ccode\u003Eio.Closer\u003C\u002Fcode\u003E가 임베딩된 것이다.\n아래의 예제와 유사하다.\u003C\u002Fp\u003E\n\u003Cpre class=\"language-go\"\u003E\u003C!-- HTML_TAG_START --\u003E\u003Ccode class=\"language-go\"\u003E\u003Cspan class=\"token keyword\"\u003Etype\u003C\u002Fspan\u003E Reader \u003Cspan class=\"token keyword\"\u003Einterface\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token function\"\u003ERead\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Ep \u003Cspan class=\"token punctuation\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E]\u003C\u002Fspan\u003E\u003Cspan class=\"token builtin\"\u003Ebyte\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003En \u003Cspan class=\"token builtin\"\u003Eint\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E err \u003Cspan class=\"token builtin\"\u003Eerror\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"token keyword\"\u003Etype\u003C\u002Fspan\u003E Closer \u003Cspan class=\"token keyword\"\u003Einterface\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token function\"\u003EClose\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token builtin\"\u003Eerror\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"token keyword\"\u003Etype\u003C\u002Fspan\u003E ReadCloser \u003Cspan class=\"token keyword\"\u003Einterface\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n\tReader\n\tCloser\n\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C!-- HTML_TAG_END --\u003E\u003C\u002Fpre\u003E\n\u003Cbr\u003E\u003Cbr\u003E\n\u003Ch3 id=\"accept-interfaces-return-structs\"\u003E\u003Ca aria-hidden=\"true\" tabindex=\"-1\" href=\"#accept-interfaces-return-structs\"\u003E\u003Cspan class=\"icon icon-link\"\u003E\u003C\u002Fspan\u003E\u003C\u002Fa\u003EAccept Interfaces, Return Structs\u003C\u002Fh3\u003E\n\u003Cp\u003EGo의 빡고수들이 버릇처럼 읊는 말이 \u003Cstrong\u003EAccept Interfaces, Return Structs\u003C\u002Fstrong\u003E라고 한다.\n이는 함수에 의해 호출되는 로직은 반드시 인터페이스를 통해 호출되어야 하며,\n함수의 결과값은 반드시 concrete type(struct)이어야 한다는 것이다.\n함수의 파라미터로 인터페이스를 받으면 어떤 기능을 사용할 것인지 명시적으로 선언하면서도, flexible함을 동시에 챙길 수 있다.\u003C\u002Fp\u003E\n\u003Cp\u003E만약 API가 (암묵적이어야 할) 인터페이스를 리턴한다면, 디커플링이라는 인터페이스의 장점을 잃는다.\n만약 그렇게 된다면 서드 파티 모듈의 인터페이스에 코드가 종속되는 결과를 낳게 된다.\n대개 서드 파티 인터페이스에 대한 클라이언트의 의존성을 줄이고자 하기 마련이다.\n이를 위해 또다른 인터페이스를 작성한 뒤, 타입 변환을 하는데(의존성 주입, Dependency Injection),\n이는 어플리케이션의 기능을 제약할 수도 있기에 좋은 방법은 아니다.\u003C\u002Fp\u003E\n\u003Cp\u003E인터페이스를 리턴하지 말아야 하는 또 다른 이유는 버전에 관련된 것이다.\nConcrete Type을 리턴하는 경우에는 기존 코드에 새로운 메소드나 필드가 별 문제 없이 추가될 수 있다.\n반면 인터페이스의 경우에는 새로운 메소드를 추가하려면 기존에 존재하는 모든 메소드들의 구현을 업데이트해야 한다.\n따라서 API를 롤백해야 하는 경우에도, major version number를 증가시켜야 한다.\u003C\u002Fp\u003E\n\u003Cp\u003E인터페이스가 정해져 있고 파라미터에 따라서 다른 인스턴스가 나오는 factory function을 짜는 것보다는,\n타입들을 분리하여 concrete type이 반환되는 각각의 함수를 작성하는 것이 좋다.\u003C\u002Fp\u003E\n\u003Cp\u003E웬만하면 인터페이스를 반환하지 않는 것이 좋긴 한데, 가끔 어쩔 수 없이 하는 경우가 있다. 대표적인 예시가 바로 에러이다.\nGo에서는 \u003Ccode\u003Eerror\u003C\u002Fcode\u003E 인터페이스를 반환하도록 선언되는 경우가 많다.\n이는 인터페이스가 Go에서 유일하게 사용할 수 있는 추상 유형이며. \u003Ccode\u003Eerror\u003C\u002Fcode\u003E 인터페이스의 다른 구현을 사용해야 하는 경우가 많기 때문이다.\n따라서 가능한 모든 옵션을 처리하기 위해 인터페이스를 사용해야 한다.\u003C\u002Fp\u003E\n\u003Cp\u003E다만 이러한 패턴의 잠재적인 문제점이 존재한다.\nconcrete type을 반환하는 경우 Heap 할당이 줄어들기에 가비지 콜렉터의 워크로드가 줄어든다.\n반면 인터페이스를 파라미터로 사용하는 함수의 경우, 각 인터페이스마다 Heap 할당되므로, 가비지 콜렉터가 힘들어한다.\n결국은 더 좋은 성능과 더 좋은 추상화 사이에 trade-off가 존재하는 셈이다.\u003C\u002Fp\u003E\n\u003Cp\u003E그렇기 때문에 되도록이면 코드를 예쁘게, 고치기 편하게 작성하는 것이 좋다.\n그래야 인터페이스로 인한 잠재적인 성능 문제가 발생하여도, 이를 concrete type으로 변경하는 등의 작업을 하기가 쉬워진다.\u003C\u002Fp\u003E\n\u003Cbr\u003E\u003Cbr\u003E\n\u003Ch3 id=\"interfaces-and-nil\"\u003E\u003Ca aria-hidden=\"true\" tabindex=\"-1\" href=\"#interfaces-and-nil\"\u003E\u003Cspan class=\"icon icon-link\"\u003E\u003C\u002Fspan\u003E\u003C\u002Fa\u003EInterfaces and nil\u003C\u002Fh3\u003E\n\u003Cp\u003E많이 봐왔듯, \u003Ccode\u003Enil\u003C\u002Fcode\u003E은 포인터의 Zero value이다.\n마찬가지로 \u003Ccode\u003Enil\u003C\u002Fcode\u003E은 인터페이스의 Zero value이긴 하지만, Concrete Type들에 비해 간단하지만은 않다.\u003C\u002Fp\u003E\n\u003Cpre class=\"language-go\"\u003E\u003C!-- HTML_TAG_START --\u003E\u003Ccode class=\"language-go\"\u003E\t\u003Cspan class=\"token keyword\"\u003Evar\u003C\u002Fspan\u003E s \u003Cspan class=\"token operator\"\u003E*\u003C\u002Fspan\u003E\u003Cspan class=\"token builtin\"\u003Estring\u003C\u002Fspan\u003E\n\tfmt\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EPrintln\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Es \u003Cspan class=\"token operator\"\u003E==\u003C\u002Fspan\u003E \u003Cspan class=\"token boolean\"\u003Enil\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token keyword\"\u003Evar\u003C\u002Fspan\u003E i \u003Cspan class=\"token keyword\"\u003Einterface\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\n\tfmt\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EPrintln\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Ei \u003Cspan class=\"token operator\"\u003E==\u003C\u002Fspan\u003E \u003Cspan class=\"token boolean\"\u003Enil\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\ti \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E s\n\tfmt\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EPrintln\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Ei\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E i \u003Cspan class=\"token operator\"\u003E==\u003C\u002Fspan\u003E \u003Cspan class=\"token boolean\"\u003Enil\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C!-- HTML_TAG_END --\u003E\u003C\u002Fpre\u003E\n\u003Cpre class=\"language-bash\"\u003E\u003C!-- HTML_TAG_START --\u003E\u003Ccode class=\"language-bash\"\u003E\u003Cspan class=\"token operator\"\u003E&lt;\u003C\u002Fspan\u003Enil\u003Cspan class=\"token operator\"\u003E\u003E\u003C\u002Fspan\u003E \u003Cspan class=\"token boolean\"\u003Etrue\u003C\u002Fspan\u003E\n\u003Cspan class=\"token operator\"\u003E&lt;\u003C\u002Fspan\u003Enil\u003Cspan class=\"token operator\"\u003E\u003E\u003C\u002Fspan\u003E \u003Cspan class=\"token boolean\"\u003Etrue\u003C\u002Fspan\u003E\n\u003Cspan class=\"token operator\"\u003E&lt;\u003C\u002Fspan\u003Enil\u003Cspan class=\"token operator\"\u003E\u003E\u003C\u002Fspan\u003E \u003Cspan class=\"token boolean\"\u003Efalse\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C!-- HTML_TAG_END --\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003EGo의 인터페이스는 내부적으로 두 쌍의 포인터로 구성되며, 각각 타입, 값을 가리킨다.\n만약 타입을 가리키는 포인터가 \u003Ccode\u003Enil\u003C\u002Fcode\u003E이 아니라면, 인터페이스는 \u003Ccode\u003Enil\u003C\u002Fcode\u003E이 아닌 것이다. 출력 결과의 세 번째 라인이 저 모양인 것이 이 때문.\u003C\u002Fp\u003E\n\u003Cp\u003E인터페이스에 할당된 concrete type에 따라 호출되는 메소드가 달라지듯, 인터페이스에서 \u003Ccode\u003Enil\u003C\u002Fcode\u003E은 메소드를 호출할 수 있는지 여부를 나타낸다.\n만약 인터페이스가 \u003Ccode\u003Enil\u003C\u002Fcode\u003E임에도 메소드를 호출하였다면, \u003Cem\u003Epanic\u003C\u002Fem\u003E이 발생한다.\n만약 인터페이스가 \u003Ccode\u003Enil\u003C\u002Fcode\u003E이 아닌데 메소드를 호출하였다면, 메소드를 호출하려고 시도할 것이다.\n(다만 위 예제와 같은 경우 인터페이스에 연결된 값이 \u003Ccode\u003Enil\u003C\u002Fcode\u003E이기 때문에, 곧바로 \u003Cem\u003Epanic\u003C\u002Fem\u003E이 발생할 것이다.)\u003C\u002Fp\u003E\n\u003Cp\u003E인터페이스 인스턴스의 타입을 나타내는 포인터가 \u003Ccode\u003Enil\u003C\u002Fcode\u003E이 아니라면, 이는 \u003Ccode\u003Enil\u003C\u002Fcode\u003E이 아닌 것이다.\n그렇다고 해서 이 인터페이스의 값이 \u003Ccode\u003Enil\u003C\u002Fcode\u003E인지는 확실하게 알 수 없기 때문에, 나중에 나올 \u003Cem\u003EReflection\u003C\u002Fem\u003E을 사용해야 한다.\u003C\u002Fp\u003E\n\u003Cbr\u003E\u003Cbr\u003E\n\u003Ch3 id=\"the-empty-interface-says-nothing\"\u003E\u003Ca aria-hidden=\"true\" tabindex=\"-1\" href=\"#the-empty-interface-says-nothing\"\u003E\u003Cspan class=\"icon icon-link\"\u003E\u003C\u002Fspan\u003E\u003C\u002Fa\u003EThe Empty Interface Says Nothing\u003C\u002Fh3\u003E\n\u003Cp\u003E정적 타입 언어에서도 아무 타입이나 다 집어넣을 수 있는 변수가 필요할 때가 있다.\n그러한 경우, Go에서는 \u003Ccode\u003Einterface{}\u003C\u002Fcode\u003E를 사용할 수 있다.\u003C\u002Fp\u003E\n\u003Cpre class=\"language-go\"\u003E\u003C!-- HTML_TAG_START --\u003E\u003Ccode class=\"language-go\"\u003E\u003Cspan class=\"token keyword\"\u003Evar\u003C\u002Fspan\u003E i \u003Cspan class=\"token keyword\"\u003Einterface\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E \u003Cspan class=\"token comment\"\u003E\u002F\u002F empty interfece variable can store a value of any type\u003C\u002Fspan\u003E\n\ni \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E20\u003C\u002Fspan\u003E\nfmt\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EPrintln\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Ei\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\ni \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E\"hello\"\u003C\u002Fspan\u003E\nfmt\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EPrintln\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Ei\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\ni \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token keyword\"\u003Estruct\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n\tFirstName \u003Cspan class=\"token builtin\"\u003Estring\u003C\u002Fspan\u003E\n\tLastName  \u003Cspan class=\"token builtin\"\u003Estring\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\u003Cspan class=\"token string\"\u003E\"Fred\"\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E\"Fredson\"\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\nfmt\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EPrintln\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Ei\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C!-- HTML_TAG_END --\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E비어 있는 인터페이스는 말 그대로 아무 값이나 다 저장할 수 있다.\n인터페이스가 비어 있다는 말은 0개 이상의 메소드가 있는 타입들을 가리킬 수 있다는 뜻이며,\n그래서 메소드가 없는 \u003Ccode\u003Eint\u003C\u002Fcode\u003E, \u003Ccode\u003Estring\u003C\u002Fcode\u003E 등의 Primitive Type들도 저장이 가능해진다.\u003C\u002Fp\u003E\n\u003Cbr\u003E\n\u003Cp\u003E비어 있는 인터페이스가 사용되는 예 중 하나는, JSON처럼 외부 소스에서 읽어온 불분명한 스키마의 placeholder로 사용하는 것이다.\u003C\u002Fp\u003E\n\u003Cpre class=\"language-go\"\u003E\u003C!-- HTML_TAG_START --\u003E\u003Ccode class=\"language-go\"\u003Edata \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E \u003Cspan class=\"token keyword\"\u003Emap\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"token builtin\"\u003Estring\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E]\u003C\u002Fspan\u003E\u003Cspan class=\"token keyword\"\u003Einterface\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\n\ncontents\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E err \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E ioutil\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EReadFile\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token string\"\u003E\"testdata\u002Fsample.json\"\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\u003Cspan class=\"token keyword\"\u003Eif\u003C\u002Fspan\u003E err \u003Cspan class=\"token operator\"\u003E!=\u003C\u002Fspan\u003E \u003Cspan class=\"token boolean\"\u003Enil\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n    \u003Cspan class=\"token keyword\"\u003Ereturn\u003C\u002Fspan\u003E err\n\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\n\u003Cspan class=\"token keyword\"\u003Edefer\u003C\u002Fspan\u003E contents\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EClose\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\njson\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EUnmarshal\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Econtents\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token operator\"\u003E&amp;\u003C\u002Fspan\u003Edata\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C!-- HTML_TAG_END --\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E위 코드를 실행하면 JSON 데이터가 \u003Ccode\u003Edata\u003C\u002Fcode\u003E 변수에 저장된다.\u003C\u002Fp\u003E\n\u003Cbr\u003E\n\u003Cp\u003E또 다른 경우에는, 유저가 만든 자료구조에서 다양한 타입의 값을 저장하기 위해 사용된다.\nGo의 \u003Ccode\u003Eslice\u003C\u002Fcode\u003E, \u003Ccode\u003Emap\u003C\u002Fcode\u003E 등 타입들은 한 가지 타입밖에 저장하지 못하는데 비해, \u003Ccode\u003Einterface{}\u003C\u002Fcode\u003E는 여러 타입을 가리킬 수 있기 때문.\u003C\u002Fp\u003E\n\u003Cpre class=\"language-go\"\u003E\u003C!-- HTML_TAG_START --\u003E\u003Ccode class=\"language-go\"\u003E\u003Cspan class=\"token keyword\"\u003Etype\u003C\u002Fspan\u003E LinkedList \u003Cspan class=\"token keyword\"\u003Estruct\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n    Value \u003Cspan class=\"token keyword\"\u003Einterface\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\n    Next    \u003Cspan class=\"token operator\"\u003E*\u003C\u002Fspan\u003ELinkedList\n\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"token keyword\"\u003Efunc\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Ell \u003Cspan class=\"token operator\"\u003E*\u003C\u002Fspan\u003ELinkedList\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003EInsert\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Epos \u003Cspan class=\"token builtin\"\u003Eint\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E val \u003Cspan class=\"token keyword\"\u003Einterface\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token operator\"\u003E*\u003C\u002Fspan\u003ELinkedList \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n    \u003Cspan class=\"token keyword\"\u003Eif\u003C\u002Fspan\u003E ll \u003Cspan class=\"token operator\"\u003E==\u003C\u002Fspan\u003E \u003Cspan class=\"token boolean\"\u003Enil\u003C\u002Fspan\u003E \u003Cspan class=\"token operator\"\u003E||\u003C\u002Fspan\u003E pos \u003Cspan class=\"token operator\"\u003E==\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E0\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n        \u003Cspan class=\"token keyword\"\u003Ereturn\u003C\u002Fspan\u003E \u003Cspan class=\"token operator\"\u003E&amp;\u003C\u002Fspan\u003ELinkedList\u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n            Value\u003Cspan class=\"token punctuation\"\u003E:\u003C\u002Fspan\u003E val\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E\n            Next\u003Cspan class=\"token punctuation\"\u003E:\u003C\u002Fspan\u003E    ll\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E\n        \u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\n    \u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\n    ll\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003ENext \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E ll\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003ENext\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EInsert\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Epos\u003Cspan class=\"token operator\"\u003E-\u003C\u002Fspan\u003E\u003Cspan class=\"token number\"\u003E1\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E val\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n    \u003Cspan class=\"token keyword\"\u003Ereturn\u003C\u002Fspan\u003E ll\n\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C!-- HTML_TAG_END --\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E위 코드는 러프한 예시니까 실제로 사용하지는 말자.\u003C\u002Fp\u003E\n\u003Cp\u003E또 다른 사용예로는 함수의 파라미터로 \u003Ccode\u003Einterface{}\u003C\u002Fcode\u003E를 받는 경우인데, \u003Cem\u003Ereflection\u003C\u002Fem\u003E을 하기 위해 사용한다고 하는 것 같다.\n\u003Cem\u003Ereflection\u003C\u002Fem\u003E은 나중에 나온다!\u003C\u002Fp\u003E\n\u003Cbr\u003E\n\u003Cp\u003E근데 \u003Ccode\u003Einterface{}\u003C\u002Fcode\u003E를 되도록이면 사용하지 않는 게 좋다.\nGo는 기본적으로 정적 타입 언어로 디자인된 언어인 만큼, \u003Ccode\u003Einterface{}\u003C\u002Fcode\u003E로 여러 타입들을 쑤시고 다니는 건 좋지 않다.\n\u003Ccode\u003Einterface{}\u003C\u002Fcode\u003E를 사용하여 값들을 저장해야 할 상황에서, 값을 다시 읽어오려면 어떻게 해야 할까?\n그럴 때 바로 아래에서 설명할 \u003Cem\u003EType Assertions\u003C\u002Fem\u003E 및 \u003Cem\u003EType Switches\u003C\u002Fem\u003E를 사용해 보자.\u003C\u002Fp\u003E\n\u003Cbr\u003E\u003Cbr\u003E\n\u003Ch3 id=\"type-assertions-and-type-switches\"\u003E\u003Ca aria-hidden=\"true\" tabindex=\"-1\" href=\"#type-assertions-and-type-switches\"\u003E\u003Cspan class=\"icon icon-link\"\u003E\u003C\u002Fspan\u003E\u003C\u002Fa\u003EType Assertions and Type Switches\u003C\u002Fh3\u003E\n\u003Cp\u003EGo에는 어떤 변수의 인터페이스가 가리키는 타입이 특정한 Concrete Type인지,\n혹은 Concrete Type이 또 다른 인터페이스를 구현하는지 확인할 수 있는 두 가지 방법이 있다.\u003C\u002Fp\u003E\n\u003Cp\u003E한 가지가 바로 \u003Cstrong\u003EType Assertion\u003C\u002Fstrong\u003E이다.\n이는 어떤 인터페이스를 구현하는 Concrete Type에 이름을 붙이거나,\n또는 이 인터페이스를 구현하고 있는 Concrete Type이 구현하는 또 다른 인터페이스에 이름을 붙인다.\u003C\u002Fp\u003E\n\u003Cpre class=\"language-go\"\u003E\u003C!-- HTML_TAG_START --\u003E\u003Ccode class=\"language-go\"\u003E\u003Cspan class=\"token keyword\"\u003Etype\u003C\u002Fspan\u003E MyInt \u003Cspan class=\"token builtin\"\u003Eint\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"token keyword\"\u003Efunc\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003Emain\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n    \u003Cspan class=\"token keyword\"\u003Evar\u003C\u002Fspan\u003E i \u003Cspan class=\"token keyword\"\u003Einterface\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\n    \u003Cspan class=\"token keyword\"\u003Evar\u003C\u002Fspan\u003E mine MyInt \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E20\u003C\u002Fspan\u003E\n    i \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E mine\n    i2 \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E i\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003EMyInt\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token comment\"\u003E\u002F\u002F using type assertion, we can confine the type of concrete type that the interface indicates\u003C\u002Fspan\u003E\n    fmt\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EPrintln\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Ei2 \u003Cspan class=\"token operator\"\u003E+\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E1\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C!-- HTML_TAG_END --\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E이렇게 \u003Cem\u003EType Assertion\u003C\u002Fem\u003E을 사용하여 \u003Ccode\u003Ei\u003C\u002Fcode\u003E가 가리키고 있는 타입을 \u003Ccode\u003EMyInt\u003C\u002Fcode\u003E로 한정할 수 있다.\n위 예제에서 변수 \u003Ccode\u003Ei2\u003C\u002Fcode\u003E의 타입은 \u003Ccode\u003EMyInt\u003C\u002Fcode\u003E가 된다.\u003C\u002Fp\u003E\n\u003Cbr\u003E\n\u003Cp\u003E만약 잘못된 타입으로 \u003Cem\u003EType Assertion\u003C\u002Fem\u003E을 하면 \u003Cem\u003Epanic\u003C\u002Fem\u003E이 발생한다.\u003C\u002Fp\u003E\n\u003Cpre class=\"language-go\"\u003E\u003C!-- HTML_TAG_START --\u003E\u003Ccode class=\"language-go\"\u003Ei3 \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E i\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token builtin\"\u003Estring\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token comment\"\u003E\u002F\u002F this line occurs a panic\u003C\u002Fspan\u003E\nfmt\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EPrintln\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Ei3\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C!-- HTML_TAG_END --\u003E\u003C\u002Fpre\u003E\n\u003Cbr\u003E\n\u003Cp\u003E\u003Ccode\u003Eint\u003C\u002Fcode\u003E와 \u003Ccode\u003EMyInt\u003C\u002Fcode\u003E는 본질적으론 같은 타입이지만, Go는 타입에 엄격하기 때문에 \u003Cem\u003EType Assertion\u003C\u002Fem\u003E을 사용할 때 Concrete Type끼리 일치시켜주어야 한다.\n따라서 아래와 같은 예제는 \u003Cem\u003Epanic\u003C\u002Fem\u003E이 발생한다.\u003C\u002Fp\u003E\n\u003Cpre class=\"language-go\"\u003E\u003C!-- HTML_TAG_START --\u003E\u003Ccode class=\"language-go\"\u003Ei4 \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E i\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token builtin\"\u003Eint\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token comment\"\u003E\u002F\u002F this line also occurs a panic\u003C\u002Fspan\u003E\nfmt\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EPrintln\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Ei4\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C!-- HTML_TAG_END --\u003E\u003C\u002Fpre\u003E\n\u003Cbr\u003E\n\u003Cp\u003E\u003Ccode\u003Emap\u003C\u002Fcode\u003E을 사용할 때 보았던 \u003Cem\u003Ecomma ok idiom\u003C\u002Fem\u003E을 사용하여 panic을 회피할 수 있다.\u003C\u002Fp\u003E\n\u003Cpre class=\"language-go\"\u003E\u003C!-- HTML_TAG_START --\u003E\u003Ccode class=\"language-go\"\u003E\u003Cspan class=\"token comment\"\u003E\u002F\u002F ok is set to true if the type conversion was successful.\u003C\u002Fspan\u003E\n\u003Cspan class=\"token comment\"\u003E\u002F\u002F if it was not, ok is set to false and the other value is set to its zero value\u003C\u002Fspan\u003E\ni5\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E ok \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E i\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token builtin\"\u003Eint\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token comment\"\u003E\u002F\u002F i5 is set to 0, ok is set to false\u003C\u002Fspan\u003E\n\u003Cspan class=\"token keyword\"\u003Eif\u003C\u002Fspan\u003E \u003Cspan class=\"token operator\"\u003E!\u003C\u002Fspan\u003Eok \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n\tmsg \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E fmt\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EErrorf\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token string\"\u003E\"unexpected type for %v\"\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E i5\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\tfmt\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EPrintln\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Emsg\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\n\ni6\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E ok \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E i\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003EMyInt\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\u003Cspan class=\"token keyword\"\u003Eif\u003C\u002Fspan\u003E \u003Cspan class=\"token operator\"\u003E!\u003C\u002Fspan\u003Eok \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E \u003Cspan class=\"token comment\"\u003E\u002F\u002F i6 is set to 20, ok is set to true\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token comment\"\u003E\u002F\u002F this block is not reached\u003C\u002Fspan\u003E\n\tmsg \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E fmt\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EErrorf\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token string\"\u003E\"unexpected type for %v\"\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E i6\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\tfmt\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EPrintln\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Emsg\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C!-- HTML_TAG_END --\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E\u003Ccode\u003Emap\u003C\u002Fcode\u003E에서 봤던 패턴과 유사하다.\n\u003Cem\u003EType Assertion\u003C\u002Fem\u003E에 성공하면 변수 \u003Ccode\u003Eok\u003C\u002Fcode\u003E는 \u003Ccode\u003Etrue\u003C\u002Fcode\u003E가 되며, 나머지 변수는 인터페이스가 가리키는 값으로 초기화된다.\u003Cbr\u003E\n반면 실패하면 \u003Ccode\u003Eok\u003C\u002Fcode\u003E는 \u003Ccode\u003Efalse\u003C\u002Fcode\u003E가 되며, 나머지 변수는 해당 타입의 Zero value로 초기화된다.\u003C\u002Fp\u003E\n\u003Cp\u003E그렇게 얻은 \u003Ccode\u003Eok\u003C\u002Fcode\u003E 변수값을 통해 이를 \u003Ccode\u003Eif\u003C\u002Fcode\u003E문으로 처리할 수는 있지만\nGo에서는 에러 핸들링을 통해 처리하는 것을 더 지향한다는 것 같다. 에러 핸들링은 다음 챕터에서 나온다!\u003C\u002Fp\u003E\n\u003Cp\u003E어찌 됐든, 인터페이스가 가리키고 있는 데이터의 타입이 확실하다고 생각해도 되도록이면 \u003Cem\u003Ecomma ok idiom\u003C\u002Fem\u003E를 쓰는 것이 좋다.\n다른 사람이나 미래의 내가 언제 이 코드를 다시 사용할 지도 모르는 일이며, 코드를 조금 수정했는데 런타임 에러가 날 수도 있으니 말이다.\u003C\u002Fp\u003E\n\u003Cbr\u003E\u003Cbr\u003E\n\u003Cp\u003E어느 인터페이스의 타입에 여러 개의 후보군이 있다면, \u003Cem\u003EType Switch\u003C\u002Fem\u003E를 써보도록 하자.\u003C\u002Fp\u003E\n\u003Cpre class=\"language-go\"\u003E\u003C!-- HTML_TAG_START --\u003E\u003Ccode class=\"language-go\"\u003E\u003Cspan class=\"token keyword\"\u003Efunc\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003EtypeSwitch\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Ei \u003Cspan class=\"token keyword\"\u003Einterface\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token keyword\"\u003Eswitch\u003C\u002Fspan\u003E i\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token keyword\"\u003Etype\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token keyword\"\u003Ecase\u003C\u002Fspan\u003E \u003Cspan class=\"token boolean\"\u003Enil\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E:\u003C\u002Fspan\u003E\n\t\tfmt\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EPrintln\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token string\"\u003E\"nil\"\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token keyword\"\u003Ecase\u003C\u002Fspan\u003E \u003Cspan class=\"token builtin\"\u003Eint\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E:\u003C\u002Fspan\u003E\n\t\tfmt\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EPrintln\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token string\"\u003E\"int\"\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token keyword\"\u003Ecase\u003C\u002Fspan\u003E MyInt\u003Cspan class=\"token punctuation\"\u003E:\u003C\u002Fspan\u003E\n\t\tfmt\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EPrintln\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token string\"\u003E\"MyInt\"\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token keyword\"\u003Ecase\u003C\u002Fspan\u003E \u003Cspan class=\"token builtin\"\u003Estring\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E:\u003C\u002Fspan\u003E\n\t\tfmt\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EPrintln\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token string\"\u003E\"string\"\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token keyword\"\u003Ecase\u003C\u002Fspan\u003E \u003Cspan class=\"token builtin\"\u003Ebool\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token builtin\"\u003Erune\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E:\u003C\u002Fspan\u003E\n\t\tfmt\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EPrintln\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token string\"\u003E\"bool or rune\"\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token keyword\"\u003Edefault\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E:\u003C\u002Fspan\u003E\n\t\tfmt\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EPrintln\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token string\"\u003E\"what is this\"\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"token keyword\"\u003Efunc\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003Emain\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token keyword\"\u003Evar\u003C\u002Fspan\u003E a \u003Cspan class=\"token builtin\"\u003Eint\u003C\u002Fspan\u003E \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E12\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token keyword\"\u003Evar\u003C\u002Fspan\u003E b MyInt \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E23\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token keyword\"\u003Evar\u003C\u002Fspan\u003E c \u003Cspan class=\"token operator\"\u003E*\u003C\u002Fspan\u003E\u003Cspan class=\"token builtin\"\u003Estring\u003C\u002Fspan\u003E\n\td \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E\"asdasd\"\u003C\u002Fspan\u003E\n\te \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E \u003Cspan class=\"token keyword\"\u003Emap\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"token builtin\"\u003Estring\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E]\u003C\u002Fspan\u003E\u003Cspan class=\"token builtin\"\u003Estring\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n\t\t\u003Cspan class=\"token string\"\u003E\"hi\"\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E\"there\"\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token keyword\"\u003Evar\u003C\u002Fspan\u003E f \u003Cspan class=\"token keyword\"\u003Einterface\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\n\n\t\u003Cspan class=\"token function\"\u003EtypeSwitch\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Ea\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token function\"\u003EtypeSwitch\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Eb\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token function\"\u003EtypeSwitch\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Ec\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token function\"\u003EtypeSwitch\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Ed\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token function\"\u003EtypeSwitch\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Ee\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token function\"\u003EtypeSwitch\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Ef\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C!-- HTML_TAG_END --\u003E\u003C\u002Fpre\u003E\n\u003Cpre class=\"language-bash\"\u003E\u003C!-- HTML_TAG_START --\u003E\u003Ccode class=\"language-bash\"\u003Eint\nMyInt\nwhat is this\nstring\nwhat is this\nnil\u003C\u002Fcode\u003E\u003C!-- HTML_TAG_END --\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E기본적으로 형태는 boolean 표현식이 사용되지 않는 일반적인 \u003Ccode\u003Eswitch\u003C\u002Fcode\u003E문의 형태와 유사하다.\n다만 switch문 이후에 \u003Ccode\u003Ei.(type)\u003C\u002Fcode\u003E로, 인터페이스의 타입을 나타내어 주면 된다.\n이렇게 각 case문에 타입을 할당함으로써, 인터페이스의 타입에 따라 처리할 수 있다.\u003C\u002Fp\u003E\n\u003Cp\u003E실행 결과를 보면 대충 알 수 있겠지만, 3번째 줄의 경우 주의해야 할 것 같다.\n변수 \u003Ccode\u003Ec\u003C\u002Fcode\u003E는 값이 \u003Ccode\u003Enil\u003C\u002Fcode\u003E인 것이지, 타입은 \u003Ccode\u003Enil\u003C\u002Fcode\u003E이 아니라 \u003Ccode\u003E*string\u003C\u002Fcode\u003E이다.\n실제로 \u003Ccode\u003Eswitch\u003C\u002Fcode\u003E문에서 \u003Ccode\u003Ecase nil\u003C\u002Fcode\u003E에 걸리는 경우는, 변수 \u003Ccode\u003Ef\u003C\u002Fcode\u003E처럼 인터페이스가 가리키는 대상이 아무 것도 없을 때이다.\u003C\u002Fp\u003E\n\u003Cp\u003E인터페이스가 가리키는 타입에 대해 전혀 모를 경우, \u003Cem\u003Ereflection\u003C\u002Fem\u003E을 사용하면 된다고 한다.\n나중에 나온다. 나중에…\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cem\u003EType Assertion\u003C\u002Fem\u003E과 \u003Cem\u003EType Switch\u003C\u002Fem\u003E가 꽤나 유용한 기술처럼 보이는데, 자주 사용하면 안된다고 한다.\n웬만하면 함수의 파라미터나 리턴값은 특정한 몇 가지의 타입으로만 지정하는 것이 좋으며, 나머지 다른 타입들은 가능은 하더라도 안되게 해야 한다.\n그렇지 않으면 우리가 짜는 함수가 어떤 타입들을 지원하는지에 대해 정확히 명시하지 못할 수 있다.\n대충 \u003Ccode\u003Einterface{}\u003C\u002Fcode\u003E를 사용하는 걸 지양하라는 말과 일맥상통하는 것 같다. \u003Ccode\u003Einterface{}\u003C\u002Fcode\u003E를 안 쓰면 특정한 타입을 명시할 수밖에 없을 테니 말이다.\u003C\u002Fp\u003E\n\u003Cbr\u003E\n\u003Cp\u003E\u003Cem\u003EType Assertion\u003C\u002Fem\u003E과 \u003Cem\u003EType Switch\u003C\u002Fem\u003E가 유용하게 사용되는 예제에 대해 알아보자.\u003C\u002Fp\u003E\n\u003Cp\u003E가장 일반적인 경우, 한 인터페이스가 가리키고 있는 concrete type을 보기 위해 사용되는데,\n이 concrete type은 다른 인터페이스에서도 가리킬 수 있는 경우이다.\n이를테면 \u003Ccode\u003Eio\u003C\u002Fcode\u003E 라이브러리의 \u003Ccode\u003Eio.File\u003C\u002Fcode\u003E 등 여러 타입들은 \u003Ccode\u003Eio.Reader\u003C\u002Fcode\u003E와 \u003Ccode\u003Eio.Writer\u003C\u002Fcode\u003E 두 가지 인터페이스를 모두 만족시킨다.\n그 때 \u003Ccode\u003Eio.Reader\u003C\u002Fcode\u003E가 가리키고 있는 타입이 어떤 타입인지 확인하기 위해 사용할 수 있을 것이다.\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Ccode\u003Eio.Copy()\u003C\u002Fcode\u003E 함수는 \u003Ccode\u003Eio.Reader\u003C\u002Fcode\u003E와 \u003Ccode\u003Eio.Writer\u003C\u002Fcode\u003E 인터페이스들을 파라미터로 받아, \u003Ccode\u003Eio.copyBuffer()\u003C\u002Fcode\u003E함수를 실행한다.\n다만 이때 \u003Ccode\u003Eio.Reader\u003C\u002Fcode\u003E의 파라미터가 \u003Ccode\u003Eio.ReaderFrom\u003C\u002Fcode\u003E에서도 사용할 수 있거나, \u003Ccode\u003Eio.Writer\u003C\u002Fcode\u003E의 파라미터가 \u003Ccode\u003Eio.WriterTo\u003C\u002Fcode\u003E에서도 사용할 수 있다면,\n함수 내용 대부분이 생략될 수 있다.\u003C\u002Fp\u003E\n\u003Cpre class=\"language-go\"\u003E\u003C!-- HTML_TAG_START --\u003E\u003Ccode class=\"language-go\"\u003E\u003Cspan class=\"token comment\"\u003E\u002F\u002F copyBuffer is the actual implementation of Copy and CopyBuffer.\u003C\u002Fspan\u003E\n\u003Cspan class=\"token comment\"\u003E\u002F\u002F if buf is nil, one is allocated.\u003C\u002Fspan\u003E\n\u003Cspan class=\"token keyword\"\u003Efunc\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003EcopyBuffer\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Edst Writer\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E src Reader\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E buf \u003Cspan class=\"token punctuation\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E]\u003C\u002Fspan\u003E\u003Cspan class=\"token builtin\"\u003Ebyte\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Ewritten \u003Cspan class=\"token builtin\"\u003Eint64\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E err \u003Cspan class=\"token builtin\"\u003Eerror\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n    \u003Cspan class=\"token comment\"\u003E\u002F\u002F If the reader has a WriteTo method, use it to do the copy.\u003C\u002Fspan\u003E\n    \u003Cspan class=\"token comment\"\u003E\u002F\u002F Avoids an allocation and a copy.\u003C\u002Fspan\u003E\n    \u003Cspan class=\"token keyword\"\u003Eif\u003C\u002Fspan\u003E wt\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E ok \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E src\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003EWriterTo\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E ok \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n        \u003Cspan class=\"token keyword\"\u003Ereturn\u003C\u002Fspan\u003E wt\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EWriteTo\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Edst\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n    \u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\n    \u003Cspan class=\"token comment\"\u003E\u002F\u002F Similarly, if the writer has a ReadFrom method, use it to do the copy.\u003C\u002Fspan\u003E\n    \u003Cspan class=\"token keyword\"\u003Eif\u003C\u002Fspan\u003E rt\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E ok \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E dst\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003EReaderFrom\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E ok \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n        \u003Cspan class=\"token keyword\"\u003Ereturn\u003C\u002Fspan\u003E rt\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EReadFrom\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Esrc\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n    \u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\n    \u003Cspan class=\"token comment\"\u003E\u002F\u002F function continues...\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C!-- HTML_TAG_END --\u003E\u003C\u002Fpre\u003E\n\u003Cbr\u003E\n\u003Cp\u003E인터페이스는 API를 업그레이드할때도 사용된다고 한다.\n챕터 12에서 \u003Cem\u003Econtext\u003C\u002Fem\u003E에 대해 알아볼 텐데, \u003Cem\u003Econtext\u003C\u002Fem\u003E란 취소를 관리하는 표준적인 방법을 제시하는 파라미터이다.\nGo 버전 1.7부터 생긴 기능인지라, 이전 버전의 데이터베이스 드라이버 등에서는 지원하지 않는다.\u003C\u002Fp\u003E\n\u003Cp\u003EGo 1.8부터는 \u003Ccode\u003Edatabase\u002Fsql\u002Fdriver\u003C\u002Fcode\u003E 패키지에 기존에 존재하는 인터페이스에 대한 새로운 컨텍스트 인식 유사체가 정의되었다.\n이를테면 \u003Ccode\u003EStmtExecContext\u003C\u002Fcode\u003E 인터페이스에는 \u003Ccode\u003EExecContext\u003C\u002Fcode\u003E라는 메소드가 있다.\n스탠다드 라이브러리 데이터베이스 코드에 \u003Ccode\u003EStmt\u003C\u002Fcode\u003E 인터페이스의 타입이 통과될 경우,\n이 타입이 \u003Ccode\u003EStmtExecContext\u003C\u002Fcode\u003E에도 사용할 수 있는지 확인한다. 만약 그렇다면 \u003Ccode\u003EExecContext\u003C\u002Fcode\u003E를 호출한다.\n만약 그렇지 않다면, fallback code를 실행한다.\u003C\u002Fp\u003E\n\u003Cpre class=\"language-go\"\u003E\u003C!-- HTML_TAG_START --\u003E\u003Ccode class=\"language-go\"\u003E\u003Cspan class=\"token keyword\"\u003Efunc\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003EctxDriverStmtExec\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Ectx context\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003EContext\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E si driver\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003EStmt\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E\n                       nvdargs \u003Cspan class=\"token punctuation\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E]\u003C\u002Fspan\u003Edriver\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003ENamedValue\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Edriver\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003EResult\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token builtin\"\u003Eerror\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n    \u003Cspan class=\"token keyword\"\u003Eif\u003C\u002Fspan\u003E siCtx\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E is \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E si\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Edriver\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003EStmtExecContext\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E is \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n        \u003Cspan class=\"token keyword\"\u003Ereturn\u003C\u002Fspan\u003E siCtx\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EExecContext\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Ectx\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E nvdargs\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n    \u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\n    \u003Cspan class=\"token comment\"\u003E\u002F\u002F fallback code is here\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C!-- HTML_TAG_END --\u003E\u003C\u002Fpre\u003E\n\u003Cbr\u003E\n\u003Cp\u003E이런 optional interface 기능에는 한 가지 단점이 존재한다.\n한 인터페이스로 여러 가지 타입을 사용하여 계층적 구조를 만드는 decorator 패턴을 사용하기 위해 인터페이스가 많이들 사용된다.\n이 때, 어느 optional interface가 이 타입들 중 한 가지라도 사용할 수 있다면, \u003Cem\u003EType Assertion\u003C\u002Fem\u003E과 \u003Cem\u003EType Switch\u003C\u002Fem\u003E으로 이를 감지할 수 없다.\u003C\u002Fp\u003E\n\u003Cp\u003E그 예로 \u003Ccode\u003Ebufio\u003C\u002Fcode\u003E라는 표준 라이브러리는 buffered reader를 제공한다.\n이 때 \u003Ccode\u003Ebufio.NewReader()\u003C\u002Fcode\u003E 함수에 \u003Ccode\u003Eio.Reader\u003C\u002Fcode\u003E를 지원하는 타입을 파라미터로 통과시키면, \u003Ccode\u003E*bufio.Reader\u003C\u002Fcode\u003E를 리턴받는다.\n만약 파라미터로 넘겨진 \u003Ccode\u003Eio.Reader\u003C\u002Fcode\u003E의 타입이 \u003Ccode\u003Eio.ReaderFrom\u003C\u002Fcode\u003E도 지원하는 경우, 이를 buffered reader로 감싸게 되면 최적화가 되지 않는다.\u003C\u002Fp\u003E\n\u003Cp\u003E에러 핸들링 할때도 본 현상인데, 에러는 다른 에러를 감싸는 것을 통해 추가적인 정보를 포함할 수 있다.\n\u003Cem\u003EType Assertion\u003C\u002Fem\u003E과 \u003Cem\u003EType Switch\u003C\u002Fem\u003E로는 감싸진 에러를 확인할 수 없기 때문에,\n제대로 핸들링하기 위해 감싸진 에러에 접근하려면 \u003Ccode\u003Eerrors.Is()\u003C\u002Fcode\u003E나 \u003Ccode\u003Eerrors.As()\u003C\u002Fcode\u003E같은 함수를 사용해야 한다.\u003C\u002Fp\u003E\n\u003Cbr\u003E\n\u003Cp\u003E\u003Cem\u003EType Switch\u003C\u002Fem\u003E는 인터페이스를 지원하는 타입들이 여러 개 있고, 각 타입마다 다르게 처리해줘야 하는 경우 유용하다.\n그중 가장 유용한 경우는, 유효한 타입이 딱 한 개만 존재하는 경우이다.\u003C\u002Fp\u003E\n\u003Cp\u003E웬만하면 \u003Ccode\u003Eswitch\u003C\u002Fcode\u003E문에 \u003Ccode\u003Edefault\u003C\u002Fcode\u003E를 반드시 넣어주는 게 좋다.\n인터페이스를 지원하는 타입을 추가했는데 \u003Ccode\u003Eswitch\u003C\u002Fcode\u003E문을 업데이트하는 것을 까먹은 경우 \u003Ccode\u003Edefault\u003C\u002Fcode\u003E 블록에 걸리므로, 문제를 추적하기 쉬워질 것이다.\u003C\u002Fp\u003E\n\u003Cbr\u003E\u003Cbr\u003E\n\u003Ch3 id=\"function-types-are-a-bridge-to-interfaces\"\u003E\u003Ca aria-hidden=\"true\" tabindex=\"-1\" href=\"#function-types-are-a-bridge-to-interfaces\"\u003E\u003Cspan class=\"icon icon-link\"\u003E\u003C\u002Fspan\u003E\u003C\u002Fa\u003EFunction Types Are a Bridge to Interfaces\u003C\u002Fh3\u003E\n\u003Cp\u003EGo에서는 함수를 비롯하여 유저가 정의한 타입이라면 어떠한 타입이든 메소드를 추가할 수 있으며, 이는 굉장히 유용하다.\u003C\u002Fp\u003E\n\u003Cp\u003E가장 일반적인 사례는 HTTP 요청을 처리하는 HTTP 핸들러이다. 이는 아래와 같이 인터페이스로 정의되어 있다.\u003C\u002Fp\u003E\n\u003Cpre class=\"language-go\"\u003E\u003C!-- HTML_TAG_START --\u003E\u003Ccode class=\"language-go\"\u003E\u003Cspan class=\"token keyword\"\u003Etype\u003C\u002Fspan\u003E Handler \u003Cspan class=\"token keyword\"\u003Einterface\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n    \u003Cspan class=\"token function\"\u003EServeHTTP\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Ehttp\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003EResponseWriter\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token operator\"\u003E*\u003C\u002Fspan\u003Ehttp\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003ERequest\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C!-- HTML_TAG_END --\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E\u003Ccode\u003Ehttp.ResponseWriter\u003C\u002Fcode\u003E, \u003Ccode\u003E*http.Request\u003C\u002Fcode\u003E를 파라미터로 받는 함수들은 \u003Ccode\u003EHandlerFunc\u003C\u002Fcode\u003E로 타입 변환을 할 수 있다.\n그러면 \u003Ccode\u003EServeHTTP()\u003C\u002Fcode\u003E를 호출할 수 있게 되며, \u003Ccode\u003Ehttp.Handler\u003C\u002Fcode\u003E 인터페이스를 사용할 수 있게 된다.\u003C\u002Fp\u003E\n\u003Cpre class=\"language-go\"\u003E\u003C!-- HTML_TAG_START --\u003E\u003Ccode class=\"language-go\"\u003E\u003Cspan class=\"token keyword\"\u003Etype\u003C\u002Fspan\u003E HandlerFunc \u003Cspan class=\"token keyword\"\u003Efunc\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Ehttp\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003EResponseWriter\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token operator\"\u003E*\u003C\u002Fspan\u003Ehttp\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003ERequest\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"token keyword\"\u003Efunc\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Ef HandlerFunc\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003EServeHTTP\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Ew http\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003EResponseWriter\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E r \u003Cspan class=\"token operator\"\u003E*\u003C\u002Fspan\u003Ehttp\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003ERequest\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n    \u003Cspan class=\"token function\"\u003Ef\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Ew\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E r\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C!-- HTML_TAG_END --\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E이러한 방식을 통해 \u003Ccode\u003Ehttp.Handler\u003C\u002Fcode\u003E의 인터페이스를 충족시키기만 하면 함수, 메소드, Closure를 HTTP 핸들러로 사용할 수 있다.\u003C\u002Fp\u003E\n\u003Cbr\u003E\n\u003Cp\u003EGo에서 함수는 가장 중요한 개념인 만큼, 또 다른 함수의 파라미터로 전달된다.\n한편으로, Go에서는 작은 인터페이스를 권장하며, 메소드가 하나 뿐인 인터페이스는 함수의 파라미터로 전달되는 함수를 대체할 수 있다.\n그렇다면 이런 질문이 생길 수 있다. 파라미터인 함수의 타입을 언제 명시해줘야 하며, 언제 인터페이스를 써야 할까?\u003C\u002Fp\u003E\n\u003Cp\u003E만약 함수가 다른 함수들이나, 파라미터가 아닌 state에 의존한다면,\n인터페이스 파라미터를 사용하고 인터페이스에 대한 bridge로써 함수 타입을 정의하는 것이 좋다고 한다.\n이를테면 이는 \u003Ccode\u003Ehttp\u003C\u002Fcode\u003E 패키지에서 사용하는 방식이다. http 핸들러는 설정해주어야 하는 연쇄적인 함수 호출의 진입점일 가능성이 높다.\n반면 함수가 \u003Ccode\u003Esort.Slice()\u003C\u002Fcode\u003E처럼 간단한 함수일 경우, 인터페이스보단 그냥 함수를 넘기는 게 좋다고 한다.\u003C\u002Fp\u003E\n\u003Cbr\u003E\u003Cbr\u003E\n\u003Ch3 id=\"implicit-interfaces-make-dependency-injection-easier\"\u003E\u003Ca aria-hidden=\"true\" tabindex=\"-1\" href=\"#implicit-interfaces-make-dependency-injection-easier\"\u003E\u003Cspan class=\"icon icon-link\"\u003E\u003C\u002Fspan\u003E\u003C\u002Fa\u003EImplicit Interfaces Make Dependency Injection Easier\u003C\u002Fh3\u003E\n\u003Cp\u003E\u003Cstrong\u003EDependency Injection\u003C\u002Fstrong\u003E이란 코드가 수행하는 기능과 작업을 분명하게 명시해야 한다는 개념이다.\nGo의 인터페이스는 디커플링을 맛깔나게 잘 해줘서 Dependency Injection이 엄청 잘 된다고 한다.\n그래서 다른 언어에서 Dependency Injection를 위해 복잡한 프레임워크를 사용하는 반면,\nGo는 어떠한 외부 라이브러리도 사용하지 않는다.\u003C\u002Fp\u003E\n\u003Cp\u003EDependency Injection이 어떻게 이루어지는지 보기 위해, 간단한 웹 서버 예제를 만들어보자.\u003C\u002Fp\u003E\n\u003Cpre class=\"language-go\"\u003E\u003C!-- HTML_TAG_START --\u003E\u003Ccode class=\"language-go\"\u003E\u003Cspan class=\"token keyword\"\u003Efunc\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003ELogOutput\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Emessage \u003Cspan class=\"token builtin\"\u003Estring\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n    fmt\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EPrintln\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Emessage\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"token keyword\"\u003Etype\u003C\u002Fspan\u003E SimpleDataStore \u003Cspan class=\"token keyword\"\u003Estruct\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n    userData \u003Cspan class=\"token keyword\"\u003Emap\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"token builtin\"\u003Estring\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E]\u003C\u002Fspan\u003E\u003Cspan class=\"token builtin\"\u003Estring\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"token keyword\"\u003Efunc\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Esds SimpleDataStore\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003EUserNameForID\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003EuserID \u003Cspan class=\"token builtin\"\u003Estring\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token builtin\"\u003Estring\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token builtin\"\u003Ebool\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n    name\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E ok \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E sds\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003EuserData\u003Cspan class=\"token punctuation\"\u003E[\u003C\u002Fspan\u003EuserID\u003Cspan class=\"token punctuation\"\u003E]\u003C\u002Fspan\u003E\n    \u003Cspan class=\"token keyword\"\u003Ereturn\u003C\u002Fspan\u003E name\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E ok\n\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C!-- HTML_TAG_END --\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E간단한 로깅 함수와 저장을 위한 데이터 타입, 및 데이터 탐색 메소드를 정의하였다.\n\u003Ccode\u003ESimpleDataStore\u003C\u002Fcode\u003E 인스턴스를 생성하는 factory function을 정의해보자.\u003C\u002Fp\u003E\n\u003Cpre class=\"language-go\"\u003E\u003C!-- HTML_TAG_START --\u003E\u003Ccode class=\"language-go\"\u003E\u003Cspan class=\"token keyword\"\u003Efunc\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003ENewSimpleDataStore\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E SimpleDataStore \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token keyword\"\u003Ereturn\u003C\u002Fspan\u003E SimpleDataStore\u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n\t\tuserData\u003Cspan class=\"token punctuation\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token keyword\"\u003Emap\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"token builtin\"\u003Estring\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E]\u003C\u002Fspan\u003E\u003Cspan class=\"token builtin\"\u003Estring\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n\t\t\t\u003Cspan class=\"token string\"\u003E\"1\"\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E\"Fred\"\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E\n\t\t\t\u003Cspan class=\"token string\"\u003E\"2\"\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E\"Mary\"\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E\n\t\t\t\u003Cspan class=\"token string\"\u003E\"3\"\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E\"Pat\"\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E\n\t\t\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C!-- HTML_TAG_END --\u003E\u003C\u002Fpre\u003E\n\u003Cbr\u003E\n\u003Cp\u003E이제 유저에게 “hello” 또는 “good bye”라고 날리는 로직을 작성해 볼 것이다.\n이 로직은 유저에게 접근해야 하므로 접근 대상이 되는 자료구조와, 로깅을 하는 함수에 대한 의존성이 존재한다.\n하지만 우리는 \u003Ccode\u003ELogOutput()\u003C\u002Fcode\u003E이나 \u003Ccode\u003ESimpleDataStore\u003C\u002Fcode\u003E에 대한 직접적인 의존성을 만들고 싶지 않다.\n미래에 다른 자료구조나 로깅 함수를 사용할 수도 있기 때문이다.\u003C\u002Fp\u003E\n\u003Cp\u003E바로 이러한 경우, 인터페이스가 적절한 해법이 된다.\u003C\u002Fp\u003E\n\u003Cpre class=\"language-go\"\u003E\u003C!-- HTML_TAG_START --\u003E\u003Ccode class=\"language-go\"\u003E\u003Cspan class=\"token keyword\"\u003Etype\u003C\u002Fspan\u003E DataStore \u003Cspan class=\"token keyword\"\u003Einterface\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token function\"\u003EUserNameForID\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003EuserID \u003Cspan class=\"token builtin\"\u003Estring\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token builtin\"\u003Estring\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token builtin\"\u003Ebool\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"token keyword\"\u003Etype\u003C\u002Fspan\u003E Logger \u003Cspan class=\"token keyword\"\u003Einterface\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token function\"\u003ELog\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Emessage \u003Cspan class=\"token builtin\"\u003Estring\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"token keyword\"\u003Etype\u003C\u002Fspan\u003E LoggerAdapter \u003Cspan class=\"token keyword\"\u003Efunc\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Emessage \u003Cspan class=\"token builtin\"\u003Estring\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"token keyword\"\u003Efunc\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Elg LoggerAdapter\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003ELog\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Emessage \u003Cspan class=\"token builtin\"\u003Estring\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token function\"\u003Elg\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Emessage\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C!-- HTML_TAG_END --\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E\u003Ccode\u003ELoggerAdapter\u003C\u002Fcode\u003E를 선언해 \u003Ccode\u003ELogOutput()\u003C\u002Fcode\u003E함수를 \u003Ccode\u003ELogger\u003C\u002Fcode\u003E에 연결해 주었다.\n이제 우리의 비즈니스 로직은 인터페이스들을 사용하여 자료구조에 접근하고, 로깅을 할 수 있다.\u003C\u002Fp\u003E\n\u003Cp\u003E의존성이 정의되었으니, 비즈니스 로직을 완성해보자.\u003C\u002Fp\u003E\n\u003Cpre class=\"language-go\"\u003E\u003C!-- HTML_TAG_START --\u003E\u003Ccode class=\"language-go\"\u003E\u003Cspan class=\"token keyword\"\u003Etype\u003C\u002Fspan\u003E SimpleLogic \u003Cspan class=\"token keyword\"\u003Estruct\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n\tl  Logger\n\tds DataStore\n\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"token keyword\"\u003Efunc\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Esl SimpleLogic\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003ESayHello\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003EuserID \u003Cspan class=\"token builtin\"\u003Estring\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token builtin\"\u003Estring\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token builtin\"\u003Eerror\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n\tsl\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003El\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003ELog\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token string\"\u003E\"in say hello for \"\u003C\u002Fspan\u003E \u003Cspan class=\"token operator\"\u003E+\u003C\u002Fspan\u003E userID\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\tname\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E ok \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E sl\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003Eds\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EUserNameForID\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003EuserID\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token keyword\"\u003Eif\u003C\u002Fspan\u003E \u003Cspan class=\"token operator\"\u003E!\u003C\u002Fspan\u003Eok \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n\t\t\u003Cspan class=\"token keyword\"\u003Ereturn\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E\"\"\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E errors\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003ENew\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token string\"\u003E\"unknown user\"\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token keyword\"\u003Ereturn\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E\"Hello, \"\u003C\u002Fspan\u003E \u003Cspan class=\"token operator\"\u003E+\u003C\u002Fspan\u003E name\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token boolean\"\u003Enil\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"token keyword\"\u003Efunc\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Esl SimpleLogic\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003ESayGoodbye\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003EuserID \u003Cspan class=\"token builtin\"\u003Estring\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token builtin\"\u003Estring\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token builtin\"\u003Eerror\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n\tsl\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003El\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003ELog\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token string\"\u003E\"in say goodbye for \"\u003C\u002Fspan\u003E \u003Cspan class=\"token operator\"\u003E+\u003C\u002Fspan\u003E userID\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\tname\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E ok \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E sl\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003Eds\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EUserNameForID\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003EuserID\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token keyword\"\u003Eif\u003C\u002Fspan\u003E \u003Cspan class=\"token operator\"\u003E!\u003C\u002Fspan\u003Eok \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n\t\t\u003Cspan class=\"token keyword\"\u003Ereturn\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E\"\"\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E errors\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003ENew\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token string\"\u003E\"unknown user\"\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token keyword\"\u003Ereturn\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E\"Goodbye, \"\u003C\u002Fspan\u003E \u003Cspan class=\"token operator\"\u003E+\u003C\u002Fspan\u003E name\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token boolean\"\u003Enil\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"token keyword\"\u003Efunc\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003ENewSimpleLogic\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003El Logger\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E ds DataStore\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E SimpleLogic \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n    \u003Cspan class=\"token keyword\"\u003Ereturn\u003C\u002Fspan\u003E SimpleLogic\u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n        l\u003Cspan class=\"token punctuation\"\u003E:\u003C\u002Fspan\u003E    l\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E\n        ds\u003Cspan class=\"token punctuation\"\u003E:\u003C\u002Fspan\u003E ds\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E\n    \u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"token keyword\"\u003Efunc\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003ENewSimpleLogic\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003El Logger\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E ds DataStore\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E SimpleLogic \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token keyword\"\u003Ereturn\u003C\u002Fspan\u003E SimpleLogic\u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n\t\tl\u003Cspan class=\"token punctuation\"\u003E:\u003C\u002Fspan\u003E  l\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E\n\t\tds\u003Cspan class=\"token punctuation\"\u003E:\u003C\u002Fspan\u003E ds\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C!-- HTML_TAG_END --\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E\u003Ccode\u003ELogger\u003C\u002Fcode\u003E와 \u003Ccode\u003EDataStore\u003C\u002Fcode\u003E를 필드로 갖는 \u003Ccode\u003ESimpleLogic\u003C\u002Fcode\u003E이라는 \u003Ccode\u003Estruct\u003C\u002Fcode\u003E와, factory function을 정의해주었다.\n이 \u003Ccode\u003ESimpleLogic\u003C\u002Fcode\u003E 내의 메소드는 다른 concrete type을 레퍼런스하지 않기 때문에, 의존성이 없다.\n그래서 차후 라이브러리를 교체하더라도 인터페이스는 라이브러리와 관련이 없기 때문에 문제가 발생하지 않는다.\u003C\u002Fp\u003E\n\u003Cbr\u003E\n\u003Cp\u003E이제 \u003Ccode\u003E\u002Fhello\u003C\u002Fcode\u003E라는 엔드포인트를 정의해볼 것이다. 이 엔드포인트에서는 유저의 ID가 같이 오면 인사를 할 것이다.\n\u003Cem\u003EController\u003C\u002Fem\u003E에게 인사를 할 로직을 쥐어주기 위해 인터페이스를 만들어주자.\u003C\u002Fp\u003E\n\u003Cpre class=\"language-go\"\u003E\u003C!-- HTML_TAG_START --\u003E\u003Ccode class=\"language-go\"\u003E\u003Cspan class=\"token keyword\"\u003Etype\u003C\u002Fspan\u003E Logic \u003Cspan class=\"token keyword\"\u003Einterface\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n    \u003Cspan class=\"token function\"\u003ESayHello\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003EuserID \u003Cspan class=\"token builtin\"\u003Estring\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token builtin\"\u003Estring\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token builtin\"\u003Eerror\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C!-- HTML_TAG_END --\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E이 인터페이스는 \u003Ccode\u003ESimpleLogic\u003C\u002Fcode\u003E을 가리킬 수 있다.\n인터페이스는 클라이언트 코드에서 정의되기 때문에, 수정이 필요하다면 클라이언트 코드에서 수정하면 그만이다.\n따라서 \u003Ccode\u003ESimpleLogic\u003C\u002Fcode\u003E이 나중에 변경되거나, 혹은 새로운 로직이 추가되더라도 별다른 문제 없이 사용할 수 있다.\u003C\u002Fp\u003E\n\u003Cpre class=\"language-go\"\u003E\u003C!-- HTML_TAG_START --\u003E\u003Ccode class=\"language-go\"\u003E\u003Cspan class=\"token keyword\"\u003Etype\u003C\u002Fspan\u003E Controller \u003Cspan class=\"token keyword\"\u003Estruct\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n\tl     Logger\n\tlogic Logic\n\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"token keyword\"\u003Efunc\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Ec Controller\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003ESayHello\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Ew http\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003EResponseWriter\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E r \u003Cspan class=\"token operator\"\u003E*\u003C\u002Fspan\u003Ehttp\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003ERequest\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n\tc\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003El\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003ELog\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token string\"\u003E\"In sayhello\"\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\tuserID \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E r\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003EURL\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EQuery\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003Eget\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token string\"\u003E\"user_id\"\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\tmessage\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E err \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E c\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003Elogic\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003ESayHello\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003EuserID\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token keyword\"\u003Eif\u003C\u002Fspan\u003E err \u003Cspan class=\"token operator\"\u003E!=\u003C\u002Fspan\u003E \u003Cspan class=\"token boolean\"\u003Enil\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n\t\tw\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EWriteHeader\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Ehttp\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003EStatusBadRequest\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\t\tw\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EWrite\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E]\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003Ebyte\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Eerr\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EError\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\t\t\u003Cspan class=\"token keyword\"\u003Ereturn\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\n\tw\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EWrite\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E]\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003Ebyte\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Emessage\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"token keyword\"\u003Efunc\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003ENewController\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003El Logger\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E logic Logic\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E Controller \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token keyword\"\u003Ereturn\u003C\u002Fspan\u003E Controller\u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n\t\tl\u003Cspan class=\"token punctuation\"\u003E:\u003C\u002Fspan\u003E     l\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E\n\t\tlogic\u003Cspan class=\"token punctuation\"\u003E:\u003C\u002Fspan\u003E logic\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C!-- HTML_TAG_END --\u003E\u003C\u002Fpre\u003E\n\u003Cbr\u003E\n\u003Cp\u003E마지막으로, \u003Ccode\u003Emain\u003C\u002Fcode\u003E 함수에서 모든 컴포넌트를 연결하고 서버를 열어보자.\u003C\u002Fp\u003E\n\u003Cpre class=\"language-go\"\u003E\u003C!-- HTML_TAG_START --\u003E\u003Ccode class=\"language-go\"\u003E\u003Cspan class=\"token keyword\"\u003Efunc\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003Emain\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n\tl \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003ELoggerAdapter\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003ELogOutput\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\tds \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003ENewSimpleDataStore\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\tlogic \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003ENewSimpleLogic\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003El\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E ds\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\tc \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003ENewController\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003El\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E logic\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\thttp\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EHandleFunc\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token string\"\u003E\"\u002Fhello\"\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E c\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003ESayHello\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\thttp\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EListenAndServe\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token string\"\u003E\":8080\"\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token boolean\"\u003Enil\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C!-- HTML_TAG_END --\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E파일을 실행하여 서버를 연 뒤, 브라우저에서 \u003Ccode\u003Ehttp:\u002F\u002Flocalhost:8080\u002Fhello?user_id=1\u003C\u002Fcode\u003E 및 \u003Ccode\u003Ehttp:\u002F\u002Flocalhost:8080\u002Fhello?user_id=5\u003C\u002Fcode\u003E 등으로 접속해보자.\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Ccode\u003Ehttp.HandleFunc(&quot;\u002Fhello&quot;, c.SayHello)\u003C\u002Fcode\u003E 라인을 잘 살펴보면, 두 번째 \u003Ccode\u003Ehttp.HandleFunc()\u003C\u002Fcode\u003E의 두 번째 파라미터로 \u003Ccode\u003Ec.SayHello()\u003C\u002Fcode\u003E 메소드를 보냈다.\n이때 보내진 메소드는 \u003Ccode\u003Ehttp.Handler\u003C\u002Fcode\u003E 인터페이스를 충족시키는 \u003Ccode\u003Ehttp.HandlerFunc\u003C\u002Fcode\u003E 타입으로 변환이 된다.\n\u003Ccode\u003ENewController\u003C\u002Fcode\u003E의 메소드임을 유지한 채로 말이다.\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Ccode\u003Emain\u003C\u002Fcode\u003E 함수는 concrete type들이 실제로 선언되는 유일한 영역이다.\n어느 타입 하나를 다른 타입으로 변경하고 싶다면, \u003Ccode\u003Emain\u003C\u002Fcode\u003E에서만 변경해주면 된다.\n이렇게 Dependency Injection을 통해 의존성을 Externalizing함으로써, 코드를 업데이트 할 때 변경해야 할 내용을 최소화할 수 있다.\u003C\u002Fp\u003E\n\u003Cp\u003EDependency Injection은 테스트를 더 쉽게 할 수 있도록 해주기도 한다.\n환경이 다르더라도, 입출력이 제한된 상황에서 unit test를 하는 것은 코드를 효과적으로 재사용한다.\n이를테면 위 예제에서 logger의 출력을 테스트하려고 한다면, logger의 출력을 capture하는 타입을 주입하고 인터페이스를 충족시켜주기만 하면 된다.\u003C\u002Fp\u003E\n\u003Cbr\u003E\n\u003Cp\u003E개인적으로는 Dependency Injection이 일단 짜놓으면 편하긴 한데, 직접 짜기에는 너무 복잡하고 양이 많아 보였다.\n그럴 때에는 구글님들이 \u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fgoogle\u002Fwire\" rel=\"nofollow\"\u003EWire\u003C\u002Fa\u003E라는, Dependency Injection을 도와주는 유틸리티가 있는데,\n자동적으로 concrete type 선언 코드를 만들어준다고 하니 필요하다면 잘 사용해보도록 하자.\u003C\u002Fp\u003E\n\u003Cbr\u003E\u003Cbr\u003E\n\u003Ch3 id=\"go-isnt-particularly-object-oriented\"\u003E\u003Ca aria-hidden=\"true\" tabindex=\"-1\" href=\"#go-isnt-particularly-object-oriented\"\u003E\u003Cspan class=\"icon icon-link\"\u003E\u003C\u002Fspan\u003E\u003C\u002Fa\u003EGo Isn’t Particularly Object-Oriented\u003C\u002Fh3\u003E\n\u003Cp\u003EGo라는 언어를 특정 스타일로 구분짓기는 어렵다.\n일단 절차지향은 아닌 듯 한데, 메소드 오버라이딩이나 상속도 없어서 객체지향이라기에도 애매하다.\n함수 타입과 closure가 있지만 함수형 언어도 아니다.\n만약 이러한 방법론에 맞춰서 Go 코드를 짜면, 아마 그게 이상적인 Go 코드는 아닐 것이다.\u003C\u002Fp\u003E\n\u003Cbr\u003E\u003Cbr\u003E\n\u003Ch2 id=\"refereces\"\u003E\u003Ca aria-hidden=\"true\" tabindex=\"-1\" href=\"#refereces\"\u003E\u003Cspan class=\"icon icon-link\"\u003E\u003C\u002Fspan\u003E\u003C\u002Fa\u003ERefereces\u003C\u002Fh2\u003E\n\u003Chr\u003E\n\u003Ccenter\u003E\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Flearning.oreilly.com\u002Flibrary\u002Fview\u002Flearning-go\u002F9781492077206\u002F\" rel=\"nofollow\"\u003E\u003Cimg src=\"https:\u002F\u002Flearning.oreilly.com\u002Fcovers\u002Furn:orm:book:9781492077206\u002F400w\u002F\"\u003E\u003C\u002Fa\u003E \u003Cbr\u003E\n\u003Ca href=\"https:\u002F\u002Flearning.oreilly.com\u002Flibrary\u002Fview\u002Flearning-go\u002F9781492077206\u002F\" rel=\"nofollow\"\u003EJon Bodner, 『Learning Go』, O’Reilly Media, Inc.\u003C\u002Fa\u003E\u003C\u002Fp\u003E\u003C\u002Fcenter\u003E\n\u003Cbr\u003E\n \n이번 포스트는 의역이 너무 많아용\n\u003Cp\u003E원문 참조하시는 게 좋을듯함\u003C\u002Fp\u003E\n\u003Cbr\u003E\u003Cbr\u003E",{"title":3,"date":4,"excerpt":5,"categories":6,"coverImage":8,"coverWidth":9,"coverHeight":10,"slug":11},"타입, 메소드, 인터페이스","2022-08-11T00:00:00.000Z","Types, Methods, Interfaces",[7],"Golang","\u002Fpost_img\u002FGolang_basics\u002Fcover.png",16,9,"GO7"],"uses":{"params":["post"]}}]}