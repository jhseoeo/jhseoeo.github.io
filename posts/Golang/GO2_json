{"metadata":{"title":"변수와 원시 타입","date":"Jul 21, 2022","excerpt":"Primitive Types and Variable Declaration"},"content":"<br>\n<p>본 글은 Golang을 공부하며 주요 내용이라 생각되는 것들을 기록해둔 자료이며, Ubuntu 20.04 LTS 기준으로 작성되었습니다.</p>\n<p><br><br></p>\n<h2>Variables and Constants</h2>\n<hr>\n<br>\n<h3>Variables</h3>\n<p>Go에서 변수는 아래와 같이 선언 및 초기화할 수 있다. 특이사항은 다음과 같다.</p>\n<ol>\n<li>C/C++과는 달리, 타입이 변수명 뒤에 옴</li>\n<li>변수를 생성하고 값을 할당하지 않는 C나 C++와는 달리, 변수를 생성하면 기본적으로 할당되는 값인 <span style=\"background-color: #FFF5B1\">zero value</span>가 존재함</li>\n<li>변수가 선언만 되고 사용되지 않으면 에러가 발생함</li>\n<li>권장되지는 않지만 전역변수도 됨</li>\n</ol>\n<pre><code class=\"hljs language-go\"><span class=\"hljs-keyword\">package</span> main\n\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">\"fmt\"</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> {\n\t<span class=\"hljs-keyword\">var</span> a <span class=\"hljs-keyword\">int</span> = <span class=\"hljs-number\">1</span>         <span class=\"hljs-comment\">// variable declaration</span>\n\t<span class=\"hljs-keyword\">var</span> b <span class=\"hljs-keyword\">string</span>          <span class=\"hljs-comment\">// declare string variable. it's value would be zero value of string (\"\")</span>\n\t<span class=\"hljs-keyword\">var</span> c, d = <span class=\"hljs-number\">123</span>, <span class=\"hljs-string\">\"456\"</span> <span class=\"hljs-comment\">// multiple declaration. their type would be int, string</span>\n\t<span class=\"hljs-keyword\">var</span> (                 <span class=\"hljs-comment\">// inside parentheses, variables can be declared line by line</span>\n\t\te    <span class=\"hljs-keyword\">int</span>            <span class=\"hljs-comment\">//</span>\n\t\tf    = <span class=\"hljs-number\">20</span>           <span class=\"hljs-comment\">// it's type would be int</span>\n\t\tg, h = <span class=\"hljs-number\">1.23</span>, <span class=\"hljs-string\">\"4.56\"</span> <span class=\"hljs-comment\">// multiple declaration, only specified their values</span>\n\t\ti, j <span class=\"hljs-keyword\">string</span>         <span class=\"hljs-comment\">// only specified their types</span>\n\t)\n\t<span class=\"hljs-keyword\">var</span> 한글개꿀ㅋㅋ = <span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">// 한글도 되긴 하는데 이러지 맙시다</span>\n</code></pre>\n<br>\n<p><code>:=</code> 연산자를 활용하여 변수를 선언할 수도 있다. 변수의 타입은 초기화되는 값에 따라 결정된다. c++의 <code>auto</code> 키워드와 비슷한 듯 하다.</p>\n<pre><code class=\"hljs language-go\">\tk := <span class=\"hljs-number\">10</span>        <span class=\"hljs-comment\">// variable declaration by := operator</span>\n\tk, l := <span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">20</span> <span class=\"hljs-comment\">// multiple declaration</span>\n</code></pre>\n<p><code>:=</code> 연산자는 편리하지만 주의해서 사용해야 한다. <span style=\"background-color: #FFF5B1\">Shadowing</span>이 발생할 수도 있기 때문이다.</p>\n<blockquote>\n<h3>Shadowing이란?</h3>\n<p><code>var</code> 키워드는 동일한 이름을 가진 변수를 선언할 때 에러가 발생하는데 반해,\n위 예제에서는 <code>k</code>가 선언되고, 그 아래 줄에서 <code>l</code>과 함께 <code>k</code>가 다시 선언된 것을 확인할 수 있다(<code>k</code>만 다시 선언하면 에러가 발생한다).\n이 경우 해당 Block이 끝날 때까지, 앞서 선언한 <code>k</code>의 값인 10에 접근할 수 없게 된다.</p>\n<p>이런 현상을 Shadowing이라고 하며, <code>:=</code> 연산자를 사용할 때 주의해야 하는 이유이다.\n특히 함수의 파라미터나, <code>fmt</code>같은 패키지 이름이나, 심지어는 <code>nil</code> 또는 <code>false</code> 같은 리터럴들도 Shadowing할 수 있다.\n<code>var</code> 키워드는 함수의 타입을 명시해주는 효과도 있고 Shadowing의 염려가 없으므로 <code>var</code>가 조금 더 안전한 선택지이다.\n반면 <code>if</code>, <code>switch</code>, <code>for</code>문이나 에러 핸들링 등에서는 <code>:=</code>을 주로 사용한다.</p>\n</blockquote>\n<br>\n<p>변수가 선언만 되고 사용되지 않으면 에러가 발생하니, <code>fmt.Println()</code> 함수를 활용하여 모두 출력해주자.</p>\n<pre><code class=\"hljs language-go\">\tfmt.Println(a, b, c, d, e, f, g, h, i, j, k, l)\n\tfmt.Println(asd)\n\tfmt.Println(한글개꿀ㅋㅋ)\n}\n</code></pre>\n<p><br><br></p>\n<h3>Constants</h3>\n<p>상수의 선언은 변수와 유사하다. <code>const</code> 키워드를 사용한다</p>\n<pre><code class=\"hljs language-go\"><span class=\"hljs-keyword\">package</span> main\n\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">\"fmt\"</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> {\n\t<span class=\"hljs-keyword\">const</span> a <span class=\"hljs-keyword\">int</span> = <span class=\"hljs-number\">1</span>         <span class=\"hljs-comment\">// typed</span>\n\t<span class=\"hljs-keyword\">const</span> b, c = <span class=\"hljs-number\">123</span>, <span class=\"hljs-string\">\"456\"</span> <span class=\"hljs-comment\">// untyped, multiple declaration</span>\n\t<span class=\"hljs-keyword\">const</span> (                 <span class=\"hljs-comment\">// decalaration constants using parentheses</span>\n\t\td    = <span class=\"hljs-number\">20</span>           <span class=\"hljs-comment\">// inside parentheses, constants can be declared line by line</span>\n\t\te, f = <span class=\"hljs-number\">1.23</span>, <span class=\"hljs-string\">\"4.56\"</span> <span class=\"hljs-comment\">// multiple decalaration</span>\n\t)\n\n\tfmt.Println(a, b, c, d, e, f)\n</code></pre>\n<br>\n<p>상수로 선언된 값을 변수에 할당할 때, 타입이 다르면 에러가 발생한다.</p>\n<pre><code class=\"hljs language-go\">\t<span class=\"hljs-keyword\">var</span> i <span class=\"hljs-keyword\">int</span> = a <span class=\"hljs-comment\">// constants can be value of variables when their types are same</span>\n\t<span class=\"hljs-comment\">// var f float64 = a // if types are different, it occurs error</span>\n\tfmt.Println(i)\n}\n</code></pre>\n<p><br><br></p>\n<h2>Primitive Types</h2>\n<hr>\n<p>Go의 타입들에는 아래와 같은 특징이 존재한다.</p>\n<p><br><br></p>\n<h3>bool</h3>\n<p>bool은 다른 언어와 크게 다르지 않다. Zero value는 <code>false</code>이다.</p>\n<pre><code class=\"hljs language-go\"><span class=\"hljs-keyword\">var</span> flag <span class=\"hljs-keyword\">bool</span> <span class=\"hljs-comment\">// initial value is false</span>\n<span class=\"hljs-keyword\">var</span> isAwesome = <span class=\"hljs-literal\">true</span>\nfmt.Println(flag, isAwesome)\n</code></pre>\n<p><br><br></p>\n<h3>int</h3>\n<p>int는 C/C++와 유사하다. Zero value는 0이며, signed와 unsigned로 구분된다.\n또한 8bit, 16bit, 32bit, 64bit중 변수의 크기를 결정할 수 있으며, (u)int 뒤에 크기를 붙임으로써 나타낸다.</p>\n<pre><code class=\"hljs language-go\"><span class=\"hljs-keyword\">var</span> i8 <span class=\"hljs-keyword\">int8</span> = <span class=\"hljs-number\">-128</span>                  <span class=\"hljs-comment\">// 8-bit signed integer</span>\n<span class=\"hljs-keyword\">var</span> i64 <span class=\"hljs-keyword\">int64</span> = <span class=\"hljs-number\">9223372036854775807</span> <span class=\"hljs-comment\">// 64-bit signed integer</span>\n<span class=\"hljs-keyword\">var</span> u32 <span class=\"hljs-keyword\">uint32</span> = <span class=\"hljs-number\">4294967295</span>         <span class=\"hljs-comment\">// 32-bit unsigned integer</span>\nfmt.Println(i8, i64, u32)\n</code></pre>\n<br>\n<p>이 중 <code>byte</code>라는 자료형은 <code>uint8</code>과 동일한 것으로 처리된다.</p>\n<pre><code class=\"hljs language-go\"><span class=\"hljs-keyword\">var</span> b <span class=\"hljs-keyword\">byte</span> = <span class=\"hljs-number\">123</span> <span class=\"hljs-comment\">// byte: 8-bit unsigned integer</span>\n<span class=\"hljs-keyword\">var</span> uint8_ <span class=\"hljs-keyword\">uint8</span> = <span class=\"hljs-number\">234</span>\nfmt.Println(b == uint8_) <span class=\"hljs-comment\">// doesn't occur error</span>\n</code></pre>\n<br>\n<p>크기를 붙이지 않은 <code>int</code>라는 자료형도 존재하는데, 32bit와 64bit중에서 정해진다. 이는 어떤 하드웨어를 사용하는지에 따라, 실행할때 결정된다.<br>\n다만 컴퓨터가 64bit를 사용하는 경우라고 해도, int와 int64끼리의 연산은 에러가 발생한다. int는 플랫폼마다, 하드웨어마다 실행시 크기가 다르기 때문이다.</p>\n<pre><code class=\"hljs language-go\"><span class=\"hljs-keyword\">var</span> i <span class=\"hljs-keyword\">int</span> = <span class=\"hljs-number\">9223372036854775807</span> <span class=\"hljs-comment\">// signed int. its size(32 or 64bits) is decided at compile time, determined by its hardware</span>\n<span class=\"hljs-keyword\">var</span> ui <span class=\"hljs-keyword\">uint</span> = <span class=\"hljs-number\">0</span>                 <span class=\"hljs-comment\">// unsigned int</span>\n<span class=\"hljs-comment\">// fmt.Println(i == i64) occurs error</span>\nfmt.Println(i, ui)\n</code></pre>\n<br>\n<p>일반적인 경우 <code>(u)int</code> 타입을 선택하는 것이 권장되지만,\n바이너리 파일 처리나 네트워크 통신 등, 정수 자료형의 특정한 크기를 사용해야 하는 경우라면 <code>(u)int8</code>~<code>(u)int64</code> 에서 타입을 선택한다.\n또는 라이브러리 함수를 작성하는 경우, 함수의 파라미터나 변수로 <code>(u)int64</code>를 선택하는 것이 좋다고 한다.</p>\n<br>\n<p>정수를 표기할 때 언더바(_)로 구분할 수 있다. 또한 앞에 <code>0x</code>, <code>0o</code>, <code>0b</code>를 붙여 각각 16, 8, 2진수로 표현할 수 있다.</p>\n<pre><code class=\"hljs language-go\">fmt.Println(<span class=\"hljs-number\">1</span>_2_3_4, <span class=\"hljs-number\">123</span>_456_789_123123_456) <span class=\"hljs-comment\">// numbers can distinguished by underbar(_)</span>\nfmt.Println(<span class=\"hljs-number\">0x1234</span>, <span class=\"hljs-number\">0</span>o1234, <span class=\"hljs-number\">0</span>b1101)          <span class=\"hljs-comment\">// hexadecimal, octal, binary representation</span>\n</code></pre>\n<p><br><br></p>\n<h3>float</h3>\n<p>실수를 표현하는 타입은 32bit인 <code>float32</code>와 64bit인 <code>float64</code> 두 가지로 구분된다. C/C++와 유사하게 부동소숫점(Floating point) 방식을 사용한다.</p>\n<pre><code class=\"hljs language-go\"><span class=\"hljs-keyword\">var</span> f32 <span class=\"hljs-keyword\">float32</span> = <span class=\"hljs-number\">0.5</span>   <span class=\"hljs-comment\">// f32 : 32-bits floating point number</span>\n<span class=\"hljs-keyword\">var</span> f64 <span class=\"hljs-keyword\">float32</span> = <span class=\"hljs-number\">0.524</span> <span class=\"hljs-comment\">// f64 : 64-bits floating point number</span>\nfmt.Println(f32, f64)\n</code></pre>\n<br>\n<p>또한 복소수를 표현하는 <code>complex</code> 타입도 존재한다. 다만 복소수가 필요한 수학, 물리 관련된 코드를 굳이 Go를..?</p>\n<pre><code class=\"hljs language-go\"><span class=\"hljs-keyword\">var</span> c64 <span class=\"hljs-keyword\">complex64</span> = <span class=\"hljs-built_in\">complex</span>(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>) <span class=\"hljs-comment\">// c64 : 복소수(float32 + float32)</span>\nc128 := <span class=\"hljs-built_in\">complex</span>(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>)             <span class=\"hljs-comment\">// c128 : 복소수(float64 + float64)</span>\nfmt.Println(c64, c128)\nfmt.Println(<span class=\"hljs-built_in\">real</span>(c128))      <span class=\"hljs-comment\">// 실수부</span>\nfmt.Println(<span class=\"hljs-built_in\">imag</span>(c128))      <span class=\"hljs-comment\">// 허수부</span>\nfmt.Println(cmplx.Abs(c128)) <span class=\"hljs-comment\">// 절댓값..?</span>\n</code></pre>\n<p><br><br></p>\n<h3>string</h3>\n<p>문자열을 표현하는 <code>string</code> 타입이 존재한다. 아래 코드는 기본적인 선언과 연산자들이다. Zero value는 <code>\"\"</code>이다. 또한 Go의 기본 문자열 인코딩은 UTF-8이다.</p>\n<pre><code class=\"hljs language-go\"><span class=\"hljs-keyword\">var</span> s1 <span class=\"hljs-keyword\">string</span> = <span class=\"hljs-string\">\"qwe\"</span>\n<span class=\"hljs-keyword\">var</span> s2 <span class=\"hljs-keyword\">string</span> = <span class=\"hljs-string\">\"asd\"</span>\n\nfmt.Println(s1 == s2) <span class=\"hljs-comment\">// comparison operators between string</span>\nfmt.Println(s1 > s2)\nfmt.Println(s1 + s2)\n</code></pre>\n<br>\n<p><code>string</code>을 구성하는 각 문자들은 <code>rune</code> 타입이다. <code>byte</code>가 <code>uint8</code>과 동의어인 것처럼, <code>rune</code>은 <code>int32</code>와 동의어이다.</p>\n<pre><code class=\"hljs language-go\"><span class=\"hljs-keyword\">var</span> character <span class=\"hljs-keyword\">rune</span> = <span class=\"hljs-string\">'\\u0061'</span> <span class=\"hljs-comment\">// rune represents a single character</span>\nfmt.Println(character)\n</code></pre>\n<p><br><br></p>\n<h3>Type Conversion</h3>\n<p>Go에서는 서로 다른 타입들간의 변환이 가능하다. 함수처럼 타입명에 괄호를 붙이면 된다. 이를테면 <code>int16</code>에서 <code>int32</code>로의 변환부터, <code>int</code>와 <code>float64</code> 사이의 변환 등도 가능하다</p>\n<pre><code class=\"hljs language-go\"><span class=\"hljs-comment\">// type conversion between int and float</span>\n<span class=\"hljs-keyword\">var</span> x <span class=\"hljs-keyword\">int</span> = <span class=\"hljs-number\">10</span>\n<span class=\"hljs-keyword\">var</span> y <span class=\"hljs-keyword\">float64</span> = <span class=\"hljs-number\">30.2</span>\n<span class=\"hljs-keyword\">var</span> z <span class=\"hljs-keyword\">float64</span> = <span class=\"hljs-keyword\">float64</span>(x) + y\n<span class=\"hljs-keyword\">var</span> d <span class=\"hljs-keyword\">int</span> = x + <span class=\"hljs-keyword\">int</span>(y)\nfmt.Println(z, d)\n</code></pre>\n<p><br><br></p>\n<h2>참고 자료</h2>\n<hr>\n<center>\n<p><a href=\"https://learning.oreilly.com/library/view/learning-go/9781492077206/\"><img src=\"https://learning.oreilly.com/covers/urn:orm:book:9781492077206/400w/\" alt=\"\"></a> <br>\n<a href=\"https://learning.oreilly.com/library/view/learning-go/9781492077206/\">Jon Bodner, 『Learning Go』, O'Reilly Media, Inc.</a></p>\n</center>","category":"Golang"}