{"metadata":{"title":"포인터","date":"Aug 7, 2022","excerpt":"Pointer"},"content":"<br>\n<p>본 글은 Golang을 공부하며 주요 내용이라 생각되는 것들을 기록해둔 자료이며, Ubuntu 20.04 LTS 기준으로 작성되었습니다.</p>\n<p><br><br></p>\n<h2>Pointer</h2>\n<hr>\n<p>놀랍게도 Go에는 포인터가 있다. C++ 공부하며 다신 보기 싫었던 친구인데 다시 보게 되니 감회가 새롭다.\n다들 알다시피 포인터는 특정 변수가 저장된 메모리의 주소를 가리키는 변수를 의미한다. C/C++의 포인터와 크게 다르지 않다.</p>\n<p>포인터 변수는 가리키고자 하는 메모리 주소의 첫 번째 byte address를 저장한다.</p>\n<pre><code class=\"hljs language-go\"><span class=\"hljs-keyword\">var</span> x <span class=\"hljs-keyword\">int32</span> = <span class=\"hljs-number\">10</span>\n<span class=\"hljs-keyword\">var</span> y <span class=\"hljs-keyword\">bool</span> = <span class=\"hljs-literal\">true</span>\n\npointerX := &#x26;x\npointerY := &#x26;y\n<span class=\"hljs-keyword\">var</span> pointerZ *<span class=\"hljs-keyword\">string</span>\n\nfmt.Println(pointerX, pointerY, pointerZ) <span class=\"hljs-comment\">// addresses of variables</span>\nfmt.Println(pointerZ == <span class=\"hljs-literal\">nil</span>)              <span class=\"hljs-comment\">// referencing *pointerZ occurs an runtime error(panics), because pointerZ is nil</span>\nfmt.Println(*pointerX, *pointerY)         <span class=\"hljs-comment\">// * is indirection operator.</span>\n*pointerX, *pointerY = <span class=\"hljs-number\">8</span>, <span class=\"hljs-literal\">false</span>\nfmt.Println(x, y) <span class=\"hljs-comment\">// by changing pointer's values, we can change origin value</span>\n</code></pre>\n<p><code>&#x26;</code>는 변수의 주소값을 반환하는 연산자이며, <code>*</code>는 indirection 연산자로, 해당 포인터가 가리키는 주소에 저장된 값을 반환한다.\n<code>*</code>를 통해 메모리 주소에 저장된 값에 접근하는 것을 <strong>dereferencing</strong>이라고 한다.</p>\n<p>위 코드의 출력 결과는 아래와 같다.</p>\n<pre><code class=\"hljs language-go\"><span class=\"hljs-number\">0xc0000b8000</span> <span class=\"hljs-number\">0xc0000b8004</span> &#x3C;<span class=\"hljs-literal\">nil</span>>\n<span class=\"hljs-literal\">true</span>\n<span class=\"hljs-number\">10</span> <span class=\"hljs-literal\">true</span>\n<span class=\"hljs-number\">8</span> <span class=\"hljs-literal\">false</span>\n</code></pre>\n<p>위의 <code>pointerZ</code> 변수처럼 포인터 변수를 선언하고 아무런 주소값도 할당하지 않으면 <code>nil</code>이 할당된다. 포인터 변수의 Zero value가 <code>nil</code>인 셈이다.<br>\n만약 주소가 <code>nil</code>인 접근하려고 하면 panic(런타임 에러)이 발생한다.</p>\n<br>\n<p><code>new()</code> 함수는 포인터 변수를 생성하는 built-in 함수이다. 포인터가 가리키는 값은 파라미터로 주어진 타입의 Zero value로 초기화된다.</p>\n<pre><code class=\"hljs language-go\"><span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-built_in\">new</span>(<span class=\"hljs-keyword\">int</span>)      <span class=\"hljs-comment\">// built-in function `new` creates a pointer variable</span>\nfmt.Println(a == <span class=\"hljs-literal\">nil</span>) <span class=\"hljs-comment\">// false</span>\nfmt.Println(*a)       <span class=\"hljs-comment\">// it points zero value of given type</span>\n*a = <span class=\"hljs-number\">2</span>\nfmt.Println(*a)\n</code></pre>\n<p>근데 <code>new()</code> 함수는 자주 쓰이지는 않는다고 한다.</p>\n<br>\n<p><code>&#x26;</code> 연산자를 통해서 상수나 리터럴의 주소값을 얻을 수는 없다. 이런 애들은 메모리 주소가 따로 존재하지 않기 때문이다.</p>\n<p>따라서 특정 값을 가진 포인터 변수를 생셩하려면, 먼저 일반 변수를 선언해서 값을 할당한 뒤, 해당 변수의 주소값을 넘겨주어야 한다.</p>\n<pre><code class=\"hljs language-go\">\tx := &#x26;Foo{}\n\t<span class=\"hljs-comment\">// z := &#x26;\"string\" // this statement occurs an error</span>\n\t<span class=\"hljs-keyword\">var</span> y <span class=\"hljs-keyword\">string</span>\n\tz := &#x26;y <span class=\"hljs-comment\">// to point to a primitive type, declare a variable first</span>\n\n\tfmt.Println(x, z)\n</code></pre>\n<p>이러한 방식이 직관적이기는 하지만 코드의 길이가 쓸데없이 길어진다는 단점이 있다.\n그렇다면 <em>helper function</em>이란 것을 만들어서 값을 할당해줄 수 있다.</p>\n<pre><code class=\"hljs language-go\"><span class=\"hljs-keyword\">type</span> person <span class=\"hljs-keyword\">struct</span> {\n\tFirstName  <span class=\"hljs-keyword\">string</span>\n\tMiddleName *<span class=\"hljs-keyword\">string</span>\n\tLastName   <span class=\"hljs-keyword\">string</span>\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">stringp</span><span class=\"hljs-params\">(s <span class=\"hljs-keyword\">string</span>)</span> *<span class=\"hljs-title\">string</span></span> {\n\t<span class=\"hljs-comment\">// helper function that returns address of parameter variable</span>\n\t<span class=\"hljs-keyword\">return</span> &#x26;s\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> {\n\tp := person{\n\t\tFirstName: <span class=\"hljs-string\">\"Pat\"</span>,\n\t\t<span class=\"hljs-comment\">// MiddleName: \"Perry\",  // or</span>\n\t\t<span class=\"hljs-comment\">// MiddleName: &#x26;\"Perry\", // this lines won't compile</span>\n\t\tMiddleName: stringp(<span class=\"hljs-string\">\"Perry\"</span>), <span class=\"hljs-comment\">// helper function turned a constant value into a pointer</span>\n\t\tLastName:   <span class=\"hljs-string\">\"Peterson\"</span>,\n\t}\n\n\tfmt.Println(p)\n}\n</code></pre>\n<p><br><br></p>\n<h2>Passing Pointers</h2>\n<hr>\n<br>\n<h3>Pass by Pointer</h3>\n<p>다들 알다시피, struct를 비롯한 원시 타입의 변수를 함수의 파라미터로 넘기면, 함수 안에서 해당 파라미터를 어떻게 수정하든 그 값이 바뀌지 않는다.\nGo는 <strong>Call by Value</strong> 기반이기 때문.</p>\n<pre><code class=\"hljs language-go\"><span class=\"hljs-keyword\">type</span> person <span class=\"hljs-keyword\">struct</span> {\n\tname <span class=\"hljs-keyword\">string</span>\n\tage  <span class=\"hljs-keyword\">int</span>\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">modifyFails</span><span class=\"hljs-params\">(i <span class=\"hljs-keyword\">int</span>, s <span class=\"hljs-keyword\">string</span>, p person)</span></span> { <span class=\"hljs-comment\">// all the parameters are passed by value(copied), not referenced or aliased</span>\n\ti *= <span class=\"hljs-number\">2</span>\n\ts = <span class=\"hljs-string\">\"goodbye\"</span>\n\tp.name = <span class=\"hljs-string\">\"Bob\"</span> <span class=\"hljs-comment\">// even for the struct, cannot change the origin value by modifying parameters.</span>\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> {\n\tp, i, s := person{}, <span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">\"hello\"</span>\n\tmodifyFails(i, s, p) <span class=\"hljs-comment\">// this invocation of function can't make any change on variables above</span>\n\tfmt.Println(i, s, p)\n}\n</code></pre>\n<br>\n<p>다만 이는 파라미터로 넘기는 변수의 타입이 <em>slice</em>이거나 <em>map</em>이면 달라지는데, slice와 map은 <strong>Pass by Pointer</strong>로 넘겨진다.\n따라서 파라미터로 받은 함수에서 값을 변경할 수 있다.</p>\n<pre><code class=\"hljs language-go\"><span class=\"hljs-comment\">// slices and maps are passed passed by pointers</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">modifyMap</span><span class=\"hljs-params\">(m <span class=\"hljs-keyword\">map</span>[<span class=\"hljs-keyword\">int</span>]<span class=\"hljs-keyword\">string</span>)</span></span> {\n\t<span class=\"hljs-comment\">// changing map parameters are reflected in the variables passed into the function</span>\n\tm[<span class=\"hljs-number\">2</span>] = <span class=\"hljs-string\">\"hello\"</span>\n\tm[<span class=\"hljs-number\">3</span>] = <span class=\"hljs-string\">\"goodbye\"</span>\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">modifySlice</span><span class=\"hljs-params\">(s []<span class=\"hljs-keyword\">int</span>)</span></span> {\n\t<span class=\"hljs-comment\">// we can modify any element in the slice, but can't lengthen the slice</span>\n\t<span class=\"hljs-keyword\">for</span> k, v := <span class=\"hljs-keyword\">range</span> s {\n\t\ts[k] = v * <span class=\"hljs-number\">2</span>\n\t}\n\ts = <span class=\"hljs-built_in\">append</span>(s, <span class=\"hljs-number\">10</span>) <span class=\"hljs-comment\">// this line actually did not append a value to origin variable</span>\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> {\n    i := <span class=\"hljs-number\">20</span>\n    modify(i)\n    fmt.Println(i)\n}\n</code></pre>\n<br>\n<p>파라미터로 넘기는 변수를 포인터로 지정해주면 Pass by Pointer가 된다.\n이 경우 <em>dereferencing</em>을 통해 메모리 주소에 직접 접근하여 변수의 값을 변경할 수 있다.\n다만 포인터 변수에 새로운 변수의 주소값을 할당한다고 해서 원래의 값이 바뀌지는 않는다(아래 예제의 <code>failedUpdate()</code>함수 참조).</p>\n<pre><code class=\"hljs language-go\">\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">update</span><span class=\"hljs-params\">(g *<span class=\"hljs-keyword\">int</span>)</span></span> {\n\t*g = <span class=\"hljs-number\">10</span> <span class=\"hljs-comment\">// dereferencing => success to change original value</span>\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">failedUpdate</span><span class=\"hljs-params\">(g *<span class=\"hljs-keyword\">int</span>)</span></span> {\n\tx := <span class=\"hljs-number\">20</span>\n\tg = &#x26;x <span class=\"hljs-comment\">// where the pointer is pointing at is changed</span>\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> {\n\t<span class=\"hljs-keyword\">var</span> x *<span class=\"hljs-keyword\">int</span>\n\t<span class=\"hljs-keyword\">var</span> y <span class=\"hljs-keyword\">int</span>\n\n\t<span class=\"hljs-comment\">// update(x) // this invocation occurs an error. cannot dereference nil</span>\n\tupdate(&#x26;y)\n\tfmt.Println(y)\n\n\tfailedUpdate(x)\n\tfailedUpdate(&#x26;y) <span class=\"hljs-comment\">// those two invocations cannot changed x and y's values</span>\n\n\tfmt.Println(x, y)\n}\n</code></pre>\n<br>\n<p>따라서 위에서 보았던 <code>modifySlice()</code> 함수에서, 파라미터로 넘긴 변수가 <code>s = append(s, 10)</code> 라인에 의해 변경되지 않으리라는 것을 알 수 있다.</p>\n<pre><code class=\"hljs language-go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">modifySlice</span><span class=\"hljs-params\">(s []<span class=\"hljs-keyword\">int</span>)</span></span> {\n\t<span class=\"hljs-comment\">// we can modify any element in the slice, but can't lengthen the slice</span>\n\t<span class=\"hljs-keyword\">for</span> k, v := <span class=\"hljs-keyword\">range</span> s {\n\t\ts[k] = v * <span class=\"hljs-number\">2</span>\n\t}\n\ts = <span class=\"hljs-built_in\">append</span>(s, <span class=\"hljs-number\">10</span>) <span class=\"hljs-comment\">// this line actually did not append a value to origin variable</span>\n}\n</code></pre>\n<p>추가적으로, Go 내부적으로 slice는 원소들이 저장되는 메모리 주소에 대한 포인터, <code>cap</code>, <code>len</code>, 이렇게 세 개의 원소로 구성된 struct 구조체라고 볼 수 있다.\n따라서 slice가 파라미터로 넘어오면 원본 slice의 cap, len은 복사된 정수로 변경할 수 없는데 반해, 원소들이 저장된 메모리 공간에 대한 변경은 가능한 것이다.</p>\n<p><br><br></p>\n<h3>Avoid Passing by Pointer</h3>\n<p>일반적으로 구조체 등 데이터를 생성하거나 설정하고자 할 때, 이를 <em>Pass by Pointer</em>로 넘기는 방식은 직관적이지 않다.\n경우에 따라 오히려 이를 수행하는데 필요한 자원이 더 많이 소모하게 될 수도 있다.</p>\n<pre><code class=\"hljs language-go\"><span class=\"hljs-keyword\">type</span> Foo <span class=\"hljs-keyword\">struct</span> {\n\tfoo <span class=\"hljs-keyword\">int</span>\n\tbar <span class=\"hljs-keyword\">string</span>\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">MakeFoo1</span><span class=\"hljs-params\">(f *Foo)</span> <span class=\"hljs-title\">error</span></span> {\n\t<span class=\"hljs-comment\">// not +recommended format</span>\n\tf.foo = <span class=\"hljs-number\">20</span>\n\tf.bar = <span class=\"hljs-string\">\"val\"</span>\n\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span>\n}\n\n<span class=\"hljs-comment\">// rather than using pointer parameter to pass a value, just return this.</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">MakeFoo2</span><span class=\"hljs-params\">()</span> <span class=\"hljs-params\">(Foo, error)</span></span> {\n\t<span class=\"hljs-comment\">// recommended format</span>\n\tf := Foo{\n\t\tfoo: <span class=\"hljs-number\">20</span>,\n\t\tbar: <span class=\"hljs-string\">\"val\"</span>,\n\t}\n\t<span class=\"hljs-keyword\">return</span> f, <span class=\"hljs-literal\">nil</span>\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> {\n\ta := Foo{}\n\tMakeFoo1(&#x26;a) <span class=\"hljs-comment\">// rather than using this pattern,</span>\n\n\tb, _ := MakeFoo2() <span class=\"hljs-comment\">// use this pattern</span>\n\n\tfmt.Println(a, b)\n}\n</code></pre>\n<p>위 예시처럼 <em>Pass by Pointer</em>를 사용하기보단, 그냥 그 값을 반환하는 형식이 시각적으로도 더 좋다.</p>\n<br>\n<p>다만 예외사항이 좀 있다. 이를테면 JSON을 파싱하는 경우, <code>Unmarshal()</code>과 같은 일부 함수들은 포인터 파라미터를 사용하기도 한다.</p>\n<pre><code class=\"hljs language-go\">\tf := <span class=\"hljs-keyword\">struct</span> {\n\t\tName <span class=\"hljs-keyword\">string</span> <span class=\"hljs-string\">`json:\"name\"`</span>\n\t\tAge  <span class=\"hljs-keyword\">int</span>    <span class=\"hljs-string\">`json:\"age\"`</span>\n\t}{}\n\terr := json.Unmarshal([]<span class=\"hljs-keyword\">byte</span>(<span class=\"hljs-string\">`{\"name\": \"Bob\", \"age\": 30}`</span>), &#x26;f)\n\t<span class=\"hljs-keyword\">if</span> err == <span class=\"hljs-literal\">nil</span> {\n\t\tfmt.Println(f)\n\t}\n</code></pre>\n<br>\n<p>또는, 반환해야 할(또는 파라미터로 넘겨야 할) 데이터가 메가바이트 단위 이상일 경우, Pass by Pointer를 사용하는 것이 훨씬 빠르다고 한다.</p>\n<p><br><br></p>\n<h2>Garbage Collector</h2>\n<hr>\n<p>Go에는 가비지 콜렉터가 존재한다. 이녀석의 역할은 더 이상 사용되지 않는 메모리 공간을 반환하는 것으로, Go는 메모리 관리를 프로그램 레벨에서 해준다.\n다만 가비지 콜렉터가 존재한다고 해도 생각없이 코드를 짜면 가비지 콜렉터의 워크로드가 늘어나 프로그램이 느려질 수 있다.</p>\n<br>\n<pre><code class=\"hljs language-go\">r := open_resource()\nwhile r.has_data() {\n\tdata_chunk := r.next_chunk()\n\tprocess(data_chunk)\n}\nr.<span class=\"hljs-built_in\">close</span>()\n</code></pre>\n<p>위 코드는 안좋은 예로, 매 이터레이션마다 <code>r.next_chunk()</code>의 반환값을 받아들이는 <code>data_chunk</code> 변수가 생성된다.\n이터레이션이 끝날 때마다 <code>data_chunk</code>에 저장된 값은 필요 없는 메모리 공간이 되고, 가비지 콜렉터가 해야 하는 일이 쌓이게 되는 것이다.</p>\n<p>아래 예제는 <em>Slice</em>를 <em>Buffer</em>처럼 사용하여, 파일의 데이터를 읽어오는 예제이다.\n매 이터레이션마다 변수 <code>data</code>에 값을 불러오고, 변수 <code>data</code>는 전체 이터레이션에서 재사용되므로, 가비지 콜렉터가 해야 할 일이 줄어든다.</p>\n<pre><code class=\"hljs language-go\">file, err := os.Open(fileName)\n<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> {\n\t<span class=\"hljs-keyword\">return</span> err\n}\n<span class=\"hljs-keyword\">defer</span> file.Close()\n\n<span class=\"hljs-comment\">// this pattern is good at reducing the garbage collector's workload</span>\ndata := <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-keyword\">byte</span>, <span class=\"hljs-number\">100</span>) <span class=\"hljs-comment\">// using slice as a buffer</span>\n<span class=\"hljs-keyword\">for</span> {\n\tcount, err := file.Read(data)\n\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> {\n\t\t<span class=\"hljs-keyword\">return</span> err\n\t}\n\t<span class=\"hljs-keyword\">if</span> count == <span class=\"hljs-number\">0</span> {\n\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span>\n\t}\n\tprocess(data[:count]) <span class=\"hljs-comment\">// it passes next block of bytes in to the slice (up to 100)</span>\n}\n</code></pre>\n<br>\n<p>Go에서는 기본적으로 <em>Stack</em>에 저장할 수 없는 가변적인 크기의 데이터들은 <em>Heap</em>에 저장되며, <em>Heap</em>은 가비지 콜렉터에 의해 관리된다.\n가비지 콜렉터는 어떠한 포인터도 가리키지 않는 데이터(<em>garbage</em>)들을 청소하는 알고리즘이다.\n사용가능한 데이터를 찾기 위해 한번에 최대한 많은 데이터를, 가능한한 빨리 찾게끔 디자인되어있기 때문에,\n우리가 짠 Go 코드가 <em>garbage</em>를 많이 생성할수록 <em>garbage</em>찾지 못할 확률이 높아지며, <em>garbage</em>를 찾는데 더욱 오래 걸리게 된다.\n게다가 보통 포인터가 가리키는 데이터들은 메모리 상에서 흩어져서 저장되기 때문에 찾기가 더 힘들어진다.</p>\n<p>비록 Go가 Python, Java, Javascript와 같은 여타 언어들에 비해 가비지 콜렉터의 성능이 뛰어난 편이라고는 해도,\n가비지 컬렉터가 해야 할 일을 줄여서 코드를 최적화시키는게 당연히 좋을 것이다.</p>\n<p><br><br></p>\n<h2>References</h2>\n<hr>\n<center>\n<p><a href=\"https://learning.oreilly.com/library/view/learning-go/9781492077206/\"><img src=\"https://learning.oreilly.com/covers/urn:orm:book:9781492077206/400w/\" alt=\"\"></a> <br>\n<a href=\"https://learning.oreilly.com/library/view/learning-go/9781492077206/\">Jon Bodner, 『Learning Go』, O'Reilly Media, Inc.</a></p>\n</center>\n<p><br><br></p>","mainCategory":"Golang","subCategory":"Golang Basics"}