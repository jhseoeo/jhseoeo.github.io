{"metadata":{"title":"함수","date":"Jul 31, 2022","excerpt":"Functions"},"content":"<br>\n<p>본 글은 Golang을 공부하며 주요 내용이라 생각되는 것들을 기록해둔 자료이며, Ubuntu 20.04 LTS 기준으로 작성되었습니다.</p>\n<p><br><br></p>\n<h2>Functions</h2>\n<hr>\n<br>\n<h3>Declaration and Invocation</h3>\n<p>함수에는 파라미터들과 그 타입, 반환형의 타입을 명시한다. 파라미터의 타입은 변수 선언처럼 타입이 뒤에 온다.\n파라미터와 함수 body 사이에 반환형이 위치한다.</p>\n<pre><code class=\"hljs language-go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">div</span><span class=\"hljs-params\">(numerator <span class=\"hljs-keyword\">int</span>, denominator <span class=\"hljs-keyword\">int</span>)</span> <span class=\"hljs-title\">int</span></span> { <span class=\"hljs-comment\">// parameters and each type of this, and the return type specified here</span>\n\t<span class=\"hljs-comment\">// if there is no return type specified (as like main function), no return statement is needed in the function body.</span>\n\t<span class=\"hljs-keyword\">if</span> denominator == <span class=\"hljs-number\">0</span> {\n\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>\n\t}\n\t<span class=\"hljs-keyword\">return</span> numerator / denominator\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> {\n\tres := div(<span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">5</span>)\n\tfmt.Println(res)\n}\n</code></pre>\n<p>파라미터들의 타입이 중복되면 생략할 수 있다. 위 함수의 선언 부분을 <code>func div(numerator denominator int) int {</code>로 대체하여도 동일하게 동작한다.</p>\n<p><br><br></p>\n<h3>Emulating Named Parameters using Struct</h3>\n<p>Go는 named parameter나, parameter의 default value를 지원하지 않는다(Optional parameter가 없다).\n다시 말해, 함수가 있으면 그 함수의 모든 파라미터를 넘겨줘야 한다.</p>\n<p>named parameter는 함수의 파라미터가 많을 때 유용하기 때문에, <code>struct</code>로 이를 대체할 수는 있다.\n다만 애초에 함수의 파라미터가 많은 게 그리 이상적인 상황은 아니긴 하다.\n아래의 코드는 <code>struct</code></p>\n<pre><code class=\"hljs language-go\"><span class=\"hljs-keyword\">type</span> MyFuncOpts <span class=\"hljs-keyword\">struct</span> {\n\tFirstName <span class=\"hljs-keyword\">string</span>\n\tLastName  <span class=\"hljs-keyword\">string</span>\n\tAge       <span class=\"hljs-keyword\">int</span>\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">MyFunc</span><span class=\"hljs-params\">(opts MyFuncOpts)</span> <span class=\"hljs-title\">string</span></span> {\n\t<span class=\"hljs-keyword\">return</span> opts.FirstName + <span class=\"hljs-string\">\" \"</span> + opts.LastName + <span class=\"hljs-string\">\"/\"</span> + strconv.Itoa(opts.Age)\n}\n</code></pre>\n<p><br><br></p>\n<h3>Variadic Parameter</h3>\n<p>파라미터의 타입 앞에 <code>...</code>를 붙여 variadic parameter로 만들 수 있다. Python의 *args랑 비슷하다.</p>\n<pre><code class=\"hljs language-go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">addTo</span><span class=\"hljs-params\">(base <span class=\"hljs-keyword\">int</span>, vals ...<span class=\"hljs-keyword\">int</span>)</span> <span class=\"hljs-title\">int</span></span> { <span class=\"hljs-comment\">// put three dots(...) before type to declare a parameter as variadic</span>\n\t<span class=\"hljs-keyword\">var</span> res <span class=\"hljs-keyword\">int</span>\n\t<span class=\"hljs-keyword\">for</span> _, v := <span class=\"hljs-keyword\">range</span> vals {\n\t\tres += v\n\t}\n\t<span class=\"hljs-keyword\">return</span> res\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> {\n\taddVal1 := addTo(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>)            <span class=\"hljs-comment\">// we can pass parameters as multiple parameters</span>\n\taddVal2 := addTo(<span class=\"hljs-number\">2</span>, []<span class=\"hljs-keyword\">int</span>{<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">10</span>}...) <span class=\"hljs-comment\">// we can pass parameters as slice, but must put three dots(...) after slice.</span>\n\tfmt.Println(addVal1, addVal2)\n}\n</code></pre>\n<p>Slice의 뒤에 <code>...</code>를 붙여, variadic parameter와 대응시킬 수도 있다.</p>\n<p><br><br></p>\n<h3>Multiple Return Values</h3>\n<p>Go의 특이한 점은 함수가 반환할 수 있는 값이 여러 개 존재한다는 것이다.\n<code>Tuple</code>형으로 값을 반환하는 Python과 그나마 유사한데, 사실 이것도 <code>Tuple</code>로 묶어서 보내는 거라 엄연히 다르다.</p>\n<p>반환 값을 여러개 설정하려면 반환형을 써야 할 위치에 반환형들을 순서대로 나열한 뒤 소괄호로 묶으면 된다.\n<code>return</code>할 때 괄호로 묶어줄 필요는 없다.</p>\n<pre><code class=\"hljs language-go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">divAndRemainder</span><span class=\"hljs-params\">(numerator <span class=\"hljs-keyword\">int</span>, denomiator <span class=\"hljs-keyword\">int</span>)</span> <span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">int</span>, error)</span></span> {\n\t<span class=\"hljs-keyword\">if</span> denomiator == <span class=\"hljs-number\">0</span> {\n\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, errors.New(<span class=\"hljs-string\">\"cannot divide by zero\"</span>)\n\t} <span class=\"hljs-keyword\">else</span> {\n\t\t<span class=\"hljs-keyword\">return</span> numerator / denomiator, numerator % denomiator, <span class=\"hljs-literal\">nil</span> <span class=\"hljs-comment\">// must return all of return values, without parantheses</span>\n\t\t<span class=\"hljs-comment\">// if there is no error, just return nil for error.</span>\n\t}\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> {\n\tresult1, remainder1, err1 := divAndRemainder(<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">2</span>) <span class=\"hljs-comment\">// if we try assigning multiple return values into a single variable, there will be a compile-time error</span>\n\tresult2, _, err2 := divAndRemainder_Named(<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">2</span>)    <span class=\"hljs-comment\">// if we don't need to get remainder as variable, just using _, we can ignore it</span>\n}\n</code></pre>\n<p>함수에서 반환된 값들을 변수에 저장할 때는 <code>range</code>를 쓸 때와 유사하게, 컴마(<code>,</code>)로 구분하여 순서대로 변수을 나열하면 된다.<br>\n언더바(<code>_</code>)를 사용하면 저장할 필요 없는 변수는 생략할 수 있다. 이 역시도 앞서 봤던 패턴이다.</p>\n<p><br><br></p>\n<h3>Named Return Values</h3>\n<p>반환할 값들을 변수로 지정할 수 있는데, 이를 <strong>Named return value</strong>라 한다.\nNamed return value들은 기본적으로 Zero value로 초기화된다.\n또한 Named return value를 사용할 경우 반환할 값이 하나여도 소괄호로 둘러싸줘야 한다.</p>\n<p>단, Named Return Value를 사용하면 두 가지 잠재적 문제점이 생길 수 있다.<br>\n하나는 Named return value을 shadowing할 수도 있다는 문제이다.<br>\n또 하나는 <code>return result, remainder, err</code> 대신에 <code>return 0, 0, errors.New(\"cannot divide by zero\")</code> 이런 식으로\nNamed return value를 사용하지 않고 <code>return</code>하여도 문제가 없다.\n이 때문에 코드가 일관적으로 작성되지 않을 수도 있다는 점이다.</p>\n<pre><code class=\"hljs language-go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">divAndRemainder_Named</span><span class=\"hljs-params\">(numerator <span class=\"hljs-keyword\">int</span>, denomiator <span class=\"hljs-keyword\">int</span>)</span> <span class=\"hljs-params\">(result <span class=\"hljs-keyword\">int</span>, remainder <span class=\"hljs-keyword\">int</span>, err error)</span></span> {\n\t<span class=\"hljs-keyword\">if</span> denomiator == <span class=\"hljs-number\">0</span> {\n\t\terr = errors.New(<span class=\"hljs-string\">\"cannot divide by zero\"</span>)\n\t\t<span class=\"hljs-keyword\">return</span> result, remainder, err\n\t\t<span class=\"hljs-comment\">// return 0, 0, errors.New(\"cannot divide by zero\") // this statement is also legal. it is not essential to use name of return value</span>\n\t} <span class=\"hljs-keyword\">else</span> {\n\t\tresult = numerator / denomiator\n\t\tremainder = numerator % denomiator\n\t\t<span class=\"hljs-keyword\">return</span> result, remainder, err\n\t\t<span class=\"hljs-comment\">// return // blank return can reduce amount of typing, but it is less readable.</span>\n\t}\n}\n</code></pre>\n<p>Named Return Value를 사용하면 <strong>Blank return</strong>이란 것이 가능한데,\n<code>return result, remainder, err</code> 대신 <code>return</code>만 적어도 <code>result, remainder, err</code>가 반환된다.\nNamed return value가 명시된 순서대로 반환하는 것이다.</p>\n<p><br><br></p>\n<h3>Functions Are Value</h3>\n<p>다른 많은 언어에서 그러하듯, Go에서 함수는 값으로 여겨진다. 다시 말해 변수에 집어넣거나 할 수 있다.</p>\n<pre><code class=\"hljs language-go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">add</span><span class=\"hljs-params\">(i <span class=\"hljs-keyword\">int</span>, j <span class=\"hljs-keyword\">int</span>)</span> <span class=\"hljs-title\">int</span></span> { <span class=\"hljs-keyword\">return</span> i + j }\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">sub</span><span class=\"hljs-params\">(i <span class=\"hljs-keyword\">int</span>, j <span class=\"hljs-keyword\">int</span>)</span> <span class=\"hljs-title\">int</span></span> { <span class=\"hljs-keyword\">return</span> i - j }\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">mul</span><span class=\"hljs-params\">(i <span class=\"hljs-keyword\">int</span>, j <span class=\"hljs-keyword\">int</span>)</span> <span class=\"hljs-title\">int</span></span> { <span class=\"hljs-keyword\">return</span> i * j }\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">div</span><span class=\"hljs-params\">(i <span class=\"hljs-keyword\">int</span>, j <span class=\"hljs-keyword\">int</span>)</span> <span class=\"hljs-title\">int</span></span> { <span class=\"hljs-keyword\">return</span> i / j }\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> {\n\t<span class=\"hljs-keyword\">var</span> opMap = <span class=\"hljs-keyword\">map</span>[<span class=\"hljs-keyword\">string</span>]<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">int</span>)</span> <span class=\"hljs-title\">int</span></span>{\n\t\t<span class=\"hljs-string\">\"+\"</span>: add,\n\t\t<span class=\"hljs-string\">\"-\"</span>: sub,\n\t\t<span class=\"hljs-string\">\"*\"</span>: mul,\n\t\t<span class=\"hljs-string\">\"/\"</span>: div,\n\t}\n}\n</code></pre>\n<p>예제는 4개의 함수를 <code>map</code>의 값으로 집어넣은 예제이다. 이 때 map의 value 타입은 <code>func(int, int), int</code>가 된다.</p>\n<p>아래 예제처럼 <code>type</code> 키워드를 사용하여 타입을 간략화할 수도 있다.</p>\n<pre><code class=\"hljs language-go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">add</span><span class=\"hljs-params\">(i <span class=\"hljs-keyword\">int</span>, j <span class=\"hljs-keyword\">int</span>)</span> <span class=\"hljs-title\">int</span></span> { <span class=\"hljs-keyword\">return</span> i + j }\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">sub</span><span class=\"hljs-params\">(i <span class=\"hljs-keyword\">int</span>, j <span class=\"hljs-keyword\">int</span>)</span> <span class=\"hljs-title\">int</span></span> { <span class=\"hljs-keyword\">return</span> i - j }\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">mul</span><span class=\"hljs-params\">(i <span class=\"hljs-keyword\">int</span>, j <span class=\"hljs-keyword\">int</span>)</span> <span class=\"hljs-title\">int</span></span> { <span class=\"hljs-keyword\">return</span> i * j }\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">div</span><span class=\"hljs-params\">(i <span class=\"hljs-keyword\">int</span>, j <span class=\"hljs-keyword\">int</span>)</span> <span class=\"hljs-title\">int</span></span> { <span class=\"hljs-keyword\">return</span> i / j }\n\n<span class=\"hljs-keyword\">type</span> opFuncType <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">int</span>)</span> <span class=\"hljs-title\">int</span></span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> {\n\t<span class=\"hljs-keyword\">var</span> opMap = <span class=\"hljs-keyword\">map</span>[<span class=\"hljs-keyword\">string</span>]opFuncType{\n\t\t<span class=\"hljs-string\">\"+\"</span>: add,\n\t\t<span class=\"hljs-string\">\"-\"</span>: sub,\n\t\t<span class=\"hljs-string\">\"*\"</span>: mul,\n\t\t<span class=\"hljs-string\">\"/\"</span>: div,\n\t}\n}\n</code></pre>\n<p><br><br></p>\n<h3>Anonymous Function</h3>\n<p>함수를 선언할 때 함수명만 지우면 익명함수가 된다. 익명함수를 즉시 호출하려면 익명함수 뒤에 소괄호를 붙여 파라미터만 보내주면 된다.</p>\n<pre><code class=\"hljs language-go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> {\n\tpow := <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(num <span class=\"hljs-keyword\">int</span>)</span> <span class=\"hljs-title\">int</span></span> { <span class=\"hljs-comment\">// using keyword `func`, we can declare an anonyymous function</span>\n\t\t<span class=\"hljs-comment\">// if we put a function name on anonymous function, it will occur a compile-time error</span>\n\t\t<span class=\"hljs-keyword\">return</span> num * num\n\t}\n\n\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &#x3C; <span class=\"hljs-number\">5</span>; i++ {\n\t\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(j <span class=\"hljs-keyword\">int</span>)</span></span> {\n\t\t\tfmt.Println(<span class=\"hljs-string\">\"Printing\"</span>, pow(j), <span class=\"hljs-string\">\"from inside of an anonymous function\"</span>)\n\t\t}(i) <span class=\"hljs-comment\">// anonymous function are declared and called immediately</span>\n\t}\n}\n</code></pre>\n<p><br><br></p>\n<h2>Closure</h2>\n<hr>\n<p><strong>Closure</strong>란 특정한 함수 안에서 선언된 함수를 의미한다. 대체로 파라미터로 넘겨지거나, <code>return</code>을 통해 반환된다.</p>\n<br>\n<p><code>sort.Slice()</code>함수는 파라미터로 정렬할 데이터와 원소들의 대소를 비교하여 <code>bool</code>값을 반환하는 함수를 인자로 받는다.\n이 함수의 <code>true</code> 및 <code>false</code> 여부에 따라 Slice가 정렬된다.</p>\n<pre><code class=\"hljs language-go\"><span class=\"hljs-keyword\">type</span> Person <span class=\"hljs-keyword\">struct</span> {\n\tFirstName <span class=\"hljs-keyword\">string</span>\n\tLastName  <span class=\"hljs-keyword\">string</span>\n\tAge       <span class=\"hljs-keyword\">int</span>\n}\n\npeople := []Person{\n\t{<span class=\"hljs-string\">\"Kimkim\"</span>, <span class=\"hljs-string\">\"Kim\"</span>, <span class=\"hljs-number\">25</span>},\n\t{<span class=\"hljs-string\">\"Junhyuk\"</span>, <span class=\"hljs-string\">\"Seo\"</span>, <span class=\"hljs-number\">24</span>},\n\t{<span class=\"hljs-string\">\"Leelee\"</span>, <span class=\"hljs-string\">\"Lee\"</span>, <span class=\"hljs-number\">26</span>},\n}\n\n<span class=\"hljs-comment\">// we can pass functions as parameter in Go</span>\nsort.Slice(people, <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(i <span class=\"hljs-keyword\">int</span>, j <span class=\"hljs-keyword\">int</span>)</span> <span class=\"hljs-title\">bool</span></span> { <span class=\"hljs-comment\">// sort.Slice sorts the slice using function that is passed in</span>\n\t<span class=\"hljs-keyword\">return</span> people[i].Age &#x3C; people[j].Age <span class=\"hljs-comment\">// sorting by Age field</span>\n})\nfmt.Println(people)\n\nsort.Slice(people, <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(i <span class=\"hljs-keyword\">int</span>, j <span class=\"hljs-keyword\">int</span>)</span> <span class=\"hljs-title\">bool</span></span> {\n\t<span class=\"hljs-keyword\">return</span> people[i].LastName &#x3C; people[j].LastName\n})\nfmt.Println(people)\n</code></pre>\n<p>ㅇㅇ</p>\n<br>\n<pre><code class=\"hljs language-go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">makeMult</span><span class=\"hljs-params\">(base <span class=\"hljs-keyword\">int</span>)</span> <span class=\"hljs-title\">func</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span>)</span> <span class=\"hljs-title\">int</span></span> {\n\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(factor <span class=\"hljs-keyword\">int</span>)</span> <span class=\"hljs-title\">int</span></span> {\n\t\t<span class=\"hljs-keyword\">return</span> base * factor\n\t}\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> {\n\ttwoBase := makeMult(<span class=\"hljs-number\">2</span>)\n\tthreeBase := makeMult(<span class=\"hljs-number\">3</span>)\n\n\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &#x3C; <span class=\"hljs-number\">3</span>; i++ {\n\t\tfmt.Println(twoBase(i), threeBase(i))\n\t}\n}\n</code></pre>\n<p>위 예제는 함수의 반환형이 Closure인 예제이다. 익명 함수로 반환되었다.</p>\n<p><br><br></p>\n<h2>defer</h2>\n<hr>\n<p>Go에는 <strong>defer</strong>라는 키워드가 존재한다. 다른 언어에는 없는데 Go에만 있는 것 같다.<br>\n일반적으로 파일이나 네트워크 연결 등, 임시적으로 쓰이는 자원들을 다시 반납하기 위해 사용되는 것 같다.</p>\n<pre><code class=\"hljs language-go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">getFile</span><span class=\"hljs-params\">(name <span class=\"hljs-keyword\">string</span>)</span> <span class=\"hljs-params\">(*os.File, <span class=\"hljs-keyword\">func</span>()</span>, <span class=\"hljs-title\">error</span>)</span> {\n\tfile, err := os.Open(name)\n\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> {\n\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span>, <span class=\"hljs-literal\">nil</span>, err\n\t} <span class=\"hljs-keyword\">else</span> { <span class=\"hljs-comment\">// it returns resource and a closure that cleans up the resource</span>\n\t\t<span class=\"hljs-keyword\">return</span> file, <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">()</span></span> { file.Close() }, <span class=\"hljs-literal\">nil</span>\n\t}\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> {\n\t_, closer, err := getFile(os.Args[<span class=\"hljs-number\">1</span>])\n\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> {\n\t\tlog.Fatal(err)\n\t}\n\t<span class=\"hljs-keyword\">defer</span> closer() <span class=\"hljs-comment\">// releases the resource by using defer and closer function</span>\n}\n</code></pre>\n<br>\n<p><code>defer</code> 키워드가 쓰인 <em>Closure</em>는 값을 <code>return</code>한 후 해당 함수가 끝나기 직전 실행된다.</p>\n<pre><code class=\"hljs language-go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> {\n\tj := <span class=\"hljs-number\">2</span>\n\n\t<span class=\"hljs-keyword\">defer</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(i <span class=\"hljs-keyword\">int</span>)</span></span> {\n\t\tfmt.Println(i)\n\t}(j)\n\n\tj++\n\tfmt.Println(j)\n}\n</code></pre>\n<p>위 코드의 실행 결과는 다음과 같다.</p>\n<pre><code class=\"hljs language-go\"><span class=\"hljs-number\">3</span>\n<span class=\"hljs-number\">2</span>\n</code></pre>\n<p>먼저 <code>defer</code>에 의해 <code>2</code>를 출력하도록 예약된다. 이후 <code>j</code>가 <code>3</code>이 되어 출력이 되고, <code>main</code>함수가 끝나기 직전에 2가 출력되는 것이다.<br>\n<code>j</code>값이 <code>3</code>으로 변했다고 <code>defer</code>에 의해 실행되는 <em>Closure</em>의 출력 결과가 3으로 바뀌지 않는다.</p>\n<br>\n<pre><code class=\"hljs language-go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">DoSomeInserts</span><span class=\"hljs-params\">(ctx context.Context, db *sql.DB, value1, value2 <span class=\"hljs-keyword\">string</span>)</span></span>\n                  (err error) {\n    tx, err := db.BeginTx(ctx, <span class=\"hljs-literal\">nil</span>)\n    <span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> {\n        <span class=\"hljs-keyword\">return</span> err\n    }\n    <span class=\"hljs-keyword\">defer</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">()</span></span> {\n        <span class=\"hljs-keyword\">if</span> err == <span class=\"hljs-literal\">nil</span> {\n            err = tx.Commit()\n        }\n        <span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> {\n            tx.Rollback()\n        }\n    }()\n    _, err = tx.ExecContext(ctx, <span class=\"hljs-string\">\"INSERT INTO FOO (val) values $1\"</span>, value1)\n    <span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> {\n        <span class=\"hljs-keyword\">return</span> err\n    }\n    <span class=\"hljs-comment\">// use tx to do more database inserts here</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span>\n}\n</code></pre>\n<p>위 예제는 <code>defer</code>가 DB write에 사용된 예제이다. db write 과정에서 에러가 발생하지 않았다면 <em>commit</em>, 에러가 발생하였다면 <em>rollback</em>한다.</p>\n<p><br><br></p>\n<h2>참고 자료</h2>\n<hr>\n<center>\n<p><a href=\"https://learning.oreilly.com/library/view/learning-go/9781492077206/\"><img src=\"https://learning.oreilly.com/covers/urn:orm:book:9781492077206/400w/\" alt=\"\"></a> <br>\n<a href=\"https://learning.oreilly.com/library/view/learning-go/9781492077206/\">Jon Bodner, 『Learning Go』, O'Reilly Media, Inc.</a></p>\n</center>\n```","category":"Golang"}