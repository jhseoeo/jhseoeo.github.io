{"metadata":{"title":"개발환경설정","date":"Jul 19, 2022","excerpt":"Setting up Golang development environment"},"content":"<br>\n<p>본 글은 Golang을 공부하며 주요 내용이라 생각되는 것들을 기록해둔 자료이며, Ubuntu 20.04 LTS 기준으로 작성되었습니다.</p>\n<p><br><br></p>\n<h2>Installation</h2>\n<hr>\n<p>터미널에서 <code>sudo apt-get install golang-go</code>를 통해 Go를 설치할 수는 있지만, 패키지 매니저를 통해 설치된 Go는 최신 버전이 아니다.</p>\n<p>최신 버전의 Go를 설치하기 위해서는 <a href=\"https://go.dev/dl/\">Go 웹페이지</a>에서 설치 파일을 다운받아 설치한다.</p>\n<pre><code class=\"hljs language-bash\">tar -C /usr/<span class=\"hljs-built_in\">local</span> -xzf go1.18.4.linux-amd64.tar.gz\n</code></pre>\n<p>위의 버전은 다운로드한 설치 파일의 버전에 맞게 잘 바꿔주도록 하자.</p>\n<br>\n<p><code>bash</code>를 사용한다면 <em>.profile</em>에, <code>zsh</code>라면 <em>.zshrc</em>에 아래 내용을 추가해준다.</p>\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-built_in\">export</span> GOPATH=<span class=\"hljs-variable\">$HOME</span>/go\n<span class=\"hljs-built_in\">export</span> PATH=<span class=\"hljs-variable\">$PATH</span>:<span class=\"hljs-variable\">$GOPATH</span>/bin\n</code></pre>\n<p>추가하였다면, <code>source ~/.profile</code> 또는 <code>source ~/.zshrc</code>를 입력하여 변경된 설정을 적용한다.</p>\n<br>\n<p>이제 잘 설치되었는지 Go 명령어를 실행해보자.</p>\n<pre><code class=\"hljs language-bash\">go version\n</code></pre>\n<p>잘 설치되었다면, 아래와 같은 결과를 확인할 수 있을 것이다</p>\n<pre><code class=\"hljs language-bash\">go version go1.18.4 linux/amd64\n</code></pre>\n<p><br><br></p>\n<h2>Hello world</h2>\n<hr>\n<p>파일명이 <code>hello.go</code>인 파일을 생성하여, 아래와 같이 입력한다</p>\n<pre><code class=\"hljs language-go\"><span class=\"hljs-keyword\">package</span> main\n\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">\"fmt\"</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> {\n    fmt.Println(<span class=\"hljs-string\">\"Hello world!\"</span>)\n}\n</code></pre>\n<br>\n<p>이후 아래 명령어를 통해 방금 생성한 <em>hello.go</em> 파일을 실행해보자.</p>\n<pre><code class=\"hljs language-bash\">go run hello.go\n</code></pre>\n<br>\n<p>Go에서는 파일을 빌드할 수도 있다. 아래 명령어를 통해 <em>hello.go</em> 파일을 빌드해보자.</p>\n<pre><code class=\"hljs language-bash\">go build hello.go\n</code></pre>\n<p>아마 윈도우라면 <em>hello.exe</em>가, 리눅스라면 <em>hello</em> 파일이 생성되었을 것이다. (<code>source hello</code>를 입력하여 실행할 수 있다.)\n<code>-o</code> 플래그를 통해 빌드로 생성될 실행 파일의 이름 및 경로를 아래와 같이 설정해줄 수 있다.</p>\n<pre><code class=\"hljs language-bash\">go build -o hello_world hello.go\n</code></pre>\n<p><br><br></p>\n<h2>Installing third-party libraries</h2>\n<hr>\n<p><code>go install</code> 명령어를 통해 써드 파티 라이브러리를 설치해보자.</p>\n<pre><code class=\"hljs language-bash\">go install github.com/rakyll/hey@latest\n</code></pre>\n<p><code>go install</code> 명령어는 저장소의 주소를 인자로 받으며, @ 뒤에 다운로드할 버전을 명시할 수 있다. <code>latest</code>는 최신 버전이라는 뜻.</p>\n<br>\n<p>설치한 <code>hey</code> 라이브러리를 사용해보자</p>\n<pre><code class=\"hljs language-bash\">hey https://junhyuk0801.github.io\n</code></pre>\n<p>실행 결과를 보면 알 수 있다시피, 대충 <code>curl</code> 비슷한 http 서버 테스트하는 용도의 라이브러리이다.</p>\n<p><br><br></p>\n<h2>Formatting codes</h2>\n<hr>\n<p>Go에는 표준 포맷(Standard format)이 존재한다. <code>go fmt</code> 명령어로 표준 포맷에 맞게 코드를 포맷할 수 있다. 아래 명령어를 입력하면 현재 디렉토리 내의 모든 <em>.go</em> 파일들을 포매팅할 수 있다.</p>\n<pre><code class=\"hljs language-bash\">go fmt ./..\n</code></pre>\n<br>\n<p>보다 향상된 기능의 <code>goimport</code> 모듈이 존재하는데, 아마 불필요하게 import된 라이브러리들을 관리해주는 등의 기능을 추가로 제공해주는 것으로 보인다.</p>\n<p><code>go install golang.org/x/tools/cmd/goimports@latest</code>로 설치한 후, 아래 명령어를 통해 실행한다.</p>\n<pre><code class=\"hljs language-bash\">goimports -l -w .\n</code></pre>\n<p><code>-l</code> 플래그는 포맷된 내용을 콘솔에 출력하도록 하며, <code>-w</code> 플래그는 수정된 내용이 그 파일에 그대로 적용되도록 (추가로 파일이 생성되지 않도록) 한다.</p>\n<p><br><br></p>\n<h2>Linting and Vetting</h2>\n<hr>\n<p><code>golint</code>는 현재 deprecated된 도구이지만, 문법적인 오류를 잡아주는 역할을 한다.</p>\n<pre><code class=\"hljs language-bash\">go install golang.org/x/lint/golint@latest\n</code></pre>\n<p>위 명령어로 설치 후, 아래 명령어로 실행한다.</p>\n<pre><code class=\"hljs language-bash\">golint ./..\n</code></pre>\n<br>\n<p><code>go vet</code> 명령어는 사용되지 않은 변수나, 함수 인자의 잘못된 전달 등의 오류를 잡아준다.</p>\n<pre><code class=\"hljs language-bash\">go vet ./..\n</code></pre>\n<br>\n<p>위 두 가지 명령어를 동시에 실행하여 주는 써드 파티 도구가 존재한다. <a href=\"https://golangci-lint.run/usage/install/\">golingci-lint</a>라는 것인데, 필요하다면 설치해서 써보도록 하자.</p>\n<p><br><br></p>\n<h2>VSCode</h2>\n<hr>\n<p>본인은 개발환경을 VSCode로 잡았는데, 당연히 Go 확장을 설치해주었다.</p>\n<p><img src=\"https://raw.githubusercontent.com/junhyuk0801/junhyuk0801.github.io/post-pictures/pictures/%EB%A6%AC%ED%84%B4%2022-S%20%EC%8A%A4%ED%84%B0%EB%94%94/Golang/%EA%B0%9C%EB%B0%9C%ED%99%98%EA%B2%BD%EC%84%A4%EC%A0%95/%EC%BA%A1%EC%B2%98.PNG\" alt=\"PIC\"></p>\n<br>\n<p>이외에도, <em>setting.json</em>을 열어 아래 설정들을 추가해주었다.</p>\n<pre><code class=\"hljs language-json\"><span class=\"hljs-string\">\"go.lintOnSave\"</span>: <span class=\"hljs-string\">\"file\"</span>,\n<span class=\"hljs-string\">\"go.vetOnSave\"</span>: <span class=\"hljs-string\">\"package\"</span>,\n<span class=\"hljs-string\">\"[go]\"</span>: {\n    <span class=\"hljs-attr\">\"editor.insertSpaces\"</span>: <span class=\"hljs-literal\">true</span>,\n    <span class=\"hljs-attr\">\"editor.formatOnSave\"</span>: <span class=\"hljs-literal\">true</span>,\n    <span class=\"hljs-attr\">\"editor.defaultFormatter\"</span>: <span class=\"hljs-string\">\"golang.go\"</span>\n}\n</code></pre>\n<p>이와 같이 설정하면, <code>Ctrl + S</code>를 눌러 저장할 때마다 자동으로 <code>fmt</code>, <code>lint</code>, <code>vet</code>을 실행해주기 때문에 엄청 편리하다.</p>\n<p><br><br></p>\n<h2>참고 자료</h2>\n<hr>\n<center>\n<p><a href=\"https://learning.oreilly.com/library/view/learning-go/9781492077206/\"><img src=\"https://learning.oreilly.com/covers/urn:orm:book:9781492077206/400w/\" alt=\"\"></a> <br>\n<a href=\"https://learning.oreilly.com/library/view/learning-go/9781492077206/\">Jon Bodner, 『Learning Go』, O'Reilly Media, Inc.</a></p>\n</center>","category":"Golang"}