{"type":"data","nodes":[{"type":"data","data":[null],"uses":{}},{"type":"data","data":[{"PostContent":1,"meta":2},"\u003Cbr>\n\u003Cp>본 글은 Golang을 공부하며 주요 내용이라 생각되는 것들을 기록해둔 자료이며, Ubuntu 20.04 LTS 기준으로 작성되었습니다.\u003C/p>\n\u003Cbr>\u003Cbr>\n\u003Ch2 id=\"array\">\u003Ca aria-hidden=\"true\" tabindex=\"-1\" href=\"#array\">\u003Cspan class=\"icon icon-link\">\u003C/span>\u003C/a>Array\u003C/h2>\n\u003Chr>\n\u003Cp>\u003Cstrong>Array\u003C/strong>는 같은 타입의, 크기(개수)가 정해진 데이터들을 묶어서 처리하기 위해 사용된다.\u003C/p>\n\u003Cpre class=\"language-go\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-go\">\u003Cspan class=\"token keyword\">var\u003C/span> arr \u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token number\">3\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token builtin\">int\u003C/span> \u003Cspan class=\"token comment\">// array declaration\u003C/span>\nfmt\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">Println\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>arr\u003Cspan class=\"token punctuation\">)\u003C/span>\n\u003Cspan class=\"token comment\">// var size int = 5\t // can not specify size of array with variables.\u003C/span>\n\u003Cspan class=\"token comment\">// var arr [size]int // it occurs an error.\u003C/span>\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre>\n\u003Cp>위 코드에서 \u003Ccode>[3]int\u003C/code>은 크기가 \u003Cem>3\u003C/em>인 \u003Ccode>int\u003C/code>의 Array임을 나타낸다. Array의 값을 초기화하지 않았으므로, \u003Ccode>int\u003C/code>의 Zero value인 0으로 채워진다.\n그리고 Array는 크기가 정해진 데이터에 대해서만 지원한다. 주석 처리된 부분처럼 배열의 크기를 변수값으로 초기화하는 것은 불가능하다.\u003C/p>\n\u003Cbr>\n\u003Cp>C/C++에서 그렇듯, 중괄호를 이용하여 배열 내의 값을 초기화할 수 있다.\u003C/p>\n\u003Cpre class=\"language-go\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-go\">\u003Cspan class=\"token comment\">// declare with literal\u003C/span>\n\u003Cspan class=\"token keyword\">var\u003C/span> x \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token number\">3\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token builtin\">int\u003C/span>\u003Cspan class=\"token punctuation\">&#123;\u003C/span>\u003Cspan class=\"token number\">1\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token number\">2\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token number\">3\u003C/span>\u003Cspan class=\"token punctuation\">&#125;\u003C/span>                  \u003Cspan class=\"token comment\">// [1, 2, 3]\u003C/span>\n\u003Cspan class=\"token keyword\">var\u003C/span> y \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token number\">12\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token builtin\">int\u003C/span>\u003Cspan class=\"token punctuation\">&#123;\u003C/span>\u003Cspan class=\"token number\">1\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token number\">5\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span> \u003Cspan class=\"token number\">4\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token number\">6\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token number\">10\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span> \u003Cspan class=\"token number\">100\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token number\">15\u003C/span>\u003Cspan class=\"token punctuation\">&#125;\u003C/span> \u003Cspan class=\"token comment\">// [1, 0, 0, 0, 0, 4, 6, 0, 0, 0, 100, 15]\u003C/span>\n\u003Cspan class=\"token keyword\">var\u003C/span> z \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token operator\">...\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token builtin\">int\u003C/span>\u003Cspan class=\"token punctuation\">&#123;\u003C/span>\u003Cspan class=\"token number\">4\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token number\">5\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token number\">6\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token number\">7\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token number\">8\u003C/span>\u003Cspan class=\"token punctuation\">&#125;\u003C/span>          \u003Cspan class=\"token comment\">// [4, 5, 6, 7, 8]\u003C/span>\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre>\n\u003Cp>위 코드의 변수 \u003Ccode>y\u003C/code>를 초기화하는 라인에서 \u003Ccode>n:m\u003C/code> 형태의 표기법을 확인할 수 있다. \u003Ccode>n\u003C/code>번째 인덱스의 값을 \u003Ccode>m\u003C/code>으로 초기화한다는 의미이다.\n지정되지 않은 다른 값들은 Zero value인 \u003Cem>0\u003C/em>으로 초기화된다.\u003Cbr>\n변수 \u003Ccode>z\u003C/code>를 초기화하는 라인처럼 배열의 크기에 \u003Ccode>...\u003C/code>가 입력되면 자동으로 배열의 크기를 결정한다. 위 코드에서 \u003Ccode>z\u003C/code>의 크기는 \u003Cem>5\u003C/em>가 될 것이다.\u003C/p>\n\u003Cbr>\n\u003Cp>여느 언어가 그렇듯, 대괄호를 통해 indexing한다. 인덱스에 음수나 배열 크기보다 큰 수 넣으면 런타임 에러가 발생한다.\n또한 \u003Ccode>len()\u003C/code> 함수를 사용하여 Array의 크기를 확인할 수 있다.\u003C/p>\n\u003Cpre class=\"language-go\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-go\">x\u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token number\">2\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span> \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token number\">10\u003C/span>\nfmt\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">Println\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>x\u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token number\">2\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token comment\">// indexing by bracket\u003C/span>\nfmt\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">Println\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token function\">len\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>x\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre>\n\u003Cbr>\n\u003Cp>다차원 배열은 좀 난해하하다고 느꼈는데, 어떻게 사용하는지는 코드를 바로 보는 편이 이해가 빠를 것이다.\u003C/p>\n\u003Cpre class=\"language-go\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-go\">\u003Cspan class=\"token keyword\">var\u003C/span> multidimentional \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token number\">2\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token number\">3\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token builtin\">int\u003C/span>\u003Cspan class=\"token punctuation\">&#123;\u003C/span>\u003Cspan class=\"token punctuation\">&#123;\u003C/span>\u003Cspan class=\"token number\">1\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token number\">2\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token number\">3\u003C/span>\u003Cspan class=\"token punctuation\">&#125;\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token punctuation\">&#123;\u003C/span>\u003Cspan class=\"token number\">1\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token number\">2\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token number\">3\u003C/span>\u003Cspan class=\"token punctuation\">&#125;\u003C/span>\u003Cspan class=\"token punctuation\">&#125;\u003C/span> \u003Cspan class=\"token comment\">// multidimetional array\u003C/span>\nfmt\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">Println\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>multidimentional\u003Cspan class=\"token punctuation\">)\u003C/span>\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre>\n\u003Cbr>\n\u003Cp>이건 좀 신기했던 부분인데, Go에서 Array는 크기와 element의 타입이 같다면 동일한 타입으로 여긴다. 그래서 \u003Ccode>==\u003C/code>와 \u003Ccode>!=\u003C/code>의 두 가지의 비교 연산이 가능하다!\n다만 element의 타입이 같아도 Array의 크기가 다르다면 서로 다른 타입으로 여기기 때문에, 비교 연산을 하면 에러가 발생한다.\u003C/p>\n\u003Cpre class=\"language-go\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-go\">\u003Cspan class=\"token keyword\">var\u003C/span> a \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token operator\">...\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token builtin\">int\u003C/span>\u003Cspan class=\"token punctuation\">&#123;\u003C/span>\u003Cspan class=\"token number\">1\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token number\">2\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token number\">3\u003C/span>\u003Cspan class=\"token punctuation\">&#125;\u003C/span>\n\u003Cspan class=\"token keyword\">var\u003C/span> b \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token number\">3\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token builtin\">int\u003C/span>\u003Cspan class=\"token punctuation\">&#123;\u003C/span>\u003Cspan class=\"token number\">1\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token number\">2\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token number\">3\u003C/span>\u003Cspan class=\"token punctuation\">&#125;\u003C/span>\n\u003Cspan class=\"token keyword\">var\u003C/span> c \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token number\">2\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token builtin\">int\u003C/span>\u003Cspan class=\"token punctuation\">&#123;\u003C/span>\u003Cspan class=\"token number\">1\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token number\">2\u003C/span>\u003Cspan class=\"token punctuation\">&#125;\u003C/span>\nfmt\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">Println\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>a \u003Cspan class=\"token operator\">==\u003C/span> b\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token comment\">// prints true\u003C/span>\n\u003Cspan class=\"token comment\">// fmt.Println(a == c) // occurs error\u003C/span>\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre>\n\u003Cbr>\u003Cbr>\n\u003Ch2 id=\"slice\">\u003Ca aria-hidden=\"true\" tabindex=\"-1\" href=\"#slice\">\u003Cspan class=\"icon icon-link\">\u003C/span>\u003C/a>Slice\u003C/h2>\n\u003Chr>\n\u003Cp>\u003Cstrong>Slice\u003C/strong>는 동적으로 크기가 늘어났다 줄어들었다 하는 Array라고 볼 수 있다. 다른 언어에도 이와 유사한 타입들이 많이 존재하지만, Go의 Slice는 좀 유니크하다.\u003Cbr>\n먼저 Array와는 달리 대괄호 사이를 비워놓고 선언한다. Array와 유사한 부분들을 모아보았다.\u003C/p>\n\u003Cpre class=\"language-go\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-go\">\u003Cspan class=\"token keyword\">var\u003C/span> x \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token builtin\">int\u003C/span>\u003Cspan class=\"token punctuation\">&#123;\u003C/span>\u003Cspan class=\"token number\">1\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token number\">2\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token number\">3\u003C/span>\u003Cspan class=\"token punctuation\">&#125;\u003C/span> \u003Cspan class=\"token comment\">// declaration + initialization\u003C/span>\n\u003Cspan class=\"token keyword\">var\u003C/span> y \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token builtin\">int\u003C/span>\u003Cspan class=\"token punctuation\">&#123;\u003C/span>\u003Cspan class=\"token number\">1\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token number\">5\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span> \u003Cspan class=\"token number\">4\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token number\">6\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token number\">10\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span> \u003Cspan class=\"token number\">100\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token number\">15\u003C/span>\u003Cspan class=\"token punctuation\">&#125;\u003C/span> \u003Cspan class=\"token comment\">// [1, 0, 0, 0, 0, 4, 6, 0, 0, 0, 100, 15]\u003C/span>\nfmt\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">Println\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>x\u003Cspan class=\"token punctuation\">,\u003C/span> y\u003Cspan class=\"token punctuation\">)\u003C/span>\n\nx\u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token number\">2\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span> \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token number\">10\u003C/span>\nfmt\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">Println\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>x\u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token number\">2\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token comment\">// indexing by bracket\u003C/span>\n\n\u003Cspan class=\"token keyword\">var\u003C/span> multidimentional \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token builtin\">int\u003C/span>\u003Cspan class=\"token punctuation\">&#123;\u003C/span>\u003Cspan class=\"token punctuation\">&#123;\u003C/span>\u003Cspan class=\"token number\">1\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token number\">2\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token number\">3\u003C/span>\u003Cspan class=\"token punctuation\">&#125;\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token punctuation\">&#123;\u003C/span>\u003Cspan class=\"token number\">1\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token number\">2\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token number\">3\u003C/span>\u003Cspan class=\"token punctuation\">&#125;\u003C/span>\u003Cspan class=\"token punctuation\">&#125;\u003C/span> \u003Cspan class=\"token comment\">// multidimetional slice\u003C/span>\nfmt\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">Println\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>multidimentional\u003Cspan class=\"token punctuation\">)\u003C/span>\n\nfmt\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">Println\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token function\">len\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>x\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token comment\">// the number of current elements\u003C/span>\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre>\n\u003Cbr>\n\u003Cp>이제 다른 부분들을 하나씩 알아보자.\u003C/p>\n\u003Cp>선언만 하고 초기화하지 않으면 해당 타입의 Zero value로 초기화하는 Array와는 달리, Slice는 비어 있는 객체라는 뜻인 Slice는 \u003Ccode>nil\u003C/code>이 된다.\n이때 \u003Ccode>nil\u003C/code>과 Length가 0인 Slice는 엄연히 서로 다르다.\n\u003Ccode>nil\u003C/code>은 C/C++의 \u003Ccode>NULL\u003C/code>과 자바스크립트의 \u003Ccode>null\u003C/code> 사이 어딘가의 느낌인데, 추후 설명하겠다.\u003C/p>\n\u003Cpre class=\"language-go\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-go\">\u003Cspan class=\"token keyword\">var\u003C/span> slice1 \u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token builtin\">int\u003C/span>            \u003Cspan class=\"token comment\">// slice declaration\u003C/span>\n\u003Cspan class=\"token keyword\">var\u003C/span> slice2 \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token builtin\">int\u003C/span>\u003Cspan class=\"token punctuation\">&#123;\u003C/span>\u003Cspan class=\"token punctuation\">&#125;\u003C/span>        \u003Cspan class=\"token comment\">// zero-length slice\u003C/span>\nfmt\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">Println\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>slice1\u003Cspan class=\"token punctuation\">,\u003C/span> slice2\u003Cspan class=\"token punctuation\">)\u003C/span>\nfmt\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">Println\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>slice1 \u003Cspan class=\"token operator\">==\u003C/span> \u003Cspan class=\"token boolean\">nil\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> slice2 \u003Cspan class=\"token operator\">==\u003C/span> \u003Cspan class=\"token boolean\">nil\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\n\u003Cspan class=\"token comment\">// comparation between two slices occurs error; only possible comparation is the one between slice and nil\u003C/span>\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre>\n\u003Cp>타입과 크기가 같다면 비교 연산을 할 수 있었던 Array와는 달리, slice끼리는 타입이 같아도 서로 비교 연산을 할 수 없다.\nslice와 nil과의 비교 연산만 허용된다.\u003C/p>\n\u003Cbr>\n\u003Cp>\u003Ccode>make()\u003C/code> 함수를 이용하여 slice를 생성할 수도 있다. 타입, Length, Capacity를 인자로 설정한다.\u003C/p>\n\u003Cpre class=\"language-go\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-go\">initialized_capacity \u003Cspan class=\"token operator\">:=\u003C/span> \u003Cspan class=\"token function\">make\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token builtin\">int\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token number\">0\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token number\">5\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token comment\">// make(type, length, capacity)\u003C/span>\n\u003Cspan class=\"token comment\">// initialized_capacity := make([]int, 6, 5) // it occurs an error (length > capacity)\u003C/span>\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre>\n\u003Cbr>\u003Cbr>\n\u003Ch3 id=\"appending-elements-into-slices\">\u003Ca aria-hidden=\"true\" tabindex=\"-1\" href=\"#appending-elements-into-slices\">\u003Cspan class=\"icon icon-link\">\u003C/span>\u003C/a>Appending Elements into Slices\u003C/h3>\n\u003Cbr>\n\u003Cp>Slice에 값을 추가하기 위해서는 \u003Ccode>append()\u003C/code> 함수를 사용한다. 값을 추가할 Slice와, 한 개 이상의 추가할 값들을 파라미터로 받는다.\u003Cbr>\n\u003Ccode>...\u003C/code> 연산자를 활용하여, 다른 Slice 변수의 값들을 추가할수도 있다.\u003C/p>\n\u003Cp>특이사항은 \u003Ccode>append()\u003C/code>함수에 값을 추가할 Slice 변수를 넣고, 반환값을 다시 그 변수로 받아야 한다는 것이다.\u003C/p>\n\u003Cpre class=\"language-go\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-go\">\u003Cspan class=\"token comment\">// capacity grows as it gets appended\u003C/span>\nslice \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token function\">append\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>slice\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token number\">10\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\nfmt\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">Println\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>slice\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token function\">len\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>slice\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token function\">cap\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>slice\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\nslice \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token function\">append\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>slice\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token number\">20\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token number\">30\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token number\">40\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token number\">50\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\nfmt\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">Println\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>slice\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token function\">len\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>slice\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token function\">cap\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>slice\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\n\ntmp \u003Cspan class=\"token operator\">:=\u003C/span> \u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token builtin\">int\u003C/span>\u003Cspan class=\"token punctuation\">&#123;\u003C/span>\u003Cspan class=\"token number\">20\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token number\">30\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token number\">40\u003C/span>\u003Cspan class=\"token punctuation\">&#125;\u003C/span>\nslice \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token function\">append\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>slice\u003Cspan class=\"token punctuation\">,\u003C/span> tmp\u003Cspan class=\"token operator\">...\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\nfmt\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">Println\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>slice\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token function\">len\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>slice\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token function\">cap\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>slice\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\n\u003Cspan class=\"token comment\">// append(slice, x...) => it occurs an error (append() returns an slice that the element is appended to.)\u003C/span>\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre>\n\u003Cp>이때 위 코드에서 \u003Ccode>cap()\u003C/code>라는 함수가 사용되는 것을 확인할 수 있다.\nSlice에는 요소들의 개수를 나타내는 \u003Cem>Length\u003C/em>뿐 아니라, \u003Cstrong>Capacity\u003C/strong>라는 속성이 존재한다. 이는 요소들이 추가될 수 있는 전체 공간의 크기를 의미한다.\n\u003Ccode>append()\u003C/code>로 변수 \u003Ccode>slice\u003C/code>에 요소들을 추가할 때마다 Length가 증가하고, Length가 Capacity를 초과하려고 할 때마다 Capacity도 증가함을 확인할 수 있다.\u003C/p>\n\u003Cbr>\u003Cbr>\n\u003Ch3 id=\"slicing-slices\">\u003Ca aria-hidden=\"true\" tabindex=\"-1\" href=\"#slicing-slices\">\u003Cspan class=\"icon icon-link\">\u003C/span>\u003C/a>Slicing Slices\u003C/h3>\n\u003Cbr>\n\u003Cp>Python의 \u003Ccode>List\u003C/code>처럼 대괄호에 콜론(\u003Ccode>:\u003C/code>)과 인덱스를 붙여 Slicing할 수 있다.\u003C/p>\n\u003Cpre class=\"language-go\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-go\">x \u003Cspan class=\"token operator\">:=\u003C/span> \u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token builtin\">int\u003C/span>\u003Cspan class=\"token punctuation\">&#123;\u003C/span>\u003Cspan class=\"token number\">1\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token number\">2\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token number\">3\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token number\">4\u003C/span>\u003Cspan class=\"token punctuation\">&#125;\u003C/span>\ny \u003Cspan class=\"token operator\">:=\u003C/span> x\u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span>\u003Cspan class=\"token number\">2\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span>\nz \u003Cspan class=\"token operator\">:=\u003C/span> x\u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token number\">1\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span>\nd \u003Cspan class=\"token operator\">:=\u003C/span> x\u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token number\">1\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span>\u003Cspan class=\"token number\">3\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span>\ne \u003Cspan class=\"token operator\">:=\u003C/span> x\u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span>\nfmt\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">Println\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>x\u003Cspan class=\"token punctuation\">,\u003C/span> y\u003Cspan class=\"token punctuation\">,\u003C/span> z\u003Cspan class=\"token punctuation\">,\u003C/span> d\u003Cspan class=\"token punctuation\">,\u003C/span> e\u003Cspan class=\"token punctuation\">)\u003C/span>\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre>\n\u003Cp>Python은 이렇게 Slicing 하면, Slicing된 새로운 \u003Ccode>List\u003C/code>가 복사되어, 원본과 같은 공간을 가리키지 않는다. 반면 Go의 Slicing된 \u003Ccode>Slice\u003C/code>는 원본을 가리킨다. \u003Ccode>e\u003C/code>의 값 중 하나를 수정해보면, \u003Ccode>x\u003C/code>, \u003Ccode>z\u003C/code>, \u003Ccode>d\u003C/code>까지 해당 값을 포함했던 모든 \u003Ccode>Slice\u003C/code>의 값들도 변경됨을 확인할 수 있다.\u003C/p>\n\u003Cpre class=\"language-go\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-go\">e\u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token number\">2\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span> \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token number\">1\u003C/span>                   \u003Cspan class=\"token comment\">// Slicing overwraps storage\u003C/span>\nfmt\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">Println\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>x\u003Cspan class=\"token punctuation\">,\u003C/span> y\u003Cspan class=\"token punctuation\">,\u003C/span> z\u003Cspan class=\"token punctuation\">,\u003C/span> d\u003Cspan class=\"token punctuation\">,\u003C/span> e\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token comment\">// value of x, z, d, e is changed\u003C/span>\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre>\n\u003Cbr>\n\u003Cp>사실 여기까진 그냥 그런가보다 할텐데, 원소를 추가하기 시작하면 본격적으로 어지러워진다.\u003C/p>\n\u003Cpre class=\"language-go\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-go\">fmt\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">Println\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token function\">cap\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>x\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token function\">cap\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>y\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token function\">cap\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>z\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token function\">cap\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>d\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token function\">cap\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>e\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\ny \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token function\">append\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>y\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token number\">30\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token comment\">// appending an elements into y changes the mapped value of other slices, but not changes their length\u003C/span>\n\nfmt\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">Println\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>x\u003Cspan class=\"token punctuation\">,\u003C/span> y\u003Cspan class=\"token punctuation\">,\u003C/span> z\u003Cspan class=\"token punctuation\">,\u003C/span> d\u003Cspan class=\"token punctuation\">,\u003C/span> e\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token comment\">// it's too confusing :(\u003C/span>\nfmt\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">Println\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token function\">cap\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>x\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token function\">cap\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>y\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token function\">cap\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>z\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token function\">cap\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>d\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token function\">cap\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>e\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre>\n\u003Cbr>\n\u003Cp>추가 이전, \u003Ccode>x\u003C/code>, \u003Ccode>y\u003C/code>, \u003Ccode>z\u003C/code>, \u003Ccode>d\u003C/code>, \u003Ccode>e\u003C/code>는 아래와 같았는데,\u003C/p>\n\u003Cpre class=\"language-go\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-go\">\u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token number\">1\u003C/span> \u003Cspan class=\"token number\">2\u003C/span> \u003Cspan class=\"token number\">1\u003C/span> \u003Cspan class=\"token number\">4\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span> \u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token number\">1\u003C/span> \u003Cspan class=\"token number\">2\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span> \u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token number\">2\u003C/span> \u003Cspan class=\"token number\">1\u003C/span> \u003Cspan class=\"token number\">4\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span> \u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token number\">2\u003C/span> \u003Cspan class=\"token number\">1\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span> \u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token number\">1\u003C/span> \u003Cspan class=\"token number\">2\u003C/span> \u003Cspan class=\"token number\">1\u003C/span> \u003Cspan class=\"token number\">4\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span>\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre>\n\u003Cp>이렇게 변했다.\u003C/p>\n\u003Cpre class=\"language-go\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-go\">\u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token number\">1\u003C/span> \u003Cspan class=\"token number\">2\u003C/span> \u003Cspan class=\"token number\">30\u003C/span> \u003Cspan class=\"token number\">4\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span> \u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token number\">1\u003C/span> \u003Cspan class=\"token number\">2\u003C/span> \u003Cspan class=\"token number\">30\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span> \u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token number\">2\u003C/span> \u003Cspan class=\"token number\">30\u003C/span> \u003Cspan class=\"token number\">4\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span> \u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token number\">2\u003C/span> \u003Cspan class=\"token number\">30\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span> \u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token number\">1\u003C/span> \u003Cspan class=\"token number\">2\u003C/span> \u003Cspan class=\"token number\">30\u003C/span> \u003Cspan class=\"token number\">4\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span>\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre>\n\u003Cp>\u003Ccode>y\u003C/code>에 \u003Ccode>30\u003C/code>을 추가했으니 \u003Ccode>[1 2 30]\u003C/code>이 된 건 그렇다 치고, \u003Ccode>x\u003C/code>, \u003Ccode>z\u003C/code>, \u003Ccode>d\u003C/code>, \u003Ccode>e\u003C/code>에서 대응되는 위치에 있었던 \u003Ccode>1\u003C/code>도 모두 \u003Ccode>30\u003C/code>으로 바뀌었음을 알 수 있다.\n그리고 여기서 \u003Ccode>y\u003C/code>만 length가 바뀌었으므로, 나타나는 원소의 개수는 \u003Ccode>y\u003C/code>만 2개에서 3개로 늘었다.\u003C/p>\n\u003Cbr>\n\u003Cp>다음의 예제를 보자.\u003C/p>\n\u003Cpre class=\"language-go\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-go\">xx \u003Cspan class=\"token operator\">:=\u003C/span> \u003Cspan class=\"token function\">make\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token builtin\">int\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token number\">0\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token number\">5\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\nxx \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token function\">append\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>xx\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token number\">1\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token number\">2\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token number\">3\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token number\">4\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\nyy \u003Cspan class=\"token operator\">:=\u003C/span> xx\u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span>\u003Cspan class=\"token number\">2\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span>\nzz \u003Cspan class=\"token operator\">:=\u003C/span> xx\u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token number\">2\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span>\n\nfmt\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">Println\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token function\">cap\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>xx\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token function\">cap\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>yy\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token function\">cap\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>zz\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\nyy \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token function\">append\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>yy\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token number\">30\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token number\">40\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token number\">50\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\nxx \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token function\">append\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>xx\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token number\">60\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\nzz \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token function\">append\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>zz\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token number\">70\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\n\nfmt\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">Println\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token string\">\"xx:\"\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> xx\u003Cspan class=\"token punctuation\">)\u003C/span>\nfmt\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">Println\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token string\">\"yy:\"\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> yy\u003Cspan class=\"token punctuation\">)\u003C/span>\nfmt\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">Println\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token string\">\"zz:\"\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> zz\u003Cspan class=\"token punctuation\">)\u003C/span>\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre>\n\u003Cp>해당 구문의 실행 결과는 …\u003C/p>\n\u003Cpre class=\"language-go\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-go\">\u003Cspan class=\"token number\">5\u003C/span> \u003Cspan class=\"token number\">5\u003C/span> \u003Cspan class=\"token number\">3\u003C/span>\nxx\u003Cspan class=\"token punctuation\">:\u003C/span> \u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token number\">1\u003C/span> \u003Cspan class=\"token number\">2\u003C/span> \u003Cspan class=\"token number\">30\u003C/span> \u003Cspan class=\"token number\">40\u003C/span> \u003Cspan class=\"token number\">70\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span>\nyy\u003Cspan class=\"token punctuation\">:\u003C/span> \u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token number\">1\u003C/span> \u003Cspan class=\"token number\">2\u003C/span> \u003Cspan class=\"token number\">30\u003C/span> \u003Cspan class=\"token number\">40\u003C/span> \u003Cspan class=\"token number\">70\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span>\nzz\u003Cspan class=\"token punctuation\">:\u003C/span> \u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token number\">30\u003C/span> \u003Cspan class=\"token number\">40\u003C/span> \u003Cspan class=\"token number\">70\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span>\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre>\n\u003Cbr>\n\u003Ccenter>\u003Cp>\u003Cimg src=\"/post_img/Go/Golang_basics/GO3/1.jpg\" alt=\"pepe question\">\u003C/p>\u003C/center>\n\u003Cbr>\n\u003Cp>상당히 혼란스럽다. 하나씩 알아보자.\u003C/p>\n\u003Cpre class=\"language-go\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-go\">xx \u003Cspan class=\"token operator\">:=\u003C/span> \u003Cspan class=\"token function\">make\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token builtin\">int\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token number\">0\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token number\">5\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\nxx \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token function\">append\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>xx\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token number\">1\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token number\">2\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token number\">3\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token number\">4\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\nyy \u003Cspan class=\"token operator\">:=\u003C/span> xx\u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span>\u003Cspan class=\"token number\">2\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span>\nzz \u003Cspan class=\"token operator\">:=\u003C/span> xx\u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token number\">2\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span>\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre>\n\u003Cp>여기까지 실행했을 때, \u003Ccode>xx\u003C/code>, \u003Ccode>yy\u003C/code>, \u003Ccode>zz\u003C/code>의 값은\u003C/p>\n\u003Cpre class=\"language-go\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-go\">xx\u003Cspan class=\"token punctuation\">:\u003C/span> \u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token number\">1\u003C/span> \u003Cspan class=\"token number\">2\u003C/span> \u003Cspan class=\"token number\">3\u003C/span> \u003Cspan class=\"token number\">4\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span> \u003Cspan class=\"token builtin\">len\u003C/span>\u003Cspan class=\"token operator\">=\u003C/span>\u003Cspan class=\"token number\">4\u003C/span> \u003Cspan class=\"token builtin\">cap\u003C/span>\u003Cspan class=\"token operator\">=\u003C/span>\u003Cspan class=\"token number\">5\u003C/span>\nyy\u003Cspan class=\"token punctuation\">:\u003C/span> \u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token number\">1\u003C/span> \u003Cspan class=\"token number\">2\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span> \u003Cspan class=\"token builtin\">len\u003C/span>\u003Cspan class=\"token operator\">=\u003C/span>\u003Cspan class=\"token number\">2\u003C/span> \u003Cspan class=\"token builtin\">cap\u003C/span>\u003Cspan class=\"token operator\">=\u003C/span>\u003Cspan class=\"token number\">5\u003C/span>\nzz\u003Cspan class=\"token punctuation\">:\u003C/span> \u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token number\">3\u003C/span> \u003Cspan class=\"token number\">4\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span> \u003Cspan class=\"token builtin\">len\u003C/span>\u003Cspan class=\"token operator\">=\u003C/span>\u003Cspan class=\"token number\">2\u003C/span> \u003Cspan class=\"token builtin\">cap\u003C/span>\u003Cspan class=\"token operator\">=\u003C/span>\u003Cspan class=\"token number\">3\u003C/span>\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre>\n\u003Cp>이다. 이제, \u003Ccode>yy\u003C/code>에 \u003Ccode>30\u003C/code>, \u003Ccode>40\u003C/code>, \u003Ccode>50\u003C/code>을 추가해보자.\u003C/p>\n\u003Cpre class=\"language-go\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-go\">xx\u003Cspan class=\"token punctuation\">:\u003C/span> \u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token number\">1\u003C/span> \u003Cspan class=\"token number\">2\u003C/span> \u003Cspan class=\"token number\">30\u003C/span> \u003Cspan class=\"token number\">40\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span> \u003Cspan class=\"token builtin\">len\u003C/span>\u003Cspan class=\"token operator\">=\u003C/span>\u003Cspan class=\"token number\">4\u003C/span> \u003Cspan class=\"token builtin\">cap\u003C/span>\u003Cspan class=\"token operator\">=\u003C/span>\u003Cspan class=\"token number\">5\u003C/span>\nyy\u003Cspan class=\"token punctuation\">:\u003C/span> \u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token number\">1\u003C/span> \u003Cspan class=\"token number\">2\u003C/span> \u003Cspan class=\"token number\">30\u003C/span> \u003Cspan class=\"token number\">40\u003C/span> \u003Cspan class=\"token number\">50\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span> \u003Cspan class=\"token builtin\">len\u003C/span>\u003Cspan class=\"token operator\">=\u003C/span>\u003Cspan class=\"token number\">5\u003C/span> \u003Cspan class=\"token builtin\">cap\u003C/span>\u003Cspan class=\"token operator\">=\u003C/span>\u003Cspan class=\"token number\">5\u003C/span>\nzz\u003Cspan class=\"token punctuation\">:\u003C/span> \u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token number\">30\u003C/span> \u003Cspan class=\"token number\">40\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span> \u003Cspan class=\"token builtin\">len\u003C/span>\u003Cspan class=\"token operator\">=\u003C/span>\u003Cspan class=\"token number\">2\u003C/span> \u003Cspan class=\"token builtin\">cap\u003C/span>\u003Cspan class=\"token operator\">=\u003C/span>\u003Cspan class=\"token number\">3\u003C/span>\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre>\n\u003Cbr>\n\u003Cp>\u003Ccode>xx\u003C/code>와 \u003Ccode>zz\u003C/code>는 \u003Ccode>yy\u003C/code>와 같은 공간을 공유한다. 따라서 대응되는 위치의 값이었던 \u003Ccode>xx\u003C/code>와 \u003Ccode>zz\u003C/code>의 \u003Ccode>3\u003C/code>, \u003Ccode>4\u003C/code>가 각각 \u003Ccode>30\u003C/code>, \u003Ccode>40\u003C/code>으로 바뀌었음을 확인할 수 있다.\n반면 \u003Ccode>xx\u003C/code>와 \u003Ccode>zz\u003C/code>의 Length는 바뀌지 않고, \u003Ccode>yy\u003C/code>의 Length만 5로 바뀌었다.\u003Cbr>\n여기서 \u003Ccode>xx = append(xx, 60)\u003C/code>가 실행되면,\u003C/p>\n\u003Cpre class=\"language-go\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-go\">xx\u003Cspan class=\"token punctuation\">:\u003C/span> \u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token number\">1\u003C/span> \u003Cspan class=\"token number\">2\u003C/span> \u003Cspan class=\"token number\">30\u003C/span> \u003Cspan class=\"token number\">40\u003C/span> \u003Cspan class=\"token number\">60\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span> \u003Cspan class=\"token builtin\">len\u003C/span>\u003Cspan class=\"token operator\">=\u003C/span>\u003Cspan class=\"token number\">5\u003C/span> \u003Cspan class=\"token builtin\">cap\u003C/span>\u003Cspan class=\"token operator\">=\u003C/span>\u003Cspan class=\"token number\">5\u003C/span>\nyy\u003Cspan class=\"token punctuation\">:\u003C/span> \u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token number\">1\u003C/span> \u003Cspan class=\"token number\">2\u003C/span> \u003Cspan class=\"token number\">30\u003C/span> \u003Cspan class=\"token number\">40\u003C/span> \u003Cspan class=\"token number\">60\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span> \u003Cspan class=\"token builtin\">len\u003C/span>\u003Cspan class=\"token operator\">=\u003C/span>\u003Cspan class=\"token number\">5\u003C/span> \u003Cspan class=\"token builtin\">cap\u003C/span>\u003Cspan class=\"token operator\">=\u003C/span>\u003Cspan class=\"token number\">5\u003C/span>\nzz\u003Cspan class=\"token punctuation\">:\u003C/span> \u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token number\">30\u003C/span> \u003Cspan class=\"token number\">40\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span> \u003Cspan class=\"token builtin\">len\u003C/span>\u003Cspan class=\"token operator\">=\u003C/span>\u003Cspan class=\"token number\">2\u003C/span> \u003Cspan class=\"token builtin\">cap\u003C/span>\u003Cspan class=\"token operator\">=\u003C/span>\u003Cspan class=\"token number\">3\u003C/span>\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre>\n\u003Cp>\u003Ccode>xx\u003C/code>에 60이 추가되며, \u003Ccode>yy\u003C/code>의 대응되는 위치의 값이었던 50의 값이 60으로 바뀌었다.\u003Cbr>\n여기서 \u003Ccode>zz = append(zz, 70)\u003C/code>가 실행되면,\u003C/p>\n\u003Cpre class=\"language-go\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-go\">xx\u003Cspan class=\"token punctuation\">:\u003C/span> \u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token number\">1\u003C/span> \u003Cspan class=\"token number\">2\u003C/span> \u003Cspan class=\"token number\">30\u003C/span> \u003Cspan class=\"token number\">40\u003C/span> \u003Cspan class=\"token number\">70\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span> \u003Cspan class=\"token builtin\">len\u003C/span>\u003Cspan class=\"token operator\">=\u003C/span>\u003Cspan class=\"token number\">5\u003C/span> \u003Cspan class=\"token builtin\">cap\u003C/span>\u003Cspan class=\"token operator\">=\u003C/span>\u003Cspan class=\"token number\">5\u003C/span>\nyy\u003Cspan class=\"token punctuation\">:\u003C/span> \u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token number\">1\u003C/span> \u003Cspan class=\"token number\">2\u003C/span> \u003Cspan class=\"token number\">30\u003C/span> \u003Cspan class=\"token number\">40\u003C/span> \u003Cspan class=\"token number\">70\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span> \u003Cspan class=\"token builtin\">len\u003C/span>\u003Cspan class=\"token operator\">=\u003C/span>\u003Cspan class=\"token number\">5\u003C/span> \u003Cspan class=\"token builtin\">cap\u003C/span>\u003Cspan class=\"token operator\">=\u003C/span>\u003Cspan class=\"token number\">5\u003C/span>\nzz\u003Cspan class=\"token punctuation\">:\u003C/span> \u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token number\">30\u003C/span> \u003Cspan class=\"token number\">40\u003C/span> \u003Cspan class=\"token number\">70\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span> \u003Cspan class=\"token builtin\">len\u003C/span>\u003Cspan class=\"token operator\">=\u003C/span>\u003Cspan class=\"token number\">3\u003C/span> \u003Cspan class=\"token builtin\">cap\u003C/span>\u003Cspan class=\"token operator\">=\u003C/span>\u003Cspan class=\"token number\">3\u003C/span>\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre>\n\u003Cp>\u003Ccode>xx\u003C/code>와 \u003Ccode>yy\u003C/code>의 대응되는 위치의 값이었던 \u003Ccode>60\u003C/code>이 \u003Ccode>70\u003C/code>으로 바뀌었다.\u003C/p>\n\u003Cbr>\n\u003Cp>Slice에 값을 \u003Ccode>append\u003C/code>하였을 때 생기는 문제로 인해 직관적으로 이해하기 어려운 결과를 확인하였다.\n\u003Ccode>xx\u003C/code>, \u003Ccode>yy\u003C/code>, \u003Ccode>zz\u003C/code>가 같은 Capacity를 공유하기 때문에 생긴 문제이다.\nSlice를 Slicing할 때, Capacity의 범위를 명시하는 표기법을 사용하면 이와 같은 문제를 어느 정도 해결할 수 있다.\u003C/p>\n\u003Cpre class=\"language-go\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-go\">xxx \u003Cspan class=\"token operator\">:=\u003C/span> \u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token builtin\">int\u003C/span>\u003Cspan class=\"token punctuation\">&#123;\u003C/span>\u003Cspan class=\"token number\">1\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token number\">2\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token number\">3\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token number\">4\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token number\">5\u003C/span>\u003Cspan class=\"token punctuation\">&#125;\u003C/span>\nyyy \u003Cspan class=\"token operator\">:=\u003C/span> xxx\u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span>\u003Cspan class=\"token number\">2\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span>\u003Cspan class=\"token number\">2\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span> \u003Cspan class=\"token comment\">// limits capacity of slice, they not share additional capacity\u003C/span>\nzzz \u003Cspan class=\"token operator\">:=\u003C/span> xxx\u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token number\">2\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span>\u003Cspan class=\"token number\">4\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span>\u003Cspan class=\"token number\">4\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span>\n\nfmt\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">Println\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token function\">cap\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>xxx\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token function\">cap\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>yyy\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token function\">cap\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>zzz\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\nyyy \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token function\">append\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>yyy\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token number\">30\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token number\">40\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token number\">50\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token comment\">// this appending never interacts with other slices\u003C/span>\nxxx \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token function\">append\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>xxx\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token number\">60\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\nzzz \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token function\">append\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>zzz\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token number\">70\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\nfmt\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">Println\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>xxx\u003Cspan class=\"token punctuation\">,\u003C/span> yyy\u003Cspan class=\"token punctuation\">,\u003C/span> zzz\u003Cspan class=\"token punctuation\">)\u003C/span>\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre>\n\u003Cp>위 코드의 출력 결과는 아래와 같다.\u003C/p>\n\u003Cpre class=\"language-go\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-go\">\u003Cspan class=\"token number\">5\u003C/span> \u003Cspan class=\"token number\">2\u003C/span> \u003Cspan class=\"token number\">2\u003C/span>\n\u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token number\">1\u003C/span> \u003Cspan class=\"token number\">2\u003C/span> \u003Cspan class=\"token number\">3\u003C/span> \u003Cspan class=\"token number\">4\u003C/span> \u003Cspan class=\"token number\">5\u003C/span> \u003Cspan class=\"token number\">60\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span> \u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token number\">1\u003C/span> \u003Cspan class=\"token number\">2\u003C/span> \u003Cspan class=\"token number\">30\u003C/span> \u003Cspan class=\"token number\">40\u003C/span> \u003Cspan class=\"token number\">50\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span> \u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token number\">3\u003C/span> \u003Cspan class=\"token number\">4\u003C/span> \u003Cspan class=\"token number\">70\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span>\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre>\n\u003Cbr>\n\u003Cp>한편 Array도 Slicing이 가능하며, Slicing된 값은 Slice 타입이다.\u003C/p>\n\u003Cpre class=\"language-go\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-go\">ax \u003Cspan class=\"token operator\">:=\u003C/span> \u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token operator\">...\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token builtin\">int\u003C/span>\u003Cspan class=\"token punctuation\">&#123;\u003C/span>\u003Cspan class=\"token number\">1\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token number\">2\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token number\">3\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token number\">4\u003C/span>\u003Cspan class=\"token punctuation\">&#125;\u003C/span>\nay \u003Cspan class=\"token operator\">:=\u003C/span> ax\u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span>\u003Cspan class=\"token number\">2\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span> \u003Cspan class=\"token comment\">// slicing array\u003C/span>\naz \u003Cspan class=\"token operator\">:=\u003C/span> ax\u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token number\">2\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span>\nax\u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token number\">0\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span> \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token number\">10\u003C/span>\nfmt\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">Println\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>ax\u003Cspan class=\"token punctuation\">,\u003C/span> ay\u003Cspan class=\"token punctuation\">,\u003C/span> az\u003Cspan class=\"token punctuation\">)\u003C/span>\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre>\n\u003Cbr>\u003Cbr>\n\u003Ch3 id=\"copying-slices\">\u003Ca aria-hidden=\"true\" tabindex=\"-1\" href=\"#copying-slices\">\u003Cspan class=\"icon icon-link\">\u003C/span>\u003C/a>Copying Slices\u003C/h3>\n\u003Cbr>\n\u003Cp>또다른 해결방법은 다른 언어의 \u003Cem>deep copy\u003C/em>처럼, 새로운 공간에 값들을 복사하는 방법이다. \u003Ccode>copy()\u003C/code> 함수를 통해 할 수 있다.\u003C/p>\n\u003Cpre class=\"language-go\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-go\">x \u003Cspan class=\"token operator\">:=\u003C/span> \u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token builtin\">int\u003C/span>\u003Cspan class=\"token punctuation\">&#123;\u003C/span>\u003Cspan class=\"token number\">1\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token number\">2\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token number\">3\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token number\">4\u003C/span>\u003Cspan class=\"token punctuation\">&#125;\u003C/span>\ny \u003Cspan class=\"token operator\">:=\u003C/span> \u003Cspan class=\"token function\">make\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token builtin\">int\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token number\">4\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\n\nnum \u003Cspan class=\"token operator\">:=\u003C/span> \u003Cspan class=\"token function\">copy\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>y\u003Cspan class=\"token punctuation\">,\u003C/span> x\u003Cspan class=\"token punctuation\">)\u003C/span>   \u003Cspan class=\"token comment\">// copy(destination, source). x is copied into y\u003C/span>\nfmt\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">Println\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>y\u003Cspan class=\"token punctuation\">,\u003C/span> num\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token comment\">// num: the number of elements copied (decided by length of slices)\u003C/span>\ny\u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token number\">2\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span> \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token number\">1\u003C/span>            \u003Cspan class=\"token comment\">// if we change any value of y,\u003C/span>\nfmt\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">Println\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>y\u003Cspan class=\"token punctuation\">,\u003C/span> x\u003Cspan class=\"token punctuation\">)\u003C/span>   \u003Cspan class=\"token comment\">// values of x still unchanged (doesn't share memory spaces)\u003C/span>\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre>\n\u003Cbr>\n\u003Cp>\u003Ccode>copy()\u003C/code> 함수는 두 번째 인수로 들어온 Array나 Slice를 첫 번째 인수로 들어온 Slice에 복사한다. 반환값은 복사된 원소의 수이다.\u003C/p>\n\u003Cpre class=\"language-go\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-go\">z \u003Cspan class=\"token operator\">:=\u003C/span> \u003Cspan class=\"token function\">make\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token builtin\">int\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token number\">2\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token number\">4\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token comment\">// because length of z is 2,\u003C/span>\nnum \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token function\">copy\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>z\u003Cspan class=\"token punctuation\">,\u003C/span> x\u003Cspan class=\"token punctuation\">)\u003C/span>       \u003Cspan class=\"token comment\">// when it is copied, only two of x are copied.\u003C/span>\nfmt\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">Println\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>z\u003Cspan class=\"token punctuation\">,\u003C/span> num\u003Cspan class=\"token punctuation\">)\u003C/span>    \u003Cspan class=\"token comment\">// [1, 2] 2\u003C/span>\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre>\n\u003Cbr>\n\u003Cp>\u003Ccode>copy()\u003C/code> 함수의 인수로 들어오는 Slice나 Array들은 Length가 서로 다를 수 있다.\nDestination Slice의 Length가 Source Slice보다 크다면, 앞쪽의 원소들부터 채워진다.\u003C/p>\n\u003Cpre class=\"language-go\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-go\">w \u003Cspan class=\"token operator\">:=\u003C/span> \u003Cspan class=\"token function\">make\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token builtin\">int\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token number\">4\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token number\">4\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token comment\">//\u003C/span>\nnum \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token function\">copy\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>w\u003Cspan class=\"token punctuation\">,\u003C/span> x\u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span>\u003Cspan class=\"token number\">2\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>   \u003Cspan class=\"token comment\">// because x[:2] has only two element (length is 2),\u003C/span>\nfmt\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">Println\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>w\u003Cspan class=\"token punctuation\">,\u003C/span> num\u003Cspan class=\"token punctuation\">)\u003C/span>    \u003Cspan class=\"token comment\">// x[:2] is copied into first two elements\u003C/span>\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre>\n\u003Cp>동일한 원리로 이런 것도 가능하다.\u003C/p>\n\u003Cpre class=\"language-go\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-go\">q \u003Cspan class=\"token operator\">:=\u003C/span> \u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token builtin\">int\u003C/span>\u003Cspan class=\"token punctuation\">&#123;\u003C/span>\u003Cspan class=\"token number\">1\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token number\">2\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token number\">3\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token number\">4\u003C/span>\u003Cspan class=\"token punctuation\">&#125;\u003C/span>\nnum \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token function\">copy\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>q\u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span>\u003Cspan class=\"token number\">3\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> q\u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token number\">1\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token comment\">// [2, 3, 4] is copied into [1, 2, 3]\u003C/span>\nfmt\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">Println\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>q\u003Cspan class=\"token punctuation\">,\u003C/span> num\u003Cspan class=\"token punctuation\">)\u003C/span>      \u003Cspan class=\"token comment\">// [2, 3, 4, 4]\u003C/span>\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre>\n\u003Cbr>\u003Cbr>\n\u003Ch2 id=\"string\">\u003Ca aria-hidden=\"true\" tabindex=\"-1\" href=\"#string\">\u003Cspan class=\"icon icon-link\">\u003C/span>\u003C/a>string\u003C/h2>\n\u003Chr>\n\u003Cp>\u003Ccode>string\u003C/code>은 Primitive Data Type이지만, 여러 문자들의 Slice처럼 생각할 수도 있다. Slice처럼 \u003Ccode>string\u003C/code>을 Slicing할 수도 있다.\u003C/p>\n\u003Cpre class=\"language-go\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-go\">\u003Cspan class=\"token keyword\">var\u003C/span> s \u003Cspan class=\"token builtin\">string\u003C/span> \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token string\">\"Hello there\"\u003C/span>\nfmt\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">Println\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>s\u003Cspan class=\"token punctuation\">,\u003C/span> b\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token function\">len\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>s\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\n\n\u003Cspan class=\"token comment\">// slicing string\u003C/span>\nfmt\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">Println\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>s\u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token number\">4\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span>\u003Cspan class=\"token number\">7\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\nfmt\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">Println\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>s\u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token number\">5\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\nfmt\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">Println\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>s\u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span>\u003Cspan class=\"token number\">6\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre>\n\u003Cp>한편, 알파벳과 같은 일반적인 문자들을 \u003Ccode>string\u003C/code>으로 표현할 때는 문제를 느끼지 못할 수도 있다.\n하지만 한글처럼 UTF-8에서 2바이트 이상의 크기로 표현되는 문자들은 Slicing시 문자가 제대로 나타나지 않을 때도 있다.\u003C/p>\n\u003Cpre class=\"language-go\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-go\">\u003Cspan class=\"token keyword\">var\u003C/span> h \u003Cspan class=\"token builtin\">string\u003C/span> \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token string\">\"한글조아\"\u003C/span>\nfmt\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">Println\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>h\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token function\">len\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>h\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\n\u003Cspan class=\"token comment\">// each character of korean letter takes 3 bytes, slicing like below would not be done properly\u003C/span>\nfmt\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">Println\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>h\u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token number\">2\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\nfmt\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">Println\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>h\u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span>\u003Cspan class=\"token number\">5\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\nfmt\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">Println\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>h\u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token number\">2\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span>\u003Cspan class=\"token number\">7\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre>\n\u003Cp>\u003Ccode>string\u003C/code>을 구성하는 각 문자들은 \u003Ccode>rune\u003C/code> 타입이지만, 실제로 \u003Ccode>string\u003C/code>은 \u003Ccode>byte\u003C/code>들의 배열이다.\n\u003Ccode>rune\u003C/code>은 문자가 1바이트든, 4바이트든 한 개의 문자를 온전히 나타낼 수 있고,\n\u003Ccode>byte\u003C/code>는 2바이트 이상의 문자를 나타내기 위해서는 2개 이상 모여야 한다는 것이다.\u003C/p>\n\u003Cpre class=\"language-go\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-go\">\u003Cspan class=\"token comment\">// difference of rune and byte\u003C/span>\n\u003Cspan class=\"token keyword\">var\u003C/span> ss \u003Cspan class=\"token builtin\">string\u003C/span> \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token string\">\"Hello 안녕\"\u003C/span>\n\u003Cspan class=\"token keyword\">var\u003C/span> bs \u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token builtin\">byte\u003C/span> \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token function\">byte\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>ss\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token comment\">// []byte splits UTF-8 characters. usually use this.\u003C/span>\n\u003Cspan class=\"token keyword\">var\u003C/span> rs \u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token builtin\">rune\u003C/span> \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token function\">rune\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>ss\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token comment\">// []rune doesn't split\u003C/span>\nfmt\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">Println\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>bs\u003Cspan class=\"token punctuation\">,\u003C/span> rs\u003Cspan class=\"token punctuation\">)\u003C/span>\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre>\n\u003Cp>위처럼 \u003Ccode>string\u003C/code>을 각각 \u003Ccode>byte\u003C/code>와 \u003Ccode>rune\u003C/code>의 Slice로 변환해보면 확인할 수 있다.\u003C/p>\n\u003Cbr>\u003Cbr>\n\u003Ch2 id=\"map\">\u003Ca aria-hidden=\"true\" tabindex=\"-1\" href=\"#map\">\u003Cspan class=\"icon icon-link\">\u003C/span>\u003C/a>Map\u003C/h2>\n\u003Chr>\n\u003Cp>\u003Cstrong>Map\u003C/strong>은 전형적인 Key-Value 페어의 데이터타입으로, C++의 \u003Ccode>map\u003C/code>과 유사하다. 아래 코드처럼 선언하고, 초기화할 수 있다. \u003Cbr>\nSlice와 마찬가지로 \u003Ccode>map\u003C/code>의 Zero value는 반드시 \u003Ccode>nil\u003C/code>이며, 크기가 0인 \u003Ccode>map\u003C/code>과 \u003Ccode>nil\u003C/code>은 서로 다르다.\u003C/p>\n\u003Cpre class=\"language-go\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-go\">\u003Cspan class=\"token keyword\">var\u003C/span> nilMap \u003Cspan class=\"token keyword\">map\u003C/span>\u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token builtin\">string\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token builtin\">int\u003C/span>\nmamap \u003Cspan class=\"token operator\">:=\u003C/span> \u003Cspan class=\"token keyword\">map\u003C/span>\u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token builtin\">string\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token builtin\">int\u003C/span>\u003Cspan class=\"token punctuation\">&#123;\u003C/span>\u003Cspan class=\"token punctuation\">&#125;\u003C/span>\nfmt\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">Println\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>nilMap\u003Cspan class=\"token punctuation\">,\u003C/span> mamap\u003Cspan class=\"token punctuation\">,\u003C/span> nilMap \u003Cspan class=\"token operator\">==\u003C/span> \u003Cspan class=\"token boolean\">nil\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> mamap \u003Cspan class=\"token operator\">==\u003C/span> \u003Cspan class=\"token boolean\">nil\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre>\n\u003Cbr>\n\u003Cp>초기화하는 방법도 다른 언어와 유사하다. 아래의 예제는 key는 \u003Ccode>string\u003C/code>이고, value는 \u003Ccode>string\u003C/code>의 \u003Ccode>slice\u003C/code>인 \u003Ccode>map\u003C/code>이다.\u003C/p>\n\u003Cpre class=\"language-go\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-go\">\u003Cspan class=\"token keyword\">var\u003C/span> teams \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token keyword\">map\u003C/span>\u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token builtin\">string\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token builtin\">string\u003C/span>\u003Cspan class=\"token punctuation\">&#123;\u003C/span>\n    \u003Cspan class=\"token string\">\"Orcas\"\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span>   \u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token builtin\">string\u003C/span>\u003Cspan class=\"token punctuation\">&#123;\u003C/span>\u003Cspan class=\"token string\">\"Fred\"\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token string\">\"Ralph\"\u003C/span>\u003Cspan class=\"token punctuation\">&#125;\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n    \u003Cspan class=\"token string\">\"Lions\"\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span>   \u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token builtin\">string\u003C/span>\u003Cspan class=\"token punctuation\">&#123;\u003C/span>\u003Cspan class=\"token string\">\"Sarah\"\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token string\">\"Peter\"\u003C/span>\u003Cspan class=\"token punctuation\">&#125;\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n    \u003Cspan class=\"token string\">\"Kittens\"\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span> \u003Cspan class=\"token punctuation\">&#123;\u003C/span>\u003Cspan class=\"token string\">\"Waldo\"\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token string\">\"Raul\"\u003C/span>\u003Cspan class=\"token punctuation\">&#125;\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token comment\">// 이렇게 해도 됨\u003C/span>\n\u003Cspan class=\"token punctuation\">&#125;\u003C/span>\nfmt\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">Println\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>teams\u003Cspan class=\"token punctuation\">)\u003C/span>\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre>\n\u003Cbr>\n\u003Cp>\u003Ccode>make()\u003C/code>함수와 \u003Ccode>len()\u003C/code>함수는 map에서도 사용할 수 있다.\u003C/p>\n\u003Cpre class=\"language-go\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-go\">ages \u003Cspan class=\"token operator\">:=\u003C/span> \u003Cspan class=\"token function\">make\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token keyword\">map\u003C/span>\u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token builtin\">int\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token builtin\">string\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token number\">10\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\nfmt\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">Println\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>ages\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token function\">len\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>ages\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token comment\">// len() returns the number of key-value pairs of map\u003C/span>\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre>\n\u003Cbr>\n\u003Cp>사용 방법은 다른 언어의 일반적인 Key-Value 페어 데이터타입과 크게 다르지 않다. 이때 Value값이 존재하지 않는 Key에 접근하면 Zero value를 반환한다.\u003C/p>\n\u003Cpre class=\"language-go\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-go\">totalWins \u003Cspan class=\"token operator\">:=\u003C/span> \u003Cspan class=\"token keyword\">map\u003C/span>\u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token builtin\">string\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token builtin\">int\u003C/span>\u003Cspan class=\"token punctuation\">&#123;\u003C/span>\u003Cspan class=\"token punctuation\">&#125;\u003C/span>\ntotalWins\u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token string\">\"Orcas\"\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span> \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token number\">1\u003C/span> \u003Cspan class=\"token comment\">// assigning value into specific key with =, not :=\u003C/span>\ntotalWins\u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token string\">\"Lions\"\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span> \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token number\">2\u003C/span>\nfmt\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">Println\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>totalWins\u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token string\">\"Orcas\"\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\nfmt\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">Println\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>totalWins\u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token string\">\"Kittens\"\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token comment\">// an initial value of int is zero.\u003C/span>\ntotalWins\u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token string\">\"Kittens\"\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token operator\">++\u003C/span>            \u003Cspan class=\"token comment\">// value of \"Kittens\" would be 1\u003C/span>\ntotalWins\u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token string\">\"Lions\"\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span> \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token number\">3\u003C/span>\nfmt\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">Println\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>totalWins\u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token string\">\"Kittens\"\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\nfmt\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">Println\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>totalWins\u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token string\">\"Lions\"\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre>\n\u003Cbr>\n\u003Cp>이 때 Value값이 존재하지 않는 Key에 접근한 것인지, 아니면 그냥 Value값이 Zero value인지 알 수 없다.\u003C/p>\n\u003Cpre class=\"language-go\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-go\">m \u003Cspan class=\"token operator\">:=\u003C/span> \u003Cspan class=\"token keyword\">map\u003C/span>\u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token builtin\">string\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token builtin\">int\u003C/span>\u003Cspan class=\"token punctuation\">&#123;\u003C/span>\n    \u003Cspan class=\"token string\">\"Hello\"\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span> \u003Cspan class=\"token number\">5\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n    \u003Cspan class=\"token string\">\"world\"\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span> \u003Cspan class=\"token number\">0\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n\u003Cspan class=\"token punctuation\">&#125;\u003C/span>\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre>\n\u003Cp>이를테면 위와 같은 예제에서 Key가 \u003Ccode>&quot;world&quot;\u003C/code>일 때와, Key가 \u003Ccode>&quot;Bye&quot;\u003C/code>일 때 동일하게 0이라는 값을 얻게 될 것이다.\nGo 개발자들은 당연히 이에 대한 해결책으로 \u003Cem>comma ok idiom\u003C/em>이란 것을 만들어 두었다.\u003C/p>\n\u003Cpre class=\"language-go\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-go\">\u003Cspan class=\"token comment\">// comma idiom\u003C/span>\nv\u003Cspan class=\"token punctuation\">,\u003C/span> ok \u003Cspan class=\"token operator\">:=\u003C/span> m\u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token string\">\"Hello\"\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span> \u003Cspan class=\"token comment\">// v gets value of the given key\u003C/span>\nfmt\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">Println\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>v\u003Cspan class=\"token punctuation\">,\u003C/span> ok\u003Cspan class=\"token punctuation\">)\u003C/span>  \u003Cspan class=\"token comment\">// ok gets if the key exists in map\u003C/span>\n\nv\u003Cspan class=\"token punctuation\">,\u003C/span> ok \u003Cspan class=\"token operator\">=\u003C/span> m\u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token string\">\"world\"\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span> \u003Cspan class=\"token comment\">// though v gets zero value,\u003C/span>\nfmt\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">Println\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>v\u003Cspan class=\"token punctuation\">,\u003C/span> ok\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token comment\">// ok gets true because \"world\" exists in map\u003C/span>\n\nv\u003Cspan class=\"token punctuation\">,\u003C/span> ok \u003Cspan class=\"token operator\">=\u003C/span> m\u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token string\">\"nono\"\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span>  \u003Cspan class=\"token comment\">// \"nono\" doesn't exist in map, so ok gets false\u003C/span>\nfmt\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">Println\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>v\u003Cspan class=\"token punctuation\">,\u003C/span> ok\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token comment\">// v gets zero value,\u003C/span>\n\n\u003Cspan class=\"token function\">delete\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>m\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token string\">\"Hello\"\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token comment\">// deletes key \"Hello\" from the map\u003C/span>\nv\u003Cspan class=\"token punctuation\">,\u003C/span> ok \u003Cspan class=\"token operator\">=\u003C/span> m\u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token string\">\"Hello\"\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span> \u003Cspan class=\"token comment\">// the key doesn't exist in map as it is deleted\u003C/span>\nfmt\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">Println\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>v\u003Cspan class=\"token punctuation\">,\u003C/span> ok\u003Cspan class=\"token punctuation\">)\u003C/span>\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre>\n\u003Cp>위 예제에서 \u003Ccode>m\u003C/code>에서 반환받은 값을 계속 \u003Ccode>v\u003C/code>, \u003Ccode>ok\u003C/code> 두 개의 변수에 할당하는 것을 확인할 수 있다.\n이 때 첫 번째 변수인 \u003Ccode>v\u003C/code>에는 Key에 해당하는 Value가 들어가며, 두 번째 변수인 \u003Ccode>ok\u003C/code>에는 해당 Key가 \u003Ccode>m\u003C/code>에 존재하는지 여부가 \u003Ccode>true\u003C/code> or \u003Ccode>false\u003C/code>로 들어간다.\n또한 \u003Ccode>map\u003C/code>에서 Key-Value 페어를 지우려면 \u003Ccode>delete()\u003C/code> 함수를 사용한다.\u003C/p>\n\u003Cbr>\u003Cbr>\n\u003Ch2 id=\"struct\">\u003Ca aria-hidden=\"true\" tabindex=\"-1\" href=\"#struct\">\u003Cspan class=\"icon icon-link\">\u003C/span>\u003C/a>struct\u003C/h2>\n\u003Chr>\n\u003Cp>C/C++의 \u003Ccode>struct\u003C/code>와 유사하다. Go가 일반적으로 그런 것처럼, 필드들을 선언할 때 자료형이 필드명의 뒤에 온다.\nC/C++의 \u003Ccode>typedef\u003C/code> 키워드처럼, \u003Ccode>type\u003C/code> 키워드를 통해 \u003Ccode>struct\u003C/code> 타입을 정의할 수 있다.\u003C/p>\n\u003Cpre class=\"language-go\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-go\">\u003Cspan class=\"token keyword\">type\u003C/span> person \u003Cspan class=\"token keyword\">struct\u003C/span> \u003Cspan class=\"token punctuation\">&#123;\u003C/span> \u003Cspan class=\"token comment\">// define struct type\u003C/span>\n    name \u003Cspan class=\"token builtin\">string\u003C/span>\n    age  \u003Cspan class=\"token builtin\">int\u003C/span>\n    pet  \u003Cspan class=\"token builtin\">string\u003C/span>\n\u003Cspan class=\"token punctuation\">&#125;\u003C/span>\n\n\u003Cspan class=\"token keyword\">var\u003C/span> john person \u003Cspan class=\"token comment\">// struct variable declaration\u003C/span>\n\u003Cspan class=\"token keyword\">var\u003C/span> james \u003Cspan class=\"token operator\">=\u003C/span> person\u003Cspan class=\"token punctuation\">&#123;\u003C/span>\u003Cspan class=\"token string\">\"James\"\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token number\">24\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token string\">\"cat\"\u003C/span>\u003Cspan class=\"token punctuation\">&#125;\u003C/span>\nkim \u003Cspan class=\"token operator\">:=\u003C/span> person\u003Cspan class=\"token punctuation\">&#123;\u003C/span>\u003Cspan class=\"token punctuation\">&#125;\u003C/span>                   \u003Cspan class=\"token comment\">// there is no difference on empty struct and zero value of struct\u003C/span>\nfred \u003Cspan class=\"token operator\">:=\u003C/span> person\u003Cspan class=\"token punctuation\">&#123;\u003C/span>\u003Cspan class=\"token string\">\"Fred\"\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token number\">22\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token string\">\"dog\"\u003C/span>\u003Cspan class=\"token punctuation\">&#125;\u003C/span> \u003Cspan class=\"token comment\">// values are assigned to the fields in the order they were declared in struct definition\u003C/span>\nbeth \u003Cspan class=\"token operator\">:=\u003C/span> person\u003Cspan class=\"token punctuation\">&#123;\u003C/span>                   \u003Cspan class=\"token comment\">// using key names (recommended)\u003C/span>\n    age\u003Cspan class=\"token punctuation\">:\u003C/span>  \u003Cspan class=\"token number\">20\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n    name\u003Cspan class=\"token punctuation\">:\u003C/span> \u003Cspan class=\"token string\">\"Beth\"\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n\u003Cspan class=\"token punctuation\">&#125;\u003C/span>\nfred\u003Cspan class=\"token punctuation\">.\u003C/span>pet \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token string\">\"parrot\"\u003C/span> \u003Cspan class=\"token comment\">// can use dotted notation\u003C/span>\n\nfmt\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">Println\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>john\u003Cspan class=\"token punctuation\">,\u003C/span> kim\u003Cspan class=\"token punctuation\">,\u003C/span> james\u003Cspan class=\"token punctuation\">,\u003C/span> fred\u003Cspan class=\"token punctuation\">,\u003C/span> beth\u003Cspan class=\"token punctuation\">)\u003C/span>\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre>\n\u003Cp>\u003Ccode>struct\u003C/code> 인스턴스를 생성할 때는 \u003Ccode>struct\u003C/code>를 정의할 때 입력했던 순서대로 각 필드의 값을 중괄호 안에 입력해주면 된다.\n특이사항으로는 \u003Ccode>map\u003C/code>이나 \u003Ccode>slice\u003C/code>와는 달리, \u003Ccode>struct\u003C/code>의 Zero value와 비어있는 \u003Ccode>struct\u003C/code>가 동일하게 처리된다.\u003C/p>\n\u003Cbr>\u003Cbr>\n\u003Ch3 id=\"anonymous-structs\">\u003Ca aria-hidden=\"true\" tabindex=\"-1\" href=\"#anonymous-structs\">\u003Cspan class=\"icon icon-link\">\u003C/span>\u003C/a>Anonymous Structs\u003C/h3>\n\u003Cpre class=\"language-go\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-go\">\u003Cspan class=\"token keyword\">var\u003C/span> human \u003Cspan class=\"token keyword\">struct\u003C/span> \u003Cspan class=\"token punctuation\">&#123;\u003C/span> \u003Cspan class=\"token comment\">// anonymous structs\u003C/span>\n    name \u003Cspan class=\"token builtin\">string\u003C/span>\n    age  \u003Cspan class=\"token builtin\">int\u003C/span>\n    pet  \u003Cspan class=\"token builtin\">string\u003C/span>\n\u003Cspan class=\"token punctuation\">&#125;\u003C/span>\nhuman\u003Cspan class=\"token punctuation\">.\u003C/span>name \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token string\">\"Bob\"\u003C/span>\nhuman\u003Cspan class=\"token punctuation\">.\u003C/span>age \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token number\">24\u003C/span>\nhuman\u003Cspan class=\"token punctuation\">.\u003C/span>pet \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token string\">\"dog\"\u003C/span>\n\npet \u003Cspan class=\"token operator\">:=\u003C/span> \u003Cspan class=\"token keyword\">struct\u003C/span> \u003Cspan class=\"token punctuation\">&#123;\u003C/span> \u003Cspan class=\"token comment\">// directly initializing anonymous structs\u003C/span>\n    name \u003Cspan class=\"token builtin\">string\u003C/span>\n    kind \u003Cspan class=\"token builtin\">string\u003C/span>\n\u003Cspan class=\"token punctuation\">&#125;\u003C/span>\u003Cspan class=\"token punctuation\">&#123;\u003C/span>\n    name\u003Cspan class=\"token punctuation\">:\u003C/span> \u003Cspan class=\"token string\">\"choco\"\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n    kind\u003Cspan class=\"token punctuation\">:\u003C/span> \u003Cspan class=\"token string\">\"dog\"\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n\u003Cspan class=\"token punctuation\">&#125;\u003C/span>\n\nfmt\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">Println\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>human\u003Cspan class=\"token punctuation\">,\u003C/span> pet\u003Cspan class=\"token punctuation\">)\u003C/span>\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre>\n\u003Cp>위 코드는 익명 \u003Ccode>struct\u003C/code> 변수를 선언하고, 또 선언과 동시에 초기화하는 예제이다.\n타입 명시와 값 할당이 다른 중괄호 안에서 이루어져야 하는 것만 주의하면 큰 문제 없는 듯.\u003C/p>\n\u003Cbr>\u003Cbr>\n\u003Ch3 id=\"comparing-and-converting-structs\">\u003Ca aria-hidden=\"true\" tabindex=\"-1\" href=\"#comparing-and-converting-structs\">\u003Cspan class=\"icon icon-link\">\u003C/span>\u003C/a>Comparing and Converting Structs\u003C/h3>\n\u003Cpre class=\"language-go\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-go\">\u003Cspan class=\"token keyword\">type\u003C/span> firstPerson \u003Cspan class=\"token keyword\">struct\u003C/span> \u003Cspan class=\"token punctuation\">&#123;\u003C/span>\n    name \u003Cspan class=\"token builtin\">string\u003C/span>\n    age  \u003Cspan class=\"token builtin\">int\u003C/span>\n\u003Cspan class=\"token punctuation\">&#125;\u003C/span>\nf1 \u003Cspan class=\"token operator\">:=\u003C/span> firstPerson\u003Cspan class=\"token punctuation\">&#123;\u003C/span>\u003Cspan class=\"token string\">\"kim\"\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token number\">24\u003C/span>\u003Cspan class=\"token punctuation\">&#125;\u003C/span>\nf2 \u003Cspan class=\"token operator\">:=\u003C/span> firstPerson\u003Cspan class=\"token punctuation\">&#123;\u003C/span>\u003Cspan class=\"token string\">\"lee\"\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token number\">25\u003C/span>\u003Cspan class=\"token punctuation\">&#125;\u003C/span>\nfmt\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">Println\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>f1 \u003Cspan class=\"token operator\">==\u003C/span> f2\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token comment\">// comparing two firstPerson instances is possible when they are composed of comparable types\u003C/span>\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre>\n\u003Cp>\u003Ccode>struct\u003C/code>의 필드가 비교 가능한 타입들로 이루어져 있다면, 서로 같은 \u003Ccode>struct\u003C/code> 타입끼리는 서로 비교할 수 있다.\u003C/p>\n\u003Cbr>\n\u003Cpre class=\"language-go\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-go\">\u003Cspan class=\"token keyword\">type\u003C/span> secondPerson \u003Cspan class=\"token keyword\">struct\u003C/span> \u003Cspan class=\"token punctuation\">&#123;\u003C/span>\n    name \u003Cspan class=\"token builtin\">string\u003C/span>\n    age \u003Cspan class=\"token builtin\">int\u003C/span>\n\u003Cspan class=\"token punctuation\">&#125;\u003C/span>\ns1 \u003Cspan class=\"token operator\">:=\u003C/span> secondPerson\u003Cspan class=\"token punctuation\">&#123;\u003C/span>\u003Cspan class=\"token string\">\"choi\"\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token number\">26\u003C/span>\u003Cspan class=\"token punctuation\">&#125;\u003C/span>\n\u003Cspan class=\"token comment\">// fmt.Println(s1 == f1) // comparing(==, !=) secondPerson with firstPerson is impossible\u003C/span>\nfmt\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">Println\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token function\">firstPerson\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>s1\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token comment\">// convert secondPerson into firstPerson is possible because they have same fields\u003C/span>\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre>\n\u003Cp>서로 다른 \u003Ccode>struct\u003C/code> 타입끼리는 서로 비교할 수 없다.\n단, 필드의 타입과 필드명이 같다면 서로 변환할 수 있다.\u003C/p>\n\u003Cbr>\n\u003Cpre class=\"language-go\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-go\">\u003Cspan class=\"token keyword\">type\u003C/span> thirdPerson \u003Cspan class=\"token keyword\">struct\u003C/span> \u003Cspan class=\"token punctuation\">&#123;\u003C/span>\n    age \u003Cspan class=\"token builtin\">int\u003C/span>\n    name \u003Cspan class=\"token builtin\">string\u003C/span>\n\u003Cspan class=\"token punctuation\">&#125;\u003C/span>\n\u003Cspan class=\"token comment\">// t1 := thirdPerson&#123;27, \"Park\"&#125;\u003C/span>\n\u003Cspan class=\"token comment\">// fmt.Println(firstPerson(t1)) // convert thirdPerson into firstPerson is impossible because their fields have different order.\u003C/span>\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre>\n\u003Cp>만약 필드의 타입과 필드명이 같아도 선언된 순서가 다르다면 비교 및 변환할 수 없다.\u003C/p>\n\u003Cbr>\n\u003Cpre class=\"language-go\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-go\">\u003Cspan class=\"token keyword\">type\u003C/span> fourthPerson \u003Cspan class=\"token keyword\">struct\u003C/span> \u003Cspan class=\"token punctuation\">&#123;\u003C/span>\n    firstName \u003Cspan class=\"token builtin\">string\u003C/span>\n    age \u003Cspan class=\"token builtin\">int\u003C/span>\n\u003Cspan class=\"token punctuation\">&#125;\u003C/span>\n\u003Cspan class=\"token comment\">// f3 := fourthPerson&#123;\"Kang\", 28&#125;\u003C/span>\n\u003Cspan class=\"token comment\">// fmt.Println(firstPerson(f3)) // convert fourthPerson into firstPerson is impossible because their fields have different name.\u003C/span>\n\n\u003Cspan class=\"token keyword\">type\u003C/span> fifthPerson \u003Cspan class=\"token keyword\">struct\u003C/span> \u003Cspan class=\"token punctuation\">&#123;\u003C/span>\n    name \u003Cspan class=\"token builtin\">string\u003C/span>\n    age \u003Cspan class=\"token builtin\">int\u003C/span>\n    hobby \u003Cspan class=\"token builtin\">string\u003C/span>\n\u003Cspan class=\"token punctuation\">&#125;\u003C/span>\n\u003Cspan class=\"token comment\">// f4 := fifthPerson&#123;\"Seo\", 24, \"Cooking\"&#125;\u003C/span>\n\u003Cspan class=\"token comment\">// fmt.Println(firstPerson(f4)) // convert fourthPerson into firstPerson is impossible because there is an additional field.\u003C/span>\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre>\n\u003Cp>타입이 같아도 필드명이 다르다면 변환할 수 없으며, 다른 필드가 추가로 존재하면 비교 및 변환할 수 없다.\u003C/p>\n\u003Cbr>\n\u003Cpre class=\"language-go\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-go\">\u003Cspan class=\"token keyword\">var\u003C/span> g \u003Cspan class=\"token keyword\">struct\u003C/span> \u003Cspan class=\"token punctuation\">&#123;\u003C/span>\n    name \u003Cspan class=\"token builtin\">string\u003C/span>\n    age  \u003Cspan class=\"token builtin\">int\u003C/span>\n\u003Cspan class=\"token punctuation\">&#125;\u003C/span>\ng \u003Cspan class=\"token operator\">=\u003C/span> f1 \u003Cspan class=\"token comment\">// =, == are possible when anonymous struct have same field\u003C/span>\nfmt\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">Println\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>g \u003Cspan class=\"token operator\">==\u003C/span> f1\u003Cspan class=\"token punctuation\">)\u003C/span>\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre>\n\u003Cp>동일한 필드를 가지고 있는 익명 \u003Ccode>struct\u003C/code>에 대해서는 비교가 가능하다.\u003C/p>\n\u003Cbr>\u003Cbr>\n\u003Ch2 id=\"references\">\u003Ca aria-hidden=\"true\" tabindex=\"-1\" href=\"#references\">\u003Cspan class=\"icon icon-link\">\u003C/span>\u003C/a>References\u003C/h2>\n\u003Chr>\n\u003Ccenter>\u003Cp>\u003Ca href=\"https://learning.oreilly.com/library/view/learning-go/9781492077206/\" rel=\"nofollow\">\u003Cimg src=\"https://learning.oreilly.com/covers/urn:orm:book:9781492077206/400w/\" alt=\"Learning Go Book Cover\">\u003C/a> \u003Cbr>\n\u003Ca href=\"https://learning.oreilly.com/library/view/learning-go/9781492077206/\" rel=\"nofollow\">Jon Bodner, 『Learning Go』, O’Reilly Media, Inc.\u003C/a>\u003C/p>\u003C/center>\n\u003Cbr>\u003Cbr>",{"title":3,"date":4,"excerpt":5,"categories":6,"coverImage":9,"coverWidth":10,"coverHeight":11,"indexed":12,"exposed":12,"slug":13},"복합 타입","2022-07-23T00:00:00.000Z","Composite Types",[7,8],"Golang","Basic Golang","/post_img/Go/Golang_basics/cover.png",16,9,true,"Go/Golang Basics/GO3"],"uses":{"params":["post"]}}]}
