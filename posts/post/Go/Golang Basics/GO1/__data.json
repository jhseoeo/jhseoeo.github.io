{"type":"data","nodes":[{"type":"data","data":[null],"uses":{}},{"type":"data","data":[{"PostContent":1,"meta":2},"\u003Cbr>\n\u003Cp>본 글은 Golang을 공부하며 주요 내용이라 생각되는 것들을 기록해둔 자료이며, Ubuntu 20.04 LTS 기준으로 작성되었습니다.\u003C/p>\n\u003Cbr>\u003Cbr>\n\u003Ch2 id=\"installation\">\u003Ca aria-hidden=\"true\" tabindex=\"-1\" href=\"#installation\">\u003Cspan class=\"icon icon-link\">\u003C/span>\u003C/a>Installation\u003C/h2>\n\u003Chr>\n\u003Cp>터미널에서 \u003Ccode>sudo apt-get install golang-go\u003C/code>를 통해 Go를 설치할 수는 있지만, 패키지 매니저를 통해 설치된 Go는 최신 버전이 아니다.\u003C/p>\n\u003Cp>최신 버전의 Go를 설치하기 위해서는 \u003Ca href=\"https://go.dev/dl/\" rel=\"nofollow\">Go 웹페이지\u003C/a>에서 설치 파일을 다운받아 설치한다.\u003C/p>\n\u003Cpre class=\"language-bash\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-bash\">\u003Cspan class=\"token function\">tar\u003C/span> \u003Cspan class=\"token parameter variable\">-C\u003C/span> /usr/local \u003Cspan class=\"token parameter variable\">-xzf\u003C/span> go1.18.4.linux-amd64.tar.gz\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre>\n\u003Cp>위의 버전은 다운로드한 설치 파일의 버전에 맞게 잘 바꿔주도록 하자.\u003C/p>\n\u003Cbr>\n\u003Cp>\u003Ccode>bash\u003C/code>를 사용한다면 \u003Cem>.profile\u003C/em>에, \u003Ccode>zsh\u003C/code>라면 \u003Cem>.zshrc\u003C/em>에 아래 내용을 추가해준다.\u003C/p>\n\u003Cpre class=\"language-bash\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-bash\">\u003Cspan class=\"token builtin class-name\">export\u003C/span> \u003Cspan class=\"token assign-left variable\">GOPATH\u003C/span>\u003Cspan class=\"token operator\">=\u003C/span>\u003Cspan class=\"token environment constant\">$HOME\u003C/span>/go\n\u003Cspan class=\"token builtin class-name\">export\u003C/span> \u003Cspan class=\"token assign-left variable\">\u003Cspan class=\"token environment constant\">PATH\u003C/span>\u003C/span>\u003Cspan class=\"token operator\">=\u003C/span>\u003Cspan class=\"token environment constant\">$PATH\u003C/span>\u003Cspan class=\"token builtin class-name\">:\u003C/span>\u003Cspan class=\"token variable\">$GOPATH\u003C/span>/bin\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre>\n\u003Cp>추가하였다면, \u003Ccode>source ~/.profile\u003C/code> 또는 \u003Ccode>source ~/.zshrc\u003C/code>를 입력하여 변경된 설정을 적용한다.\u003C/p>\n\u003Cbr>\n\u003Cp>이제 잘 설치되었는지 Go 명령어를 실행해보자.\u003C/p>\n\u003Cpre class=\"language-bash\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-bash\">go version\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre>\n\u003Cp>잘 설치되었다면, 아래와 같은 결과를 확인할 수 있을 것이다\u003C/p>\n\u003Cpre class=\"language-bash\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-bash\">go version go1.18.4 linux/amd64\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre>\n\u003Cbr>\u003Cbr>\n\u003Ch2 id=\"hello-world\">\u003Ca aria-hidden=\"true\" tabindex=\"-1\" href=\"#hello-world\">\u003Cspan class=\"icon icon-link\">\u003C/span>\u003C/a>Hello world\u003C/h2>\n\u003Chr>\n\u003Cp>파일명이 \u003Ccode>hello.go\u003C/code>인 파일을 생성하여, 아래와 같이 입력한다\u003C/p>\n\u003Cpre class=\"language-go\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-go\">\u003Cspan class=\"token keyword\">package\u003C/span> main\n\n\u003Cspan class=\"token keyword\">import\u003C/span> \u003Cspan class=\"token string\">\"fmt\"\u003C/span>\n\n\u003Cspan class=\"token keyword\">func\u003C/span> \u003Cspan class=\"token function\">main\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token punctuation\">&#123;\u003C/span>\n    fmt\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">Println\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token string\">\"Hello world!\"\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\n\u003Cspan class=\"token punctuation\">&#125;\u003C/span>\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre>\n\u003Cbr>\n\u003Cp>코드의 모양새는 대충 C/C++과 비슷해 보인다. 중괄호 사용하고, 메인함수 있고, 등등\n이후 아래 명령어를 통해 방금 생성한 \u003Cem>hello.go\u003C/em> 파일을 실행해보자.\u003C/p>\n\u003Cpre class=\"language-bash\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-bash\">go run hello.go\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre>\n\u003Cbr>\n\u003Cp>Go에서는 파일을 빌드할 수도 있다. 아래 명령어를 통해 \u003Cem>hello.go\u003C/em> 파일을 빌드해보자.\u003C/p>\n\u003Cpre class=\"language-bash\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-bash\">go build hello.go\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre>\n\u003Cp>아마 윈도우라면 \u003Cem>hello.exe\u003C/em>가, 리눅스라면 \u003Cem>hello\u003C/em> 파일이 생성되었을 것이다. (\u003Ccode>source hello\u003C/code>를 입력하여 실행할 수 있다.)\n\u003Ccode>-o\u003C/code> 플래그를 통해 빌드로 생성될 실행 파일의 이름 및 경로를 아래와 같이 설정해줄 수 있다.\u003C/p>\n\u003Cpre class=\"language-bash\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-bash\">go build \u003Cspan class=\"token parameter variable\">-o\u003C/span> hello_world hello.go\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre>\n\u003Cbr>\u003Cbr>\n\u003Ch2 id=\"installing-third-party-libraries\">\u003Ca aria-hidden=\"true\" tabindex=\"-1\" href=\"#installing-third-party-libraries\">\u003Cspan class=\"icon icon-link\">\u003C/span>\u003C/a>Installing third-party libraries\u003C/h2>\n\u003Chr>\n\u003Cp>\u003Ccode>go install\u003C/code> 명령어를 통해 써드 파티 라이브러리를 설치해보자.\u003C/p>\n\u003Cpre class=\"language-bash\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-bash\">go \u003Cspan class=\"token function\">install\u003C/span> github.com/rakyll/hey@latest\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre>\n\u003Cp>\u003Ccode>go install\u003C/code> 명령어는 저장소의 주소를 인자로 받으며, @ 뒤에 다운로드할 버전을 명시할 수 있다. \u003Ccode>latest\u003C/code>는 최신 버전이라는 뜻.\u003C/p>\n\u003Cbr>\n\u003Cp>설치한 \u003Ccode>hey\u003C/code> 라이브러리를 사용해보자\u003C/p>\n\u003Cpre class=\"language-bash\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-bash\">hey https://junhyuk0801.github.io\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre>\n\u003Cp>실행 결과를 보면 알 수 있다시피, 대충 \u003Ccode>curl\u003C/code> 비슷한 http 서버 테스트하는 용도의 라이브러리이다.\u003C/p>\n\u003Cbr>\u003Cbr>\n\u003Ch2 id=\"formatting-codes\">\u003Ca aria-hidden=\"true\" tabindex=\"-1\" href=\"#formatting-codes\">\u003Cspan class=\"icon icon-link\">\u003C/span>\u003C/a>Formatting codes\u003C/h2>\n\u003Chr>\n\u003Cp>Go에는 표준 포맷(Standard format)이 존재한다. \u003Ccode>go fmt\u003C/code> 명령어로 표준 포맷에 맞게 코드를 포맷할 수 있다. 아래 명령어를 입력하면 현재 디렉토리 내의 모든 \u003Cem>.go\u003C/em> 파일들을 포매팅할 수 있다.\u003C/p>\n\u003Cpre class=\"language-bash\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-bash\">go \u003Cspan class=\"token function\">fmt\u003C/span> ./\u003Cspan class=\"token punctuation\">..\u003C/span>\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre>\n\u003Cbr>\n\u003Cp>보다 향상된 기능의 \u003Ccode>goimport\u003C/code> 모듈이 존재하는데, 아마 불필요하게 import된 라이브러리들을 관리해주는 등의 기능을 추가로 제공해주는 것으로 보인다.\u003C/p>\n\u003Cp>\u003Ccode>go install golang.org/x/tools/cmd/goimports@latest\u003C/code>로 설치한 후, 아래 명령어를 통해 실행한다.\u003C/p>\n\u003Cpre class=\"language-bash\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-bash\">goimports \u003Cspan class=\"token parameter variable\">-l\u003C/span> \u003Cspan class=\"token parameter variable\">-w\u003C/span> \u003Cspan class=\"token builtin class-name\">.\u003C/span>\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre>\n\u003Cp>\u003Ccode>-l\u003C/code> 플래그는 포맷된 내용을 콘솔에 출력하도록 하며, \u003Ccode>-w\u003C/code> 플래그는 수정된 내용이 그 파일에 그대로 적용되도록 (추가로 파일이 생성되지 않도록) 한다.\u003C/p>\n\u003Cbr>\u003Cbr>\n\u003Ch2 id=\"linting-and-vetting\">\u003Ca aria-hidden=\"true\" tabindex=\"-1\" href=\"#linting-and-vetting\">\u003Cspan class=\"icon icon-link\">\u003C/span>\u003C/a>Linting and Vetting\u003C/h2>\n\u003Chr>\n\u003Cp>\u003Ccode>golint\u003C/code>는 현재 deprecated된 도구이지만, 문법적인 오류를 잡아주는 역할을 한다.\u003C/p>\n\u003Cpre class=\"language-bash\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-bash\">go \u003Cspan class=\"token function\">install\u003C/span> golang.org/x/lint/golint@latest\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre>\n\u003Cp>위 명령어로 설치 후, 아래 명령어로 실행한다.\u003C/p>\n\u003Cpre class=\"language-bash\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-bash\">golint ./\u003Cspan class=\"token punctuation\">..\u003C/span>\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre>\n\u003Cbr>\n\u003Cp>\u003Ccode>go vet\u003C/code> 명령어는 사용되지 않은 변수나, 함수 인자의 잘못된 전달 등의 오류를 잡아준다.\u003C/p>\n\u003Cpre class=\"language-bash\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-bash\">go vet ./\u003Cspan class=\"token punctuation\">..\u003C/span>\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre>\n\u003Cbr>\n\u003Cp>위 두 가지 명령어를 동시에 실행하여 주는 써드 파티 도구가 존재한다. \u003Ca href=\"https://golangci-lint.run/usage/install/\" rel=\"nofollow\">golingci-lint\u003C/a>라는 것인데, 필요하다면 설치해서 써보도록 하자.\u003C/p>\n\u003Cbr>\u003Cbr>\n\u003Ch2 id=\"vscode\">\u003Ca aria-hidden=\"true\" tabindex=\"-1\" href=\"#vscode\">\u003Cspan class=\"icon icon-link\">\u003C/span>\u003C/a>VSCode\u003C/h2>\n\u003Chr>\n\u003Cp>본인은 개발환경을 VSCode로 잡았는데, 당연히 Go 확장을 설치해주었다.\u003C/p>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/junhyuk0801/junhyuk0801.github.io/post-pictures/pictures/Golang%20Basics/Golang/GO1/1.PNG\" alt=\"PIC\">\u003C/p>\n\u003Cbr>\n\u003Cp>이외에도, \u003Cem>setting.json\u003C/em>을 열어 아래 설정들을 추가해주었다.\u003C/p>\n\u003Cpre class=\"language-json\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-json\">\u003Cspan class=\"token property\">\"go.lintOnSave\"\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token string\">\"file\"\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n\u003Cspan class=\"token property\">\"go.vetOnSave\"\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token string\">\"package\"\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n\u003Cspan class=\"token property\">\"[go]\"\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token punctuation\">&#123;\u003C/span>\n    \u003Cspan class=\"token property\">\"editor.insertSpaces\"\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token boolean\">true\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n    \u003Cspan class=\"token property\">\"editor.formatOnSave\"\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token boolean\">true\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n    \u003Cspan class=\"token property\">\"editor.defaultFormatter\"\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token string\">\"golang.go\"\u003C/span>\n\u003Cspan class=\"token punctuation\">&#125;\u003C/span>\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre>\n\u003Cp>이와 같이 설정하면, \u003Ccode>Ctrl + S\u003C/code>를 눌러 저장할 때마다 자동으로 \u003Ccode>fmt\u003C/code>, \u003Ccode>lint\u003C/code>, \u003Ccode>vet\u003C/code>을 실행해주기 때문에 엄청 편리하다.\u003C/p>\n\u003Cbr>\u003Cbr>\n\u003Ch2 id=\"references\">\u003Ca aria-hidden=\"true\" tabindex=\"-1\" href=\"#references\">\u003Cspan class=\"icon icon-link\">\u003C/span>\u003C/a>References\u003C/h2>\n\u003Chr>\n\u003Ccenter>\u003Cp>\u003Ca href=\"https://learning.oreilly.com/library/view/learning-go/9781492077206/\" rel=\"nofollow\">\u003Cimg src=\"https://learning.oreilly.com/covers/urn:orm:book:9781492077206/400w/\" alt=\"Learning Go Book Cover\">\u003C/a> \u003Cbr>\n\u003Ca href=\"https://learning.oreilly.com/library/view/learning-go/9781492077206/\" rel=\"nofollow\">Jon Bodner, 『Learning Go』, O’Reilly Media, Inc.\u003C/a>\u003C/p>\u003C/center>\n\u003Cbr>\u003Cbr>",{"title":3,"date":4,"excerpt":5,"categories":6,"coverImage":8,"coverWidth":9,"coverHeight":10,"indexed":11,"slug":12},"개발환경설정","2022-07-19T00:00:00.000Z","Setting up Golang development environment",[7],"Golang","/post_img/Golang_basics/cover.png",16,9,true,"Go/Golang Basics/GO1"],"uses":{"params":["post"]}}]}
