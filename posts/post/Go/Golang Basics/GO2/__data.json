{"type":"data","nodes":[{"type":"data","data":[null],"uses":{}},{"type":"data","data":[{"PostContent":1,"meta":2},"\u003Cbr>\n\u003Cp>본 글은 Golang을 공부하며 주요 내용이라 생각되는 것들을 기록해둔 자료이며, Ubuntu 20.04 LTS 기준으로 작성되었습니다.\u003C/p>\n\u003Cbr>\u003Cbr>\n\u003Ch2 id=\"variables-and-constants\">\u003Ca aria-hidden=\"true\" tabindex=\"-1\" href=\"#variables-and-constants\">\u003Cspan class=\"icon icon-link\">\u003C/span>\u003C/a>Variables and Constants\u003C/h2>\n\u003Chr>\n\u003Cbr>\n\u003Ch3 id=\"variables\">\u003Ca aria-hidden=\"true\" tabindex=\"-1\" href=\"#variables\">\u003Cspan class=\"icon icon-link\">\u003C/span>\u003C/a>Variables\u003C/h3>\n\u003Cp>Go에서 변수는 아래와 같이 선언 및 초기화할 수 있다. 특이사항은 다음과 같다.\u003C/p>\n\u003Col>\u003Cli>C/C++과는 달리, 타입이 변수명 뒤에 옴\u003C/li>\n\u003Cli>변수를 생성하고 값을 할당하지 않는 C나 C++와는 달리, 변수를 생성하면 기본적으로 할당되는 값인 \u003Cspan style=\"background-color: #FFF5B1\">zero value\u003C/span>가 존재함\u003C/li>\n\u003Cli>변수가 선언만 되고 사용되지 않으면 에러가 발생함\u003C/li>\n\u003Cli>권장되지는 않지만 전역변수도 됨\u003C/li>\u003C/ol>\n\u003Cpre class=\"language-go\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-go\">\u003Cspan class=\"token keyword\">package\u003C/span> main\n\n\u003Cspan class=\"token keyword\">import\u003C/span> \u003Cspan class=\"token string\">\"fmt\"\u003C/span>\n\n\u003Cspan class=\"token keyword\">func\u003C/span> \u003Cspan class=\"token function\">main\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token punctuation\">&#123;\u003C/span>\n\t\u003Cspan class=\"token keyword\">var\u003C/span> a \u003Cspan class=\"token builtin\">int\u003C/span> \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token number\">1\u003C/span>         \u003Cspan class=\"token comment\">// variable declaration\u003C/span>\n\t\u003Cspan class=\"token keyword\">var\u003C/span> b \u003Cspan class=\"token builtin\">string\u003C/span>          \u003Cspan class=\"token comment\">// declare string variable. it's value would be zero value of string (\"\")\u003C/span>\n\t\u003Cspan class=\"token keyword\">var\u003C/span> c\u003Cspan class=\"token punctuation\">,\u003C/span> d \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token number\">123\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token string\">\"456\"\u003C/span> \u003Cspan class=\"token comment\">// multiple declaration. their type would be int, string\u003C/span>\n\t\u003Cspan class=\"token keyword\">var\u003C/span> \u003Cspan class=\"token punctuation\">(\u003C/span>                 \u003Cspan class=\"token comment\">// inside parentheses, variables can be declared line by line\u003C/span>\n\t\te    \u003Cspan class=\"token builtin\">int\u003C/span>            \u003Cspan class=\"token comment\">//\u003C/span>\n\t\tf    \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token number\">20\u003C/span>           \u003Cspan class=\"token comment\">// it's type would be int\u003C/span>\n\t\tg\u003Cspan class=\"token punctuation\">,\u003C/span> h \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token number\">1.23\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token string\">\"4.56\"\u003C/span> \u003Cspan class=\"token comment\">// multiple declaration, only specified their values\u003C/span>\n\t\ti\u003Cspan class=\"token punctuation\">,\u003C/span> j \u003Cspan class=\"token builtin\">string\u003C/span>         \u003Cspan class=\"token comment\">// only specified their types\u003C/span>\n\t\u003Cspan class=\"token punctuation\">)\u003C/span>\n\t\u003Cspan class=\"token keyword\">var\u003C/span> 한글개꿀ㅋㅋ \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token number\">1\u003C/span> \u003Cspan class=\"token comment\">// 한글도 되긴 하는데 이러지 맙시다\u003C/span>\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre>\n\u003Cbr>\n\u003Cp>\u003Ccode>:=\u003C/code> 연산자를 활용하여 변수를 선언할 수도 있다. 변수의 타입은 초기화되는 값에 따라 결정된다. c++의 \u003Ccode>auto\u003C/code> 키워드와 비슷한 듯 하다.\u003C/p>\n\u003Cpre class=\"language-go\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-go\">\tk \u003Cspan class=\"token operator\">:=\u003C/span> \u003Cspan class=\"token number\">10\u003C/span>        \u003Cspan class=\"token comment\">// variable declaration by := operator\u003C/span>\n\tk\u003Cspan class=\"token punctuation\">,\u003C/span> l \u003Cspan class=\"token operator\">:=\u003C/span> \u003Cspan class=\"token number\">20\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token number\">20\u003C/span> \u003Cspan class=\"token comment\">// multiple declaration\u003C/span>\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre>\n\u003Cp>\u003Ccode>:=\u003C/code> 연산자는 편리하지만 주의해서 사용해야 한다. \u003Cspan style=\"background-color: #FFF5B1\">Shadowing\u003C/span>이 발생할 수도 있기 때문이다.\u003C/p>\n\u003Cblockquote>\u003Ch3 id=\"shadowing이란\">\u003Ca aria-hidden=\"true\" tabindex=\"-1\" href=\"#shadowing이란\">\u003Cspan class=\"icon icon-link\">\u003C/span>\u003C/a>Shadowing이란?\u003C/h3>\n\u003Cp>\u003Ccode>var\u003C/code> 키워드는 동일한 이름을 가진 변수를 선언할 때 에러가 발생하는데 반해,\n위 예제에서는 \u003Ccode>k\u003C/code>가 선언되고, 그 아래 줄에서 \u003Ccode>l\u003C/code>과 함께 \u003Ccode>k\u003C/code>가 다시 선언된 것을 확인할 수 있다(\u003Ccode>k\u003C/code>만 다시 선언하면 에러가 발생한다).\n이 경우 해당 Block이 끝날 때까지, 앞서 선언한 \u003Ccode>k\u003C/code>의 값인 10에 접근할 수 없게 된다.\u003C/p>\n\u003Cp>이런 현상을 Shadowing이라고 하며, \u003Ccode>:=\u003C/code> 연산자를 사용할 때 주의해야 하는 이유이다.\n특히 함수의 파라미터나, \u003Ccode>fmt\u003C/code>같은 패키지 이름이나, 심지어는 \u003Ccode>nil\u003C/code> 또는 \u003Ccode>false\u003C/code> 같은 리터럴들도 Shadowing할 수 있다.\n\u003Ccode>var\u003C/code> 키워드는 함수의 타입을 명시해주는 효과도 있고 Shadowing의 염려가 없으므로 \u003Ccode>var\u003C/code>가 조금 더 안전한 선택지이다.\n반면 \u003Ccode>if\u003C/code>, \u003Ccode>switch\u003C/code>, \u003Ccode>for\u003C/code>문이나 에러 핸들링 등에서는 \u003Ccode>:=\u003C/code>을 주로 사용한다.\u003C/p>\u003C/blockquote>\n\u003Cbr>\n\u003Cp>변수가 선언만 되고 사용되지 않으면 에러가 발생하니, \u003Ccode>fmt.Println()\u003C/code> 함수를 활용하여 모두 출력해주자.\u003C/p>\n\u003Cpre class=\"language-go\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-go\">\tfmt\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">Println\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>a\u003Cspan class=\"token punctuation\">,\u003C/span> b\u003Cspan class=\"token punctuation\">,\u003C/span> c\u003Cspan class=\"token punctuation\">,\u003C/span> d\u003Cspan class=\"token punctuation\">,\u003C/span> e\u003Cspan class=\"token punctuation\">,\u003C/span> f\u003Cspan class=\"token punctuation\">,\u003C/span> g\u003Cspan class=\"token punctuation\">,\u003C/span> h\u003Cspan class=\"token punctuation\">,\u003C/span> i\u003Cspan class=\"token punctuation\">,\u003C/span> j\u003Cspan class=\"token punctuation\">,\u003C/span> k\u003Cspan class=\"token punctuation\">,\u003C/span> l\u003Cspan class=\"token punctuation\">)\u003C/span>\n\tfmt\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">Println\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>asd\u003Cspan class=\"token punctuation\">)\u003C/span>\n\tfmt\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">Println\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>한글개꿀ㅋㅋ\u003Cspan class=\"token punctuation\">)\u003C/span>\n\u003Cspan class=\"token punctuation\">&#125;\u003C/span>\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre>\n\u003Cbr>\u003Cbr>\n\u003Ch3 id=\"constants\">\u003Ca aria-hidden=\"true\" tabindex=\"-1\" href=\"#constants\">\u003Cspan class=\"icon icon-link\">\u003C/span>\u003C/a>Constants\u003C/h3>\n\u003Cp>상수의 선언은 변수와 유사하다. \u003Ccode>const\u003C/code> 키워드를 사용한다\u003C/p>\n\u003Cpre class=\"language-go\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-go\">\u003Cspan class=\"token keyword\">package\u003C/span> main\n\n\u003Cspan class=\"token keyword\">import\u003C/span> \u003Cspan class=\"token string\">\"fmt\"\u003C/span>\n\n\u003Cspan class=\"token keyword\">func\u003C/span> \u003Cspan class=\"token function\">main\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token punctuation\">&#123;\u003C/span>\n\t\u003Cspan class=\"token keyword\">const\u003C/span> a \u003Cspan class=\"token builtin\">int\u003C/span> \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token number\">1\u003C/span>         \u003Cspan class=\"token comment\">// typed\u003C/span>\n\t\u003Cspan class=\"token keyword\">const\u003C/span> b\u003Cspan class=\"token punctuation\">,\u003C/span> c \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token number\">123\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token string\">\"456\"\u003C/span> \u003Cspan class=\"token comment\">// untyped, multiple declaration\u003C/span>\n\t\u003Cspan class=\"token keyword\">const\u003C/span> \u003Cspan class=\"token punctuation\">(\u003C/span>                 \u003Cspan class=\"token comment\">// decalaration constants using parentheses\u003C/span>\n\t\td    \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token number\">20\u003C/span>           \u003Cspan class=\"token comment\">// inside parentheses, constants can be declared line by line\u003C/span>\n\t\te\u003Cspan class=\"token punctuation\">,\u003C/span> f \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token number\">1.23\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token string\">\"4.56\"\u003C/span> \u003Cspan class=\"token comment\">// multiple decalaration\u003C/span>\n\t\u003Cspan class=\"token punctuation\">)\u003C/span>\n\n\tfmt\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">Println\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>a\u003Cspan class=\"token punctuation\">,\u003C/span> b\u003Cspan class=\"token punctuation\">,\u003C/span> c\u003Cspan class=\"token punctuation\">,\u003C/span> d\u003Cspan class=\"token punctuation\">,\u003C/span> e\u003Cspan class=\"token punctuation\">,\u003C/span> f\u003Cspan class=\"token punctuation\">)\u003C/span>\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre>\n\u003Cbr>\n\u003Cp>상수로 선언된 값을 변수에 할당할 때, 타입이 다르면 에러가 발생한다.\u003C/p>\n\u003Cpre class=\"language-go\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-go\">\t\u003Cspan class=\"token keyword\">var\u003C/span> i \u003Cspan class=\"token builtin\">int\u003C/span> \u003Cspan class=\"token operator\">=\u003C/span> a \u003Cspan class=\"token comment\">// constants can be value of variables when their types are same\u003C/span>\n\t\u003Cspan class=\"token comment\">// var f float64 = a // if types are different, it occurs error\u003C/span>\n\tfmt\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">Println\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>i\u003Cspan class=\"token punctuation\">)\u003C/span>\n\u003Cspan class=\"token punctuation\">&#125;\u003C/span>\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre>\n\u003Cbr>\u003Cbr>\n\u003Ch2 id=\"primitive-types\">\u003Ca aria-hidden=\"true\" tabindex=\"-1\" href=\"#primitive-types\">\u003Cspan class=\"icon icon-link\">\u003C/span>\u003C/a>Primitive Types\u003C/h2>\n\u003Chr>\n\u003Cp>Go의 타입들에는 아래와 같은 특징이 존재한다.\u003C/p>\n\u003Cbr>\u003Cbr>\n\u003Ch3 id=\"bool\">\u003Ca aria-hidden=\"true\" tabindex=\"-1\" href=\"#bool\">\u003Cspan class=\"icon icon-link\">\u003C/span>\u003C/a>bool\u003C/h3>\n\u003Cp>bool은 다른 언어와 크게 다르지 않다. Zero value는 \u003Ccode>false\u003C/code>이다.\u003C/p>\n\u003Cpre class=\"language-go\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-go\">\u003Cspan class=\"token keyword\">var\u003C/span> flag \u003Cspan class=\"token builtin\">bool\u003C/span> \u003Cspan class=\"token comment\">// initial value is false\u003C/span>\n\u003Cspan class=\"token keyword\">var\u003C/span> isAwesome \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token boolean\">true\u003C/span>\nfmt\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">Println\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>flag\u003Cspan class=\"token punctuation\">,\u003C/span> isAwesome\u003Cspan class=\"token punctuation\">)\u003C/span>\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre>\n\u003Cbr>\u003Cbr>\n\u003Ch3 id=\"int\">\u003Ca aria-hidden=\"true\" tabindex=\"-1\" href=\"#int\">\u003Cspan class=\"icon icon-link\">\u003C/span>\u003C/a>int\u003C/h3>\n\u003Cp>int는 C/C++와 유사하다. Zero value는 0이며, signed와 unsigned로 구분된다.\n또한 8bit, 16bit, 32bit, 64bit중 변수의 크기를 결정할 수 있으며, (u)int 뒤에 크기를 붙임으로써 나타낸다.\u003C/p>\n\u003Cpre class=\"language-go\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-go\">\u003Cspan class=\"token keyword\">var\u003C/span> i8 \u003Cspan class=\"token builtin\">int8\u003C/span> \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token operator\">-\u003C/span>\u003Cspan class=\"token number\">128\u003C/span>                  \u003Cspan class=\"token comment\">// 8-bit signed integer\u003C/span>\n\u003Cspan class=\"token keyword\">var\u003C/span> i64 \u003Cspan class=\"token builtin\">int64\u003C/span> \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token number\">9223372036854775807\u003C/span> \u003Cspan class=\"token comment\">// 64-bit signed integer\u003C/span>\n\u003Cspan class=\"token keyword\">var\u003C/span> u32 \u003Cspan class=\"token builtin\">uint32\u003C/span> \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token number\">4294967295\u003C/span>         \u003Cspan class=\"token comment\">// 32-bit unsigned integer\u003C/span>\nfmt\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">Println\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>i8\u003Cspan class=\"token punctuation\">,\u003C/span> i64\u003Cspan class=\"token punctuation\">,\u003C/span> u32\u003Cspan class=\"token punctuation\">)\u003C/span>\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre>\n\u003Cbr>\n\u003Cp>이 중 \u003Ccode>byte\u003C/code>라는 자료형은 \u003Ccode>uint8\u003C/code>과 동일한 것으로 처리된다.\u003C/p>\n\u003Cpre class=\"language-go\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-go\">\u003Cspan class=\"token keyword\">var\u003C/span> b \u003Cspan class=\"token builtin\">byte\u003C/span> \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token number\">123\u003C/span> \u003Cspan class=\"token comment\">// byte: 8-bit unsigned integer\u003C/span>\n\u003Cspan class=\"token keyword\">var\u003C/span> uint8_ \u003Cspan class=\"token builtin\">uint8\u003C/span> \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token number\">234\u003C/span>\nfmt\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">Println\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>b \u003Cspan class=\"token operator\">==\u003C/span> uint8_\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token comment\">// doesn't occur error\u003C/span>\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre>\n\u003Cbr>\n\u003Cp>크기를 붙이지 않은 \u003Ccode>int\u003C/code>라는 자료형도 존재하는데, 32bit와 64bit중에서 정해진다. 이는 어떤 하드웨어를 사용하는지에 따라, 실행할때 결정된다.\u003Cbr>\n다만 컴퓨터가 64bit를 사용하는 경우라고 해도, int와 int64끼리의 연산은 에러가 발생한다. int는 플랫폼마다, 하드웨어마다 실행시 크기가 다르기 때문이다.\u003C/p>\n\u003Cpre class=\"language-go\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-go\">\u003Cspan class=\"token keyword\">var\u003C/span> i \u003Cspan class=\"token builtin\">int\u003C/span> \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token number\">9223372036854775807\u003C/span> \u003Cspan class=\"token comment\">// signed int. its size(32 or 64bits) is decided at compile time, determined by its hardware\u003C/span>\n\u003Cspan class=\"token keyword\">var\u003C/span> ui \u003Cspan class=\"token builtin\">uint\u003C/span> \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token number\">0\u003C/span>                 \u003Cspan class=\"token comment\">// unsigned int\u003C/span>\n\u003Cspan class=\"token comment\">// fmt.Println(i == i64) occurs error\u003C/span>\nfmt\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">Println\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>i\u003Cspan class=\"token punctuation\">,\u003C/span> ui\u003Cspan class=\"token punctuation\">)\u003C/span>\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre>\n\u003Cbr>\n\u003Cp>일반적인 경우 \u003Ccode>(u)int\u003C/code> 타입을 선택하는 것이 권장되지만,\n바이너리 파일 처리나 네트워크 통신 등, 정수 자료형의 특정한 크기를 사용해야 하는 경우라면 \u003Ccode>(u)int8\u003C/code>~\u003Ccode>(u)int64\u003C/code> 에서 타입을 선택한다.\n또는 라이브러리 함수를 작성하는 경우, 함수의 파라미터나 변수로 \u003Ccode>(u)int64\u003C/code>를 선택하는 것이 좋다고 한다.\u003C/p>\n\u003Cbr>\n\u003Cp>정수를 표기할 때 언더바(_)로 구분할 수 있다. 또한 앞에 \u003Ccode>0x\u003C/code>, \u003Ccode>0o\u003C/code>, \u003Ccode>0b\u003C/code>를 붙여 각각 16, 8, 2진수로 표현할 수 있다.\u003C/p>\n\u003Cpre class=\"language-go\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-go\">fmt\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">Println\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token number\">1_2_3_4\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token number\">123_456_789_123123_456\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token comment\">// numbers can distinguished by underbar(_)\u003C/span>\nfmt\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">Println\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token number\">0x1234\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token number\">0o1234\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token number\">0b1101\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>          \u003Cspan class=\"token comment\">// hexadecimal, octal, binary representation\u003C/span>\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre>\n\u003Cbr>\u003Cbr>\n\u003Ch3 id=\"float\">\u003Ca aria-hidden=\"true\" tabindex=\"-1\" href=\"#float\">\u003Cspan class=\"icon icon-link\">\u003C/span>\u003C/a>float\u003C/h3>\n\u003Cp>실수를 표현하는 타입은 32bit인 \u003Ccode>float32\u003C/code>와 64bit인 \u003Ccode>float64\u003C/code> 두 가지로 구분된다. C/C++와 유사하게 부동소숫점(Floating point) 방식을 사용한다.\u003C/p>\n\u003Cpre class=\"language-go\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-go\">\u003Cspan class=\"token keyword\">var\u003C/span> f32 \u003Cspan class=\"token builtin\">float32\u003C/span> \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token number\">0.5\u003C/span>   \u003Cspan class=\"token comment\">// f32 : 32-bits floating point number\u003C/span>\n\u003Cspan class=\"token keyword\">var\u003C/span> f64 \u003Cspan class=\"token builtin\">float32\u003C/span> \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token number\">0.524\u003C/span> \u003Cspan class=\"token comment\">// f64 : 64-bits floating point number\u003C/span>\nfmt\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">Println\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>f32\u003Cspan class=\"token punctuation\">,\u003C/span> f64\u003Cspan class=\"token punctuation\">)\u003C/span>\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre>\n\u003Cbr>\n\u003Cp>또한 복소수를 표현하는 \u003Ccode>complex\u003C/code> 타입도 존재한다. 다만 복소수가 필요한 수학, 물리 관련된 코드를 굳이 Go를..?\u003C/p>\n\u003Cpre class=\"language-go\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-go\">\u003Cspan class=\"token keyword\">var\u003C/span> c64 \u003Cspan class=\"token builtin\">complex64\u003C/span> \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token function\">complex\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token number\">2\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token number\">3\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token comment\">// c64 : 복소수(float32 + float32)\u003C/span>\nc128 \u003Cspan class=\"token operator\">:=\u003C/span> \u003Cspan class=\"token function\">complex\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token number\">3\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token number\">4\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>             \u003Cspan class=\"token comment\">// c128 : 복소수(float64 + float64)\u003C/span>\nfmt\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">Println\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>c64\u003Cspan class=\"token punctuation\">,\u003C/span> c128\u003Cspan class=\"token punctuation\">)\u003C/span>\nfmt\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">Println\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token function\">real\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>c128\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>      \u003Cspan class=\"token comment\">// 실수부\u003C/span>\nfmt\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">Println\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token function\">imag\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>c128\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>      \u003Cspan class=\"token comment\">// 허수부\u003C/span>\nfmt\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">Println\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>cmplx\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">Abs\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>c128\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token comment\">// 절댓값..?\u003C/span>\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre>\n\u003Cbr>\u003Cbr>\n\u003Ch3 id=\"string\">\u003Ca aria-hidden=\"true\" tabindex=\"-1\" href=\"#string\">\u003Cspan class=\"icon icon-link\">\u003C/span>\u003C/a>string\u003C/h3>\n\u003Cp>문자열을 표현하는 \u003Ccode>string\u003C/code> 타입이 존재한다. 아래 코드는 기본적인 선언과 연산자들이다. Zero value는 \u003Ccode>&quot;&quot;\u003C/code>이다. 또한 Go의 기본 문자열 인코딩은 UTF-8이다.\u003C/p>\n\u003Cpre class=\"language-go\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-go\">\u003Cspan class=\"token keyword\">var\u003C/span> s1 \u003Cspan class=\"token builtin\">string\u003C/span> \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token string\">\"qwe\"\u003C/span>\n\u003Cspan class=\"token keyword\">var\u003C/span> s2 \u003Cspan class=\"token builtin\">string\u003C/span> \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token string\">\"asd\"\u003C/span>\n\nfmt\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">Println\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>s1 \u003Cspan class=\"token operator\">==\u003C/span> s2\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token comment\">// comparison operators between string\u003C/span>\nfmt\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">Println\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>s1 \u003Cspan class=\"token operator\">>\u003C/span> s2\u003Cspan class=\"token punctuation\">)\u003C/span>\nfmt\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">Println\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>s1 \u003Cspan class=\"token operator\">+\u003C/span> s2\u003Cspan class=\"token punctuation\">)\u003C/span>\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre>\n\u003Cbr>\n\u003Cp>\u003Ccode>string\u003C/code>을 구성하는 각 문자들은 \u003Ccode>rune\u003C/code> 타입이다. \u003Ccode>byte\u003C/code>가 \u003Ccode>uint8\u003C/code>과 동의어인 것처럼, \u003Ccode>rune\u003C/code>은 \u003Ccode>int32\u003C/code>와 동의어이다.\u003C/p>\n\u003Cpre class=\"language-go\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-go\">\u003Cspan class=\"token keyword\">var\u003C/span> character \u003Cspan class=\"token builtin\">rune\u003C/span> \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token char\">'a'\u003C/span> \u003Cspan class=\"token comment\">// rune represents a single character\u003C/span>\nfmt\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">Println\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>character\u003Cspan class=\"token punctuation\">)\u003C/span>\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre>\n\u003Cbr>\u003Cbr>\n\u003Ch3 id=\"type-conversion\">\u003Ca aria-hidden=\"true\" tabindex=\"-1\" href=\"#type-conversion\">\u003Cspan class=\"icon icon-link\">\u003C/span>\u003C/a>Type Conversion\u003C/h3>\n\u003Cp>Go에서는 서로 다른 타입들간의 변환이 가능하다. 함수처럼 타입명에 괄호를 붙이면 된다. 이를테면 \u003Ccode>int16\u003C/code>에서 \u003Ccode>int32\u003C/code>로의 변환부터, \u003Ccode>int\u003C/code>와 \u003Ccode>float64\u003C/code> 사이의 변환 등도 가능하다\u003C/p>\n\u003Cpre class=\"language-go\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-go\">\u003Cspan class=\"token comment\">// type conversion between int and float\u003C/span>\n\u003Cspan class=\"token keyword\">var\u003C/span> x \u003Cspan class=\"token builtin\">int\u003C/span> \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token number\">10\u003C/span>\n\u003Cspan class=\"token keyword\">var\u003C/span> y \u003Cspan class=\"token builtin\">float64\u003C/span> \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token number\">30.2\u003C/span>\n\u003Cspan class=\"token keyword\">var\u003C/span> z \u003Cspan class=\"token builtin\">float64\u003C/span> \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token function\">float64\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>x\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token operator\">+\u003C/span> y\n\u003Cspan class=\"token keyword\">var\u003C/span> d \u003Cspan class=\"token builtin\">int\u003C/span> \u003Cspan class=\"token operator\">=\u003C/span> x \u003Cspan class=\"token operator\">+\u003C/span> \u003Cspan class=\"token function\">int\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>y\u003Cspan class=\"token punctuation\">)\u003C/span>\nfmt\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">Println\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>z\u003Cspan class=\"token punctuation\">,\u003C/span> d\u003Cspan class=\"token punctuation\">)\u003C/span>\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre>\n\u003Cbr>\u003Cbr>\n\u003Ch2 id=\"references\">\u003Ca aria-hidden=\"true\" tabindex=\"-1\" href=\"#references\">\u003Cspan class=\"icon icon-link\">\u003C/span>\u003C/a>References\u003C/h2>\n\u003Chr>\n\u003Ccenter>\u003Cp>\u003Ca href=\"https://learning.oreilly.com/library/view/learning-go/9781492077206/\" rel=\"nofollow\">\u003Cimg src=\"https://learning.oreilly.com/covers/urn:orm:book:9781492077206/400w/\" alt=\"Learning Go Book Cover\">\u003C/a> \u003Cbr>\n\u003Ca href=\"https://learning.oreilly.com/library/view/learning-go/9781492077206/\" rel=\"nofollow\">Jon Bodner, 『Learning Go』, O’Reilly Media, Inc.\u003C/a>\u003C/p>\u003C/center>\n\u003Cbr>\u003Cbr>",{"title":3,"date":4,"excerpt":5,"categories":6,"coverImage":8,"coverWidth":9,"coverHeight":10,"indexed":11,"exposed":11,"slug":12},"변수와 원시 타입","2022-07-21T00:00:00.000Z","Primitive Types and Variable Declaration",[7],"Golang","/post_img/Go/Golang_basics/cover.png",16,9,true,"Go/Golang Basics/GO2"],"uses":{"params":["post"]}}]}
