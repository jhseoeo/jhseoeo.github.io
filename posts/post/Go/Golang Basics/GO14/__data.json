{"type":"data","nodes":[null,{"type":"data","data":[{"PostContent":1,"meta":2},"\u003Cbr\u003E\n\u003Cp\u003E본 글은 Golang을 공부하며 주요 내용이라 생각되는 것들을 기록해둔 자료이며, Ubuntu 22.04 LTS 기준으로 작성되었습니다.\u003C\u002Fp\u003E\n\u003Cbr\u003E\u003Cbr\u003E\n\u003Ch2 id=\"introduction\"\u003E\u003Ca aria-hidden=\"true\" tabindex=\"-1\" href=\"#introduction\"\u003E\u003Cspan class=\"icon icon-link\"\u003E\u003C\u002Fspan\u003E\u003C\u002Fa\u003EIntroduction\u003C\u002Fh2\u003E\n\u003Chr\u003E\n\u003Cp\u003EGo는 안전한 언어이다.\n정적 타입의 변수를 통해 어떤 데이터를 사용하고 있는지 명확히 하며, 메모리를 관리하기 위해 가비지 컬렉터를 사용한다.\n포인터를 사용하긴 하지만 C나 C++보다는 제한적인 범위에서만 사용할 수 있다.\n따라서 고 런타임은 대부분 안전하게 실행된다고 할 수 있다.\u003C\u002Fp\u003E\n\u003Cp\u003E하지만 타입을 명확히 정의할 수 없는 데이터를 다뤄야 하는 경우가 있을 수 있다.\n이를테면 타입을 컴파일 타임에 결정할 수 없는 데이터가 있을 수 있다. 이 경우 \u003Ccode\u003Ereflect\u003C\u002Fcode\u003E 패키지를 통해 데이터와 상호작용하거나 데이터를 구성한다.\n또는 데이터 타입의 메모리 레이아웃을 사용해야 하는 경우, \u003Ccode\u003Eunsafe\u003C\u002Fcode\u003E 패키지를 사용한다.\n그리고 C로 작성된 라이브러리의 기능을 사용해야 하는 경우, \u003Ccode\u003Ecgo\u003C\u002Fcode\u003E 패키지를 통해 C 코드를 호출할 수도 있다.\u003C\u002Fp\u003E\n\u003Cp\u003E처음 Go언어를 배우는 사람들을 위한 책에서 나올 내용 치고는 다소 고난도의 개념인지라, 이러한 내용이 나오는 것에 대해 다소 의아할 수도 있다.\n하지만 다음과 같은 두 가지 이유로 이 내용을 다룬다.\u003C\u002Fp\u003E\n\u003Col\u003E\u003Cli\u003E개발자들은 코드에서 문제를 발견하면 솔루션을 검색해보고 제대로 이해하지도 못한 채 코드에 복붙하는 경우가 많다. 이로 인해 여러 문제가 생길 수도 있다.\n그러니 이러한 고급 기술에 대해 조금이라도 이해해두는 편이 문제를 일으킬 여지를 약간이나마 줄일 수 있을 것이다.\u003C\u002Fli\u003E\n\u003Cli\u003E소개하는 내용이 일반 Go 코드에서는 할 수 없는 것들이라, 내용을 접하다 보면 흥미로움을 느낄 수도 있기 때문이다!\u003C\u002Fli\u003E\u003C\u002Fol\u003E\n\u003Cbr\u003E\u003Cbr\u003E\n\u003Ch2 id=\"reflection\"\u003E\u003Ca aria-hidden=\"true\" tabindex=\"-1\" href=\"#reflection\"\u003E\u003Cspan class=\"icon icon-link\"\u003E\u003C\u002Fspan\u003E\u003C\u002Fa\u003EReflection\u003C\u002Fh2\u003E\n\u003Chr\u003E\n\u003Cp\u003EGo의 장점 중 하나는 정적 타입 언어라는 것이다. Go에서 타입 및 변수, 함수를 선언하는 것이 매우 간단하며, 프로그램에서 사용될 데이터의 구조를 나타내기 위해 타입을 사용한다.\n하지만 컴파일 타임에 정의되는 타입만으로 프로그램에서 사용될 데이터를 사용하기에는 부족할 때가 있다.\n이를테면 프로그램을 작성할 때 존재하지 않았던 데이터가 런타임에 변수에 할당될 수도 있다.\n가령, 파일에서 데이터를 읽어오거나 네트워크 요청을 변수에 저장하거나, 아니면 여러 타입에 대응되는 함수를 작성할 수도 있을 것이다.\u003C\u002Fp\u003E\n\u003Cp\u003E이러한 상황에서는 Reflection을 사용한다.\nReflection은 런타임에 타입을 확인할 수 있게 해주며, 런타임에 변수, 함수, 구조체를 검사하고, 수정하고, 생성하는 기능도 제공한다.\u003C\u002Fp\u003E\n\u003Cp\u003E이러한 Reflection의 기능이 언제 필요한 것인가에 대한 질문이 있을 수 있다.\n표준 라이브러리에서 Reflection이 어떻게 쓰이는지 알면 우리도 감을 잡을 수 있을 것이다.\u003C\u002Fp\u003E\n\u003Cul\u003E\u003Cli\u003E\u003Ccode\u003Edatabase\u002Fsql\u003C\u002Fcode\u003E 패키지에서는 데이터베이스에서 데이터를 읽거나 쓸 때 Reflection을 사용하여 레코드를 전송하고 읽어온 데이터를 반환함\u003C\u002Fli\u003E\n\u003Cli\u003EGo에 내장된 템플릿 작성 라이브러리인 \u003Ccode\u003Etext\u002Ftemplate\u003C\u002Fcode\u003E 및 \u003Ccode\u003Ehtml\u002Ftemplate\u003C\u002Fcode\u003E에서는 reflection을 사용하여 템플릿으로 전달되는 값을 처리함\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ccode\u003Efmt\u003C\u002Fcode\u003E 패키지의 \u003Ccode\u003Efmt.Println\u003C\u002Fcode\u003E 등 대부분의 출력 함수는 들어온 파라미터의 타입에 맞춰 알잘딱깔센하게 출력해줘야 하기 때문에, Reflection을 엄청 많이 사용한다고 함\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ccode\u003Esort\u003C\u002Fcode\u003E 패키지는 Reflection을 사용하여 다양한 타입의 슬라이스를 정렬하는 기능을 구현함\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ccode\u003Eencoding\u003C\u002Fcode\u003E 패키지에 정의된 다양한 데이터 타입과 함께, JSON이나 XML을 Marshaling 및 Unmarshaling할 때 Reflection이 사용됨. 구조체 tag는 Reflection를 통해 액세스되며, Reflection를 통해 구조체 필드를 읽고 씀.\u003C\u002Fli\u003E\u003C\u002Ful\u003E\n\u003Cp\u003E이러한 예시들은 한 가지 공통점을 공유한다. Go 프로그램으로 가져오거나 외부로 내보내는 데이터에 액세스하고 형식을 지정한다는 것이다. 다시 말해, Reflection은 Go 프로그램과 외부 세계의 경계선에서 사용되는 것이다.\u003C\u002Fp\u003E\n\u003Cbr\u003E\u003Cbr\u003E\n\u003Ch3 id=\"types-kinds\"\u003E\u003Ca aria-hidden=\"true\" tabindex=\"-1\" href=\"#types-kinds\"\u003E\u003Cspan class=\"icon icon-link\"\u003E\u003C\u002Fspan\u003E\u003C\u002Fa\u003ETypes, Kinds\u003C\u002Fh3\u003E\n\u003Cp\u003E이제 Reflection이 무엇을 하며 언제 필요한지 알았으니, 어떻게 쓰는 것인지 알아보려 한다.\n\u003Ccode\u003Ereflect\u003C\u002Fcode\u003E 패키지는 표준 라이브러리에 포함되어 있으며, Reflection을 위한 여러 타입들과 함수들이 구현되어 있다.\nReflection의 핵심 개념은 \u003Cem\u003Etypes\u003C\u002Fem\u003E, \u003Cem\u003Ekinds\u003C\u002Fem\u003E, \u003Cem\u003Evalues\u003C\u002Fem\u003E, 이렇게 세 가지이다.\u003C\u002Fp\u003E\n\u003Cp\u003E먼저 \u003Cem\u003Etypes\u003C\u002Fem\u003E에 대해 알아보자. Reflection에서 타입은 말 그대로 변수의 속성, 변수가 포함할 수 있는 항목 및 변수가 상호 작용할 수 있는 방법을 정의한다. Reflection을 쓰면 코드를 작성하여 타입을 쿼리할 수 있다.\u003C\u002Fp\u003E\n\u003Cbr\u003E\n\u003Cpre class=\"language-go\"\u003E\u003C!-- HTML_TAG_START --\u003E\u003Ccode class=\"language-go\"\u003E\u003Cspan class=\"token keyword\"\u003Efunc\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003Emain\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n\tx \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E1\u003C\u002Fspan\u003E\n\txt \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E reflect\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003ETypeOf\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Ex\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\tfmt\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EPrintln\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Ext\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EName\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\n\tf \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E Foo\u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\n\tft \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E reflect\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003ETypeOf\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Ef\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\tfmt\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EPrintln\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Eft\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EName\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\n\txpt \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E reflect\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003ETypeOf\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E&amp;\u003C\u002Fspan\u003Ex\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\tfmt\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EPrintln\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Expt\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EName\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\n\ttt \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E reflect\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003ETypeOf\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Eft\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\tfmt\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EPrintln\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Ett\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EName\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\n    tnt \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E reflect\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003ETypeOf\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Eft\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EName\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\tfmt\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EPrintln\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Etnt\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EName\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C!-- HTML_TAG_END --\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E위 구문의 실행 결과는 다음과 같다.\u003C\u002Fp\u003E\n\u003Cpre class=\"language-text\"\u003E\u003C!-- HTML_TAG_START --\u003E\u003Ccode class=\"language-text\"\u003Eint\nFoo\n\n\nstring\u003C\u002Fcode\u003E\u003C!-- HTML_TAG_END --\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E이처럼 \u003Ccode\u003Ereflect\u003C\u002Fcode\u003E 패키지의 \u003Ccode\u003ETypeOf()\u003C\u002Fcode\u003E 함수를 통해 변수의 타입을 확인할 수 있다.\n\u003Ccode\u003ETypeOf()\u003C\u002Fcode\u003E는 파라미터로 들어온 변수의 타입을 \u003Ccode\u003Ereflect.Type\u003C\u002Fcode\u003E라는 타입으로 나타낸다.\n\u003Ccode\u003Ereflect.Type\u003C\u002Fcode\u003E에는 변수의 타입에 관련된 여러 메소드가 존재하지만 다는 다루지 못하고 몇 개만 다뤄보고자 한다.\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Ccode\u003EName()\u003C\u002Fcode\u003E 메소드는 타입명을 문자열로 반환한다. 가장 마지막 출력 결과가 string임을 확인할 수 있다. 이처럼 \u003Ccode\u003EName()\u003C\u002Fcode\u003E은 int와 같은 원시 타입이나 위 예제의 \u003Ccode\u003EFoo\u003C\u002Fcode\u003E와 같은 구조체의 이름을 반환한다.\n그러나 slice나 포인터 등은 달리 이름이 없기 때문에 빈 문자열을 반환한다.\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Ccode\u003Ereflect.Type\u003C\u002Fcode\u003E의 \u003Ccode\u003EKind()\u003C\u002Fcode\u003E 메소드는 \u003Ccode\u003Ereflect.Kind\u003C\u002Fcode\u003E 타입의 값을 반환하며, \u003Ccode\u003Ereflect.Kind\u003C\u002Fcode\u003E는 해당 타입이 어떤 원시 타입으로 작성되었는지를 나타내는 상수값이다. 이를테면 slice, map, pointer, struct, interface, string, array, function, int 등, 어떠한 원시 타입인지 알려준다. \u003Ccode\u003Ereflect.Type\u003C\u002Fcode\u003E과 \u003Ccode\u003Ereflect.Kind\u003C\u002Fcode\u003E는 다소 헷갈릴 수 있는데, 만약 위 예제를 예로 든다면 \u003Ccode\u003EFoo\u003C\u002Fcode\u003E의 타입은 \u003Ccode\u003E&quot;Foo&quot;\u003C\u002Fcode\u003E가 될 것이고 종류는 \u003Ccode\u003Ereflect.Struct\u003C\u002Fcode\u003E가 될 것이다.\u003C\u002Fp\u003E\n\u003Cp\u003E종류는 매우 중요하다. Reflection을 사용할 때 유의해야 할 것이 있는데, \u003Ccode\u003Ereflect\u003C\u002Fcode\u003E 패키지는 개발자가 Reflection에 대해 잘 알고 있다고 가정한다. \u003Ccode\u003Ereflect.Type\u003C\u002Fcode\u003E 등 \u003Ccode\u003Ereflect\u003C\u002Fcode\u003E의 타입들에 정의된 일부 메소드는 특정 종류에서만 말이 된다.\u003C\u002Fp\u003E\n\u003Cp\u003E예를 들어 \u003Ccode\u003Ereflect.Type\u003C\u002Fcode\u003E의 \u003Ccode\u003ENumIn()\u003C\u002Fcode\u003E이라는 메소드가 있다.\n만약 \u003Ccode\u003Ereflect.Type\u003C\u002Fcode\u003E이 함수를 나타내고 있다면 \u003Ccode\u003ENumIn()\u003C\u002Fcode\u003E은 입력 파라미터의 수를 반환하지만, 함수를 나타내고 있지 않다면 프로그램은 panic에 빠질 것이다.\n따라서 종류를 사용하여 \u003Ccode\u003Ereflect.Type\u003C\u002Fcode\u003E이 어떤 메소드를 사용할 수 있고 어떤 메소드가 panic이 되는지 아는 게 중요하다.\u003C\u002Fp\u003E\n\u003Cp\u003E아래 예제는 위 예제에서 \u003Ccode\u003EKind()\u003C\u002Fcode\u003E 메소드를 통해 타입의 종류까지 출력하는 부분을 추가한 것이다.\u003C\u002Fp\u003E\n\u003Cpre class=\"language-go\"\u003E\u003C!-- HTML_TAG_START --\u003E\u003Ccode class=\"language-go\"\u003E\u003Cspan class=\"token keyword\"\u003Efunc\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003Emain\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n\tx \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E1\u003C\u002Fspan\u003E\n\txt \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E reflect\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003ETypeOf\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Ex\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\tfmt\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EPrintln\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Ext\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EName\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E xt\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EKind\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\n\tf \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E Foo\u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\n\tft \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E reflect\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003ETypeOf\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Ef\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\tfmt\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EPrintln\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Eft\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EName\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E ft\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EKind\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\n\txpt \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E reflect\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003ETypeOf\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E&amp;\u003C\u002Fspan\u003Ex\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\tfmt\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EPrintln\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Expt\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EName\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E xpt\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EKind\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\n\ttt \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E reflect\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003ETypeOf\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Eft\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\tfmt\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EPrintln\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Ett\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EName\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E tt\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EKind\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\n\ttnt \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E reflect\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003ETypeOf\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Eft\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EName\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\tfmt\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EPrintln\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Etnt\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EName\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E tt\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EKind\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C!-- HTML_TAG_END --\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E실행 결과는 다음과 같다.\u003C\u002Fp\u003E\n\u003Cpre class=\"language-text\"\u003E\u003C!-- HTML_TAG_START --\u003E\u003Ccode class=\"language-text\"\u003Eint int\nFoo struct\n ptr\n ptr\nstring ptr\u003C\u002Fcode\u003E\u003C!-- HTML_TAG_END --\u003E\u003C\u002Fpre\u003E\n\u003Cbr\u003E\n\u003Cp\u003E\u003Ccode\u003Ereflect.Type\u003C\u002Fcode\u003E의 또 다른 중요한 메소드는 \u003Ccode\u003EElem()\u003C\u002Fcode\u003E이다.\nGo에는 다른 타입을 참조하는 타입이 있으며, \u003Ccode\u003EElem()\u003C\u002Fcode\u003E은 참조되는 타입이 어떤 타입인지 밝혀낸다.\n이를테면 위 예시에서 종류가 \u003Ccode\u003Eptr\u003C\u002Fcode\u003E이었던 \u003Ccode\u003Expt\u003C\u002Fcode\u003E, \u003Ccode\u003Ett\u003C\u002Fcode\u003E 부분을 다음과 같이 수정할 것이다.\u003C\u002Fp\u003E\n\u003Cpre class=\"language-go\"\u003E\u003C!-- HTML_TAG_START --\u003E\u003Ccode class=\"language-go\"\u003E\txpt \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E reflect\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003ETypeOf\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E&amp;\u003C\u002Fspan\u003Ex\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\tfmt\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EPrintln\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Expt\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EName\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E xpt\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EKind\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E xpt\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EElem\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EName\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E xpt\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EElem\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EKind\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\n\ttt \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E reflect\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003ETypeOf\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Eft\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\tfmt\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EPrintln\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Ett\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EName\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E tt\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EKind\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E tt\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EElem\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EName\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E tt\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EElem\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EKind\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C!-- HTML_TAG_END --\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E실행 결과는 다음과 같다.\u003C\u002Fp\u003E\n\u003Cpre class=\"language-text\"\u003E\u003C!-- HTML_TAG_START --\u003E\u003Ccode class=\"language-text\"\u003E ptr int int\n ptr rtype struct\u003C\u002Fcode\u003E\u003C!-- HTML_TAG_END --\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E만약 \u003Ccode\u003Ereflect.Type\u003C\u002Fcode\u003E이 포인터를 나타내고 있다면 \u003Ccode\u003EElem()\u003C\u002Fcode\u003E은 그 포인터가 가리키는 타입의 \u003Ccode\u003Ereflect.Type\u003C\u002Fcode\u003E을 반환한다.\n위 예제로 미루어 보아 \u003Ccode\u003Expt\u003C\u002Fcode\u003E는 int를, \u003Ccode\u003Ett\u003C\u002Fcode\u003E는 \u003Ccode\u003Ertype\u003C\u002Fcode\u003E라는 이름의 구조체를 가리키는 포인터임을 알 수 있다.\n\u003Ccode\u003EElem()\u003C\u002Fcode\u003E 메소드는 \u003Ccode\u003Ereflect.Type\u003C\u002Fcode\u003E이 포인터뿐 아니라 slice, map, channel, array를 나타낼 때도 동작한다. 한편 \u003Ccode\u003Eint\u003C\u002Fcode\u003E 등의 원시 타입을 나타낸다면 panic이 발생한다.\u003C\u002Fp\u003E\n\u003Cbr\u003E\n\u003Cp\u003E\u003Ccode\u003Ereflect.Type\u003C\u002Fcode\u003E이 구조체를 나타내고 있다면 \u003Ccode\u003ENumField()\u003C\u002Fcode\u003E 메소드를 사용하여 구조체에 존재하는 필드의 수를 알 수 있다.\n또한 \u003Ccode\u003EField()\u003C\u002Fcode\u003E 메소드를 통해 필드에 접근할 수 있다. \u003Ccode\u003EField()\u003C\u002Fcode\u003E는 \u003Ccode\u003Ereflect.StructField\u003C\u002Fcode\u003E라는 타입으로 표현된 각 필드의 구조를 반환하며, \u003Ccode\u003Ereflect.StructField\u003C\u002Fcode\u003E는 필드의 이름, 순서, 타입, 구조체 태그 정보를 가지고 있다.\n다음의 예제를 살펴보자!\u003C\u002Fp\u003E\n\u003Cpre class=\"language-go\"\u003E\u003C!-- HTML_TAG_START --\u003E\u003Ccode class=\"language-go\"\u003E\u003Cspan class=\"token keyword\"\u003Etype\u003C\u002Fspan\u003E Foo \u003Cspan class=\"token keyword\"\u003Estruct\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n\tA \u003Cspan class=\"token builtin\"\u003Eint\u003C\u002Fspan\u003E    \u003Cspan class=\"token string\"\u003E&#96;myTag:\"value\"&#96;\u003C\u002Fspan\u003E\n\tB \u003Cspan class=\"token builtin\"\u003Estring\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E&#96;myTag:\"value2\"&#96;\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"token keyword\"\u003Efunc\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003Emain\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n\tf \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E Foo\u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\n\tft \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E reflect\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003ETypeOf\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Ef\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\n\t\u003Cspan class=\"token keyword\"\u003Efor\u003C\u002Fspan\u003E i \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E0\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E i \u003Cspan class=\"token operator\"\u003E&lt;\u003C\u002Fspan\u003E ft\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003ENumField\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E i\u003Cspan class=\"token operator\"\u003E++\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n\t\tcurField \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E ft\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EField\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Ei\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\t\tfmt\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EPrintln\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003EcurField\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003EName\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E curField\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003EType\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EName\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E curField\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003ETag\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EGet\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token string\"\u003E\"myTag\"\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C!-- HTML_TAG_END --\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E\u003Ccode\u003EFoo\u003C\u002Fcode\u003E 인스턴스인 f를 \u003Ccode\u003Ereflect.TypeOf()\u003C\u002Fcode\u003E의 파라미터로 보내서, 구조체를 표현하는 \u003Ccode\u003Ereflect.Type\u003C\u002Fcode\u003E을 \u003Ccode\u003Eft\u003C\u002Fcode\u003E에 저장한다.\n그 후 \u003Ccode\u003ENumField()\u003C\u002Fcode\u003E로 필드 수 만큼 이터레이션을 돌며 \u003Ccode\u003EField()\u003C\u002Fcode\u003E 메소드로 각 필드의 필드명, 타입, 태그 정보를 출력한다.\u003C\u002Fp\u003E\n\u003Cp\u003E실행 결과는 다음과 같다.\u003C\u002Fp\u003E\n\u003Cpre class=\"language-text\"\u003E\u003C!-- HTML_TAG_START --\u003E\u003Ccode class=\"language-text\"\u003EA int value\nB string value\u003C\u002Fcode\u003E\u003C!-- HTML_TAG_END --\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E마찬가지로, 구조체가 아닌 \u003Ccode\u003Ereflect.Type\u003C\u002Fcode\u003E에서 \u003Ccode\u003ENumField()\u003C\u002Fcode\u003E나 \u003Ccode\u003EField()\u003C\u002Fcode\u003E 메소드를 호출하면 panic이 발생한다.\u003C\u002Fp\u003E\n\u003Cbr\u003E\n\u003Cp\u003E\u003Ccode\u003Ereflect.Type\u003C\u002Fcode\u003E에는 다른 더 많은 메소드가 존재하지만, 거의 비슷한 패턴을 따른다. 추가적인 정보를 원한다면 Go의 \u003Ca href=\"https:\u002F\u002Fpkg.go.dev\u002Freflect#Type\" rel=\"nofollow\"\u003E표준 라이브러리 문서\u003C\u002Fa\u003E를 확인할 수 있다.\u003C\u002Fp\u003E\n\u003Cbr\u003E\u003Cbr\u003E\n\u003Ch3 id=\"values\"\u003E\u003Ca aria-hidden=\"true\" tabindex=\"-1\" href=\"#values\"\u003E\u003Cspan class=\"icon icon-link\"\u003E\u003C\u002Fspan\u003E\u003C\u002Fa\u003EValues\u003C\u002Fh3\u003E\n\u003Cp\u003EReflection을 통해 변수의 타입 뿐 아니라, 변수의 값도 읽어올 수 있다. \u003Ccode\u003Ereflect.ValueOf()\u003C\u002Fcode\u003E 함수를 호출하면 변수의 값을 나타내는 \u003Ccode\u003Ereflect.Value\u003C\u002Fcode\u003E 인스턴스를 생성할 수 있다.\u003C\u002Fp\u003E\n\u003Cpre class=\"language-go\"\u003E\u003C!-- HTML_TAG_START --\u003E\u003Ccode class=\"language-go\"\u003EvValue \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E reflect\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EValueOf\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Ev\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C!-- HTML_TAG_END --\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003EGo의 모든 변수는 타입이 존재하기 때문에 \u003Ccode\u003Ereflect.Value\u003C\u002Fcode\u003E에는 \u003Ccode\u003Ereflect.Type\u003C\u002Fcode\u003E을 반환하는 \u003Ccode\u003EType()\u003C\u002Fcode\u003E이란 메소드가 존재하며, \u003Ccode\u003Ereflect.Type\u003C\u002Fcode\u003E처럼 종류를 반환하는 \u003Ccode\u003EKind()\u003C\u002Fcode\u003E 메소드가 존재한다.\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Ccode\u003Ereflect.Type\u003C\u002Fcode\u003E이 변수의 타입에 대한 정보를 찾는 메소드를 가지고 있는 것처럼, \u003Ccode\u003Ereflect.Value\u003C\u002Fcode\u003E은 변수의 값에 대한 정보를 찾는 메소드를 가지고 있다. 마찬가지로 이들 모두를 다루진 않겠지만, 변수의 값을 얻고자 할 때 \u003Ccode\u003Ereflect.Value\u003C\u002Fcode\u003E를 어떻게 사용하는지 확인해볼 것이다.\u003C\u002Fp\u003E\n\u003Cbr\u003E\n\u003Cp\u003E먼저 \u003Ccode\u003Ereflect.Value\u003C\u002Fcode\u003E에서 값을 다시 읽어오는 방법을 살펴볼 것이다. \u003Ccode\u003Ereflect.Value\u003C\u002Fcode\u003E의 \u003Ccode\u003EInterface()\u003C\u002Fcode\u003E 메소드는 변수의 값을 빈 인터페이스로 반환한다.\u003C\u002Fp\u003E\n\u003Cpre class=\"language-go\"\u003E\u003C!-- HTML_TAG_START --\u003E\u003Ccode class=\"language-go\"\u003E\ts \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E]\u003C\u002Fspan\u003E\u003Cspan class=\"token builtin\"\u003Estring\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\u003Cspan class=\"token string\"\u003E\"a\"\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E\"b\"\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E\"c\"\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\n\tsv \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E reflect\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EValueOf\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Es\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\ts2 \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E sv\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EInterface\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E]\u003C\u002Fspan\u003E\u003Cspan class=\"token builtin\"\u003Estring\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\tfmt\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EPrintln\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Es2\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C!-- HTML_TAG_END --\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E\u003Ccode\u003EInterface()\u003C\u002Fcode\u003E는 모든 종류의 값을 포함하는 \u003Ccode\u003Ereflect.Value\u003C\u002Fcode\u003E 인스턴스에 대해 호출할 수 있다. 하지만 변수의 종류가 Bool, Complex, Int, Uint, Float, String과 같은 Built-in 원시 타입인 경우 사용할 수 있는 특수한 메소드가 있다.\n\u003Ccode\u003EBytes()\u003C\u002Fcode\u003E 메소드는 변수의 타입이 \u003Ccode\u003E[]bytes\u003C\u002Fcode\u003E이면 사용할 수 있다.\n\u003Ccode\u003Ereflect.Type\u003C\u002Fcode\u003E에서처럼, \u003Ccode\u003Ereflect.Value\u003C\u002Fcode\u003E에서 변수의 타입과 맞지 않는 메소드를 호출한다면 프로그램이 panic에 빠진다.\u003C\u002Fp\u003E\n\u003Cbr\u003E\n\u003Cp\u003EReflection을 통해 변수의 값을 설정할 수도 있지만, 다음과 같은 세 단계를 거쳐야 한다.\u003C\u002Fp\u003E\n\u003Cp\u003E첫 번째로, 변수의 포인터를 \u003Ccode\u003Ereflect.ValueOf()\u003C\u002Fcode\u003E의 파라미터로 보낸다. 이렇게 하면 포인터를 나타내는 \u003Ccode\u003Ereflect.Value\u003C\u002Fcode\u003E를 반환한다.\u003C\u002Fp\u003E\n\u003Cpre class=\"language-go\"\u003E\u003C!-- HTML_TAG_START --\u003E\u003Ccode class=\"language-go\"\u003E    i \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E10\u003C\u002Fspan\u003E\n\tiv \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E reflect\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EValueOf\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E&amp;\u003C\u002Fspan\u003Ei\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C!-- HTML_TAG_END --\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E다음으로, 설정해야 할 실제 값을 얻는다. \u003Ccode\u003Ereflect.Value\u003C\u002Fcode\u003E의 \u003Ccode\u003EElem()\u003C\u002Fcode\u003E 메소드를 사용하여, 포인터가 가리키는 값을 얻을 수 있다. \u003Ccode\u003Ereflect.Type\u003C\u002Fcode\u003E의 \u003Ccode\u003EElem()\u003C\u002Fcode\u003E처럼, \u003Ccode\u003Ereflect.Value\u003C\u002Fcode\u003E의 \u003Ccode\u003EElem()\u003C\u002Fcode\u003E은 포인터가 가리키는 값을 \u003Ccode\u003Ereflect.Value\u003C\u002Fcode\u003E 또는 인터페이스로 반환한다.\u003C\u002Fp\u003E\n\u003Cpre class=\"language-go\"\u003E\u003C!-- HTML_TAG_START --\u003E\u003Ccode class=\"language-go\"\u003Eivv \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E iv\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EElem\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C!-- HTML_TAG_END --\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E마지막으로 값을 수정한다.\n앞서 언급하였듯 값의 종류가 원시 타입일 때만 쓸 수 있는 특수한 메소드가 존재하며, 그것이 값을 설정하는 \u003Ccode\u003ESetBool\u003C\u002Fcode\u003E, \u003Ccode\u003ESetInt\u003C\u002Fcode\u003E, \u003Ccode\u003ESetFloat\u003C\u002Fcode\u003E, \u003Ccode\u003ESetString\u003C\u002Fcode\u003E 등이다.\n예제에서는 \u003Ccode\u003ESetInt()\u003C\u002Fcode\u003E를 사용하여 값을 수정하였으며, 이렇게 하면 i의 값이 변경된다.\u003C\u002Fp\u003E\n\u003Cpre class=\"language-go\"\u003E\u003C!-- HTML_TAG_START --\u003E\u003Ccode class=\"language-go\"\u003E    ivv\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003ESetInt\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token number\"\u003E15\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\tfmt\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EPrintln\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Ei\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C!-- HTML_TAG_END --\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E다른 모든 타입들에 대해서는 \u003Ccode\u003Ereflect.Value\u003C\u002Fcode\u003E를 파라미터로 받는 \u003Ccode\u003ESet()\u003C\u002Fcode\u003E을 호출해야 한다.\n값을 변경하는 게 아니라 이 값을 읽는 것이기 때문에, 설정하고자 하는 값은 포인터일 필요가 없다.\n또한 \u003Ccode\u003EInterface()\u003C\u002Fcode\u003E를 사용하여 원시 타입을 읽을 수 있듯, \u003Ccode\u003ESet()\u003C\u002Fcode\u003E을 호출하여 원시 타입을 설정할 수 있다.\u003C\u002Fp\u003E\n\u003Cp\u003E값을 변경하기 위해 \u003Ccode\u003Ereflect.ValueOf()\u003C\u002Fcode\u003E의 파라미터로 포인터를 전달해야 하는 이유는 Go의 다른 함수와 동일하다.\n다른 함수에서는 파라미터를 포인터 타입으로 지정하여 파라미터의 값을 변경할 수 있음을 나타내고, 변수의 값을 변경할 때 포인터에 dereference하여 값을 변경한다.\n즉, 다음의 두 함수는 동일한 과정을 거친다고 볼 수 있다!\u003C\u002Fp\u003E\n\u003Cpre class=\"language-go\"\u003E\u003C!-- HTML_TAG_START --\u003E\u003Ccode class=\"language-go\"\u003E\u003Cspan class=\"token keyword\"\u003Efunc\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003EchangeInt\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Ei \u003Cspan class=\"token operator\"\u003E*\u003C\u002Fspan\u003E\u003Cspan class=\"token builtin\"\u003Eint\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token operator\"\u003E*\u003C\u002Fspan\u003Ei \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E20\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"token keyword\"\u003Efunc\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003EchangeIntReflect\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Ei \u003Cspan class=\"token operator\"\u003E*\u003C\u002Fspan\u003E\u003Cspan class=\"token builtin\"\u003Eint\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n\treflect\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EValueOf\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Ei\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EElem\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003ESetInt\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token number\"\u003E20\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C!-- HTML_TAG_END --\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E만약 다음과 같이 포인터를 거치지 않는다면 변수의 값을 읽어오는 데에는 문제가 없겠지만, 값을 설정할 때 panic이 발생한다.\u003C\u002Fp\u003E\n\u003Cpre class=\"language-go\"\u003E\u003C!-- HTML_TAG_START --\u003E\u003Ccode class=\"language-go\"\u003E    i3 \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E10\u003C\u002Fspan\u003E\n\treflect\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EValueOf\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Ei3\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003ESetInt\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token number\"\u003E1\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token comment\"\u003E\u002F\u002F this calls will panic\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C!-- HTML_TAG_END --\u003E\u003C\u002Fpre\u003E\n\u003Cbr\u003E\u003Cbr\u003E\n\u003Ch3 id=\"making-new-values\"\u003E\u003Ca aria-hidden=\"true\" tabindex=\"-1\" href=\"#making-new-values\"\u003E\u003Cspan class=\"icon icon-link\"\u003E\u003C\u002Fspan\u003E\u003C\u002Fa\u003EMaking New Values\u003C\u002Fh3\u003E\n\u003Cp\u003EReflection을 사용하는 최선의 방법을 살펴보기에 앞서, 값을 생성하는 방법에 대해서도 알아보려 한다.\n\u003Ccode\u003Ereflect.New()\u003C\u002Fcode\u003E 함수는 \u003Ccode\u003Enew()\u003C\u002Fcode\u003E 함수의 reflection 버전이라고 볼 수 있다.\n\u003Ccode\u003Ereflect.New()\u003C\u002Fcode\u003E는 \u003Ccode\u003Ereflect.Type\u003C\u002Fcode\u003E을 파라미터로 받아 명시된 타입의 \u003Ccode\u003Ereflect.Value\u003C\u002Fcode\u003E를 가리키는 포인터 타입의 \u003Ccode\u003Ereflect.Value\u003C\u002Fcode\u003E를 반환한다.\n반환값이 포인터이기 때문에, \u003Ccode\u003EInterface()\u003C\u002Fcode\u003E 메소드를 사용하여 수정한 후 변수에 할당할 수 있다.\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Ccode\u003Ereflect.New()\u003C\u002Fcode\u003E가 스칼라 타입의 포인터를 생성하는 것처럼, \u003Ccode\u003Emake()\u003C\u002Fcode\u003E 함수에 대응되는 함수가 Reflection에도 존재한다.\u003C\u002Fp\u003E\n\u003Cpre class=\"language-go\"\u003E\u003C!-- HTML_TAG_START --\u003E\u003Ccode class=\"language-go\"\u003E\u003Cspan class=\"token keyword\"\u003Efunc\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003EMakeChan\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Etyp Type\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E buffer \u003Cspan class=\"token builtin\"\u003Eint\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E Value\n\u003Cspan class=\"token keyword\"\u003Efunc\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003EMakeMap\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Etyp Type\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E Value\n\u003Cspan class=\"token keyword\"\u003Efunc\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003EMakeMapWithSize\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Etyp Type\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E n \u003Cspan class=\"token builtin\"\u003Eint\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E Value\n\u003Cspan class=\"token keyword\"\u003Efunc\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003EMakeSlice\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Etyp Type\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token builtin\"\u003Elen\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token builtin\"\u003Ecap\u003C\u002Fspan\u003E \u003Cspan class=\"token builtin\"\u003Eint\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E Value\u003C\u002Fcode\u003E\u003C!-- HTML_TAG_END --\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E이러한 함수들은 포함된 타입이 아니라 복합 타입을 나타내는 \u003Ccode\u003Ereflect.Type\u003C\u002Fcode\u003E을 파라미터로 받는다.\u003C\u002Fp\u003E\n\u003Cbr\u003E\n\u003Cp\u003E\u003Ccode\u003Ereflect.Type\u003C\u002Fcode\u003E을 구성할 때는 항상 값에서 시작해야 하지만 마땅한 값이 없는 경우 \u003Ccode\u003Ereflect.Type\u003C\u002Fcode\u003E을 나타내는 변수를 만들 수 있는 방법이 있다.\u003C\u002Fp\u003E\n\u003Cpre class=\"language-go\"\u003E\u003C!-- HTML_TAG_START --\u003E\u003Ccode class=\"language-go\"\u003E\t\u003Cspan class=\"token keyword\"\u003Evar\u003C\u002Fspan\u003E stringType \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E reflect\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003ETypeOf\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E*\u003C\u002Fspan\u003E\u003Cspan class=\"token builtin\"\u003Estring\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token boolean\"\u003Enil\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EElem\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token keyword\"\u003Evar\u003C\u002Fspan\u003E stringSliceType \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E reflect\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003ETypeOf\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E]\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003Estring\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token boolean\"\u003Enil\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C!-- HTML_TAG_END --\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E위 예제에서 변수 \u003Ccode\u003EstringType\u003C\u002Fcode\u003E은 \u003Ccode\u003Estring\u003C\u002Fcode\u003E을 나타내는 \u003Ccode\u003Ereflect.Type\u003C\u002Fcode\u003E을 갖게 되며, \u003Ccode\u003EstringSliceType\u003C\u002Fcode\u003E은 \u003Ccode\u003E[]string\u003C\u002Fcode\u003E을 타나내는 \u003Ccode\u003Ereflect.Type\u003C\u002Fcode\u003E을 갖게 된다.\n\u003Ccode\u003EstringType\u003C\u002Fcode\u003E의 경우 해석하기 좀 어려울 수 있지만 포인터 타입을 먼저 생성한 뒤 \u003Ccode\u003EElem()\u003C\u002Fcode\u003E을 호출하여 결국 \u003Ccode\u003Estring\u003C\u002Fcode\u003E을 나타내는 \u003Ccode\u003Ereflect.Type\u003C\u002Fcode\u003E을 얻는 것이다.\n\u003Ccode\u003EstringSliceType\u003C\u002Fcode\u003E의 경우는 \u003Ccode\u003E[]string\u003C\u002Fcode\u003E의 기본값 자체가 \u003Ccode\u003Enil\u003C\u002Fcode\u003E이기 때문에 위처럼 위와 같은 절차를 거치면 \u003Ccode\u003E[]string\u003C\u002Fcode\u003E을 타나내는 \u003Ccode\u003Ereflect.Type\u003C\u002Fcode\u003E을 얻을 수 있다.\u003C\u002Fp\u003E\n\u003Cp\u003E이렇게 얻은 \u003Ccode\u003EstringType\u003C\u002Fcode\u003E와 \u003Ccode\u003EstringSliceType\u003C\u002Fcode\u003E을 \u003Ccode\u003Ereflect.New()\u003C\u002Fcode\u003E와 \u003Ccode\u003Ereflect.MakeSlice()\u003C\u002Fcode\u003E의 파라미터로 보내 값을 생성할 수 있다.\u003C\u002Fp\u003E\n\u003Cpre class=\"language-go\"\u003E\u003C!-- HTML_TAG_START --\u003E\u003Ccode class=\"language-go\"\u003E\u003Cspan class=\"token keyword\"\u003Efunc\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003Emain\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token keyword\"\u003Evar\u003C\u002Fspan\u003E stringType \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E reflect\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003ETypeOf\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E*\u003C\u002Fspan\u003E\u003Cspan class=\"token builtin\"\u003Estring\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token boolean\"\u003Enil\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EElem\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token keyword\"\u003Evar\u003C\u002Fspan\u003E stringSliceType \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E reflect\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003ETypeOf\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E]\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003Estring\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token boolean\"\u003Enil\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\n\tsv \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E reflect\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003ENew\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003EstringType\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EElem\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\tsv\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003ESetString\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token string\"\u003E\"hello\"\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\n\tssv \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E reflect\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EMakeSlice\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003EstringSliceType\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E0\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E10\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\tssv \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E reflect\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EAppend\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Essv\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E sv\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\n\tss \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E ssv\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EInterface\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E]\u003C\u002Fspan\u003E\u003Cspan class=\"token builtin\"\u003Estring\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n    fmt\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EPrintln\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Ess\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C!-- HTML_TAG_END --\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E실행하면 다음과 같은 결과를 확인할 수 있다.\u003C\u002Fp\u003E\n\u003Cpre class=\"language-text\"\u003E\u003C!-- HTML_TAG_START --\u003E\u003Ccode class=\"language-text\"\u003E[hello]\u003C\u002Fcode\u003E\u003C!-- HTML_TAG_END --\u003E\u003C\u002Fpre\u003E\n\u003Cbr\u003E\u003Cbr\u003E\n\u003Ch3 id=\"use-reflection-to-check-if-an-interfaces-value-is-nil\"\u003E\u003Ca aria-hidden=\"true\" tabindex=\"-1\" href=\"#use-reflection-to-check-if-an-interfaces-value-is-nil\"\u003E\u003Cspan class=\"icon icon-link\"\u003E\u003C\u002Fspan\u003E\u003C\u002Fa\u003EUse Reflection to Check If an Interface’s Value Is nil\u003C\u002Fh3\u003E\n\u003Cp\u003Einterface는 두 가지 nil을 가질 수 있다. 첫 번째는 interface가 가리키는 타입이 nil인 경우(즉 아무 것도 가리키지 않는 상태. 이 경우를 nul 인터페이스라고 함)이고, 두 번째는 interface가 가리키는 타입은 nil이 아니지만 값이 nil인 경우이다.\n만약 interface가 가리키는 값이 nil인지 확인하고 싶다면 reflection의 \u003Ccode\u003EIsValid()\u003C\u002Fcode\u003E와 \u003Ccode\u003EIsNil()\u003C\u002Fcode\u003E 메소드를 활용해야 한다.\u003C\u002Fp\u003E\n\u003Cpre class=\"language-go\"\u003E\u003C!-- HTML_TAG_START --\u003E\u003Ccode class=\"language-go\"\u003E\u003Cspan class=\"token keyword\"\u003Efunc\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003EhasNoValue\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Ei \u003Cspan class=\"token keyword\"\u003Einterface\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token builtin\"\u003Ebool\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n\tiv \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E reflect\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EValueOf\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Ei\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token keyword\"\u003Eif\u003C\u002Fspan\u003E \u003Cspan class=\"token operator\"\u003E!\u003C\u002Fspan\u003Eiv\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EIsValid\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n\t\t\u003Cspan class=\"token keyword\"\u003Ereturn\u003C\u002Fspan\u003E \u003Cspan class=\"token boolean\"\u003Etrue\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\n\n\t\u003Cspan class=\"token keyword\"\u003Eswitch\u003C\u002Fspan\u003E iv\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EKind\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token keyword\"\u003Ecase\u003C\u002Fspan\u003E reflect\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003EPtr\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E reflect\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003ESlice\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E reflect\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003EMap\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E reflect\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003EFunc\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E reflect\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003EInterface\u003Cspan class=\"token punctuation\"\u003E:\u003C\u002Fspan\u003E\n\t\t\u003Cspan class=\"token keyword\"\u003Ereturn\u003C\u002Fspan\u003E iv\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EIsNil\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token keyword\"\u003Edefault\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E:\u003C\u002Fspan\u003E\n\t\t\u003Cspan class=\"token keyword\"\u003Ereturn\u003C\u002Fspan\u003E \u003Cspan class=\"token boolean\"\u003Efalse\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"token keyword\"\u003Efunc\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003Emain\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token keyword\"\u003Evar\u003C\u002Fspan\u003E s \u003Cspan class=\"token keyword\"\u003Einterface\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E\"asd\"\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token keyword\"\u003Evar\u003C\u002Fspan\u003E p \u003Cspan class=\"token operator\"\u003E*\u003C\u002Fspan\u003E\u003Cspan class=\"token builtin\"\u003Estring\u003C\u002Fspan\u003E\n\n\tfmt\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EPrintln\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EhasNoValue\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Es\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003EhasNoValue\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Ep\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003EhasNoValue\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token boolean\"\u003Enil\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C!-- HTML_TAG_END --\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E\u003Ccode\u003EIsValid()\u003C\u002Fcode\u003E는 \u003Ccode\u003Ereflect.Value\u003C\u002Fcode\u003E가 nil 인터페이스 이외의 다른 타입을 나타내는 경우 \u003Ccode\u003Etrue\u003C\u002Fcode\u003E를 반환한다.\n만일 \u003Ccode\u003Ereflect.Value\u003C\u002Fcode\u003E가 nil 인터페이스라서 \u003Ccode\u003EIsValid()\u003C\u002Fcode\u003E의 값이 \u003Ccode\u003Etrue\u003C\u002Fcode\u003E인 상태에서, 다른 메소드를 호출하면 panic에 빠지기 때문이다.\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Ccode\u003EIsNil()\u003C\u002Fcode\u003E은 \u003Ccode\u003Ereflect.Value\u003C\u002Fcode\u003E의 값이 nil이라면 true를 반환한다. \u003Ccode\u003EIsNil()\u003C\u002Fcode\u003E를 호출하기에 앞서 먼저 \u003Ccode\u003EKind()\u003C\u002Fcode\u003E로 값의 종류를 검사하는 것을 알 수 있다. 어느 정도 예상할 수 있듯, 변수의 Zero value nil이 아닌 타입(int 등)일 때 \u003Ccode\u003EIsNil()\u003C\u002Fcode\u003E을 호출하면 panic이 발생하기 때문이다.\u003C\u002Fp\u003E\n\u003Cbr\u003E\u003Cbr\u003E\n\u003Ch3 id=\"use-reflection-to-write-a-data-marshaler\"\u003E\u003Ca aria-hidden=\"true\" tabindex=\"-1\" href=\"#use-reflection-to-write-a-data-marshaler\"\u003E\u003Cspan class=\"icon icon-link\"\u003E\u003C\u002Fspan\u003E\u003C\u002Fa\u003EUse Reflection to Write a Data Marshaler\u003C\u002Fh3\u003E\n\u003Cp\u003E앞서 언급했듯 Replection은 marshaling과 unmarshaling을 구현하기 위해 사용된다. 우리는 데이터 marshaler를 직접 설계하여 어떻게 사용되는 지 알아보려 한다!\u003C\u002Fp\u003E\n\u003Cp\u003EGo는 CSV 파일을 읽고 쓰기 위해 \u003Ccode\u003Ecsv.NewReader\u003C\u002Fcode\u003E와 \u003Ccode\u003Ecsv.NewWriter\u003C\u002Fcode\u003E 함수를 제공하지만 데이터를 구조체로 매핑해주는 기능은 따로 없다. 이 기능을 직접 구현해볼 것이다.\u003C\u002Fp\u003E\n\u003Cbr\u003E\n\u003Cp\u003E먼저 데이터 타입을 정의한다. 구조체 태그를 달아서, 다른 marshaler처럼 데이터에 존재하는 필드가 구조체의 각 필드에 매핑될 수 있게끔 한다.\u003C\u002Fp\u003E\n\u003Cpre class=\"language-go\"\u003E\u003C!-- HTML_TAG_START --\u003E\u003Ccode class=\"language-go\"\u003E\u003Cspan class=\"token keyword\"\u003Etype\u003C\u002Fspan\u003E MyData \u003Cspan class=\"token keyword\"\u003Estruct\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n\tName   \u003Cspan class=\"token builtin\"\u003Estring\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E&#96;csv:\"name\"&#96;\u003C\u002Fspan\u003E\n\tAge    \u003Cspan class=\"token builtin\"\u003Eint\u003C\u002Fspan\u003E    \u003Cspan class=\"token string\"\u003E&#96;csv:\"age\"&#96;\u003C\u002Fspan\u003E\n\tHasPet \u003Cspan class=\"token builtin\"\u003Ebool\u003C\u002Fspan\u003E   \u003Cspan class=\"token string\"\u003E&#96;csv:\"has_pet\"&#96;\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C!-- HTML_TAG_END --\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003Epublic API는 두 개의 함수로 구성된다.\u003C\u002Fp\u003E\n\u003Cpre class=\"language-go\"\u003E\u003C!-- HTML_TAG_START --\u003E\u003Ccode class=\"language-go\"\u003E\u003Cspan class=\"token keyword\"\u003Efunc\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003EUnmarshal\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Edata \u003Cspan class=\"token punctuation\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E]\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E]\u003C\u002Fspan\u003E\u003Cspan class=\"token builtin\"\u003Estring\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E v \u003Cspan class=\"token keyword\"\u003Einterface\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token builtin\"\u003Eerror\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"token keyword\"\u003Efunc\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003EMarshal\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Ev \u003Cspan class=\"token keyword\"\u003Einterface\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E]\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E]\u003C\u002Fspan\u003E\u003Cspan class=\"token builtin\"\u003Estring\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token builtin\"\u003Eerror\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C!-- HTML_TAG_END --\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E먼저 \u003Ccode\u003EMarshal()\u003C\u002Fcode\u003E 함수를 작성해 보자.\u003C\u002Fp\u003E\n\u003Cpre class=\"language-go\"\u003E\u003C!-- HTML_TAG_START --\u003E\u003Ccode class=\"language-go\"\u003E\u003Cspan class=\"token keyword\"\u003Efunc\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003EMarshal\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Ev \u003Cspan class=\"token keyword\"\u003Einterface\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E]\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E]\u003C\u002Fspan\u003E\u003Cspan class=\"token builtin\"\u003Estring\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token builtin\"\u003Eerror\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n\tsliceVal \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E reflect\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EValueOf\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Ev\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token keyword\"\u003Eif\u003C\u002Fspan\u003E sliceVal\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EKind\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token operator\"\u003E!=\u003C\u002Fspan\u003E reflect\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003ESlice \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n\t\t\u003Cspan class=\"token keyword\"\u003Ereturn\u003C\u002Fspan\u003E \u003Cspan class=\"token boolean\"\u003Enil\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E errors\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003ENew\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token string\"\u003E\"must be a slice of structs\"\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\n\n\tstructType \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E sliceVal\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EType\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EElem\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token keyword\"\u003Eif\u003C\u002Fspan\u003E structType\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EKind\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token operator\"\u003E!=\u003C\u002Fspan\u003E reflect\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003EStruct \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n\t\t\u003Cspan class=\"token keyword\"\u003Ereturn\u003C\u002Fspan\u003E \u003Cspan class=\"token boolean\"\u003Enil\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E errors\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003ENew\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token string\"\u003E\"must be a slice of structs\"\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\n\n\t\u003Cspan class=\"token keyword\"\u003Evar\u003C\u002Fspan\u003E out \u003Cspan class=\"token punctuation\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E]\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E]\u003C\u002Fspan\u003E\u003Cspan class=\"token builtin\"\u003Estring\u003C\u002Fspan\u003E\n\theader \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003EmarshalHeader\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003EstructType\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\tout \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003Eappend\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Eout\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E header\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\n\t\u003Cspan class=\"token keyword\"\u003Efor\u003C\u002Fspan\u003E i \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E0\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E i \u003Cspan class=\"token operator\"\u003E&lt;\u003C\u002Fspan\u003E sliceVal\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003ELen\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E i\u003Cspan class=\"token operator\"\u003E++\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n\t\trow\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E err \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003EmarshalOne\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003EsliceVal\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EIndex\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Ei\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\t\t\u003Cspan class=\"token keyword\"\u003Eif\u003C\u002Fspan\u003E err \u003Cspan class=\"token operator\"\u003E!=\u003C\u002Fspan\u003E \u003Cspan class=\"token boolean\"\u003Enil\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n\t\t\t\u003Cspan class=\"token keyword\"\u003Ereturn\u003C\u002Fspan\u003E \u003Cspan class=\"token boolean\"\u003Enil\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E err\n\t\t\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\n\t\tout \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003Eappend\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Eout\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E row\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\n\n\t\u003Cspan class=\"token keyword\"\u003Ereturn\u003C\u002Fspan\u003E out\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token boolean\"\u003Enil\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C!-- HTML_TAG_END --\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E어떤 종류의 구조체든 marsharling이 가능해야 하기 떄문에, \u003Ccode\u003Einterface{}\u003C\u002Fcode\u003E 타입의 파라미터를 사용한다. 데이터를 수정하지 않고 읽기만 할 것이기 때문에 구조체의 slice에 대한 포인터가 아니다.\u003C\u002Fp\u003E\n\u003Cp\u003E먼저, csv의 첫 줄은 각 열의 이름이 저장된 헤더가 될 것이므로, 구조체에 명시된 구조체 태그로부터 열 이름을 가져와 출력 데이터에 추가한다. slice의 \u003Ccode\u003Ereflect.Value\u003C\u002Fcode\u003E에서 \u003Ccode\u003EType()\u003C\u002Fcode\u003E 메소드를 호출하여 \u003Ccode\u003Ereflect.Type\u003C\u002Fcode\u003E을 얻고, 다시 \u003Ccode\u003EElem()\u003C\u002Fcode\u003E을 호출하여 slice의 내부 타입 정보를 얻는다. 그리하여 얻은 타입 정보를 \u003Ccode\u003EmarshalHeader()\u003C\u002Fcode\u003E에 전달하여 반환된 값을 출력 데이터에 추가하는 것이다.\u003C\u002Fp\u003E\n\u003Cp\u003E이후 구조체 slice의 이터레이션을 돌면서 각 인덱스의 \u003Ccode\u003Ereflect.Value\u003C\u002Fcode\u003E를 \u003Ccode\u003EmarshalOne()\u003C\u002Fcode\u003E의 파라미터로 보내서 반환된 값을 출력 데이터에 추가한다. 이터레이션이 끝나면 값을 반환한다.\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Ccode\u003EmarshalHeader()\u003C\u002Fcode\u003E는 다음과 같이 작성되었다.\u003C\u002Fp\u003E\n\u003Cpre class=\"language-go\"\u003E\u003C!-- HTML_TAG_START --\u003E\u003Ccode class=\"language-go\"\u003E\u003Cspan class=\"token keyword\"\u003Efunc\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003EmarshalHeader\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Evt reflect\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003EType\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E]\u003C\u002Fspan\u003E\u003Cspan class=\"token builtin\"\u003Estring\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token keyword\"\u003Evar\u003C\u002Fspan\u003E row \u003Cspan class=\"token punctuation\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E]\u003C\u002Fspan\u003E\u003Cspan class=\"token builtin\"\u003Estring\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token keyword\"\u003Efor\u003C\u002Fspan\u003E i \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E0\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E i \u003Cspan class=\"token operator\"\u003E&lt;\u003C\u002Fspan\u003E vt\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003ENumField\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E i\u003Cspan class=\"token operator\"\u003E++\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n\t\tfield \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E vt\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EField\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Ei\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\t\t\u003Cspan class=\"token keyword\"\u003Eif\u003C\u002Fspan\u003E curTag\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E ok \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E field\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003ETag\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003ELookup\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token string\"\u003E\"csv\"\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E ok \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n\t\t\trow \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003Eappend\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Erow\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E curTag\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\t\t\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token keyword\"\u003Ereturn\u003C\u002Fspan\u003E row\n\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C!-- HTML_TAG_END --\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E구조체를 나타내는 \u003Ccode\u003Ereflect.Type\u003C\u002Fcode\u003E의 각 필드에 대해 이터레이션을 돌며, \u003Ccode\u003Ecsv\u003C\u002Fcode\u003E 태그를 읽고 출력 slice에 추가하여 반환한다.\u003C\u002Fp\u003E\n\u003Cp\u003E그리고 \u003Ccode\u003EmarshalOne()\u003C\u002Fcode\u003E은 다음과 같이 작성되었다.\u003C\u002Fp\u003E\n\u003Cpre class=\"language-go\"\u003E\u003C!-- HTML_TAG_START --\u003E\u003Ccode class=\"language-go\"\u003E\u003Cspan class=\"token keyword\"\u003Efunc\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003EmarshalOne\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Evv reflect\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003EValue\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E]\u003C\u002Fspan\u003E\u003Cspan class=\"token builtin\"\u003Estring\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token builtin\"\u003Eerror\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token keyword\"\u003Evar\u003C\u002Fspan\u003E row \u003Cspan class=\"token punctuation\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E]\u003C\u002Fspan\u003E\u003Cspan class=\"token builtin\"\u003Estring\u003C\u002Fspan\u003E\n\tvt \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E vv\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EType\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\n\t\u003Cspan class=\"token keyword\"\u003Efor\u003C\u002Fspan\u003E i \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E0\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E i \u003Cspan class=\"token operator\"\u003E&lt;\u003C\u002Fspan\u003E vv\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003ENumField\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E i\u003Cspan class=\"token operator\"\u003E++\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n\t\tfieldVal \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E vv\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EField\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Ei\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\t\t\u003Cspan class=\"token keyword\"\u003Eif\u003C\u002Fspan\u003E \u003Cspan class=\"token boolean\"\u003E_\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E ok \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E vt\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EField\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Ei\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003ETag\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003ELookup\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token string\"\u003E\"csv\"\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E \u003Cspan class=\"token operator\"\u003E!\u003C\u002Fspan\u003Eok \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n\t\t\t\u003Cspan class=\"token keyword\"\u003Econtinue\u003C\u002Fspan\u003E\n\t\t\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\n\n\t\t\u003Cspan class=\"token keyword\"\u003Eswitch\u003C\u002Fspan\u003E fieldVal\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EKind\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n\t\t\u003Cspan class=\"token keyword\"\u003Ecase\u003C\u002Fspan\u003E reflect\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003EInt\u003Cspan class=\"token punctuation\"\u003E:\u003C\u002Fspan\u003E\n\t\t\trow \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003Eappend\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Erow\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E strconv\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EFormatInt\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003EfieldVal\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EInt\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E10\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\t\t\u003Cspan class=\"token keyword\"\u003Ecase\u003C\u002Fspan\u003E reflect\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003EString\u003Cspan class=\"token punctuation\"\u003E:\u003C\u002Fspan\u003E\n\t\t\trow \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003Eappend\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Erow\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E fieldVal\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EString\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\t\t\u003Cspan class=\"token keyword\"\u003Ecase\u003C\u002Fspan\u003E reflect\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003EBool\u003Cspan class=\"token punctuation\"\u003E:\u003C\u002Fspan\u003E\n\t\t\trow \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003Eappend\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Erow\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E strconv\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EFormatBool\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003EfieldVal\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EBool\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\t\t\u003Cspan class=\"token keyword\"\u003Edefault\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E:\u003C\u002Fspan\u003E\n\t\t\t\u003Cspan class=\"token keyword\"\u003Ereturn\u003C\u002Fspan\u003E \u003Cspan class=\"token boolean\"\u003Enil\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E fmt\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EErrorf\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token string\"\u003E\"cannot handle field of kind %v\"\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E fieldVal\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EKind\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\t\t\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\n\n\t\u003Cspan class=\"token keyword\"\u003Ereturn\u003C\u002Fspan\u003E row\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token boolean\"\u003Enil\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C!-- HTML_TAG_END --\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E구조체를 나타내는 \u003Ccode\u003Evv reflect.Value\u003C\u002Fcode\u003E를 파라미터로 받고, \u003Ccode\u003EKind()\u003C\u002Fcode\u003E 메소드로 각 필드의 종류를 보고 문자열로 적절히 변환해준 후 출력한다.\u003C\u002Fp\u003E\n\u003Cbr\u003E\n\u003Cp\u003E이제 \u003Ccode\u003EUnmarshal()\u003C\u002Fcode\u003E 함수를 작성해보자.\u003C\u002Fp\u003E\n\u003Cpre class=\"language-go\"\u003E\u003C!-- HTML_TAG_START --\u003E\u003Ccode class=\"language-go\"\u003E\u003Cspan class=\"token keyword\"\u003Efunc\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003EUnmarshal\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Edata \u003Cspan class=\"token punctuation\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E]\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E]\u003C\u002Fspan\u003E\u003Cspan class=\"token builtin\"\u003Estring\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E v \u003Cspan class=\"token keyword\"\u003Einterface\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token builtin\"\u003Eerror\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n\tsliceValPtr \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E reflect\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EValueOf\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Ev\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token keyword\"\u003Eif\u003C\u002Fspan\u003E sliceValPtr\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EKind\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token operator\"\u003E!=\u003C\u002Fspan\u003E reflect\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003EPtr \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n\t\t\u003Cspan class=\"token keyword\"\u003Ereturn\u003C\u002Fspan\u003E errors\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003ENew\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token string\"\u003E\"must be a pointer to a slice of structs\"\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\n\n\tsliceVal \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E sliceValPtr\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EElem\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token keyword\"\u003Eif\u003C\u002Fspan\u003E sliceVal\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EKind\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token operator\"\u003E!=\u003C\u002Fspan\u003E reflect\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003ESlice \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n\t\t\u003Cspan class=\"token keyword\"\u003Ereturn\u003C\u002Fspan\u003E errors\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003ENew\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token string\"\u003E\"must be a pointer to a slice of structs\"\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\n\n\tstructType \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E sliceVal\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EElem\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EType\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token keyword\"\u003Eif\u003C\u002Fspan\u003E structType\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EKind\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token operator\"\u003E!=\u003C\u002Fspan\u003E reflect\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003EStruct \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n\t\t\u003Cspan class=\"token keyword\"\u003Ereturn\u003C\u002Fspan\u003E errors\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003ENew\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token string\"\u003E\"muast be a pointer to\"\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\n\n\theader \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E data\u003Cspan class=\"token punctuation\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"token number\"\u003E0\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E]\u003C\u002Fspan\u003E\n\tnamePos \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003Emake\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token keyword\"\u003Emap\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"token builtin\"\u003Estring\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E]\u003C\u002Fspan\u003E\u003Cspan class=\"token builtin\"\u003Eint\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003Elen\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Eheader\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token keyword\"\u003Efor\u003C\u002Fspan\u003E k\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E v \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E \u003Cspan class=\"token keyword\"\u003Erange\u003C\u002Fspan\u003E header \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n\t\tnamePos\u003Cspan class=\"token punctuation\"\u003E[\u003C\u002Fspan\u003Ev\u003Cspan class=\"token punctuation\"\u003E]\u003C\u002Fspan\u003E \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E k\n\t\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\n\n\t\u003Cspan class=\"token keyword\"\u003Efor\u003C\u002Fspan\u003E \u003Cspan class=\"token boolean\"\u003E_\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E row \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E \u003Cspan class=\"token keyword\"\u003Erange\u003C\u002Fspan\u003E data\u003Cspan class=\"token punctuation\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"token number\"\u003E1\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E:\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E]\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n\t\tnewVal \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E reflect\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003ENew\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003EstructType\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EElem\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\t\terr \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003EunmarshalOne\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Erow\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E namePos\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E newVal\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\t\t\u003Cspan class=\"token keyword\"\u003Eif\u003C\u002Fspan\u003E err \u003Cspan class=\"token operator\"\u003E!=\u003C\u002Fspan\u003E \u003Cspan class=\"token boolean\"\u003Enil\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n\t\t\t\u003Cspan class=\"token keyword\"\u003Ereturn\u003C\u002Fspan\u003E err\n\t\t\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\n\t\tsliceVal\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003ESet\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Ereflect\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EAppend\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003EsliceVal\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E newVal\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token keyword\"\u003Ereturn\u003C\u002Fspan\u003E \u003Cspan class=\"token boolean\"\u003Enil\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C!-- HTML_TAG_END --\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E데이터를 복사할 것이기 때문에, \u003Ccode\u003EUnmarshal()\u003C\u002Fcode\u003E에서 파라미터로 받는 데이터는 구조체 slice의 포인터여야 한다.\n함수 최상단에 이를 검사하는 부분이 존재한다. 이후 차례로 포인터가 가리키는 slice, slice가 저장하는 구조체를 검사한다.\u003C\u002Fp\u003E\n\u003Cp\u003E데이터의 첫째 줄은 각 열의 이름이 저장된 헤더이다. 이 정보를 통해 구조체의 \u003Ccode\u003Ecsv\u003C\u002Fcode\u003E 태그를 각 인덱스에 대응시키는 map을 생성할 수 있다.\u003C\u002Fp\u003E\n\u003Cp\u003E이후 데이터의 각 행마다 이터레이션을 돌며 새로운 \u003Ccode\u003EstructType\u003C\u002Fcode\u003E 타입의 \u003Ccode\u003Ereflect.Value\u003C\u002Fcode\u003E를 생성한다. 그리고 \u003Ccode\u003EunmarshalOne()\u003C\u002Fcode\u003E을 호출하여 각 행의 데이터를\u003Ccode\u003Ereflect.Value\u003C\u002Fcode\u003E에 복사한 후 출력 데이터에 추가한다.\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Ccode\u003EunmarshalOne()\u003C\u002Fcode\u003E은 다음과 같이 작성되었다.\u003C\u002Fp\u003E\n\u003Cpre class=\"language-go\"\u003E\u003C!-- HTML_TAG_START --\u003E\u003Ccode class=\"language-go\"\u003E\u003Cspan class=\"token keyword\"\u003Efunc\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003EunmarshalOne\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Erow \u003Cspan class=\"token punctuation\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E]\u003C\u002Fspan\u003E\u003Cspan class=\"token builtin\"\u003Estring\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E namePos \u003Cspan class=\"token keyword\"\u003Emap\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"token builtin\"\u003Estring\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E]\u003C\u002Fspan\u003E\u003Cspan class=\"token builtin\"\u003Eint\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E vv reflect\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003EValue\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token builtin\"\u003Eerror\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n\tvt \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E vv\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EType\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token keyword\"\u003Efor\u003C\u002Fspan\u003E i \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E0\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E i \u003Cspan class=\"token operator\"\u003E&lt;\u003C\u002Fspan\u003E vv\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003ENumField\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E i\u003Cspan class=\"token operator\"\u003E++\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n\t\ttypeField \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E vt\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EField\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Ei\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\n\t\tpos\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E ok \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E namePos\u003Cspan class=\"token punctuation\"\u003E[\u003C\u002Fspan\u003EtypeField\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003ETag\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EGet\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token string\"\u003E\"csv\"\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E]\u003C\u002Fspan\u003E\n\t\t\u003Cspan class=\"token keyword\"\u003Eif\u003C\u002Fspan\u003E \u003Cspan class=\"token operator\"\u003E!\u003C\u002Fspan\u003Eok \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n\t\t\t\u003Cspan class=\"token keyword\"\u003Econtinue\u003C\u002Fspan\u003E\n\t\t\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\n\n\t\tval \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E row\u003Cspan class=\"token punctuation\"\u003E[\u003C\u002Fspan\u003Epos\u003Cspan class=\"token punctuation\"\u003E]\u003C\u002Fspan\u003E\n\t\tfield \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E vv\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EField\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Ei\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\n\t\t\u003Cspan class=\"token keyword\"\u003Eswitch\u003C\u002Fspan\u003E field\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EKind\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n\t\t\u003Cspan class=\"token keyword\"\u003Ecase\u003C\u002Fspan\u003E reflect\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003EInt\u003Cspan class=\"token punctuation\"\u003E:\u003C\u002Fspan\u003E\n\t\t\ti\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E err \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E strconv\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EParseInt\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Eval\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E10\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E64\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\t\t\t\u003Cspan class=\"token keyword\"\u003Eif\u003C\u002Fspan\u003E err \u003Cspan class=\"token operator\"\u003E!=\u003C\u002Fspan\u003E \u003Cspan class=\"token boolean\"\u003Enil\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n\t\t\t\t\u003Cspan class=\"token keyword\"\u003Ereturn\u003C\u002Fspan\u003E err\n\t\t\t\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\n\t\t\tfield\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003ESetInt\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Ei\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\n\t\t\u003Cspan class=\"token keyword\"\u003Ecase\u003C\u002Fspan\u003E reflect\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003EString\u003Cspan class=\"token punctuation\"\u003E:\u003C\u002Fspan\u003E\n\t\t\tfield\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003ESetString\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Eval\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\n\t\t\u003Cspan class=\"token keyword\"\u003Ecase\u003C\u002Fspan\u003E reflect\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003EBool\u003Cspan class=\"token punctuation\"\u003E:\u003C\u002Fspan\u003E\n\t\t\tb\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E err \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E strconv\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EParseBool\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Eval\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\t\t\t\u003Cspan class=\"token keyword\"\u003Eif\u003C\u002Fspan\u003E err \u003Cspan class=\"token operator\"\u003E!=\u003C\u002Fspan\u003E \u003Cspan class=\"token boolean\"\u003Enil\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n\t\t\t\t\u003Cspan class=\"token keyword\"\u003Ereturn\u003C\u002Fspan\u003E err\n\t\t\t\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\n\t\t\tfield\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003ESetBool\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Eb\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\n\t\t\u003Cspan class=\"token keyword\"\u003Edefault\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E:\u003C\u002Fspan\u003E\n\t\t\t\u003Cspan class=\"token keyword\"\u003Ereturn\u003C\u002Fspan\u003E fmt\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EErrorf\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token string\"\u003E\"cannot handle field of kind %v\"\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E field\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EKind\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\t\t\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\n\n\t\u003Cspan class=\"token keyword\"\u003Ereturn\u003C\u002Fspan\u003E \u003Cspan class=\"token boolean\"\u003Enil\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C!-- HTML_TAG_END --\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E이 함수는 새로 생성된 reflect.Value 타입의 각 필드에 대해 이터레이션을 돌며, \u003Ccode\u003Ecsv\u003C\u002Fcode\u003E 태그의 이름을 통해 \u003Ccode\u003EnamePos\u003C\u002Fcode\u003E 맵에서 \u003Ccode\u003Edata\u003C\u002Fcode\u003E slice의 위치를 찾아 문자열로 변환된 값을 저장한다.\u003C\u002Fp\u003E\n\u003Cbr\u003E\n\u003Cp\u003E이제 작성한 marshaler와 unmarshaler를 통해 csv를 분석해보자!\u003C\u002Fp\u003E\n\u003Cpre class=\"language-go\"\u003E\u003C!-- HTML_TAG_START --\u003E\u003Ccode class=\"language-go\"\u003Edata \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E\n\t\t\u003Cspan class=\"token string\"\u003E&#96;name,age,has_pet\nJon,\"100\",true\n\"Fred \"\"The Hammer\"\" Smith\",42,false\nMartha,37,\"true\"\n&#96;\u003C\u002Fspan\u003E\n\tr \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E csv\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003ENewReader\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Estrings\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003ENewReader\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Edata\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\tallData\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E err \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E r\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EReadAll\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token keyword\"\u003Eif\u003C\u002Fspan\u003E err \u003Cspan class=\"token operator\"\u003E!=\u003C\u002Fspan\u003E \u003Cspan class=\"token boolean\"\u003Enil\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n\t\t\u003Cspan class=\"token function\"\u003Epanic\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Eerr\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\n\n\t\u003Cspan class=\"token keyword\"\u003Evar\u003C\u002Fspan\u003E entries \u003Cspan class=\"token punctuation\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E]\u003C\u002Fspan\u003EMyData\n\t\u003Cspan class=\"token function\"\u003EUnmarshal\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003EallData\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token operator\"\u003E&amp;\u003C\u002Fspan\u003Eentries\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\tfmt\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EPrintln\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Eentries\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\n\tout\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E err \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003EMarshal\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Eentries\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token keyword\"\u003Eif\u003C\u002Fspan\u003E err \u003Cspan class=\"token operator\"\u003E!=\u003C\u002Fspan\u003E \u003Cspan class=\"token boolean\"\u003Enil\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n\t\t\u003Cspan class=\"token function\"\u003Epanic\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Eerr\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\n\tsb \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E \u003Cspan class=\"token operator\"\u003E&amp;\u003C\u002Fspan\u003Estrings\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003EBuilder\u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\n\tw \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E csv\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003ENewWriter\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Esb\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\tw\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EWriteAll\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Eout\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\tfmt\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EPrintln\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Esb\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C!-- HTML_TAG_END --\u003E\u003C\u002Fpre\u003E\n\u003Cbr\u003E\n\u003Cp\u003E전체 예제 코드는 \u003Ca href=\"https:\u002F\u002Fgo.dev\u002Fplay\u002Fp\u002F3kwe7ag1i1C\" rel=\"nofollow\"\u003Ehttps:\u002F\u002Fgo.dev\u002Fplay\u002Fp\u002F3kwe7ag1i1C\u003C\u002Fa\u003E에서 확인할 수 있다.\u003C\u002Fp\u003E\n\u003Cbr\u003E\u003Cbr\u003E\n\u003Ch3 id=\"build-functions-with-reflection-to-automate-repetitive-tasks\"\u003E\u003Ca aria-hidden=\"true\" tabindex=\"-1\" href=\"#build-functions-with-reflection-to-automate-repetitive-tasks\"\u003E\u003Cspan class=\"icon icon-link\"\u003E\u003C\u002Fspan\u003E\u003C\u002Fa\u003EBuild Functions with Reflection to Automate Repetitive Tasks\u003C\u002Fh3\u003E\n\u003Cp\u003EReflection을 통해 반복적인 코드를 작성하지 않고, 기존 함수를 감싸 재사용하여 함수를 생성할 수도 있다.\n다음의 예제는 들어온 파라미터로 함수에 시간을 재는 기능이 추가된 함수를 반환하는 Factory 함수이다.\u003C\u002Fp\u003E\n\u003Cpre class=\"language-go\"\u003E\u003C!-- HTML_TAG_START --\u003E\u003Ccode class=\"language-go\"\u003E\u003Cspan class=\"token keyword\"\u003Efunc\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003EMakeTimedFunction\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Ef \u003Cspan class=\"token keyword\"\u003Einterface\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token keyword\"\u003Einterface\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n\tft \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E reflect\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003ETypeOf\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Ef\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\tfv \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E reflect\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EValueOf\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Ef\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\n\twrapperF \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E reflect\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EMakeFunc\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Eft\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token keyword\"\u003Efunc\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Eargs \u003Cspan class=\"token punctuation\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E]\u003C\u002Fspan\u003Ereflect\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003EValue\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E]\u003C\u002Fspan\u003Ereflect\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003EValue \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n\t\tstart \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E time\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003ENow\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\t\tout \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E fv\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003ECall\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Eargs\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\t\tend \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E time\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003ENow\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\t\tfmt\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EPrintln\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Eend\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003ESub\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Estart\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\t\t\u003Cspan class=\"token keyword\"\u003Ereturn\u003C\u002Fspan\u003E out\n\t\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token keyword\"\u003Ereturn\u003C\u002Fspan\u003E wrapperF\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EInterface\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C!-- HTML_TAG_END --\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E이 함수는 함수를 파라미터로 받아, 함수를 나타내는 \u003Ccode\u003Ereflect.Type\u003C\u002Fcode\u003E을 얻어 \u003Ccode\u003Ereflect.MakeFunc()\u003C\u002Fcode\u003E로 보낸다.\n이후 \u003Ccode\u003Ereflect.MakeFunc()\u003C\u002Fcode\u003E로 시작 시각을 얻고, 기존 함수를 호출하고, 종료 시각을 얻어서 시간차를 출력하고, 기존 함수의 반환값을 반환 하는 함수를 작성한다.\n이후 해당 함수를 가리키는 \u003Ccode\u003Ereflect.Value\u003C\u002Fcode\u003E를 \u003Ccode\u003EInterface()\u003C\u002Fcode\u003E 메소드를 통해 반환할 함수를 얻는다.\u003C\u002Fp\u003E\n\u003Cp\u003E위 함수는 다음과 같이 사용할 수 있다.\u003C\u002Fp\u003E\n\u003Cpre class=\"language-go\"\u003E\u003C!-- HTML_TAG_START --\u003E\u003Ccode class=\"language-go\"\u003E\u003Cspan class=\"token keyword\"\u003Efunc\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003EtimeMe\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Ea \u003Cspan class=\"token builtin\"\u003Eint\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token builtin\"\u003Eint\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token keyword\"\u003Evar\u003C\u002Fspan\u003E result \u003Cspan class=\"token builtin\"\u003Eint\u003C\u002Fspan\u003E \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E0\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token keyword\"\u003Efor\u003C\u002Fspan\u003E i \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E0\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E i \u003Cspan class=\"token operator\"\u003E&lt;\u003C\u002Fspan\u003E a\u003Cspan class=\"token operator\"\u003E*\u003C\u002Fspan\u003E\u003Cspan class=\"token number\"\u003E10000\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E i\u003Cspan class=\"token operator\"\u003E++\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n\t\tresult \u003Cspan class=\"token operator\"\u003E+=\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E1\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token keyword\"\u003Ereturn\u003C\u002Fspan\u003E result\n\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"token keyword\"\u003Efunc\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003Emain\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n\ttimed \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003EMakeTimedFunction\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003EtimeMe\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token keyword\"\u003Efunc\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token builtin\"\u003Eint\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token builtin\"\u003Eint\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\n\tfmt\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EPrintln\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003Etimed\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token number\"\u003E100000\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C!-- HTML_TAG_END --\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E이처럼 Reflection을 통해 함수를 생성할 수는 있지만 이 기능을 사용할 때는 주의해야 한다.\n언제 함수를 생성할지, 어떤 기능을 추가할지에 대해 확실히 해 두는 편이 좋다. 그렇지 않으면 프로그램 내 데이터 흐름을 이해하기 더욱 어려워질 것이다.\u003C\u002Fp\u003E\n\u003Cp\u003E뿐만 아니라 기본적으로 Reflection은 프로그램을 느리게 만든다. 네트워크 통신 같은 원래 느린 동작을 하는 게 아닌 이상, 함수를 생성하고 생성된 함수를 호출하는 것은 성능에 중대한 영향을 미칠 것이다. 다시 한번 언급하지만, Reflection은 프로그램과 외부 세계에서 오고가는 데이터를 매핑할 때 유용하다.\u003C\u002Fp\u003E\n\u003Cbr\u003E\u003Cbr\u003E\n\u003Ch3 id=\"what-you-shouldnt-do-with-reflection\"\u003E\u003Ca aria-hidden=\"true\" tabindex=\"-1\" href=\"#what-you-shouldnt-do-with-reflection\"\u003E\u003Cspan class=\"icon icon-link\"\u003E\u003C\u002Fspan\u003E\u003C\u002Fa\u003EWhat you shouldn’t do with Reflection\u003C\u002Fh3\u003E\n\u003Cp\u003E\u003Ccode\u003Ereflect.StructOf()\u003C\u002Fcode\u003E 함수는 \u003Ccode\u003Ereflect.StructField\u003C\u002Fcode\u003E의 slice를 파라미터로 받아 새로운 구조체 타입을 가리키는 \u003Ccode\u003Ereflect.Type\u003C\u002Fcode\u003E을 반환한다. 이렇게 생성된 구조체는 \u003Ccode\u003Einterface{}\u003C\u002Fcode\u003E를 통해서만 변수에 할당될 수 있으며, Reflection을 사용해야만 데이터를 읽고 쓸 수 있다.\u003C\u002Fp\u003E\n\u003Cp\u003E근데 굳이 이렇게까지 할 필요가 없다. 이 기능은 학술적인 목적에서만 사용된다고 하며, 우리 같은 일반 사용자들은 그냥 구조체 선언해서 쓰자. 하지말라면 하지마!\u003C\u002Fp\u003E\n\u003Cbr\u003E\n\u003Cp\u003E또한 Reflection으로는 메소드를 만들 수도 없다. 함수나 구조체 타입은 만들 수 있긴 한데, 타입에 메소드를 추가할 수는 없다. 당연히 인터페이스를 만드는 것도 안된다.\u003C\u002Fp\u003E\n\u003Cbr\u003E\u003Cbr\u003E\n\u003Ch3 id=\"only-use-reflection-if-its-worthwhile\"\u003E\u003Ca aria-hidden=\"true\" tabindex=\"-1\" href=\"#only-use-reflection-if-its-worthwhile\"\u003E\u003Cspan class=\"icon icon-link\"\u003E\u003C\u002Fspan\u003E\u003C\u002Fa\u003EOnly Use Reflection If It’s Worthwhile\u003C\u002Fh3\u003E\n\u003Cp\u003E입이 닳도록 말하지만 Reflection은 프로그램과 외부 세계에서 오고가는 데이터를 변환할 때 필수적이다.\n하지만 그 외의 상황에서는 사용에 주의를 기울여야 한다.\u003C\u002Fp\u003E\n\u003Cp\u003E이를테면 여러 언어에 존재하는 \u003Ccode\u003EFilter()\u003C\u002Fcode\u003E 함수를 작성한다고 가정해보자. 만약 문자열에 대해 동작하는 \u003Ccode\u003EFilter()\u003C\u002Fcode\u003E함수를 작성한다면 아래와 같이 작성할 것이다.\u003C\u002Fp\u003E\n\u003Cpre class=\"language-go\"\u003E\u003C!-- HTML_TAG_START --\u003E\u003Ccode class=\"language-go\"\u003E\u003Cspan class=\"token keyword\"\u003Efunc\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003EFilter\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Eslice \u003Cspan class=\"token punctuation\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E]\u003C\u002Fspan\u003E\u003Cspan class=\"token builtin\"\u003Estring\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E filter \u003Cspan class=\"token keyword\"\u003Efunc\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token builtin\"\u003Estring\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token builtin\"\u003Ebool\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E]\u003C\u002Fspan\u003E\u003Cspan class=\"token builtin\"\u003Estring\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n\tres \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E]\u003C\u002Fspan\u003E\u003Cspan class=\"token builtin\"\u003Estring\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token keyword\"\u003Efor\u003C\u002Fspan\u003E \u003Cspan class=\"token boolean\"\u003E_\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E s \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E \u003Cspan class=\"token keyword\"\u003Erange\u003C\u002Fspan\u003E slice \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n\t\t\u003Cspan class=\"token keyword\"\u003Eif\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003Efilter\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Es\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n\t\t\tres \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003Eappend\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Eres\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E s\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\t\t\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token keyword\"\u003Ereturn\u003C\u002Fspan\u003E res\n\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C!-- HTML_TAG_END --\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E반면 단일 타입이 아니라 여러 타입에 대해 연산을 가능하게 한다고 가정할 때, 이런 함수는 Reflection을 통해서 작성할 수 있다.\u003C\u002Fp\u003E\n\u003Cpre class=\"language-go\"\u003E\u003C!-- HTML_TAG_START --\u003E\u003Ccode class=\"language-go\"\u003E\u003Cspan class=\"token keyword\"\u003Efunc\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003EReflectedFilter\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Eslice \u003Cspan class=\"token keyword\"\u003Einterface\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E filter \u003Cspan class=\"token keyword\"\u003Einterface\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token keyword\"\u003Einterface\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n\tsv \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E reflect\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EValueOf\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Eslice\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\tfv \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E reflect\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EValueOf\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Efilter\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\n\tsliceLen \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E sv\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003ELen\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\tout \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E reflect\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EMakeSlice\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Esv\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EType\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E0\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E sliceLen\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token keyword\"\u003Efor\u003C\u002Fspan\u003E i \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E0\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E i \u003Cspan class=\"token operator\"\u003E&lt;\u003C\u002Fspan\u003E sliceLen\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E i\u003Cspan class=\"token operator\"\u003E++\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n\t\tcurVal \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E sv\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EIndex\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Ei\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\t\tvalues \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E fv\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003ECall\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E]\u003C\u002Fspan\u003Ereflect\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003EValue\u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003EcurVal\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\t\t\u003Cspan class=\"token keyword\"\u003Eif\u003C\u002Fspan\u003E values\u003Cspan class=\"token punctuation\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"token number\"\u003E0\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E]\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EBool\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n\t\t\tout \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E reflect\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EAppend\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Eout\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E curVal\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\t\t\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token keyword\"\u003Ereturn\u003C\u002Fspan\u003E out\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EInterface\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C!-- HTML_TAG_END --\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E그리고 아래와 같이 호출하여 사용한다.\u003C\u002Fp\u003E\n\u003Cpre class=\"language-go\"\u003E\u003C!-- HTML_TAG_START --\u003E\u003Ccode class=\"language-go\"\u003E\u003Cspan class=\"token keyword\"\u003Efunc\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003Emain\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n\tnames \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E]\u003C\u002Fspan\u003E\u003Cspan class=\"token builtin\"\u003Estring\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\u003Cspan class=\"token string\"\u003E\"Andrew\"\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E\"Bob\"\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E\"Clara\"\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E\"Hortense\"\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\n\tlongNames \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003EReflectedFilter\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Enames\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token keyword\"\u003Efunc\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Es \u003Cspan class=\"token builtin\"\u003Estring\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token builtin\"\u003Ebool\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n\t\t\u003Cspan class=\"token keyword\"\u003Ereturn\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003Elen\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Es\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token operator\"\u003E\u003E\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E3\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E]\u003C\u002Fspan\u003E\u003Cspan class=\"token builtin\"\u003Estring\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\tfmt\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EPrintln\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003ElongNames\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\n\tages \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E]\u003C\u002Fspan\u003E\u003Cspan class=\"token builtin\"\u003Eint\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\u003Cspan class=\"token number\"\u003E20\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E50\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E13\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\n\tadults \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003EReflectedFilter\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Eages\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token keyword\"\u003Efunc\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Eage \u003Cspan class=\"token builtin\"\u003Eint\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token builtin\"\u003Ebool\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n\t\t\u003Cspan class=\"token keyword\"\u003Ereturn\u003C\u002Fspan\u003E age \u003Cspan class=\"token operator\"\u003E\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E18\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E]\u003C\u002Fspan\u003E\u003Cspan class=\"token builtin\"\u003Eint\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\tfmt\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EPrintln\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Eadults\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C!-- HTML_TAG_END --\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E\u003Ccode\u003EReflectedFilter()\u003C\u002Fcode\u003E 함수는 어렵지 않지만 \u003Ccode\u003EFilter()\u003C\u002Fcode\u003E보다는 분명히 길다.\n게다가 성능을 측정해보면 Reflection을 사용한 코드는 사용하지 않은 코드보다 30~70배 느린 것을 확인할 수 있다.\u003C\u002Fp\u003E\n\u003Cpre class=\"language-text\"\u003E\u003C!-- HTML_TAG_START --\u003E\u003Ccode class=\"language-text\"\u003EBenchmarkFilterReflectString-12             4123            336595 ns\u002Fop\nBenchmarkFilterString-12                  191110              8211 ns\u002Fop\nBenchmarkFilterReflectInt-12                3427            359483 ns\u002Fop\nBenchmarkFilterInt-12                     497114              4233 ns\u002Fop\u003C\u002Fcode\u003E\u003C!-- HTML_TAG_END --\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E더 많은 메모리를 사용하고 수천 회의 메모리 할당이 일어나므로 가비지 컬렉터가 해야 할 일이 늘어나기 때문이다.\n즉, 필요에 따라 Reflection을 사용할 수는 있지만 충분히 고민을 거쳐야 한다.\u003C\u002Fp\u003E\n\u003Cp\u003E성능 이슈보다 중요한 문제는 파라미터로 잘못된 타입을 넘기는 것을 컴파일러가 잡아주지 못한다는 것이다.\n특정 타입만 허용해주는 작업을 반복적으로 진행해야 하기 떄문에 에러를 찾기도 힘들며, 코드의 유지보수 난이도가 증가한다.\u003C\u002Fp\u003E\n\u003Cbr\u003E\u003Cbr\u003E\n\u003Ch2 id=\"unsafe-is-unsafe\"\u003E\u003Ca aria-hidden=\"true\" tabindex=\"-1\" href=\"#unsafe-is-unsafe\"\u003E\u003Cspan class=\"icon icon-link\"\u003E\u003C\u002Fspan\u003E\u003C\u002Fa\u003Eunsafe is Unsafe\u003C\u002Fh2\u003E\n\u003Cp\u003E\u003Ccode\u003Ereflect\u003C\u002Fcode\u003E 패키지를 통해 타입, 값을 조작할 수 있듯, \u003Ccode\u003Eunsafe\u003C\u002Fcode\u003E 패키지를 통해 메모리를 조작할 수 있다.\n그러나 \u003Ccode\u003Eunsafe\u003C\u002Fcode\u003E 패키지는 굉장히 특이한 3개의 함수와 하나의 타입을 정의하는데, 다른 패키지의 함수나 타입과는 완전히 다르다고 볼 수 있다.\u003C\u002Fp\u003E\n\u003Cp\u003E함수 \u003Ccode\u003ESizeof()\u003C\u002Fcode\u003E는 특정 타입의 변수가 몇 바이트를 사용하고 있는지 반환한다.\n함수 \u003Ccode\u003EOffsetof()\u003C\u002Fcode\u003E는 구조체의 필드가 구조체의 시작점으로부터 몇 바이트 떨어져 있는지 반환한다.\n함수 \u003Ccode\u003EAlignof()\u003C\u002Fcode\u003E는 변수 또는 필드가 얼마만큼 byte alignment를 필요로 하는지 반환한다.\n어떤 값이든 이 함수들의 파라미터로 보낼 수 있으며, 반환되는 값은 상수이므로 상수 표현식에 사용할 수 있다.\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Ccode\u003Eunsafe.Pointer\u003C\u002Fcode\u003E 타입은 모든 유형의 포인터를 \u003Ccode\u003Eunsafe.Pointer\u003C\u002Fcode\u003E로 변환하거나, 또는 \u003Ccode\u003Eunsafe.Pointer\u003C\u002Fcode\u003E를 변환하여 포인터를 얻을 수 있는 특별한 타입이다.\n또한 \u003Ccode\u003Eunsafe.Pointer\u003C\u002Fcode\u003E는 \u003Ccode\u003Euintptr\u003C\u002Fcode\u003E이라고 하는 특별한 정수형 타입으로도 변환할 수 있으며, C\u002FC++처럼 이 타입을 통해 수학적 연산도 가능하다.\n이렇게 하면 특정 타입의 인스턴스로 들어가서 각각의 바이트를 추출할 수 있으며, 바이트를 조작하면 변수의 실제 값이 변경된다.\u003C\u002Fp\u003E\n\u003Cp\u003E일반적으로 \u003Ccode\u003Eunsafe\u003C\u002Fcode\u003E 패키지를 사용하는 두 가지 패턴이 있다.\n첫 번째는 일반적으로 변환할 수 없는 두 타입간의 변수를 변환하는 것이다. \u003Ccode\u003Eunsafe.Pointer\u003C\u002Fcode\u003E를 가운데 두고 몇 단계의 타입 변환을 거쳐 수행할 수 있다.\n두 번째는 변수를 \u003Ccode\u003Eunsafe.Pointer\u003C\u002Fcode\u003E로 변환하고 \u003Ccode\u003Eunsafe.Pointer\u003C\u002Fcode\u003E를 \u003Ccode\u003Euintptr\u003C\u002Fcode\u003E로 변환한 다음, 바이트에 접근하여 복사하거나 조작하는 것이다.\u003C\u002Fp\u003E\n\u003Cbr\u003E\u003Cbr\u003E\n\u003Ch3 id=\"use-unsafe-to-convert-external-binary-data\"\u003E\u003Ca aria-hidden=\"true\" tabindex=\"-1\" href=\"#use-unsafe-to-convert-external-binary-data\"\u003E\u003Cspan class=\"icon icon-link\"\u003E\u003C\u002Fspan\u003E\u003C\u002Fa\u003EUse unsafe to Convert External Binary Data\u003C\u002Fh3\u003E\n\u003Cp\u003EGo는 메모리 안정성을 중요시 하는 언어인데 왜 \u003Ccode\u003Eunsafe\u003C\u002Fcode\u003E같은 패키지가 존재하는가에 대해 의문이 생길 것이다.\nGo 프로그램과 외부 세계의 사이에서 데이터를 변환하기 위해 \u003Ccode\u003Ereflect\u003C\u002Fcode\u003E를 사용하는 것처럼, 바이너리 데이터를 변환하기 위해 \u003Ccode\u003Eunsafe\u003C\u002Fcode\u003E를 사용한다.\n실제로 \u003Ccode\u003Eunsafe\u003C\u002Fcode\u003E가 사용되는 목적을 살펴보면 주로 운영체제 또는 C로 작성된 코드와의 통합을 위해 사용되거나, 코드 최적화를 위해 사용된다.\u003C\u002Fp\u003E\n\u003Cp\u003E특히 네트워크로부터 데이터를 읽어들이거나 전송할 때 \u003Ccode\u003Eunsafe\u003C\u002Fcode\u003E의 \u003Ccode\u003Eunsafe.Pointer\u003C\u002Fcode\u003E를 사용하여 데이터를 매핑하면 매우 빠르다.\n가령 다음과 같은 구조의 데이터 프로토콜이 있다고 해보자.\u003C\u002Fp\u003E\n\u003Cul\u003E\u003Cli\u003EValue: 4 바이트, big endian, unsigned int\u003C\u002Fli\u003E\n\u003Cli\u003ELabel: 10 바이트, 값에 대한 ASCII 이름\u003C\u002Fli\u003E\n\u003Cli\u003EActive: 1 바이트, 필드가 활성화되어 있는지 나타내기 위한 플래그\u003C\u002Fli\u003E\n\u003Cli\u003EPadding: 데이터를 16바이트로 맞춰주기 위한 Padding\u003C\u002Fli\u003E\u003C\u002Ful\u003E\n\u003Cblockquote\u003E\u003Cp\u003E네트워크상의 데이터는 대부분 Big endian 또는 Network Byte Order로, most significant byte가 가장 작은 주소에 할당된다.\n반면 오늘날 대부분의 CPU에서는 least significant byte가 가장 작은 주소에 할당되는 little endian을 사용한다.\n네트워크상의 데이터를 읽거나 쓸 때는 데이터의 처리에 주의해야 한다.\u003C\u002Fp\u003E\u003C\u002Fblockquote\u003E\n\u003Cbr\u003E\n\u003Cp\u003E다음과 같은 구조체를 정의한다.\u003C\u002Fp\u003E\n\u003Cpre class=\"language-go\"\u003E\u003C!-- HTML_TAG_START --\u003E\u003Ccode class=\"language-go\"\u003E\u003Cspan class=\"token keyword\"\u003Etype\u003C\u002Fspan\u003E Data \u003Cspan class=\"token keyword\"\u003Estruct\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n\tValue  \u003Cspan class=\"token builtin\"\u003Euint32\u003C\u002Fspan\u003E\n\tLabel  \u003Cspan class=\"token punctuation\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"token number\"\u003E10\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E]\u003C\u002Fspan\u003E\u003Cspan class=\"token builtin\"\u003Ebyte\u003C\u002Fspan\u003E\n\tActive \u003Cspan class=\"token builtin\"\u003Ebool\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token comment\"\u003E\u002F\u002F padded 1 byte\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C!-- HTML_TAG_END --\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E그리고, 네트워크로부터 다음과 같은 바이트 열을 읽었다고 가정해보자.\u003C\u002Fp\u003E\n\u003Cpre class=\"language-go\"\u003E\u003C!-- HTML_TAG_START --\u003E\u003Ccode class=\"language-go\"\u003E\u003Cspan class=\"token punctuation\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"token number\"\u003E0\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E132\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E95\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E237\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E80\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E104\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E111\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E110\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E101\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E0\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E0\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E0\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E0\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E0\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E1\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E0\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E]\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C!-- HTML_TAG_END --\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E이제 이 데이터를 길이가 16인 바이트로 읽은 후, \u003Ccode\u003EData\u003C\u002Fcode\u003E 구조체로 변환할 것이다.\n안전한 Go 코드에서는 다음과 같은 코드로 데이터 매핑을 할 수 있다.\u003C\u002Fp\u003E\n\u003Cpre class=\"language-go\"\u003E\u003C!-- HTML_TAG_START --\u003E\u003Ccode class=\"language-go\"\u003E\u003Cspan class=\"token keyword\"\u003Efunc\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003EDataFromBytes\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Eb \u003Cspan class=\"token punctuation\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"token number\"\u003E16\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E]\u003C\u002Fspan\u003E\u003Cspan class=\"token builtin\"\u003Ebyte\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E Data \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n\td \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E Data\u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\n\td\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003EValue \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E binary\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003EBigEndian\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EUint32\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Eb\u003Cspan class=\"token punctuation\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E:\u003C\u002Fspan\u003E\u003Cspan class=\"token number\"\u003E4\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E]\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token function\"\u003Ecopy\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Ed\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003ELabel\u003Cspan class=\"token punctuation\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E:\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E]\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E b\u003Cspan class=\"token punctuation\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"token number\"\u003E4\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E:\u003C\u002Fspan\u003E\u003Cspan class=\"token number\"\u003E14\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E]\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\td\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003EActive \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E b\u003Cspan class=\"token punctuation\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"token number\"\u003E14\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E]\u003C\u002Fspan\u003E \u003Cspan class=\"token operator\"\u003E!=\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E0\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token keyword\"\u003Ereturn\u003C\u002Fspan\u003E d\n\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C!-- HTML_TAG_END --\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E혹은 이렇게 \u003Ccode\u003Eunsafe.Pointer\u003C\u002Fcode\u003E를 사용할 수도 있다.\u003C\u002Fp\u003E\n\u003Cpre class=\"language-go\"\u003E\u003C!-- HTML_TAG_START --\u003E\u003Ccode class=\"language-go\"\u003E\u003Cspan class=\"token keyword\"\u003Efunc\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003EDataFromBytesUnsafe\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Eb \u003Cspan class=\"token punctuation\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"token number\"\u003E16\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E]\u003C\u002Fspan\u003E\u003Cspan class=\"token builtin\"\u003Ebyte\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E Data \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n\tdata \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E \u003Cspan class=\"token operator\"\u003E*\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E*\u003C\u002Fspan\u003EData\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Eunsafe\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EPointer\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E&amp;\u003C\u002Fspan\u003Eb\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token keyword\"\u003Eif\u003C\u002Fspan\u003E isLE \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n\t\tdata\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003EValue \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E bits\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EReverseBytes32\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Edata\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003EValue\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token keyword\"\u003Ereturn\u003C\u002Fspan\u003E data\n\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C!-- HTML_TAG_END --\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E먼저 \u003Ccode\u003E[16]byte\u003C\u002Fcode\u003E의 포인터를 \u003Ccode\u003Eunsafe.Pointer\u003C\u002Fcode\u003E로 변환한 후 이를 다시 \u003Ccode\u003E*Data\u003C\u002Fcode\u003E로 변환한다.\n구조체의 포인터가 아니라 값을 반환할 것이기 때문에 가장 바깥에서 \u003Ccode\u003E*\u003C\u002Fcode\u003E를 통해 포인터를 derefernce해준다.\n이때 little endian 플랫폼이라면 값을 뒤집어주는 작업을 거친 후 데이터를 반환해준다.\u003C\u002Fp\u003E\n\u003Cp\u003EGo 프로그램이 little endian 플랫폼에서 돌아가고 있는지 다음과 같이 확인할 수 있다.\u003C\u002Fp\u003E\n\u003Cpre class=\"language-go\"\u003E\u003C!-- HTML_TAG_START --\u003E\u003Ccode class=\"language-go\"\u003E\u003Cspan class=\"token keyword\"\u003Evar\u003C\u002Fspan\u003E isLE \u003Cspan class=\"token builtin\"\u003Ebool\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"token keyword\"\u003Efunc\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003Einit\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token keyword\"\u003Evar\u003C\u002Fspan\u003E x \u003Cspan class=\"token builtin\"\u003Euint16\u003C\u002Fspan\u003E \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E0xFF00\u003C\u002Fspan\u003E\n\txb \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E \u003Cspan class=\"token operator\"\u003E*\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E*\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"token number\"\u003E2\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E]\u003C\u002Fspan\u003E\u003Cspan class=\"token builtin\"\u003Ebyte\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Eunsafe\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EPointer\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E&amp;\u003C\u002Fspan\u003Ex\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\tisLE \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Exb\u003Cspan class=\"token punctuation\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"token number\"\u003E0\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E]\u003C\u002Fspan\u003E \u003Cspan class=\"token operator\"\u003E==\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E0x00\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C!-- HTML_TAG_END --\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E\u003Ccode\u003Einit()\u003C\u002Fcode\u003E 함수의 사용은 최대한 피해야 하지만, 지금의 경우는 실질적으로 변하지 않는 패키지 변수를 초기화하는 경우이므로 \u003Ccode\u003Einit()\u003C\u002Fcode\u003E을 사용하여 \u003Ccode\u003EisLE\u003C\u002Fcode\u003E를 초기화한다.\n프로그램 런타임 중 프로세서의 endian이 변할 일은 없기 때문에 적절한 용례라고 볼 수 있다.\u003C\u002Fp\u003E\n\u003Cp\u003Elitten endian 플랫폼에서는 \u003Ccode\u003Ex\u003C\u002Fcode\u003E의 바이트 열이 [00 FF]로 저장되지만 big endian 플랫폼에서는 [FF 00]으로 저장된다.\n따라서 \u003Ccode\u003Eunsafe.Pointer\u003C\u002Fcode\u003E로 정수를 바이트 열로 변환한 후, 첫 번째 바이트의 값을 확인하여 \u003Ccode\u003EisLE\u003C\u002Fcode\u003E를 결정할 수 있다.\u003C\u002Fp\u003E\n\u003Cbr\u003E\n\u003Cp\u003E마찬가지로 네트워크상에 데이터를 전송하는 경우, 안전한 Go 코드는 다음과 같다.\u003C\u002Fp\u003E\n\u003Cpre class=\"language-go\"\u003E\u003C!-- HTML_TAG_START --\u003E\u003Ccode class=\"language-go\"\u003E\u003Cspan class=\"token keyword\"\u003Efunc\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003EBytesFromData\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Ed Data\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"token number\"\u003E16\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E]\u003C\u002Fspan\u003E\u003Cspan class=\"token builtin\"\u003Ebyte\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n\tout \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"token number\"\u003E16\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E]\u003C\u002Fspan\u003E\u003Cspan class=\"token builtin\"\u003Ebyte\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\n\tbinary\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003EBigEndian\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EPutUint32\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Eout\u003Cspan class=\"token punctuation\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E:\u003C\u002Fspan\u003E\u003Cspan class=\"token number\"\u003E4\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E]\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E d\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003EValue\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token function\"\u003Ecopy\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Eout\u003Cspan class=\"token punctuation\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"token number\"\u003E4\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E:\u003C\u002Fspan\u003E\u003Cspan class=\"token number\"\u003E14\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E]\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E d\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003ELabel\u003Cspan class=\"token punctuation\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E:\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E]\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token keyword\"\u003Eif\u003C\u002Fspan\u003E d\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003EActive \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n\t\tout\u003Cspan class=\"token punctuation\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"token number\"\u003E14\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E]\u003C\u002Fspan\u003E \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E1\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token keyword\"\u003Ereturn\u003C\u002Fspan\u003E out\n\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C!-- HTML_TAG_END --\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E그리고 \u003Ccode\u003Eunsafe\u003C\u002Fcode\u003E를 사용하면 다음과 같다.\u003C\u002Fp\u003E\n\u003Cpre class=\"language-go\"\u003E\u003C!-- HTML_TAG_START --\u003E\u003Ccode class=\"language-go\"\u003E\u003Cspan class=\"token keyword\"\u003Efunc\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003EBytesFromDataUnsafe\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Ed Data\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"token number\"\u003E16\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E]\u003C\u002Fspan\u003E\u003Cspan class=\"token builtin\"\u003Ebyte\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token keyword\"\u003Eif\u003C\u002Fspan\u003E isLE \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n\t\td\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003EValue \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E bits\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EReverseBytes32\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Ed\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003EValue\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\n\tb \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E \u003Cspan class=\"token operator\"\u003E*\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E*\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"token number\"\u003E16\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E]\u003C\u002Fspan\u003E\u003Cspan class=\"token builtin\"\u003Ebyte\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Eunsafe\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EPointer\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E&amp;\u003C\u002Fspan\u003Ed\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token keyword\"\u003Ereturn\u003C\u002Fspan\u003E b\n\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C!-- HTML_TAG_END --\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E실제로 성능을 비교해보면, \u003Ccode\u003Eunsafe\u003C\u002Fcode\u003E를 사용한 코드가 두 배 가량 빠르다고 한다.\u003C\u002Fp\u003E\n\u003Cpre class=\"language-text\"\u003E\u003C!-- HTML_TAG_START --\u003E\u003Ccode class=\"language-text\"\u003EBenchmarkBytesFromData-12               127067046                9.444 ns\u002Fop\nBenchmarkBytesFromDataUnsafe-12         187575825                6.395 ns\u002Fop\nBenchmarkDataFromBytes-12               127086181                9.590 ns\u002Fop\nBenchmarkDataFromBytesUnsafe-12         135862089                8.999 ns\u002Fop\u003C\u002Fcode\u003E\u003C!-- HTML_TAG_END --\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E..나는 두 배가 아닌데..?\u003C\u002Fp\u003E\n\u003Cp\u003E어쨌든 이러한 로우레벨 기술을 활용하여 퍼포먼스를 끌어올려야 하는 프로그램에서는 유용하게 사용할 수 있을 것이다.\n다만 대부분의 프로그램에서는 이렇게까지 할 필요는 없고 그냥 안전한 코드를 쓰자.\u003C\u002Fp\u003E\n\u003Cbr\u003E\u003Cbr\u003E\n\u003Ch3 id=\"unsafe-strings-and-slices\"\u003E\u003Ca aria-hidden=\"true\" tabindex=\"-1\" href=\"#unsafe-strings-and-slices\"\u003E\u003Cspan class=\"icon icon-link\"\u003E\u003C\u002Fspan\u003E\u003C\u002Fa\u003Eunsafe Strings and Slices\u003C\u002Fh3\u003E\n\u003Cp\u003E\u003Ccode\u003Eunsafe\u003C\u002Fcode\u003E에서도 slice나 string을 사용할 수 있다.\u003C\u002Fp\u003E\n\u003Cp\u003E우선 \u003Ccode\u003Estring\u003C\u002Fcode\u003E은 기본적으로 byte 열의 포인터와 길이로 이루어 있다.\n\u003Ccode\u003Ereflect\u003C\u002Fcode\u003E 패키지에는 이러한 구조를 가지고 있는 \u003Ccode\u003Ereflect.StringHeader\u003C\u002Fcode\u003E라는 타입이 존재하며, 이를 통해 \u003Ccode\u003Estring\u003C\u002Fcode\u003E의 내부적 구조에 접근하여 조작할 수 있다.\n아래 예제는 길이 정보에 접근하는 예제이다.\u003C\u002Fp\u003E\n\u003Cpre class=\"language-go\"\u003E\u003C!-- HTML_TAG_START --\u003E\u003Ccode class=\"language-go\"\u003Es \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E\"hello\"\u003C\u002Fspan\u003E\nsHdr \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E*\u003C\u002Fspan\u003Ereflect\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003EStringHeader\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Eunsafe\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EPointer\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E&amp;\u003C\u002Fspan\u003Es\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\nfmt\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EPrintln\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003EsHdr\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003ELen\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C!-- HTML_TAG_END --\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E또한 \u003Ccode\u003EsHdr\u003C\u002Fcode\u003E의 \u003Ccode\u003EData\u003C\u002Fcode\u003E 필드에 접근하여 “pointer arithmetic”을 통해 문자열 내부의 바이트를 읽을 수 있다. 이때 피연산자의 타입은 \u003Ccode\u003Euintptr\u003C\u002Fcode\u003E여야 한다. C\u002FC++에서 보던 것과 유사한 접근이다!\u003C\u002Fp\u003E\n\u003Cpre class=\"language-go\"\u003E\u003C!-- HTML_TAG_START --\u003E\u003Ccode class=\"language-go\"\u003E\u003Cspan class=\"token keyword\"\u003Efor\u003C\u002Fspan\u003E i \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E0\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E i \u003Cspan class=\"token operator\"\u003E&lt;\u003C\u002Fspan\u003E sHdr\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003ELen\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E i\u003Cspan class=\"token operator\"\u003E++\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n\tbp \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E \u003Cspan class=\"token operator\"\u003E*\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E*\u003C\u002Fspan\u003E\u003Cspan class=\"token builtin\"\u003Ebyte\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Eunsafe\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EPointer\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003EsHdr\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003EData \u003Cspan class=\"token operator\"\u003E+\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003Euintptr\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Ei\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\tfmt\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EPrintln\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003Estring\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Ebp\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\nfmt\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EPrintln\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\nruntime\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EKeepAlive\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Es\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C!-- HTML_TAG_END --\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E\u003Ccode\u003Ereflect.StringHeader\u003C\u002Fcode\u003E의 \u003Ccode\u003EData\u003C\u002Fcode\u003E 필드는 \u003Ccode\u003Euintptr\u003C\u002Fcode\u003E 유형이다.\n그런데 가비지 컬렉터의 존재로 인해 \u003Ccode\u003Euintptr\u003C\u002Fcode\u003E을 통해 유효한 메모리를 단일 구문 이상 참조할 수는 없다.\n이때 \u003Ccode\u003Eruntime.KeepAlive(s)\u003C\u002Fcode\u003E를 함수의 마지막에 추가하면, Go 런타임의 가비지 컬렉터가 \u003Ccode\u003EKeepAlive()\u003C\u002Fcode\u003E를 호출할 때까지 \u003Ccode\u003Es\u003C\u002Fcode\u003E를 수집하지 않게 된다.\u003C\u002Fp\u003E\n\u003Cbr\u003E\n\u003Cp\u003E\u003Ccode\u003Eunsafe\u003C\u002Fcode\u003E 패키지를 통해 string으로부터 \u003Ccode\u003Ereflect.StringHeader\u003C\u002Fcode\u003E을 얻을 수 있듯, slice로부터 \u003Ccode\u003Ereflect.SliceHeader\u003C\u002Fcode\u003E를 얻을 수 있다.\n\u003Ccode\u003Ereflect.SliceHeader\u003C\u002Fcode\u003E에는 각각 \u003Ccode\u003ELen\u003C\u002Fcode\u003E, \u003Ccode\u003ECap\u003C\u002Fcode\u003E, \u003Ccode\u003EData\u003C\u002Fcode\u003E의 세 가지 필드가 있으며 각각 길이, 용량, 그리고 slice의 데이터를 가리키는 포인터이다.\u003C\u002Fp\u003E\n\u003Cpre class=\"language-go\"\u003E\u003C!-- HTML_TAG_START --\u003E\u003Ccode class=\"language-go\"\u003Es \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E]\u003C\u002Fspan\u003E\u003Cspan class=\"token builtin\"\u003Eint\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\u003Cspan class=\"token number\"\u003E10\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E20\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E30\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\nsHdr \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E*\u003C\u002Fspan\u003Ereflect\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003ESliceHeader\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Eunsafe\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EPointer\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E&amp;\u003C\u002Fspan\u003Es\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\nfmt\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EPrintln\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003EsHdr\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003ELen\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\nfmt\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EPrintln\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003EsHdr\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003ECap\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C!-- HTML_TAG_END --\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003Estring에서와 유사하게 \u003Ccode\u003E[]int\u003C\u002Fcode\u003E 포인터를 \u003Ccode\u003Eunsafe.Pointer\u003C\u002Fcode\u003E로 변환한 후, 이를 다시 \u003Ccode\u003Ereflect.SliceHeader\u003C\u002Fcode\u003E의 포인터로 변환한다. 이후 \u003Ccode\u003ELen\u003C\u002Fcode\u003E, \u003Ccode\u003ECap\u003C\u002Fcode\u003E 필드에 접근할 수 있다.\u003C\u002Fp\u003E\n\u003Cp\u003Eslice 또한 각 원소에 대해 이터레이션이 가능하다.\u003C\u002Fp\u003E\n\u003Cpre class=\"language-go\"\u003E\u003C!-- HTML_TAG_START --\u003E\u003Ccode class=\"language-go\"\u003EintByteSize \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E unsafe\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003ESizeof\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Es\u003Cspan class=\"token punctuation\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"token number\"\u003E0\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E]\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\nfmt\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EPrintln\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003EintByteSize\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\u003Cspan class=\"token keyword\"\u003Efor\u003C\u002Fspan\u003E i \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E0\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E i \u003Cspan class=\"token operator\"\u003E&lt;\u003C\u002Fspan\u003E sHdr\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003ELen\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E i\u003Cspan class=\"token operator\"\u003E++\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n\tintVal \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E \u003Cspan class=\"token operator\"\u003E*\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E*\u003C\u002Fspan\u003E\u003Cspan class=\"token builtin\"\u003Eint\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Eunsafe\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EPointer\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003EsHdr\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003EData \u003Cspan class=\"token operator\"\u003E+\u003C\u002Fspan\u003E intByteSize\u003Cspan class=\"token operator\"\u003E*\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003Euintptr\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Ei\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\tfmt\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EPrintln\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003EintVal\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\nruntime\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EKeepAlive\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Es\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C!-- HTML_TAG_END --\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E\u003Ccode\u003Eint\u003C\u002Fcode\u003E의 크기는 32비트 또는 64비트이기 때문에, 반드시 \u003Ccode\u003Eunsafe.Sizeof()\u003C\u002Fcode\u003E 함수로 \u003Ccode\u003EData\u003C\u002Fcode\u003E 필드의 각 값이 몇 바이트인지 확인해야 한다.\n이후 그 크기만큼 \u003Ccode\u003Euintptr\u003C\u002Fcode\u003E로 변환한 \u003Ccode\u003Ei\u003C\u002Fcode\u003E를 곱하면 \u003Ccode\u003EData\u003C\u002Fcode\u003E 필드의 각 데이터의 접근할 수 있다.\n마지막으로 \u003Ccode\u003Eint\u003C\u002Fcode\u003E 포인터로 변환해주고 dereference하면 값을 얻을 수 있다.\u003C\u002Fp\u003E\n\u003Cbr\u003E\u003Cbr\u003E\n\u003Ch3 id=\"unsafe-tools\"\u003E\u003Ca aria-hidden=\"true\" tabindex=\"-1\" href=\"#unsafe-tools\"\u003E\u003Cspan class=\"icon icon-link\"\u003E\u003C\u002Fspan\u003E\u003C\u002Fa\u003Eunsafe Tools\u003C\u002Fh3\u003E\n\u003Cp\u003E실행 명령어에 \u003Ccode\u003E-gcflags=-d=checkptr\u003C\u002Fcode\u003E 플래그를 붙이면 잘못 사용된 \u003Ccode\u003Eunsafe.Pointer\u003C\u002Fcode\u003E나 \u003Ccode\u003Euintptr\u003C\u002Fcode\u003E를 찾을 수 있다.\n이 플래그는 Race Checker처럼 모든 \u003Ccode\u003Eunsafe\u003C\u002Fcode\u003E 문제를 찾을 수 있는 것은 아니고 프로그램의 속도를 느리게 만들지만, 테스트 단계에서는 붙이는 것이 좋다.\u003C\u002Fp\u003E\n\u003Cp\u003Eunsafe는 유용한 로우 레벨 패키지이지만, 지금 무엇을 필요로 하는지 잘 모르거나 성능 향상이 필요한 게 아니라면 사용하지 않는 것이 좋다.\u003C\u002Fp\u003E\n\u003Cp\u003Eunsafe에 대해 더 알고싶다면 \u003Ca href=\"https:\u002F\u002Fpkg.go.dev\u002Funsafe\" rel=\"nofollow\"\u003E패키지 문서\u003C\u002Fa\u003E를 참조해 보자.\u003C\u002Fp\u003E\n\u003Cbr\u003E\u003Cbr\u003E\n\u003Ch2 id=\"cgo\"\u003E\u003Ca aria-hidden=\"true\" tabindex=\"-1\" href=\"#cgo\"\u003E\u003Cspan class=\"icon icon-link\"\u003E\u003C\u002Fspan\u003E\u003C\u002Fa\u003ECgo\u003C\u002Fh2\u003E\n\u003Chr\u003E\n\u003Cp\u003Ereflection이나 \u003Ccode\u003Eunsafe\u003C\u002Fcode\u003E와 마찬가지로, \u003Ccode\u003Ecgo\u003C\u002Fcode\u003E는 Go 프로그램과 외부 세계의 경계, 그 중 C 라이브러리와의 integration을 할 때 가장 유용하다.\u003C\u002Fp\u003E\n\u003Cp\u003EC는 매우 오래 된 언어임에도 불구하고, 프로그래밍 언어의 \u003Cspan style=\"background-color: var(--highlightYellow)\"\u003E\u003Cem\u003Elingua franca\u003C\u002Fem\u003E\u003C\u002Fspan\u003E로 자리잡고 있다. 거의 운영체제가 C나 C++로 작성되며, 이에 포함된 라이브러리들도 C로 작성되었다.\n따라서 거의 모든 언어가 C 라이브러리와 통합하는 방법을 제공한다. Go에서는 C에 대한 Foreign Function Interface(FFI)를 \u003Ccode\u003Ecgo\u003C\u002Fcode\u003E라고 이름붙였다.\u003C\u002Fp\u003E\n\u003Cp\u003EGo는 명시적인 것을 지향하는 언어이지만, \u003Ccode\u003Ecgo\u003C\u002Fcode\u003E는 뭔가 자동으로 알아서 해주는 느낌이 강하다. 직접 예제를 보자.\u003C\u002Fp\u003E\n\u003Cpre class=\"language-go\"\u003E\u003C!-- HTML_TAG_START --\u003E\u003Ccode class=\"language-go\"\u003E\u003Cspan class=\"token keyword\"\u003Epackage\u003C\u002Fspan\u003E main\n\n\u003Cspan class=\"token keyword\"\u003Eimport\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E\"fmt\"\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"token comment\"\u003E\u002F*\n   #cgo LDFLAGS: -lm\n   #include &lt;stdio.h\u003E\n   #include &lt;math.h\u003E\n   #include \"mylib.h\"\n\n   int add(int a, int b) &#123;\n       int sum = a + b;\n       printf(\"a: %d, b: %d, sum %d&#92;n\", a, b, sum);\n       return sum;\n   &#125;\n*\u002F\u003C\u002Fspan\u003E\n\u003Cspan class=\"token keyword\"\u003Eimport\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E\"C\"\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"token keyword\"\u003Efunc\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003Emain\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n\tsum \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E C\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003Eadd\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token number\"\u003E3\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E2\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\tfmt\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EPrintln\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Esum\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\tfmt\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EPrintln\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003EC\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003Esqrt\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token number\"\u003E100\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\tfmt\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EPrintln\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003EC\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003Emultiply\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token number\"\u003E10\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E20\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C!-- HTML_TAG_END --\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E일단, \u003Ccode\u003E\u002F**\u002F\u003C\u002Fcode\u003E로 묶인 주석이 \u003Cstrong\u003E반드시\u003C\u002Fstrong\u003E 필요하며, 주석과 \u003Ccode\u003Eimport &quot;C&quot;\u003C\u002Fcode\u003E 사이에는 빈 줄이 없어야 한다. 이 빈 줄때문에 컴파일이 안돼서 한참 찾았다..\u003C\u002Fp\u003E\n\u003Cp\u003E위 \u003Ccode\u003Emain.go\u003C\u002Fcode\u003E 파일과 같은 폴더 안에 각각 \u003Ccode\u003Emylib.h\u003C\u002Fcode\u003E, \u003Ccode\u003Emylib.c\u003C\u002Fcode\u003E을 생성하여 다음과 같이 작성해준다.\u003C\u002Fp\u003E\n\u003Cpre class=\"language-c\"\u003E\u003C!-- HTML_TAG_START --\u003E\u003Ccode class=\"language-c\"\u003E\u003Cspan class=\"token keyword\"\u003Eint\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003Emultiply\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token keyword\"\u003Eint\u003C\u002Fspan\u003E a\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token keyword\"\u003Eint\u003C\u002Fspan\u003E b\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C!-- HTML_TAG_END --\u003E\u003C\u002Fpre\u003E\n\u003Cpre class=\"language-c\"\u003E\u003C!-- HTML_TAG_START --\u003E\u003Ccode class=\"language-c\"\u003E\u003Cspan class=\"token macro property\"\u003E\u003Cspan class=\"token directive-hash\"\u003E#\u003C\u002Fspan\u003E\u003Cspan class=\"token directive keyword\"\u003Einclude\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E\"mylib.h\"\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"token keyword\"\u003Eint\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003Emultiply\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token keyword\"\u003Eint\u003C\u002Fspan\u003E a\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token keyword\"\u003Eint\u003C\u002Fspan\u003E b\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n    \u003Cspan class=\"token keyword\"\u003Ereturn\u003C\u002Fspan\u003E a \u003Cspan class=\"token operator\"\u003E*\u003C\u002Fspan\u003E b\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C!-- HTML_TAG_END --\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E그러고 나서 \u003Ccode\u003Ego build\u003C\u002Fcode\u003E 명령어로 컴파일하여 생성된 파일을 실행하면 다음과 같은 결과를 얻을 수 있을 것이다.\u003C\u002Fp\u003E\n\u003Cpre class=\"language-text\"\u003E\u003C!-- HTML_TAG_START --\u003E\u003Ccode class=\"language-text\"\u003E$ .\u002Fcgo\na: 3, b: 2, sum 5\n5\n10\n200\u003C\u002Fcode\u003E\u003C!-- HTML_TAG_END --\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E우선 \u003Ccode\u003EC\u003C\u002Fcode\u003E라는 패키지는 실존하는 표준 라이브러리가 아니다!\n\u003Ccode\u003EC\u003C\u002Fcode\u003E는 자동으로 생성되는 패키지이며, \u003Ccode\u003Eimport &quot;C&quot;\u003C\u002Fcode\u003E 위에 명시된 주석에 내장된 C 코드에서 대부분의 식별자가 정의된다.\n예제의 주석에서는 \u003Ccode\u003Eadd()\u003C\u002Fcode\u003E 함수를 선언하였고, \u003Ccode\u003EC.add()\u003C\u002Fcode\u003E로 그 함수를 불러와서 호출하였다.\n또한 주석 블록 안에서 import된 다른 함수나 전역변수 등도 불러올 수 있다. 이를테면 \u003Ccode\u003Emath.h\u003C\u002Fcode\u003E에서 불러온 \u003Ccode\u003EC.sqr()\u003C\u002Fcode\u003E나 \u003Ccode\u003Emylib.h\u003C\u002Fcode\u003E에서 불러온 \u003Ccode\u003EC.multiply()\u003C\u002Fcode\u003E처럼 말이다.\u003C\u002Fp\u003E\n\u003Cp\u003E이뿐 아니라 \u003Ccode\u003EC\u003C\u002Fcode\u003E 패키지에서는 C 내장 타입을 나타내기 위한 \u003Ccode\u003EC.int\u003C\u002Fcode\u003E나 \u003Ccode\u003EC.char\u003C\u002Fcode\u003E 타입 등도 정의하고 있으며, Go의 문자열을 C의 문자열로 변환하기 위한 \u003Ccode\u003EC.Cstring\u003C\u002Fcode\u003E 함수도 있다.\u003C\u002Fp\u003E\n\u003Cbr\u003E\n\u003Cp\u003E더 신기한 일도 가능하다. 이번에는 Go의 함수를 C로 export할 건데, Go의 함수 앞에 \u003Ccode\u003E\u002F\u002Fexport\u003C\u002Fcode\u003E 주석을 붙이면 할 수 있다. 먼저 \u003Ccode\u003Emain.go\u003C\u002Fcode\u003E의 소스코드를 작성한다.\u003C\u002Fp\u003E\n\u003Cpre class=\"language-go\"\u003E\u003C!-- HTML_TAG_START --\u003E\u003Ccode class=\"language-go\"\u003E\u003Cspan class=\"token keyword\"\u003Epackage\u003C\u002Fspan\u003E main\n\n\u003Cspan class=\"token comment\"\u003E\u002F*\n   extern int add(int a, int b);\n*\u002F\u003C\u002Fspan\u003E\n\u003Cspan class=\"token keyword\"\u003Eimport\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E\"C\"\u003C\u002Fspan\u003E\n\u003Cspan class=\"token keyword\"\u003Eimport\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E\"fmt\"\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"token comment\"\u003E\u002F\u002Fexport doubler\u003C\u002Fspan\u003E\n\u003Cspan class=\"token keyword\"\u003Efunc\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003Edoubler\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Ei \u003Cspan class=\"token builtin\"\u003Eint\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token builtin\"\u003Eint\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token keyword\"\u003Ereturn\u003C\u002Fspan\u003E i \u003Cspan class=\"token operator\"\u003E*\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E2\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"token keyword\"\u003Efunc\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003Emain\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n\tfmt\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EPrintln\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003EC\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003Eadd\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token number\"\u003E1\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E2\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C!-- HTML_TAG_END --\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E이제 \u003Ccode\u003Emain.go\u003C\u002Fcode\u003E와 동일한 디렉토리에 .c 파일을 생성하여 작성한다. 이 때 특수 헤더인 \u003Ccode\u003E&quot;_cgo_export.h&quot;\u003C\u002Fcode\u003E를 include해야 한다.\u003C\u002Fp\u003E\n\u003Cpre class=\"language-c\"\u003E\u003C!-- HTML_TAG_START --\u003E\u003Ccode class=\"language-c\"\u003E\u003Cspan class=\"token macro property\"\u003E\u003Cspan class=\"token directive-hash\"\u003E#\u003C\u002Fspan\u003E\u003Cspan class=\"token directive keyword\"\u003Einclude\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E\"_cgo_export.h\"\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"token keyword\"\u003Eint\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003Eadd\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token keyword\"\u003Eint\u003C\u002Fspan\u003E a\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token keyword\"\u003Eint\u003C\u002Fspan\u003E b\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n    \u003Cspan class=\"token keyword\"\u003Eint\u003C\u002Fspan\u003E doubleA \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003Edoubler\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Ea\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n    \u003Cspan class=\"token keyword\"\u003Eint\u003C\u002Fspan\u003E sum \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E doubleA \u003Cspan class=\"token operator\"\u003E+\u003C\u002Fspan\u003E b\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n    \u003Cspan class=\"token keyword\"\u003Ereturn\u003C\u002Fspan\u003E sum\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C!-- HTML_TAG_END --\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E위 예제를 실행하면 다음과 같은 결과를 얻는다.\u003C\u002Fp\u003E\n\u003Cpre class=\"language-text\"\u003E\u003C!-- HTML_TAG_START --\u003E\u003Ccode class=\"language-text\"\u003E$ .\u002Fexport\n4\u003C\u002Fcode\u003E\u003C!-- HTML_TAG_END --\u003E\u003C\u002Fpre\u003E\n\u003Cbr\u003E\n\u003Cp\u003E이렇듯 \u003Ccode\u003Ecgo\u003C\u002Fcode\u003E로 Go와 C의 함수를 상호 호출하는 것은 생각보다 간단하다.\n하지만 Go는 가비지 컬렉터가 존재하지만 C에는 없다는 점 때문에, 대수롭지 않은 Go 코드라도 C와 통합되기가 생각보다 쉽지 않다. 그래서 포인터를 C 코드로 보낼 수는 있지만, 포인터를 포함하는 무언가를 보낼 수는 없다. 이러한 점 때문에 문자열, 슬라이스, 함수 등 포인터로 구현된 것들은 C로 보낼 수 없다.\u003C\u002Fp\u003E\n\u003Cp\u003E또한 C 함수가 반환되어도 Go 포인터의 복사본을 가지고 있으면 안된다. Go가 가비지 컬렉팅을 하고 나면 포인터가 이상한 메모리 주소를 가리키게 되기 때문에, 프로그램이 컴파일은 되더라도 런타임에 죽거나 이상하게 동작할 수도 있다.\u003C\u002Fp\u003E\n\u003Cp\u003E다른 제약도 있다. \u003Ccode\u003Eprintf()\u003C\u002Fcode\u003E와 같이 가변적인 함수를 호출하기 위해 \u003Ccode\u003Ecgo\u003C\u002Fcode\u003E를 사용하면 안된다.\nC의 Union 타입은 바이트 어레이로 변환되며 C의 함수 포인터를 Go에서 호출할 수는 없지만, 변수에 저장해 두었다가 다시 C 함수로 전달할 수는 있다.\u003C\u002Fp\u003E\n\u003Cp\u003E이러한 규칙들 때문에 \u003Ccode\u003Ecgo\u003C\u002Fcode\u003E를 사용하기가 쉽지 않다.\n만약 Python이나 Ruby에 익숙하다면 \u003Ccode\u003Ecgo\u003C\u002Fcode\u003E같은 접근이 성능 측면에서 굉장한 이점이 있을 것임을 알 것이다. 실제로 Python의 NumPy는 C로 작성되기도 했다.\u003C\u002Fp\u003E\n\u003Cp\u003E하지만 Go는 파이썬이나 루비보다 훨씬 빠르다. 알고리즘을 로우 레벨에서 재작성할 필요가 크게 없다. 그리고 \u003Ccode\u003Ecgo\u003C\u002Fcode\u003E를 쓰더라도 성능 향상을 기대하기는 어렵다. C와 Go의 메모리 모델과 프로세싱 방법이 다르기 때문인데, Go에서 C 코드를 호출할 때 C에서 C 코드를 호출하는 것보다 대략 29배 느리다고 한다.\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Ccode\u003Ecgo\u003C\u002Fcode\u003E가 빠르지도 않고 사용하기도 쉽지 않지만, 사용하는 이유는 명확하다.\n반드시 사용해야 하는 C 라이브러리가 있지만 대체할 Go 라이브러리는 없는 경우일 때이다.\n만약 대체할 Go 라이브러리가 있다면, 웬만하면 그걸 쓰도록 하자.\u003C\u002Fp\u003E\n\u003Cbr\u003E\u003Cbr\u003E\n\u003Ch2 id=\"references\"\u003E\u003Ca aria-hidden=\"true\" tabindex=\"-1\" href=\"#references\"\u003E\u003Cspan class=\"icon icon-link\"\u003E\u003C\u002Fspan\u003E\u003C\u002Fa\u003EReferences\u003C\u002Fh2\u003E\n\u003Chr\u003E\n\u003Ccenter\u003E\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Flearning.oreilly.com\u002Flibrary\u002Fview\u002Flearning-go\u002F9781492077206\u002F\" rel=\"nofollow\"\u003E\u003Cimg src=\"https:\u002F\u002Flearning.oreilly.com\u002Fcovers\u002Furn:orm:book:9781492077206\u002F400w\u002F\" alt=\"Learning Go Book Cover\"\u003E\u003C\u002Fa\u003E \u003Cbr\u003E\n\u003Ca href=\"https:\u002F\u002Flearning.oreilly.com\u002Flibrary\u002Fview\u002Flearning-go\u002F9781492077206\u002F\" rel=\"nofollow\"\u003EJon Bodner, 『Learning Go』, O’Reilly Media, Inc.\u003C\u002Fa\u003E\u003C\u002Fp\u003E\u003C\u002Fcenter\u003E\n\u003Cbr\u003E\u003Cbr\u003E",{"title":3,"date":4,"excerpt":5,"categories":6,"coverImage":8,"coverWidth":9,"coverHeight":10,"slug":11},"Reflect, Unsafe, Cgo","2023-02-21T00:00:00.000Z","'Learning Go'를 읽고, Go의 런타입 타입 확인을 위한 Reflect, 에 대해 정리해보았습니다",[7],"Golang","\u002Fpost_img\u002FGolang_basics\u002Fcover.png",16,9,"Go\u002FGolang Basics\u002FGO14"],"uses":{"params":["post"]}}]}