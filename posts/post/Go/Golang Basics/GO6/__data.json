{"type":"data","nodes":[{"type":"data","data":[null],"uses":{}},{"type":"data","data":[{"PostContent":1,"meta":2},"\u003Cbr>\n\u003Cp>본 글은 Golang을 공부하며 주요 내용이라 생각되는 것들을 기록해둔 자료이며, Ubuntu 20.04 LTS 기준으로 작성되었습니다.\u003C/p>\n\u003Cbr>\u003Cbr>\n\u003Ch2 id=\"pointer\">\u003Ca aria-hidden=\"true\" tabindex=\"-1\" href=\"#pointer\">\u003Cspan class=\"icon icon-link\">\u003C/span>\u003C/a>Pointer\u003C/h2>\n\u003Chr>\n\u003Cp>놀랍게도 Go에는 포인터가 있다. C++ 공부하며 다신 보기 싫었던 친구인데 다시 보게 되니 감회가 새롭다.\n다들 알다시피 포인터는 특정 변수가 저장된 메모리의 주소를 가리키는 변수를 의미한다. C/C++의 포인터와 크게 다르지 않다.\u003C/p>\n\u003Cp>포인터 변수는 가리키고자 하는 메모리 주소의 첫 번째 byte address를 저장한다.\u003C/p>\n\u003Cpre class=\"language-go\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-go\">\u003Cspan class=\"token keyword\">var\u003C/span> x \u003Cspan class=\"token builtin\">int32\u003C/span> \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token number\">10\u003C/span>\n\u003Cspan class=\"token keyword\">var\u003C/span> y \u003Cspan class=\"token builtin\">bool\u003C/span> \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token boolean\">true\u003C/span>\n\npointerX \u003Cspan class=\"token operator\">:=\u003C/span> \u003Cspan class=\"token operator\">&amp;\u003C/span>x\npointerY \u003Cspan class=\"token operator\">:=\u003C/span> \u003Cspan class=\"token operator\">&amp;\u003C/span>y\n\u003Cspan class=\"token keyword\">var\u003C/span> pointerZ \u003Cspan class=\"token operator\">*\u003C/span>\u003Cspan class=\"token builtin\">string\u003C/span>\n\nfmt\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">Println\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>pointerX\u003Cspan class=\"token punctuation\">,\u003C/span> pointerY\u003Cspan class=\"token punctuation\">,\u003C/span> pointerZ\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token comment\">// addresses of variables\u003C/span>\nfmt\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">Println\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>pointerZ \u003Cspan class=\"token operator\">==\u003C/span> \u003Cspan class=\"token boolean\">nil\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>              \u003Cspan class=\"token comment\">// referencing *pointerZ occurs an runtime error(panics), because pointerZ is nil\u003C/span>\nfmt\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">Println\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token operator\">*\u003C/span>pointerX\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token operator\">*\u003C/span>pointerY\u003Cspan class=\"token punctuation\">)\u003C/span>         \u003Cspan class=\"token comment\">// * is indirection operator.\u003C/span>\n\u003Cspan class=\"token operator\">*\u003C/span>pointerX\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token operator\">*\u003C/span>pointerY \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token number\">8\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token boolean\">false\u003C/span>\nfmt\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">Println\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>x\u003Cspan class=\"token punctuation\">,\u003C/span> y\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token comment\">// by changing pointer's values, we can change origin value\u003C/span>\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre>\n\u003Cp>\u003Ccode>&amp;\u003C/code>는 변수의 주소값을 반환하는 연산자이며, \u003Ccode>*\u003C/code>는 indirection 연산자로, 해당 포인터가 가리키는 주소에 저장된 값을 반환한다.\n\u003Ccode>*\u003C/code>를 통해 메모리 주소에 저장된 값에 접근하는 것을 \u003Cstrong>dereferencing\u003C/strong>이라고 한다.\u003C/p>\n\u003Cp>위 코드의 출력 결과는 아래와 같다.\u003C/p>\n\u003Cpre class=\"language-go\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-go\">\u003Cspan class=\"token number\">0xc0000b8000\u003C/span> \u003Cspan class=\"token number\">0xc0000b8004\u003C/span> \u003Cspan class=\"token operator\">&lt;\u003C/span>\u003Cspan class=\"token boolean\">nil\u003C/span>\u003Cspan class=\"token operator\">>\u003C/span>\n\u003Cspan class=\"token boolean\">true\u003C/span>\n\u003Cspan class=\"token number\">10\u003C/span> \u003Cspan class=\"token boolean\">true\u003C/span>\n\u003Cspan class=\"token number\">8\u003C/span> \u003Cspan class=\"token boolean\">false\u003C/span>\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre>\n\u003Cp>위의 \u003Ccode>pointerZ\u003C/code> 변수처럼 포인터 변수를 선언하고 아무런 주소값도 할당하지 않으면 \u003Ccode>nil\u003C/code>이 할당된다. 포인터 변수의 Zero value가 \u003Ccode>nil\u003C/code>인 셈이다.\u003Cbr>\n만약 주소가 \u003Ccode>nil\u003C/code>인 접근하려고 하면 panic(런타임 에러)이 발생한다.\u003C/p>\n\u003Cbr>\n\u003Cp>\u003Ccode>new()\u003C/code> 함수는 포인터 변수를 생성하는 built-in 함수이다. 포인터가 가리키는 값은 파라미터로 주어진 타입의 Zero value로 초기화된다.\u003C/p>\n\u003Cpre class=\"language-go\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-go\">\u003Cspan class=\"token keyword\">var\u003C/span> a \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token function\">new\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token builtin\">int\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>      \u003Cspan class=\"token comment\">// built-in function &#96;new&#96; creates a pointer variable\u003C/span>\nfmt\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">Println\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>a \u003Cspan class=\"token operator\">==\u003C/span> \u003Cspan class=\"token boolean\">nil\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token comment\">// false\u003C/span>\nfmt\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">Println\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token operator\">*\u003C/span>a\u003Cspan class=\"token punctuation\">)\u003C/span>       \u003Cspan class=\"token comment\">// it points zero value of given type\u003C/span>\n\u003Cspan class=\"token operator\">*\u003C/span>a \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token number\">2\u003C/span>\nfmt\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">Println\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token operator\">*\u003C/span>a\u003Cspan class=\"token punctuation\">)\u003C/span>\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre>\n\u003Cp>근데 \u003Ccode>new()\u003C/code> 함수는 자주 쓰이지는 않는다고 한다.\u003C/p>\n\u003Cbr>\n\u003Cp>\u003Ccode>&amp;\u003C/code> 연산자를 통해서 상수나 리터럴의 주소값을 얻을 수는 없다. 이런 애들은 메모리 주소가 따로 존재하지 않기 때문이다.\u003C/p>\n\u003Cp>따라서 특정 값을 가진 포인터 변수를 생셩하려면, 먼저 일반 변수를 선언해서 값을 할당한 뒤, 해당 변수의 주소값을 넘겨주어야 한다.\u003C/p>\n\u003Cpre class=\"language-go\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-go\">\tx \u003Cspan class=\"token operator\">:=\u003C/span> \u003Cspan class=\"token operator\">&amp;\u003C/span>Foo\u003Cspan class=\"token punctuation\">&#123;\u003C/span>\u003Cspan class=\"token punctuation\">&#125;\u003C/span>\n\t\u003Cspan class=\"token comment\">// z := &amp;\"string\" // this statement occurs an error\u003C/span>\n\t\u003Cspan class=\"token keyword\">var\u003C/span> y \u003Cspan class=\"token builtin\">string\u003C/span>\n\tz \u003Cspan class=\"token operator\">:=\u003C/span> \u003Cspan class=\"token operator\">&amp;\u003C/span>y \u003Cspan class=\"token comment\">// to point to a primitive type, declare a variable first\u003C/span>\n\n\tfmt\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">Println\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>x\u003Cspan class=\"token punctuation\">,\u003C/span> z\u003Cspan class=\"token punctuation\">)\u003C/span>\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre>\n\u003Cp>이러한 방식이 직관적이기는 하지만 코드의 길이가 쓸데없이 길어진다는 단점이 있다.\n그렇다면 \u003Cem>helper function\u003C/em>이란 것을 만들어서 값을 할당해줄 수 있다.\u003C/p>\n\u003Cpre class=\"language-go\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-go\">\u003Cspan class=\"token keyword\">type\u003C/span> person \u003Cspan class=\"token keyword\">struct\u003C/span> \u003Cspan class=\"token punctuation\">&#123;\u003C/span>\n\tFirstName  \u003Cspan class=\"token builtin\">string\u003C/span>\n\tMiddleName \u003Cspan class=\"token operator\">*\u003C/span>\u003Cspan class=\"token builtin\">string\u003C/span>\n\tLastName   \u003Cspan class=\"token builtin\">string\u003C/span>\n\u003Cspan class=\"token punctuation\">&#125;\u003C/span>\n\n\u003Cspan class=\"token keyword\">func\u003C/span> \u003Cspan class=\"token function\">stringp\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>s \u003Cspan class=\"token builtin\">string\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token operator\">*\u003C/span>\u003Cspan class=\"token builtin\">string\u003C/span> \u003Cspan class=\"token punctuation\">&#123;\u003C/span>\n\t\u003Cspan class=\"token comment\">// helper function that returns address of parameter variable\u003C/span>\n\t\u003Cspan class=\"token keyword\">return\u003C/span> \u003Cspan class=\"token operator\">&amp;\u003C/span>s\n\u003Cspan class=\"token punctuation\">&#125;\u003C/span>\n\n\u003Cspan class=\"token keyword\">func\u003C/span> \u003Cspan class=\"token function\">main\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token punctuation\">&#123;\u003C/span>\n\tp \u003Cspan class=\"token operator\">:=\u003C/span> person\u003Cspan class=\"token punctuation\">&#123;\u003C/span>\n\t\tFirstName\u003Cspan class=\"token punctuation\">:\u003C/span> \u003Cspan class=\"token string\">\"Pat\"\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n\t\t\u003Cspan class=\"token comment\">// MiddleName: \"Perry\",  // or\u003C/span>\n\t\t\u003Cspan class=\"token comment\">// MiddleName: &amp;\"Perry\", // this lines won't compile\u003C/span>\n\t\tMiddleName\u003Cspan class=\"token punctuation\">:\u003C/span> \u003Cspan class=\"token function\">stringp\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token string\">\"Perry\"\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token comment\">// helper function turned a constant value into a pointer\u003C/span>\n\t\tLastName\u003Cspan class=\"token punctuation\">:\u003C/span>   \u003Cspan class=\"token string\">\"Peterson\"\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n\t\u003Cspan class=\"token punctuation\">&#125;\u003C/span>\n\n\tfmt\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">Println\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>p\u003Cspan class=\"token punctuation\">)\u003C/span>\n\u003Cspan class=\"token punctuation\">&#125;\u003C/span>\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre>\n\u003Cbr>\u003Cbr>\n\u003Ch2 id=\"passing-pointers\">\u003Ca aria-hidden=\"true\" tabindex=\"-1\" href=\"#passing-pointers\">\u003Cspan class=\"icon icon-link\">\u003C/span>\u003C/a>Passing Pointers\u003C/h2>\n\u003Chr>\n\u003Cbr>\n\u003Ch3 id=\"pass-by-pointer\">\u003Ca aria-hidden=\"true\" tabindex=\"-1\" href=\"#pass-by-pointer\">\u003Cspan class=\"icon icon-link\">\u003C/span>\u003C/a>Pass by Pointer\u003C/h3>\n\u003Cp>다들 알다시피, struct를 비롯한 원시 타입의 변수를 함수의 파라미터로 넘기면, 함수 안에서 해당 파라미터를 어떻게 수정하든 그 값이 바뀌지 않는다.\nGo는 \u003Cstrong>Call by Value\u003C/strong> 기반이기 때문.\u003C/p>\n\u003Cpre class=\"language-go\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-go\">\u003Cspan class=\"token keyword\">type\u003C/span> person \u003Cspan class=\"token keyword\">struct\u003C/span> \u003Cspan class=\"token punctuation\">&#123;\u003C/span>\n\tname \u003Cspan class=\"token builtin\">string\u003C/span>\n\tage  \u003Cspan class=\"token builtin\">int\u003C/span>\n\u003Cspan class=\"token punctuation\">&#125;\u003C/span>\n\n\u003Cspan class=\"token keyword\">func\u003C/span> \u003Cspan class=\"token function\">modifyFails\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>i \u003Cspan class=\"token builtin\">int\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> s \u003Cspan class=\"token builtin\">string\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> p person\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token punctuation\">&#123;\u003C/span> \u003Cspan class=\"token comment\">// all the parameters are passed by value(copied), not referenced or aliased\u003C/span>\n\ti \u003Cspan class=\"token operator\">*=\u003C/span> \u003Cspan class=\"token number\">2\u003C/span>\n\ts \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token string\">\"goodbye\"\u003C/span>\n\tp\u003Cspan class=\"token punctuation\">.\u003C/span>name \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token string\">\"Bob\"\u003C/span> \u003Cspan class=\"token comment\">// even for the struct, cannot change the origin value by modifying parameters.\u003C/span>\n\u003Cspan class=\"token punctuation\">&#125;\u003C/span>\n\n\u003Cspan class=\"token keyword\">func\u003C/span> \u003Cspan class=\"token function\">main\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token punctuation\">&#123;\u003C/span>\n\tp\u003Cspan class=\"token punctuation\">,\u003C/span> i\u003Cspan class=\"token punctuation\">,\u003C/span> s \u003Cspan class=\"token operator\">:=\u003C/span> person\u003Cspan class=\"token punctuation\">&#123;\u003C/span>\u003Cspan class=\"token punctuation\">&#125;\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token number\">2\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token string\">\"hello\"\u003C/span>\n\t\u003Cspan class=\"token function\">modifyFails\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>i\u003Cspan class=\"token punctuation\">,\u003C/span> s\u003Cspan class=\"token punctuation\">,\u003C/span> p\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token comment\">// this invocation of function can't make any change on variables above\u003C/span>\n\tfmt\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">Println\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>i\u003Cspan class=\"token punctuation\">,\u003C/span> s\u003Cspan class=\"token punctuation\">,\u003C/span> p\u003Cspan class=\"token punctuation\">)\u003C/span>\n\u003Cspan class=\"token punctuation\">&#125;\u003C/span>\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre>\n\u003Cbr>\n\u003Cp>다만 이는 파라미터로 넘기는 변수의 타입이 \u003Cem>slice\u003C/em>이거나 \u003Cem>map\u003C/em>이면 달라지는데, slice와 map은 \u003Cstrong>Pass by Pointer\u003C/strong>로 넘겨진다.\n따라서 파라미터로 받은 함수에서 값을 변경할 수 있다.\u003C/p>\n\u003Cpre class=\"language-go\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-go\">\u003Cspan class=\"token comment\">// slices and maps are passed passed by pointers\u003C/span>\n\u003Cspan class=\"token keyword\">func\u003C/span> \u003Cspan class=\"token function\">modifyMap\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>m \u003Cspan class=\"token keyword\">map\u003C/span>\u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token builtin\">int\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token builtin\">string\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token punctuation\">&#123;\u003C/span>\n\t\u003Cspan class=\"token comment\">// changing map parameters are reflected in the variables passed into the function\u003C/span>\n\tm\u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token number\">2\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span> \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token string\">\"hello\"\u003C/span>\n\tm\u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token number\">3\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span> \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token string\">\"goodbye\"\u003C/span>\n\u003Cspan class=\"token punctuation\">&#125;\u003C/span>\n\n\u003Cspan class=\"token keyword\">func\u003C/span> \u003Cspan class=\"token function\">modifySlice\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>s \u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token builtin\">int\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token punctuation\">&#123;\u003C/span>\n\t\u003Cspan class=\"token comment\">// we can modify any element in the slice, but can't lengthen the slice\u003C/span>\n\t\u003Cspan class=\"token keyword\">for\u003C/span> k\u003Cspan class=\"token punctuation\">,\u003C/span> v \u003Cspan class=\"token operator\">:=\u003C/span> \u003Cspan class=\"token keyword\">range\u003C/span> s \u003Cspan class=\"token punctuation\">&#123;\u003C/span>\n\t\ts\u003Cspan class=\"token punctuation\">[\u003C/span>k\u003Cspan class=\"token punctuation\">]\u003C/span> \u003Cspan class=\"token operator\">=\u003C/span> v \u003Cspan class=\"token operator\">*\u003C/span> \u003Cspan class=\"token number\">2\u003C/span>\n\t\u003Cspan class=\"token punctuation\">&#125;\u003C/span>\n\ts \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token function\">append\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>s\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token number\">10\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token comment\">// this line actually did not append a value to origin variable\u003C/span>\n\u003Cspan class=\"token punctuation\">&#125;\u003C/span>\n\n\u003Cspan class=\"token keyword\">func\u003C/span> \u003Cspan class=\"token function\">main\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token punctuation\">&#123;\u003C/span>\n    i \u003Cspan class=\"token operator\">:=\u003C/span> \u003Cspan class=\"token number\">20\u003C/span>\n    \u003Cspan class=\"token function\">modify\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>i\u003Cspan class=\"token punctuation\">)\u003C/span>\n    fmt\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">Println\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>i\u003Cspan class=\"token punctuation\">)\u003C/span>\n\u003Cspan class=\"token punctuation\">&#125;\u003C/span>\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre>\n\u003Cbr>\n\u003Cp>파라미터로 넘기는 변수를 포인터로 지정해주면 Pass by Pointer가 된다.\n이 경우 \u003Cem>dereferencing\u003C/em>을 통해 메모리 주소에 직접 접근하여 변수의 값을 변경할 수 있다.\n다만 포인터 변수에 새로운 변수의 주소값을 할당한다고 해서 원래의 값이 바뀌지는 않는다(아래 예제의 \u003Ccode>failedUpdate()\u003C/code>함수 참조).\u003C/p>\n\u003Cpre class=\"language-go\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-go\">\n\u003Cspan class=\"token keyword\">func\u003C/span> \u003Cspan class=\"token function\">update\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>g \u003Cspan class=\"token operator\">*\u003C/span>\u003Cspan class=\"token builtin\">int\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token punctuation\">&#123;\u003C/span>\n\t\u003Cspan class=\"token operator\">*\u003C/span>g \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token number\">10\u003C/span> \u003Cspan class=\"token comment\">// dereferencing => success to change original value\u003C/span>\n\u003Cspan class=\"token punctuation\">&#125;\u003C/span>\n\n\u003Cspan class=\"token keyword\">func\u003C/span> \u003Cspan class=\"token function\">failedUpdate\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>g \u003Cspan class=\"token operator\">*\u003C/span>\u003Cspan class=\"token builtin\">int\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token punctuation\">&#123;\u003C/span>\n\tx \u003Cspan class=\"token operator\">:=\u003C/span> \u003Cspan class=\"token number\">20\u003C/span>\n\tg \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token operator\">&amp;\u003C/span>x \u003Cspan class=\"token comment\">// where the pointer is pointing at is changed\u003C/span>\n\u003Cspan class=\"token punctuation\">&#125;\u003C/span>\n\n\u003Cspan class=\"token keyword\">func\u003C/span> \u003Cspan class=\"token function\">main\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token punctuation\">&#123;\u003C/span>\n\t\u003Cspan class=\"token keyword\">var\u003C/span> x \u003Cspan class=\"token operator\">*\u003C/span>\u003Cspan class=\"token builtin\">int\u003C/span>\n\t\u003Cspan class=\"token keyword\">var\u003C/span> y \u003Cspan class=\"token builtin\">int\u003C/span>\n\n\t\u003Cspan class=\"token comment\">// update(x) // this invocation occurs an error. cannot dereference nil\u003C/span>\n\t\u003Cspan class=\"token function\">update\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token operator\">&amp;\u003C/span>y\u003Cspan class=\"token punctuation\">)\u003C/span>\n\tfmt\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">Println\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>y\u003Cspan class=\"token punctuation\">)\u003C/span>\n\n\t\u003Cspan class=\"token function\">failedUpdate\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>x\u003Cspan class=\"token punctuation\">)\u003C/span>\n\t\u003Cspan class=\"token function\">failedUpdate\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token operator\">&amp;\u003C/span>y\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token comment\">// those two invocations cannot changed x and y's values\u003C/span>\n\n\tfmt\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">Println\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>x\u003Cspan class=\"token punctuation\">,\u003C/span> y\u003Cspan class=\"token punctuation\">)\u003C/span>\n\u003Cspan class=\"token punctuation\">&#125;\u003C/span>\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre>\n\u003Cbr>\n\u003Cp>따라서 위에서 보았던 \u003Ccode>modifySlice()\u003C/code> 함수에서, 파라미터로 넘긴 변수가 \u003Ccode>s = append(s, 10)\u003C/code> 라인에 의해 변경되지 않으리라는 것을 알 수 있다.\u003C/p>\n\u003Cpre class=\"language-go\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-go\">\u003Cspan class=\"token keyword\">func\u003C/span> \u003Cspan class=\"token function\">modifySlice\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>s \u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token builtin\">int\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token punctuation\">&#123;\u003C/span>\n\t\u003Cspan class=\"token comment\">// we can modify any element in the slice, but can't lengthen the slice\u003C/span>\n\t\u003Cspan class=\"token keyword\">for\u003C/span> k\u003Cspan class=\"token punctuation\">,\u003C/span> v \u003Cspan class=\"token operator\">:=\u003C/span> \u003Cspan class=\"token keyword\">range\u003C/span> s \u003Cspan class=\"token punctuation\">&#123;\u003C/span>\n\t\ts\u003Cspan class=\"token punctuation\">[\u003C/span>k\u003Cspan class=\"token punctuation\">]\u003C/span> \u003Cspan class=\"token operator\">=\u003C/span> v \u003Cspan class=\"token operator\">*\u003C/span> \u003Cspan class=\"token number\">2\u003C/span>\n\t\u003Cspan class=\"token punctuation\">&#125;\u003C/span>\n\ts \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token function\">append\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>s\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token number\">10\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token comment\">// this line actually did not append a value to origin variable\u003C/span>\n\u003Cspan class=\"token punctuation\">&#125;\u003C/span>\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre>\n\u003Cp>추가적으로, Go 내부적으로 slice는 원소들이 저장되는 메모리 주소에 대한 포인터, \u003Ccode>cap\u003C/code>, \u003Ccode>len\u003C/code>, 이렇게 세 개의 원소로 구성된 struct 구조체라고 볼 수 있다.\n따라서 slice가 파라미터로 넘어오면 원본 slice의 cap, len은 복사된 정수로 변경할 수 없는데 반해, 원소들이 저장된 메모리 공간에 대한 변경은 가능한 것이다.\u003C/p>\n\u003Cbr>\u003Cbr>\n\u003Ch3 id=\"avoid-passing-by-pointer\">\u003Ca aria-hidden=\"true\" tabindex=\"-1\" href=\"#avoid-passing-by-pointer\">\u003Cspan class=\"icon icon-link\">\u003C/span>\u003C/a>Avoid Passing by Pointer\u003C/h3>\n\u003Cp>일반적으로 구조체 등 데이터를 생성하거나 설정하고자 할 때, 이를 \u003Cem>Pass by Pointer\u003C/em>로 넘기는 방식은 직관적이지 않다.\n경우에 따라 오히려 이를 수행하는데 필요한 자원이 더 많이 소모하게 될 수도 있다.\u003C/p>\n\u003Cpre class=\"language-go\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-go\">\u003Cspan class=\"token keyword\">type\u003C/span> Foo \u003Cspan class=\"token keyword\">struct\u003C/span> \u003Cspan class=\"token punctuation\">&#123;\u003C/span>\n\tfoo \u003Cspan class=\"token builtin\">int\u003C/span>\n\tbar \u003Cspan class=\"token builtin\">string\u003C/span>\n\u003Cspan class=\"token punctuation\">&#125;\u003C/span>\n\n\u003Cspan class=\"token keyword\">func\u003C/span> \u003Cspan class=\"token function\">MakeFoo1\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>f \u003Cspan class=\"token operator\">*\u003C/span>Foo\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token builtin\">error\u003C/span> \u003Cspan class=\"token punctuation\">&#123;\u003C/span>\n\t\u003Cspan class=\"token comment\">// not +recommended format\u003C/span>\n\tf\u003Cspan class=\"token punctuation\">.\u003C/span>foo \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token number\">20\u003C/span>\n\tf\u003Cspan class=\"token punctuation\">.\u003C/span>bar \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token string\">\"val\"\u003C/span>\n\t\u003Cspan class=\"token keyword\">return\u003C/span> \u003Cspan class=\"token boolean\">nil\u003C/span>\n\u003Cspan class=\"token punctuation\">&#125;\u003C/span>\n\n\u003Cspan class=\"token comment\">// rather than using pointer parameter to pass a value, just return this.\u003C/span>\n\u003Cspan class=\"token keyword\">func\u003C/span> \u003Cspan class=\"token function\">MakeFoo2\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token punctuation\">(\u003C/span>Foo\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token builtin\">error\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token punctuation\">&#123;\u003C/span>\n\t\u003Cspan class=\"token comment\">// recommended format\u003C/span>\n\tf \u003Cspan class=\"token operator\">:=\u003C/span> Foo\u003Cspan class=\"token punctuation\">&#123;\u003C/span>\n\t\tfoo\u003Cspan class=\"token punctuation\">:\u003C/span> \u003Cspan class=\"token number\">20\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n\t\tbar\u003Cspan class=\"token punctuation\">:\u003C/span> \u003Cspan class=\"token string\">\"val\"\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n\t\u003Cspan class=\"token punctuation\">&#125;\u003C/span>\n\t\u003Cspan class=\"token keyword\">return\u003C/span> f\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token boolean\">nil\u003C/span>\n\u003Cspan class=\"token punctuation\">&#125;\u003C/span>\n\n\u003Cspan class=\"token keyword\">func\u003C/span> \u003Cspan class=\"token function\">main\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token punctuation\">&#123;\u003C/span>\n\ta \u003Cspan class=\"token operator\">:=\u003C/span> Foo\u003Cspan class=\"token punctuation\">&#123;\u003C/span>\u003Cspan class=\"token punctuation\">&#125;\u003C/span>\n\t\u003Cspan class=\"token function\">MakeFoo1\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token operator\">&amp;\u003C/span>a\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token comment\">// rather than using this pattern,\u003C/span>\n\n\tb\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token boolean\">_\u003C/span> \u003Cspan class=\"token operator\">:=\u003C/span> \u003Cspan class=\"token function\">MakeFoo2\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token comment\">// use this pattern\u003C/span>\n\n\tfmt\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">Println\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>a\u003Cspan class=\"token punctuation\">,\u003C/span> b\u003Cspan class=\"token punctuation\">)\u003C/span>\n\u003Cspan class=\"token punctuation\">&#125;\u003C/span>\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre>\n\u003Cp>위 예시처럼 \u003Cem>Pass by Pointer\u003C/em>를 사용하기보단, 그냥 그 값을 반환하는 형식이 시각적으로도 더 좋다.\u003C/p>\n\u003Cbr>\n\u003Cp>다만 예외사항이 좀 있다. 이를테면 JSON을 파싱하는 경우, \u003Ccode>Unmarshal()\u003C/code>과 같은 일부 함수들은 포인터 파라미터를 사용하기도 한다.\u003C/p>\n\u003Cpre class=\"language-go\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-go\">\tf \u003Cspan class=\"token operator\">:=\u003C/span> \u003Cspan class=\"token keyword\">struct\u003C/span> \u003Cspan class=\"token punctuation\">&#123;\u003C/span>\n\t\tName \u003Cspan class=\"token builtin\">string\u003C/span> \u003Cspan class=\"token string\">&#96;json:\"name\"&#96;\u003C/span>\n\t\tAge  \u003Cspan class=\"token builtin\">int\u003C/span>    \u003Cspan class=\"token string\">&#96;json:\"age\"&#96;\u003C/span>\n\t\u003Cspan class=\"token punctuation\">&#125;\u003C/span>\u003Cspan class=\"token punctuation\">&#123;\u003C/span>\u003Cspan class=\"token punctuation\">&#125;\u003C/span>\n\terr \u003Cspan class=\"token operator\">:=\u003C/span> json\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">Unmarshal\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token function\">byte\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token string\">&#96;&#123;\"name\": \"Bob\", \"age\": 30&#125;&#96;\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token operator\">&amp;\u003C/span>f\u003Cspan class=\"token punctuation\">)\u003C/span>\n\t\u003Cspan class=\"token keyword\">if\u003C/span> err \u003Cspan class=\"token operator\">==\u003C/span> \u003Cspan class=\"token boolean\">nil\u003C/span> \u003Cspan class=\"token punctuation\">&#123;\u003C/span>\n\t\tfmt\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">Println\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>f\u003Cspan class=\"token punctuation\">)\u003C/span>\n\t\u003Cspan class=\"token punctuation\">&#125;\u003C/span>\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre>\n\u003Cbr>\n\u003Cp>또는, 반환해야 할(또는 파라미터로 넘겨야 할) 데이터가 메가바이트 단위 이상일 경우, Pass by Pointer를 사용하는 것이 훨씬 빠르다고 한다.\u003C/p>\n\u003Cbr>\u003Cbr>\n\u003Ch2 id=\"garbage-collector\">\u003Ca aria-hidden=\"true\" tabindex=\"-1\" href=\"#garbage-collector\">\u003Cspan class=\"icon icon-link\">\u003C/span>\u003C/a>Garbage Collector\u003C/h2>\n\u003Chr>\n\u003Cp>Go에는 가비지 콜렉터가 존재한다. 이녀석의 역할은 더 이상 사용되지 않는 메모리 공간을 반환하는 것으로, Go는 메모리 관리를 프로그램 레벨에서 해준다.\n다만 가비지 콜렉터가 존재한다고 해도 생각없이 코드를 짜면 가비지 콜렉터의 워크로드가 늘어나 프로그램이 느려질 수 있다.\u003C/p>\n\u003Cbr>\n\u003Cpre class=\"language-go\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-go\">r \u003Cspan class=\"token operator\">:=\u003C/span> \u003Cspan class=\"token function\">open_resource\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\nwhile r\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">has_data\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token punctuation\">&#123;\u003C/span>\n\tdata_chunk \u003Cspan class=\"token operator\">:=\u003C/span> r\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">next_chunk\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\n\t\u003Cspan class=\"token function\">process\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>data_chunk\u003Cspan class=\"token punctuation\">)\u003C/span>\n\u003Cspan class=\"token punctuation\">&#125;\u003C/span>\nr\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">close\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre>\n\u003Cp>위 코드는 안좋은 예로, 매 이터레이션마다 \u003Ccode>r.next_chunk()\u003C/code>의 반환값을 받아들이는 \u003Ccode>data_chunk\u003C/code> 변수가 생성된다.\n이터레이션이 끝날 때마다 \u003Ccode>data_chunk\u003C/code>에 저장된 값은 필요 없는 메모리 공간이 되고, 가비지 콜렉터가 해야 하는 일이 쌓이게 되는 것이다.\u003C/p>\n\u003Cp>아래 예제는 \u003Cem>Slice\u003C/em>를 \u003Cem>Buffer\u003C/em>처럼 사용하여, 파일의 데이터를 읽어오는 예제이다.\n매 이터레이션마다 변수 \u003Ccode>data\u003C/code>에 값을 불러오고, 변수 \u003Ccode>data\u003C/code>는 전체 이터레이션에서 재사용되므로, 가비지 콜렉터가 해야 할 일이 줄어든다.\u003C/p>\n\u003Cpre class=\"language-go\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-go\">file\u003Cspan class=\"token punctuation\">,\u003C/span> err \u003Cspan class=\"token operator\">:=\u003C/span> os\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">Open\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>fileName\u003Cspan class=\"token punctuation\">)\u003C/span>\n\u003Cspan class=\"token keyword\">if\u003C/span> err \u003Cspan class=\"token operator\">!=\u003C/span> \u003Cspan class=\"token boolean\">nil\u003C/span> \u003Cspan class=\"token punctuation\">&#123;\u003C/span>\n\t\u003Cspan class=\"token keyword\">return\u003C/span> err\n\u003Cspan class=\"token punctuation\">&#125;\u003C/span>\n\u003Cspan class=\"token keyword\">defer\u003C/span> file\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">Close\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\n\n\u003Cspan class=\"token comment\">// this pattern is good at reducing the garbage collector's workload\u003C/span>\ndata \u003Cspan class=\"token operator\">:=\u003C/span> \u003Cspan class=\"token function\">make\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token builtin\">byte\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token number\">100\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token comment\">// using slice as a buffer\u003C/span>\n\u003Cspan class=\"token keyword\">for\u003C/span> \u003Cspan class=\"token punctuation\">&#123;\u003C/span>\n\tcount\u003Cspan class=\"token punctuation\">,\u003C/span> err \u003Cspan class=\"token operator\">:=\u003C/span> file\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">Read\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>data\u003Cspan class=\"token punctuation\">)\u003C/span>\n\t\u003Cspan class=\"token keyword\">if\u003C/span> err \u003Cspan class=\"token operator\">!=\u003C/span> \u003Cspan class=\"token boolean\">nil\u003C/span> \u003Cspan class=\"token punctuation\">&#123;\u003C/span>\n\t\t\u003Cspan class=\"token keyword\">return\u003C/span> err\n\t\u003Cspan class=\"token punctuation\">&#125;\u003C/span>\n\t\u003Cspan class=\"token keyword\">if\u003C/span> count \u003Cspan class=\"token operator\">==\u003C/span> \u003Cspan class=\"token number\">0\u003C/span> \u003Cspan class=\"token punctuation\">&#123;\u003C/span>\n\t\t\u003Cspan class=\"token keyword\">return\u003C/span> \u003Cspan class=\"token boolean\">nil\u003C/span>\n\t\u003Cspan class=\"token punctuation\">&#125;\u003C/span>\n\t\u003Cspan class=\"token function\">process\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>data\u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span>count\u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token comment\">// it passes next block of bytes in to the slice (up to 100)\u003C/span>\n\u003Cspan class=\"token punctuation\">&#125;\u003C/span>\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre>\n\u003Cbr>\n\u003Cp>Go에서는 기본적으로 \u003Cem>Stack\u003C/em>에 저장할 수 없는 가변적인 크기의 데이터들은 \u003Cem>Heap\u003C/em>에 저장되며, \u003Cem>Heap\u003C/em>은 가비지 콜렉터에 의해 관리된다.\n가비지 콜렉터는 어떠한 포인터도 가리키지 않는 데이터(\u003Cem>garbage\u003C/em>)들을 청소하는 알고리즘이다.\n사용가능한 데이터를 찾기 위해 한번에 최대한 많은 데이터를, 가능한한 빨리 찾게끔 디자인되어있기 때문에,\n우리가 짠 Go 코드가 \u003Cem>garbage\u003C/em>를 많이 생성할수록 \u003Cem>garbage\u003C/em>찾지 못할 확률이 높아지며, \u003Cem>garbage\u003C/em>를 찾는데 더욱 오래 걸리게 된다.\n게다가 보통 포인터가 가리키는 데이터들은 메모리 상에서 흩어져서 저장되기 때문에 찾기가 더 힘들어진다.\u003C/p>\n\u003Cp>비록 Go가 Python, Java, Javascript와 같은 여타 언어들에 비해 가비지 콜렉터의 성능이 뛰어난 편이라고는 해도,\n가비지 컬렉터가 해야 할 일을 줄여서 코드를 최적화시키는게 당연히 좋을 것이다.\u003C/p>\n\u003Cbr>\u003Cbr>\n\u003Ch2 id=\"references\">\u003Ca aria-hidden=\"true\" tabindex=\"-1\" href=\"#references\">\u003Cspan class=\"icon icon-link\">\u003C/span>\u003C/a>References\u003C/h2>\n\u003Chr>\n\u003Ccenter>\u003Cp>\u003Ca href=\"https://learning.oreilly.com/library/view/learning-go/9781492077206/\" rel=\"nofollow\">\u003Cimg src=\"https://learning.oreilly.com/covers/urn:orm:book:9781492077206/400w/\" alt=\"Learning Go Book Cover\">\u003C/a> \u003Cbr>\n\u003Ca href=\"https://learning.oreilly.com/library/view/learning-go/9781492077206/\" rel=\"nofollow\">Jon Bodner, 『Learning Go』, O’Reilly Media, Inc.\u003C/a>\u003C/p>\u003C/center>\n\u003Cbr>\u003Cbr>",{"title":3,"date":4,"excerpt":5,"categories":6,"coverImage":8,"coverWidth":9,"coverHeight":10,"indexed":11,"exposed":11,"slug":12},"포인터","2022-08-07T00:00:00.000Z","Pointer",[7],"Golang","/post_img/Go/Golang_basics/cover.png",16,9,true,"Go/Golang Basics/GO6"],"uses":{"params":["post"]}}]}
