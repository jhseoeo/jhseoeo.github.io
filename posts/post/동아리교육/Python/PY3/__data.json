{"type":"data","nodes":[{"type":"data","data":[null],"uses":{}},{"type":"data","data":[{"PostContent":1,"meta":2},"\u003Ciframe width=\"800\" height=\"500\" src=\"https://www.youtube.com/embed/YP43fn5I9qs\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen>\u003C/iframe>\n\u003Cbr>\u003Cbr>\n\u003Cdetails markdown=\"1\">\u003Csummary>예제 1 [String]\u003C/summary>\n문자열 하나를 인자로 받아 그 문자열이 몇 줄짜리인지 반환하는 함수 lineNum를 작성하시오.\n함수 호출 예시\n\u003Cpre class=\"language-python\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-python\">lineNum\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token string\">\"Line1&#92;nLine2&#92;nLine3\"\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\nlineNum\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token string\">\"저번영상&#92;n조회수 3이에요&#92;n시무룩..\"\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre>\n\u003Cp>함수 반환 예시\u003C/p>\n\u003Cpre class=\"language-python\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-python\">\u003Cspan class=\"token number\">3\u003C/span>\n\u003Cspan class=\"token number\">2\u003C/span>\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre>\n\u003Cdetails markdown=\"1\">\u003Csummary>정답\u003C/summary>\n\u003Cpre class=\"language-python\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-python\">\u003Cspan class=\"token keyword\">def\u003C/span> \u003Cspan class=\"token function\">lineNum\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>lines\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span>\n    \u003Cspan class=\"token keyword\">return\u003C/span> lines\u003Cspan class=\"token punctuation\">.\u003C/span>count\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token string\">'&#92;n'\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token operator\">+\u003C/span> \u003Cspan class=\"token number\">1\u003C/span>\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre>\u003C/details>\u003C/details>\n\u003Cbr>\n\u003Cdetails markdown=\"1\">\u003Csummary>예제 2 [String]\u003C/summary>\n\u003Cp>문자열을 뒤집었을 때, 그 결과가 원본과 같은 것을 팰린드롬 문자열 (palindrome)이라고 한다.\u003Cbr>\n문자열 하나를 인자로 받아 그 문자열이 팰린드롬인지 반환하는 함수 isPalindrome을 작성하시오.\u003Cbr>\n함수 호출 예시\u003C/p>\n\u003Cpre class=\"language-python\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-python\">isPalindrome\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token string\">\"tomato\"\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\nisPalindrome\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token string\">\"level\"\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre>\n\u003Cp>함수 반환 예시\u003C/p>\n\u003Cpre class=\"language-python\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-python\"> \u003Cspan class=\"token boolean\">False\u003C/span>\n \u003Cspan class=\"token boolean\">True\u003C/span>\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre>\n\u003Cdetails markdown=\"1\">\u003Csummary>정답\u003C/summary>\n\u003Cpre class=\"language-python\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-python\">\u003Cspan class=\"token keyword\">def\u003C/span> \u003Cspan class=\"token function\">isPalindrome\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>s\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span>\n    \u003Cspan class=\"token keyword\">return\u003C/span> s \u003Cspan class=\"token operator\">==\u003C/span> \u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span>\u003Cspan class=\"token operator\">-\u003C/span>\u003Cspan class=\"token number\">1\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span>\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre>\u003C/details>\u003C/details>\n\u003Cbr>\n\u003Cdetails markdown=\"1\">\u003Csummary>예제 3 [String]\u003C/summary>\n\u003Cp>문자열 두 개를 인자로 받는다. 이 문자열을 a, b라고 할 때 a에서 b를 찾아 \u003Cbr>\n모두 두 번 쓰는 함수 hongzinho를 작성하시오.\n함수 호출 예시\u003C/p>\n\u003Cpre class=\"language-python\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-python\">hongzinho\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token string\">\"2nd grade\"\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token string\">\"grade\"\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\nhongzinho\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token string\">\"This test is just a test\"\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token string\">\"test\"\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre>\n\u003Cp>함수 반환 예시\u003C/p>\n\u003Cpre class=\"language-python\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-python\">\u003Cspan class=\"token string\">\"2nd gradegrade\"\u003C/span>\n\u003Cspan class=\"token string\">\"This testtest is just a testtest\"\u003C/span>\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre>\n\u003Cdetails markdown=\"1\">\u003Csummary>정답\u003C/summary>\n\u003Cpre class=\"language-python\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-python\">\u003Cspan class=\"token keyword\">def\u003C/span> \u003Cspan class=\"token function\">hongzinho\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>line\u003Cspan class=\"token punctuation\">,\u003C/span> letter\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span>\n    \u003Cspan class=\"token keyword\">return\u003C/span> line\u003Cspan class=\"token punctuation\">.\u003C/span>replace\u003Cspan class=\"token punctuation\">(\u003C/span>letter\u003Cspan class=\"token punctuation\">,\u003C/span> letter\u003Cspan class=\"token operator\">*\u003C/span>\u003Cspan class=\"token number\">2\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre>\u003C/details>\u003C/details>\n\u003Cbr>\n\u003Cdetails markdown=\"1\">\u003Csummary>예제 4 [String, Recursion]\u003C/summary>\n\u003Cp>Recursion을 통해 String의 크기를 비교하는 함수 strcmp를 설계한다.\u003C/p>\n\u003Cul>\u003Cli>string 간의 직접적인 비교 연산 사용 X (len을 통한 길이 비교)\u003C/li>\n\u003Cli>chr() : 한 개의 문자(character)의 Unicode code point를 반환하는 함수\u003C/li>\u003C/ul>\n\u003Cp>함수 호출 예시\u003C/p>\n\u003Cpre class=\"language-python\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-python\">strcmp\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token string\">\"bcd\"\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token string\">\"abc\"\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\nstrcmp\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token string\">\"abc\"\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token string\">\"abd\"\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\nstrcmp\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token string\">\"abcd\"\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\u003Cspan class=\"token string\">\"abc\"\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\nstrcmp\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token string\">\"abc\"\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token string\">\"abcd\"\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\nstrcmp\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token string\">\"abc\"\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token string\">\"abc\"\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre>\n\u003Cp>함수 반환 예시\u003C/p>\n\u003Cpre class=\"language-python\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-python\"> \u003Cspan class=\"token number\">1\u003C/span>\n \u003Cspan class=\"token operator\">-\u003C/span>\u003Cspan class=\"token number\">1\u003C/span>\n \u003Cspan class=\"token number\">1\u003C/span>\n \u003Cspan class=\"token operator\">-\u003C/span>\u003Cspan class=\"token number\">1\u003C/span>\n \u003Cspan class=\"token number\">0\u003C/span>\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre>\n\u003Cpre class=\"language-python\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-python\">\u003Cspan class=\"token keyword\">def\u003C/span> \u003Cspan class=\"token function\">strcmp\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>s1\u003Cspan class=\"token punctuation\">,\u003C/span> s2\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span>\n\u003Cspan class=\"token triple-quoted-string string\">\"\"\"\ns1 > s2일 경우, 1 반환\ns1 == s2일 경우, 0 반환\ns1 &lt; s2일 경우, -1 반환\n\"\"\"\u003C/span>\n\n\u003Cspan class=\"token comment\">### 두 문자열이 일치하는 경우 #####\u003C/span>\n\u003Cspan class=\"token keyword\">if\u003C/span> \u003Cspan class=\"token builtin\">len\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>s1\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token operator\">==\u003C/span> \u003Cspan class=\"token number\">0\u003C/span> \u003Cspan class=\"token keyword\">and\u003C/span> \u003Cspan class=\"token builtin\">len\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>s2\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token operator\">==\u003C/span> \u003Cspan class=\"token number\">0\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span>\n\u003Cspan class=\"token comment\"># ???\u003C/span>\n\n\u003Cspan class=\"token comment\">### 한 문자열이 다른 문자열의 앞부분만 일치하는 경우 #####\u003C/span>\n\u003Cspan class=\"token keyword\">elif\u003C/span> \u003Cspan class=\"token builtin\">len\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>s1\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token operator\">==\u003C/span> \u003Cspan class=\"token number\">0\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span>\n\u003Cspan class=\"token comment\"># ???\u003C/span>\n\u003Cspan class=\"token keyword\">elif\u003C/span> \u003Cspan class=\"token builtin\">len\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>s2\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token operator\">==\u003C/span> \u003Cspan class=\"token number\">0\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span>\n\u003Cspan class=\"token comment\"># ???\u003C/span>\n\n\u003Cspan class=\"token comment\">### 특정 인덱스의 문자가 일치하지 않는 경우 #####\u003C/span>\n\u003Cspan class=\"token keyword\">elif\u003C/span> \u003Cspan class=\"token builtin\">ord\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>s1\u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token number\">0\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token operator\">>\u003C/span> \u003Cspan class=\"token builtin\">ord\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>s2\u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token number\">0\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span>\n\u003Cspan class=\"token comment\"># ???\u003C/span>\n\u003Cspan class=\"token keyword\">elif\u003C/span> \u003Cspan class=\"token builtin\">ord\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>s1\u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token number\">0\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token comment\"># s1 &lt; s2\u003C/span>\n\u003Cspan class=\"token comment\"># ???\u003C/span>\n\n\u003Cspan class=\"token comment\">### 특정 인덱스의 문자가 일치하는 경우 #####\u003C/span>\n\u003Cspan class=\"token keyword\">else\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span>\n\u003Cspan class=\"token comment\"># ???\u003C/span>\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre>\n\u003Cdetails markdown=\"1\">\u003Csummary>정답\u003C/summary>\n\u003Cpre class=\"language-python\">\u003C!-- HTML_TAG_START -->\u003Ccode class=\"language-python\">\n\u003Cspan class=\"token keyword\">def\u003C/span> \u003Cspan class=\"token function\">strcmp\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>s1\u003Cspan class=\"token punctuation\">,\u003C/span> s2\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span>\n\u003Cspan class=\"token triple-quoted-string string\">\"\"\"\ns1 > s2일 경우, 1 반환\ns1 == s2일 경우, 0 반환\ns1 &lt; s2일 경우, -1 반환\n\"\"\"\u003C/span>\n\n\u003Cspan class=\"token keyword\">if\u003C/span> \u003Cspan class=\"token builtin\">len\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>s1\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token operator\">==\u003C/span> \u003Cspan class=\"token number\">0\u003C/span> \u003Cspan class=\"token keyword\">and\u003C/span> \u003Cspan class=\"token builtin\">len\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>s2\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token operator\">==\u003C/span> \u003Cspan class=\"token number\">0\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span>\n    \u003Cspan class=\"token keyword\">return\u003C/span> \u003Cspan class=\"token number\">0\u003C/span>\n\u003Cspan class=\"token keyword\">elif\u003C/span> \u003Cspan class=\"token builtin\">len\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>s1\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token operator\">==\u003C/span> \u003Cspan class=\"token number\">0\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span>\n    \u003Cspan class=\"token keyword\">return\u003C/span> \u003Cspan class=\"token operator\">-\u003C/span>\u003Cspan class=\"token number\">1\u003C/span>\n\u003Cspan class=\"token keyword\">elif\u003C/span> \u003Cspan class=\"token builtin\">len\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>s2\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token operator\">==\u003C/span> \u003Cspan class=\"token number\">0\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span>\n    \u003Cspan class=\"token keyword\">return\u003C/span> \u003Cspan class=\"token number\">1\u003C/span>\n\u003Cspan class=\"token keyword\">elif\u003C/span> \u003Cspan class=\"token builtin\">ord\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>s1\u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token number\">0\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token operator\">>\u003C/span> \u003Cspan class=\"token builtin\">ord\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>s2\u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token number\">0\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span>\n    \u003Cspan class=\"token keyword\">return\u003C/span> \u003Cspan class=\"token number\">1\u003C/span>\n\u003Cspan class=\"token keyword\">elif\u003C/span> \u003Cspan class=\"token builtin\">ord\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>s1\u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token number\">0\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token comment\"># s1 &lt; s2\u003C/span>\n    \u003Cspan class=\"token keyword\">return\u003C/span> \u003Cspan class=\"token operator\">-\u003C/span>\u003Cspan class=\"token number\">1\u003C/span>\n\u003Cspan class=\"token keyword\">else\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span>\n    \u003Cspan class=\"token keyword\">return\u003C/span> strcmp\u003Cspan class=\"token punctuation\">(\u003C/span>s1\u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token number\">1\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> s2\u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token number\">1\u003C/span>\u003Cspan class=\"token punctuation\">:\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\n\u003C/code>\u003C!-- HTML_TAG_END -->\u003C/pre>\u003C/details>\u003C/details>\n\u003Cbr>",{"title":3,"date":4,"excerpt":5,"categories":6,"coverImage":8,"coverWidth":9,"coverHeight":10,"indexed":11,"slug":12},"3. Callback, Lambda function, Recursion","2022-03-26T00:00:00.000Z","Callback, Lambda function, Recursion",[7],"동아리교육","/post_img/동아리교육/22-1_return_python/cover.png",16,9,false,"동아리교육/Python/PY3"],"uses":{"params":["post"]}}]}
