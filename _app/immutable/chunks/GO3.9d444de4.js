import{S as ed,i as od,s as ld,k as t,a as i,q as e,l as p,c as k,m as u,r as o,h as s,n as r,U as CE,b as c,E as a,M as o2}from"./index.d78780bf.js";function cd(OE){let Gs,oe,Ks,ru,le,ce,ue,ie,ln,cn,ca,fu,ke,re,fe,Vn,ua,mu,bu,me,Wn,DE=`<code class="language-go"><span class="token keyword">var</span> arr <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token comment">// array declaration</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>
<span class="token comment">// var size int = 5	 // can not specify size of array with variables.</span>
<span class="token comment">// var arr [size]int // it occurs an error.</span></code>`,be,L,Eu,ia,vu,du,ka,_u,yu,ra,Pu,xu,fa,Cu,Ou,Ee,ve,de,Ns,Du,_e,qn,wE=`<code class="language-go"><span class="token comment">// declare with literal</span>
<span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">&#125;</span>                  <span class="token comment">// [1, 2, 3]</span>
<span class="token keyword">var</span> y <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">&#125;</span> <span class="token comment">// [1, 0, 0, 0, 0, 4, 6, 0, 0, 0, 100, 15]</span>
<span class="token keyword">var</span> z <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">&#125;</span>          <span class="token comment">// [4, 5, 6, 7, 8]</span></code>`,ye,E,wu,ma,Ru,Su,ba,zu,Lu,Ea,Hu,Bu,va,Mu,Au,da,Tu,Gu,Ku,Nu,_a,Zu,Vu,ya,Wu,qu,Pa,Uu,ju,xa,Fu,Iu,Pe,xe,Ce,un,Ju,Ca,Qu,Xu,Oe,Un,RE=`<code class="language-go">x<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">10</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// indexing by bracket</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span></code>`,De,we,Re,Zs,Yu,Se,jn,SE=`<code class="language-go"><span class="token keyword">var</span> multidimentional <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token comment">// multidimetional array</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>multidimentional<span class="token punctuation">)</span></code>`,ze,Le,He,I,$u,Oa,gu,hu,Da,ni,si,Be,Fn,zE=`<code class="language-go"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">&#125;</span>
<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">&#125;</span>
<span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">&#125;</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span> <span class="token comment">// prints true</span>
<span class="token comment">// fmt.Println(a == c) // occurs error</span></code>`,Me,Ae,Te,Ge,kn,rn,wa,ai,Ke,Ne,Ze,nn,Ra,ti,pi,ei,oi,Ve,In,LE=`<code class="language-go"><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">&#125;</span> <span class="token comment">// declaration + initialization</span>
<span class="token keyword">var</span> y <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">&#125;</span> <span class="token comment">// [1, 0, 0, 0, 0, 4, 6, 0, 0, 0, 100, 15]</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span>

x<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">10</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// indexing by bracket</span>

<span class="token keyword">var</span> multidimentional <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token comment">// multidimetional slice</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>multidimentional<span class="token punctuation">)</span>

fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// the number of current elements</span></code>`,We,qe,Ue,Vs,li,je,D,ci,Sa,ui,ii,za,ki,ri,La,fi,mi,Ha,bi,Ei,Ba,vi,di,Fe,Jn,HE=`<code class="language-go"><span class="token keyword">var</span> slice1 <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span>            <span class="token comment">// slice declaration</span>
<span class="token keyword">var</span> slice2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>        <span class="token comment">// zero-length slice</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>slice1<span class="token punctuation">,</span> slice2<span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>slice1 <span class="token operator">==</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> slice2 <span class="token operator">==</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>
<span class="token comment">// comparation between two slices occurs error; only possible comparation is the one between slice and nil</span></code>`,Ie,Ws,_i,Je,Qe,Xe,Qn,Ma,yi,Pi,Ye,Xn,BE=`<code class="language-go">initialized_capacity <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token comment">// make(type, length, capacity)</span>
<span class="token comment">// initialized_capacity := make([]int, 6, 5) // it occurs an error (length > capacity)</span></code>`,$e,ge,he,no,fn,mn,Aa,xi,so,ao,to,Z,Ci,Ta,Oi,Di,wi,Ri,Ga,Si,zi,po,bn,Li,Ka,Hi,Bi,eo,Yn,ME=`<code class="language-go"><span class="token comment">// capacity grows as it gets appended</span>
slice <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>slice<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>slice<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>slice<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>slice<span class="token punctuation">)</span><span class="token punctuation">)</span>
slice <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>slice<span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>slice<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>slice<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>slice<span class="token punctuation">)</span><span class="token punctuation">)</span>

tmp <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">&#125;</span>
slice <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>slice<span class="token punctuation">,</span> tmp<span class="token operator">...</span><span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>slice<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>slice<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>slice<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// append(slice, x...) => it occurs an error (append() returns an slice that the element is appended to.)</span></code>`,oo,w,Mi,Na,Ai,Ti,Za,Gi,Ki,Va,Ni,Zi,Wa,Vi,Wi,qa,qi,Ui,lo,co,uo,io,En,vn,Ua,ji,ko,ro,fo,J,Fi,ja,Ii,Ji,Fa,Qi,Xi,mo,$n,AE=`<code class="language-go">x <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">&#125;</span>
y <span class="token operator">:=</span> x<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span>
z <span class="token operator">:=</span> x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
d <span class="token operator">:=</span> x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span>
e <span class="token operator">:=</span> x<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">,</span> d<span class="token punctuation">,</span> e<span class="token punctuation">)</span></code>`,bo,P,Yi,Ia,$i,gi,Ja,hi,nk,Qa,sk,ak,Xa,tk,pk,Ya,ek,ok,$a,lk,ck,ga,uk,ik,Eo,gn,TE=`<code class="language-go">e<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>                   <span class="token comment">// Slicing overwraps storage</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">,</span> d<span class="token punctuation">,</span> e<span class="token punctuation">)</span> <span class="token comment">// value of x, z, d, e is changed</span></code>`,vo,_o,yo,qs,kk,Po,hn,GE=`<code class="language-go">fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">cap</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span>
y <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span> <span class="token comment">// appending an elements into y changes the mapped value of other slices, but not changes their length</span>

fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">,</span> d<span class="token punctuation">,</span> e<span class="token punctuation">)</span> <span class="token comment">// it's too confusing :(</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">cap</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span></code>`,xo,Co,Oo,R,rk,ha,fk,mk,nt,bk,Ek,st,vk,dk,at,_k,yk,tt,Pk,xk,Do,ns,KE='<code class="language-go"><span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">1</span> <span class="token number">4</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">2</span> <span class="token number">1</span> <span class="token number">4</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">2</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">1</span> <span class="token number">4</span><span class="token punctuation">]</span></code>',wo,Us,Ck,Ro,ss,NE='<code class="language-go"><span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">30</span> <span class="token number">4</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">30</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">2</span> <span class="token number">30</span> <span class="token number">4</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">2</span> <span class="token number">30</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">30</span> <span class="token number">4</span><span class="token punctuation">]</span></code>',So,b,pt,Ok,Dk,et,wk,Rk,ot,Sk,zk,lt,Lk,Hk,ct,Bk,Mk,ut,Ak,Tk,it,Gk,Kk,kt,Nk,Zk,rt,Vk,Wk,ft,qk,Uk,mt,jk,Fk,zo,Lo,Ho,js,Ik,Bo,as,ZE=`<code class="language-go">xx <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>
xx <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>xx<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>
yy <span class="token operator">:=</span> xx<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span>
zz <span class="token operator">:=</span> xx<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span>

fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">cap</span><span class="token punctuation">(</span>xx<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>yy<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>zz<span class="token punctuation">)</span><span class="token punctuation">)</span>
yy <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>yy<span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span>
xx <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>xx<span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">)</span>
zz <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>zz<span class="token punctuation">,</span> <span class="token number">70</span><span class="token punctuation">)</span>

fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"xx:"</span><span class="token punctuation">,</span> xx<span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"yy:"</span><span class="token punctuation">,</span> yy<span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"zz:"</span><span class="token punctuation">,</span> zz<span class="token punctuation">)</span></code>`,Mo,Fs,Jk,Ao,ts,VE=`<code class="language-go"><span class="token number">5</span> <span class="token number">5</span> <span class="token number">3</span>
xx<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">30</span> <span class="token number">40</span> <span class="token number">70</span><span class="token punctuation">]</span>
yy<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">30</span> <span class="token number">40</span> <span class="token number">70</span><span class="token punctuation">]</span>
zz<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">30</span> <span class="token number">40</span> <span class="token number">70</span><span class="token punctuation">]</span></code>`,To,Go,Ko,Is,bt,Js,l2,No,Zo,Vo,Qs,Qk,Wo,ps,WE=`<code class="language-go">xx <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>
xx <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>xx<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>
yy <span class="token operator">:=</span> xx<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span>
zz <span class="token operator">:=</span> xx<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span></code>`,qo,V,Xk,Et,Yk,$k,vt,gk,hk,dt,nr,sr,Uo,es,qE=`<code class="language-go">xx<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span><span class="token punctuation">]</span> <span class="token builtin">len</span><span class="token operator">=</span><span class="token number">4</span> <span class="token builtin">cap</span><span class="token operator">=</span><span class="token number">5</span>
yy<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token builtin">len</span><span class="token operator">=</span><span class="token number">2</span> <span class="token builtin">cap</span><span class="token operator">=</span><span class="token number">5</span>
zz<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">3</span> <span class="token number">4</span><span class="token punctuation">]</span> <span class="token builtin">len</span><span class="token operator">=</span><span class="token number">2</span> <span class="token builtin">cap</span><span class="token operator">=</span><span class="token number">3</span></code>`,jo,H,ar,_t,tr,pr,yt,er,or,Pt,lr,cr,xt,ur,ir,Fo,os,UE=`<code class="language-go">xx<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">30</span> <span class="token number">40</span><span class="token punctuation">]</span> <span class="token builtin">len</span><span class="token operator">=</span><span class="token number">4</span> <span class="token builtin">cap</span><span class="token operator">=</span><span class="token number">5</span>
yy<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">30</span> <span class="token number">40</span> <span class="token number">50</span><span class="token punctuation">]</span> <span class="token builtin">len</span><span class="token operator">=</span><span class="token number">5</span> <span class="token builtin">cap</span><span class="token operator">=</span><span class="token number">5</span>
zz<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">30</span> <span class="token number">40</span><span class="token punctuation">]</span> <span class="token builtin">len</span><span class="token operator">=</span><span class="token number">2</span> <span class="token builtin">cap</span><span class="token operator">=</span><span class="token number">3</span></code>`,Io,Jo,Qo,f,Ct,kr,rr,Ot,fr,mr,Dt,br,Er,wt,vr,dr,Rt,_r,yr,St,Pr,xr,zt,Cr,Or,Lt,Dr,wr,Ht,Rr,Sr,Bt,zr,Lr,Mt,Hr,Br,At,Mr,Ar,Tr,Gr,Tt,Kr,Nr,Xo,ls,jE=`<code class="language-go">xx<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">30</span> <span class="token number">40</span> <span class="token number">60</span><span class="token punctuation">]</span> <span class="token builtin">len</span><span class="token operator">=</span><span class="token number">5</span> <span class="token builtin">cap</span><span class="token operator">=</span><span class="token number">5</span>
yy<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">30</span> <span class="token number">40</span> <span class="token number">60</span><span class="token punctuation">]</span> <span class="token builtin">len</span><span class="token operator">=</span><span class="token number">5</span> <span class="token builtin">cap</span><span class="token operator">=</span><span class="token number">5</span>
zz<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">30</span> <span class="token number">40</span><span class="token punctuation">]</span> <span class="token builtin">len</span><span class="token operator">=</span><span class="token number">2</span> <span class="token builtin">cap</span><span class="token operator">=</span><span class="token number">3</span></code>`,Yo,T,Gt,Zr,Vr,Kt,Wr,qr,Ur,jr,Nt,Fr,Ir,$o,cs,FE=`<code class="language-go">xx<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">30</span> <span class="token number">40</span> <span class="token number">70</span><span class="token punctuation">]</span> <span class="token builtin">len</span><span class="token operator">=</span><span class="token number">5</span> <span class="token builtin">cap</span><span class="token operator">=</span><span class="token number">5</span>
yy<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">30</span> <span class="token number">40</span> <span class="token number">70</span><span class="token punctuation">]</span> <span class="token builtin">len</span><span class="token operator">=</span><span class="token number">5</span> <span class="token builtin">cap</span><span class="token operator">=</span><span class="token number">5</span>
zz<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">30</span> <span class="token number">40</span> <span class="token number">70</span><span class="token punctuation">]</span> <span class="token builtin">len</span><span class="token operator">=</span><span class="token number">3</span> <span class="token builtin">cap</span><span class="token operator">=</span><span class="token number">3</span></code>`,go,G,Zt,Jr,Qr,Vt,Xr,Yr,Wt,$r,gr,qt,hr,nf,ho,nl,sl,B,sf,Ut,af,tf,jt,pf,ef,Ft,of,lf,It,cf,uf,al,us,IE=`<code class="language-go">xxx <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">&#125;</span>
yyy <span class="token operator">:=</span> xxx<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token comment">// limits capacity of slice, they not share additional capacity</span>
zzz <span class="token operator">:=</span> xxx<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span>

fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">cap</span><span class="token punctuation">(</span>xxx<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>yyy<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>zzz<span class="token punctuation">)</span><span class="token punctuation">)</span>
yyy <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>yyy<span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span> <span class="token comment">// this appending never interacts with other slices</span>
xxx <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>xxx<span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">)</span>
zzz <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>zzz<span class="token punctuation">,</span> <span class="token number">70</span><span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>xxx<span class="token punctuation">,</span> yyy<span class="token punctuation">,</span> zzz<span class="token punctuation">)</span></code>`,tl,Xs,kf,pl,is,JE=`<code class="language-go"><span class="token number">5</span> <span class="token number">2</span> <span class="token number">2</span>
<span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span> <span class="token number">5</span> <span class="token number">60</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">30</span> <span class="token number">40</span> <span class="token number">50</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">3</span> <span class="token number">4</span> <span class="token number">70</span><span class="token punctuation">]</span></code>`,el,ol,ll,Ys,rf,cl,ks,QE=`<code class="language-go">ax <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">&#125;</span>
ay <span class="token operator">:=</span> ax<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token comment">// slicing array</span>
az <span class="token operator">:=</span> ax<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
ax<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">10</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>ax<span class="token punctuation">,</span> ay<span class="token punctuation">,</span> az<span class="token punctuation">)</span></code>`,ul,il,kl,rl,dn,_n,Jt,ff,fl,ml,bl,Q,mf,Qt,bf,Ef,Xt,vf,df,El,rs,XE=`<code class="language-go">x <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">&#125;</span>
y <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>

num <span class="token operator">:=</span> <span class="token function">copy</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span> x<span class="token punctuation">)</span>   <span class="token comment">// copy(destination, source). x is copied into y</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span> num<span class="token punctuation">)</span> <span class="token comment">// num: the number of elements copied (decided by length of slices)</span>
y<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>            <span class="token comment">// if we change any value of y,</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span> x<span class="token punctuation">)</span>   <span class="token comment">// values of x still unchanged (doesn't share memory spaces)</span></code>`,vl,dl,_l,fs,Yt,_f,yf,yl,ms,YE=`<code class="language-go">z <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token comment">// because length of z is 2,</span>
num <span class="token operator">=</span> <span class="token function">copy</span><span class="token punctuation">(</span>z<span class="token punctuation">,</span> x<span class="token punctuation">)</span>       <span class="token comment">// when it is copied, only two of x are copied.</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>z<span class="token punctuation">,</span> num<span class="token punctuation">)</span>    <span class="token comment">// [1, 2] 2</span></code>`,Pl,xl,Cl,bs,$t,Pf,xf,Ol,Es,$E=`<code class="language-go">w <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token comment">//</span>
num <span class="token operator">=</span> <span class="token function">copy</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> x<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>   <span class="token comment">// because x[:2] has only two element (length is 2),</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> num<span class="token punctuation">)</span>    <span class="token comment">// x[:2] is copied into first two elements</span></code>`,Dl,$s,Cf,wl,vs,gE=`<code class="language-go">q <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">&#125;</span>
num <span class="token operator">=</span> <span class="token function">copy</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> q<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// [2, 3, 4] is copied into [1, 2, 3]</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span> num<span class="token punctuation">)</span>      <span class="token comment">// [2, 3, 4, 4]</span></code>`,Rl,Sl,zl,Ll,yn,Pn,gt,Of,Hl,Bl,Ml,sn,ht,Df,wf,np,Rf,Sf,Al,ds,hE=`<code class="language-go"><span class="token keyword">var</span> s <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">"Hello there"</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment">// slicing string</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code>`,Tl,xn,zf,sp,Lf,Hf,Gl,_s,nv=`<code class="language-go"><span class="token keyword">var</span> h <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">"한글조아"</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// each character of korean letter takes 3 bytes, slicing like below would not be done properly</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>h<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>h<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>h<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code>`,Kl,C,ap,Bf,Mf,tp,Af,Tf,pp,Gf,Kf,ep,Nf,Zf,op,Vf,Wf,lp,qf,Uf,Nl,ys,sv=`<code class="language-go"><span class="token comment">// difference of rune and byte</span>
<span class="token keyword">var</span> ss <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">"Hello 안녕"</span>
<span class="token keyword">var</span> bs <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>ss<span class="token punctuation">)</span> <span class="token comment">// []byte splits UTF-8 characters. usually use this.</span>
<span class="token keyword">var</span> rs <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">rune</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">rune</span><span class="token punctuation">(</span>ss<span class="token punctuation">)</span> <span class="token comment">// []rune doesn't split</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>bs<span class="token punctuation">,</span> rs<span class="token punctuation">)</span></code>`,Zl,W,jf,cp,Ff,If,up,Jf,Qf,ip,Xf,Yf,Vl,Wl,ql,Ul,Cn,On,kp,$f,jl,Fl,Il,x,rp,gf,hf,fp,nm,sm,am,tm,mp,pm,em,bp,om,lm,Ep,cm,um,vp,im,km,Jl,Ps,av=`<code class="language-go"><span class="token keyword">var</span> nilMap <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span>
mamap <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>nilMap<span class="token punctuation">,</span> mamap<span class="token punctuation">,</span> nilMap <span class="token operator">==</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> mamap <span class="token operator">==</span> <span class="token boolean">nil</span><span class="token punctuation">)</span></code>`,Ql,Xl,Yl,M,rm,dp,fm,mm,_p,bm,Em,yp,vm,dm,Pp,_m,ym,$l,xs,tv=`<code class="language-go"><span class="token keyword">var</span> teams <span class="token operator">=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">&#123;</span>
    <span class="token string">"Orcas"</span><span class="token punctuation">:</span>   <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">&#123;</span><span class="token string">"Fred"</span><span class="token punctuation">,</span> <span class="token string">"Ralph"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token string">"Lions"</span><span class="token punctuation">:</span>   <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">&#123;</span><span class="token string">"Sarah"</span><span class="token punctuation">,</span> <span class="token string">"Peter"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token string">"Kittens"</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token string">"Waldo"</span><span class="token punctuation">,</span> <span class="token string">"Raul"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token comment">// 이렇게 해도 됨</span>
<span class="token punctuation">&#125;</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>teams<span class="token punctuation">)</span></code>`,gl,hl,nc,an,xp,Pm,xm,Cp,Cm,Om,sc,Cs,pv=`<code class="language-go">ages <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>ages<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>ages<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// len() returns the number of key-value pairs of map</span></code>`,ac,tc,pc,gs,Dm,ec,Os,ev=`<code class="language-go">totalWins <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
totalWins<span class="token punctuation">[</span><span class="token string">"Orcas"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token comment">// assigning value into specific key with =, not :=</span>
totalWins<span class="token punctuation">[</span><span class="token string">"Lions"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>totalWins<span class="token punctuation">[</span><span class="token string">"Orcas"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>totalWins<span class="token punctuation">[</span><span class="token string">"Kittens"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// an initial value of int is zero.</span>
totalWins<span class="token punctuation">[</span><span class="token string">"Kittens"</span><span class="token punctuation">]</span><span class="token operator">++</span>            <span class="token comment">// value of "Kittens" would be 1</span>
totalWins<span class="token punctuation">[</span><span class="token string">"Lions"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>totalWins<span class="token punctuation">[</span><span class="token string">"Kittens"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>totalWins<span class="token punctuation">[</span><span class="token string">"Lions"</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code>`,oc,lc,cc,hs,wm,uc,Ds,ov=`<code class="language-go">m <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span>
    <span class="token string">"Hello"</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span>
    <span class="token string">"world"</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span></code>`,ic,q,Rm,Op,Sm,zm,Dp,Lm,Hm,wp,Bm,Mm,kc,ws,lv=`<code class="language-go"><span class="token comment">// comma idiom</span>
v<span class="token punctuation">,</span> ok <span class="token operator">:=</span> m<span class="token punctuation">[</span><span class="token string">"Hello"</span><span class="token punctuation">]</span> <span class="token comment">// v gets value of the given key</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> ok<span class="token punctuation">)</span>  <span class="token comment">// ok gets if the key exists in map</span>

v<span class="token punctuation">,</span> ok <span class="token operator">=</span> m<span class="token punctuation">[</span><span class="token string">"world"</span><span class="token punctuation">]</span> <span class="token comment">// though v gets zero value,</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> ok<span class="token punctuation">)</span> <span class="token comment">// ok gets true because "world" exists in map</span>

v<span class="token punctuation">,</span> ok <span class="token operator">=</span> m<span class="token punctuation">[</span><span class="token string">"nono"</span><span class="token punctuation">]</span>  <span class="token comment">// "nono" doesn't exist in map, so ok gets false</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> ok<span class="token punctuation">)</span> <span class="token comment">// v gets zero value,</span>

<span class="token function">delete</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> <span class="token string">"Hello"</span><span class="token punctuation">)</span> <span class="token comment">// deletes key "Hello" from the map</span>
v<span class="token punctuation">,</span> ok <span class="token operator">=</span> m<span class="token punctuation">[</span><span class="token string">"Hello"</span><span class="token punctuation">]</span> <span class="token comment">// the key doesn't exist in map as it is deleted</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> ok<span class="token punctuation">)</span></code>`,rc,v,Am,Rp,Tm,Gm,Sp,Km,Nm,zp,Zm,Vm,Lp,Wm,qm,Hp,Um,jm,Bp,Fm,Im,Mp,Jm,Qm,Ap,Xm,Ym,Tp,$m,gm,Gp,hm,n1,fc,mc,bc,Ec,Dn,wn,Kp,s1,vc,dc,_c,A,a1,Np,t1,p1,Zp,e1,o1,Vp,l1,c1,Wp,u1,i1,yc,Rs,cv=`<code class="language-go"><span class="token keyword">type</span> person <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span> <span class="token comment">// define struct type</span>
    name <span class="token builtin">string</span>
    age  <span class="token builtin">int</span>
    pet  <span class="token builtin">string</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">var</span> john person <span class="token comment">// struct variable declaration</span>
<span class="token keyword">var</span> james <span class="token operator">=</span> person<span class="token punctuation">&#123;</span><span class="token string">"James"</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">,</span> <span class="token string">"cat"</span><span class="token punctuation">&#125;</span>
kim <span class="token operator">:=</span> person<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>                   <span class="token comment">// there is no difference on empty struct and zero value of struct</span>
fred <span class="token operator">:=</span> person<span class="token punctuation">&#123;</span><span class="token string">"Fred"</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token string">"dog"</span><span class="token punctuation">&#125;</span> <span class="token comment">// values are assigned to the fields in the order they were declared in struct definition</span>
beth <span class="token operator">:=</span> person<span class="token punctuation">&#123;</span>                   <span class="token comment">// using key names (recommended)</span>
    age<span class="token punctuation">:</span>  <span class="token number">20</span><span class="token punctuation">,</span>
    name<span class="token punctuation">:</span> <span class="token string">"Beth"</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span>
fred<span class="token punctuation">.</span>pet <span class="token operator">=</span> <span class="token string">"parrot"</span> <span class="token comment">// can use dotted notation</span>

fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>john<span class="token punctuation">,</span> kim<span class="token punctuation">,</span> james<span class="token punctuation">,</span> fred<span class="token punctuation">,</span> beth<span class="token punctuation">)</span></code>`,Pc,O,qp,k1,r1,Up,f1,m1,jp,b1,E1,Fp,v1,d1,Ip,_1,y1,Jp,P1,x1,xc,Cc,Oc,Dc,Rn,Sn,Qp,C1,wc,Ss,uv=`<code class="language-go"><span class="token keyword">var</span> human <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span> <span class="token comment">// anonymous structs</span>
    name <span class="token builtin">string</span>
    age  <span class="token builtin">int</span>
    pet  <span class="token builtin">string</span>
<span class="token punctuation">&#125;</span>
human<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"Bob"</span>
human<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">24</span>
human<span class="token punctuation">.</span>pet <span class="token operator">=</span> <span class="token string">"dog"</span>

pet <span class="token operator">:=</span> <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span> <span class="token comment">// directly initializing anonymous structs</span>
    name <span class="token builtin">string</span>
    kind <span class="token builtin">string</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>
    name<span class="token punctuation">:</span> <span class="token string">"choco"</span><span class="token punctuation">,</span>
    kind<span class="token punctuation">:</span> <span class="token string">"dog"</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span>

fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>human<span class="token punctuation">,</span> pet<span class="token punctuation">)</span></code>`,Rc,zn,O1,Xp,D1,w1,Sc,zc,Lc,Hc,Ln,Hn,Yp,R1,Bc,zs,iv=`<code class="language-go"><span class="token keyword">type</span> firstPerson <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
    name <span class="token builtin">string</span>
    age  <span class="token builtin">int</span>
<span class="token punctuation">&#125;</span>
f1 <span class="token operator">:=</span> firstPerson<span class="token punctuation">&#123;</span><span class="token string">"kim"</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">&#125;</span>
f2 <span class="token operator">:=</span> firstPerson<span class="token punctuation">&#123;</span><span class="token string">"lee"</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">&#125;</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>f1 <span class="token operator">==</span> f2<span class="token punctuation">)</span> <span class="token comment">// comparing two firstPerson instances is possible when they are composed of comparable types</span></code>`,Mc,tn,$p,S1,z1,gp,L1,H1,Ac,Tc,Gc,Ls,kv=`<code class="language-go"><span class="token keyword">type</span> secondPerson <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
    name <span class="token builtin">string</span>
    age <span class="token builtin">int</span>
<span class="token punctuation">&#125;</span>
s1 <span class="token operator">:=</span> secondPerson<span class="token punctuation">&#123;</span><span class="token string">"choi"</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">&#125;</span>
<span class="token comment">// fmt.Println(s1 == f1) // comparing(==, !=) secondPerson with firstPerson is impossible</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">firstPerson</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// convert secondPerson into firstPerson is possible because they have same fields</span></code>`,Kc,Bn,B1,hp,M1,A1,Nc,Zc,Vc,Hs,rv=`<code class="language-go"><span class="token keyword">type</span> thirdPerson <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
    age <span class="token builtin">int</span>
    name <span class="token builtin">string</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// t1 := thirdPerson&#123;27, "Park"&#125;</span>
<span class="token comment">// fmt.Println(firstPerson(t1)) // convert thirdPerson into firstPerson is impossible because their fields have different order.</span></code>`,Wc,na,T1,qc,Uc,jc,Bs,fv=`<code class="language-go"><span class="token keyword">type</span> fourthPerson <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
    firstName <span class="token builtin">string</span>
    age <span class="token builtin">int</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// f3 := fourthPerson&#123;"Kang", 28&#125;</span>
<span class="token comment">// fmt.Println(firstPerson(f3)) // convert fourthPerson into firstPerson is impossible because their fields have different name.</span>

<span class="token keyword">type</span> fifthPerson <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
    name <span class="token builtin">string</span>
    age <span class="token builtin">int</span>
    hobby <span class="token builtin">string</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// f4 := fifthPerson&#123;"Seo", 24, "Cooking"&#125;</span>
<span class="token comment">// fmt.Println(firstPerson(f4)) // convert fourthPerson into firstPerson is impossible because there is an additional field.</span></code>`,Fc,sa,G1,Ic,Jc,Qc,Ms,mv=`<code class="language-go"><span class="token keyword">var</span> g <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
    name <span class="token builtin">string</span>
    age  <span class="token builtin">int</span>
<span class="token punctuation">&#125;</span>
g <span class="token operator">=</span> f1 <span class="token comment">// =, == are possible when anonymous struct have same field</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>g <span class="token operator">==</span> f1<span class="token punctuation">)</span></code>`,Xc,Mn,K1,ne,N1,Z1,Yc,$c,gc,hc,An,Tn,se,V1,nu,su,au,aa,pn,As,ta,c2,W1,q1,U1,Ts,j1,tu,pu,eu;return{c(){Gs=t("br"),oe=i(),Ks=t("p"),ru=e("본 글은 Golang을 공부하며 주요 내용이라 생각되는 것들을 기록해둔 자료이며, Ubuntu 20.04 LTS 기준으로 작성되었습니다."),le=i(),ce=t("br"),ue=t("br"),ie=i(),ln=t("h2"),cn=t("a"),ca=t("span"),fu=e("Array"),ke=i(),re=t("hr"),fe=i(),Vn=t("p"),ua=t("strong"),mu=e("Array"),bu=e("는 같은 타입의, 크기(개수)가 정해진 데이터들을 묶어서 처리하기 위해 사용된다."),me=i(),Wn=t("pre"),be=i(),L=t("p"),Eu=e("위 코드에서 "),ia=t("code"),vu=e("[3]int"),du=e("은 크기가 "),ka=t("em"),_u=e("3"),yu=e("인 "),ra=t("code"),Pu=e("int"),xu=e("의 Array임을 나타낸다. Array의 값을 초기화하지 않았으므로, "),fa=t("code"),Cu=e("int"),Ou=e(`의 Zero value인 0으로 채워진다.
그리고 Array는 크기가 정해진 데이터에 대해서만 지원한다. 주석 처리된 부분처럼 배열의 크기를 변수값으로 초기화하는 것은 불가능하다.`),Ee=i(),ve=t("br"),de=i(),Ns=t("p"),Du=e("C/C++에서 그렇듯, 중괄호를 이용하여 배열 내의 값을 초기화할 수 있다."),_e=i(),qn=t("pre"),ye=i(),E=t("p"),wu=e("위 코드의 변수 "),ma=t("code"),Ru=e("y"),Su=e("를 초기화하는 라인에서 "),ba=t("code"),zu=e("n:m"),Lu=e(" 형태의 표기법을 확인할 수 있다. "),Ea=t("code"),Hu=e("n"),Bu=e("번째 인덱스의 값을 "),va=t("code"),Mu=e("m"),Au=e(`으로 초기화한다는 의미이다.
지정되지 않은 다른 값들은 Zero value인 `),da=t("em"),Tu=e("0"),Gu=e("으로 초기화된다."),Ku=t("br"),Nu=e(`
변수 `),_a=t("code"),Zu=e("z"),Vu=e("를 초기화하는 라인처럼 배열의 크기에 "),ya=t("code"),Wu=e("..."),qu=e("가 입력되면 자동으로 배열의 크기를 결정한다. 위 코드에서 "),Pa=t("code"),Uu=e("z"),ju=e("의 크기는 "),xa=t("em"),Fu=e("5"),Iu=e("가 될 것이다."),Pe=i(),xe=t("br"),Ce=i(),un=t("p"),Ju=e(`여느 언어가 그렇듯, 대괄호를 통해 indexing한다. 인덱스에 음수나 배열 크기보다 큰 수 넣으면 런타임 에러가 발생한다.
또한 `),Ca=t("code"),Qu=e("len()"),Xu=e(" 함수를 사용하여 Array의 크기를 확인할 수 있다."),Oe=i(),Un=t("pre"),De=i(),we=t("br"),Re=i(),Zs=t("p"),Yu=e("다차원 배열은 좀 난해하하다고 느꼈는데, 어떻게 사용하는지는 코드를 바로 보는 편이 이해가 빠를 것이다."),Se=i(),jn=t("pre"),ze=i(),Le=t("br"),He=i(),I=t("p"),$u=e("이건 좀 신기했던 부분인데, Go에서 Array는 크기와 element의 타입이 같다면 동일한 타입으로 여긴다. 그래서 "),Oa=t("code"),gu=e("=="),hu=e("와 "),Da=t("code"),ni=e("!="),si=e(`의 두 가지의 비교 연산이 가능하다!
다만 element의 타입이 같아도 Array의 크기가 다르다면 서로 다른 타입으로 여기기 때문에, 비교 연산을 하면 에러가 발생한다.`),Be=i(),Fn=t("pre"),Me=i(),Ae=t("br"),Te=t("br"),Ge=i(),kn=t("h2"),rn=t("a"),wa=t("span"),ai=e("Slice"),Ke=i(),Ne=t("hr"),Ze=i(),nn=t("p"),Ra=t("strong"),ti=e("Slice"),pi=e("는 동적으로 크기가 늘어났다 줄어들었다 하는 Array라고 볼 수 있다. 다른 언어에도 이와 유사한 타입들이 많이 존재하지만, Go의 Slice는 좀 유니크하다."),ei=t("br"),oi=e(`
먼저 Array와는 달리 대괄호 사이를 비워놓고 선언한다. Array와 유사한 부분들을 모아보았다.`),Ve=i(),In=t("pre"),We=i(),qe=t("br"),Ue=i(),Vs=t("p"),li=e("이제 다른 부분들을 하나씩 알아보자."),je=i(),D=t("p"),ci=e("선언만 하고 초기화하지 않으면 해당 타입의 Zero value로 초기화하는 Array와는 달리, Slice는 비어 있는 객체라는 뜻인 Slice는 "),Sa=t("code"),ui=e("nil"),ii=e(`이 된다.
이때 `),za=t("code"),ki=e("nil"),ri=e(`과 Length가 0인 Slice는 엄연히 서로 다르다.
`),La=t("code"),fi=e("nil"),mi=e("은 C/C++의 "),Ha=t("code"),bi=e("NULL"),Ei=e("과 자바스크립트의 "),Ba=t("code"),vi=e("null"),di=e(" 사이 어딘가의 느낌인데, 추후 설명하겠다."),Fe=i(),Jn=t("pre"),Ie=i(),Ws=t("p"),_i=e(`타입과 크기가 같다면 비교 연산을 할 수 있었던 Array와는 달리, slice끼리는 타입이 같아도 서로 비교 연산을 할 수 없다.
slice와 nil과의 비교 연산만 허용된다.`),Je=i(),Qe=t("br"),Xe=i(),Qn=t("p"),Ma=t("code"),yi=e("make()"),Pi=e(" 함수를 이용하여 slice를 생성할 수도 있다. 타입, Length, Capacity를 인자로 설정한다."),Ye=i(),Xn=t("pre"),$e=i(),ge=t("br"),he=t("br"),no=i(),fn=t("h3"),mn=t("a"),Aa=t("span"),xi=e("Appending Elements into Slices"),so=i(),ao=t("br"),to=i(),Z=t("p"),Ci=e("Slice에 값을 추가하기 위해서는 "),Ta=t("code"),Oi=e("append()"),Di=e(" 함수를 사용한다. 값을 추가할 Slice와, 한 개 이상의 추가할 값들을 파라미터로 받는다."),wi=t("br"),Ri=i(),Ga=t("code"),Si=e("..."),zi=e(" 연산자를 활용하여, 다른 Slice 변수의 값들을 추가할수도 있다."),po=i(),bn=t("p"),Li=e("특이사항은 "),Ka=t("code"),Hi=e("append()"),Bi=e("함수에 값을 추가할 Slice 변수를 넣고, 반환값을 다시 그 변수로 받아야 한다는 것이다."),eo=i(),Yn=t("pre"),oo=i(),w=t("p"),Mi=e("이때 위 코드에서 "),Na=t("code"),Ai=e("cap()"),Ti=e(`라는 함수가 사용되는 것을 확인할 수 있다.
Slice에는 요소들의 개수를 나타내는 `),Za=t("em"),Gi=e("Length"),Ki=e("뿐 아니라, "),Va=t("strong"),Ni=e("Capacity"),Zi=e(`라는 속성이 존재한다. 이는 요소들이 추가될 수 있는 전체 공간의 크기를 의미한다.
`),Wa=t("code"),Vi=e("append()"),Wi=e("로 변수 "),qa=t("code"),qi=e("slice"),Ui=e("에 요소들을 추가할 때마다 Length가 증가하고, Length가 Capacity를 초과하려고 할 때마다 Capacity도 증가함을 확인할 수 있다."),lo=i(),co=t("br"),uo=t("br"),io=i(),En=t("h3"),vn=t("a"),Ua=t("span"),ji=e("Slicing Slices"),ko=i(),ro=t("br"),fo=i(),J=t("p"),Fi=e("Python의 "),ja=t("code"),Ii=e("List"),Ji=e("처럼 대괄호에 콜론("),Fa=t("code"),Qi=e(":"),Xi=e(")과 인덱스를 붙여 Slicing할 수 있다."),mo=i(),$n=t("pre"),bo=i(),P=t("p"),Yi=e("Python은 이렇게 Slicing 하면, Slicing된 새로운 "),Ia=t("code"),$i=e("List"),gi=e("가 복사되어, 원본과 같은 공간을 가리키지 않는다. 반면 Go의 Slicing된 "),Ja=t("code"),hi=e("Slice"),nk=e("는 원본을 가리킨다. "),Qa=t("code"),sk=e("e"),ak=e("의 값 중 하나를 수정해보면, "),Xa=t("code"),tk=e("x"),pk=e(", "),Ya=t("code"),ek=e("z"),ok=e(", "),$a=t("code"),lk=e("d"),ck=e("까지 해당 값을 포함했던 모든 "),ga=t("code"),uk=e("Slice"),ik=e("의 값들도 변경됨을 확인할 수 있다."),Eo=i(),gn=t("pre"),vo=i(),_o=t("br"),yo=i(),qs=t("p"),kk=e("사실 여기까진 그냥 그런가보다 할텐데, 원소를 추가하기 시작하면 본격적으로 어지러워진다."),Po=i(),hn=t("pre"),xo=i(),Co=t("br"),Oo=i(),R=t("p"),rk=e("추가 이전, "),ha=t("code"),fk=e("x"),mk=e(", "),nt=t("code"),bk=e("y"),Ek=e(", "),st=t("code"),vk=e("z"),dk=e(", "),at=t("code"),_k=e("d"),yk=e(", "),tt=t("code"),Pk=e("e"),xk=e("는 아래와 같았는데,"),Do=i(),ns=t("pre"),wo=i(),Us=t("p"),Ck=e("이렇게 변했다."),Ro=i(),ss=t("pre"),So=i(),b=t("p"),pt=t("code"),Ok=e("y"),Dk=e("에 "),et=t("code"),wk=e("30"),Rk=e("을 추가했으니 "),ot=t("code"),Sk=e("[1 2 30]"),zk=e("이 된 건 그렇다 치고, "),lt=t("code"),Lk=e("x"),Hk=e(", "),ct=t("code"),Bk=e("z"),Mk=e(", "),ut=t("code"),Ak=e("d"),Tk=e(", "),it=t("code"),Gk=e("e"),Kk=e("에서 대응되는 위치에 있었던 "),kt=t("code"),Nk=e("1"),Zk=e("도 모두 "),rt=t("code"),Vk=e("30"),Wk=e(`으로 바뀌었음을 알 수 있다.
그리고 여기서 `),ft=t("code"),qk=e("y"),Uk=e("만 length가 바뀌었으므로, 나타나는 원소의 개수는 "),mt=t("code"),jk=e("y"),Fk=e("만 2개에서 3개로 늘었다."),zo=i(),Lo=t("br"),Ho=i(),js=t("p"),Ik=e("다음의 예제를 보자."),Bo=i(),as=t("pre"),Mo=i(),Fs=t("p"),Jk=e("해당 구문의 실행 결과는 …"),Ao=i(),ts=t("pre"),To=i(),Go=t("br"),Ko=i(),Is=t("center"),bt=t("p"),Js=t("img"),No=i(),Zo=t("br"),Vo=i(),Qs=t("p"),Qk=e("상당히 혼란스럽다. 하나씩 알아보자."),Wo=i(),ps=t("pre"),qo=i(),V=t("p"),Xk=e("여기까지 실행했을 때, "),Et=t("code"),Yk=e("xx"),$k=e(", "),vt=t("code"),gk=e("yy"),hk=e(", "),dt=t("code"),nr=e("zz"),sr=e("의 값은"),Uo=i(),es=t("pre"),jo=i(),H=t("p"),ar=e("이다. 이제, "),_t=t("code"),tr=e("yy"),pr=e("에 "),yt=t("code"),er=e("30"),or=e(", "),Pt=t("code"),lr=e("40"),cr=e(", "),xt=t("code"),ur=e("50"),ir=e("을 추가해보자."),Fo=i(),os=t("pre"),Io=i(),Jo=t("br"),Qo=i(),f=t("p"),Ct=t("code"),kr=e("xx"),rr=e("와 "),Ot=t("code"),fr=e("zz"),mr=e("는 "),Dt=t("code"),br=e("yy"),Er=e("와 같은 공간을 공유한다. 따라서 대응되는 위치의 값이었던 "),wt=t("code"),vr=e("xx"),dr=e("와 "),Rt=t("code"),_r=e("zz"),yr=e("의 "),St=t("code"),Pr=e("3"),xr=e(", "),zt=t("code"),Cr=e("4"),Or=e("가 각각 "),Lt=t("code"),Dr=e("30"),wr=e(", "),Ht=t("code"),Rr=e("40"),Sr=e(`으로 바뀌었음을 확인할 수 있다.
반면 `),Bt=t("code"),zr=e("xx"),Lr=e("와 "),Mt=t("code"),Hr=e("zz"),Br=e("의 Length는 바뀌지 않고, "),At=t("code"),Mr=e("yy"),Ar=e("의 Length만 5로 바뀌었다."),Tr=t("br"),Gr=e(`
여기서 `),Tt=t("code"),Kr=e("xx = append(xx, 60)"),Nr=e("가 실행되면,"),Xo=i(),ls=t("pre"),Yo=i(),T=t("p"),Gt=t("code"),Zr=e("xx"),Vr=e("에 60이 추가되며, "),Kt=t("code"),Wr=e("yy"),qr=e("의 대응되는 위치의 값이었던 50의 값이 60으로 바뀌었다."),Ur=t("br"),jr=e(`
여기서 `),Nt=t("code"),Fr=e("zz = append(zz, 70)"),Ir=e("가 실행되면,"),$o=i(),cs=t("pre"),go=i(),G=t("p"),Zt=t("code"),Jr=e("xx"),Qr=e("와 "),Vt=t("code"),Xr=e("yy"),Yr=e("의 대응되는 위치의 값이었던 "),Wt=t("code"),$r=e("60"),gr=e("이 "),qt=t("code"),hr=e("70"),nf=e("으로 바뀌었다."),ho=i(),nl=t("br"),sl=i(),B=t("p"),sf=e("Slice에 값을 "),Ut=t("code"),af=e("append"),tf=e(`하였을 때 생기는 문제로 인해 직관적으로 이해하기 어려운 결과를 확인하였다.
`),jt=t("code"),pf=e("xx"),ef=e(", "),Ft=t("code"),of=e("yy"),lf=e(", "),It=t("code"),cf=e("zz"),uf=e(`가 같은 Capacity를 공유하기 때문에 생긴 문제이다.
Slice를 Slicing할 때, Capacity의 범위를 명시하는 표기법을 사용하면 이와 같은 문제를 어느 정도 해결할 수 있다.`),al=i(),us=t("pre"),tl=i(),Xs=t("p"),kf=e("위 코드의 출력 결과는 아래와 같다."),pl=i(),is=t("pre"),el=i(),ol=t("br"),ll=i(),Ys=t("p"),rf=e("한편 Array도 Slicing이 가능하며, Slicing된 값은 Slice 타입이다."),cl=i(),ks=t("pre"),ul=i(),il=t("br"),kl=t("br"),rl=i(),dn=t("h3"),_n=t("a"),Jt=t("span"),ff=e("Copying Slices"),fl=i(),ml=t("br"),bl=i(),Q=t("p"),mf=e("또다른 해결방법은 다른 언어의 "),Qt=t("em"),bf=e("deep copy"),Ef=e("처럼, 새로운 공간에 값들을 복사하는 방법이다. "),Xt=t("code"),vf=e("copy()"),df=e(" 함수를 통해 할 수 있다."),El=i(),rs=t("pre"),vl=i(),dl=t("br"),_l=i(),fs=t("p"),Yt=t("code"),_f=e("copy()"),yf=e(" 함수는 두 번째 인수로 들어온 Array나 Slice를 첫 번째 인수로 들어온 Slice에 복사한다. 반환값은 복사된 원소의 수이다."),yl=i(),ms=t("pre"),Pl=i(),xl=t("br"),Cl=i(),bs=t("p"),$t=t("code"),Pf=e("copy()"),xf=e(` 함수의 인수로 들어오는 Slice나 Array들은 Length가 서로 다를 수 있다.
Destination Slice의 Length가 Source Slice보다 크다면, 앞쪽의 원소들부터 채워진다.`),Ol=i(),Es=t("pre"),Dl=i(),$s=t("p"),Cf=e("동일한 원리로 이런 것도 가능하다."),wl=i(),vs=t("pre"),Rl=i(),Sl=t("br"),zl=t("br"),Ll=i(),yn=t("h2"),Pn=t("a"),gt=t("span"),Of=e("string"),Hl=i(),Bl=t("hr"),Ml=i(),sn=t("p"),ht=t("code"),Df=e("string"),wf=e("은 Primitive Data Type이지만, 여러 문자들의 Slice처럼 생각할 수도 있다. Slice처럼 "),np=t("code"),Rf=e("string"),Sf=e("을 Slicing할 수도 있다."),Al=i(),ds=t("pre"),Tl=i(),xn=t("p"),zf=e("한편, 알파벳과 같은 일반적인 문자들을 "),sp=t("code"),Lf=e("string"),Hf=e(`으로 표현할 때는 문제를 느끼지 못할 수도 있다.
하지만 한글처럼 UTF-8에서 2바이트 이상의 크기로 표현되는 문자들은 Slicing시 문자가 제대로 나타나지 않을 때도 있다.`),Gl=i(),_s=t("pre"),Kl=i(),C=t("p"),ap=t("code"),Bf=e("string"),Mf=e("을 구성하는 각 문자들은 "),tp=t("code"),Af=e("rune"),Tf=e(" 타입이지만, 실제로 "),pp=t("code"),Gf=e("string"),Kf=e("은 "),ep=t("code"),Nf=e("byte"),Zf=e(`들의 배열이다.
`),op=t("code"),Vf=e("rune"),Wf=e(`은 문자가 1바이트든, 4바이트든 한 개의 문자를 온전히 나타낼 수 있고,
`),lp=t("code"),qf=e("byte"),Uf=e("는 2바이트 이상의 문자를 나타내기 위해서는 2개 이상 모여야 한다는 것이다."),Nl=i(),ys=t("pre"),Zl=i(),W=t("p"),jf=e("위처럼 "),cp=t("code"),Ff=e("string"),If=e("을 각각 "),up=t("code"),Jf=e("byte"),Qf=e("와 "),ip=t("code"),Xf=e("rune"),Yf=e("의 Slice로 변환해보면 확인할 수 있다."),Vl=i(),Wl=t("br"),ql=t("br"),Ul=i(),Cn=t("h2"),On=t("a"),kp=t("span"),$f=e("Map"),jl=i(),Fl=t("hr"),Il=i(),x=t("p"),rp=t("strong"),gf=e("Map"),hf=e("은 전형적인 Key-Value 페어의 데이터타입으로, C++의 "),fp=t("code"),nm=e("map"),sm=e("과 유사하다. 아래 코드처럼 선언하고, 초기화할 수 있다. "),am=t("br"),tm=e(`
Slice와 마찬가지로 `),mp=t("code"),pm=e("map"),em=e("의 Zero value는 반드시 "),bp=t("code"),om=e("nil"),lm=e("이며, 크기가 0인 "),Ep=t("code"),cm=e("map"),um=e("과 "),vp=t("code"),im=e("nil"),km=e("은 서로 다르다."),Jl=i(),Ps=t("pre"),Ql=i(),Xl=t("br"),Yl=i(),M=t("p"),rm=e("초기화하는 방법도 다른 언어와 유사하다. 아래의 예제는 key는 "),dp=t("code"),fm=e("string"),mm=e("이고, value는 "),_p=t("code"),bm=e("string"),Em=e("의 "),yp=t("code"),vm=e("slice"),dm=e("인 "),Pp=t("code"),_m=e("map"),ym=e("이다."),$l=i(),xs=t("pre"),gl=i(),hl=t("br"),nc=i(),an=t("p"),xp=t("code"),Pm=e("make()"),xm=e("함수와 "),Cp=t("code"),Cm=e("len()"),Om=e("함수는 map에서도 사용할 수 있다."),sc=i(),Cs=t("pre"),ac=i(),tc=t("br"),pc=i(),gs=t("p"),Dm=e("사용 방법은 다른 언어의 일반적인 Key-Value 페어 데이터타입과 크게 다르지 않다. 이때 Value값이 존재하지 않는 Key에 접근하면 Zero value를 반환한다."),ec=i(),Os=t("pre"),oc=i(),lc=t("br"),cc=i(),hs=t("p"),wm=e("이 때 Value값이 존재하지 않는 Key에 접근한 것인지, 아니면 그냥 Value값이 Zero value인지 알 수 없다."),uc=i(),Ds=t("pre"),ic=i(),q=t("p"),Rm=e("이를테면 위와 같은 예제에서 Key가 "),Op=t("code"),Sm=e('"world"'),zm=e("일 때와, Key가 "),Dp=t("code"),Lm=e('"Bye"'),Hm=e(`일 때 동일하게 0이라는 값을 얻게 될 것이다.
Go 개발자들은 당연히 이에 대한 해결책으로 `),wp=t("em"),Bm=e("comma ok idiom"),Mm=e("이란 것을 만들어 두었다."),kc=i(),ws=t("pre"),rc=i(),v=t("p"),Am=e("위 예제에서 "),Rp=t("code"),Tm=e("m"),Gm=e("에서 반환받은 값을 계속 "),Sp=t("code"),Km=e("v"),Nm=e(", "),zp=t("code"),Zm=e("ok"),Vm=e(` 두 개의 변수에 할당하는 것을 확인할 수 있다.
이 때 첫 번째 변수인 `),Lp=t("code"),Wm=e("v"),qm=e("에는 Key에 해당하는 Value가 들어가며, 두 번째 변수인 "),Hp=t("code"),Um=e("ok"),jm=e("에는 해당 Key가 "),Bp=t("code"),Fm=e("m"),Im=e("에 존재하는지 여부가 "),Mp=t("code"),Jm=e("true"),Qm=e(" or "),Ap=t("code"),Xm=e("false"),Ym=e(`로 들어간다.
또한 `),Tp=t("code"),$m=e("map"),gm=e("에서 Key-Value 페어를 지우려면 "),Gp=t("code"),hm=e("delete()"),n1=e(" 함수를 사용한다."),fc=i(),mc=t("br"),bc=t("br"),Ec=i(),Dn=t("h2"),wn=t("a"),Kp=t("span"),s1=e("struct"),vc=i(),dc=t("hr"),_c=i(),A=t("p"),a1=e("C/C++의 "),Np=t("code"),t1=e("struct"),p1=e(`와 유사하다. Go가 일반적으로 그런 것처럼, 필드들을 선언할 때 자료형이 필드명의 뒤에 온다.
C/C++의 `),Zp=t("code"),e1=e("typedef"),o1=e(" 키워드처럼, "),Vp=t("code"),l1=e("type"),c1=e(" 키워드를 통해 "),Wp=t("code"),u1=e("struct"),i1=e(" 타입을 정의할 수 있다."),yc=i(),Rs=t("pre"),Pc=i(),O=t("p"),qp=t("code"),k1=e("struct"),r1=e(" 인스턴스를 생성할 때는 "),Up=t("code"),f1=e("struct"),m1=e(`를 정의할 때 입력했던 순서대로 각 필드의 값을 중괄호 안에 입력해주면 된다.
특이사항으로는 `),jp=t("code"),b1=e("map"),E1=e("이나 "),Fp=t("code"),v1=e("slice"),d1=e("와는 달리, "),Ip=t("code"),_1=e("struct"),y1=e("의 Zero value와 비어있는 "),Jp=t("code"),P1=e("struct"),x1=e("가 동일하게 처리된다."),xc=i(),Cc=t("br"),Oc=t("br"),Dc=i(),Rn=t("h3"),Sn=t("a"),Qp=t("span"),C1=e("Anonymous Structs"),wc=i(),Ss=t("pre"),Rc=i(),zn=t("p"),O1=e("위 코드는 익명 "),Xp=t("code"),D1=e("struct"),w1=e(` 변수를 선언하고, 또 선언과 동시에 초기화하는 예제이다.
타입 명시와 값 할당이 다른 중괄호 안에서 이루어져야 하는 것만 주의하면 큰 문제 없는 듯.`),Sc=i(),zc=t("br"),Lc=t("br"),Hc=i(),Ln=t("h3"),Hn=t("a"),Yp=t("span"),R1=e("Comparing and Converting Structs"),Bc=i(),zs=t("pre"),Mc=i(),tn=t("p"),$p=t("code"),S1=e("struct"),z1=e("의 필드가 비교 가능한 타입들로 이루어져 있다면, 서로 같은 "),gp=t("code"),L1=e("struct"),H1=e(" 타입끼리는 서로 비교할 수 있다."),Ac=i(),Tc=t("br"),Gc=i(),Ls=t("pre"),Kc=i(),Bn=t("p"),B1=e("서로 다른 "),hp=t("code"),M1=e("struct"),A1=e(` 타입끼리는 서로 비교할 수 없다.
단, 필드의 타입과 필드명이 같다면 서로 변환할 수 있다.`),Nc=i(),Zc=t("br"),Vc=i(),Hs=t("pre"),Wc=i(),na=t("p"),T1=e("만약 필드의 타입과 필드명이 같아도 선언된 순서가 다르다면 비교 및 변환할 수 없다."),qc=i(),Uc=t("br"),jc=i(),Bs=t("pre"),Fc=i(),sa=t("p"),G1=e("타입이 같아도 필드명이 다르다면 변환할 수 없으며, 다른 필드가 추가로 존재하면 비교 및 변환할 수 없다."),Ic=i(),Jc=t("br"),Qc=i(),Ms=t("pre"),Xc=i(),Mn=t("p"),K1=e("동일한 필드를 가지고 있는 익명 "),ne=t("code"),N1=e("struct"),Z1=e("에 대해서는 비교가 가능하다."),Yc=i(),$c=t("br"),gc=t("br"),hc=i(),An=t("h2"),Tn=t("a"),se=t("span"),V1=e("References"),nu=i(),su=t("hr"),au=i(),aa=t("center"),pn=t("p"),As=t("a"),ta=t("img"),W1=i(),q1=t("br"),U1=i(),Ts=t("a"),j1=e("Jon Bodner, 『Learning Go』, O’Reilly Media, Inc."),tu=i(),pu=t("br"),eu=t("br"),this.h()},l(n){Gs=p(n,"BR",{}),oe=k(n),Ks=p(n,"P",{});var l=u(Ks);ru=o(l,"본 글은 Golang을 공부하며 주요 내용이라 생각되는 것들을 기록해둔 자료이며, Ubuntu 20.04 LTS 기준으로 작성되었습니다."),l.forEach(s),le=k(n),ce=p(n,"BR",{}),ue=p(n,"BR",{}),ie=k(n),ln=p(n,"H2",{id:!0});var F1=u(ln);cn=p(F1,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var u2=u(cn);ca=p(u2,"SPAN",{class:!0}),u(ca).forEach(s),u2.forEach(s),fu=o(F1,"Array"),F1.forEach(s),ke=k(n),re=p(n,"HR",{}),fe=k(n),Vn=p(n,"P",{});var I1=u(Vn);ua=p(I1,"STRONG",{});var i2=u(ua);mu=o(i2,"Array"),i2.forEach(s),bu=o(I1,"는 같은 타입의, 크기(개수)가 정해진 데이터들을 묶어서 처리하기 위해 사용된다."),I1.forEach(s),me=k(n),Wn=p(n,"PRE",{class:!0});var bv=u(Wn);bv.forEach(s),be=k(n),L=p(n,"P",{});var X=u(L);Eu=o(X,"위 코드에서 "),ia=p(X,"CODE",{});var k2=u(ia);vu=o(k2,"[3]int"),k2.forEach(s),du=o(X,"은 크기가 "),ka=p(X,"EM",{});var r2=u(ka);_u=o(r2,"3"),r2.forEach(s),yu=o(X,"인 "),ra=p(X,"CODE",{});var f2=u(ra);Pu=o(f2,"int"),f2.forEach(s),xu=o(X,"의 Array임을 나타낸다. Array의 값을 초기화하지 않았으므로, "),fa=p(X,"CODE",{});var m2=u(fa);Cu=o(m2,"int"),m2.forEach(s),Ou=o(X,`의 Zero value인 0으로 채워진다.
그리고 Array는 크기가 정해진 데이터에 대해서만 지원한다. 주석 처리된 부분처럼 배열의 크기를 변수값으로 초기화하는 것은 불가능하다.`),X.forEach(s),Ee=k(n),ve=p(n,"BR",{}),de=k(n),Ns=p(n,"P",{});var b2=u(Ns);Du=o(b2,"C/C++에서 그렇듯, 중괄호를 이용하여 배열 내의 값을 초기화할 수 있다."),b2.forEach(s),_e=k(n),qn=p(n,"PRE",{class:!0});var Ev=u(qn);Ev.forEach(s),ye=k(n),E=p(n,"P",{});var _=u(E);wu=o(_,"위 코드의 변수 "),ma=p(_,"CODE",{});var E2=u(ma);Ru=o(E2,"y"),E2.forEach(s),Su=o(_,"를 초기화하는 라인에서 "),ba=p(_,"CODE",{});var v2=u(ba);zu=o(v2,"n:m"),v2.forEach(s),Lu=o(_," 형태의 표기법을 확인할 수 있다. "),Ea=p(_,"CODE",{});var d2=u(Ea);Hu=o(d2,"n"),d2.forEach(s),Bu=o(_,"번째 인덱스의 값을 "),va=p(_,"CODE",{});var _2=u(va);Mu=o(_2,"m"),_2.forEach(s),Au=o(_,`으로 초기화한다는 의미이다.
지정되지 않은 다른 값들은 Zero value인 `),da=p(_,"EM",{});var y2=u(da);Tu=o(y2,"0"),y2.forEach(s),Gu=o(_,"으로 초기화된다."),Ku=p(_,"BR",{}),Nu=o(_,`
변수 `),_a=p(_,"CODE",{});var P2=u(_a);Zu=o(P2,"z"),P2.forEach(s),Vu=o(_,"를 초기화하는 라인처럼 배열의 크기에 "),ya=p(_,"CODE",{});var x2=u(ya);Wu=o(x2,"..."),x2.forEach(s),qu=o(_,"가 입력되면 자동으로 배열의 크기를 결정한다. 위 코드에서 "),Pa=p(_,"CODE",{});var C2=u(Pa);Uu=o(C2,"z"),C2.forEach(s),ju=o(_,"의 크기는 "),xa=p(_,"EM",{});var O2=u(xa);Fu=o(O2,"5"),O2.forEach(s),Iu=o(_,"가 될 것이다."),_.forEach(s),Pe=k(n),xe=p(n,"BR",{}),Ce=k(n),un=p(n,"P",{});var ou=u(un);Ju=o(ou,`여느 언어가 그렇듯, 대괄호를 통해 indexing한다. 인덱스에 음수나 배열 크기보다 큰 수 넣으면 런타임 에러가 발생한다.
또한 `),Ca=p(ou,"CODE",{});var D2=u(Ca);Qu=o(D2,"len()"),D2.forEach(s),Xu=o(ou," 함수를 사용하여 Array의 크기를 확인할 수 있다."),ou.forEach(s),Oe=k(n),Un=p(n,"PRE",{class:!0});var vv=u(Un);vv.forEach(s),De=k(n),we=p(n,"BR",{}),Re=k(n),Zs=p(n,"P",{});var w2=u(Zs);Yu=o(w2,"다차원 배열은 좀 난해하하다고 느꼈는데, 어떻게 사용하는지는 코드를 바로 보는 편이 이해가 빠를 것이다."),w2.forEach(s),Se=k(n),jn=p(n,"PRE",{class:!0});var dv=u(jn);dv.forEach(s),ze=k(n),Le=p(n,"BR",{}),He=k(n),I=p(n,"P",{});var pa=u(I);$u=o(pa,"이건 좀 신기했던 부분인데, Go에서 Array는 크기와 element의 타입이 같다면 동일한 타입으로 여긴다. 그래서 "),Oa=p(pa,"CODE",{});var R2=u(Oa);gu=o(R2,"=="),R2.forEach(s),hu=o(pa,"와 "),Da=p(pa,"CODE",{});var S2=u(Da);ni=o(S2,"!="),S2.forEach(s),si=o(pa,`의 두 가지의 비교 연산이 가능하다!
다만 element의 타입이 같아도 Array의 크기가 다르다면 서로 다른 타입으로 여기기 때문에, 비교 연산을 하면 에러가 발생한다.`),pa.forEach(s),Be=k(n),Fn=p(n,"PRE",{class:!0});var _v=u(Fn);_v.forEach(s),Me=k(n),Ae=p(n,"BR",{}),Te=p(n,"BR",{}),Ge=k(n),kn=p(n,"H2",{id:!0});var J1=u(kn);rn=p(J1,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var z2=u(rn);wa=p(z2,"SPAN",{class:!0}),u(wa).forEach(s),z2.forEach(s),ai=o(J1,"Slice"),J1.forEach(s),Ke=k(n),Ne=p(n,"HR",{}),Ze=k(n),nn=p(n,"P",{});var ae=u(nn);Ra=p(ae,"STRONG",{});var L2=u(Ra);ti=o(L2,"Slice"),L2.forEach(s),pi=o(ae,"는 동적으로 크기가 늘어났다 줄어들었다 하는 Array라고 볼 수 있다. 다른 언어에도 이와 유사한 타입들이 많이 존재하지만, Go의 Slice는 좀 유니크하다."),ei=p(ae,"BR",{}),oi=o(ae,`
먼저 Array와는 달리 대괄호 사이를 비워놓고 선언한다. Array와 유사한 부분들을 모아보았다.`),ae.forEach(s),Ve=k(n),In=p(n,"PRE",{class:!0});var yv=u(In);yv.forEach(s),We=k(n),qe=p(n,"BR",{}),Ue=k(n),Vs=p(n,"P",{});var H2=u(Vs);li=o(H2,"이제 다른 부분들을 하나씩 알아보자."),H2.forEach(s),je=k(n),D=p(n,"P",{});var U=u(D);ci=o(U,"선언만 하고 초기화하지 않으면 해당 타입의 Zero value로 초기화하는 Array와는 달리, Slice는 비어 있는 객체라는 뜻인 Slice는 "),Sa=p(U,"CODE",{});var B2=u(Sa);ui=o(B2,"nil"),B2.forEach(s),ii=o(U,`이 된다.
이때 `),za=p(U,"CODE",{});var M2=u(za);ki=o(M2,"nil"),M2.forEach(s),ri=o(U,`과 Length가 0인 Slice는 엄연히 서로 다르다.
`),La=p(U,"CODE",{});var A2=u(La);fi=o(A2,"nil"),A2.forEach(s),mi=o(U,"은 C/C++의 "),Ha=p(U,"CODE",{});var T2=u(Ha);bi=o(T2,"NULL"),T2.forEach(s),Ei=o(U,"과 자바스크립트의 "),Ba=p(U,"CODE",{});var G2=u(Ba);vi=o(G2,"null"),G2.forEach(s),di=o(U," 사이 어딘가의 느낌인데, 추후 설명하겠다."),U.forEach(s),Fe=k(n),Jn=p(n,"PRE",{class:!0});var Pv=u(Jn);Pv.forEach(s),Ie=k(n),Ws=p(n,"P",{});var K2=u(Ws);_i=o(K2,`타입과 크기가 같다면 비교 연산을 할 수 있었던 Array와는 달리, slice끼리는 타입이 같아도 서로 비교 연산을 할 수 없다.
slice와 nil과의 비교 연산만 허용된다.`),K2.forEach(s),Je=k(n),Qe=p(n,"BR",{}),Xe=k(n),Qn=p(n,"P",{});var Q1=u(Qn);Ma=p(Q1,"CODE",{});var N2=u(Ma);yi=o(N2,"make()"),N2.forEach(s),Pi=o(Q1," 함수를 이용하여 slice를 생성할 수도 있다. 타입, Length, Capacity를 인자로 설정한다."),Q1.forEach(s),Ye=k(n),Xn=p(n,"PRE",{class:!0});var xv=u(Xn);xv.forEach(s),$e=k(n),ge=p(n,"BR",{}),he=p(n,"BR",{}),no=k(n),fn=p(n,"H3",{id:!0});var X1=u(fn);mn=p(X1,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Z2=u(mn);Aa=p(Z2,"SPAN",{class:!0}),u(Aa).forEach(s),Z2.forEach(s),xi=o(X1,"Appending Elements into Slices"),X1.forEach(s),so=k(n),ao=p(n,"BR",{}),to=k(n),Z=p(n,"P",{});var Gn=u(Z);Ci=o(Gn,"Slice에 값을 추가하기 위해서는 "),Ta=p(Gn,"CODE",{});var V2=u(Ta);Oi=o(V2,"append()"),V2.forEach(s),Di=o(Gn," 함수를 사용한다. 값을 추가할 Slice와, 한 개 이상의 추가할 값들을 파라미터로 받는다."),wi=p(Gn,"BR",{}),Ri=k(Gn),Ga=p(Gn,"CODE",{});var W2=u(Ga);Si=o(W2,"..."),W2.forEach(s),zi=o(Gn," 연산자를 활용하여, 다른 Slice 변수의 값들을 추가할수도 있다."),Gn.forEach(s),po=k(n),bn=p(n,"P",{});var lu=u(bn);Li=o(lu,"특이사항은 "),Ka=p(lu,"CODE",{});var q2=u(Ka);Hi=o(q2,"append()"),q2.forEach(s),Bi=o(lu,"함수에 값을 추가할 Slice 변수를 넣고, 반환값을 다시 그 변수로 받아야 한다는 것이다."),lu.forEach(s),eo=k(n),Yn=p(n,"PRE",{class:!0});var Cv=u(Yn);Cv.forEach(s),oo=k(n),w=p(n,"P",{});var j=u(w);Mi=o(j,"이때 위 코드에서 "),Na=p(j,"CODE",{});var U2=u(Na);Ai=o(U2,"cap()"),U2.forEach(s),Ti=o(j,`라는 함수가 사용되는 것을 확인할 수 있다.
Slice에는 요소들의 개수를 나타내는 `),Za=p(j,"EM",{});var j2=u(Za);Gi=o(j2,"Length"),j2.forEach(s),Ki=o(j,"뿐 아니라, "),Va=p(j,"STRONG",{});var F2=u(Va);Ni=o(F2,"Capacity"),F2.forEach(s),Zi=o(j,`라는 속성이 존재한다. 이는 요소들이 추가될 수 있는 전체 공간의 크기를 의미한다.
`),Wa=p(j,"CODE",{});var I2=u(Wa);Vi=o(I2,"append()"),I2.forEach(s),Wi=o(j,"로 변수 "),qa=p(j,"CODE",{});var J2=u(qa);qi=o(J2,"slice"),J2.forEach(s),Ui=o(j,"에 요소들을 추가할 때마다 Length가 증가하고, Length가 Capacity를 초과하려고 할 때마다 Capacity도 증가함을 확인할 수 있다."),j.forEach(s),lo=k(n),co=p(n,"BR",{}),uo=p(n,"BR",{}),io=k(n),En=p(n,"H3",{id:!0});var Y1=u(En);vn=p(Y1,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Q2=u(vn);Ua=p(Q2,"SPAN",{class:!0}),u(Ua).forEach(s),Q2.forEach(s),ji=o(Y1,"Slicing Slices"),Y1.forEach(s),ko=k(n),ro=p(n,"BR",{}),fo=k(n),J=p(n,"P",{});var ea=u(J);Fi=o(ea,"Python의 "),ja=p(ea,"CODE",{});var X2=u(ja);Ii=o(X2,"List"),X2.forEach(s),Ji=o(ea,"처럼 대괄호에 콜론("),Fa=p(ea,"CODE",{});var Y2=u(Fa);Qi=o(Y2,":"),Y2.forEach(s),Xi=o(ea,")과 인덱스를 붙여 Slicing할 수 있다."),ea.forEach(s),mo=k(n),$n=p(n,"PRE",{class:!0});var Ov=u($n);Ov.forEach(s),bo=k(n),P=p(n,"P",{});var S=u(P);Yi=o(S,"Python은 이렇게 Slicing 하면, Slicing된 새로운 "),Ia=p(S,"CODE",{});var $2=u(Ia);$i=o($2,"List"),$2.forEach(s),gi=o(S,"가 복사되어, 원본과 같은 공간을 가리키지 않는다. 반면 Go의 Slicing된 "),Ja=p(S,"CODE",{});var g2=u(Ja);hi=o(g2,"Slice"),g2.forEach(s),nk=o(S,"는 원본을 가리킨다. "),Qa=p(S,"CODE",{});var h2=u(Qa);sk=o(h2,"e"),h2.forEach(s),ak=o(S,"의 값 중 하나를 수정해보면, "),Xa=p(S,"CODE",{});var nb=u(Xa);tk=o(nb,"x"),nb.forEach(s),pk=o(S,", "),Ya=p(S,"CODE",{});var sb=u(Ya);ek=o(sb,"z"),sb.forEach(s),ok=o(S,", "),$a=p(S,"CODE",{});var ab=u($a);lk=o(ab,"d"),ab.forEach(s),ck=o(S,"까지 해당 값을 포함했던 모든 "),ga=p(S,"CODE",{});var tb=u(ga);uk=o(tb,"Slice"),tb.forEach(s),ik=o(S,"의 값들도 변경됨을 확인할 수 있다."),S.forEach(s),Eo=k(n),gn=p(n,"PRE",{class:!0});var Dv=u(gn);Dv.forEach(s),vo=k(n),_o=p(n,"BR",{}),yo=k(n),qs=p(n,"P",{});var pb=u(qs);kk=o(pb,"사실 여기까진 그냥 그런가보다 할텐데, 원소를 추가하기 시작하면 본격적으로 어지러워진다."),pb.forEach(s),Po=k(n),hn=p(n,"PRE",{class:!0});var wv=u(hn);wv.forEach(s),xo=k(n),Co=p(n,"BR",{}),Oo=k(n),R=p(n,"P",{});var F=u(R);rk=o(F,"추가 이전, "),ha=p(F,"CODE",{});var eb=u(ha);fk=o(eb,"x"),eb.forEach(s),mk=o(F,", "),nt=p(F,"CODE",{});var ob=u(nt);bk=o(ob,"y"),ob.forEach(s),Ek=o(F,", "),st=p(F,"CODE",{});var lb=u(st);vk=o(lb,"z"),lb.forEach(s),dk=o(F,", "),at=p(F,"CODE",{});var cb=u(at);_k=o(cb,"d"),cb.forEach(s),yk=o(F,", "),tt=p(F,"CODE",{});var ub=u(tt);Pk=o(ub,"e"),ub.forEach(s),xk=o(F,"는 아래와 같았는데,"),F.forEach(s),Do=k(n),ns=p(n,"PRE",{class:!0});var Rv=u(ns);Rv.forEach(s),wo=k(n),Us=p(n,"P",{});var ib=u(Us);Ck=o(ib,"이렇게 변했다."),ib.forEach(s),Ro=k(n),ss=p(n,"PRE",{class:!0});var Sv=u(ss);Sv.forEach(s),So=k(n),b=p(n,"P",{});var d=u(b);pt=p(d,"CODE",{});var kb=u(pt);Ok=o(kb,"y"),kb.forEach(s),Dk=o(d,"에 "),et=p(d,"CODE",{});var rb=u(et);wk=o(rb,"30"),rb.forEach(s),Rk=o(d,"을 추가했으니 "),ot=p(d,"CODE",{});var fb=u(ot);Sk=o(fb,"[1 2 30]"),fb.forEach(s),zk=o(d,"이 된 건 그렇다 치고, "),lt=p(d,"CODE",{});var mb=u(lt);Lk=o(mb,"x"),mb.forEach(s),Hk=o(d,", "),ct=p(d,"CODE",{});var bb=u(ct);Bk=o(bb,"z"),bb.forEach(s),Mk=o(d,", "),ut=p(d,"CODE",{});var Eb=u(ut);Ak=o(Eb,"d"),Eb.forEach(s),Tk=o(d,", "),it=p(d,"CODE",{});var vb=u(it);Gk=o(vb,"e"),vb.forEach(s),Kk=o(d,"에서 대응되는 위치에 있었던 "),kt=p(d,"CODE",{});var db=u(kt);Nk=o(db,"1"),db.forEach(s),Zk=o(d,"도 모두 "),rt=p(d,"CODE",{});var _b=u(rt);Vk=o(_b,"30"),_b.forEach(s),Wk=o(d,`으로 바뀌었음을 알 수 있다.
그리고 여기서 `),ft=p(d,"CODE",{});var yb=u(ft);qk=o(yb,"y"),yb.forEach(s),Uk=o(d,"만 length가 바뀌었으므로, 나타나는 원소의 개수는 "),mt=p(d,"CODE",{});var Pb=u(mt);jk=o(Pb,"y"),Pb.forEach(s),Fk=o(d,"만 2개에서 3개로 늘었다."),d.forEach(s),zo=k(n),Lo=p(n,"BR",{}),Ho=k(n),js=p(n,"P",{});var xb=u(js);Ik=o(xb,"다음의 예제를 보자."),xb.forEach(s),Bo=k(n),as=p(n,"PRE",{class:!0});var zv=u(as);zv.forEach(s),Mo=k(n),Fs=p(n,"P",{});var Cb=u(Fs);Jk=o(Cb,"해당 구문의 실행 결과는 …"),Cb.forEach(s),Ao=k(n),ts=p(n,"PRE",{class:!0});var Lv=u(ts);Lv.forEach(s),To=k(n),Go=p(n,"BR",{}),Ko=k(n),Is=p(n,"CENTER",{});var Ob=u(Is);bt=p(Ob,"P",{});var Db=u(bt);Js=p(Db,"IMG",{src:!0,alt:!0}),Db.forEach(s),Ob.forEach(s),No=k(n),Zo=p(n,"BR",{}),Vo=k(n),Qs=p(n,"P",{});var wb=u(Qs);Qk=o(wb,"상당히 혼란스럽다. 하나씩 알아보자."),wb.forEach(s),Wo=k(n),ps=p(n,"PRE",{class:!0});var Hv=u(ps);Hv.forEach(s),qo=k(n),V=p(n,"P",{});var Kn=u(V);Xk=o(Kn,"여기까지 실행했을 때, "),Et=p(Kn,"CODE",{});var Rb=u(Et);Yk=o(Rb,"xx"),Rb.forEach(s),$k=o(Kn,", "),vt=p(Kn,"CODE",{});var Sb=u(vt);gk=o(Sb,"yy"),Sb.forEach(s),hk=o(Kn,", "),dt=p(Kn,"CODE",{});var zb=u(dt);nr=o(zb,"zz"),zb.forEach(s),sr=o(Kn,"의 값은"),Kn.forEach(s),Uo=k(n),es=p(n,"PRE",{class:!0});var Bv=u(es);Bv.forEach(s),jo=k(n),H=p(n,"P",{});var Y=u(H);ar=o(Y,"이다. 이제, "),_t=p(Y,"CODE",{});var Lb=u(_t);tr=o(Lb,"yy"),Lb.forEach(s),pr=o(Y,"에 "),yt=p(Y,"CODE",{});var Hb=u(yt);er=o(Hb,"30"),Hb.forEach(s),or=o(Y,", "),Pt=p(Y,"CODE",{});var Bb=u(Pt);lr=o(Bb,"40"),Bb.forEach(s),cr=o(Y,", "),xt=p(Y,"CODE",{});var Mb=u(xt);ur=o(Mb,"50"),Mb.forEach(s),ir=o(Y,"을 추가해보자."),Y.forEach(s),Fo=k(n),os=p(n,"PRE",{class:!0});var Mv=u(os);Mv.forEach(s),Io=k(n),Jo=p(n,"BR",{}),Qo=k(n),f=p(n,"P",{});var m=u(f);Ct=p(m,"CODE",{});var Ab=u(Ct);kr=o(Ab,"xx"),Ab.forEach(s),rr=o(m,"와 "),Ot=p(m,"CODE",{});var Tb=u(Ot);fr=o(Tb,"zz"),Tb.forEach(s),mr=o(m,"는 "),Dt=p(m,"CODE",{});var Gb=u(Dt);br=o(Gb,"yy"),Gb.forEach(s),Er=o(m,"와 같은 공간을 공유한다. 따라서 대응되는 위치의 값이었던 "),wt=p(m,"CODE",{});var Kb=u(wt);vr=o(Kb,"xx"),Kb.forEach(s),dr=o(m,"와 "),Rt=p(m,"CODE",{});var Nb=u(Rt);_r=o(Nb,"zz"),Nb.forEach(s),yr=o(m,"의 "),St=p(m,"CODE",{});var Zb=u(St);Pr=o(Zb,"3"),Zb.forEach(s),xr=o(m,", "),zt=p(m,"CODE",{});var Vb=u(zt);Cr=o(Vb,"4"),Vb.forEach(s),Or=o(m,"가 각각 "),Lt=p(m,"CODE",{});var Wb=u(Lt);Dr=o(Wb,"30"),Wb.forEach(s),wr=o(m,", "),Ht=p(m,"CODE",{});var qb=u(Ht);Rr=o(qb,"40"),qb.forEach(s),Sr=o(m,`으로 바뀌었음을 확인할 수 있다.
반면 `),Bt=p(m,"CODE",{});var Ub=u(Bt);zr=o(Ub,"xx"),Ub.forEach(s),Lr=o(m,"와 "),Mt=p(m,"CODE",{});var jb=u(Mt);Hr=o(jb,"zz"),jb.forEach(s),Br=o(m,"의 Length는 바뀌지 않고, "),At=p(m,"CODE",{});var Fb=u(At);Mr=o(Fb,"yy"),Fb.forEach(s),Ar=o(m,"의 Length만 5로 바뀌었다."),Tr=p(m,"BR",{}),Gr=o(m,`
여기서 `),Tt=p(m,"CODE",{});var Ib=u(Tt);Kr=o(Ib,"xx = append(xx, 60)"),Ib.forEach(s),Nr=o(m,"가 실행되면,"),m.forEach(s),Xo=k(n),ls=p(n,"PRE",{class:!0});var Av=u(ls);Av.forEach(s),Yo=k(n),T=p(n,"P",{});var en=u(T);Gt=p(en,"CODE",{});var Jb=u(Gt);Zr=o(Jb,"xx"),Jb.forEach(s),Vr=o(en,"에 60이 추가되며, "),Kt=p(en,"CODE",{});var Qb=u(Kt);Wr=o(Qb,"yy"),Qb.forEach(s),qr=o(en,"의 대응되는 위치의 값이었던 50의 값이 60으로 바뀌었다."),Ur=p(en,"BR",{}),jr=o(en,`
여기서 `),Nt=p(en,"CODE",{});var Xb=u(Nt);Fr=o(Xb,"zz = append(zz, 70)"),Xb.forEach(s),Ir=o(en,"가 실행되면,"),en.forEach(s),$o=k(n),cs=p(n,"PRE",{class:!0});var Tv=u(cs);Tv.forEach(s),go=k(n),G=p(n,"P",{});var on=u(G);Zt=p(on,"CODE",{});var Yb=u(Zt);Jr=o(Yb,"xx"),Yb.forEach(s),Qr=o(on,"와 "),Vt=p(on,"CODE",{});var $b=u(Vt);Xr=o($b,"yy"),$b.forEach(s),Yr=o(on,"의 대응되는 위치의 값이었던 "),Wt=p(on,"CODE",{});var gb=u(Wt);$r=o(gb,"60"),gb.forEach(s),gr=o(on,"이 "),qt=p(on,"CODE",{});var hb=u(qt);hr=o(hb,"70"),hb.forEach(s),nf=o(on,"으로 바뀌었다."),on.forEach(s),ho=k(n),nl=p(n,"BR",{}),sl=k(n),B=p(n,"P",{});var $=u(B);sf=o($,"Slice에 값을 "),Ut=p($,"CODE",{});var n3=u(Ut);af=o(n3,"append"),n3.forEach(s),tf=o($,`하였을 때 생기는 문제로 인해 직관적으로 이해하기 어려운 결과를 확인하였다.
`),jt=p($,"CODE",{});var s3=u(jt);pf=o(s3,"xx"),s3.forEach(s),ef=o($,", "),Ft=p($,"CODE",{});var a3=u(Ft);of=o(a3,"yy"),a3.forEach(s),lf=o($,", "),It=p($,"CODE",{});var t3=u(It);cf=o(t3,"zz"),t3.forEach(s),uf=o($,`가 같은 Capacity를 공유하기 때문에 생긴 문제이다.
Slice를 Slicing할 때, Capacity의 범위를 명시하는 표기법을 사용하면 이와 같은 문제를 어느 정도 해결할 수 있다.`),$.forEach(s),al=k(n),us=p(n,"PRE",{class:!0});var Gv=u(us);Gv.forEach(s),tl=k(n),Xs=p(n,"P",{});var p3=u(Xs);kf=o(p3,"위 코드의 출력 결과는 아래와 같다."),p3.forEach(s),pl=k(n),is=p(n,"PRE",{class:!0});var Kv=u(is);Kv.forEach(s),el=k(n),ol=p(n,"BR",{}),ll=k(n),Ys=p(n,"P",{});var e3=u(Ys);rf=o(e3,"한편 Array도 Slicing이 가능하며, Slicing된 값은 Slice 타입이다."),e3.forEach(s),cl=k(n),ks=p(n,"PRE",{class:!0});var Nv=u(ks);Nv.forEach(s),ul=k(n),il=p(n,"BR",{}),kl=p(n,"BR",{}),rl=k(n),dn=p(n,"H3",{id:!0});var $1=u(dn);_n=p($1,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var o3=u(_n);Jt=p(o3,"SPAN",{class:!0}),u(Jt).forEach(s),o3.forEach(s),ff=o($1,"Copying Slices"),$1.forEach(s),fl=k(n),ml=p(n,"BR",{}),bl=k(n),Q=p(n,"P",{});var oa=u(Q);mf=o(oa,"또다른 해결방법은 다른 언어의 "),Qt=p(oa,"EM",{});var l3=u(Qt);bf=o(l3,"deep copy"),l3.forEach(s),Ef=o(oa,"처럼, 새로운 공간에 값들을 복사하는 방법이다. "),Xt=p(oa,"CODE",{});var c3=u(Xt);vf=o(c3,"copy()"),c3.forEach(s),df=o(oa," 함수를 통해 할 수 있다."),oa.forEach(s),El=k(n),rs=p(n,"PRE",{class:!0});var Zv=u(rs);Zv.forEach(s),vl=k(n),dl=p(n,"BR",{}),_l=k(n),fs=p(n,"P",{});var g1=u(fs);Yt=p(g1,"CODE",{});var u3=u(Yt);_f=o(u3,"copy()"),u3.forEach(s),yf=o(g1," 함수는 두 번째 인수로 들어온 Array나 Slice를 첫 번째 인수로 들어온 Slice에 복사한다. 반환값은 복사된 원소의 수이다."),g1.forEach(s),yl=k(n),ms=p(n,"PRE",{class:!0});var Vv=u(ms);Vv.forEach(s),Pl=k(n),xl=p(n,"BR",{}),Cl=k(n),bs=p(n,"P",{});var h1=u(bs);$t=p(h1,"CODE",{});var i3=u($t);Pf=o(i3,"copy()"),i3.forEach(s),xf=o(h1,` 함수의 인수로 들어오는 Slice나 Array들은 Length가 서로 다를 수 있다.
Destination Slice의 Length가 Source Slice보다 크다면, 앞쪽의 원소들부터 채워진다.`),h1.forEach(s),Ol=k(n),Es=p(n,"PRE",{class:!0});var Wv=u(Es);Wv.forEach(s),Dl=k(n),$s=p(n,"P",{});var k3=u($s);Cf=o(k3,"동일한 원리로 이런 것도 가능하다."),k3.forEach(s),wl=k(n),vs=p(n,"PRE",{class:!0});var qv=u(vs);qv.forEach(s),Rl=k(n),Sl=p(n,"BR",{}),zl=p(n,"BR",{}),Ll=k(n),yn=p(n,"H2",{id:!0});var n2=u(yn);Pn=p(n2,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var r3=u(Pn);gt=p(r3,"SPAN",{class:!0}),u(gt).forEach(s),r3.forEach(s),Of=o(n2,"string"),n2.forEach(s),Hl=k(n),Bl=p(n,"HR",{}),Ml=k(n),sn=p(n,"P",{});var te=u(sn);ht=p(te,"CODE",{});var f3=u(ht);Df=o(f3,"string"),f3.forEach(s),wf=o(te,"은 Primitive Data Type이지만, 여러 문자들의 Slice처럼 생각할 수도 있다. Slice처럼 "),np=p(te,"CODE",{});var m3=u(np);Rf=o(m3,"string"),m3.forEach(s),Sf=o(te,"을 Slicing할 수도 있다."),te.forEach(s),Al=k(n),ds=p(n,"PRE",{class:!0});var Uv=u(ds);Uv.forEach(s),Tl=k(n),xn=p(n,"P",{});var cu=u(xn);zf=o(cu,"한편, 알파벳과 같은 일반적인 문자들을 "),sp=p(cu,"CODE",{});var b3=u(sp);Lf=o(b3,"string"),b3.forEach(s),Hf=o(cu,`으로 표현할 때는 문제를 느끼지 못할 수도 있다.
하지만 한글처럼 UTF-8에서 2바이트 이상의 크기로 표현되는 문자들은 Slicing시 문자가 제대로 나타나지 않을 때도 있다.`),cu.forEach(s),Gl=k(n),_s=p(n,"PRE",{class:!0});var jv=u(_s);jv.forEach(s),Kl=k(n),C=p(n,"P",{});var K=u(C);ap=p(K,"CODE",{});var E3=u(ap);Bf=o(E3,"string"),E3.forEach(s),Mf=o(K,"을 구성하는 각 문자들은 "),tp=p(K,"CODE",{});var v3=u(tp);Af=o(v3,"rune"),v3.forEach(s),Tf=o(K," 타입이지만, 실제로 "),pp=p(K,"CODE",{});var d3=u(pp);Gf=o(d3,"string"),d3.forEach(s),Kf=o(K,"은 "),ep=p(K,"CODE",{});var _3=u(ep);Nf=o(_3,"byte"),_3.forEach(s),Zf=o(K,`들의 배열이다.
`),op=p(K,"CODE",{});var y3=u(op);Vf=o(y3,"rune"),y3.forEach(s),Wf=o(K,`은 문자가 1바이트든, 4바이트든 한 개의 문자를 온전히 나타낼 수 있고,
`),lp=p(K,"CODE",{});var P3=u(lp);qf=o(P3,"byte"),P3.forEach(s),Uf=o(K,"는 2바이트 이상의 문자를 나타내기 위해서는 2개 이상 모여야 한다는 것이다."),K.forEach(s),Nl=k(n),ys=p(n,"PRE",{class:!0});var Fv=u(ys);Fv.forEach(s),Zl=k(n),W=p(n,"P",{});var Nn=u(W);jf=o(Nn,"위처럼 "),cp=p(Nn,"CODE",{});var x3=u(cp);Ff=o(x3,"string"),x3.forEach(s),If=o(Nn,"을 각각 "),up=p(Nn,"CODE",{});var C3=u(up);Jf=o(C3,"byte"),C3.forEach(s),Qf=o(Nn,"와 "),ip=p(Nn,"CODE",{});var O3=u(ip);Xf=o(O3,"rune"),O3.forEach(s),Yf=o(Nn,"의 Slice로 변환해보면 확인할 수 있다."),Nn.forEach(s),Vl=k(n),Wl=p(n,"BR",{}),ql=p(n,"BR",{}),Ul=k(n),Cn=p(n,"H2",{id:!0});var s2=u(Cn);On=p(s2,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var D3=u(On);kp=p(D3,"SPAN",{class:!0}),u(kp).forEach(s),D3.forEach(s),$f=o(s2,"Map"),s2.forEach(s),jl=k(n),Fl=p(n,"HR",{}),Il=k(n),x=p(n,"P",{});var z=u(x);rp=p(z,"STRONG",{});var w3=u(rp);gf=o(w3,"Map"),w3.forEach(s),hf=o(z,"은 전형적인 Key-Value 페어의 데이터타입으로, C++의 "),fp=p(z,"CODE",{});var R3=u(fp);nm=o(R3,"map"),R3.forEach(s),sm=o(z,"과 유사하다. 아래 코드처럼 선언하고, 초기화할 수 있다. "),am=p(z,"BR",{}),tm=o(z,`
Slice와 마찬가지로 `),mp=p(z,"CODE",{});var S3=u(mp);pm=o(S3,"map"),S3.forEach(s),em=o(z,"의 Zero value는 반드시 "),bp=p(z,"CODE",{});var z3=u(bp);om=o(z3,"nil"),z3.forEach(s),lm=o(z,"이며, 크기가 0인 "),Ep=p(z,"CODE",{});var L3=u(Ep);cm=o(L3,"map"),L3.forEach(s),um=o(z,"과 "),vp=p(z,"CODE",{});var H3=u(vp);im=o(H3,"nil"),H3.forEach(s),km=o(z,"은 서로 다르다."),z.forEach(s),Jl=k(n),Ps=p(n,"PRE",{class:!0});var Iv=u(Ps);Iv.forEach(s),Ql=k(n),Xl=p(n,"BR",{}),Yl=k(n),M=p(n,"P",{});var g=u(M);rm=o(g,"초기화하는 방법도 다른 언어와 유사하다. 아래의 예제는 key는 "),dp=p(g,"CODE",{});var B3=u(dp);fm=o(B3,"string"),B3.forEach(s),mm=o(g,"이고, value는 "),_p=p(g,"CODE",{});var M3=u(_p);bm=o(M3,"string"),M3.forEach(s),Em=o(g,"의 "),yp=p(g,"CODE",{});var A3=u(yp);vm=o(A3,"slice"),A3.forEach(s),dm=o(g,"인 "),Pp=p(g,"CODE",{});var T3=u(Pp);_m=o(T3,"map"),T3.forEach(s),ym=o(g,"이다."),g.forEach(s),$l=k(n),xs=p(n,"PRE",{class:!0});var Jv=u(xs);Jv.forEach(s),gl=k(n),hl=p(n,"BR",{}),nc=k(n),an=p(n,"P",{});var pe=u(an);xp=p(pe,"CODE",{});var G3=u(xp);Pm=o(G3,"make()"),G3.forEach(s),xm=o(pe,"함수와 "),Cp=p(pe,"CODE",{});var K3=u(Cp);Cm=o(K3,"len()"),K3.forEach(s),Om=o(pe,"함수는 map에서도 사용할 수 있다."),pe.forEach(s),sc=k(n),Cs=p(n,"PRE",{class:!0});var Qv=u(Cs);Qv.forEach(s),ac=k(n),tc=p(n,"BR",{}),pc=k(n),gs=p(n,"P",{});var N3=u(gs);Dm=o(N3,"사용 방법은 다른 언어의 일반적인 Key-Value 페어 데이터타입과 크게 다르지 않다. 이때 Value값이 존재하지 않는 Key에 접근하면 Zero value를 반환한다."),N3.forEach(s),ec=k(n),Os=p(n,"PRE",{class:!0});var Xv=u(Os);Xv.forEach(s),oc=k(n),lc=p(n,"BR",{}),cc=k(n),hs=p(n,"P",{});var Z3=u(hs);wm=o(Z3,"이 때 Value값이 존재하지 않는 Key에 접근한 것인지, 아니면 그냥 Value값이 Zero value인지 알 수 없다."),Z3.forEach(s),uc=k(n),Ds=p(n,"PRE",{class:!0});var Yv=u(Ds);Yv.forEach(s),ic=k(n),q=p(n,"P",{});var Zn=u(q);Rm=o(Zn,"이를테면 위와 같은 예제에서 Key가 "),Op=p(Zn,"CODE",{});var V3=u(Op);Sm=o(V3,'"world"'),V3.forEach(s),zm=o(Zn,"일 때와, Key가 "),Dp=p(Zn,"CODE",{});var W3=u(Dp);Lm=o(W3,'"Bye"'),W3.forEach(s),Hm=o(Zn,`일 때 동일하게 0이라는 값을 얻게 될 것이다.
Go 개발자들은 당연히 이에 대한 해결책으로 `),wp=p(Zn,"EM",{});var q3=u(wp);Bm=o(q3,"comma ok idiom"),q3.forEach(s),Mm=o(Zn,"이란 것을 만들어 두었다."),Zn.forEach(s),kc=k(n),ws=p(n,"PRE",{class:!0});var $v=u(ws);$v.forEach(s),rc=k(n),v=p(n,"P",{});var y=u(v);Am=o(y,"위 예제에서 "),Rp=p(y,"CODE",{});var U3=u(Rp);Tm=o(U3,"m"),U3.forEach(s),Gm=o(y,"에서 반환받은 값을 계속 "),Sp=p(y,"CODE",{});var j3=u(Sp);Km=o(j3,"v"),j3.forEach(s),Nm=o(y,", "),zp=p(y,"CODE",{});var F3=u(zp);Zm=o(F3,"ok"),F3.forEach(s),Vm=o(y,` 두 개의 변수에 할당하는 것을 확인할 수 있다.
이 때 첫 번째 변수인 `),Lp=p(y,"CODE",{});var I3=u(Lp);Wm=o(I3,"v"),I3.forEach(s),qm=o(y,"에는 Key에 해당하는 Value가 들어가며, 두 번째 변수인 "),Hp=p(y,"CODE",{});var J3=u(Hp);Um=o(J3,"ok"),J3.forEach(s),jm=o(y,"에는 해당 Key가 "),Bp=p(y,"CODE",{});var Q3=u(Bp);Fm=o(Q3,"m"),Q3.forEach(s),Im=o(y,"에 존재하는지 여부가 "),Mp=p(y,"CODE",{});var X3=u(Mp);Jm=o(X3,"true"),X3.forEach(s),Qm=o(y," or "),Ap=p(y,"CODE",{});var Y3=u(Ap);Xm=o(Y3,"false"),Y3.forEach(s),Ym=o(y,`로 들어간다.
또한 `),Tp=p(y,"CODE",{});var $3=u(Tp);$m=o($3,"map"),$3.forEach(s),gm=o(y,"에서 Key-Value 페어를 지우려면 "),Gp=p(y,"CODE",{});var g3=u(Gp);hm=o(g3,"delete()"),g3.forEach(s),n1=o(y," 함수를 사용한다."),y.forEach(s),fc=k(n),mc=p(n,"BR",{}),bc=p(n,"BR",{}),Ec=k(n),Dn=p(n,"H2",{id:!0});var a2=u(Dn);wn=p(a2,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var h3=u(wn);Kp=p(h3,"SPAN",{class:!0}),u(Kp).forEach(s),h3.forEach(s),s1=o(a2,"struct"),a2.forEach(s),vc=k(n),dc=p(n,"HR",{}),_c=k(n),A=p(n,"P",{});var h=u(A);a1=o(h,"C/C++의 "),Np=p(h,"CODE",{});var nE=u(Np);t1=o(nE,"struct"),nE.forEach(s),p1=o(h,`와 유사하다. Go가 일반적으로 그런 것처럼, 필드들을 선언할 때 자료형이 필드명의 뒤에 온다.
C/C++의 `),Zp=p(h,"CODE",{});var sE=u(Zp);e1=o(sE,"typedef"),sE.forEach(s),o1=o(h," 키워드처럼, "),Vp=p(h,"CODE",{});var aE=u(Vp);l1=o(aE,"type"),aE.forEach(s),c1=o(h," 키워드를 통해 "),Wp=p(h,"CODE",{});var tE=u(Wp);u1=o(tE,"struct"),tE.forEach(s),i1=o(h," 타입을 정의할 수 있다."),h.forEach(s),yc=k(n),Rs=p(n,"PRE",{class:!0});var gv=u(Rs);gv.forEach(s),Pc=k(n),O=p(n,"P",{});var N=u(O);qp=p(N,"CODE",{});var pE=u(qp);k1=o(pE,"struct"),pE.forEach(s),r1=o(N," 인스턴스를 생성할 때는 "),Up=p(N,"CODE",{});var eE=u(Up);f1=o(eE,"struct"),eE.forEach(s),m1=o(N,`를 정의할 때 입력했던 순서대로 각 필드의 값을 중괄호 안에 입력해주면 된다.
특이사항으로는 `),jp=p(N,"CODE",{});var oE=u(jp);b1=o(oE,"map"),oE.forEach(s),E1=o(N,"이나 "),Fp=p(N,"CODE",{});var lE=u(Fp);v1=o(lE,"slice"),lE.forEach(s),d1=o(N,"와는 달리, "),Ip=p(N,"CODE",{});var cE=u(Ip);_1=o(cE,"struct"),cE.forEach(s),y1=o(N,"의 Zero value와 비어있는 "),Jp=p(N,"CODE",{});var uE=u(Jp);P1=o(uE,"struct"),uE.forEach(s),x1=o(N,"가 동일하게 처리된다."),N.forEach(s),xc=k(n),Cc=p(n,"BR",{}),Oc=p(n,"BR",{}),Dc=k(n),Rn=p(n,"H3",{id:!0});var t2=u(Rn);Sn=p(t2,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var iE=u(Sn);Qp=p(iE,"SPAN",{class:!0}),u(Qp).forEach(s),iE.forEach(s),C1=o(t2,"Anonymous Structs"),t2.forEach(s),wc=k(n),Ss=p(n,"PRE",{class:!0});var hv=u(Ss);hv.forEach(s),Rc=k(n),zn=p(n,"P",{});var uu=u(zn);O1=o(uu,"위 코드는 익명 "),Xp=p(uu,"CODE",{});var kE=u(Xp);D1=o(kE,"struct"),kE.forEach(s),w1=o(uu,` 변수를 선언하고, 또 선언과 동시에 초기화하는 예제이다.
타입 명시와 값 할당이 다른 중괄호 안에서 이루어져야 하는 것만 주의하면 큰 문제 없는 듯.`),uu.forEach(s),Sc=k(n),zc=p(n,"BR",{}),Lc=p(n,"BR",{}),Hc=k(n),Ln=p(n,"H3",{id:!0});var p2=u(Ln);Hn=p(p2,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var rE=u(Hn);Yp=p(rE,"SPAN",{class:!0}),u(Yp).forEach(s),rE.forEach(s),R1=o(p2,"Comparing and Converting Structs"),p2.forEach(s),Bc=k(n),zs=p(n,"PRE",{class:!0});var nd=u(zs);nd.forEach(s),Mc=k(n),tn=p(n,"P",{});var ee=u(tn);$p=p(ee,"CODE",{});var fE=u($p);S1=o(fE,"struct"),fE.forEach(s),z1=o(ee,"의 필드가 비교 가능한 타입들로 이루어져 있다면, 서로 같은 "),gp=p(ee,"CODE",{});var mE=u(gp);L1=o(mE,"struct"),mE.forEach(s),H1=o(ee," 타입끼리는 서로 비교할 수 있다."),ee.forEach(s),Ac=k(n),Tc=p(n,"BR",{}),Gc=k(n),Ls=p(n,"PRE",{class:!0});var sd=u(Ls);sd.forEach(s),Kc=k(n),Bn=p(n,"P",{});var iu=u(Bn);B1=o(iu,"서로 다른 "),hp=p(iu,"CODE",{});var bE=u(hp);M1=o(bE,"struct"),bE.forEach(s),A1=o(iu,` 타입끼리는 서로 비교할 수 없다.
단, 필드의 타입과 필드명이 같다면 서로 변환할 수 있다.`),iu.forEach(s),Nc=k(n),Zc=p(n,"BR",{}),Vc=k(n),Hs=p(n,"PRE",{class:!0});var ad=u(Hs);ad.forEach(s),Wc=k(n),na=p(n,"P",{});var EE=u(na);T1=o(EE,"만약 필드의 타입과 필드명이 같아도 선언된 순서가 다르다면 비교 및 변환할 수 없다."),EE.forEach(s),qc=k(n),Uc=p(n,"BR",{}),jc=k(n),Bs=p(n,"PRE",{class:!0});var td=u(Bs);td.forEach(s),Fc=k(n),sa=p(n,"P",{});var vE=u(sa);G1=o(vE,"타입이 같아도 필드명이 다르다면 변환할 수 없으며, 다른 필드가 추가로 존재하면 비교 및 변환할 수 없다."),vE.forEach(s),Ic=k(n),Jc=p(n,"BR",{}),Qc=k(n),Ms=p(n,"PRE",{class:!0});var pd=u(Ms);pd.forEach(s),Xc=k(n),Mn=p(n,"P",{});var ku=u(Mn);K1=o(ku,"동일한 필드를 가지고 있는 익명 "),ne=p(ku,"CODE",{});var dE=u(ne);N1=o(dE,"struct"),dE.forEach(s),Z1=o(ku,"에 대해서는 비교가 가능하다."),ku.forEach(s),Yc=k(n),$c=p(n,"BR",{}),gc=p(n,"BR",{}),hc=k(n),An=p(n,"H2",{id:!0});var e2=u(An);Tn=p(e2,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var _E=u(Tn);se=p(_E,"SPAN",{class:!0}),u(se).forEach(s),_E.forEach(s),V1=o(e2,"References"),e2.forEach(s),nu=k(n),su=p(n,"HR",{}),au=k(n),aa=p(n,"CENTER",{});var yE=u(aa);pn=p(yE,"P",{});var la=u(pn);As=p(la,"A",{href:!0,rel:!0});var PE=u(As);ta=p(PE,"IMG",{src:!0,alt:!0}),PE.forEach(s),W1=k(la),q1=p(la,"BR",{}),U1=k(la),Ts=p(la,"A",{href:!0,rel:!0});var xE=u(Ts);j1=o(xE,"Jon Bodner, 『Learning Go』, O’Reilly Media, Inc."),xE.forEach(s),la.forEach(s),yE.forEach(s),tu=k(n),pu=p(n,"BR",{}),eu=p(n,"BR",{}),this.h()},h(){r(ca,"class","icon icon-link"),r(cn,"aria-hidden","true"),r(cn,"tabindex","-1"),r(cn,"href","#array"),r(ln,"id","array"),r(Wn,"class","language-go"),r(qn,"class","language-go"),r(Un,"class","language-go"),r(jn,"class","language-go"),r(Fn,"class","language-go"),r(wa,"class","icon icon-link"),r(rn,"aria-hidden","true"),r(rn,"tabindex","-1"),r(rn,"href","#slice"),r(kn,"id","slice"),r(In,"class","language-go"),r(Jn,"class","language-go"),r(Xn,"class","language-go"),r(Aa,"class","icon icon-link"),r(mn,"aria-hidden","true"),r(mn,"tabindex","-1"),r(mn,"href","#appending-elements-into-slices"),r(fn,"id","appending-elements-into-slices"),r(Yn,"class","language-go"),r(Ua,"class","icon icon-link"),r(vn,"aria-hidden","true"),r(vn,"tabindex","-1"),r(vn,"href","#slicing-slices"),r(En,"id","slicing-slices"),r($n,"class","language-go"),r(gn,"class","language-go"),r(hn,"class","language-go"),r(ns,"class","language-go"),r(ss,"class","language-go"),r(as,"class","language-go"),r(ts,"class","language-go"),CE(Js.src,l2="/post_img/Go/Golang_basics/GO3/1.jpg")||r(Js,"src",l2),r(Js,"alt","pepe question"),r(ps,"class","language-go"),r(es,"class","language-go"),r(os,"class","language-go"),r(ls,"class","language-go"),r(cs,"class","language-go"),r(us,"class","language-go"),r(is,"class","language-go"),r(ks,"class","language-go"),r(Jt,"class","icon icon-link"),r(_n,"aria-hidden","true"),r(_n,"tabindex","-1"),r(_n,"href","#copying-slices"),r(dn,"id","copying-slices"),r(rs,"class","language-go"),r(ms,"class","language-go"),r(Es,"class","language-go"),r(vs,"class","language-go"),r(gt,"class","icon icon-link"),r(Pn,"aria-hidden","true"),r(Pn,"tabindex","-1"),r(Pn,"href","#string"),r(yn,"id","string"),r(ds,"class","language-go"),r(_s,"class","language-go"),r(ys,"class","language-go"),r(kp,"class","icon icon-link"),r(On,"aria-hidden","true"),r(On,"tabindex","-1"),r(On,"href","#map"),r(Cn,"id","map"),r(Ps,"class","language-go"),r(xs,"class","language-go"),r(Cs,"class","language-go"),r(Os,"class","language-go"),r(Ds,"class","language-go"),r(ws,"class","language-go"),r(Kp,"class","icon icon-link"),r(wn,"aria-hidden","true"),r(wn,"tabindex","-1"),r(wn,"href","#struct"),r(Dn,"id","struct"),r(Rs,"class","language-go"),r(Qp,"class","icon icon-link"),r(Sn,"aria-hidden","true"),r(Sn,"tabindex","-1"),r(Sn,"href","#anonymous-structs"),r(Rn,"id","anonymous-structs"),r(Ss,"class","language-go"),r(Yp,"class","icon icon-link"),r(Hn,"aria-hidden","true"),r(Hn,"tabindex","-1"),r(Hn,"href","#comparing-and-converting-structs"),r(Ln,"id","comparing-and-converting-structs"),r(zs,"class","language-go"),r(Ls,"class","language-go"),r(Hs,"class","language-go"),r(Bs,"class","language-go"),r(Ms,"class","language-go"),r(se,"class","icon icon-link"),r(Tn,"aria-hidden","true"),r(Tn,"tabindex","-1"),r(Tn,"href","#references"),r(An,"id","references"),CE(ta.src,c2="https://learning.oreilly.com/covers/urn:orm:book:9781492077206/400w/")||r(ta,"src",c2),r(ta,"alt","Learning Go Book Cover"),r(As,"href","https://learning.oreilly.com/library/view/learning-go/9781492077206/"),r(As,"rel","nofollow"),r(Ts,"href","https://learning.oreilly.com/library/view/learning-go/9781492077206/"),r(Ts,"rel","nofollow")},m(n,l){c(n,Gs,l),c(n,oe,l),c(n,Ks,l),a(Ks,ru),c(n,le,l),c(n,ce,l),c(n,ue,l),c(n,ie,l),c(n,ln,l),a(ln,cn),a(cn,ca),a(ln,fu),c(n,ke,l),c(n,re,l),c(n,fe,l),c(n,Vn,l),a(Vn,ua),a(ua,mu),a(Vn,bu),c(n,me,l),c(n,Wn,l),Wn.innerHTML=DE,c(n,be,l),c(n,L,l),a(L,Eu),a(L,ia),a(ia,vu),a(L,du),a(L,ka),a(ka,_u),a(L,yu),a(L,ra),a(ra,Pu),a(L,xu),a(L,fa),a(fa,Cu),a(L,Ou),c(n,Ee,l),c(n,ve,l),c(n,de,l),c(n,Ns,l),a(Ns,Du),c(n,_e,l),c(n,qn,l),qn.innerHTML=wE,c(n,ye,l),c(n,E,l),a(E,wu),a(E,ma),a(ma,Ru),a(E,Su),a(E,ba),a(ba,zu),a(E,Lu),a(E,Ea),a(Ea,Hu),a(E,Bu),a(E,va),a(va,Mu),a(E,Au),a(E,da),a(da,Tu),a(E,Gu),a(E,Ku),a(E,Nu),a(E,_a),a(_a,Zu),a(E,Vu),a(E,ya),a(ya,Wu),a(E,qu),a(E,Pa),a(Pa,Uu),a(E,ju),a(E,xa),a(xa,Fu),a(E,Iu),c(n,Pe,l),c(n,xe,l),c(n,Ce,l),c(n,un,l),a(un,Ju),a(un,Ca),a(Ca,Qu),a(un,Xu),c(n,Oe,l),c(n,Un,l),Un.innerHTML=RE,c(n,De,l),c(n,we,l),c(n,Re,l),c(n,Zs,l),a(Zs,Yu),c(n,Se,l),c(n,jn,l),jn.innerHTML=SE,c(n,ze,l),c(n,Le,l),c(n,He,l),c(n,I,l),a(I,$u),a(I,Oa),a(Oa,gu),a(I,hu),a(I,Da),a(Da,ni),a(I,si),c(n,Be,l),c(n,Fn,l),Fn.innerHTML=zE,c(n,Me,l),c(n,Ae,l),c(n,Te,l),c(n,Ge,l),c(n,kn,l),a(kn,rn),a(rn,wa),a(kn,ai),c(n,Ke,l),c(n,Ne,l),c(n,Ze,l),c(n,nn,l),a(nn,Ra),a(Ra,ti),a(nn,pi),a(nn,ei),a(nn,oi),c(n,Ve,l),c(n,In,l),In.innerHTML=LE,c(n,We,l),c(n,qe,l),c(n,Ue,l),c(n,Vs,l),a(Vs,li),c(n,je,l),c(n,D,l),a(D,ci),a(D,Sa),a(Sa,ui),a(D,ii),a(D,za),a(za,ki),a(D,ri),a(D,La),a(La,fi),a(D,mi),a(D,Ha),a(Ha,bi),a(D,Ei),a(D,Ba),a(Ba,vi),a(D,di),c(n,Fe,l),c(n,Jn,l),Jn.innerHTML=HE,c(n,Ie,l),c(n,Ws,l),a(Ws,_i),c(n,Je,l),c(n,Qe,l),c(n,Xe,l),c(n,Qn,l),a(Qn,Ma),a(Ma,yi),a(Qn,Pi),c(n,Ye,l),c(n,Xn,l),Xn.innerHTML=BE,c(n,$e,l),c(n,ge,l),c(n,he,l),c(n,no,l),c(n,fn,l),a(fn,mn),a(mn,Aa),a(fn,xi),c(n,so,l),c(n,ao,l),c(n,to,l),c(n,Z,l),a(Z,Ci),a(Z,Ta),a(Ta,Oi),a(Z,Di),a(Z,wi),a(Z,Ri),a(Z,Ga),a(Ga,Si),a(Z,zi),c(n,po,l),c(n,bn,l),a(bn,Li),a(bn,Ka),a(Ka,Hi),a(bn,Bi),c(n,eo,l),c(n,Yn,l),Yn.innerHTML=ME,c(n,oo,l),c(n,w,l),a(w,Mi),a(w,Na),a(Na,Ai),a(w,Ti),a(w,Za),a(Za,Gi),a(w,Ki),a(w,Va),a(Va,Ni),a(w,Zi),a(w,Wa),a(Wa,Vi),a(w,Wi),a(w,qa),a(qa,qi),a(w,Ui),c(n,lo,l),c(n,co,l),c(n,uo,l),c(n,io,l),c(n,En,l),a(En,vn),a(vn,Ua),a(En,ji),c(n,ko,l),c(n,ro,l),c(n,fo,l),c(n,J,l),a(J,Fi),a(J,ja),a(ja,Ii),a(J,Ji),a(J,Fa),a(Fa,Qi),a(J,Xi),c(n,mo,l),c(n,$n,l),$n.innerHTML=AE,c(n,bo,l),c(n,P,l),a(P,Yi),a(P,Ia),a(Ia,$i),a(P,gi),a(P,Ja),a(Ja,hi),a(P,nk),a(P,Qa),a(Qa,sk),a(P,ak),a(P,Xa),a(Xa,tk),a(P,pk),a(P,Ya),a(Ya,ek),a(P,ok),a(P,$a),a($a,lk),a(P,ck),a(P,ga),a(ga,uk),a(P,ik),c(n,Eo,l),c(n,gn,l),gn.innerHTML=TE,c(n,vo,l),c(n,_o,l),c(n,yo,l),c(n,qs,l),a(qs,kk),c(n,Po,l),c(n,hn,l),hn.innerHTML=GE,c(n,xo,l),c(n,Co,l),c(n,Oo,l),c(n,R,l),a(R,rk),a(R,ha),a(ha,fk),a(R,mk),a(R,nt),a(nt,bk),a(R,Ek),a(R,st),a(st,vk),a(R,dk),a(R,at),a(at,_k),a(R,yk),a(R,tt),a(tt,Pk),a(R,xk),c(n,Do,l),c(n,ns,l),ns.innerHTML=KE,c(n,wo,l),c(n,Us,l),a(Us,Ck),c(n,Ro,l),c(n,ss,l),ss.innerHTML=NE,c(n,So,l),c(n,b,l),a(b,pt),a(pt,Ok),a(b,Dk),a(b,et),a(et,wk),a(b,Rk),a(b,ot),a(ot,Sk),a(b,zk),a(b,lt),a(lt,Lk),a(b,Hk),a(b,ct),a(ct,Bk),a(b,Mk),a(b,ut),a(ut,Ak),a(b,Tk),a(b,it),a(it,Gk),a(b,Kk),a(b,kt),a(kt,Nk),a(b,Zk),a(b,rt),a(rt,Vk),a(b,Wk),a(b,ft),a(ft,qk),a(b,Uk),a(b,mt),a(mt,jk),a(b,Fk),c(n,zo,l),c(n,Lo,l),c(n,Ho,l),c(n,js,l),a(js,Ik),c(n,Bo,l),c(n,as,l),as.innerHTML=ZE,c(n,Mo,l),c(n,Fs,l),a(Fs,Jk),c(n,Ao,l),c(n,ts,l),ts.innerHTML=VE,c(n,To,l),c(n,Go,l),c(n,Ko,l),c(n,Is,l),a(Is,bt),a(bt,Js),c(n,No,l),c(n,Zo,l),c(n,Vo,l),c(n,Qs,l),a(Qs,Qk),c(n,Wo,l),c(n,ps,l),ps.innerHTML=WE,c(n,qo,l),c(n,V,l),a(V,Xk),a(V,Et),a(Et,Yk),a(V,$k),a(V,vt),a(vt,gk),a(V,hk),a(V,dt),a(dt,nr),a(V,sr),c(n,Uo,l),c(n,es,l),es.innerHTML=qE,c(n,jo,l),c(n,H,l),a(H,ar),a(H,_t),a(_t,tr),a(H,pr),a(H,yt),a(yt,er),a(H,or),a(H,Pt),a(Pt,lr),a(H,cr),a(H,xt),a(xt,ur),a(H,ir),c(n,Fo,l),c(n,os,l),os.innerHTML=UE,c(n,Io,l),c(n,Jo,l),c(n,Qo,l),c(n,f,l),a(f,Ct),a(Ct,kr),a(f,rr),a(f,Ot),a(Ot,fr),a(f,mr),a(f,Dt),a(Dt,br),a(f,Er),a(f,wt),a(wt,vr),a(f,dr),a(f,Rt),a(Rt,_r),a(f,yr),a(f,St),a(St,Pr),a(f,xr),a(f,zt),a(zt,Cr),a(f,Or),a(f,Lt),a(Lt,Dr),a(f,wr),a(f,Ht),a(Ht,Rr),a(f,Sr),a(f,Bt),a(Bt,zr),a(f,Lr),a(f,Mt),a(Mt,Hr),a(f,Br),a(f,At),a(At,Mr),a(f,Ar),a(f,Tr),a(f,Gr),a(f,Tt),a(Tt,Kr),a(f,Nr),c(n,Xo,l),c(n,ls,l),ls.innerHTML=jE,c(n,Yo,l),c(n,T,l),a(T,Gt),a(Gt,Zr),a(T,Vr),a(T,Kt),a(Kt,Wr),a(T,qr),a(T,Ur),a(T,jr),a(T,Nt),a(Nt,Fr),a(T,Ir),c(n,$o,l),c(n,cs,l),cs.innerHTML=FE,c(n,go,l),c(n,G,l),a(G,Zt),a(Zt,Jr),a(G,Qr),a(G,Vt),a(Vt,Xr),a(G,Yr),a(G,Wt),a(Wt,$r),a(G,gr),a(G,qt),a(qt,hr),a(G,nf),c(n,ho,l),c(n,nl,l),c(n,sl,l),c(n,B,l),a(B,sf),a(B,Ut),a(Ut,af),a(B,tf),a(B,jt),a(jt,pf),a(B,ef),a(B,Ft),a(Ft,of),a(B,lf),a(B,It),a(It,cf),a(B,uf),c(n,al,l),c(n,us,l),us.innerHTML=IE,c(n,tl,l),c(n,Xs,l),a(Xs,kf),c(n,pl,l),c(n,is,l),is.innerHTML=JE,c(n,el,l),c(n,ol,l),c(n,ll,l),c(n,Ys,l),a(Ys,rf),c(n,cl,l),c(n,ks,l),ks.innerHTML=QE,c(n,ul,l),c(n,il,l),c(n,kl,l),c(n,rl,l),c(n,dn,l),a(dn,_n),a(_n,Jt),a(dn,ff),c(n,fl,l),c(n,ml,l),c(n,bl,l),c(n,Q,l),a(Q,mf),a(Q,Qt),a(Qt,bf),a(Q,Ef),a(Q,Xt),a(Xt,vf),a(Q,df),c(n,El,l),c(n,rs,l),rs.innerHTML=XE,c(n,vl,l),c(n,dl,l),c(n,_l,l),c(n,fs,l),a(fs,Yt),a(Yt,_f),a(fs,yf),c(n,yl,l),c(n,ms,l),ms.innerHTML=YE,c(n,Pl,l),c(n,xl,l),c(n,Cl,l),c(n,bs,l),a(bs,$t),a($t,Pf),a(bs,xf),c(n,Ol,l),c(n,Es,l),Es.innerHTML=$E,c(n,Dl,l),c(n,$s,l),a($s,Cf),c(n,wl,l),c(n,vs,l),vs.innerHTML=gE,c(n,Rl,l),c(n,Sl,l),c(n,zl,l),c(n,Ll,l),c(n,yn,l),a(yn,Pn),a(Pn,gt),a(yn,Of),c(n,Hl,l),c(n,Bl,l),c(n,Ml,l),c(n,sn,l),a(sn,ht),a(ht,Df),a(sn,wf),a(sn,np),a(np,Rf),a(sn,Sf),c(n,Al,l),c(n,ds,l),ds.innerHTML=hE,c(n,Tl,l),c(n,xn,l),a(xn,zf),a(xn,sp),a(sp,Lf),a(xn,Hf),c(n,Gl,l),c(n,_s,l),_s.innerHTML=nv,c(n,Kl,l),c(n,C,l),a(C,ap),a(ap,Bf),a(C,Mf),a(C,tp),a(tp,Af),a(C,Tf),a(C,pp),a(pp,Gf),a(C,Kf),a(C,ep),a(ep,Nf),a(C,Zf),a(C,op),a(op,Vf),a(C,Wf),a(C,lp),a(lp,qf),a(C,Uf),c(n,Nl,l),c(n,ys,l),ys.innerHTML=sv,c(n,Zl,l),c(n,W,l),a(W,jf),a(W,cp),a(cp,Ff),a(W,If),a(W,up),a(up,Jf),a(W,Qf),a(W,ip),a(ip,Xf),a(W,Yf),c(n,Vl,l),c(n,Wl,l),c(n,ql,l),c(n,Ul,l),c(n,Cn,l),a(Cn,On),a(On,kp),a(Cn,$f),c(n,jl,l),c(n,Fl,l),c(n,Il,l),c(n,x,l),a(x,rp),a(rp,gf),a(x,hf),a(x,fp),a(fp,nm),a(x,sm),a(x,am),a(x,tm),a(x,mp),a(mp,pm),a(x,em),a(x,bp),a(bp,om),a(x,lm),a(x,Ep),a(Ep,cm),a(x,um),a(x,vp),a(vp,im),a(x,km),c(n,Jl,l),c(n,Ps,l),Ps.innerHTML=av,c(n,Ql,l),c(n,Xl,l),c(n,Yl,l),c(n,M,l),a(M,rm),a(M,dp),a(dp,fm),a(M,mm),a(M,_p),a(_p,bm),a(M,Em),a(M,yp),a(yp,vm),a(M,dm),a(M,Pp),a(Pp,_m),a(M,ym),c(n,$l,l),c(n,xs,l),xs.innerHTML=tv,c(n,gl,l),c(n,hl,l),c(n,nc,l),c(n,an,l),a(an,xp),a(xp,Pm),a(an,xm),a(an,Cp),a(Cp,Cm),a(an,Om),c(n,sc,l),c(n,Cs,l),Cs.innerHTML=pv,c(n,ac,l),c(n,tc,l),c(n,pc,l),c(n,gs,l),a(gs,Dm),c(n,ec,l),c(n,Os,l),Os.innerHTML=ev,c(n,oc,l),c(n,lc,l),c(n,cc,l),c(n,hs,l),a(hs,wm),c(n,uc,l),c(n,Ds,l),Ds.innerHTML=ov,c(n,ic,l),c(n,q,l),a(q,Rm),a(q,Op),a(Op,Sm),a(q,zm),a(q,Dp),a(Dp,Lm),a(q,Hm),a(q,wp),a(wp,Bm),a(q,Mm),c(n,kc,l),c(n,ws,l),ws.innerHTML=lv,c(n,rc,l),c(n,v,l),a(v,Am),a(v,Rp),a(Rp,Tm),a(v,Gm),a(v,Sp),a(Sp,Km),a(v,Nm),a(v,zp),a(zp,Zm),a(v,Vm),a(v,Lp),a(Lp,Wm),a(v,qm),a(v,Hp),a(Hp,Um),a(v,jm),a(v,Bp),a(Bp,Fm),a(v,Im),a(v,Mp),a(Mp,Jm),a(v,Qm),a(v,Ap),a(Ap,Xm),a(v,Ym),a(v,Tp),a(Tp,$m),a(v,gm),a(v,Gp),a(Gp,hm),a(v,n1),c(n,fc,l),c(n,mc,l),c(n,bc,l),c(n,Ec,l),c(n,Dn,l),a(Dn,wn),a(wn,Kp),a(Dn,s1),c(n,vc,l),c(n,dc,l),c(n,_c,l),c(n,A,l),a(A,a1),a(A,Np),a(Np,t1),a(A,p1),a(A,Zp),a(Zp,e1),a(A,o1),a(A,Vp),a(Vp,l1),a(A,c1),a(A,Wp),a(Wp,u1),a(A,i1),c(n,yc,l),c(n,Rs,l),Rs.innerHTML=cv,c(n,Pc,l),c(n,O,l),a(O,qp),a(qp,k1),a(O,r1),a(O,Up),a(Up,f1),a(O,m1),a(O,jp),a(jp,b1),a(O,E1),a(O,Fp),a(Fp,v1),a(O,d1),a(O,Ip),a(Ip,_1),a(O,y1),a(O,Jp),a(Jp,P1),a(O,x1),c(n,xc,l),c(n,Cc,l),c(n,Oc,l),c(n,Dc,l),c(n,Rn,l),a(Rn,Sn),a(Sn,Qp),a(Rn,C1),c(n,wc,l),c(n,Ss,l),Ss.innerHTML=uv,c(n,Rc,l),c(n,zn,l),a(zn,O1),a(zn,Xp),a(Xp,D1),a(zn,w1),c(n,Sc,l),c(n,zc,l),c(n,Lc,l),c(n,Hc,l),c(n,Ln,l),a(Ln,Hn),a(Hn,Yp),a(Ln,R1),c(n,Bc,l),c(n,zs,l),zs.innerHTML=iv,c(n,Mc,l),c(n,tn,l),a(tn,$p),a($p,S1),a(tn,z1),a(tn,gp),a(gp,L1),a(tn,H1),c(n,Ac,l),c(n,Tc,l),c(n,Gc,l),c(n,Ls,l),Ls.innerHTML=kv,c(n,Kc,l),c(n,Bn,l),a(Bn,B1),a(Bn,hp),a(hp,M1),a(Bn,A1),c(n,Nc,l),c(n,Zc,l),c(n,Vc,l),c(n,Hs,l),Hs.innerHTML=rv,c(n,Wc,l),c(n,na,l),a(na,T1),c(n,qc,l),c(n,Uc,l),c(n,jc,l),c(n,Bs,l),Bs.innerHTML=fv,c(n,Fc,l),c(n,sa,l),a(sa,G1),c(n,Ic,l),c(n,Jc,l),c(n,Qc,l),c(n,Ms,l),Ms.innerHTML=mv,c(n,Xc,l),c(n,Mn,l),a(Mn,K1),a(Mn,ne),a(ne,N1),a(Mn,Z1),c(n,Yc,l),c(n,$c,l),c(n,gc,l),c(n,hc,l),c(n,An,l),a(An,Tn),a(Tn,se),a(An,V1),c(n,nu,l),c(n,su,l),c(n,au,l),c(n,aa,l),a(aa,pn),a(pn,As),a(As,ta),a(pn,W1),a(pn,q1),a(pn,U1),a(pn,Ts),a(Ts,j1),c(n,tu,l),c(n,pu,l),c(n,eu,l)},p:o2,i:o2,o:o2,d(n){n&&s(Gs),n&&s(oe),n&&s(Ks),n&&s(le),n&&s(ce),n&&s(ue),n&&s(ie),n&&s(ln),n&&s(ke),n&&s(re),n&&s(fe),n&&s(Vn),n&&s(me),n&&s(Wn),n&&s(be),n&&s(L),n&&s(Ee),n&&s(ve),n&&s(de),n&&s(Ns),n&&s(_e),n&&s(qn),n&&s(ye),n&&s(E),n&&s(Pe),n&&s(xe),n&&s(Ce),n&&s(un),n&&s(Oe),n&&s(Un),n&&s(De),n&&s(we),n&&s(Re),n&&s(Zs),n&&s(Se),n&&s(jn),n&&s(ze),n&&s(Le),n&&s(He),n&&s(I),n&&s(Be),n&&s(Fn),n&&s(Me),n&&s(Ae),n&&s(Te),n&&s(Ge),n&&s(kn),n&&s(Ke),n&&s(Ne),n&&s(Ze),n&&s(nn),n&&s(Ve),n&&s(In),n&&s(We),n&&s(qe),n&&s(Ue),n&&s(Vs),n&&s(je),n&&s(D),n&&s(Fe),n&&s(Jn),n&&s(Ie),n&&s(Ws),n&&s(Je),n&&s(Qe),n&&s(Xe),n&&s(Qn),n&&s(Ye),n&&s(Xn),n&&s($e),n&&s(ge),n&&s(he),n&&s(no),n&&s(fn),n&&s(so),n&&s(ao),n&&s(to),n&&s(Z),n&&s(po),n&&s(bn),n&&s(eo),n&&s(Yn),n&&s(oo),n&&s(w),n&&s(lo),n&&s(co),n&&s(uo),n&&s(io),n&&s(En),n&&s(ko),n&&s(ro),n&&s(fo),n&&s(J),n&&s(mo),n&&s($n),n&&s(bo),n&&s(P),n&&s(Eo),n&&s(gn),n&&s(vo),n&&s(_o),n&&s(yo),n&&s(qs),n&&s(Po),n&&s(hn),n&&s(xo),n&&s(Co),n&&s(Oo),n&&s(R),n&&s(Do),n&&s(ns),n&&s(wo),n&&s(Us),n&&s(Ro),n&&s(ss),n&&s(So),n&&s(b),n&&s(zo),n&&s(Lo),n&&s(Ho),n&&s(js),n&&s(Bo),n&&s(as),n&&s(Mo),n&&s(Fs),n&&s(Ao),n&&s(ts),n&&s(To),n&&s(Go),n&&s(Ko),n&&s(Is),n&&s(No),n&&s(Zo),n&&s(Vo),n&&s(Qs),n&&s(Wo),n&&s(ps),n&&s(qo),n&&s(V),n&&s(Uo),n&&s(es),n&&s(jo),n&&s(H),n&&s(Fo),n&&s(os),n&&s(Io),n&&s(Jo),n&&s(Qo),n&&s(f),n&&s(Xo),n&&s(ls),n&&s(Yo),n&&s(T),n&&s($o),n&&s(cs),n&&s(go),n&&s(G),n&&s(ho),n&&s(nl),n&&s(sl),n&&s(B),n&&s(al),n&&s(us),n&&s(tl),n&&s(Xs),n&&s(pl),n&&s(is),n&&s(el),n&&s(ol),n&&s(ll),n&&s(Ys),n&&s(cl),n&&s(ks),n&&s(ul),n&&s(il),n&&s(kl),n&&s(rl),n&&s(dn),n&&s(fl),n&&s(ml),n&&s(bl),n&&s(Q),n&&s(El),n&&s(rs),n&&s(vl),n&&s(dl),n&&s(_l),n&&s(fs),n&&s(yl),n&&s(ms),n&&s(Pl),n&&s(xl),n&&s(Cl),n&&s(bs),n&&s(Ol),n&&s(Es),n&&s(Dl),n&&s($s),n&&s(wl),n&&s(vs),n&&s(Rl),n&&s(Sl),n&&s(zl),n&&s(Ll),n&&s(yn),n&&s(Hl),n&&s(Bl),n&&s(Ml),n&&s(sn),n&&s(Al),n&&s(ds),n&&s(Tl),n&&s(xn),n&&s(Gl),n&&s(_s),n&&s(Kl),n&&s(C),n&&s(Nl),n&&s(ys),n&&s(Zl),n&&s(W),n&&s(Vl),n&&s(Wl),n&&s(ql),n&&s(Ul),n&&s(Cn),n&&s(jl),n&&s(Fl),n&&s(Il),n&&s(x),n&&s(Jl),n&&s(Ps),n&&s(Ql),n&&s(Xl),n&&s(Yl),n&&s(M),n&&s($l),n&&s(xs),n&&s(gl),n&&s(hl),n&&s(nc),n&&s(an),n&&s(sc),n&&s(Cs),n&&s(ac),n&&s(tc),n&&s(pc),n&&s(gs),n&&s(ec),n&&s(Os),n&&s(oc),n&&s(lc),n&&s(cc),n&&s(hs),n&&s(uc),n&&s(Ds),n&&s(ic),n&&s(q),n&&s(kc),n&&s(ws),n&&s(rc),n&&s(v),n&&s(fc),n&&s(mc),n&&s(bc),n&&s(Ec),n&&s(Dn),n&&s(vc),n&&s(dc),n&&s(_c),n&&s(A),n&&s(yc),n&&s(Rs),n&&s(Pc),n&&s(O),n&&s(xc),n&&s(Cc),n&&s(Oc),n&&s(Dc),n&&s(Rn),n&&s(wc),n&&s(Ss),n&&s(Rc),n&&s(zn),n&&s(Sc),n&&s(zc),n&&s(Lc),n&&s(Hc),n&&s(Ln),n&&s(Bc),n&&s(zs),n&&s(Mc),n&&s(tn),n&&s(Ac),n&&s(Tc),n&&s(Gc),n&&s(Ls),n&&s(Kc),n&&s(Bn),n&&s(Nc),n&&s(Zc),n&&s(Vc),n&&s(Hs),n&&s(Wc),n&&s(na),n&&s(qc),n&&s(Uc),n&&s(jc),n&&s(Bs),n&&s(Fc),n&&s(sa),n&&s(Ic),n&&s(Jc),n&&s(Qc),n&&s(Ms),n&&s(Xc),n&&s(Mn),n&&s(Yc),n&&s($c),n&&s(gc),n&&s(hc),n&&s(An),n&&s(nu),n&&s(su),n&&s(au),n&&s(aa),n&&s(tu),n&&s(pu),n&&s(eu)}}}const id={title:"복합 타입",date:"2022-07-23T00:00:00.000Z",excerpt:"Composite Types",categories:["Golang","Basic Golang"],coverImage:"/post_img/Go/Golang_basics/cover.png",coverWidth:16,coverHeight:9,indexed:!1,exposed:!0};class kd extends ed{constructor(Gs){super(),od(this,Gs,null,cd,ld,{})}}export{kd as default,id as metadata};
