import{S as Dt,i as xt,s as St,k as p,q as t,a as r,y as ws,l as o,m as l,h as a,r as e,c as k,z as _s,n as f,b as u,E as s,A as vs,g as ys,d as bs,B as Ts,M as Ja}from"./index.d78780bf.js";import{C as za}from"./CodeBlockWrapper.eeb7c0c0.js";import{I as Ht}from"./Image.605b14b5.js";function At(g){let i,w=`<code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	timer <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">NewTimer</span><span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Millisecond<span class="token punctuation">)</span>
	timeout <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

	<span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token operator">&lt;-</span>timer<span class="token punctuation">.</span>C
		<span class="token function">close</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Timer expired"</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	x <span class="token operator">:=</span> <span class="token number">0</span>
	done <span class="token operator">:=</span> <span class="token boolean">false</span>
	<span class="token keyword">for</span> <span class="token operator">!</span>done <span class="token punctuation">&#123;</span>
		<span class="token keyword">select</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">case</span> <span class="token operator">&lt;-</span>timeout<span class="token punctuation">:</span>
			done <span class="token operator">=</span> <span class="token boolean">true</span>
		<span class="token keyword">default</span><span class="token punctuation">:</span>
		<span class="token punctuation">&#125;</span>

		time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Millisecond<span class="token punctuation">)</span>
		x<span class="token operator">++</span>
	<span class="token punctuation">&#125;</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"x ="</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code>`;return{c(){i=p("pre"),this.h()},l(d){i=o(d,"PRE",{class:!0});var E=l(i);E.forEach(a),this.h()},h(){f(i,"class","language-go")},m(d,E){u(d,i,E),i.innerHTML=w},p:Ja,d(d){d&&a(i)}}}function Nt(g){let i,w=`<code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	start <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	ticker <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">NewTicker</span><span class="token punctuation">(</span><span class="token number">100</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Millisecond<span class="token punctuation">)</span>
	<span class="token keyword">defer</span> ticker<span class="token punctuation">.</span><span class="token function">Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	done <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">After</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>

	<span class="token keyword">for</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">select</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">case</span> <span class="token operator">&lt;-</span>ticker<span class="token punctuation">.</span>C<span class="token punctuation">:</span>
			fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"tick:"</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span><span class="token function">Since</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Milliseconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token keyword">case</span> <span class="token operator">&lt;-</span>done<span class="token punctuation">:</span>
			<span class="token keyword">return</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`;return{c(){i=p("pre"),this.h()},l(d){i=o(d,"PRE",{class:!0});var E=l(i);E.forEach(a),this.h()},h(){f(i,"class","language-go")},m(d,E){u(d,i,E),i.innerHTML=w},p:Ja,d(d){d&&a(i)}}}function Lt(g){let i,w=`<code class="language-go"><span class="token keyword">func</span> <span class="token function">monitor</span><span class="token punctuation">(</span>heartbeat <span class="token operator">&lt;-</span><span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> done <span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> tick <span class="token operator">&lt;-</span><span class="token keyword">chan</span> time<span class="token punctuation">.</span>Time<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">var</span> lastHeartbeat time<span class="token punctuation">.</span>Time
	<span class="token keyword">var</span> numTicks <span class="token builtin">int</span>

	<span class="token keyword">for</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">select</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">case</span> <span class="token operator">&lt;-</span>tick<span class="token punctuation">:</span>
			numTicks<span class="token operator">++</span>
			<span class="token keyword">if</span> numTicks <span class="token operator">>=</span> <span class="token number">2</span> <span class="token punctuation">&#123;</span>
				fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"No progress since %s, exiting&#92;n"</span><span class="token punctuation">,</span> lastHeartbeat<span class="token punctuation">)</span>
				<span class="token function">close</span><span class="token punctuation">(</span>done<span class="token punctuation">)</span>
				<span class="token keyword">return</span>
			<span class="token punctuation">&#125;</span>

		<span class="token keyword">case</span> <span class="token operator">&lt;-</span>heartbeat<span class="token punctuation">:</span>
			lastHeartbeat <span class="token operator">=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
			numTicks <span class="token operator">=</span> <span class="token number">0</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">longRunningFunction</span><span class="token punctuation">(</span>heartbeat <span class="token keyword">chan</span><span class="token operator">&lt;-</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> done <span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">select</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">case</span> <span class="token operator">&lt;-</span>done<span class="token punctuation">:</span>
			<span class="token keyword">return</span>
		<span class="token keyword">case</span> heartbeat <span class="token operator">&lt;-</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">:</span>
		<span class="token punctuation">&#125;</span>
		fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Job %d&#92;n"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>
		time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">500</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Millisecond<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
	<span class="token function">close</span><span class="token punctuation">(</span>done<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	heartbeat <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
	<span class="token keyword">defer</span> <span class="token function">close</span><span class="token punctuation">(</span>heartbeat<span class="token punctuation">)</span>
	done <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
	tick <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">NewTicker</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>
	<span class="token keyword">defer</span> tick<span class="token punctuation">.</span><span class="token function">Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	<span class="token keyword">go</span> <span class="token function">monitor</span><span class="token punctuation">(</span>heartbeat<span class="token punctuation">,</span> done<span class="token punctuation">,</span> tick<span class="token punctuation">.</span>C<span class="token punctuation">)</span>
	<span class="token keyword">go</span> <span class="token function">longRunningFunction</span><span class="token punctuation">(</span>heartbeat<span class="token punctuation">,</span> done<span class="token punctuation">)</span>

	<span class="token operator">&lt;-</span>done
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Long running function finished"</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code>`;return{c(){i=p("pre"),this.h()},l(d){i=o(d,"PRE",{class:!0});var E=l(i);E.forEach(a),this.h()},h(){f(i,"class","language-go")},m(d,E){u(d,i,E),i.innerHTML=w},p:Ja,d(d){d&&a(i)}}}function Mt(g){let i,w,d,E,Ln,h,hs,nn,$s,Cs,sn,Ps,Rs,Mn,D,Os,an,Ds,xs,Fn,x,Gn,y,tn,Ss,Hs,en,As,Ns,pn,Ls,Ms,Bn,q,Ct=`<code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
timeout <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

    time<span class="token punctuation">.</span><span class="token function">AfterFunc</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token operator">*</span>time<span class="token punctuation">.</span>Millisecond<span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    	<span class="token function">close</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span>
    	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Timer expired"</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

<span class="token punctuation">&#125;</span></code>`,In,gn,qn,_,Fs,on,Gs,Bs,cn,Is,gs,ln,qs,Ws,un,zs,Js,Wn,S,Us,rn,Zs,js,zn,H,kn,$,fn,Ks,Qs,dn,Vs,Xs,mn,Ys,na,sa,W,C,En,aa,ta,wn,ea,pa,_n,oa,ca,la,Q,Pt=`<code class="language-go"><span class="token keyword">select</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">case</span> <span class="token operator">&lt;-</span>timer<span class="token punctuation">.</span>C<span class="token punctuation">:</span>
		<span class="token comment">// timeout</span>
	<span class="token keyword">case</span> d <span class="token operator">:=</span> <span class="token operator">&lt;-</span>resetTimer<span class="token punctuation">:</span>
		<span class="token keyword">if</span> <span class="token operator">!</span>timer<span class="token punctuation">.</span><span class="token function">Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token operator">&lt;-</span>timer<span class="token punctuation">.</span>C
		<span class="token punctuation">&#125;</span>
		timer<span class="token punctuation">.</span><span class="token function">Reset</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code>`,Jn,Un,Zn,jn,A,N,vn,ua,Kn,Qn,Vn,b,yn,ia,ra,bn,ka,fa,Tn,da,ma,Xn,L,Yn,V,Ea,ns,P,wa,hn,_a,va,$n,ya,ba,ss,M,F,Cn,Ta,as,X,ha,ts,G,es,m,$a,Pn,Ca,Pa,Rn,Ra,Oa,On,Da,xa,Dn,Sa,Ha,xn,Aa,Na,ps,os,cs,ls,B,I,Sn,La,us,is,rs,T,Hn,Ma,Fa,z,Ga,Ba,Ia,ks;return x=new za({props:{$$slots:{default:[At]},$$scope:{ctx:g}}}),L=new za({props:{$$slots:{default:[Nt]},$$scope:{ctx:g}}}),G=new za({props:{$$slots:{default:[Lt]},$$scope:{ctx:g}}}),z=new Ht({props:{alt:"Effective Concurrency in Go",src:"https://learning.oreilly.com/covers/urn:orm:book:9781804619070/400w/"}}),{c(){i=p("h2"),w=p("a"),d=p("span"),E=t("Timer"),Ln=r(),h=p("p"),hs=t("Go에서 일정 시간이 지난 이후 특정 작업을 수행하려면 "),nn=p("code"),$s=t("time.Timer"),Cs=t(`를 사용하면 된다.
`),sn=p("code"),Ps=t("time.Timer"),Rs=t(`는 지정된 시간만큼 대기한 후 채널에 값을 전송한다.
이 때 채널에 전송되는 값은 메시지가 전송된 시간이며, 수신된 시간이 아님을 염두에 두어야 한다.`),Mn=r(),D=p("p"),Os=t("타이머는 주로 작업의 타임아웃을 설정할 때 사용한다. 타임아웃 자체는 "),an=p("code"),Ds=t("context.Context"),xs=t("를 사용하여 구현하는 것이 좋지만, 타이머를 사용하는 방법도 알아두면 좋다."),Fn=r(),ws(x.$$.fragment),Gn=r(),y=p("p"),tn=p("code"),Ss=t("time.NewTimer"),Hs=t(" 대신 "),en=p("code"),As=t("time.After"),Ns=t(`를 사용할 수도 있다. 사용법은 거의 동일하므로 예제는 생략해도 될 듯 하다.
또한 이와 같은 예제는 `),pn=p("code"),Ls=t("time.AfterFunc"),Ms=t("을 사용하여 더 간단하게 작성할 수 있다."),Bn=r(),q=p("pre"),In=r(),gn=p("br"),qn=r(),_=p("p"),Fs=t(`어떤 작업이 타임아웃을 초과하기 이전에 정상적으로 완료되었다면 타이머를 중지해야 한다.
타이머를 중지하려면 `),on=p("code"),Gs=t("Stop"),Bs=t(` 메서드를 호출하면 된다.
타이머가 정상적으로 중지되었다면 `),cn=p("code"),Is=t("Stop"),gs=t(" 메서드는 "),ln=p("code"),qs=t("true"),Ws=t("를 반환하고, 이미 중지되었다면 "),un=p("code"),zs=t("false"),Js=t("를 반환한다."),Wn=r(),S=p("p"),Us=t("타이머를 재설정하려면 "),rn=p("code"),Zs=t("Reset"),js=t(" 메서드를 호출하면 된다."),zn=r(),H=p("ul"),kn=p("li"),$=p("p"),fn=p("code"),Ks=t("AfterFunc"),Qs=t("로 생성된 타이머의 경우 아직 호출되지 않았다면 호출될 시간을 재설정하며, 이미 호출되었다면 한 번 더 호출될 시간이 설정된다. 전자의 경우 "),dn=p("code"),Vs=t("true"),Xs=t("가, 후자의 경우 "),mn=p("code"),Ys=t("false"),na=t("가 반환된다."),sa=r(),W=p("li"),C=p("p"),En=p("code"),aa=t("NewTimer"),ta=t("로 생성된 타이머의 경우, "),wn=p("code"),ea=t("Reset"),pa=t(" 메서드를 사용할 때 동시에 해당 타이머 채널으로부터 값을 수신하고 있는 고루틴이 있어선 안된다. 아래 예제가 "),_n=p("code"),oa=t("Reset"),ca=t(" 메서드를 사용할 때의 올바른 사용법이다."),la=r(),Q=p("pre"),Jn=r(),Un=p("br"),Zn=p("br"),jn=r(),A=p("h2"),N=p("a"),vn=p("span"),ua=t("Tickers"),Kn=r(),Qn=p("hr"),Vn=r(),b=p("p"),yn=p("code"),ia=t("time.Ticker"),ra=t(`는 지정된 시간 간격으로 특정 작업을 수행하려고 할 때 사용한다.
`),bn=p("code"),ka=t("time.Ticker"),fa=t(" 또한 마찬가지로 "),Tn=p("code"),da=t("time.NewTicker"),ma=t(`를 사용하여 생성하며, 명시적으로 중지하기 전까지 주기적으로 채널에 값을 전송한다.
다음의 예제는 3초간 주기적으로 프로그램의 경과 시간을 출력하는 예제이다.`),Xn=r(),ws(L.$$.fragment),Yn=r(),V=p("p"),Ea=t(`Ticker의 간격보다 작업 시간이 길어져서 Ticker가 보내는 신호를 놓치는 경우가 생길 수 있다.
만약 Ticker 채널에서 다음 값이 발생하기 전에 값을 읽었다면 단순이 약간 늦게 읽었을 뿐이라 큰 차이가 없다.
반면 Ticker 채널에서 값을 읽지 못해 다음 값이 이미 발생하는 경우가 있을 수 있다. 이 경우 Ticker 채널에서 값을 읽으면 쌓여있는 값을 와다닥 다 읽는 게 아니라, 놓친 값들은 모두 버려지고 최신 값 하나만 읽게 된다.`),ns=r(),P=p("p"),wa=t("Ticker를 모두 사용했다면 반드시 "),hn=p("code"),_a=t("Stop()"),va=t(` 메서드를 호출하여 중지해야 한다. Timer와 달리 Ticker는 자동으로 중지되지 않기 때문에 가비지 컬렉터가 수거해가지 못한다.
`),$n=p("code"),ya=t("defer ticker.Stop()"),ba=t("를 통해 Ticker를 중지하는 것을 잊지 않도록 하자."),ss=r(),M=p("h3"),F=p("a"),Cn=p("span"),Ta=t("Heartbeats"),as=r(),X=p("p"),ha=t(`Long-running 작업을 수행하는 경우, 작업이 정상적으로 수행되고 있는지 주기적으로 모니터링해야 할 필요가 있다.
이 경우 Long-running 함수가 모니터 함수에 Heartbeat를 보내어 작업이 정상적으로 수행되고 있는지 알려줄 수 있다.
모니터 함수는 일정 시간동안 Heartbeat를 받지 못하면 Long-running 함수가 정상적으로 수행되지 않고 있다고 판단할 수 있다.`),ts=r(),ws(G.$$.fragment),es=r(),m=p("p"),$a=t("위 코드에서 "),Pn=p("code"),Ca=t("monitor"),Pa=t(" 함수는 2회 연속으로 Tick에서 신호를 받는 동안 "),Rn=p("code"),Ra=t("longRunningFunction"),Oa=t("으로부터 Heartbeat를 받지 못하면 문제가 생긴 것으로 판단하고 "),On=p("code"),Da=t("longRunningFunction"),xa=t(`을 종료한다.
이 예제에서 `),Dn=p("code"),Sa=t("heartbeat"),Ha=t(" 채널은 단순히 "),xn=p("code"),Aa=t("struct{}"),Na=t(" 타입이지만 다양한 메타데이터를 포함할 수 있다."),ps=r(),os=p("br"),cs=p("br"),ls=r(),B=p("h2"),I=p("a"),Sn=p("span"),La=t("References"),us=r(),is=p("hr"),rs=r(),T=p("center"),Hn=p("p"),Ma=t("["),Fa=r(),ws(z.$$.fragment),Ga=t(`
](https://learning.oreilly.com/library/view/effective-concurrency-in/9781804619070/)`),Ba=p("br"),Ia=t(`
[Burak Serdar, 『Effective Concurrency in Go』, Packt Publishing](https://learning.oreilly.com/library/view/effective-concurrency-in/9781804619070/)`),this.h()},l(n){i=o(n,"H2",{id:!0});var c=l(i);w=o(c,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var An=l(w);d=o(An,"SPAN",{class:!0}),l(d).forEach(a),An.forEach(a),E=e(c,"Timer"),c.forEach(a),Ln=k(n),h=o(n,"P",{});var O=l(h);hs=e(O,"Go에서 일정 시간이 지난 이후 특정 작업을 수행하려면 "),nn=o(O,"CODE",{});var Nn=l(nn);$s=e(Nn,"time.Timer"),Nn.forEach(a),Cs=e(O,`를 사용하면 된다.
`),sn=o(O,"CODE",{});var Ua=l(sn);Ps=e(Ua,"time.Timer"),Ua.forEach(a),Rs=e(O,`는 지정된 시간만큼 대기한 후 채널에 값을 전송한다.
이 때 채널에 전송되는 값은 메시지가 전송된 시간이며, 수신된 시간이 아님을 염두에 두어야 한다.`),O.forEach(a),Mn=k(n),D=o(n,"P",{});var fs=l(D);Os=e(fs,"타이머는 주로 작업의 타임아웃을 설정할 때 사용한다. 타임아웃 자체는 "),an=o(fs,"CODE",{});var Za=l(an);Ds=e(Za,"context.Context"),Za.forEach(a),xs=e(fs,"를 사용하여 구현하는 것이 좋지만, 타이머를 사용하는 방법도 알아두면 좋다."),fs.forEach(a),Fn=k(n),_s(x.$$.fragment,n),Gn=k(n),y=o(n,"P",{});var J=l(y);tn=o(J,"CODE",{});var ja=l(tn);Ss=e(ja,"time.NewTimer"),ja.forEach(a),Hs=e(J," 대신 "),en=o(J,"CODE",{});var Ka=l(en);As=e(Ka,"time.After"),Ka.forEach(a),Ns=e(J,`를 사용할 수도 있다. 사용법은 거의 동일하므로 예제는 생략해도 될 듯 하다.
또한 이와 같은 예제는 `),pn=o(J,"CODE",{});var Qa=l(pn);Ls=e(Qa,"time.AfterFunc"),Qa.forEach(a),Ms=e(J,"을 사용하여 더 간단하게 작성할 수 있다."),J.forEach(a),Bn=k(n),q=o(n,"PRE",{class:!0});var Rt=l(q);Rt.forEach(a),In=k(n),gn=o(n,"BR",{}),qn=k(n),_=o(n,"P",{});var R=l(_);Fs=e(R,`어떤 작업이 타임아웃을 초과하기 이전에 정상적으로 완료되었다면 타이머를 중지해야 한다.
타이머를 중지하려면 `),on=o(R,"CODE",{});var Va=l(on);Gs=e(Va,"Stop"),Va.forEach(a),Bs=e(R,` 메서드를 호출하면 된다.
타이머가 정상적으로 중지되었다면 `),cn=o(R,"CODE",{});var Xa=l(cn);Is=e(Xa,"Stop"),Xa.forEach(a),gs=e(R," 메서드는 "),ln=o(R,"CODE",{});var Ya=l(ln);qs=e(Ya,"true"),Ya.forEach(a),Ws=e(R,"를 반환하고, 이미 중지되었다면 "),un=o(R,"CODE",{});var nt=l(un);zs=e(nt,"false"),nt.forEach(a),Js=e(R,"를 반환한다."),R.forEach(a),Wn=k(n),S=o(n,"P",{});var ds=l(S);Us=e(ds,"타이머를 재설정하려면 "),rn=o(ds,"CODE",{});var st=l(rn);Zs=e(st,"Reset"),st.forEach(a),js=e(ds," 메서드를 호출하면 된다."),ds.forEach(a),zn=k(n),H=o(n,"UL",{});var ms=l(H);kn=o(ms,"LI",{});var at=l(kn);$=o(at,"P",{});var U=l($);fn=o(U,"CODE",{});var tt=l(fn);Ks=e(tt,"AfterFunc"),tt.forEach(a),Qs=e(U,"로 생성된 타이머의 경우 아직 호출되지 않았다면 호출될 시간을 재설정하며, 이미 호출되었다면 한 번 더 호출될 시간이 설정된다. 전자의 경우 "),dn=o(U,"CODE",{});var et=l(dn);Vs=e(et,"true"),et.forEach(a),Xs=e(U,"가, 후자의 경우 "),mn=o(U,"CODE",{});var pt=l(mn);Ys=e(pt,"false"),pt.forEach(a),na=e(U,"가 반환된다."),U.forEach(a),at.forEach(a),sa=k(ms),W=o(ms,"LI",{});var Es=l(W);C=o(Es,"P",{});var Z=l(C);En=o(Z,"CODE",{});var ot=l(En);aa=e(ot,"NewTimer"),ot.forEach(a),ta=e(Z,"로 생성된 타이머의 경우, "),wn=o(Z,"CODE",{});var ct=l(wn);ea=e(ct,"Reset"),ct.forEach(a),pa=e(Z," 메서드를 사용할 때 동시에 해당 타이머 채널으로부터 값을 수신하고 있는 고루틴이 있어선 안된다. 아래 예제가 "),_n=o(Z,"CODE",{});var lt=l(_n);oa=e(lt,"Reset"),lt.forEach(a),ca=e(Z," 메서드를 사용할 때의 올바른 사용법이다."),Z.forEach(a),la=k(Es),Q=o(Es,"PRE",{class:!0});var Ot=l(Q);Ot.forEach(a),Es.forEach(a),ms.forEach(a),Jn=k(n),Un=o(n,"BR",{}),Zn=o(n,"BR",{}),jn=k(n),A=o(n,"H2",{id:!0});var ga=l(A);N=o(ga,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var ut=l(N);vn=o(ut,"SPAN",{class:!0}),l(vn).forEach(a),ut.forEach(a),ua=e(ga,"Tickers"),ga.forEach(a),Kn=k(n),Qn=o(n,"HR",{}),Vn=k(n),b=o(n,"P",{});var j=l(b);yn=o(j,"CODE",{});var it=l(yn);ia=e(it,"time.Ticker"),it.forEach(a),ra=e(j,`는 지정된 시간 간격으로 특정 작업을 수행하려고 할 때 사용한다.
`),bn=o(j,"CODE",{});var rt=l(bn);ka=e(rt,"time.Ticker"),rt.forEach(a),fa=e(j," 또한 마찬가지로 "),Tn=o(j,"CODE",{});var kt=l(Tn);da=e(kt,"time.NewTicker"),kt.forEach(a),ma=e(j,`를 사용하여 생성하며, 명시적으로 중지하기 전까지 주기적으로 채널에 값을 전송한다.
다음의 예제는 3초간 주기적으로 프로그램의 경과 시간을 출력하는 예제이다.`),j.forEach(a),Xn=k(n),_s(L.$$.fragment,n),Yn=k(n),V=o(n,"P",{});var ft=l(V);Ea=e(ft,`Ticker의 간격보다 작업 시간이 길어져서 Ticker가 보내는 신호를 놓치는 경우가 생길 수 있다.
만약 Ticker 채널에서 다음 값이 발생하기 전에 값을 읽었다면 단순이 약간 늦게 읽었을 뿐이라 큰 차이가 없다.
반면 Ticker 채널에서 값을 읽지 못해 다음 값이 이미 발생하는 경우가 있을 수 있다. 이 경우 Ticker 채널에서 값을 읽으면 쌓여있는 값을 와다닥 다 읽는 게 아니라, 놓친 값들은 모두 버려지고 최신 값 하나만 읽게 된다.`),ft.forEach(a),ns=k(n),P=o(n,"P",{});var Y=l(P);wa=e(Y,"Ticker를 모두 사용했다면 반드시 "),hn=o(Y,"CODE",{});var dt=l(hn);_a=e(dt,"Stop()"),dt.forEach(a),va=e(Y,` 메서드를 호출하여 중지해야 한다. Timer와 달리 Ticker는 자동으로 중지되지 않기 때문에 가비지 컬렉터가 수거해가지 못한다.
`),$n=o(Y,"CODE",{});var mt=l($n);ya=e(mt,"defer ticker.Stop()"),mt.forEach(a),ba=e(Y,"를 통해 Ticker를 중지하는 것을 잊지 않도록 하자."),Y.forEach(a),ss=k(n),M=o(n,"H3",{id:!0});var qa=l(M);F=o(qa,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Et=l(F);Cn=o(Et,"SPAN",{class:!0}),l(Cn).forEach(a),Et.forEach(a),Ta=e(qa,"Heartbeats"),qa.forEach(a),as=k(n),X=o(n,"P",{});var wt=l(X);ha=e(wt,`Long-running 작업을 수행하는 경우, 작업이 정상적으로 수행되고 있는지 주기적으로 모니터링해야 할 필요가 있다.
이 경우 Long-running 함수가 모니터 함수에 Heartbeat를 보내어 작업이 정상적으로 수행되고 있는지 알려줄 수 있다.
모니터 함수는 일정 시간동안 Heartbeat를 받지 못하면 Long-running 함수가 정상적으로 수행되지 않고 있다고 판단할 수 있다.`),wt.forEach(a),ts=k(n),_s(G.$$.fragment,n),es=k(n),m=o(n,"P",{});var v=l(m);$a=e(v,"위 코드에서 "),Pn=o(v,"CODE",{});var _t=l(Pn);Ca=e(_t,"monitor"),_t.forEach(a),Pa=e(v," 함수는 2회 연속으로 Tick에서 신호를 받는 동안 "),Rn=o(v,"CODE",{});var vt=l(Rn);Ra=e(vt,"longRunningFunction"),vt.forEach(a),Oa=e(v,"으로부터 Heartbeat를 받지 못하면 문제가 생긴 것으로 판단하고 "),On=o(v,"CODE",{});var yt=l(On);Da=e(yt,"longRunningFunction"),yt.forEach(a),xa=e(v,`을 종료한다.
이 예제에서 `),Dn=o(v,"CODE",{});var bt=l(Dn);Sa=e(bt,"heartbeat"),bt.forEach(a),Ha=e(v," 채널은 단순히 "),xn=o(v,"CODE",{});var Tt=l(xn);Aa=e(Tt,"struct{}"),Tt.forEach(a),Na=e(v," 타입이지만 다양한 메타데이터를 포함할 수 있다."),v.forEach(a),ps=k(n),os=o(n,"BR",{}),cs=o(n,"BR",{}),ls=k(n),B=o(n,"H2",{id:!0});var Wa=l(B);I=o(Wa,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var ht=l(I);Sn=o(ht,"SPAN",{class:!0}),l(Sn).forEach(a),ht.forEach(a),La=e(Wa,"References"),Wa.forEach(a),us=k(n),is=o(n,"HR",{}),rs=k(n),T=o(n,"CENTER",{});var K=l(T);Hn=o(K,"P",{});var $t=l(Hn);Ma=e($t,"["),$t.forEach(a),Fa=k(K),_s(z.$$.fragment,K),Ga=e(K,`
](https://learning.oreilly.com/library/view/effective-concurrency-in/9781804619070/)`),Ba=o(K,"BR",{}),Ia=e(K,`
[Burak Serdar, 『Effective Concurrency in Go』, Packt Publishing](https://learning.oreilly.com/library/view/effective-concurrency-in/9781804619070/)`),K.forEach(a),this.h()},h(){f(d,"class","icon icon-link"),f(w,"aria-hidden","true"),f(w,"tabindex","-1"),f(w,"href","#timer"),f(i,"id","timer"),f(q,"class","language-go"),f(Q,"class","language-go"),f(vn,"class","icon icon-link"),f(N,"aria-hidden","true"),f(N,"tabindex","-1"),f(N,"href","#tickers"),f(A,"id","tickers"),f(Cn,"class","icon icon-link"),f(F,"aria-hidden","true"),f(F,"tabindex","-1"),f(F,"href","#heartbeats"),f(M,"id","heartbeats"),f(Sn,"class","icon icon-link"),f(I,"aria-hidden","true"),f(I,"tabindex","-1"),f(I,"href","#references"),f(B,"id","references")},m(n,c){u(n,i,c),s(i,w),s(w,d),s(i,E),u(n,Ln,c),u(n,h,c),s(h,hs),s(h,nn),s(nn,$s),s(h,Cs),s(h,sn),s(sn,Ps),s(h,Rs),u(n,Mn,c),u(n,D,c),s(D,Os),s(D,an),s(an,Ds),s(D,xs),u(n,Fn,c),vs(x,n,c),u(n,Gn,c),u(n,y,c),s(y,tn),s(tn,Ss),s(y,Hs),s(y,en),s(en,As),s(y,Ns),s(y,pn),s(pn,Ls),s(y,Ms),u(n,Bn,c),u(n,q,c),q.innerHTML=Ct,u(n,In,c),u(n,gn,c),u(n,qn,c),u(n,_,c),s(_,Fs),s(_,on),s(on,Gs),s(_,Bs),s(_,cn),s(cn,Is),s(_,gs),s(_,ln),s(ln,qs),s(_,Ws),s(_,un),s(un,zs),s(_,Js),u(n,Wn,c),u(n,S,c),s(S,Us),s(S,rn),s(rn,Zs),s(S,js),u(n,zn,c),u(n,H,c),s(H,kn),s(kn,$),s($,fn),s(fn,Ks),s($,Qs),s($,dn),s(dn,Vs),s($,Xs),s($,mn),s(mn,Ys),s($,na),s(H,sa),s(H,W),s(W,C),s(C,En),s(En,aa),s(C,ta),s(C,wn),s(wn,ea),s(C,pa),s(C,_n),s(_n,oa),s(C,ca),s(W,la),s(W,Q),Q.innerHTML=Pt,u(n,Jn,c),u(n,Un,c),u(n,Zn,c),u(n,jn,c),u(n,A,c),s(A,N),s(N,vn),s(A,ua),u(n,Kn,c),u(n,Qn,c),u(n,Vn,c),u(n,b,c),s(b,yn),s(yn,ia),s(b,ra),s(b,bn),s(bn,ka),s(b,fa),s(b,Tn),s(Tn,da),s(b,ma),u(n,Xn,c),vs(L,n,c),u(n,Yn,c),u(n,V,c),s(V,Ea),u(n,ns,c),u(n,P,c),s(P,wa),s(P,hn),s(hn,_a),s(P,va),s(P,$n),s($n,ya),s(P,ba),u(n,ss,c),u(n,M,c),s(M,F),s(F,Cn),s(M,Ta),u(n,as,c),u(n,X,c),s(X,ha),u(n,ts,c),vs(G,n,c),u(n,es,c),u(n,m,c),s(m,$a),s(m,Pn),s(Pn,Ca),s(m,Pa),s(m,Rn),s(Rn,Ra),s(m,Oa),s(m,On),s(On,Da),s(m,xa),s(m,Dn),s(Dn,Sa),s(m,Ha),s(m,xn),s(xn,Aa),s(m,Na),u(n,ps,c),u(n,os,c),u(n,cs,c),u(n,ls,c),u(n,B,c),s(B,I),s(I,Sn),s(B,La),u(n,us,c),u(n,is,c),u(n,rs,c),u(n,T,c),s(T,Hn),s(Hn,Ma),s(T,Fa),vs(z,T,null),s(T,Ga),s(T,Ba),s(T,Ia),ks=!0},p(n,[c]){const An={};c&1&&(An.$$scope={dirty:c,ctx:n}),x.$set(An);const O={};c&1&&(O.$$scope={dirty:c,ctx:n}),L.$set(O);const Nn={};c&1&&(Nn.$$scope={dirty:c,ctx:n}),G.$set(Nn)},i(n){ks||(ys(x.$$.fragment,n),ys(L.$$.fragment,n),ys(G.$$.fragment,n),ys(z.$$.fragment,n),ks=!0)},o(n){bs(x.$$.fragment,n),bs(L.$$.fragment,n),bs(G.$$.fragment,n),bs(z.$$.fragment,n),ks=!1},d(n){n&&a(i),n&&a(Ln),n&&a(h),n&&a(Mn),n&&a(D),n&&a(Fn),Ts(x,n),n&&a(Gn),n&&a(y),n&&a(Bn),n&&a(q),n&&a(In),n&&a(gn),n&&a(qn),n&&a(_),n&&a(Wn),n&&a(S),n&&a(zn),n&&a(H),n&&a(Jn),n&&a(Un),n&&a(Zn),n&&a(jn),n&&a(A),n&&a(Kn),n&&a(Qn),n&&a(Vn),n&&a(b),n&&a(Xn),Ts(L,n),n&&a(Yn),n&&a(V),n&&a(ns),n&&a(P),n&&a(ss),n&&a(M),n&&a(as),n&&a(X),n&&a(ts),Ts(G,n),n&&a(es),n&&a(m),n&&a(ps),n&&a(os),n&&a(cs),n&&a(ls),n&&a(B),n&&a(us),n&&a(is),n&&a(rs),n&&a(T),Ts(z)}}}const It={title:"Timer와 Ticker",date:"2023-09-14T00:00:00.000Z",excerpt:"Go에서 일정 시간이 지난 이후 또는 주기적으로 특정 작업을 수행하려면 어떻게 해야 할지 알아보자.",categories:["Golang","Concurrency in Go"],coverImage:"/post_img/Go/Concurrency in Go/cover.png",coverWidth:16,coverHeight:9,indexed:!1,exposed:!0};class gt extends Dt{constructor(i){super(),xt(this,i,null,Mt,St,{})}}export{gt as default,It as metadata};
