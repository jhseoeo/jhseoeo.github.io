import{S as fr,i as mr,s as _r,k as o,q as l,a as i,y as x,l as e,m as c,r as u,h as s,c as k,z as S,n as f,b as p,E as a,A as R,g as B,d as O,B as M,M as H}from"./index.d78780bf.js";import{C as L}from"./CodeBlockWrapper.eeb7c0c0.js";import{I as dr}from"./Image.605b14b5.js";function Er(w){let r,E=`<code class="language-go"><span class="token keyword">package</span> chapter8

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">"context"</span>
	<span class="token string">"errors"</span>
	<span class="token string">"fmt"</span>
<span class="token punctuation">)</span>

<span class="token keyword">type</span> EmailSender <span class="token keyword">interface</span> <span class="token punctuation">&#123;</span>
	<span class="token function">SendEmailReceipt</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> email <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">type</span> CardCharger <span class="token keyword">interface</span> <span class="token punctuation">&#123;</span>
	<span class="token function">ChargeCard</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> cardToken <span class="token builtin">string</span><span class="token punctuation">,</span> amountInCent <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">error</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">type</span> CookieStockChecker <span class="token keyword">interface</span> <span class="token punctuation">&#123;</span>
	<span class="token function">AmountInStock</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token builtin">int</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">type</span> CookieService <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
	emailSender        EmailSender
	cardCharger        CardCharger
	cookieStockChecker CookieStockChecker
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">NewCookieService</span><span class="token punctuation">(</span>e EmailSender<span class="token punctuation">,</span> c CardCharger<span class="token punctuation">,</span> a CookieStockChecker<span class="token punctuation">)</span> <span class="token operator">*</span>CookieService <span class="token punctuation">&#123;</span>
	<span class="token keyword">return</span> <span class="token operator">&amp;</span>CookieService<span class="token punctuation">&#123;</span>
		emailSender<span class="token punctuation">:</span>        e<span class="token punctuation">,</span>
		cardCharger<span class="token punctuation">:</span>        c<span class="token punctuation">,</span>
		cookieStockChecker<span class="token punctuation">:</span> a<span class="token punctuation">,</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>CookieService<span class="token punctuation">)</span> <span class="token function">PurchaseCookies</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> amountOfCookies <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">&#123;</span>
	<span class="token comment">// TODO: 쿠키 가격 결정하는 로직 추가</span>
	<span class="token keyword">const</span> priceOfCookie <span class="token operator">=</span> <span class="token number">5</span>

	cookiesInStock <span class="token operator">:=</span> c<span class="token punctuation">.</span>cookieStockChecker<span class="token punctuation">.</span><span class="token function">AmountInStock</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span>
	<span class="token keyword">if</span> cookiesInStock <span class="token operator">&lt;</span> amountOfCookies <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"not enough cookies in stock"</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>

	cost <span class="token operator">:=</span> priceOfCookie <span class="token operator">*</span> amountOfCookies

	err <span class="token operator">:=</span> c<span class="token punctuation">.</span>cardCharger<span class="token punctuation">.</span><span class="token function">ChargeCard</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token string">"some-token"</span><span class="token punctuation">,</span> cost<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"failed to charge card: %w"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>

	err <span class="token operator">=</span> c<span class="token punctuation">.</span>emailSender<span class="token punctuation">.</span><span class="token function">SendEmailReceipt</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token string">"some-email"</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"failed to send email receipt: %w"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">&#125;</span></code>`;return{c(){r=o("pre"),this.h()},l(m){r=e(m,"PRE",{class:!0});var _=c(r);_.forEach(s),this.h()},h(){f(r,"class","language-go")},m(m,_){p(m,r,_),r.innerHTML=E},p:H,d(m){m&&s(r)}}}function vr(w){let r,E=`<code class="language-go"><span class="token keyword">func</span> <span class="token function">Test_CookiePurchases</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	t<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token string">&#96;Given a user tries to purchase a cookie and we have them in stock,
    when they tap their card, they get charged and then receive an email receipt a few moments later.&#96;</span><span class="token punctuation">,</span>
		<span class="token keyword">func</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			ctrl <span class="token operator">:=</span> gomock<span class="token punctuation">.</span><span class="token function">NewController</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span>
			e <span class="token operator">:=</span> mocks<span class="token punctuation">.</span><span class="token function">NewMockEmailSender</span><span class="token punctuation">(</span>ctrl<span class="token punctuation">)</span>
			c <span class="token operator">:=</span> mocks<span class="token punctuation">.</span><span class="token function">NewMockCardCharger</span><span class="token punctuation">(</span>ctrl<span class="token punctuation">)</span>
			s <span class="token operator">:=</span> mocks<span class="token punctuation">.</span><span class="token function">NewMockCookieStockChecker</span><span class="token punctuation">(</span>ctrl<span class="token punctuation">)</span>
			ctx <span class="token operator">:=</span> context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

			<span class="token keyword">const</span> cookiesToBuy <span class="token operator">=</span> <span class="token number">5</span>
			<span class="token keyword">const</span> totalExpectedCost <span class="token operator">=</span> <span class="token number">25</span>

			cs<span class="token punctuation">,</span> err <span class="token operator">:=</span> chapter8<span class="token punctuation">.</span><span class="token function">NewCookieService</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> c<span class="token punctuation">,</span> s<span class="token punctuation">)</span>
			<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
				t<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">"unexpected error: %v"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
			<span class="token punctuation">&#125;</span>

			gomock<span class="token punctuation">.</span><span class="token function">InOrder</span><span class="token punctuation">(</span>
				s<span class="token punctuation">.</span><span class="token function">EXPECT</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">AmountInStock</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Times</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Return</span><span class="token punctuation">(</span>cookiesToBuy<span class="token punctuation">)</span><span class="token punctuation">,</span>
				c<span class="token punctuation">.</span><span class="token function">EXPECT</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ChargeCard</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token string">"some-token"</span><span class="token punctuation">,</span> totalExpectedCost<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Times</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Return</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
				e<span class="token punctuation">.</span><span class="token function">EXPECT</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SendEmailReceipt</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token string">"some-email"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Times</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Return</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
			<span class="token punctuation">)</span>

			err <span class="token operator">=</span> cs<span class="token punctuation">.</span><span class="token function">PurchaseCookies</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> cookiesToBuy<span class="token punctuation">)</span>
			<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
				t<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">"unexpected error: %v"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
			<span class="token punctuation">&#125;</span>
		<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code>`;return{c(){r=o("pre"),this.h()},l(m){r=e(m,"PRE",{class:!0});var _=c(r);_.forEach(s),this.h()},h(){f(r,"class","language-go")},m(m,_){p(m,r,_),r.innerHTML=E},p:H,d(m){m&&s(r)}}}function wr(w){let r,E=`<code class="language-go">	t<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token string">&#96;Given a user tries to purchase a cookie and we don't have any in stock, we return an error to the cashier
      so they can apologize to the customer.&#96;</span><span class="token punctuation">,</span>
		<span class="token keyword">func</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			t<span class="token punctuation">.</span><span class="token function">FailNow</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

	t<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token string">&#96;Given a user tries to purchase a cookie, we have them in stock, but their card gets declined, we return
   an error to the cashier so that we can ban the customer from the store.&#96;</span><span class="token punctuation">,</span>
		<span class="token keyword">func</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			t<span class="token punctuation">.</span><span class="token function">FailNow</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

	t<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token string">&#96;Given a user purchases a cookie and we have them in stock, their card is charged successfully but we
   fail to send an email, we return a message to the cashier so they know can notify the customer that they will not
   get an e-mail, but the transaction is still considered done.&#96;</span><span class="token punctuation">,</span>
		<span class="token keyword">func</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			t<span class="token punctuation">.</span><span class="token function">FailNow</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

	t<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token string">&#96;Given someone wants to purchase more cookies than we have in stock we only charge them for the ones we do have&#96;</span><span class="token punctuation">,</span>
		<span class="token keyword">func</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			t<span class="token punctuation">.</span><span class="token function">FailNow</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code>`;return{c(){r=o("pre"),this.h()},l(m){r=e(m,"PRE",{class:!0});var _=c(r);_.forEach(s),this.h()},h(){f(r,"class","language-go")},m(m,_){p(m,r,_),r.innerHTML=E},p:H,d(m){m&&s(r)}}}function Dr(w){let r,E=`<code class="language-go">	t<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token string">&#96;Given a user tries to purchase a cookie and we don't have any in stock, we return an error to the cashier
      so they can apologize to the customer.&#96;</span><span class="token punctuation">,</span>
		<span class="token keyword">func</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			ctrl <span class="token operator">:=</span> gomock<span class="token punctuation">.</span><span class="token function">NewController</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span>
			e <span class="token operator">:=</span> mocks<span class="token punctuation">.</span><span class="token function">NewMockEmailSender</span><span class="token punctuation">(</span>ctrl<span class="token punctuation">)</span>
			c <span class="token operator">:=</span> mocks<span class="token punctuation">.</span><span class="token function">NewMockCardCharger</span><span class="token punctuation">(</span>ctrl<span class="token punctuation">)</span>
			s <span class="token operator">:=</span> mocks<span class="token punctuation">.</span><span class="token function">NewMockCookieStockChecker</span><span class="token punctuation">(</span>ctrl<span class="token punctuation">)</span>
			ctx <span class="token operator">:=</span> context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

			<span class="token keyword">const</span> cookiesToBuy <span class="token operator">=</span> <span class="token number">5</span>
			cs<span class="token punctuation">,</span> err <span class="token operator">:=</span> chapter8<span class="token punctuation">.</span><span class="token function">NewCookieService</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> c<span class="token punctuation">,</span> s<span class="token punctuation">)</span>
			<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
				t<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">"unexpected error: %v"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
			<span class="token punctuation">&#125;</span>

			gomock<span class="token punctuation">.</span><span class="token function">InOrder</span><span class="token punctuation">(</span>
				s<span class="token punctuation">.</span><span class="token function">EXPECT</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">AmountInStock</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Times</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Return</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
			<span class="token punctuation">)</span>
			err <span class="token operator">=</span> cs<span class="token punctuation">.</span><span class="token function">PurchaseCookies</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> cookiesToBuy<span class="token punctuation">)</span>
			<span class="token keyword">if</span> err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
				t<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">"expected error, got nil"</span><span class="token punctuation">)</span>
			<span class="token punctuation">&#125;</span>
		<span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code>`;return{c(){r=o("pre"),this.h()},l(m){r=e(m,"PRE",{class:!0});var _=c(r);_.forEach(s),this.h()},h(){f(r,"class","language-go")},m(m,_){p(m,r,_),r.innerHTML=E},p:H,d(m){m&&s(r)}}}function br(w){let r,E=`<code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>CookieService<span class="token punctuation">)</span> <span class="token function">PurchaseCookies</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> amountOfCookies <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">const</span> priceOfCookie <span class="token operator">=</span> <span class="token number">50</span>

	cookiesInStock <span class="token operator">:=</span> c<span class="token punctuation">.</span>cookieStockChecker<span class="token punctuation">.</span><span class="token function">AmountInStock</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span>
	<span class="token keyword">if</span> cookiesInStock <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"no cookies in stock"</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">if</span> cookiesInStock <span class="token operator">&lt;</span> amountOfCookies <span class="token punctuation">&#123;</span>
		<span class="token comment">// TODO : 재고 부족시 로직 추가</span>
	<span class="token punctuation">&#125;</span>

	cost <span class="token operator">:=</span> priceOfCookie <span class="token operator">*</span> amountOfCookies

	err <span class="token operator">:=</span> c<span class="token punctuation">.</span>cardCharger<span class="token punctuation">.</span><span class="token function">ChargeCard</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token string">"some-token"</span><span class="token punctuation">,</span> cost<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"failed to charge card: %w"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>

	err <span class="token operator">=</span> c<span class="token punctuation">.</span>emailSender<span class="token punctuation">.</span><span class="token function">SendEmailReceipt</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token string">"some-email"</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"failed to send email receipt: %w"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">&#125;</span></code>`;return{c(){r=o("pre"),this.h()},l(m){r=e(m,"PRE",{class:!0});var _=c(r);_.forEach(s),this.h()},h(){f(r,"class","language-go")},m(m,_){p(m,r,_),r.innerHTML=E},p:H,d(m){m&&s(r)}}}function Cr(w){let r,E=`<code class="language-go">	t<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token string">&#96;Given a user tries to purchase a cookie, we have them in stock, but their card gets declined, we return
	an error to the cashier so that we can ban the customer from the store.&#96;</span><span class="token punctuation">,</span>
			<span class="token keyword">func</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
				ctrl <span class="token operator">:=</span> gomock<span class="token punctuation">.</span><span class="token function">NewController</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span>
				e <span class="token operator">:=</span> mocks<span class="token punctuation">.</span><span class="token function">NewMockEmailSender</span><span class="token punctuation">(</span>ctrl<span class="token punctuation">)</span>
				c <span class="token operator">:=</span> mocks<span class="token punctuation">.</span><span class="token function">NewMockCardCharger</span><span class="token punctuation">(</span>ctrl<span class="token punctuation">)</span>
				s <span class="token operator">:=</span> mocks<span class="token punctuation">.</span><span class="token function">NewMockCookieStockChecker</span><span class="token punctuation">(</span>ctrl<span class="token punctuation">)</span>
				ctx <span class="token operator">:=</span> context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

				<span class="token keyword">const</span> cookiesToBuy <span class="token operator">=</span> <span class="token number">5</span>
				<span class="token keyword">const</span> totalExpectedCost <span class="token operator">=</span> <span class="token number">250</span>
				cs<span class="token punctuation">,</span> err <span class="token operator">:=</span> chapter8<span class="token punctuation">.</span><span class="token function">NewCookieService</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> c<span class="token punctuation">,</span> s<span class="token punctuation">)</span>
				<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
					t<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">"unexpected error: %v"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
				<span class="token punctuation">&#125;</span>

				gomock<span class="token punctuation">.</span><span class="token function">InOrder</span><span class="token punctuation">(</span>
					s<span class="token punctuation">.</span><span class="token function">EXPECT</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">AmountInStock</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Times</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Return</span><span class="token punctuation">(</span>cookiesToBuy<span class="token punctuation">)</span><span class="token punctuation">,</span>
					c<span class="token punctuation">.</span><span class="token function">EXPECT</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ChargeCard</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token string">"some-token"</span><span class="token punctuation">,</span> totalExpectedCost<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Times</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Return</span><span class="token punctuation">(</span>errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"your card was declined"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
				<span class="token punctuation">)</span>
				err <span class="token operator">=</span> cs<span class="token punctuation">.</span><span class="token function">PurchaseCookies</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> cookiesToBuy<span class="token punctuation">)</span>
				<span class="token keyword">if</span> err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
					t<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">"expected error, got nil"</span><span class="token punctuation">)</span>
				<span class="token punctuation">&#125;</span>
				<span class="token keyword">if</span> err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token string">"your card was declined"</span> <span class="token punctuation">&#123;</span>
					t<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">"expected error, got %v"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
				<span class="token punctuation">&#125;</span>
			<span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code>`;return{c(){r=o("pre"),this.h()},l(m){r=e(m,"PRE",{class:!0});var _=c(r);_.forEach(s),this.h()},h(){f(r,"class","language-go")},m(m,_){p(m,r,_),r.innerHTML=E},p:H,d(m){m&&s(r)}}}function $r(w){let r,E=`<code class="language-go">	t<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token string">&#96;Given someone wants to purchase more cookies than we have in stock we only charge them for the ones we do have&#96;</span><span class="token punctuation">,</span>
		<span class="token keyword">func</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			ctrl <span class="token operator">:=</span> gomock<span class="token punctuation">.</span><span class="token function">NewController</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span>
			e <span class="token operator">:=</span> mocks<span class="token punctuation">.</span><span class="token function">NewMockEmailSender</span><span class="token punctuation">(</span>ctrl<span class="token punctuation">)</span>
			c <span class="token operator">:=</span> mocks<span class="token punctuation">.</span><span class="token function">NewMockCardCharger</span><span class="token punctuation">(</span>ctrl<span class="token punctuation">)</span>
			s <span class="token operator">:=</span> mocks<span class="token punctuation">.</span><span class="token function">NewMockCookieStockChecker</span><span class="token punctuation">(</span>ctrl<span class="token punctuation">)</span>
			ctx <span class="token operator">:=</span> context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

			<span class="token keyword">const</span> cookiesToBuy <span class="token operator">=</span> <span class="token number">5</span>
			<span class="token keyword">const</span> inStock <span class="token operator">=</span> <span class="token number">3</span>
			<span class="token keyword">const</span> totalExpectedCost <span class="token operator">=</span> <span class="token number">150</span>
			cs<span class="token punctuation">,</span> err <span class="token operator">:=</span> chapter8<span class="token punctuation">.</span><span class="token function">NewCookieService</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> c<span class="token punctuation">,</span> s<span class="token punctuation">)</span>
			<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
				t<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">"unexpected error: %v"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
			<span class="token punctuation">&#125;</span>

			gomock<span class="token punctuation">.</span><span class="token function">InOrder</span><span class="token punctuation">(</span>
				s<span class="token punctuation">.</span><span class="token function">EXPECT</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">AmountInStock</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Times</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Return</span><span class="token punctuation">(</span>inStock<span class="token punctuation">)</span><span class="token punctuation">,</span>
				c<span class="token punctuation">.</span><span class="token function">EXPECT</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ChargeCard</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token string">"some-token"</span><span class="token punctuation">,</span> totalExpectedCost<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Times</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Return</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
				e<span class="token punctuation">.</span><span class="token function">EXPECT</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SendEmailReceipt</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token string">"some-email"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Times</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Return</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
			<span class="token punctuation">)</span>

			err <span class="token operator">=</span> cs<span class="token punctuation">.</span><span class="token function">PurchaseCookies</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> cookiesToBuy<span class="token punctuation">)</span>
			<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
				t<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">"unexpected error: %v"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
			<span class="token punctuation">&#125;</span>
		<span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code>`;return{c(){r=o("pre"),this.h()},l(m){r=e(m,"PRE",{class:!0});var _=c(r);_.forEach(s),this.h()},h(){f(r,"class","language-go")},m(m,_){p(m,r,_),r.innerHTML=E},p:H,d(m){m&&s(r)}}}function Tr(w){let r,E=`<code class="language-go">cookiesInStock <span class="token operator">:=</span> c<span class="token punctuation">.</span>cookieStockChecker<span class="token punctuation">.</span><span class="token function">AmountInStock</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span>
	<span class="token keyword">if</span> cookiesInStock <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"no cookies in stock"</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">if</span> cookiesInStock <span class="token operator">&lt;</span> amountOfCookies <span class="token punctuation">&#123;</span>
		amountOfCookies <span class="token operator">=</span> cookiesInStock
	<span class="token punctuation">&#125;</span></code>`;return{c(){r=o("pre"),this.h()},l(m){r=e(m,"PRE",{class:!0});var _=c(r);_.forEach(s),this.h()},h(){f(r,"class","language-go")},m(m,_){p(m,r,_),r.innerHTML=E},p:H,d(m){m&&s(r)}}}function hr(w){let r,E=`<code class="language-go">	t<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token string">&#96;Given a user tries to purchase a cookie and we have them in stock,
    when they tap their card, they get charged and then receive an email receipt a few moments later.&#96;</span><span class="token punctuation">,</span>
		<span class="token keyword">func</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			ctrl <span class="token operator">:=</span> gomock<span class="token punctuation">.</span><span class="token function">NewController</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span>
			e <span class="token operator">:=</span> mocks<span class="token punctuation">.</span><span class="token function">NewMockEmailSender</span><span class="token punctuation">(</span>ctrl<span class="token punctuation">)</span>
			c <span class="token operator">:=</span> mocks<span class="token punctuation">.</span><span class="token function">NewMockCardCharger</span><span class="token punctuation">(</span>ctrl<span class="token punctuation">)</span>
			s <span class="token operator">:=</span> mocks<span class="token punctuation">.</span><span class="token function">NewMockCookieStockChecker</span><span class="token punctuation">(</span>ctrl<span class="token punctuation">)</span>
			ctx <span class="token operator">:=</span> context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

			<span class="token keyword">const</span> cookiesToBuy <span class="token operator">=</span> <span class="token number">5</span>
			<span class="token keyword">const</span> totalExpectedCost <span class="token operator">=</span> <span class="token number">250</span>
			<span class="token keyword">const</span> cardToken <span class="token operator">=</span> <span class="token string">"some-token"</span>
			<span class="token keyword">const</span> email <span class="token operator">=</span> <span class="token string">"some-email"</span>

			cs<span class="token punctuation">,</span> err <span class="token operator">:=</span> chapter8<span class="token punctuation">.</span><span class="token function">NewCookieService</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> c<span class="token punctuation">,</span> s<span class="token punctuation">)</span>
			<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
				t<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">"unexpected error: %v"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
			<span class="token punctuation">&#125;</span>

			gomock<span class="token punctuation">.</span><span class="token function">InOrder</span><span class="token punctuation">(</span>
				s<span class="token punctuation">.</span><span class="token function">EXPECT</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">AmountInStock</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Times</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Return</span><span class="token punctuation">(</span>cookiesToBuy<span class="token punctuation">)</span><span class="token punctuation">,</span>
				c<span class="token punctuation">.</span><span class="token function">EXPECT</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ChargeCard</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> cardToken<span class="token punctuation">,</span> totalExpectedCost<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Times</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Return</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
				e<span class="token punctuation">.</span><span class="token function">EXPECT</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SendEmailReceipt</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> email<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Times</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Return</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
			<span class="token punctuation">)</span>

			err <span class="token operator">=</span> cs<span class="token punctuation">.</span><span class="token function">PurchaseCookies</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> cookiesToBuy<span class="token punctuation">,</span> cardToken<span class="token punctuation">,</span> email<span class="token punctuation">)</span>
			<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
				t<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">"unexpected error: %v"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
			<span class="token punctuation">&#125;</span>
		<span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code>`;return{c(){r=o("pre"),this.h()},l(m){r=e(m,"PRE",{class:!0});var _=c(r);_.forEach(s),this.h()},h(){f(r,"class","language-go")},m(m,_){p(m,r,_),r.innerHTML=E},p:H,d(m){m&&s(r)}}}function Pr(w){let r,E=`<code class="language-go"><span class="token keyword">package</span> chapter8

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">"github.com/go-bdd/gobdd"</span>
	<span class="token string">"testing"</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">add</span><span class="token punctuation">(</span>t gobdd<span class="token punctuation">.</span>StepTest<span class="token punctuation">,</span> ctx gobdd<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> first <span class="token builtin">int</span><span class="token punctuation">,</span> second <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	res <span class="token operator">:=</span> first <span class="token operator">+</span> second
	ctx<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">"result"</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">check</span><span class="token punctuation">(</span>t gobdd<span class="token punctuation">.</span>StepTest<span class="token punctuation">,</span> ctx gobdd<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> sum <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	received<span class="token punctuation">,</span> err <span class="token operator">:=</span> ctx<span class="token punctuation">.</span><span class="token function">GetInt</span><span class="token punctuation">(</span><span class="token string">"result"</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		t<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">if</span> sum <span class="token operator">!=</span> received <span class="token punctuation">&#123;</span>
		t<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">"Expected %d, received %d"</span><span class="token punctuation">,</span> sum<span class="token punctuation">,</span> received<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">TestScenarios</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	suite <span class="token operator">:=</span> gobdd<span class="token punctuation">.</span><span class="token function">NewSuite</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span>
	suite<span class="token punctuation">.</span><span class="token function">AddStep</span><span class="token punctuation">(</span><span class="token string">&#96;I add (d+) and (d+)&#96;</span><span class="token punctuation">,</span> add<span class="token punctuation">)</span>
	suite<span class="token punctuation">.</span><span class="token function">AddStep</span><span class="token punctuation">(</span><span class="token string">&#96;the result should equal (d+)&#96;</span><span class="token punctuation">,</span> check<span class="token punctuation">)</span>
	suite<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code>`;return{c(){r=o("pre"),this.h()},l(m){r=e(m,"PRE",{class:!0});var _=c(r);_.forEach(s),this.h()},h(){f(r,"class","language-go")},m(m,_){p(m,r,_),r.innerHTML=E},p:H,d(m){m&&s(r)}}}function yr(w){let r,E,m,_,ft,mt,j,q,Ks,te,_t,dt,Et,cs,pe,vt,ls,oe,wt,b,xn,F,ee,Sn,ce,Vs,le,ue,ie,Rn,ke,Ys,re,fe,me,_e,na,de,Ee,sa,aa,ve,we,ta,pa,De,be,oa,ea,Ce,$e,ca,la,Te,Dt,us,he,bt,Ct,$t,is,Pe,Tt,Bn,ye,ua,xe,ht,ks,Se,Pt,$,ia,Re,Be,ka,Oe,Me,ra,Ae,Ie,fa,ge,yt,rs,Ge,xt,St,Rt,Bt,Q,U,ma,Ne,Ot,W,_a,Le,He,da,Fe,We,Mt,On,Ik=`<code class="language-text">.
├── cookies.go
├── cookies_test.go
└── go.mod</code>`,At,A,Xe,Ea,je,qe,Mn,Qe,Ue,It,z,ze,va,Ze,Je,gt,An,gk=`<code class="language-go"><span class="token keyword">package</span> chapter8_test

<span class="token keyword">import</span> <span class="token string">"testing"</span>

<span class="token keyword">func</span> <span class="token function">Test_CookiePurchases</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	t<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token string">&#96;Given a user tries to purchase a cookie and we have them in stock,
    when they tap their card, they get charged and then receive an email receipt a few moments later.&#96;</span><span class="token punctuation">,</span>
		<span class="token keyword">func</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			t<span class="token punctuation">.</span><span class="token function">FailNow</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code>`,Gt,fs,Ke,Nt,Z,Ve,wa,Ye,nc,Lt,ms,sc,Ht,In,Gk=`<code class="language-bash">$ go <span class="token builtin class-name">test</span> ./<span class="token punctuation">..</span>.
--- FAIL: Test_CookiePurchases <span class="token punctuation">(</span><span class="token number">0</span>.00s<span class="token punctuation">)</span>
    --- FAIL: Test_CookiePurchases/Given_a_user_tries_to_purchase_a_cookie_and_we_have_them_in_stock,_____when_they_tap_their_card,_they_get_charged_and_then_receive_an_email_receipt_a_few_moments_later. <span class="token punctuation">(</span><span class="token number">0</span>.00s<span class="token punctuation">)</span>
FAIL
<span class="token builtin class-name">exit</span> status <span class="token number">1</span>
FAIL    github.com/jhseoeo/Golang-DDD/chapter8  <span class="token number">0</span>.001s</code>`,Ft,_s,ac,Wt,Xt,jt,qt,J,K,Da,tc,Qt,V,pc,ba,oc,ec,Ut,Y,zt,Zt,Jt,Kt,nn,sn,Ca,cc,Vt,h,$a,lc,uc,Ta,ic,kc,ha,rc,fc,Yt,an,mc,gn,_c,dc,np,tn,Ec,Pa,vc,wc,sp,Gn,Nk='<code class="language-bash">go <span class="token function">install</span> github.com/golang/mock/mockgen@v1.6.0</code>',ap,pn,Dc,ya,bc,Cc,tp,Nn,Lk=`<code class="language-go"><span class="token keyword">package</span> chapter8
<span class="token keyword">import</span> <span class="token boolean">_</span> <span class="token string">"github.com/golang/mock/mockgen/model"</span>
<span class="token comment">//go:generate mockgen -package mocks -destination chapter8/mocks/cookies.go github.com/jhseoeo/Golang-DDD/chapter8 CookieStockChecker,CardCharger,EmailSender</span></code>`,pp,I,$c,xa,Tc,hc,Sa,Pc,yc,op,Ln,Hk=`<code class="language-text">.
├── chapter8
│   └── mocks
│       └── cookies.go
├── cookies.go
├── cookies_test.go
├── gen.go
├── go.mod
└── go.sum</code>`,ep,on,xc,Ra,Sc,Rc,cp,en,lp,D,Bc,Ba,Oc,Mc,Oa,Ac,Ic,Ma,gc,Gc,Aa,Nc,Lc,Ia,Hc,Fc,up,Hn,ga,Wc,Xc,ip,cn,jc,qc,Qc,kp,ds,Uc,rp,Es,zc,fp,vs,Zc,mp,ln,Jc,Ga,Kc,Vc,_p,un,dp,Ep,vp,wp,kn,rn,Na,Yc,Dp,ws,nl,bp,Ds,sl,Cp,bs,al,$p,fn,Tp,Cs,tl,hp,$s,pl,Pp,mn,yp,xp,Sp,Ts,ol,Rp,_n,Bp,hs,el,Op,Fn,Fk=`<code class="language-text">--- FAIL: Test_CookiePurchases/Given_a_user_tries_to_purchase_a_cookie,_we_have_them_in_stock,_but_their_card_gets_declined,_we_return____an_error_to_the_cashier_so_that_we_can_ban_the_customer_from_the_store. (0.00s)
        cookies_test.go:92: expected error, got failed to charge card: some error</code>`,Mp,g,cl,La,ll,ul,Ha,il,kl,Ap,Wn,Wk=`<code class="language-go">	err <span class="token operator">:=</span> c<span class="token punctuation">.</span>cardCharger<span class="token punctuation">.</span><span class="token function">ChargeCard</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token string">"some-token"</span><span class="token punctuation">,</span> cost<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> err
	<span class="token punctuation">&#125;</span></code>`,Ip,Ps,rl,gp,Xn,Xk='<code class="language-text">--- PASS: Test_CookiePurchases/Given_a_user_tries_to_purchase_a_cookie,_we_have_them_in_stock,_but_their_card_gets_declined,_we_return____an_error_to_the_cashier_so_that_we_can_ban_the_customer_from_the_store. (0.00s)</code>',Gp,ys,fl,Np,Lp,Hp,xs,ml,Fp,jn,jk=`<code class="language-go">	t<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token string">&#96;Given a user purchases a cookie and we have them in stock, their card is charged successfully but we
	fail to send an email, we return a message to the cashier so they know can notify the customer that they will not
	get an e-mail, but the transaction is still considered done.&#96;</span><span class="token punctuation">,</span>
			<span class="token keyword">func</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
				ctrl <span class="token operator">:=</span> gomock<span class="token punctuation">.</span><span class="token function">NewController</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span>
				e <span class="token operator">:=</span> mocks<span class="token punctuation">.</span><span class="token function">NewMockEmailSender</span><span class="token punctuation">(</span>ctrl<span class="token punctuation">)</span>
				c <span class="token operator">:=</span> mocks<span class="token punctuation">.</span><span class="token function">NewMockCardCharger</span><span class="token punctuation">(</span>ctrl<span class="token punctuation">)</span>
				s <span class="token operator">:=</span> mocks<span class="token punctuation">.</span><span class="token function">NewMockCookieStockChecker</span><span class="token punctuation">(</span>ctrl<span class="token punctuation">)</span>
				ctx <span class="token operator">:=</span> context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

				<span class="token keyword">const</span> cookiesToBuy <span class="token operator">=</span> <span class="token number">5</span>
				<span class="token keyword">const</span> totalExpectedCost <span class="token operator">=</span> <span class="token number">250</span>
				cs<span class="token punctuation">,</span> err <span class="token operator">:=</span> chapter8<span class="token punctuation">.</span><span class="token function">NewCookieService</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> c<span class="token punctuation">,</span> s<span class="token punctuation">)</span>
				<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
					t<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">"unexpected error: %v"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
				<span class="token punctuation">&#125;</span>

				gomock<span class="token punctuation">.</span><span class="token function">InOrder</span><span class="token punctuation">(</span>
					s<span class="token punctuation">.</span><span class="token function">EXPECT</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">AmountInStock</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Times</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Return</span><span class="token punctuation">(</span>cookiesToBuy<span class="token punctuation">)</span><span class="token punctuation">,</span>
					c<span class="token punctuation">.</span><span class="token function">EXPECT</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ChargeCard</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token string">"some-token"</span><span class="token punctuation">,</span> totalExpectedCost<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Times</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Return</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
					e<span class="token punctuation">.</span><span class="token function">EXPECT</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SendEmailReceipt</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token string">"some-email"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Times</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Return</span><span class="token punctuation">(</span>errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"failed to send email"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
				<span class="token punctuation">)</span>
				err <span class="token operator">=</span> cs<span class="token punctuation">.</span><span class="token function">PurchaseCookies</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> cookiesToBuy<span class="token punctuation">)</span>
				<span class="token keyword">if</span> err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
					t<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">"expected error, got nil"</span><span class="token punctuation">)</span>
				<span class="token punctuation">&#125;</span>
				<span class="token keyword">if</span> err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token string">"failed to send email"</span> <span class="token punctuation">&#123;</span>
					t<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">"expected error, got %v"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
				<span class="token punctuation">&#125;</span>
			<span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code>`,Wp,Ss,_l,Xp,qn,qk=`<code class="language-go">	err <span class="token operator">:=</span> c<span class="token punctuation">.</span>emailSender<span class="token punctuation">.</span><span class="token function">SendEmailReceipt</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token string">"some-email"</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> err
	<span class="token punctuation">&#125;</span></code>`,jp,Rs,dl,qp,Qp,Up,Bs,El,zp,dn,Zp,Os,vl,Jp,Qn,Qk=`<code class="language-text">--- FAIL: Test_CookiePurchases (0.00s)
    --- FAIL: Test_CookiePurchases/Given_someone_wants_to_purchase_more_cookies_than_we_have_in_stock_we_only_charge_them_for_the_ones_we_do_have (0.00s)
        cookies.go:47: Unexpected call to *mocks.MockCardCharger.ChargeCard([context.Background some-token 250]) at /home/junhyuk/Programming/Golang/Golang-DDD/chapter8/cookies.go:47 because:
            expected call at /home/junhyuk/Programming/Golang/Golang-DDD/chapter8/cookies_test.go:145 doesn't match the argument at index 2.
            Got: 250 (int)
            Want: is equal to 150 (int)
        controller.go:137: missing call(s) to *mocks.MockCardCharger.ChargeCard(is equal to context.Background (*context.emptyCtx), is equal to some-token (string), is equal to 150 (int)) /home/junhyuk/Programming/Golang/Golang-DDD/chapter8/cookies_test.go:145
        controller.go:137: missing call(s) to *mocks.MockEmailSender.SendEmailReceipt(is equal to context.Background (*context.emptyCtx), is equal to some-email (string)) /home/junhyuk/Programming/Golang/Golang-DDD/chapter8/cookies_test.go:146
        controller.go:137: aborting test due to missing call(s)
FAIL
exit status 1
FAIL    github.com/jhseoeo/Golang-DDD/chapter8  0.001s</code>`,Kp,Ms,wl,Vp,En,Yp,As,Dl,no,so,ao,vn,bl,Fa,Cl,$l,to,Un,Uk=`<code class="language-text">PASS
        github.com/jhseoeo/Golang-DDD/chapter8  coverage: 100.0% of statements
ok      github.com/jhseoeo/Golang-DDD/chapter8  0.002s</code>`,po,Is,Tl,oo,eo,co,gs,hl,lo,Gs,Pl,uo,io,ko,Ns,yl,ro,Ls,xl,fo,zn,zk='<code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>CookieService<span class="token punctuation">)</span> <span class="token function">PurchaseCookies</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> amountOfCookies <span class="token builtin">int</span><span class="token punctuation">,</span> cardToken <span class="token builtin">string</span><span class="token punctuation">,</span> email <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">&#123;</span></code>',mo,Hs,Sl,_o,wn,Eo,Fs,Rl,vo,wo,Do,Ws,Bl,bo,Co,$o,To,Dn,bn,Wa,Ol,ho,Xs,Ml,Po,G,Al,Zn,Il,gl,Jn,Gl,Nl,yo,Kn,Cn,Xa,Ll,Hl,Fl,xo,Vn,Zk='<code class="language-bash">go get github.com/go-bdd/gobdd</code>',So,N,Wl,ja,Xl,jl,qa,ql,Ql,Ro,Yn,Jk=`<code class="language-gherkin"><span class="token feature"><span class="token keyword">Feature:</span><span class="token important"> Adding numbers</span>
</span>    <span class="token scenario"><span class="token keyword">Scenario:</span><span class="token important"> add two numbers together</span></span>
        <span class="token atrule">When</span> <span class="token atrule">I</span> add 3 and 6
        <span class="token atrule">Then</span> the result should equal 9</code>`,Bo,$n,Ul,Qa,zl,Zl,Oo,Tn,Mo,d,Jl,Ua,Kl,Vl,za,Yl,nu,Za,su,au,Ja,tu,pu,Ka,ou,eu,Va,cu,lu,Ya,uu,iu,nt,ku,ru,st,fu,mu,at,_u,du,Ao,P,tt,Eu,vu,pt,wu,Du,ot,bu,Cu,Io,go,Go,js,$u,No,Lo,Ho,Fo,hn,Pn,et,Tu,Wo,Xo,jo,y,ct,hu,Pu,ns,yu,xu,Su,qo;return Y=new L({props:{$$slots:{default:[Er]},$$scope:{ctx:w}}}),en=new L({props:{$$slots:{default:[vr]},$$scope:{ctx:w}}}),un=new L({props:{$$slots:{default:[wr]},$$scope:{ctx:w}}}),fn=new L({props:{$$slots:{default:[Dr]},$$scope:{ctx:w}}}),mn=new L({props:{$$slots:{default:[br]},$$scope:{ctx:w}}}),_n=new L({props:{$$slots:{default:[Cr]},$$scope:{ctx:w}}}),dn=new L({props:{$$slots:{default:[$r]},$$scope:{ctx:w}}}),En=new L({props:{$$slots:{default:[Tr]},$$scope:{ctx:w}}}),wn=new L({props:{$$slots:{default:[hr]},$$scope:{ctx:w}}}),Tn=new L({props:{$$slots:{default:[Pr]},$$scope:{ctx:w}}}),ns=new dr({props:{alt:"Domain-Driven Design with Golang Cover",src:"https://learning.oreilly.com/covers/urn:orm:book:9781804613450/400w/"}}),{c(){r=o("p"),E=l(`지금까지 DDD의 핵심적인 개념에 대해 알아보았다.
하지만 DDD 외에도 TDD, BDD 등 DDD와 함께 사용할 수 있는 여러 개발 방법론이 존재한다.
본 포스트에서는 이에 대해 알아보고, DDD와 함께 사용할 수 있는 방법에 대해 알아보려 한다.`),m=i(),_=o("br"),ft=o("br"),mt=i(),j=o("h2"),q=o("a"),Ks=o("span"),te=l("TDD"),_t=i(),dt=o("hr"),Et=i(),cs=o("p"),pe=l(`TDD(Test Driven Development)는 소프트웨어를 개발하기 이전에 비즈니스 요구사항을 충족시키는 테스트를 먼저 작성하는 개발 방법론이다.
코드를 작성할 때 테스트케이스를 지속적으로 업데이트해야 하고, 테스트케이스를 통과하는 코드를 작성해야 한다.`),vt=i(),ls=o("p"),oe=l("가령 TDD를 사용하여 애플리케이션에 새로운 기능을 추가하는 작업을 수행한다고 할 때, 다음과 같은 절차를 따른다."),wt=i(),b=o("ol"),xn=o("li"),F=o("p"),ee=l(`코드를 작성하기 전에 테스트케이스를 작성한다.
`),Sn=o("em"),ce=l("“API 유저인 내가 홈 화면에서 "),Vs=o("code"),le=l("/balance"),ue=l(" 엔드포인트로 요청을 날려서 모든 계정의 잔고를 확인할 수 있어야 한다”"),ie=l(`처럼 유저 스토리를 기반으로 테스트케이스를 작성할 수 있다.
또는 `),Rn=o("em"),ke=l("“Given API 사용자, When "),Ys=o("code"),re=l("/balance"),fe=l(" 호출, Then 모든 통장의 잔고를 확인할 수 있음”"),me=l("과 같이 Given-When-Then(GWT) 패턴으로 작성할 수도 있다."),_e=i(),na=o("p"),de=l("이 단계에서는 단 한 줄의 코드도 작성하지 않으며, 비즈니스 요구사항에 초점을 맞추어야 한다."),Ee=i(),sa=o("li"),aa=o("p"),ve=l(`테스트를 실행한다. 코드를 작성하지 않았기 때문에, 테스트는 당연히 실패할 것이다.
이 단계는 테스트케이스와 테스트 프레임워크가 잘 설정되었는지 확인하는 단계이다.`),we=i(),ta=o("li"),pa=o("p"),De=l(`테스트를 통과하는 최소한의 코드를 작성한다.
이 단계에서 작성되는 코드는 특별히 예쁘고 깔끔할 필요 없다! 그저 테스트를 통과하기만 하면 된다.
비즈니스 불변성을 위반하지 않는 선에서 테스트를 통과하기 위한 모든 방법을 동원한다.`),be=i(),oa=o("li"),ea=o("p"),Ce=l(`테스트를 재실행한다. 새 테스트뿐 아니라, 기존의 테스트도 모두 통과해야 한다.
즉, 새로운 코드가 기존의 코드를 망가뜨리지 않았는지 확인한다.`),$e=i(),ca=o("li"),la=o("p"),Te=l(`코드를 리팩토링한다. 3단계에서 작성한 예쁘지 않은 코드를 예쁘게 리팩토링해주면 된다.
틈틈이 테스트를 실행하면서 코드가 잘 동작하는지 확인한다.`),Dt=i(),us=o("p"),he=l(`이러한 절차를 반복하는 것이 TDD의 핵심이다.
TDD는 새로운 기능을 추가할 때 뿐만 아니라, 기존의 코드를 수정할 때에도 사용할 수 있다. 즉, 레거시 코드를 개선하거나 디버깅할 때에도 유용하다.`),bt=i(),Ct=o("br"),$t=i(),is=o("p"),Pe=l("다음과 같은 Given-When-Then 테스트케이스가 있다고 가정해보자."),Tt=i(),Bn=o("p"),ye=l("제목: "),ua=o("em"),xe=l("고객이 쿠키를 구매하면, 이메일 영수증을 받는다."),ht=i(),ks=o("p"),Se=l("그렇다면 다음과 같은 합격 기준을 정의할 수 있다."),Pt=i(),$=o("ul"),ia=o("li"),Re=l("사용자가 쿠키를 구매할 때 쿠키 재고가 충분하다면 결제가 완료된 이후 잠시 뒤 이메일 영수증을 받는다."),Be=i(),ka=o("li"),Oe=l("사용자가 쿠키를 구매할 때 쿠키 재고가 충분하지 않다면 계산원에게 쿠키 재고가 부족하다는 알림을 보낸다."),Me=i(),ra=o("li"),Ae=l("사용자가 쿠키를 구매할 때 쿠키 재고가 충분하지만 카드 결제가 실패한다면 계산원에게 카드 결제가 실패했다는 알림을 보낸다."),Ie=i(),fa=o("li"),ge=l("결제가 완료되었지만 이메일 전송에 실패한 경우, 계산원에게 이메일 전송이 실패했다는 알림을 보낸다."),yt=i(),rs=o("p"),Ge=l("이제 TDD 절차에 따라 기능을 구현해볼 것이다."),xt=i(),St=o("br"),Rt=o("br"),Bt=i(),Q=o("h3"),U=o("a"),ma=o("span"),Ne=l("테스트 추가"),Ot=i(),W=o("p"),_a=o("code"),Le=l("cookies.go"),He=l(" 파일 및 "),da=o("code"),Fe=l("cookies_test.go"),We=l(" 파일을 생성한다."),Mt=i(),On=o("pre"),At=i(),A=o("p"),Xe=l("go는 테스트 파일의 이름이 "),Ea=o("code"),je=l("_test.go"),qe=l("로 끝나는 파일을 테스트 파일로 인식한다. 또한 빌드 시 테스트 파일은 무시된다. golang에서의 테스트에 관련한 자세한 내용은 "),Mn=o("a"),Qe=l("여기"),Ue=l("를 참고하자."),It=i(),z=o("p"),ze=l("TDD 절차에 따라, 테스트를 먼저 작성해 보자! "),va=o("code"),Ze=l("cookies_test.go"),Je=l(" 파일에 다음과 같이 테스트케이스를 작성한다."),gt=i(),An=o("pre"),Gt=i(),fs=o("p"),Ke=l(`위 코드에서 확인할 수 있듯 테스트케이스의 이름에 합격 기준이 명시되었다.
바로 이 부분에서 TDD와 DDD가 잘 어울린다는 것을 알 수 있다. TDD의 합격 기준 자체가 도메인 전문가로부터 나온 셈이며, 이 내용이 테스트케이스에 명시됨으로써 도메인 전문가와 개발자 사이의 의사소통이 원활해진다.`),Nt=i(),Z=o("p"),Ve=l("Go에서는 테스트가 비어 있으면 통과한 것으로 간주하기 때문에, "),wa=o("code"),Ye=l("t.FailNow()"),nc=l(`를 추가하여 테스트가 실패하도록 만들었다.
이와 같이, 원칙적으로 아직 작성하지 않은 테스트는 실패해야 한다.`),Lt=i(),ms=o("p"),sc=l("그럼 테스트를 실행해보자!"),Ht=i(),In=o("pre"),Ft=i(),_s=o("p"),ac=l("테스트가 성공적으로 실패했다..! 다음 단계로 넘어가보자."),Wt=i(),Xt=o("br"),jt=o("br"),qt=i(),J=o("h3"),K=o("a"),Da=o("span"),tc=l("코드 작성"),Qt=i(),V=o("p"),pc=l(`지금까지 테스트만을 작성했고, 코드는 한 줄도 작성하지 않았다.
이제 할 일은 `),ba=o("code"),oc=l("cookies.go"),ec=l(` 파일에 테스트를 통과할 수 있는 최소한의 코드를 작성하는 것이다.
거듭 언급하지만, 이 단계에서 코드를 특별히 예쁘게 작성할 필요는 없다.`),Ut=i(),x(Y.$$.fragment),zt=i(),Zt=o("br"),Jt=o("br"),Kt=i(),nn=o("h3"),sn=o("a"),Ca=o("span"),cc=l("테스트 실행"),Vt=i(),h=o("p"),$a=o("code"),lc=l("PurchaseCookies"),uc=l(` 메서드는 몇 가지 인터페이스를 통해 의존성을 주입받는다.
이러한 경우 인터페이스를 Mocking하여 테스트를 쉽게 작성할 수 있다.
이를테면 이메일 전송시 오류가 발생하는 상황을 테스트하기 위해, `),Ta=o("code"),ic=l("EmailSender"),kc=l(" 인터페이스에 대한 Mock을 만들어 "),ha=o("code"),rc=l("SendEmailReceipt"),fc=l(" 메서드가 오류를 반환하도록 만들 수 있다."),Yt=i(),an=o("p"),mc=l("Golang 개발팀에서는 Mocking을 위해 "),gn=o("a"),_c=l("gomock"),dc=l(` 프레임워크를 제공한다.
이 프레임워크를 이용하여 mock을 만들어보자.`),np=i(),tn=o("p"),Ec=l("먼저, "),Pa=o("code"),vc=l("gomock"),wc=l("을 설치한다."),sp=i(),Gn=o("pre"),ap=i(),pn=o("p"),Dc=l("이후 프로젝트 루트 디렉토리에 "),ya=o("code"),bc=l("gen.go"),Cc=l(" 파일을 생성하고, 다음과 같이 작성한다."),tp=i(),Nn=o("pre"),pp=i(),I=o("p"),$c=l("이제 "),xa=o("code"),Tc=l("go generate ./..."),hc=l(" 명령어를 실행하면, "),Sa=o("code"),Pc=l("mocks"),yc=l(" 디렉토리에 Mock이 생성된 것을 확인할 수 있다."),op=i(),Ln=o("pre"),ep=i(),on=o("p"),xc=l("마지막으로, 생성된 mock을 활용하여, "),Ra=o("code"),Sc=l("cookies_test.go"),Rc=l(" 파일을 다음과 같이 수정한다."),cp=i(),x(en.$$.fragment),lp=i(),D=o("p"),Bc=l("위 테스트 코드에서는 "),Ba=o("code"),Oc=l("gomock"),Mc=l("을 통해 생성된 Mock을 사용하여 각 interface를 충족시키는 mock을 만들고, "),Oa=o("code"),Ac=l("NewCookieService"),Ic=l(" 메서드를 통해 "),Ma=o("code"),gc=l("CookieService"),Gc=l(`를 생성한다.
또한 `),Aa=o("code"),Nc=l("gomock"),Lc=l(`의 기능을 이용하여, mock이 지정된 파라미터를 받았을 때 어떤 동작을 수행해야 하는지를 지정한다.
이후 `),Ia=o("code"),Hc=l("PurchaseCookies"),Fc=l(" 메서드를 호출하고, 동작이 예상대로 수행되는지 확인할 수 있다.."),up=i(),Hn=o("p"),ga=o("code"),Wc=l("go test"),Xc=l(` 명령어를 통해 이 테스트를 실행하면 통과할 것이다. 테스트 설명에 명시된 기준을 충족시킨다.
하지만 코드에 몇 가지 TODO 태그가 남아있는 것을 확인할 수 있다.
도메인 전문가와의 질의를 진행한 후 이 부분을 수정해보자.`),ip=i(),cn=o("p"),jc=l("Q. 쿠키의 가격은 어떻게 결정되나요?"),qc=o("br"),Qc=l(`
A. 나중에 변경될 수 있지만 당장은 50센트로 고정되어 있습니다.`),kp=i(),ds=o("p"),Uc=l(`Q. 쿠키 재고보다 더 많은 쿠키를 구매하려고 하면 어떻게 해야 할까요?
A. 일단 남아있는 재고만큼만 구매할 수 있도록 합니다.`),rp=i(),Es=o("p"),zc=l(`Q. 사용자의 카드 토큰은 어떻게 얻나요?
A. 카드 결제하면 뿅 나와요`),fp=i(),vs=o("p"),Zc=l(`Q. 사용자의 이메일 주소는 어떻게 얻나요?
A. 이것도 결제하면 뿅 나와요`),mp=i(),ln=o("p"),Jc=l(`서비스가 어떻게 동작해야 할지 더 잘 이해할 수 있게 되었다.
다만 TDD니까, 코드를 수정하기에 앞서 테스트를 먼저 작성해야 한다.
테스트를 작성하기 위해 `),Ga=o("code"),Kc=l("cookies_test.go"),Vc=l(" 파일에 다음과 같은 테스트 stub을 추가한다."),_p=i(),x(un.$$.fragment),dp=i(),Ep=o("br"),vp=o("br"),wp=i(),kn=o("h3"),rn=o("a"),Na=o("span"),Yc=l("리팩토링"),Dp=i(),ws=o("p"),nl=l(`TDD의 마지막 단계는 리팩토링이다.
위에서 진행하였던, 도메인 전문가와의 질의 내용을 반영하여 코드를 수정할 것이다.`),bp=i(),Ds=o("p"),sl=l("일단 쿠키 가격이 50센트로 변경된다. 이를 반영하면 당연히 테스트는 실패할 것이다. 따라서 테스트 코드도 수정해준다. 당연한 얘기니 코드는 생략!"),Cp=i(),bs=o("p"),al=l("다른 테스트들도 작성할 것이다. 먼저, 쿠키 재고보다 더 많은 쿠키를 구매하려고 하면 어떻게 해야 할지에 대한 테스트를 작성한다."),$p=i(),x(fn.$$.fragment),Tp=i(),Cs=o("p"),tl=l("일단 이 테스트를 실행하면 성공할 것이다. 코드에서 쿠키 재고가 부족하면 에러를 반환하게끔 작성해두었기 때문."),hp=i(),$s=o("p"),pl=l("하지만 쿠키 재고가 있을 때는 남아있는 재고만큼만 구매할 수 있도록 하라는 요구사항이 있다. 이를 반영하여 코드를 수정해야 한다."),Pp=i(),x(mn.$$.fragment),yp=i(),xp=o("br"),Sp=i(),Ts=o("p"),ol=l("다음 단계의 테스트를 먼저 작성해보자. 카드 결제가 실패했을 때, 어떻게 처리할지에 대한 테스트이다."),Rp=i(),x(_n.$$.fragment),Bp=i(),hs=o("p"),el=l("테스트를 실행하면 다음과 같은 에러가 발생한다."),Op=i(),Fn=o("pre"),Mp=i(),g=o("p"),cl=l(`얼추 보니 코드에서 반환하는 에러 메시지와 테스트에서 기대하는 에러 메시지가 다르다.
코드에서는 에러를 한번 `),La=o("code"),ll=l("fmt.Errorf"),ul=l("로 감싸서 반환하고 있다. 따라서 테스트에서 기대하는 에러 메시지를 수정하거나, 코드에서 "),Ha=o("code"),il=l("fmt.Errorf"),kl=l(`를 제거하면 테스트가 성공할 것이다. 코드를 수정하는 것이 더 좋아보이니, 코드를 수정해보자.
이를 반영하여 코드를 수정하고, 다시 테스트를 실행해보자.`),Ap=i(),Wn=o("pre"),Ip=i(),Ps=o("p"),rl=l("이후 테스트를 실행하면 성공할 것이다."),gp=i(),Xn=o("pre"),Gp=i(),ys=o("p"),fl=l("이제 코드를 리팩토링하는 단계이지만, 달리 리팩토링할 부분이 없으니 생략하고 다음 단계로 넘어간다."),Np=i(),Lp=o("br"),Hp=i(),xs=o("p"),ml=l(`다음 단계의 테스트는 이메일 전송이 실패했을 때, 어떻게 처리할지에 대한 테스트이다.
먼저 테스트를 작성한다.`),Fp=i(),jn=o("pre"),Wp=i(),Ss=o("p"),_l=l(`테스트를 실행하면 이전 단계와 동일한 에러가 발생한다. 해결 방법도 동일하다.
코드를 수정하거나, 테스트에서 기대하는 에러 메시지를 수정하면 된다. 마찬가지로 코드를 수정하는 것이 더 좋아보이니, 코드를 수정해보자.`),Xp=i(),qn=o("pre"),jp=i(),Rs=o("p"),dl=l("테스트를 다시 실행하면 성공할 것이다."),qp=i(),Qp=o("br"),Up=i(),Bs=o("p"),El=l("마지막 테스트를 작성해보자."),zp=i(),x(dn.$$.fragment),Zp=i(),Os=o("p"),vl=l("위 테스트를 실행하면 다음과 같이 실패할 것이다."),Jp=i(),Qn=o("pre"),Kp=i(),Ms=o("p"),wl=l(`남아있는 쿠키 재고가 구매하려는 쿠키 재고보다 적을 때 처리하는 로직을 코드에 작성하지 않았기 때문에 테스트가 실패하는 것이다.
따라서 코드를 수정해보자.`),Vp=i(),x(En.$$.fragment),Yp=i(),As=o("p"),Dl=l("테스트를 다시 실행하면 성공할 것이다."),no=i(),so=o("br"),ao=i(),vn=o("p"),bl=l("이제 모든 테스트 케이스가 통과하므로, "),Fa=o("code"),Cl=l("go test -cover"),$l=l(" 명령을 실행해보자."),to=i(),Un=o("pre"),po=i(),Is=o("p"),Tl=l("100% 커버리지를 달성한 것을 확인할 수 있다! 신난다🎉🎉"),oo=i(),eo=o("br"),co=i(),gs=o("p"),hl=l(`다만 지금까지 작성한 테스트 코드에서 궁금증이 좀 생길 수 있다.
얼핏 봐도 상당한 코드 중복이 있다. 일정한 패턴이 보이는데, 적당히 묶어서 함수로 만들거나 하면 좋지 않을까?
이에 대한 대답은, 그래도 된다는 것이다. 실제로 Go에는 Table Test라고 하는 방식이 있어서, 테스트 코드를 더 깔끔하게 작성할 수 있다.`),lo=i(),Gs=o("p"),Pl=l(`하지만 이 책에서는 테스트 코드가 더 깔끔해지는 것보다는, 테스트 코드가 더 명확하게 보이는 것을 우선시한다.
테스트 코드는 그 자체로 일종의 문서 역할을 하기 때문에, 테스트 코드를 읽는 사람이 테스트 코드를 이해하기 쉽게 작성하는 것이 중요하다고 설명한다.`),uo=i(),io=o("br"),ko=i(),Ns=o("p"),yl=l("아직 안 끝났다ㅠㅠ 아직 구현하지 않은 요구사항이 있다."),ro=i(),Ls=o("p"),xl=l(`코드에는 카드 토큰과 이메일 주소가 하드코딩되어 있는데, 이는 요청할 때 파라미터로 받아오게 될 것이다.
따라서, 함수 정의를 바꿔야 한다.`),fo=i(),zn=o("pre"),mo=i(),Hs=o("p"),Sl=l(`하지만 이렇게 변경하고 나면 기존에 작성한 테스트 코드들이 모두 실패할 것이다.
이에 맞게 테스트 코드를 수정해줄 필요가 있다.`),_o=i(),x(wn.$$.fragment),Eo=i(),Fs=o("p"),Rl=l("이와 같이 테스트 코드를 수정해주면, 테스트가 다시 성공할 것이다."),vo=i(),wo=o("br"),Do=i(),Ws=o("p"),Bl=l("이 정도면 TDD로 개발하는 것에 대한 전반적인 감을 잡을 수 있을 것이다. 다음 단계인 BDD(Behavior-Driven Development)에 대해 알아보자."),bo=i(),Co=o("br"),$o=o("br"),To=i(),Dn=o("h2"),bn=o("a"),Wa=o("span"),Ol=l("BDD"),ho=i(),Xs=o("p"),Ml=l("BDD는 TDD의 확장판같은 개념으로, 엔지니어-도메인 전문가-QA간의 긴밀한 협업을 가능하게 하는 개발 방법론이다."),Po=i(),G=o("p"),Al=l(`BDD의 목표는 Domain-Specific Language(DSL)을 통해 더 높은 수준의 추상화를 제공하는 것이며, 이는 테스트로 실행 가능하다.
가장 유명한 BDD 테스트 프레임워크는 `),Zn=o("a"),Il=l("Gherkin"),gl=l("과 "),Jn=o("a"),Gl=l("Cucumber"),Nl=l(`이다.
Gherkin은 몇 개의 키워드로 이루어진 언어를 제공하며, Cucumber는 이 언어를 읽어 소프트웨어가 예상대로 작동하는지 검증한다.`),yo=i(),Kn=o("p"),Cn=o("a"),Xa=o("code"),Ll=l("go-bdd"),Hl=l(" 프레임워크"),Fl=l("를 활용하여 BDD 테스트를 작성해보자. 먼저, go-bdd를 설치한다."),xo=i(),Vn=o("pre"),So=i(),N=o("p"),Wl=l("이후 프로젝트 루트 디렉토리에 "),ja=o("code"),Xl=l("features"),jl=l(" 디렉토리를 생성하고, "),qa=o("code"),ql=l("features/add.feature"),Ql=l(" 파일을 생성한 후 다음과 같이 작성한다."),Ro=i(),Yn=o("pre"),Bo=i(),$n=o("p"),Ul=l("그리고 "),Qa=o("code"),zl=l("add_test.go"),Zl=l(" 파일을 생성하여 다음과 같이 작성한다."),Oo=i(),x(Tn.$$.fragment),Mo=i(),d=o("p"),Jl=l("위 코드에서 "),Ua=o("code"),Kl=l("add"),Vl=l(" 함수는 "),za=o("code"),Yl=l("bdd step"),nu=l(` 함수인데, 함수 이름이 중요하다.
`),Za=o("code"),su=l("add.feature"),au=l(" 파일의 "),Ja=o("code"),tu=l("When I add 3 and 6"),pu=l("이라는 문장을 만나면, "),Ka=o("code"),ou=l("add"),eu=l(` 함수가 실행된다.
만약 `),Va=o("code"),cu=l("add"),lu=l(" 함수의 이름을 "),Ya=o("code"),uu=l("sum"),iu=l("으로 변경한다면, "),nt=o("code"),ku=l("add.feature"),ru=l(" 파일을 "),st=o("code"),fu=l("When I sum 3 and 6"),mu=l(`으로 변경해야 할 것이다.
이후 로직을 수행하고 나중에 `),at=o("code"),_u=l("check"),du=l("에서 불러올 수 있도록 컨텍스트에 저장한다."),Ao=i(),P=o("p"),tt=o("code"),Eu=l("check"),vu=l(` 함수는 실질적인 테스트를 수행하는 함수로, 검증은 이 함수에서 이루어진다.
다음으로 테스트 스위트를 생성하고, `),pt=o("code"),wu=l("add"),Du=l("와 "),ot=o("code"),bu=l("check"),Cu=l(` 함수를 등록한다.
이 테스트를 수행한다면 통과할 것이다.`),Io=i(),go=o("br"),Go=i(),js=o("p"),$u=l(`이와 같이 BDD는 자연어와 유사하여 직관성이 뛰어나지만, 테스트 코드를 작성하는 것이 번거로워진다.
앞선 예제의 경우 비교적 간단하지만, 실제로는 훨씬 복잡한 테스트 코드를 작성해야 할 것이다. 그 코드를 BDD로 작성한다고 생각해 보면 좀 어지러워진다.
도메인 전문가가 BDD를 이해할 수 있고, 자주 의사소통할 수 있다면 BDD를 사용하는 게 괜찮은 선택지일 수 있다.
하지만 그렇지 않다면 그냥 Unit Test를 작성하는 게 더 좋다.`),No=i(),Lo=o("br"),Ho=o("br"),Fo=i(),hn=o("h2"),Pn=o("a"),et=o("span"),Tu=l("References"),Wo=i(),Xo=o("hr"),jo=i(),y=o("center"),ct=o("p"),hu=l("["),Pu=i(),x(ns.$$.fragment),yu=l(`
](https://learning.oreilly.com/library/view/domain-driven-design-with/9781804613450/) `),xu=o("br"),Su=l(`
[Matthew Boyle, Domain-Driven Design with Golang』, O'Reilly Media, Inc.](https://learning.oreilly.com/library/view/domain-driven-design-with/9781804613450/)`),this.h()},l(n){r=e(n,"P",{});var t=c(r);E=u(t,`지금까지 DDD의 핵심적인 개념에 대해 알아보았다.
하지만 DDD 외에도 TDD, BDD 등 DDD와 함께 사용할 수 있는 여러 개발 방법론이 존재한다.
본 포스트에서는 이에 대해 알아보고, DDD와 함께 사용할 수 있는 방법에 대해 알아보려 한다.`),t.forEach(s),m=k(n),_=e(n,"BR",{}),ft=e(n,"BR",{}),mt=k(n),j=e(n,"H2",{id:!0});var qs=c(j);q=e(qs,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var lt=c(q);Ks=e(lt,"SPAN",{class:!0}),c(Ks).forEach(s),lt.forEach(s),te=u(qs,"TDD"),qs.forEach(s),_t=k(n),dt=e(n,"HR",{}),Et=k(n),cs=e(n,"P",{});var ut=c(cs);pe=u(ut,`TDD(Test Driven Development)는 소프트웨어를 개발하기 이전에 비즈니스 요구사항을 충족시키는 테스트를 먼저 작성하는 개발 방법론이다.
코드를 작성할 때 테스트케이스를 지속적으로 업데이트해야 하고, 테스트케이스를 통과하는 코드를 작성해야 한다.`),ut.forEach(s),vt=k(n),ls=e(n,"P",{});var it=c(ls);oe=u(it,"가령 TDD를 사용하여 애플리케이션에 새로운 기능을 추가하는 작업을 수행한다고 할 때, 다음과 같은 절차를 따른다."),it.forEach(s),wt=k(n),b=e(n,"OL",{});var C=c(b);xn=e(C,"LI",{});var ss=c(xn);F=e(ss,"P",{});var X=c(F);ee=u(X,`코드를 작성하기 전에 테스트케이스를 작성한다.
`),Sn=e(X,"EM",{});var as=c(Sn);ce=u(as,"“API 유저인 내가 홈 화면에서 "),Vs=e(as,"CODE",{});var kt=c(Vs);le=u(kt,"/balance"),kt.forEach(s),ue=u(as," 엔드포인트로 요청을 날려서 모든 계정의 잔고를 확인할 수 있어야 한다”"),as.forEach(s),ie=u(X,`처럼 유저 스토리를 기반으로 테스트케이스를 작성할 수 있다.
또는 `),Rn=e(X,"EM",{});var ts=c(Rn);ke=u(ts,"“Given API 사용자, When "),Ys=e(ts,"CODE",{});var Hu=c(Ys);re=u(Hu,"/balance"),Hu.forEach(s),fe=u(ts," 호출, Then 모든 통장의 잔고를 확인할 수 있음”"),ts.forEach(s),me=u(X,"과 같이 Given-When-Then(GWT) 패턴으로 작성할 수도 있다."),X.forEach(s),_e=k(ss),na=e(ss,"P",{});var Fu=c(na);de=u(Fu,"이 단계에서는 단 한 줄의 코드도 작성하지 않으며, 비즈니스 요구사항에 초점을 맞추어야 한다."),Fu.forEach(s),ss.forEach(s),Ee=k(C),sa=e(C,"LI",{});var Wu=c(sa);aa=e(Wu,"P",{});var Xu=c(aa);ve=u(Xu,`테스트를 실행한다. 코드를 작성하지 않았기 때문에, 테스트는 당연히 실패할 것이다.
이 단계는 테스트케이스와 테스트 프레임워크가 잘 설정되었는지 확인하는 단계이다.`),Xu.forEach(s),Wu.forEach(s),we=k(C),ta=e(C,"LI",{});var ju=c(ta);pa=e(ju,"P",{});var qu=c(pa);De=u(qu,`테스트를 통과하는 최소한의 코드를 작성한다.
이 단계에서 작성되는 코드는 특별히 예쁘고 깔끔할 필요 없다! 그저 테스트를 통과하기만 하면 된다.
비즈니스 불변성을 위반하지 않는 선에서 테스트를 통과하기 위한 모든 방법을 동원한다.`),qu.forEach(s),ju.forEach(s),be=k(C),oa=e(C,"LI",{});var Qu=c(oa);ea=e(Qu,"P",{});var Uu=c(ea);Ce=u(Uu,`테스트를 재실행한다. 새 테스트뿐 아니라, 기존의 테스트도 모두 통과해야 한다.
즉, 새로운 코드가 기존의 코드를 망가뜨리지 않았는지 확인한다.`),Uu.forEach(s),Qu.forEach(s),$e=k(C),ca=e(C,"LI",{});var zu=c(ca);la=e(zu,"P",{});var Zu=c(la);Te=u(Zu,`코드를 리팩토링한다. 3단계에서 작성한 예쁘지 않은 코드를 예쁘게 리팩토링해주면 된다.
틈틈이 테스트를 실행하면서 코드가 잘 동작하는지 확인한다.`),Zu.forEach(s),zu.forEach(s),C.forEach(s),Dt=k(n),us=e(n,"P",{});var Ju=c(us);he=u(Ju,`이러한 절차를 반복하는 것이 TDD의 핵심이다.
TDD는 새로운 기능을 추가할 때 뿐만 아니라, 기존의 코드를 수정할 때에도 사용할 수 있다. 즉, 레거시 코드를 개선하거나 디버깅할 때에도 유용하다.`),Ju.forEach(s),bt=k(n),Ct=e(n,"BR",{}),$t=k(n),is=e(n,"P",{});var Ku=c(is);Pe=u(Ku,"다음과 같은 Given-When-Then 테스트케이스가 있다고 가정해보자."),Ku.forEach(s),Tt=k(n),Bn=e(n,"P",{});var Ru=c(Bn);ye=u(Ru,"제목: "),ua=e(Ru,"EM",{});var Vu=c(ua);xe=u(Vu,"고객이 쿠키를 구매하면, 이메일 영수증을 받는다."),Vu.forEach(s),Ru.forEach(s),ht=k(n),ks=e(n,"P",{});var Yu=c(ks);Se=u(Yu,"그렇다면 다음과 같은 합격 기준을 정의할 수 있다."),Yu.forEach(s),Pt=k(n),$=e(n,"UL",{});var yn=c($);ia=e(yn,"LI",{});var ni=c(ia);Re=u(ni,"사용자가 쿠키를 구매할 때 쿠키 재고가 충분하다면 결제가 완료된 이후 잠시 뒤 이메일 영수증을 받는다."),ni.forEach(s),Be=k(yn),ka=e(yn,"LI",{});var si=c(ka);Oe=u(si,"사용자가 쿠키를 구매할 때 쿠키 재고가 충분하지 않다면 계산원에게 쿠키 재고가 부족하다는 알림을 보낸다."),si.forEach(s),Me=k(yn),ra=e(yn,"LI",{});var ai=c(ra);Ae=u(ai,"사용자가 쿠키를 구매할 때 쿠키 재고가 충분하지만 카드 결제가 실패한다면 계산원에게 카드 결제가 실패했다는 알림을 보낸다."),ai.forEach(s),Ie=k(yn),fa=e(yn,"LI",{});var ti=c(fa);ge=u(ti,"결제가 완료되었지만 이메일 전송에 실패한 경우, 계산원에게 이메일 전송이 실패했다는 알림을 보낸다."),ti.forEach(s),yn.forEach(s),yt=k(n),rs=e(n,"P",{});var pi=c(rs);Ge=u(pi,"이제 TDD 절차에 따라 기능을 구현해볼 것이다."),pi.forEach(s),xt=k(n),St=e(n,"BR",{}),Rt=e(n,"BR",{}),Bt=k(n),Q=e(n,"H3",{id:!0});var Bu=c(Q);U=e(Bu,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var oi=c(U);ma=e(oi,"SPAN",{class:!0}),c(ma).forEach(s),oi.forEach(s),Ne=u(Bu,"테스트 추가"),Bu.forEach(s),Ot=k(n),W=e(n,"P",{});var rt=c(W);_a=e(rt,"CODE",{});var ei=c(_a);Le=u(ei,"cookies.go"),ei.forEach(s),He=u(rt," 파일 및 "),da=e(rt,"CODE",{});var ci=c(da);Fe=u(ci,"cookies_test.go"),ci.forEach(s),We=u(rt," 파일을 생성한다."),rt.forEach(s),Mt=k(n),On=e(n,"PRE",{class:!0});var Kk=c(On);Kk.forEach(s),At=k(n),A=e(n,"P",{});var Qs=c(A);Xe=u(Qs,"go는 테스트 파일의 이름이 "),Ea=e(Qs,"CODE",{});var li=c(Ea);je=u(li,"_test.go"),li.forEach(s),qe=u(Qs,"로 끝나는 파일을 테스트 파일로 인식한다. 또한 빌드 시 테스트 파일은 무시된다. golang에서의 테스트에 관련한 자세한 내용은 "),Mn=e(Qs,"A",{href:!0,rel:!0});var ui=c(Mn);Qe=u(ui,"여기"),ui.forEach(s),Ue=u(Qs,"를 참고하자."),Qs.forEach(s),It=k(n),z=e(n,"P",{});var Qo=c(z);ze=u(Qo,"TDD 절차에 따라, 테스트를 먼저 작성해 보자! "),va=e(Qo,"CODE",{});var ii=c(va);Ze=u(ii,"cookies_test.go"),ii.forEach(s),Je=u(Qo," 파일에 다음과 같이 테스트케이스를 작성한다."),Qo.forEach(s),gt=k(n),An=e(n,"PRE",{class:!0});var Vk=c(An);Vk.forEach(s),Gt=k(n),fs=e(n,"P",{});var ki=c(fs);Ke=u(ki,`위 코드에서 확인할 수 있듯 테스트케이스의 이름에 합격 기준이 명시되었다.
바로 이 부분에서 TDD와 DDD가 잘 어울린다는 것을 알 수 있다. TDD의 합격 기준 자체가 도메인 전문가로부터 나온 셈이며, 이 내용이 테스트케이스에 명시됨으로써 도메인 전문가와 개발자 사이의 의사소통이 원활해진다.`),ki.forEach(s),Nt=k(n),Z=e(n,"P",{});var Uo=c(Z);Ve=u(Uo,"Go에서는 테스트가 비어 있으면 통과한 것으로 간주하기 때문에, "),wa=e(Uo,"CODE",{});var ri=c(wa);Ye=u(ri,"t.FailNow()"),ri.forEach(s),nc=u(Uo,`를 추가하여 테스트가 실패하도록 만들었다.
이와 같이, 원칙적으로 아직 작성하지 않은 테스트는 실패해야 한다.`),Uo.forEach(s),Lt=k(n),ms=e(n,"P",{});var fi=c(ms);sc=u(fi,"그럼 테스트를 실행해보자!"),fi.forEach(s),Ht=k(n),In=e(n,"PRE",{class:!0});var Yk=c(In);Yk.forEach(s),Ft=k(n),_s=e(n,"P",{});var mi=c(_s);ac=u(mi,"테스트가 성공적으로 실패했다..! 다음 단계로 넘어가보자."),mi.forEach(s),Wt=k(n),Xt=e(n,"BR",{}),jt=e(n,"BR",{}),qt=k(n),J=e(n,"H3",{id:!0});var Ou=c(J);K=e(Ou,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var _i=c(K);Da=e(_i,"SPAN",{class:!0}),c(Da).forEach(s),_i.forEach(s),tc=u(Ou,"코드 작성"),Ou.forEach(s),Qt=k(n),V=e(n,"P",{});var zo=c(V);pc=u(zo,`지금까지 테스트만을 작성했고, 코드는 한 줄도 작성하지 않았다.
이제 할 일은 `),ba=e(zo,"CODE",{});var di=c(ba);oc=u(di,"cookies.go"),di.forEach(s),ec=u(zo,` 파일에 테스트를 통과할 수 있는 최소한의 코드를 작성하는 것이다.
거듭 언급하지만, 이 단계에서 코드를 특별히 예쁘게 작성할 필요는 없다.`),zo.forEach(s),Ut=k(n),S(Y.$$.fragment,n),zt=k(n),Zt=e(n,"BR",{}),Jt=e(n,"BR",{}),Kt=k(n),nn=e(n,"H3",{id:!0});var Mu=c(nn);sn=e(Mu,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Ei=c(sn);Ca=e(Ei,"SPAN",{class:!0}),c(Ca).forEach(s),Ei.forEach(s),cc=u(Mu,"테스트 실행"),Mu.forEach(s),Vt=k(n),h=e(n,"P",{});var ps=c(h);$a=e(ps,"CODE",{});var vi=c($a);lc=u(vi,"PurchaseCookies"),vi.forEach(s),uc=u(ps,` 메서드는 몇 가지 인터페이스를 통해 의존성을 주입받는다.
이러한 경우 인터페이스를 Mocking하여 테스트를 쉽게 작성할 수 있다.
이를테면 이메일 전송시 오류가 발생하는 상황을 테스트하기 위해, `),Ta=e(ps,"CODE",{});var wi=c(Ta);ic=u(wi,"EmailSender"),wi.forEach(s),kc=u(ps," 인터페이스에 대한 Mock을 만들어 "),ha=e(ps,"CODE",{});var Di=c(ha);rc=u(Di,"SendEmailReceipt"),Di.forEach(s),fc=u(ps," 메서드가 오류를 반환하도록 만들 수 있다."),ps.forEach(s),Yt=k(n),an=e(n,"P",{});var Zo=c(an);mc=u(Zo,"Golang 개발팀에서는 Mocking을 위해 "),gn=e(Zo,"A",{href:!0,rel:!0});var bi=c(gn);_c=u(bi,"gomock"),bi.forEach(s),dc=u(Zo,` 프레임워크를 제공한다.
이 프레임워크를 이용하여 mock을 만들어보자.`),Zo.forEach(s),np=k(n),tn=e(n,"P",{});var Jo=c(tn);Ec=u(Jo,"먼저, "),Pa=e(Jo,"CODE",{});var Ci=c(Pa);vc=u(Ci,"gomock"),Ci.forEach(s),wc=u(Jo,"을 설치한다."),Jo.forEach(s),sp=k(n),Gn=e(n,"PRE",{class:!0});var nr=c(Gn);nr.forEach(s),ap=k(n),pn=e(n,"P",{});var Ko=c(pn);Dc=u(Ko,"이후 프로젝트 루트 디렉토리에 "),ya=e(Ko,"CODE",{});var $i=c(ya);bc=u($i,"gen.go"),$i.forEach(s),Cc=u(Ko," 파일을 생성하고, 다음과 같이 작성한다."),Ko.forEach(s),tp=k(n),Nn=e(n,"PRE",{class:!0});var sr=c(Nn);sr.forEach(s),pp=k(n),I=e(n,"P",{});var Us=c(I);$c=u(Us,"이제 "),xa=e(Us,"CODE",{});var Ti=c(xa);Tc=u(Ti,"go generate ./..."),Ti.forEach(s),hc=u(Us," 명령어를 실행하면, "),Sa=e(Us,"CODE",{});var hi=c(Sa);Pc=u(hi,"mocks"),hi.forEach(s),yc=u(Us," 디렉토리에 Mock이 생성된 것을 확인할 수 있다."),Us.forEach(s),op=k(n),Ln=e(n,"PRE",{class:!0});var ar=c(Ln);ar.forEach(s),ep=k(n),on=e(n,"P",{});var Vo=c(on);xc=u(Vo,"마지막으로, 생성된 mock을 활용하여, "),Ra=e(Vo,"CODE",{});var Pi=c(Ra);Sc=u(Pi,"cookies_test.go"),Pi.forEach(s),Rc=u(Vo," 파일을 다음과 같이 수정한다."),Vo.forEach(s),cp=k(n),S(en.$$.fragment,n),lp=k(n),D=e(n,"P",{});var T=c(D);Bc=u(T,"위 테스트 코드에서는 "),Ba=e(T,"CODE",{});var yi=c(Ba);Oc=u(yi,"gomock"),yi.forEach(s),Mc=u(T,"을 통해 생성된 Mock을 사용하여 각 interface를 충족시키는 mock을 만들고, "),Oa=e(T,"CODE",{});var xi=c(Oa);Ac=u(xi,"NewCookieService"),xi.forEach(s),Ic=u(T," 메서드를 통해 "),Ma=e(T,"CODE",{});var Si=c(Ma);gc=u(Si,"CookieService"),Si.forEach(s),Gc=u(T,`를 생성한다.
또한 `),Aa=e(T,"CODE",{});var Ri=c(Aa);Nc=u(Ri,"gomock"),Ri.forEach(s),Lc=u(T,`의 기능을 이용하여, mock이 지정된 파라미터를 받았을 때 어떤 동작을 수행해야 하는지를 지정한다.
이후 `),Ia=e(T,"CODE",{});var Bi=c(Ia);Hc=u(Bi,"PurchaseCookies"),Bi.forEach(s),Fc=u(T," 메서드를 호출하고, 동작이 예상대로 수행되는지 확인할 수 있다.."),T.forEach(s),up=k(n),Hn=e(n,"P",{});var Au=c(Hn);ga=e(Au,"CODE",{});var Oi=c(ga);Wc=u(Oi,"go test"),Oi.forEach(s),Xc=u(Au,` 명령어를 통해 이 테스트를 실행하면 통과할 것이다. 테스트 설명에 명시된 기준을 충족시킨다.
하지만 코드에 몇 가지 TODO 태그가 남아있는 것을 확인할 수 있다.
도메인 전문가와의 질의를 진행한 후 이 부분을 수정해보자.`),Au.forEach(s),ip=k(n),cn=e(n,"P",{});var Yo=c(cn);jc=u(Yo,"Q. 쿠키의 가격은 어떻게 결정되나요?"),qc=e(Yo,"BR",{}),Qc=u(Yo,`
A. 나중에 변경될 수 있지만 당장은 50센트로 고정되어 있습니다.`),Yo.forEach(s),kp=k(n),ds=e(n,"P",{});var Mi=c(ds);Uc=u(Mi,`Q. 쿠키 재고보다 더 많은 쿠키를 구매하려고 하면 어떻게 해야 할까요?
A. 일단 남아있는 재고만큼만 구매할 수 있도록 합니다.`),Mi.forEach(s),rp=k(n),Es=e(n,"P",{});var Ai=c(Es);zc=u(Ai,`Q. 사용자의 카드 토큰은 어떻게 얻나요?
A. 카드 결제하면 뿅 나와요`),Ai.forEach(s),fp=k(n),vs=e(n,"P",{});var Ii=c(vs);Zc=u(Ii,`Q. 사용자의 이메일 주소는 어떻게 얻나요?
A. 이것도 결제하면 뿅 나와요`),Ii.forEach(s),mp=k(n),ln=e(n,"P",{});var ne=c(ln);Jc=u(ne,`서비스가 어떻게 동작해야 할지 더 잘 이해할 수 있게 되었다.
다만 TDD니까, 코드를 수정하기에 앞서 테스트를 먼저 작성해야 한다.
테스트를 작성하기 위해 `),Ga=e(ne,"CODE",{});var gi=c(Ga);Kc=u(gi,"cookies_test.go"),gi.forEach(s),Vc=u(ne," 파일에 다음과 같은 테스트 stub을 추가한다."),ne.forEach(s),_p=k(n),S(un.$$.fragment,n),dp=k(n),Ep=e(n,"BR",{}),vp=e(n,"BR",{}),wp=k(n),kn=e(n,"H3",{id:!0});var Iu=c(kn);rn=e(Iu,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Gi=c(rn);Na=e(Gi,"SPAN",{class:!0}),c(Na).forEach(s),Gi.forEach(s),Yc=u(Iu,"리팩토링"),Iu.forEach(s),Dp=k(n),ws=e(n,"P",{});var Ni=c(ws);nl=u(Ni,`TDD의 마지막 단계는 리팩토링이다.
위에서 진행하였던, 도메인 전문가와의 질의 내용을 반영하여 코드를 수정할 것이다.`),Ni.forEach(s),bp=k(n),Ds=e(n,"P",{});var Li=c(Ds);sl=u(Li,"일단 쿠키 가격이 50센트로 변경된다. 이를 반영하면 당연히 테스트는 실패할 것이다. 따라서 테스트 코드도 수정해준다. 당연한 얘기니 코드는 생략!"),Li.forEach(s),Cp=k(n),bs=e(n,"P",{});var Hi=c(bs);al=u(Hi,"다른 테스트들도 작성할 것이다. 먼저, 쿠키 재고보다 더 많은 쿠키를 구매하려고 하면 어떻게 해야 할지에 대한 테스트를 작성한다."),Hi.forEach(s),$p=k(n),S(fn.$$.fragment,n),Tp=k(n),Cs=e(n,"P",{});var Fi=c(Cs);tl=u(Fi,"일단 이 테스트를 실행하면 성공할 것이다. 코드에서 쿠키 재고가 부족하면 에러를 반환하게끔 작성해두었기 때문."),Fi.forEach(s),hp=k(n),$s=e(n,"P",{});var Wi=c($s);pl=u(Wi,"하지만 쿠키 재고가 있을 때는 남아있는 재고만큼만 구매할 수 있도록 하라는 요구사항이 있다. 이를 반영하여 코드를 수정해야 한다."),Wi.forEach(s),Pp=k(n),S(mn.$$.fragment,n),yp=k(n),xp=e(n,"BR",{}),Sp=k(n),Ts=e(n,"P",{});var Xi=c(Ts);ol=u(Xi,"다음 단계의 테스트를 먼저 작성해보자. 카드 결제가 실패했을 때, 어떻게 처리할지에 대한 테스트이다."),Xi.forEach(s),Rp=k(n),S(_n.$$.fragment,n),Bp=k(n),hs=e(n,"P",{});var ji=c(hs);el=u(ji,"테스트를 실행하면 다음과 같은 에러가 발생한다."),ji.forEach(s),Op=k(n),Fn=e(n,"PRE",{class:!0});var tr=c(Fn);tr.forEach(s),Mp=k(n),g=e(n,"P",{});var zs=c(g);cl=u(zs,`얼추 보니 코드에서 반환하는 에러 메시지와 테스트에서 기대하는 에러 메시지가 다르다.
코드에서는 에러를 한번 `),La=e(zs,"CODE",{});var qi=c(La);ll=u(qi,"fmt.Errorf"),qi.forEach(s),ul=u(zs,"로 감싸서 반환하고 있다. 따라서 테스트에서 기대하는 에러 메시지를 수정하거나, 코드에서 "),Ha=e(zs,"CODE",{});var Qi=c(Ha);il=u(Qi,"fmt.Errorf"),Qi.forEach(s),kl=u(zs,`를 제거하면 테스트가 성공할 것이다. 코드를 수정하는 것이 더 좋아보이니, 코드를 수정해보자.
이를 반영하여 코드를 수정하고, 다시 테스트를 실행해보자.`),zs.forEach(s),Ap=k(n),Wn=e(n,"PRE",{class:!0});var pr=c(Wn);pr.forEach(s),Ip=k(n),Ps=e(n,"P",{});var Ui=c(Ps);rl=u(Ui,"이후 테스트를 실행하면 성공할 것이다."),Ui.forEach(s),gp=k(n),Xn=e(n,"PRE",{class:!0});var or=c(Xn);or.forEach(s),Gp=k(n),ys=e(n,"P",{});var zi=c(ys);fl=u(zi,"이제 코드를 리팩토링하는 단계이지만, 달리 리팩토링할 부분이 없으니 생략하고 다음 단계로 넘어간다."),zi.forEach(s),Np=k(n),Lp=e(n,"BR",{}),Hp=k(n),xs=e(n,"P",{});var Zi=c(xs);ml=u(Zi,`다음 단계의 테스트는 이메일 전송이 실패했을 때, 어떻게 처리할지에 대한 테스트이다.
먼저 테스트를 작성한다.`),Zi.forEach(s),Fp=k(n),jn=e(n,"PRE",{class:!0});var er=c(jn);er.forEach(s),Wp=k(n),Ss=e(n,"P",{});var Ji=c(Ss);_l=u(Ji,`테스트를 실행하면 이전 단계와 동일한 에러가 발생한다. 해결 방법도 동일하다.
코드를 수정하거나, 테스트에서 기대하는 에러 메시지를 수정하면 된다. 마찬가지로 코드를 수정하는 것이 더 좋아보이니, 코드를 수정해보자.`),Ji.forEach(s),Xp=k(n),qn=e(n,"PRE",{class:!0});var cr=c(qn);cr.forEach(s),jp=k(n),Rs=e(n,"P",{});var Ki=c(Rs);dl=u(Ki,"테스트를 다시 실행하면 성공할 것이다."),Ki.forEach(s),qp=k(n),Qp=e(n,"BR",{}),Up=k(n),Bs=e(n,"P",{});var Vi=c(Bs);El=u(Vi,"마지막 테스트를 작성해보자."),Vi.forEach(s),zp=k(n),S(dn.$$.fragment,n),Zp=k(n),Os=e(n,"P",{});var Yi=c(Os);vl=u(Yi,"위 테스트를 실행하면 다음과 같이 실패할 것이다."),Yi.forEach(s),Jp=k(n),Qn=e(n,"PRE",{class:!0});var lr=c(Qn);lr.forEach(s),Kp=k(n),Ms=e(n,"P",{});var nk=c(Ms);wl=u(nk,`남아있는 쿠키 재고가 구매하려는 쿠키 재고보다 적을 때 처리하는 로직을 코드에 작성하지 않았기 때문에 테스트가 실패하는 것이다.
따라서 코드를 수정해보자.`),nk.forEach(s),Vp=k(n),S(En.$$.fragment,n),Yp=k(n),As=e(n,"P",{});var sk=c(As);Dl=u(sk,"테스트를 다시 실행하면 성공할 것이다."),sk.forEach(s),no=k(n),so=e(n,"BR",{}),ao=k(n),vn=e(n,"P",{});var se=c(vn);bl=u(se,"이제 모든 테스트 케이스가 통과하므로, "),Fa=e(se,"CODE",{});var ak=c(Fa);Cl=u(ak,"go test -cover"),ak.forEach(s),$l=u(se," 명령을 실행해보자."),se.forEach(s),to=k(n),Un=e(n,"PRE",{class:!0});var ur=c(Un);ur.forEach(s),po=k(n),Is=e(n,"P",{});var tk=c(Is);Tl=u(tk,"100% 커버리지를 달성한 것을 확인할 수 있다! 신난다🎉🎉"),tk.forEach(s),oo=k(n),eo=e(n,"BR",{}),co=k(n),gs=e(n,"P",{});var pk=c(gs);hl=u(pk,`다만 지금까지 작성한 테스트 코드에서 궁금증이 좀 생길 수 있다.
얼핏 봐도 상당한 코드 중복이 있다. 일정한 패턴이 보이는데, 적당히 묶어서 함수로 만들거나 하면 좋지 않을까?
이에 대한 대답은, 그래도 된다는 것이다. 실제로 Go에는 Table Test라고 하는 방식이 있어서, 테스트 코드를 더 깔끔하게 작성할 수 있다.`),pk.forEach(s),lo=k(n),Gs=e(n,"P",{});var ok=c(Gs);Pl=u(ok,`하지만 이 책에서는 테스트 코드가 더 깔끔해지는 것보다는, 테스트 코드가 더 명확하게 보이는 것을 우선시한다.
테스트 코드는 그 자체로 일종의 문서 역할을 하기 때문에, 테스트 코드를 읽는 사람이 테스트 코드를 이해하기 쉽게 작성하는 것이 중요하다고 설명한다.`),ok.forEach(s),uo=k(n),io=e(n,"BR",{}),ko=k(n),Ns=e(n,"P",{});var ek=c(Ns);yl=u(ek,"아직 안 끝났다ㅠㅠ 아직 구현하지 않은 요구사항이 있다."),ek.forEach(s),ro=k(n),Ls=e(n,"P",{});var ck=c(Ls);xl=u(ck,`코드에는 카드 토큰과 이메일 주소가 하드코딩되어 있는데, 이는 요청할 때 파라미터로 받아오게 될 것이다.
따라서, 함수 정의를 바꿔야 한다.`),ck.forEach(s),fo=k(n),zn=e(n,"PRE",{class:!0});var ir=c(zn);ir.forEach(s),mo=k(n),Hs=e(n,"P",{});var lk=c(Hs);Sl=u(lk,`하지만 이렇게 변경하고 나면 기존에 작성한 테스트 코드들이 모두 실패할 것이다.
이에 맞게 테스트 코드를 수정해줄 필요가 있다.`),lk.forEach(s),_o=k(n),S(wn.$$.fragment,n),Eo=k(n),Fs=e(n,"P",{});var uk=c(Fs);Rl=u(uk,"이와 같이 테스트 코드를 수정해주면, 테스트가 다시 성공할 것이다."),uk.forEach(s),vo=k(n),wo=e(n,"BR",{}),Do=k(n),Ws=e(n,"P",{});var ik=c(Ws);Bl=u(ik,"이 정도면 TDD로 개발하는 것에 대한 전반적인 감을 잡을 수 있을 것이다. 다음 단계인 BDD(Behavior-Driven Development)에 대해 알아보자."),ik.forEach(s),bo=k(n),Co=e(n,"BR",{}),$o=e(n,"BR",{}),To=k(n),Dn=e(n,"H2",{id:!0});var gu=c(Dn);bn=e(gu,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var kk=c(bn);Wa=e(kk,"SPAN",{class:!0}),c(Wa).forEach(s),kk.forEach(s),Ol=u(gu,"BDD"),gu.forEach(s),ho=k(n),Xs=e(n,"P",{});var rk=c(Xs);Ml=u(rk,"BDD는 TDD의 확장판같은 개념으로, 엔지니어-도메인 전문가-QA간의 긴밀한 협업을 가능하게 하는 개발 방법론이다."),rk.forEach(s),Po=k(n),G=e(n,"P",{});var Zs=c(G);Al=u(Zs,`BDD의 목표는 Domain-Specific Language(DSL)을 통해 더 높은 수준의 추상화를 제공하는 것이며, 이는 테스트로 실행 가능하다.
가장 유명한 BDD 테스트 프레임워크는 `),Zn=e(Zs,"A",{href:!0,rel:!0});var fk=c(Zn);Il=u(fk,"Gherkin"),fk.forEach(s),gl=u(Zs,"과 "),Jn=e(Zs,"A",{href:!0,rel:!0});var mk=c(Jn);Gl=u(mk,"Cucumber"),mk.forEach(s),Nl=u(Zs,`이다.
Gherkin은 몇 개의 키워드로 이루어진 언어를 제공하며, Cucumber는 이 언어를 읽어 소프트웨어가 예상대로 작동하는지 검증한다.`),Zs.forEach(s),yo=k(n),Kn=e(n,"P",{});var Gu=c(Kn);Cn=e(Gu,"A",{href:!0,rel:!0});var Nu=c(Cn);Xa=e(Nu,"CODE",{});var _k=c(Xa);Ll=u(_k,"go-bdd"),_k.forEach(s),Hl=u(Nu," 프레임워크"),Nu.forEach(s),Fl=u(Gu,"를 활용하여 BDD 테스트를 작성해보자. 먼저, go-bdd를 설치한다."),Gu.forEach(s),xo=k(n),Vn=e(n,"PRE",{class:!0});var kr=c(Vn);kr.forEach(s),So=k(n),N=e(n,"P",{});var Js=c(N);Wl=u(Js,"이후 프로젝트 루트 디렉토리에 "),ja=e(Js,"CODE",{});var dk=c(ja);Xl=u(dk,"features"),dk.forEach(s),jl=u(Js," 디렉토리를 생성하고, "),qa=e(Js,"CODE",{});var Ek=c(qa);ql=u(Ek,"features/add.feature"),Ek.forEach(s),Ql=u(Js," 파일을 생성한 후 다음과 같이 작성한다."),Js.forEach(s),Ro=k(n),Yn=e(n,"PRE",{class:!0});var rr=c(Yn);rr.forEach(s),Bo=k(n),$n=e(n,"P",{});var ae=c($n);Ul=u(ae,"그리고 "),Qa=e(ae,"CODE",{});var vk=c(Qa);zl=u(vk,"add_test.go"),vk.forEach(s),Zl=u(ae," 파일을 생성하여 다음과 같이 작성한다."),ae.forEach(s),Oo=k(n),S(Tn.$$.fragment,n),Mo=k(n),d=e(n,"P",{});var v=c(d);Jl=u(v,"위 코드에서 "),Ua=e(v,"CODE",{});var wk=c(Ua);Kl=u(wk,"add"),wk.forEach(s),Vl=u(v," 함수는 "),za=e(v,"CODE",{});var Dk=c(za);Yl=u(Dk,"bdd step"),Dk.forEach(s),nu=u(v,` 함수인데, 함수 이름이 중요하다.
`),Za=e(v,"CODE",{});var bk=c(Za);su=u(bk,"add.feature"),bk.forEach(s),au=u(v," 파일의 "),Ja=e(v,"CODE",{});var Ck=c(Ja);tu=u(Ck,"When I add 3 and 6"),Ck.forEach(s),pu=u(v,"이라는 문장을 만나면, "),Ka=e(v,"CODE",{});var $k=c(Ka);ou=u($k,"add"),$k.forEach(s),eu=u(v,` 함수가 실행된다.
만약 `),Va=e(v,"CODE",{});var Tk=c(Va);cu=u(Tk,"add"),Tk.forEach(s),lu=u(v," 함수의 이름을 "),Ya=e(v,"CODE",{});var hk=c(Ya);uu=u(hk,"sum"),hk.forEach(s),iu=u(v,"으로 변경한다면, "),nt=e(v,"CODE",{});var Pk=c(nt);ku=u(Pk,"add.feature"),Pk.forEach(s),ru=u(v," 파일을 "),st=e(v,"CODE",{});var yk=c(st);fu=u(yk,"When I sum 3 and 6"),yk.forEach(s),mu=u(v,`으로 변경해야 할 것이다.
이후 로직을 수행하고 나중에 `),at=e(v,"CODE",{});var xk=c(at);_u=u(xk,"check"),xk.forEach(s),du=u(v,"에서 불러올 수 있도록 컨텍스트에 저장한다."),v.forEach(s),Ao=k(n),P=e(n,"P",{});var os=c(P);tt=e(os,"CODE",{});var Sk=c(tt);Eu=u(Sk,"check"),Sk.forEach(s),vu=u(os,` 함수는 실질적인 테스트를 수행하는 함수로, 검증은 이 함수에서 이루어진다.
다음으로 테스트 스위트를 생성하고, `),pt=e(os,"CODE",{});var Rk=c(pt);wu=u(Rk,"add"),Rk.forEach(s),Du=u(os,"와 "),ot=e(os,"CODE",{});var Bk=c(ot);bu=u(Bk,"check"),Bk.forEach(s),Cu=u(os,` 함수를 등록한다.
이 테스트를 수행한다면 통과할 것이다.`),os.forEach(s),Io=k(n),go=e(n,"BR",{}),Go=k(n),js=e(n,"P",{});var Ok=c(js);$u=u(Ok,`이와 같이 BDD는 자연어와 유사하여 직관성이 뛰어나지만, 테스트 코드를 작성하는 것이 번거로워진다.
앞선 예제의 경우 비교적 간단하지만, 실제로는 훨씬 복잡한 테스트 코드를 작성해야 할 것이다. 그 코드를 BDD로 작성한다고 생각해 보면 좀 어지러워진다.
도메인 전문가가 BDD를 이해할 수 있고, 자주 의사소통할 수 있다면 BDD를 사용하는 게 괜찮은 선택지일 수 있다.
하지만 그렇지 않다면 그냥 Unit Test를 작성하는 게 더 좋다.`),Ok.forEach(s),No=k(n),Lo=e(n,"BR",{}),Ho=e(n,"BR",{}),Fo=k(n),hn=e(n,"H2",{id:!0});var Lu=c(hn);Pn=e(Lu,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Mk=c(Pn);et=e(Mk,"SPAN",{class:!0}),c(et).forEach(s),Mk.forEach(s),Tu=u(Lu,"References"),Lu.forEach(s),Wo=k(n),Xo=e(n,"HR",{}),jo=k(n),y=e(n,"CENTER",{});var es=c(y);ct=e(es,"P",{});var Ak=c(ct);hu=u(Ak,"["),Ak.forEach(s),Pu=k(es),S(ns.$$.fragment,es),yu=u(es,`
](https://learning.oreilly.com/library/view/domain-driven-design-with/9781804613450/) `),xu=e(es,"BR",{}),Su=u(es,`
[Matthew Boyle, Domain-Driven Design with Golang』, O'Reilly Media, Inc.](https://learning.oreilly.com/library/view/domain-driven-design-with/9781804613450/)`),es.forEach(s),this.h()},h(){f(Ks,"class","icon icon-link"),f(q,"aria-hidden","true"),f(q,"tabindex","-1"),f(q,"href","#tdd"),f(j,"id","tdd"),f(ma,"class","icon icon-link"),f(U,"aria-hidden","true"),f(U,"tabindex","-1"),f(U,"href","#테스트-추가"),f(Q,"id","테스트-추가"),f(On,"class","language-text"),f(Mn,"href","https://jhseoeo.github.io/posts/post/Go/Golang%20Basics/GO13"),f(Mn,"rel","nofollow"),f(An,"class","language-go"),f(In,"class","language-bash"),f(Da,"class","icon icon-link"),f(K,"aria-hidden","true"),f(K,"tabindex","-1"),f(K,"href","#코드-작성"),f(J,"id","코드-작성"),f(Ca,"class","icon icon-link"),f(sn,"aria-hidden","true"),f(sn,"tabindex","-1"),f(sn,"href","#테스트-실행"),f(nn,"id","테스트-실행"),f(gn,"href","https://github.com/golang/mock"),f(gn,"rel","nofollow"),f(Gn,"class","language-bash"),f(Nn,"class","language-go"),f(Ln,"class","language-text"),f(Na,"class","icon icon-link"),f(rn,"aria-hidden","true"),f(rn,"tabindex","-1"),f(rn,"href","#리팩토링"),f(kn,"id","리팩토링"),f(Fn,"class","language-text"),f(Wn,"class","language-go"),f(Xn,"class","language-text"),f(jn,"class","language-go"),f(qn,"class","language-go"),f(Qn,"class","language-text"),f(Un,"class","language-text"),f(zn,"class","language-go"),f(Wa,"class","icon icon-link"),f(bn,"aria-hidden","true"),f(bn,"tabindex","-1"),f(bn,"href","#bdd"),f(Dn,"id","bdd"),f(Zn,"href","https://cucumber.io/docs/gherkin/"),f(Zn,"rel","nofollow"),f(Jn,"href","https://cucumber.io/"),f(Jn,"rel","nofollow"),f(Cn,"href","https://github.com/go-bdd/gobdd"),f(Cn,"rel","nofollow"),f(Vn,"class","language-bash"),f(Yn,"class","language-gherkin"),f(et,"class","icon icon-link"),f(Pn,"aria-hidden","true"),f(Pn,"tabindex","-1"),f(Pn,"href","#references"),f(hn,"id","references")},m(n,t){p(n,r,t),a(r,E),p(n,m,t),p(n,_,t),p(n,ft,t),p(n,mt,t),p(n,j,t),a(j,q),a(q,Ks),a(j,te),p(n,_t,t),p(n,dt,t),p(n,Et,t),p(n,cs,t),a(cs,pe),p(n,vt,t),p(n,ls,t),a(ls,oe),p(n,wt,t),p(n,b,t),a(b,xn),a(xn,F),a(F,ee),a(F,Sn),a(Sn,ce),a(Sn,Vs),a(Vs,le),a(Sn,ue),a(F,ie),a(F,Rn),a(Rn,ke),a(Rn,Ys),a(Ys,re),a(Rn,fe),a(F,me),a(xn,_e),a(xn,na),a(na,de),a(b,Ee),a(b,sa),a(sa,aa),a(aa,ve),a(b,we),a(b,ta),a(ta,pa),a(pa,De),a(b,be),a(b,oa),a(oa,ea),a(ea,Ce),a(b,$e),a(b,ca),a(ca,la),a(la,Te),p(n,Dt,t),p(n,us,t),a(us,he),p(n,bt,t),p(n,Ct,t),p(n,$t,t),p(n,is,t),a(is,Pe),p(n,Tt,t),p(n,Bn,t),a(Bn,ye),a(Bn,ua),a(ua,xe),p(n,ht,t),p(n,ks,t),a(ks,Se),p(n,Pt,t),p(n,$,t),a($,ia),a(ia,Re),a($,Be),a($,ka),a(ka,Oe),a($,Me),a($,ra),a(ra,Ae),a($,Ie),a($,fa),a(fa,ge),p(n,yt,t),p(n,rs,t),a(rs,Ge),p(n,xt,t),p(n,St,t),p(n,Rt,t),p(n,Bt,t),p(n,Q,t),a(Q,U),a(U,ma),a(Q,Ne),p(n,Ot,t),p(n,W,t),a(W,_a),a(_a,Le),a(W,He),a(W,da),a(da,Fe),a(W,We),p(n,Mt,t),p(n,On,t),On.innerHTML=Ik,p(n,At,t),p(n,A,t),a(A,Xe),a(A,Ea),a(Ea,je),a(A,qe),a(A,Mn),a(Mn,Qe),a(A,Ue),p(n,It,t),p(n,z,t),a(z,ze),a(z,va),a(va,Ze),a(z,Je),p(n,gt,t),p(n,An,t),An.innerHTML=gk,p(n,Gt,t),p(n,fs,t),a(fs,Ke),p(n,Nt,t),p(n,Z,t),a(Z,Ve),a(Z,wa),a(wa,Ye),a(Z,nc),p(n,Lt,t),p(n,ms,t),a(ms,sc),p(n,Ht,t),p(n,In,t),In.innerHTML=Gk,p(n,Ft,t),p(n,_s,t),a(_s,ac),p(n,Wt,t),p(n,Xt,t),p(n,jt,t),p(n,qt,t),p(n,J,t),a(J,K),a(K,Da),a(J,tc),p(n,Qt,t),p(n,V,t),a(V,pc),a(V,ba),a(ba,oc),a(V,ec),p(n,Ut,t),R(Y,n,t),p(n,zt,t),p(n,Zt,t),p(n,Jt,t),p(n,Kt,t),p(n,nn,t),a(nn,sn),a(sn,Ca),a(nn,cc),p(n,Vt,t),p(n,h,t),a(h,$a),a($a,lc),a(h,uc),a(h,Ta),a(Ta,ic),a(h,kc),a(h,ha),a(ha,rc),a(h,fc),p(n,Yt,t),p(n,an,t),a(an,mc),a(an,gn),a(gn,_c),a(an,dc),p(n,np,t),p(n,tn,t),a(tn,Ec),a(tn,Pa),a(Pa,vc),a(tn,wc),p(n,sp,t),p(n,Gn,t),Gn.innerHTML=Nk,p(n,ap,t),p(n,pn,t),a(pn,Dc),a(pn,ya),a(ya,bc),a(pn,Cc),p(n,tp,t),p(n,Nn,t),Nn.innerHTML=Lk,p(n,pp,t),p(n,I,t),a(I,$c),a(I,xa),a(xa,Tc),a(I,hc),a(I,Sa),a(Sa,Pc),a(I,yc),p(n,op,t),p(n,Ln,t),Ln.innerHTML=Hk,p(n,ep,t),p(n,on,t),a(on,xc),a(on,Ra),a(Ra,Sc),a(on,Rc),p(n,cp,t),R(en,n,t),p(n,lp,t),p(n,D,t),a(D,Bc),a(D,Ba),a(Ba,Oc),a(D,Mc),a(D,Oa),a(Oa,Ac),a(D,Ic),a(D,Ma),a(Ma,gc),a(D,Gc),a(D,Aa),a(Aa,Nc),a(D,Lc),a(D,Ia),a(Ia,Hc),a(D,Fc),p(n,up,t),p(n,Hn,t),a(Hn,ga),a(ga,Wc),a(Hn,Xc),p(n,ip,t),p(n,cn,t),a(cn,jc),a(cn,qc),a(cn,Qc),p(n,kp,t),p(n,ds,t),a(ds,Uc),p(n,rp,t),p(n,Es,t),a(Es,zc),p(n,fp,t),p(n,vs,t),a(vs,Zc),p(n,mp,t),p(n,ln,t),a(ln,Jc),a(ln,Ga),a(Ga,Kc),a(ln,Vc),p(n,_p,t),R(un,n,t),p(n,dp,t),p(n,Ep,t),p(n,vp,t),p(n,wp,t),p(n,kn,t),a(kn,rn),a(rn,Na),a(kn,Yc),p(n,Dp,t),p(n,ws,t),a(ws,nl),p(n,bp,t),p(n,Ds,t),a(Ds,sl),p(n,Cp,t),p(n,bs,t),a(bs,al),p(n,$p,t),R(fn,n,t),p(n,Tp,t),p(n,Cs,t),a(Cs,tl),p(n,hp,t),p(n,$s,t),a($s,pl),p(n,Pp,t),R(mn,n,t),p(n,yp,t),p(n,xp,t),p(n,Sp,t),p(n,Ts,t),a(Ts,ol),p(n,Rp,t),R(_n,n,t),p(n,Bp,t),p(n,hs,t),a(hs,el),p(n,Op,t),p(n,Fn,t),Fn.innerHTML=Fk,p(n,Mp,t),p(n,g,t),a(g,cl),a(g,La),a(La,ll),a(g,ul),a(g,Ha),a(Ha,il),a(g,kl),p(n,Ap,t),p(n,Wn,t),Wn.innerHTML=Wk,p(n,Ip,t),p(n,Ps,t),a(Ps,rl),p(n,gp,t),p(n,Xn,t),Xn.innerHTML=Xk,p(n,Gp,t),p(n,ys,t),a(ys,fl),p(n,Np,t),p(n,Lp,t),p(n,Hp,t),p(n,xs,t),a(xs,ml),p(n,Fp,t),p(n,jn,t),jn.innerHTML=jk,p(n,Wp,t),p(n,Ss,t),a(Ss,_l),p(n,Xp,t),p(n,qn,t),qn.innerHTML=qk,p(n,jp,t),p(n,Rs,t),a(Rs,dl),p(n,qp,t),p(n,Qp,t),p(n,Up,t),p(n,Bs,t),a(Bs,El),p(n,zp,t),R(dn,n,t),p(n,Zp,t),p(n,Os,t),a(Os,vl),p(n,Jp,t),p(n,Qn,t),Qn.innerHTML=Qk,p(n,Kp,t),p(n,Ms,t),a(Ms,wl),p(n,Vp,t),R(En,n,t),p(n,Yp,t),p(n,As,t),a(As,Dl),p(n,no,t),p(n,so,t),p(n,ao,t),p(n,vn,t),a(vn,bl),a(vn,Fa),a(Fa,Cl),a(vn,$l),p(n,to,t),p(n,Un,t),Un.innerHTML=Uk,p(n,po,t),p(n,Is,t),a(Is,Tl),p(n,oo,t),p(n,eo,t),p(n,co,t),p(n,gs,t),a(gs,hl),p(n,lo,t),p(n,Gs,t),a(Gs,Pl),p(n,uo,t),p(n,io,t),p(n,ko,t),p(n,Ns,t),a(Ns,yl),p(n,ro,t),p(n,Ls,t),a(Ls,xl),p(n,fo,t),p(n,zn,t),zn.innerHTML=zk,p(n,mo,t),p(n,Hs,t),a(Hs,Sl),p(n,_o,t),R(wn,n,t),p(n,Eo,t),p(n,Fs,t),a(Fs,Rl),p(n,vo,t),p(n,wo,t),p(n,Do,t),p(n,Ws,t),a(Ws,Bl),p(n,bo,t),p(n,Co,t),p(n,$o,t),p(n,To,t),p(n,Dn,t),a(Dn,bn),a(bn,Wa),a(Dn,Ol),p(n,ho,t),p(n,Xs,t),a(Xs,Ml),p(n,Po,t),p(n,G,t),a(G,Al),a(G,Zn),a(Zn,Il),a(G,gl),a(G,Jn),a(Jn,Gl),a(G,Nl),p(n,yo,t),p(n,Kn,t),a(Kn,Cn),a(Cn,Xa),a(Xa,Ll),a(Cn,Hl),a(Kn,Fl),p(n,xo,t),p(n,Vn,t),Vn.innerHTML=Zk,p(n,So,t),p(n,N,t),a(N,Wl),a(N,ja),a(ja,Xl),a(N,jl),a(N,qa),a(qa,ql),a(N,Ql),p(n,Ro,t),p(n,Yn,t),Yn.innerHTML=Jk,p(n,Bo,t),p(n,$n,t),a($n,Ul),a($n,Qa),a(Qa,zl),a($n,Zl),p(n,Oo,t),R(Tn,n,t),p(n,Mo,t),p(n,d,t),a(d,Jl),a(d,Ua),a(Ua,Kl),a(d,Vl),a(d,za),a(za,Yl),a(d,nu),a(d,Za),a(Za,su),a(d,au),a(d,Ja),a(Ja,tu),a(d,pu),a(d,Ka),a(Ka,ou),a(d,eu),a(d,Va),a(Va,cu),a(d,lu),a(d,Ya),a(Ya,uu),a(d,iu),a(d,nt),a(nt,ku),a(d,ru),a(d,st),a(st,fu),a(d,mu),a(d,at),a(at,_u),a(d,du),p(n,Ao,t),p(n,P,t),a(P,tt),a(tt,Eu),a(P,vu),a(P,pt),a(pt,wu),a(P,Du),a(P,ot),a(ot,bu),a(P,Cu),p(n,Io,t),p(n,go,t),p(n,Go,t),p(n,js,t),a(js,$u),p(n,No,t),p(n,Lo,t),p(n,Ho,t),p(n,Fo,t),p(n,hn,t),a(hn,Pn),a(Pn,et),a(hn,Tu),p(n,Wo,t),p(n,Xo,t),p(n,jo,t),p(n,y,t),a(y,ct),a(ct,hu),a(y,Pu),R(ns,y,null),a(y,yu),a(y,xu),a(y,Su),qo=!0},p(n,[t]){const qs={};t&1&&(qs.$$scope={dirty:t,ctx:n}),Y.$set(qs);const lt={};t&1&&(lt.$$scope={dirty:t,ctx:n}),en.$set(lt);const ut={};t&1&&(ut.$$scope={dirty:t,ctx:n}),un.$set(ut);const it={};t&1&&(it.$$scope={dirty:t,ctx:n}),fn.$set(it);const C={};t&1&&(C.$$scope={dirty:t,ctx:n}),mn.$set(C);const ss={};t&1&&(ss.$$scope={dirty:t,ctx:n}),_n.$set(ss);const X={};t&1&&(X.$$scope={dirty:t,ctx:n}),dn.$set(X);const as={};t&1&&(as.$$scope={dirty:t,ctx:n}),En.$set(as);const kt={};t&1&&(kt.$$scope={dirty:t,ctx:n}),wn.$set(kt);const ts={};t&1&&(ts.$$scope={dirty:t,ctx:n}),Tn.$set(ts)},i(n){qo||(B(Y.$$.fragment,n),B(en.$$.fragment,n),B(un.$$.fragment,n),B(fn.$$.fragment,n),B(mn.$$.fragment,n),B(_n.$$.fragment,n),B(dn.$$.fragment,n),B(En.$$.fragment,n),B(wn.$$.fragment,n),B(Tn.$$.fragment,n),B(ns.$$.fragment,n),qo=!0)},o(n){O(Y.$$.fragment,n),O(en.$$.fragment,n),O(un.$$.fragment,n),O(fn.$$.fragment,n),O(mn.$$.fragment,n),O(_n.$$.fragment,n),O(dn.$$.fragment,n),O(En.$$.fragment,n),O(wn.$$.fragment,n),O(Tn.$$.fragment,n),O(ns.$$.fragment,n),qo=!1},d(n){n&&s(r),n&&s(m),n&&s(_),n&&s(ft),n&&s(mt),n&&s(j),n&&s(_t),n&&s(dt),n&&s(Et),n&&s(cs),n&&s(vt),n&&s(ls),n&&s(wt),n&&s(b),n&&s(Dt),n&&s(us),n&&s(bt),n&&s(Ct),n&&s($t),n&&s(is),n&&s(Tt),n&&s(Bn),n&&s(ht),n&&s(ks),n&&s(Pt),n&&s($),n&&s(yt),n&&s(rs),n&&s(xt),n&&s(St),n&&s(Rt),n&&s(Bt),n&&s(Q),n&&s(Ot),n&&s(W),n&&s(Mt),n&&s(On),n&&s(At),n&&s(A),n&&s(It),n&&s(z),n&&s(gt),n&&s(An),n&&s(Gt),n&&s(fs),n&&s(Nt),n&&s(Z),n&&s(Lt),n&&s(ms),n&&s(Ht),n&&s(In),n&&s(Ft),n&&s(_s),n&&s(Wt),n&&s(Xt),n&&s(jt),n&&s(qt),n&&s(J),n&&s(Qt),n&&s(V),n&&s(Ut),M(Y,n),n&&s(zt),n&&s(Zt),n&&s(Jt),n&&s(Kt),n&&s(nn),n&&s(Vt),n&&s(h),n&&s(Yt),n&&s(an),n&&s(np),n&&s(tn),n&&s(sp),n&&s(Gn),n&&s(ap),n&&s(pn),n&&s(tp),n&&s(Nn),n&&s(pp),n&&s(I),n&&s(op),n&&s(Ln),n&&s(ep),n&&s(on),n&&s(cp),M(en,n),n&&s(lp),n&&s(D),n&&s(up),n&&s(Hn),n&&s(ip),n&&s(cn),n&&s(kp),n&&s(ds),n&&s(rp),n&&s(Es),n&&s(fp),n&&s(vs),n&&s(mp),n&&s(ln),n&&s(_p),M(un,n),n&&s(dp),n&&s(Ep),n&&s(vp),n&&s(wp),n&&s(kn),n&&s(Dp),n&&s(ws),n&&s(bp),n&&s(Ds),n&&s(Cp),n&&s(bs),n&&s($p),M(fn,n),n&&s(Tp),n&&s(Cs),n&&s(hp),n&&s($s),n&&s(Pp),M(mn,n),n&&s(yp),n&&s(xp),n&&s(Sp),n&&s(Ts),n&&s(Rp),M(_n,n),n&&s(Bp),n&&s(hs),n&&s(Op),n&&s(Fn),n&&s(Mp),n&&s(g),n&&s(Ap),n&&s(Wn),n&&s(Ip),n&&s(Ps),n&&s(gp),n&&s(Xn),n&&s(Gp),n&&s(ys),n&&s(Np),n&&s(Lp),n&&s(Hp),n&&s(xs),n&&s(Fp),n&&s(jn),n&&s(Wp),n&&s(Ss),n&&s(Xp),n&&s(qn),n&&s(jp),n&&s(Rs),n&&s(qp),n&&s(Qp),n&&s(Up),n&&s(Bs),n&&s(zp),M(dn,n),n&&s(Zp),n&&s(Os),n&&s(Jp),n&&s(Qn),n&&s(Kp),n&&s(Ms),n&&s(Vp),M(En,n),n&&s(Yp),n&&s(As),n&&s(no),n&&s(so),n&&s(ao),n&&s(vn),n&&s(to),n&&s(Un),n&&s(po),n&&s(Is),n&&s(oo),n&&s(eo),n&&s(co),n&&s(gs),n&&s(lo),n&&s(Gs),n&&s(uo),n&&s(io),n&&s(ko),n&&s(Ns),n&&s(ro),n&&s(Ls),n&&s(fo),n&&s(zn),n&&s(mo),n&&s(Hs),n&&s(_o),M(wn,n),n&&s(Eo),n&&s(Fs),n&&s(vo),n&&s(wo),n&&s(Do),n&&s(Ws),n&&s(bo),n&&s(Co),n&&s($o),n&&s(To),n&&s(Dn),n&&s(ho),n&&s(Xs),n&&s(Po),n&&s(G),n&&s(yo),n&&s(Kn),n&&s(xo),n&&s(Vn),n&&s(So),n&&s(N),n&&s(Ro),n&&s(Yn),n&&s(Bo),n&&s($n),n&&s(Oo),M(Tn,n),n&&s(Mo),n&&s(d),n&&s(Ao),n&&s(P),n&&s(Io),n&&s(go),n&&s(Go),n&&s(js),n&&s(No),n&&s(Lo),n&&s(Ho),n&&s(Fo),n&&s(hn),n&&s(Wo),n&&s(Xo),n&&s(jo),n&&s(y),M(ns)}}}const Br={title:"DDD와 함께 TDD, BDD 사용하기",date:"2023-08-11T00:00:00.000Z",excerpt:"TDD, BDD, and DDD",categories:["Golang","Backend","Architecture","Domain Driven Design"],coverImage:"/post_img/Backend/Architecture/DDD/cover.png",coverWidth:16,coverHeight:9,indexed:!1,exposed:!0};class Or extends fr{constructor(r){super(),mr(this,r,null,yr,_r,{})}}export{Or as default,Br as metadata};
