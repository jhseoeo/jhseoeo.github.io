import{S as DW,i as bW,s as RW,k as o,a as u,q as e,l as p,c as i,m as l,r as a,h as t,n as d,U as PW,b as r,E as s,M as rS}from"./index.d78780bf.js";function yW(ZL){let ua,uk,ia,kv,ik,dk,kk,fk,Xs,Ys,no,fv,Ek,vk,_k,$s,Ev,so,vv,_v,mk,w,mv,le,Cv,Ov,to,Dv,bv,eo,Rv,Pv,ao,yv,wv,oo,Sv,Tv,po,hv,Hv,lo,Mv,Nv,Ck,Ok,Dk,bk,gs,nt,co,xv,Rk,Pk,yk,on,jv,ro,Lv,Av,uo,Wv,Bv,io,qv,Fv,ko,Jv,Gv,wk,Sk,Tk,xs,fo,Iv,Uv,Eo,zv,Zv,hk,ce,QL=`<code class="language-go"><span class="token keyword">type</span> Reader <span class="token keyword">interface</span> <span class="token punctuation">&#123;</span>
    <span class="token function">Read</span><span class="token punctuation">(</span>p <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">type</span> Writer <span class="token keyword">interface</span> <span class="token punctuation">&#123;</span>
    <span class="token function">Write</span><span class="token punctuation">(</span>p <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code>`,Hk,X,vo,Qv,Kv,_o,Vv,Xv,mo,Yv,$v,Co,gv,n5,Oo,s5,t5,Mk,Nk,xk,os,e5,Do,a5,o5,bo,p5,l5,jk,re,KL=`<code class="language-go"><span class="token keyword">type</span> NotHowReaderIsDefined <span class="token keyword">interface</span> <span class="token punctuation">&#123;</span>
    <span class="token function">Read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>p <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code>`,Lk,ps,c5,Ro,r5,u5,Po,i5,d5,Ak,ue,VL=`<code class="language-go"><span class="token keyword">func</span> <span class="token function">countLetters</span><span class="token punctuation">(</span>r io<span class="token punctuation">.</span>Reader<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	buf <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token number">2048</span><span class="token punctuation">)</span>
	out <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
	<span class="token keyword">for</span> <span class="token punctuation">&#123;</span>
		n<span class="token punctuation">,</span> err <span class="token operator">:=</span> r<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span>
		<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> b <span class="token operator">:=</span> <span class="token keyword">range</span> buf<span class="token punctuation">[</span><span class="token punctuation">:</span>n<span class="token punctuation">]</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">>=</span> <span class="token char">'A'</span> <span class="token operator">&amp;&amp;</span> b <span class="token operator">&lt;=</span> <span class="token char">'Z'</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>b <span class="token operator">>=</span> <span class="token char">'a'</span> <span class="token operator">&amp;&amp;</span> b <span class="token operator">&lt;=</span> <span class="token char">'z'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
				out<span class="token punctuation">[</span><span class="token function">string</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">++</span>
			<span class="token punctuation">&#125;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token keyword">if</span> err <span class="token operator">==</span> io<span class="token punctuation">.</span>EOF <span class="token punctuation">&#123;</span>
			<span class="token keyword">return</span> out<span class="token punctuation">,</span> <span class="token boolean">nil</span>
		<span class="token punctuation">&#125;</span>
		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,Wk,da,k5,Bk,hn,yo,Y,f5,wo,E5,v5,So,_5,m5,To,C5,O5,D5,b5,ho,R5,P5,y5,Ho,ls,Mo,w5,S5,No,T5,h5,xo,H5,M5,N5,jo,Hn,Lo,x5,j5,Ao,L5,A5,Wo,W5,B5,Bo,q5,F5,J5,qo,J,Fo,G5,I5,Jo,U5,z5,Z5,Q5,Go,K5,V5,Io,X5,Y5,Uo,$5,g5,qk,Fk,Jk,pn,n_,zo,s_,t_,Zo,e_,a_,Qo,o_,p_,Ko,l_,c_,Gk,ie,XL=`<code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	s <span class="token operator">:=</span> <span class="token string">"The quick brown fox jumped over the lazy dog"</span>
	sr <span class="token operator">:=</span> strings<span class="token punctuation">.</span><span class="token function">NewReader</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>
	counts<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">countLetters</span><span class="token punctuation">(</span>sr<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>counts<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code>`,Ik,mn,Vo,r_,u_,Xo,i_,d_,Yo,k_,f_,$o,E_,v_,Uk,de,YL=`<code class="language-go"><span class="token keyword">func</span> <span class="token function">buildGZipReader</span><span class="token punctuation">(</span>filename <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>gzip<span class="token punctuation">.</span>Reader<span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	r<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err
	<span class="token punctuation">&#125;</span>

	gr<span class="token punctuation">,</span> err <span class="token operator">:=</span> gzip<span class="token punctuation">.</span><span class="token function">NewReader</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">return</span> gr<span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		gr<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		r<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>
<span class="token punctuation">&#125;</span></code>`,zk,G,__,go,m_,C_,np,O_,D_,sp,b_,R_,tp,P_,y_,ep,w_,S_,Zk,Cn,ap,T_,h_,op,H_,M_,pp,N_,x_,lp,j_,L_,Qk,ke,$L=`<code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	r<span class="token punctuation">,</span> closer<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">buildGZipReader</span><span class="token punctuation">(</span><span class="token string">"my_data.txt.gz"</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">defer</span> <span class="token function">closer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	counts<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">countLetters</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>counts<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code>`,Kk,Vk,Xk,N,A_,cp,W_,B_,rp,q_,F_,up,J_,G_,ip,I_,U_,dp,z_,Z_,kp,Q_,K_,Yk,cs,rs,fp,V_,X_,Ep,Y_,$_,vp,g_,n0,s0,st,_p,t0,e0,mp,a0,o0,p0,us,Cp,l0,c0,Op,r0,u0,Dp,i0,d0,$k,is,k0,bp,f0,E0,Rp,v0,_0,gk,nf,sf,Xn,Pp,m0,C0,yp,O0,D0,wp,b0,R0,tf,fe,gL=`<code class="language-go"><span class="token keyword">type</span> Closer <span class="token keyword">interface</span> <span class="token punctuation">&#123;</span>
    <span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">type</span> Seeker <span class="token keyword">interface</span> <span class="token punctuation">&#123;</span>
    <span class="token function">Seek</span><span class="token punctuation">(</span>offset <span class="token builtin">int64</span><span class="token punctuation">,</span> whence <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">int64</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code>`,ef,On,Sp,P0,y0,Tp,w0,S0,hp,T0,h0,Hp,H0,M0,af,Ee,nA=`<code class="language-go">f<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span>
<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err
<span class="token punctuation">&#125;</span>
<span class="token keyword">defer</span> f<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code>`,of,Mn,N0,Mp,x0,j0,Np,L0,A0,xp,W0,B0,pf,H,jp,q0,F0,Lp,J0,G0,Ap,I0,U0,Wp,z0,Z0,Bp,Q0,K0,qp,V0,X0,Fp,Y0,$0,lf,cf,rf,v,Jp,g0,n6,Gp,s6,t6,Ip,e6,a6,Up,o6,p6,zp,l6,c6,Zp,r6,u6,Qp,i6,d6,Kp,k6,f6,Vp,E6,v6,Xp,_6,m6,Yp,C6,O6,$p,D6,b6,uf,tt,R6,gp,P6,y6,df,b,nl,w6,S6,sl,T6,h6,tl,H6,M6,el,N6,x6,al,j6,L6,ol,A6,W6,pl,B6,q6,ll,F6,J6,kf,R,cl,G6,I6,rl,U6,z6,ul,Z6,Q6,il,K6,V6,dl,X6,Y6,kl,$6,g6,fl,n9,s9,El,t9,e9,ff,et,a9,vl,o9,p9,Ef,ve,sA=`<code class="language-go"><span class="token keyword">type</span> nopCloser <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
    io<span class="token punctuation">.</span>Reader
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>nopCloser<span class="token punctuation">)</span> <span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token boolean">nil</span> <span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">NopCloser</span><span class="token punctuation">(</span>r io<span class="token punctuation">.</span>Reader<span class="token punctuation">)</span> io<span class="token punctuation">.</span>ReadCloser <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> nopCloser<span class="token punctuation">&#123;</span>r<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,vf,ka,l9,_f,fa,_e,c9,_l,r9,u9,mf,Cf,Of,Df,at,ot,ml,i9,bf,Rf,Pf,Nn,d9,Cl,k9,f9,Ol,E9,v9,Dl,_9,m9,yf,ln,C9,bl,O9,D9,Rl,b9,R9,Pl,P9,y9,yl,w9,S9,wf,Ea,T9,Sf,me,tA='<code class="language-go">d <span class="token operator">:=</span> <span class="token number">2</span><span class="token operator">*</span>time<span class="token punctuation">.</span>Hour <span class="token operator">+</span> <span class="token number">30</span><span class="token operator">*</span>time<span class="token punctuation">.</span>Minute</code>',Tf,pt,h9,wl,H9,M9,hf,Hf,Mf,xn,N9,Sl,x9,j9,Tl,L9,A9,Ce,W9,B9,Nf,va,hl,q9,xf,P,Hl,F9,J9,Ml,G9,I9,Nl,U9,z9,xl,Z9,Q9,jl,K9,V9,Ll,X9,Y9,Al,$9,g9,Wl,n4,s4,jf,Lf,Af,jn,t4,Bl,e4,a4,ql,o4,p4,Fl,l4,c4,Wf,Dn,Jl,r4,u4,Gl,i4,d4,Il,k4,f4,Ul,E4,v4,Bf,L,zl,_4,m4,Zl,C4,O4,Ql,D4,b4,Kl,R4,P4,Vl,y4,w4,Xl,S4,T4,qf,Oe,eA=`<code class="language-go">t<span class="token punctuation">,</span> err <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span><span class="token string">"2006-02-01 15:04:05 -0700"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"January 2, 2006 at 3:04:05PM MST"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code>`,Ff,_a,h4,Jf,De,aA='<code class="language-bash">March <span class="token number">13</span>, <span class="token number">2016</span> at <span class="token number">12</span>:00:00AM +0000</code>',Gf,lt,H4,Yl,M4,N4,If,k,$l,x4,j4,gl,L4,A4,nc,W4,B4,sc,q4,F4,tc,J4,G4,ec,I4,U4,ac,z4,Z4,oc,Q4,K4,pc,V4,X4,lc,Y4,$4,cc,g4,n8,rc,s8,t8,uc,e8,a8,ic,o8,p8,dc,l8,c8,kc,r8,u8,fc,i8,d8,Ec,k8,f8,Uf,E,vc,E8,v8,_c,_8,m8,mc,C8,O8,Cc,D8,b8,Oc,R8,P8,Dc,y8,w8,bc,S8,T8,Rc,h8,H8,Pc,M8,N8,yc,x8,j8,wc,L8,A8,Sc,W8,B8,Tc,q8,F8,zf,ds,J8,hc,G8,I8,Hc,U8,z8,Zf,Qf,Kf,Vf,ct,rt,Mc,Z8,Xf,ks,Q8,Nc,K8,V8,xc,X8,Y8,Yf,S,$8,jc,g8,n7,Lc,s7,t7,Ac,e7,a7,Wc,o7,p7,Bc,l7,c7,qc,r7,u7,Fc,i7,d7,$f,gf,n1,s1,ut,it,Jc,k7,t1,cn,f7,Gc,E7,v7,Ic,_7,m7,Uc,C7,O7,zc,D7,b7,e1,fs,R7,Zc,P7,y7,Qc,w7,S7,a1,ma,T7,o1,be,oA=`<code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	dura <span class="token operator">:=</span> time<span class="token punctuation">.</span>Second <span class="token operator">*</span> <span class="token number">2</span>
	timer <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">NewTicker</span><span class="token punctuation">(</span>dura<span class="token punctuation">)</span>
	<span class="token keyword">defer</span> timer<span class="token punctuation">.</span><span class="token function">Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// shutdown ticker</span>
	after <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">After</span><span class="token punctuation">(</span>dura <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">)</span>

	time<span class="token punctuation">.</span><span class="token function">AfterFunc</span><span class="token punctuation">(</span>dura<span class="token operator">*</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"응애"</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

loop1<span class="token punctuation">:</span>
	<span class="token keyword">for</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">select</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">case</span> <span class="token operator">&lt;-</span>timer<span class="token punctuation">.</span>C<span class="token punctuation">:</span> <span class="token comment">// channel that listens ticking</span>
			fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"야옹"</span><span class="token punctuation">)</span>
			timer<span class="token punctuation">.</span><span class="token function">Reset</span><span class="token punctuation">(</span>dura <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// reconfirguration tick interval</span>
		<span class="token keyword">case</span> <span class="token operator">&lt;-</span>after<span class="token punctuation">:</span>
			fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"끝"</span><span class="token punctuation">)</span>
			<span class="token keyword">break</span> loop1
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,p1,l1,c1,r1,dt,kt,Kc,h7,u1,i1,d1,Es,H7,Vc,M7,N7,Xc,x7,j7,k1,f1,E1,v1,ft,Et,Yc,L7,_1,Ca,A7,m1,Re,pA=`<code class="language-json"><span class="token punctuation">&#123;</span>
	<span class="token property">"id"</span><span class="token operator">:</span> <span class="token string">"12345"</span><span class="token punctuation">,</span>
	<span class="token property">"date_ordered"</span><span class="token operator">:</span> <span class="token string">"2020-05-01T13:01:02Z"</span><span class="token punctuation">,</span>
	<span class="token property">"customer_id"</span><span class="token operator">:</span> <span class="token string">"3"</span><span class="token punctuation">,</span>
	<span class="token property">"items"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
		<span class="token punctuation">&#123;</span> <span class="token property">"id"</span><span class="token operator">:</span> <span class="token string">"xyz123"</span><span class="token punctuation">,</span> <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Thing 1"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
		<span class="token punctuation">&#123;</span> <span class="token property">"id"</span><span class="token operator">:</span> <span class="token string">"abc789"</span><span class="token punctuation">,</span> <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Thing 2"</span> <span class="token punctuation">&#125;</span>
	<span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span></code>`,C1,Oa,W7,O1,Pe,lA=`<code class="language-go"><span class="token keyword">type</span> Order <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
	ID          <span class="token builtin">string</span>    <span class="token string">&#96;json:"id"&#96;</span>
	DateOrdered time<span class="token punctuation">.</span>Time <span class="token string">&#96;json:"date_ordered"&#96;</span>
	CustomerID  <span class="token builtin">string</span>    <span class="token string">&#96;json:"customer_id"&#96;</span>
	Items       <span class="token punctuation">[</span><span class="token punctuation">]</span>Item    <span class="token string">&#96;json:"items"&#96;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">type</span> Item <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
	ID   <span class="token builtin">string</span> <span class="token string">&#96;json:"id"&#96;</span>
	Name <span class="token builtin">string</span> <span class="token string">&#96;json:"name"&#96;</span>
<span class="token punctuation">&#125;</span></code>`,D1,vs,B7,$c,q7,F7,gc,J7,G7,b1,_s,I7,nr,U7,z7,sr,Z7,Q7,R1,ms,K7,tr,V7,X7,er,Y7,$7,P1,Ln,g7,ar,nm,sm,or,tm,em,pr,am,om,y1,rn,pm,lr,lm,cm,cr,rm,um,rr,im,dm,ur,km,fm,w1,Cs,Em,ir,vm,_m,dr,mm,Cm,S1,Da,Om,T1,h1,H1,M1,vt,_t,kr,Dm,N1,x1,j1,y,fr,bm,Rm,Er,Pm,ym,vr,wm,Sm,_r,Tm,hm,mr,Hm,Mm,Cr,Nm,xm,Or,jm,Lm,Dr,Am,Wm,L1,ye,cA=`<code class="language-go">data <span class="token operator">:=</span> <span class="token string">&#96;&#123;
	"id":"12345",
	"date_ordered":"2020-05-01T13:01:02Z",
	"customer_id":"3",
	"items":[&#123;"id":"xyz123","name":"Thing 1"&#125;,&#123;"id":"abc789","name":"Thing 2"&#125;]
&#125;&#96;</span>

<span class="token keyword">var</span> o Order
err <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">Unmarshal</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>o<span class="token punctuation">)</span>
<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span></code>`,A1,js,br,Bm,qm,Rr,Fm,Jm,W1,B1,q1,un,Pr,Gm,Im,yr,Um,zm,wr,Zm,Qm,Sr,Km,Vm,Tr,Xm,F1,we,rA=`<code class="language-go">	out<span class="token punctuation">,</span> err <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">Marshal</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">string</span><span class="token punctuation">(</span>out<span class="token punctuation">)</span><span class="token punctuation">)</span></code>`,J1,G1,I1,U1,mt,Ct,hr,Ym,z1,_,Hr,$m,gm,Mr,nC,sC,Nr,tC,eC,xr,aC,oC,jr,pC,lC,Lr,cC,rC,Ar,uC,iC,Wr,dC,kC,Br,fC,EC,qr,vC,_C,Fr,mC,CC,Jr,OC,DC,Z1,$,Gr,bC,RC,Ir,PC,yC,Ur,wC,SC,zr,TC,hC,Zr,HC,MC,Q1,Se,uA=`<code class="language-go"><span class="token keyword">type</span> Person <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
	Name <span class="token builtin">string</span> <span class="token string">&#96;json:"name"&#96;</span>
	Age  <span class="token builtin">int</span>    <span class="token string">&#96;json:"age"&#96;</span>
<span class="token punctuation">&#125;</span>

toFile <span class="token operator">:=</span> Person<span class="token punctuation">&#123;</span>
	Name<span class="token punctuation">:</span> <span class="token string">"Fred"</span><span class="token punctuation">,</span>
	Age<span class="token punctuation">:</span>  <span class="token number">40</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span></code>`,K1,V1,X1,D,Qr,NC,xC,Kr,jC,LC,Vr,AC,WC,Xr,BC,qC,Yr,FC,JC,$r,GC,IC,gr,UC,zC,nu,ZC,QC,su,KC,VC,Y1,Te,iA=`<code class="language-go">tmpFile<span class="token punctuation">,</span> err <span class="token operator">:=</span> ioutil<span class="token punctuation">.</span><span class="token function">TempFile</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span><span class="token function">TempDir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"sample-"</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
	<span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">defer</span> os<span class="token punctuation">.</span><span class="token function">Remove</span><span class="token punctuation">(</span>tmpFile<span class="token punctuation">.</span><span class="token function">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

err <span class="token operator">=</span> json<span class="token punctuation">.</span><span class="token function">NewEncoder</span><span class="token punctuation">(</span>tmpFile<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Encode</span><span class="token punctuation">(</span>toFile<span class="token punctuation">)</span>
<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
	<span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

err <span class="token operator">=</span> tmpFile<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
	<span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code>`,$1,g1,n2,dn,XC,tu,YC,$C,eu,gC,nO,au,sO,tO,ou,eO,aO,s2,he,dA=`<code class="language-go">tmpFile2<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>tmpFile<span class="token punctuation">.</span><span class="token function">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
	<span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">var</span> fromFile Person
err <span class="token operator">=</span> json<span class="token punctuation">.</span><span class="token function">NewDecoder</span><span class="token punctuation">(</span>tmpFile2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Decode</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>fromFile<span class="token punctuation">)</span>
<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
	<span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

err <span class="token operator">=</span> tmpFile2<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
	<span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%+v&#92;n"</span><span class="token punctuation">,</span> fromFile<span class="token punctuation">)</span></code>`,t2,Ot,oO,He,pO,lO,e2,a2,o2,p2,Dt,bt,pu,cO,l2,Os,rO,lu,uO,iO,cu,dO,kO,c2,ba,fO,r2,Me,kA=`<code class="language-json"><span class="token punctuation">&#123;</span> <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Fred"</span><span class="token punctuation">,</span> <span class="token property">"age"</span><span class="token operator">:</span> <span class="token number">40</span> <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#123;</span> <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Mary"</span><span class="token punctuation">,</span> <span class="token property">"age"</span><span class="token operator">:</span> <span class="token number">21</span> <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#123;</span> <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Pat"</span><span class="token punctuation">,</span> <span class="token property">"age"</span><span class="token operator">:</span> <span class="token number">30</span> <span class="token punctuation">&#125;</span></code>`,u2,Rt,EO,ru,vO,_O,i2,Pt,mO,uu,CO,OO,d2,Ne,fA=`<code class="language-go"><span class="token keyword">var</span> t <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
	Name <span class="token builtin">string</span> <span class="token string">&#96;json:"name"&#96;</span>
	Age  <span class="token builtin">int</span>    <span class="token string">&#96;json:"age"&#96;</span>
<span class="token punctuation">&#125;</span></code>`,k2,f2,E2,kn,DO,iu,bO,RO,du,PO,yO,ku,wO,SO,fu,TO,hO,v2,xe,EA=`<code class="language-go">dec <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">NewDecoder</span><span class="token punctuation">(</span>strings<span class="token punctuation">.</span><span class="token function">NewReader</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> dec<span class="token punctuation">.</span><span class="token function">More</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	err <span class="token operator">:=</span> dec<span class="token punctuation">.</span><span class="token function">Decode</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>t<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		<span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code>`,_2,yt,HO,Eu,MO,NO,m2,C2,O2,Yn,vu,xO,jO,_u,LO,AO,mu,WO,BO,D2,je,vA=`<code class="language-go"><span class="token keyword">var</span> allInputs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>Person<span class="token punctuation">&#123;</span>
	<span class="token punctuation">&#123;</span>Name<span class="token punctuation">:</span> <span class="token string">"Fred"</span><span class="token punctuation">,</span> Age<span class="token punctuation">:</span> <span class="token number">40</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
	<span class="token punctuation">&#123;</span>Name<span class="token punctuation">:</span> <span class="token string">"Mary"</span><span class="token punctuation">,</span> Age<span class="token punctuation">:</span> <span class="token number">21</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
	<span class="token punctuation">&#123;</span>Name<span class="token punctuation">:</span> <span class="token string">"Pat"</span><span class="token punctuation">,</span> Age<span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">var</span> b bytes<span class="token punctuation">.</span>Buffer
enc <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">NewEncoder</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>b<span class="token punctuation">)</span>
<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> input <span class="token operator">:=</span> <span class="token keyword">range</span> allInputs <span class="token punctuation">&#123;</span>
	t <span class="token operator">:=</span> <span class="token function">process</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span>
	err <span class="token operator">:=</span> enc<span class="token punctuation">.</span><span class="token function">Encode</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		<span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
out <span class="token operator">:=</span> b<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>out<span class="token punctuation">)</span></code>`,b2,R2,P2,y2,wt,St,Cu,qO,w2,An,FO,Ou,JO,GO,Du,IO,UO,bu,zO,ZO,S2,Le,_A=`<code class="language-go"><span class="token keyword">type</span> RFC822ZTime <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
	time<span class="token punctuation">.</span>Time
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>rt RFC822ZTime<span class="token punctuation">)</span> <span class="token function">MarshalJSON</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	out <span class="token operator">:=</span> rt<span class="token punctuation">.</span>Time<span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>RFC822Z<span class="token punctuation">)</span>
	<span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>&#96;<span class="token string">"&#96; + out + &#96;"</span><span class="token string">&#96;), nil
&#125;

func (rt *RFC822ZTime) UnmarshalJSON(b []byte) error &#123;
	if string(b) == "null" &#123;
		return nil
	&#125;

	t, err := time.Parse(&#96;</span>"<span class="token string">&#96;+time.RFC822Z+&#96;</span>"&#96;<span class="token punctuation">,</span> <span class="token function">string</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> err
	<span class="token punctuation">&#125;</span>

	<span class="token operator">*</span>rt <span class="token operator">=</span> RFC822ZTime<span class="token punctuation">&#123;</span>t<span class="token punctuation">&#125;</span>
	<span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">&#125;</span></code>`,T2,g,Ru,QO,KO,Pu,VO,XO,yu,YO,$O,wu,gO,nD,Su,sD,tD,h2,H2,M2,Ds,eD,Tu,aD,oD,hu,pD,lD,N2,Ae,mA=`<code class="language-go"><span class="token keyword">type</span> Item <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
	ID   <span class="token builtin">string</span> <span class="token string">&#96;json:"id"&#96;</span>
	Name <span class="token builtin">string</span> <span class="token string">&#96;json:"name"&#96;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">type</span> Order <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
	ID           <span class="token builtin">string</span>      <span class="token string">&#96;json:"id"&#96;</span>
	DateOrdereds RFC822ZTime <span class="token string">&#96;json:"date_ordered"&#96;</span>
	CustomerID   <span class="token builtin">string</span>      <span class="token string">&#96;json:"customer_id"&#96;</span>
	Items        <span class="token punctuation">[</span><span class="token punctuation">]</span>Item      <span class="token string">&#96;json:"items"&#96;</span>
<span class="token punctuation">&#125;</span></code>`,x2,Tt,cD,We,rD,uD,j2,L2,A2,I,iD,Hu,dD,kD,Mu,fD,ED,Nu,vD,_D,xu,mD,CD,ju,OD,DD,W2,Ra,bD,B2,$n,Lu,RD,PD,Au,yD,wD,Wu,SD,TD,q2,ht,hD,Bu,HD,MD,F2,Pa,nn,ND,qu,xD,jD,Fu,LD,AD,Ju,WD,BD,Gu,qD,FD,Iu,JD,GD,J2,G2,I2,U2,Ht,Mt,Uu,ID,z2,Z2,Q2,ya,UD,K2,V2,X2,Y2,Nt,xt,zu,zD,$2,A,Zu,ZD,QD,Qu,KD,VD,Ku,XD,YD,Vu,$D,gD,Xu,nb,sb,Yu,tb,eb,g2,Be,CA=`<code class="language-go">client <span class="token operator">:=</span> <span class="token operator">&amp;</span>http<span class="token punctuation">.</span>Client<span class="token punctuation">&#123;</span>
	Timeout<span class="token punctuation">:</span> <span class="token number">10</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span></code>`,nE,sE,tE,T,ab,$u,ob,pb,gu,lb,cb,ni,rb,ub,si,ib,db,ti,kb,fb,ei,Eb,vb,ai,_b,mb,eE,Wn,Cb,oi,Ob,Db,pi,bb,Rb,li,Pb,yb,aE,qe,OA=`<code class="language-go">req<span class="token punctuation">,</span> err <span class="token operator">:=</span> http<span class="token punctuation">.</span><span class="token function">NewRequestWithContext</span><span class="token punctuation">(</span>
	context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
	http<span class="token punctuation">.</span>MethodGet<span class="token punctuation">,</span>
	<span class="token string">"https://jsonplaceholder.typicode.com/todos/1"</span><span class="token punctuation">,</span>
	<span class="token boolean">nil</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span>
<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
	<span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
req<span class="token punctuation">.</span>Header<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"X-My-Client"</span><span class="token punctuation">,</span> <span class="token string">"Learning Go"</span><span class="token punctuation">)</span></code>`,oE,pE,lE,bn,ci,wb,Sb,ri,Tb,hb,ui,Hb,Mb,ii,Nb,xb,cE,Fe,DA=`<code class="language-go">res<span class="token punctuation">,</span> err <span class="token operator">:=</span> client<span class="token punctuation">.</span><span class="token function">Do</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span>
<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
	<span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code>`,rE,uE,iE,h,jb,di,Lb,Ab,ki,Wb,Bb,fi,qb,Fb,Ei,Jb,Gb,vi,Ib,Ub,_i,zb,Zb,mi,Qb,Kb,dE,Je,bA=`<code class="language-go"><span class="token keyword">defer</span> res<span class="token punctuation">.</span>Body<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> res<span class="token punctuation">.</span>StatusCode <span class="token operator">!=</span> http<span class="token punctuation">.</span>StatusOK <span class="token punctuation">&#123;</span>
	<span class="token function">panic</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"unexpected status: got %v"</span><span class="token punctuation">,</span> res<span class="token punctuation">.</span>Status<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>Header<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">"Content-Type"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">var</span> data <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
	UserID    <span class="token builtin">int</span>    <span class="token string">&#96;json:"userId"&#96;</span>
	ID        <span class="token builtin">int</span>    <span class="token string">&#96;json:"id"&#96;</span>
	Title     <span class="token builtin">string</span> <span class="token string">&#96;json:"title"&#96;</span>
	Completed <span class="token builtin">bool</span>   <span class="token string">&#96;json:"completed"&#96;</span>
<span class="token punctuation">&#125;</span>
err <span class="token operator">=</span> json<span class="token punctuation">.</span><span class="token function">NewDecoder</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>Body<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Decode</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>data<span class="token punctuation">)</span>
<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
	<span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%+v&#92;n"</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span></code>`,kE,wa,Vb,fE,Ge,RA=`<code class="language-bash">application/json<span class="token punctuation">;</span> <span class="token assign-left variable">charset</span><span class="token operator">=</span>utf-8
<span class="token punctuation">&#123;</span>UserID:1 ID:1 Title:delectus aut autem Completed:false<span class="token punctuation">&#125;</span></code>`,EE,vE,_E,Sa,fn,Ci,Xb,Yb,Oi,$b,gb,Di,nR,sR,bi,tR,eR,Ri,aR,oR,mE,CE,OE,DE,jt,Lt,Pi,pR,bE,En,lR,yi,cR,rR,wi,uR,iR,Si,dR,kR,Ti,fR,ER,RE,At,vR,hi,_R,mR,PE,Ie,PA=`<code class="language-go"><span class="token keyword">type</span> Handler <span class="token keyword">interface</span> <span class="token punctuation">&#123;</span>
	<span class="token function">ServeHTTP</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code>`,yE,wE,SE,Rn,Hi,CR,OR,Mi,DR,bR,Ni,RR,PR,xi,yR,wR,TE,Ue,yA=`<code class="language-go"><span class="token keyword">type</span> ResponseWriter <span class="token keyword">interface</span> <span class="token punctuation">&#123;</span>
	<span class="token function">Header</span><span class="token punctuation">(</span><span class="token punctuation">)</span> http<span class="token punctuation">.</span>Header
	<span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span>
	<span class="token function">WriterHeader</span><span class="token punctuation">(</span>statusCode <span class="token builtin">int</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code>`,hE,Ta,SR,HE,Bn,TR,ji,hR,HR,Li,MR,NR,Ai,xR,jR,ME,qn,LR,Wi,AR,WR,Bi,BR,qR,qi,FR,JR,NE,Wt,GR,Fi,IR,UR,xE,jE,LE,ha,zR,AE,ze,wA=`<code class="language-go"><span class="token keyword">type</span> HelloHandler <span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>hh HelloHandler<span class="token punctuation">)</span> <span class="token function">ServeHTTP</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	w<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"Hello!&#92;n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code>`,WE,Bt,ZR,Ji,QR,KR,BE,qE,FE,qt,VR,Gi,XR,YR,JE,Ze,SA=`<code class="language-go">s <span class="token operator">:=</span> http<span class="token punctuation">.</span>Server<span class="token punctuation">&#123;</span>
	Addr<span class="token punctuation">:</span>         <span class="token string">":8080"</span><span class="token punctuation">,</span>
	ReadTimeout<span class="token punctuation">:</span>  <span class="token number">3</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">,</span>
	WriteTimeout<span class="token punctuation">:</span> <span class="token number">5</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">,</span>
	IdleTimeout<span class="token punctuation">:</span>  <span class="token number">100</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">,</span>
	Handler<span class="token punctuation">:</span>      HelloHandler<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span>

err <span class="token operator">:=</span> s<span class="token punctuation">.</span><span class="token function">ListenAndServe</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> http<span class="token punctuation">.</span>ErrServerClosed <span class="token punctuation">&#123;</span>
		<span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,GE,Ls,Ii,$R,gR,Ui,nP,sP,IE,Pn,zi,tP,eP,Zi,aP,oP,Qi,pP,lP,Ki,cP,rP,UE,As,Vi,uP,iP,Xi,dP,kP,zE,ZE,QE,x,fP,Yi,EP,vP,$i,_P,mP,gi,CP,OP,nd,DP,bP,sd,RP,PP,td,yP,wP,KE,U,SP,ed,TP,hP,ad,HP,MP,od,NP,xP,pd,jP,LP,ld,AP,WP,VE,Qe,TA=`<code class="language-go">mux<span class="token punctuation">.</span><span class="token function">HandleFunc</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	w<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"Hello!&#92;n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code>`,XE,Fn,BP,cd,qP,FP,rd,JP,GP,Ke,IP,UP,YE,Ft,zP,Ve,ZP,QP,$E,gE,n3,Jt,j,ud,KP,VP,id,XP,YP,dd,$P,gP,kd,ny,sy,fd,ty,ey,Ed,ay,oy,vd,py,ly,cy,Jn,_d,ry,uy,md,iy,dy,Cd,ky,fy,Od,Ey,vy,s3,t3,e3,sn,Dd,_y,my,bd,Cy,Oy,Rd,Dy,by,Pd,Ry,Py,yd,yy,wy,a3,Xe,hA=`<code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	person <span class="token operator">:=</span> http<span class="token punctuation">.</span><span class="token function">NewServeMux</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	person<span class="token punctuation">.</span><span class="token function">HandleFunc</span><span class="token punctuation">(</span><span class="token string">"/greet"</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		w<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"greetings!&#92;n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

	dog <span class="token operator">:=</span> http<span class="token punctuation">.</span><span class="token function">NewServeMux</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	dog<span class="token punctuation">.</span><span class="token function">HandleFunc</span><span class="token punctuation">(</span><span class="token string">"/greet"</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		w<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"good puppy!&#92;n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

	mux <span class="token operator">:=</span> http<span class="token punctuation">.</span><span class="token function">NewServeMux</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	mux<span class="token punctuation">.</span><span class="token function">Handle</span><span class="token punctuation">(</span><span class="token string">"/person/"</span><span class="token punctuation">,</span> http<span class="token punctuation">.</span><span class="token function">StripPrefix</span><span class="token punctuation">(</span><span class="token string">"/person"</span><span class="token punctuation">,</span> person<span class="token punctuation">)</span><span class="token punctuation">)</span>
	mux<span class="token punctuation">.</span><span class="token function">Handle</span><span class="token punctuation">(</span><span class="token string">"/dog/"</span><span class="token punctuation">,</span> http<span class="token punctuation">.</span><span class="token function">StripPrefix</span><span class="token punctuation">(</span><span class="token string">"/dog"</span><span class="token punctuation">,</span> dog<span class="token punctuation">)</span><span class="token punctuation">)</span>

	s <span class="token operator">:=</span> http<span class="token punctuation">.</span>Server<span class="token punctuation">&#123;</span>
		Addr<span class="token punctuation">:</span>         <span class="token string">":8080"</span><span class="token punctuation">,</span>
		ReadTimeout<span class="token punctuation">:</span>  <span class="token number">3</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">,</span>
		WriteTimeout<span class="token punctuation">:</span> <span class="token number">5</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">,</span>
		IdleTimeout<span class="token punctuation">:</span>  <span class="token number">100</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">,</span>
		Handler<span class="token punctuation">:</span>      mux<span class="token punctuation">,</span>
	<span class="token punctuation">&#125;</span>

	err <span class="token operator">:=</span> s<span class="token punctuation">.</span><span class="token function">ListenAndServe</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">if</span> err <span class="token operator">!=</span> http<span class="token punctuation">.</span>ErrServerClosed <span class="token punctuation">&#123;</span>
			<span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,o3,Ha,Sy,p3,yn,wd,Ty,hy,Sd,Hy,My,Td,Ny,xy,hd,jy,Ly,l3,tn,Hd,Ay,Wy,Md,By,qy,Nd,Fy,Jy,xd,Gy,Iy,jd,Uy,zy,c3,r3,u3,i3,Gt,It,Ld,Zy,d3,z,Qy,Ad,Ky,Vy,Wd,Xy,Yy,Bd,$y,gy,qd,nw,sw,Fd,tw,ew,k3,f3,E3,Ma,aw,v3,Ye,HA=`<code class="language-go"><span class="token keyword">func</span> <span class="token function">RequestTimer</span><span class="token punctuation">(</span>h http<span class="token punctuation">.</span>Handler<span class="token punctuation">)</span> http<span class="token punctuation">.</span>Handler <span class="token punctuation">&#123;</span>
	<span class="token keyword">return</span> http<span class="token punctuation">.</span><span class="token function">HandlerFunc</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		start <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		h<span class="token punctuation">.</span><span class="token function">ServeHTTP</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> r<span class="token punctuation">)</span>
		end <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		log<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"request time for %s: %v"</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span>URL<span class="token punctuation">.</span>Path<span class="token punctuation">,</span> end<span class="token punctuation">.</span><span class="token function">Sub</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">var</span> securityMsg <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"You didn't give the secret password&#92;n"</span><span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">TerribleSecurityProvider</span><span class="token punctuation">(</span>password <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token keyword">func</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>Handler<span class="token punctuation">)</span> http<span class="token punctuation">.</span>Handler <span class="token punctuation">&#123;</span>
	<span class="token keyword">return</span> <span class="token keyword">func</span><span class="token punctuation">(</span>h http<span class="token punctuation">.</span>Handler<span class="token punctuation">)</span> http<span class="token punctuation">.</span>Handler <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> http<span class="token punctuation">.</span><span class="token function">HandlerFunc</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">if</span> r<span class="token punctuation">.</span>Header<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">"X-Secret-Password"</span><span class="token punctuation">)</span> <span class="token operator">!=</span> password <span class="token punctuation">&#123;</span>
				w<span class="token punctuation">.</span><span class="token function">WriteHeader</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusUnauthorized<span class="token punctuation">)</span>
				w<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>securityMsg<span class="token punctuation">)</span>
				<span class="token keyword">return</span>
			<span class="token punctuation">&#125;</span>
			h<span class="token punctuation">.</span><span class="token function">ServeHTTP</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> r<span class="token punctuation">)</span>
		<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,_3,bs,ow,Jd,pw,lw,Gd,cw,rw,m3,Ws,Id,uw,iw,Ud,dw,kw,C3,O3,D3,Na,zd,fw,b3,R3,P3,xa,Ew,y3,$e,MA=`<code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	terribleSecurity <span class="token operator">:=</span> <span class="token function">TerribleSecurityProvider</span><span class="token punctuation">(</span><span class="token string">"GOPHER"</span><span class="token punctuation">)</span>

	mux <span class="token operator">:=</span> http<span class="token punctuation">.</span><span class="token function">NewServeMux</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	mux<span class="token punctuation">.</span><span class="token function">Handle</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">,</span> http<span class="token punctuation">.</span><span class="token function">StripPrefix</span><span class="token punctuation">(</span><span class="token string">"/person"</span><span class="token punctuation">,</span> <span class="token function">terribleSecurity</span><span class="token punctuation">(</span><span class="token function">RequestTimer</span><span class="token punctuation">(</span>
		http<span class="token punctuation">.</span><span class="token function">HandlerFunc</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			w<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"Hello!&#92;n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
	<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

	s <span class="token operator">:=</span> http<span class="token punctuation">.</span>Server<span class="token punctuation">&#123;</span>
		Addr<span class="token punctuation">:</span>         <span class="token string">":8080"</span><span class="token punctuation">,</span>
		ReadTimeout<span class="token punctuation">:</span>  <span class="token number">3</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">,</span>
		WriteTimeout<span class="token punctuation">:</span> <span class="token number">5</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">,</span>
		IdleTimeout<span class="token punctuation">:</span>  <span class="token number">100</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">,</span>
		Handler<span class="token punctuation">:</span>      mux<span class="token punctuation">,</span>
	<span class="token punctuation">&#125;</span>

	err <span class="token operator">:=</span> s<span class="token punctuation">.</span><span class="token function">ListenAndServe</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">if</span> err <span class="token operator">!=</span> http<span class="token punctuation">.</span>ErrServerClosed <span class="token punctuation">&#123;</span>
			<span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,w3,Gn,vw,Zd,_w,mw,Qd,Cw,Ow,Kd,Dw,bw,S3,Bs,Vd,Rw,Pw,Xd,yw,ww,T3,ge,NA=`<code class="language-go">mux <span class="token operator">:=</span> http<span class="token punctuation">.</span><span class="token function">NewServeMux</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
mux<span class="token punctuation">.</span><span class="token function">HandleFunc</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	w<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"greetings!&#92;n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
wrappedMux <span class="token operator">:=</span> <span class="token function">terribleSecurity</span><span class="token punctuation">(</span><span class="token function">RequestTimer</span><span class="token punctuation">(</span>mux<span class="token punctuation">)</span><span class="token punctuation">)</span>

s <span class="token operator">:=</span> http<span class="token punctuation">.</span>Server<span class="token punctuation">&#123;</span>
	Addr<span class="token punctuation">:</span>         <span class="token string">":8080"</span><span class="token punctuation">,</span>
	ReadTimeout<span class="token punctuation">:</span>  <span class="token number">3</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">,</span>
	WriteTimeout<span class="token punctuation">:</span> <span class="token number">5</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">,</span>
	IdleTimeout<span class="token punctuation">:</span>  <span class="token number">100</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">,</span>
	Handler<span class="token punctuation">:</span>      wrappedMux<span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span></code>`,h3,H3,M3,N3,Ut,zt,Yd,Sw,x3,ja,Tw,j3,na,xA=`<code class="language-go">helloHandler <span class="token operator">:=</span> <span class="token keyword">func</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	w<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"Hello!&#92;n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
chain <span class="token operator">:=</span> alice<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>terribleSecurity<span class="token punctuation">,</span> RequestTimer<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ThenFunc</span><span class="token punctuation">(</span>helloHandler<span class="token punctuation">)</span>
mux<span class="token punctuation">.</span><span class="token function">handle</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">,</span> chain<span class="token punctuation">)</span></code>`,L3,A3,W3,Rs,hw,$d,Hw,Mw,gd,Nw,xw,B3,In,jw,sa,Lw,Aw,nk,Ww,Bw,sk,qw,Fw,q3,F3,J3,G3,Zt,Qt,tk,Jw,I3,U3,z3,La,qs,ta,Aa,uS,Gw,Iw,Uw,ea,zw,Z3,Q3,K3;return{c(){ua=o("br"),uk=u(),ia=o("p"),kv=e("본 글은 Golang을 공부하며 주요 내용이라 생각되는 것들을 기록해둔 자료이며, Ubuntu 22.04 LTS 기준으로 작성되었습니다."),ik=u(),dk=o("br"),kk=o("br"),fk=u(),Xs=o("h2"),Ys=o("a"),no=o("span"),fv=e("Introduction"),Ek=u(),vk=o("hr"),_k=u(),$s=o("p"),Ev=e(`Go의 표준 라이브러리는 여러 장점이 있다.
Python의 라이브러리 철학인 `),so=o("em"),vv=e("“batteries included”"),_v=e(` 처럼, 서비스를 빌드하기 위해 필요한 다양한 도구를 제공한다.
Go는 비교적 최신 언어인 만큼, 현대 프로그래밍 환경에서 직면하는 문제에 초점을 맞춘 라이브러리를 제공한다.`),mk=u(),w=o("p"),mv=e(`이 장에서 모든 표준 라이브러리 패키지들을 다룰 수 없고, 그럴 필요도 없다.
표준 라이브러리에 대한 다양한 정보들과 `),le=o("a"),Cv=e("문서"),Ov=e(`가 있으니, 여기를 참조하면 될 것이다.
이 포스트에서는 몇 개의 가장 중요한 패키지, 그리고 이들의 디자인적인 측면이나 사용 방법을 알아볼 것이다.
`),to=o("code"),Dv=e("errors"),bv=e(", "),eo=o("code"),Rv=e("sync"),Pv=e(", "),ao=o("code"),yv=e("context"),wv=e(", "),oo=o("code"),Sv=e("testing"),Tv=e(", "),po=o("code"),hv=e("reflect"),Hv=e(", "),lo=o("code"),Mv=e("unsafe"),Nv=e(` 등 패키지들은 각각의 챕터에서 집중적으로 다루었거나 다룰 예정이다.
이 챕터에서는 I/O, 시간, JSON, HTTP 등을 지원하는 패키지에 대해 알아볼 것이다.`),Ck=u(),Ok=o("br"),Dk=o("br"),bk=u(),gs=o("h2"),nt=o("a"),co=o("span"),xv=e("io and Friends"),Rk=u(),Pk=o("hr"),yk=u(),on=o("p"),jv=e(`실용적인 프로그램을 데이터를 읽고 쓸 수 있어야 한다.
Go의 입/출력 철학은 `),ro=o("code"),Lv=e("io"),Av=e(` 패키지에서 찾아볼 수 있다.
특히 이 패키지에 정의된 `),uo=o("code"),Wv=e("io.Reader"),Bv=e("와 "),io=o("code"),qv=e("io.Writer"),Fv=e("는 각각 Go에서 두 번째, 세 번째로 많이 사용되는 인터페이스일 것이다. (첫 번째는 "),ko=o("code"),Jv=e("error"),Gv=e("이다)"),wk=u(),Sk=o("br"),Tk=u(),xs=o("p"),fo=o("code"),Iv=e("io.Reader"),Uv=e("와 "),Eo=o("code"),zv=e("io.Writer"),Zv=e("는 모두 한 개의 메소드를 정의한다."),hk=u(),ce=o("pre"),Hk=u(),X=o("p"),vo=o("code"),Qv=e("io.Writer"),Kv=e("의 "),_o=o("code"),Vv=e("Write()"),Xv=e(` 메소드는 바이트 덩어리를 파라미터로 받고, 바이트의 수와 에러 발생 여부를 반환한다.
`),mo=o("code"),Yv=e("io.Reader"),$v=e("의 "),Co=o("code"),gv=e("Read()"),n5=e(` 메소드는 좀 더 신기하다.
리턴 파라미터로 값을 반환하기보다는 입력 파라미터로 보낸 값을 변경한다.
최대 `),Oo=o("code"),s5=e("len(p)"),t5=e(" 바이트만큼의 데이터가 슬라이스에 쓰일 것이고, 기록된 바이트의 수와 에러 여부가 반환된다."),Mk=u(),Nk=o("br"),xk=u(),os=o("p"),e5=e("사실 "),Do=o("code"),a5=e("io.Reader"),o5=e("의 "),bo=o("code"),p5=e("Read()"),l5=e(" 메소드는 아래와 같이 정의되는 것이 직관적일 것이다."),jk=u(),re=o("pre"),Lk=u(),ps=o("p"),c5=e("하지만 "),Ro=o("code"),r5=e("io.Reader"),u5=e(`가 기존 방식으로 정의되는 데에는 이유가 있다.
`),Po=o("code"),i5=e("io.Reader"),d5=e("를 사용하는 함수를 작성하여 이해해보도록 하자."),Ak=u(),ue=o("pre"),Wk=u(),da=o("p"),k5=e("위 예제에서 주목할 점들이 있다."),Bk=u(),hn=o("ol"),yo=o("li"),Y=o("p"),f5=e("버퍼를 한 번 생성하고 "),wo=o("code"),E5=e("r.Read()"),v5=e(`를 호출할 때마다 재사용할 것이다.
이러한 방식을 쓰면 크기가 클 수도 있는 데이터에 대해 한 번의 메모리 할당으로 값을 읽어올 수 있다.
만약 `),So=o("code"),_5=e("Read()"),m5=e(" 메소드가 "),To=o("code"),C5=e("[]byte"),O5=e("를 리턴하게끔 작성되어 있다면, 매번 함수를 호출할 때마다 새롭게 메모리 할당을 할 것이고, 가비지 컬렉터가 할 일이 많아질 것이다."),D5=o("br"),b5=e(`
추후 이렇게 낭비적인 할당을 줄이고 싶다면, 프로그램이 실행될 때 버퍼 풀을 생성해 놓는 방법도 있다.
함수가 실행될 때 해당 버퍼 풀에서 버퍼를 가져와 사용하고, 끝나면 되돌려 놓는 식이다.
`),ho=o("code"),R5=e("io.Reader"),P5=e("에 slice를 보낼 수 있기 떄문에 메모리 할당을 개발자의 몫으로 남겨둘 수 있다."),y5=u(),Ho=o("li"),ls=o("p"),Mo=o("code"),w5=e("r.Read()"),S5=e("에서 반환된 "),No=o("code"),T5=e("n"),h5=e(`값을 사용하여 버퍼에 바이트가 얼마나 많이 기록되었는지 확인하고,
`),xo=o("code"),H5=e("buf"),M5=e(" slice의 subslice를 이터레이션하여 읽어온 데이터를 처리할 수 있다."),N5=u(),jo=o("li"),Hn=o("p"),Lo=o("code"),x5=e("r.Read()"),j5=e("의 리턴 타입 중 error로 "),Ao=o("code"),L5=e("io.EOF"),A5=e("를 반환한 경우("),Wo=o("code"),W5=e("io.EOF"),B5=e(`는 실제로 에러가 아니다), 읽어올 데이터가 끝났음을 의미한다.
위 예제에서는 `),Bo=o("code"),q5=e("io.EOF"),F5=e("가 반환될 시 처리를 끝내고 결과물을 리턴한다."),J5=u(),qo=o("li"),J=o("p"),Fo=o("code"),G5=e("io.Reader"),I5=e(`에는 특이사항이 있다. 대부분의 함수 또는 메소드에 error 리턴값이 있다면, 오류가 아닌 값을 처리하기 전에 에러를 먼저 확인할 것이다.
`),Jo=o("code"),U5=e("Read()"),z5=e("를 사용할때는 데이터 스트림의 끝 또는 예기치 않은 오류가 발생하기 전에 반환된 바이트가 있을 수 있기 떄문에 이와 반대로 한다."),Z5=o("br"),Q5=e(`
만약 `),Go=o("code"),K5=e("io.Reader"),V5=e("가 예상치 못하게 끝난다면 다른 종류의 sentinel error("),Io=o("code"),X5=e("io.ErrUnexpectedEOF"),Y5=e(`)가 반환될 것이다.
이처럼 예측하지 못한 상태를 나타내는 에러는 `),Uo=o("code"),$5=e("Err"),g5=e("로 시작한다."),qk=u(),Fk=o("br"),Jk=u(),pn=o("p"),n_=e("이렇듯 "),zo=o("code"),s_=e("io.Reader"),t_=e("와 "),Zo=o("code"),e_=e("io.Writer"),a_=e(` 인터페이스가 간단하기 때문에, 여러 가지 방법으로 충족시킬 수 있다.
`),Qo=o("code"),o_=e("strings.NewReader()"),p_=e(" 함수를 사용하여 문자열로부터 "),Ko=o("code"),l_=e("io.Reader"),c_=e("를 생성시킬 수도 있다."),Gk=u(),ie=o("pre"),Ik=u(),mn=o("p"),Vo=o("code"),r_=e("countLetters"),u_=e(" 함수가 파라미터로 "),Xo=o("code"),i_=e("io.Reader"),d_=e("를 사용하므로, "),Yo=o("code"),k_=e("countLetters"),f_=e(` 함수를 써서 gzip으로 압축된 영문자를 카운트할 수도 있다.
진짜 되는지 해보자. 먼저 파일명을 파라미터로 받아 `),$o=o("code"),E_=e("*gzip.Reader"),v_=e("를 반환하는 함수를 작성해준다."),Uk=u(),de=o("pre"),zk=u(),G=o("p"),__=e(`함수의 구조가 그다지 어렵지는 않다.
먼저 `),go=o("code"),m_=e("os.Open()"),C_=e(" 함수로 "),np=o("code"),O_=e("*os.File"),D_=e(` 인스턴스를 만들고 에러 검사를 한다.
그 후 `),sp=o("code"),b_=e("gzip.NewReader()"),R_=e(" 함수를 호출하여 "),tp=o("code"),P_=e("*gzip.Reader"),y_=e(` 인스턴스를 생성한다.
리턴 값들은 `),ep=o("code"),w_=e("*gzip.Reader"),S_=e(" 인스턴스, 생성된 인스턴스들을 제거하는 closure, 그리고 에러 변수이다."),Zk=u(),Cn=o("p"),ap=o("code"),T_=e("*gzip.Reader"),h_=e(" 인스턴스는 "),op=o("code"),H_=e("*strings.Reader"),M_=e("처럼 "),pp=o("code"),N_=e("io.Reader"),x_=e("를 충족시키기 때문에 "),lp=o("code"),j_=e("countLettters()"),L_=e(" 함수에서 사용할 수 있다."),Qk=u(),ke=o("pre"),Kk=u(),Vk=o("br"),Xk=u(),N=o("p"),A_=e("읽기/쓰기를 위한 표준 인터페이스가 있기 때문에, "),cp=o("code"),W_=e("io.Reader"),B_=e("와 "),rp=o("code"),q_=e("io.Writer"),F_=e("에서 데이터를 복사하는 표준 함수 "),up=o("code"),J_=e("io.Copy()"),G_=e("도 "),ip=o("code"),I_=e("io"),U_=e(` 패키지에 존재한다.
기존 `),dp=o("code"),z_=e("io.Reader"),Z_=e("와 "),kp=o("code"),Q_=e("io.Writer"),K_=e("인스턴스에 새로운 기능을 추가하기 위한 다른 표준 함수들도 있다."),Yk=u(),cs=o("ul"),rs=o("li"),fp=o("code"),V_=e("io.MultiReader"),X_=e(" : 여러 개의 "),Ep=o("code"),Y_=e("io.Reader"),$_=e(" 인스턴스로부터 잇따라 데이터를 읽을 수 있는 "),vp=o("code"),g_=e("io.Reader"),n0=e(" 인스턴스를 반환한다."),s0=u(),st=o("li"),_p=o("code"),t0=e("io.LimitReader"),e0=e(" : 명시된 수 만큼의 바이트만 읽을 수 있는 "),mp=o("code"),a0=e("io.Reader"),o0=e(" 인스턴스를 반환한다."),p0=u(),us=o("li"),Cp=o("code"),l0=e("io.MultiWriter"),c0=e(" : 동시에 여러 "),Op=o("code"),r0=e("io.Writer"),u0=e("에 데이터를 쓸 수 있는 "),Dp=o("code"),i0=e("io.Writer"),d0=e(" 인스턴스를 반환한다."),$k=u(),is=o("p"),k0=e("표준 라이브러리 내의 다른 패키지에서는 "),bp=o("code"),f0=e("io.Reader"),E0=e("와 "),Rp=o("code"),v0=e("io.Writer"),_0=e(`와 같이 사용할 수 있는 타입이나 함수들을 제공한다.
몇 개는 이미 봤지만 압축 알고리즘, 아카이브, 암호화, 버퍼, byte slice, 문자열 등 다양하게 제공하고 있다.`),gk=u(),nf=o("br"),sf=u(),Xn=o("p"),Pp=o("code"),m0=e("io"),C0=e(" 패키지에는 "),yp=o("code"),O0=e("io.Closer"),D0=e("나 "),wp=o("code"),b0=e("io.Seeker"),R0=e("등, 또다른 단일 메소드 인터페이스가 있다."),tf=u(),fe=o("pre"),ef=u(),On=o("p"),Sp=o("code"),P0=e("os.File"),y0=e("과 같이, 읽기나 쓰기가 끝나면 정리를 해줘야 하는 타입들은 "),Tp=o("code"),w0=e("io.Closer"),S0=e(`를 충족시킨다.
일반적으로 `),hp=o("code"),T0=e("Close()"),h0=e(" 메소드는 "),Hp=o("code"),H0=e("defer"),M0=e("를 통해 호출된다."),af=u(),Ee=o("pre"),of=u(),Mn=o("p"),N0=e("만약 리소스를 반복문 내에서 여는 경우, "),Mp=o("code"),x0=e("defer"),j0=e(`를 이용하지 않는 것이 좋다.
반복문 내에서 열린 리소스는 이터레이션의 끝에서 닫아주는 게 좋겠지만, `),Np=o("code"),L0=e("defer"),A0=e(`는 함수가 끝날 때 실행된다.
따라서 이터레이션의 끝 부분이나 함수가 끝날 수도 있는 에러가 발생할 만한 부분에 `),xp=o("code"),W0=e("Close()"),B0=e("를 호출해 주는 게 좋다."),pf=u(),H=o("p"),jp=o("code"),q0=e("io.Seeker"),F0=e(` 인터페이스는 리소스에 임의 접근(random access) 하기 위해 사용된다.
이 때 파라미터 `),Lp=o("code"),J0=e("whence"),G0=e("에 유효한 값은 상수 "),Ap=o("code"),I0=e("io.SeekStart"),U0=e(", "),Wp=o("code"),z0=e("io.SeekCurrent"),Z0=e(", "),Bp=o("code"),Q0=e("io.SeekEnd"),K0=e(`이다.
사실 이건 제작자 실수인게, `),qp=o("code"),V0=e("whence"),X0=e("는 타입을 새로 생성하여 명확히 해줬어야 하는데 "),Fp=o("code"),Y0=e("whence"),$0=e("는 int 타입이다."),lf=u(),cf=o("br"),rf=u(),v=o("p"),Jp=o("code"),g0=e("io"),n6=e(" 패키지는 앞서 보았던 "),Gp=o("code"),s6=e("io.Reader"),t6=e(", "),Ip=o("code"),e6=e("io.Writer"),a6=e(", "),Up=o("code"),o6=e("io.Closer"),p6=e(", "),zp=o("code"),l6=e("io.Seeker"),c6=e(`, 이렇게 네 개의 인터페이스를 여러 방식으로 합친 인터페이스를 정의한다.
`),Zp=o("code"),r6=e("io.ReadCloser"),u6=e(", "),Qp=o("code"),i6=e("io.ReadSeeker"),d6=e(", "),Kp=o("code"),k6=e("io.ReadWriteCloser"),f6=e(", "),Vp=o("code"),E6=e("io.ReadWriteSeeker"),v6=e(", "),Xp=o("code"),_6=e("io.ReadWriter"),m6=e(", "),Yp=o("code"),C6=e("io.WriteCloser"),O6=e(", "),$p=o("code"),D6=e("io.WriteSeeker"),b6=e(` 등이 있다.
이런 인터페이스들은 함수가 데이터에 대해 어떤 프로세스를 하는지 정확히 명시하기 위해 사용된다.`),uf=u(),tt=o("p"),R6=e("이를테면 파라미터의 타입으로 "),gp=o("code"),P6=e("os.File"),y6=e(`를 써주는 것보다는, 그 파라미터를 가지고 뭘 할건지 명시하기 위헤 인터페이스를 사용하는 것이 좋다.
또한 자체 데이터 소스나 싱크를 작성하는 경우, 코드가 이러한 인터페이스와 호환되도록 하는 것이 좋다.`),df=u(),b=o("p"),nl=o("code"),w6=e("ioutil"),S6=e(" 패키지는 "),sl=o("code"),T6=e("io.Reader"),h6=e(` 인스턴스에 대한 다양한 도구들을 제공한다.
byte slice로 한 번에 읽기, 파일 읽기 및 쓰기, 임시 파일 작업 등 보다 간단한 도구들이 포함된다.
이를테면 `),tl=o("code"),H6=e("io.Reader"),M6=e(", "),el=o("code"),N6=e("io.Writer"),x6=e(", "),al=o("code"),j6=e("bufio.Scanner"),L6=e(` 등은 크기가 큰 데이터를 처리하는데 용이한 편이지만,
`),ol=o("code"),A6=e("ioutil.ReadAll"),W6=e(", "),pl=o("code"),B6=e("ioutil.ReadFile"),q6=e(", "),ll=o("code"),F6=e("ioutil.WriteFile"),J6=e("은 보다 작은 데이터를 처리하는데 유용하다."),kf=u(),R=o("p"),cl=o("code"),G6=e("ioutil"),I6=e(` 패키지에는 유용한 함수들이 더 있다.
가령 `),rl=o("code"),U6=e("io.Reader"),z6=e("는 충족하지만 "),ul=o("code"),Z6=e("io.Closer"),Q6=e("는 충족하지 않는 인스턴스("),il=o("code"),K6=e("strings.Reader"),V6=e(` 등)가 있고,
이를 `),dl=o("code"),X6=e("io.ReadCloser"),Y6=e(`를 파라미터로 받는 함수에 넘겨야 한다고 가정해보자.
이 때 `),kl=o("code"),$6=e("io.Reader"),g6=e("를 "),fl=o("code"),n9=e("ioutil.NopCloser()"),s9=e(" 함수로 보내면 "),El=o("code"),t9=e("io.ReadCloser()"),e9=e(" 타입을 반환할 것이고, 이걸 해당 함수의 파라미터로 넘기면 된다."),ff=u(),et=o("p"),a9=e("실제로 "),vl=o("code"),o9=e("ioutil.NopCloser()"),p9=e("의 구현을 들여다보면 생각보다 단순하다."),Ef=u(),ve=o("pre"),vf=u(),ka=o("p"),l9=e(`위 구현을 보면 Go에서 타입에 메소드를 추가하는 패턴을 확인할 수 있다.
인터페이스를 충족할 수 있게끔 타입에 메소드를 추가해주고 싶다면, 이렇게 Embedded type 패턴을 사용해주면 된다.`),_f=u(),fa=o("blockquote"),_e=o("p"),c9=e(`함수에서 인터페이스를 리턴하지 않는다는 규칙이 기억날 것이다.
`),_l=o("code"),r9=e("ioutil.NopCloser()"),u9=e(` 함수는 이를 위반하긴 한다.
하지만 표준 라이브러리에 속하는 인터페이스끼리의 변환을 해주는 간단한 어댑터 역할만 하기 때문에 예외로 두고 넘어가 주자.`),mf=u(),Cf=o("br"),Of=o("br"),Df=u(),at=o("h2"),ot=o("a"),ml=o("span"),i9=e("time"),bf=u(),Rf=o("hr"),Pf=u(),Nn=o("p"),d9=e("다른 언어들처럼 Go에도 시간 연산을 하는 라이브러리인 "),Cl=o("code"),k9=e("time"),f9=e(` 패키지가 있다.
시간을 나타내는 주요 타입이 두 가지 있는데, 바로 `),Ol=o("code"),E9=e("time.Duration"),v9=e("과 "),Dl=o("code"),_9=e("time.Time"),m9=e("이다."),yf=u(),ln=o("p"),C9=e("시각 사이의 시간은 "),bl=o("code"),O9=e("time.Duration"),D9=e("으로 표현되며, 이는 "),Rl=o("code"),b9=e("int64"),R9=e(` 기반이다.
Go의 시간 최소단위는 나노초(ns)이고, `),Pl=o("code"),P9=e("time"),y9=e(" 패키지에서는 "),yl=o("code"),w9=e("time.Duration"),S9=e(` 타입의
나노초(nanosecond), 마이크로초(microsecond), 밀리초(milisecond), 초(second), 분(minute), 시간(hour) 상수를 정의한다.`),wf=u(),Ea=o("p"),T9=e("예를 들어, 2시간 30분은 아래와 같이 정의한다."),Sf=u(),me=o("pre"),Tf=u(),pt=o("p"),h9=e("이러한 상수들을 사용하면 "),wl=o("code"),H9=e("time.Duration"),M9=e(" 타입을 readable하고 type-safe하게 만들어준다."),hf=u(),Hf=o("br"),Mf=u(),xn=o("p"),N9=e("Go는 "),Sl=o("code"),x9=e("time,ParseDuration()"),j9=e(" 함수에 특정한 스트링 포맷이나 숫자들의 배열을 넘겨서 "),Tl=o("code"),L9=e("time.Duration"),A9=e(` 타입으로 파싱할 수 있다.
이에 대한 설명은 `),Ce=o("a"),W9=e("표준 라이브러리 문서"),B9=e(`에 작성되어 있다.
아래 내용은 원문인데, 번역하는 것보다 영어로 읽는게 더 편할것 같아서 따로 번역하지는 않았다.`),Nf=u(),va=o("blockquote"),hl=o("p"),q9=e(`A duration string is a possibly signed sequence of decimal numbers,
each with optional fraction and a unit suffix, such as “300ms”, “-1.5h” or “2h45m”.
Valid time units are “ns”, “us” (or “µs”), “ms”, “s”, “m”, “h”.`),xf=u(),P=o("p"),Hl=o("code"),F9=e("time.Duration"),J9=e("에는 여러 가지 메소드들이 정의되어 있고, "),Ml=o("code"),G9=e("fmt.Stringer"),I9=e(` 인터페이스를 충족시킨다.
따라서 `),Nl=o("code"),U9=e("fmt.Stringer"),z9=e("에 정의된 "),xl=o("code"),Z9=e("String()"),Q9=e(` 메소드를 호출하면 formatted string을 반환받는다.
또한 `),jl=o("code"),K9=e("Truncate"),V9=e("나 "),Ll=o("code"),X9=e("Round"),Y9=e(" 메소드를 쓰면 "),Al=o("code"),$9=e("time.Duration"),g9=e("을 지정된 "),Wl=o("code"),n4=e("time.Duration"),s4=e(" 단위만큼 반올림하거나 자른다."),jf=u(),Lf=o("br"),Af=u(),jn=o("p"),t4=e("특정한 시각의 경우 "),Bl=o("code"),e4=e("time.Time"),a4=e(` 타입으로 표현되는데, 시간대(time zone)를 명시해 주어야 한다.
또한 `),ql=o("code"),o4=e("Time.Now()"),p4=e(" 함수로 현재 로컬 시간인 "),Fl=o("code"),l4=e("time.Time()"),c4=e(" 인스턴스를 얻을 수 있다."),Wf=u(),Dn=o("p"),Jl=o("code"),r4=e("time.Time"),u4=e(` 인스턴스는 시간대에 대한 정보까지 포함하기 때문에,
두 개의 `),Gl=o("code"),i4=e("time.Time"),d4=e(" 인스턴스가 같은 시간대를 나타내더라도 "),Il=o("code"),k4=e("=="),f4=e(` 연산자를 사용하면 제대로 된 결과가 나타나지 않을 수 있다.
`),Ul=o("code"),E4=e("Equal()"),v4=e(" 메소드를 사용하면, 표준 시간대를 기준으로 비교해준다."),Bf=u(),L=o("p"),zl=o("code"),_4=e("time.Parse()"),m4=e(" 함수는 "),Zl=o("code"),C4=e("string"),O4=e("을 "),Ql=o("code"),D4=e("time.Time"),b4=e(" 타입으로 변환해주고, "),Kl=o("code"),R4=e("Format()"),P4=e(" 메소드는 "),Vl=o("code"),y4=e("time.Time"),w4=e(" 타입을 "),Xl=o("code"),S4=e("string"),T4=e("으로 변환해준다."),qf=u(),Oe=o("pre"),Ff=u(),_a=o("p"),h4=e("출력 결과는 다음과 같다."),Jf=u(),De=o("pre"),Gf=u(),lt=o("p"),H4=e(`이러한 날짜나 시간 포맷은 유용하게 사용되게끔 의도되었지만, 기억하기 힘들기 때문에 사용하려 할 때마다 찾아봐야 한다는 단점이 있다.
다행히도 주로 사용되는 날짜 및 시각 포맷은 `),Yl=o("code"),M4=e("time"),N4=e(" 패키지에서 상수로 주어진다."),If=u(),k=o("p"),$l=o("code"),x4=e("time.Duration"),j4=e("처럼, "),gl=o("code"),L4=e("time.Time"),A4=e("에도 "),nc=o("code"),W4=e("Day"),B4=e(", "),sc=o("code"),q4=e("Month"),F4=e(", "),tc=o("code"),J4=e("Year"),G4=e(", "),ec=o("code"),I4=e("Hour"),U4=e(", "),ac=o("code"),z4=e("Minute"),Z4=e(", "),oc=o("code"),Q4=e("Second"),K4=e(", "),pc=o("code"),V4=e("Weekday"),X4=e(", "),lc=o("code"),Y4=e("Clock"),$4=e(` 등 시각의 일부분을 추출할 수 있는 메소드가 존재한다.
이 중 `),cc=o("code"),g4=e("Clock()"),n8=e(" 메소드는 시, 분, 초를 각각의 "),rc=o("code"),s8=e("int"),t8=e("로 반환하고, "),uc=o("code"),e8=e("Date()"),a8=e("는 연, 월, 일을 각각의 "),ic=o("code"),o8=e("int"),p8=e(`로 반환한다.
또한 `),dc=o("code"),l8=e("time.Time"),c8=e(" 인스턴스는 "),kc=o("code"),r8=e("After"),u8=e(", "),fc=o("code"),i8=e("Before"),d8=e(", "),Ec=o("code"),k8=e("Equal"),f8=e(" 메소드를 통해 다른 인스턴스와 비교할 수 있다."),Uf=u(),E=o("p"),vc=o("code"),E8=e("time.Time"),v8=e("의 "),_c=o("code"),_8=e("Sub()"),m8=e(" 메소드는 두 시각 사이의 경과 시간을 "),mc=o("code"),C8=e("time.Duration"),O8=e(`으로 반환하며,
`),Cc=o("code"),D8=e("time.Time"),b8=e("의 "),Oc=o("code"),R8=e("Add()"),P8=e(" 메소드는 "),Dc=o("code"),y8=e("time.Duration"),w8=e("을 파라미터로 받아 해당 시간만큼 더해진 시각의 "),bc=o("code"),S8=e("time.Time"),T8=e(` 인스턴스를 반환한다.
`),Rc=o("code"),h8=e("time.Time"),H8=e("의 "),Pc=o("code"),M8=e("AddDate()"),N8=e(" 메소드는 연, 월, 일을 각각 입력받아 그만큼 더해진 날짜의 "),yc=o("code"),x8=e("time.Time"),j8=e(` 인스턴스를 반환한다.
`),wc=o("code"),L8=e("time.Duration"),A8=e(" 인스턴스를 인자로 주고, 앞서 언급한 "),Sc=o("code"),W8=e("Truncate()"),B8=e("와 "),Tc=o("code"),q8=e("Round()"),F8=e(" 메소드를 사용할 수도 있다."),zf=u(),ds=o("p"),J8=e("이러한 메소드들은 모두 "),hc=o("em"),G8=e("value receiver"),I8=e("로 정의되었기 때문에, 원래의 "),Hc=o("code"),U8=e("time.Time"),z8=e(" 인스턴스를 변경하지 않는다."),Zf=u(),Qf=o("br"),Kf=o("br"),Vf=u(),ct=o("h3"),rt=o("a"),Mc=o("span"),Z8=e("Monotonic Time"),Xf=u(),ks=o("p"),Q8=e(`대부분의 OS에서는 두 종류의 시각을 기록하고 있다.
그중 `),Nc=o("em"),K8=e("wall clock"),V8=e("은 말 그대로 현재 시각에 대응하는 것이며, "),xc=o("em"),X8=e("monotonic clock"),Y8=e(`은 컴퓨터가 켜진 시각으로부터 얼마만큼 시간이 흘렀는지를 의미한다.
두 종류의 시각을 기록하는 이유는, wall clock이 일정하게 증가하는 것이 아니기 때문이다.
서머타임(Daylight Saving Time), 윤초(leap seconds), Network Time Protocol의 업데이트로 인해 wall clock에는 오차가 생길 수 있으며,
이로 인해 타이머를 실행하거나 경과된 시간을 얻고자 할 때 문제가 생길 수 있다.`),Yf=u(),S=o("p"),$8=e("이러한 잠재적인 문제점을 해결하기 위해, Go에서는 "),jc=o("code"),g8=e("time.Now()"),n7=e("로 "),Lc=o("code"),s7=e("time.Time"),t7=e(` 인스턴스가 생성되거나 타이머가 설정될 때
monotonic time을 사용하여 경과 시간을 추적한다.
`),Ac=o("code"),e7=e("Sub()"),a7=e(" 메소드는 두 "),Wc=o("code"),o7=e("time.Time"),p7=e(" 인스턴스가 모두 monotonic time이 설정된 경우, monotonic time을 이용하여 "),Bc=o("code"),l7=e("time.Duration"),c7=e(`을 계산한다.
만약 그렇지 않다면 `),qc=o("code"),r7=e("Sub()"),u7=e(" 메소드는 인스턴스에 지정된 시간을 사용하여 "),Fc=o("code"),i7=e("time.Duration"),d7=e("을 계산한다."),$f=u(),gf=o("br"),n1=o("br"),s1=u(),ut=o("h3"),it=o("a"),Jc=o("span"),k7=e("Timers and Timeout"),t1=u(),cn=o("p"),f7=e("앞선 포스트에서 다루었듯, "),Gc=o("code"),E7=e("time"),v7=e(` 패키지에는 채널을 리턴하여 일정 시간이 지난 후 값이 출력되는 함수가 내장되어 있다.
`),Ic=o("code"),_7=e("time.After()"),m7=e(` 함수는 일정 시간이 지나면 값이 단 한번 출력되는 채널을 리턴한다.
반면 `),Uc=o("code"),C7=e("time.Tick()"),O7=e(" 함수에서 리턴되는 채널은 파라미터로 넘어온 "),zc=o("code"),D7=e("time.Duration"),b7=e(` 만큼의 시간이 흐를 때마다 값이 출력된다.
이러한 함수들은 시간 초과 및 반복 작업을 가능하게 함으로써 Go의 동시성을 지원한다.`),e1=u(),fs=o("p"),R7=e("다만 "),Zc=o("code"),P7=e("Time.Tick()"),y7=e(` 함수는 멈출 수 없고, 따라서 가비지 컬렉터에 의해 정리되지도 않는다.
그래서 `),Qc=o("code"),w7=e("Time.NewTicker()"),S7=e("를 사용하는데 이 함수는 채널을 닫거나 간격을 재설정하는 메소드를 함께 제공하니, 되도록 이 쪽을 선택하는 게 좋을 것 같다."),a1=u(),ma=o("p"),T7=e("위 함수들을 사용하는 예제가 따로 없길래 대충 짜보았다."),o1=u(),be=o("pre"),p1=u(),l1=o("br"),c1=o("br"),r1=u(),dt=o("h2"),kt=o("a"),Kc=o("span"),h7=e("encoding/json"),u1=u(),i1=o("hr"),d1=u(),Es=o("p"),H7=e(`REST API는 JSON을 주고받는 통신을 한다. 따라서 Go의 표준 라이브러리는 JSON과 Go 데이터 타입의 상호 변환을 지원한다.
`),Vc=o("em"),M7=e("marshaling"),N7=e("이란 Go 데이터 타입에서 인코딩된 JSON으로 변환하는 것을 의미하며, "),Xc=o("em"),x7=e("unmarshaling"),j7=e("이란 그 반대를 의미한다."),k1=u(),f1=o("br"),E1=o("br"),v1=u(),ft=o("h3"),Et=o("a"),Yc=o("span"),L7=e("Use Struct Tags to Add Metadata"),_1=u(),Ca=o("p"),A7=e("우리가 주문 관리 시스템을 만들고 있다고 가정하고, 아래 JSON 파일을 확인해보자."),m1=u(),Re=o("pre"),C1=u(),Oa=o("p"),W7=e("이제 이 타입과 대응되는 타입을 정의해 보자."),O1=u(),Pe=o("pre"),D1=u(),vs=o("p"),B7=e(`JSON으로 변환되는 struct임을 명시하기 위해서는 구조체에 필드를 입력해준 뒤 struct tag를 입력해줘야 한다.
struct tag는 backtick(`),$c=o("code"),q7=e("`"),F7=e(`)으로 문자열을 감싸는 구조이지만, 한 줄 이상 이어서 작성할 수 없다.
struct tag는 한 개 이상의 tag/value 쌍으로 이루어져 있으며, `),gc=o("code"),J7=e('tagName: "tagValue"'),G7=e("의 구조로 작성되며 공백으로 구분한다."),b1=u(),_s=o("p"),I7=e(`struct tag는 그냥 문자열이기 때문에, 컴파일러는 얘네가 제대로 작성되어 있는지 알 수가 없다.
다만 `),nr=o("code"),U7=e("go vet"),z7=e(` 명령어를 치면 검증할 수 있으며, 이러한 모든 필드들은 export된다.
다른 패키지와 마찬가지로, `),sr=o("code"),Z7=e("encoding/json"),Q7=e(" 패키지의 코드들은 구조체의 export되지 않은 필드에 접근할 수 없다."),R1=u(),ms=o("p"),K7=e("JSON을 처리하기 위해서는 태그명을 "),tr=o("code"),V7=e("json"),X7=e(`으로 지어서 구조체 필드와 연결되어야 하는 JSON 필드의 이름을 지정해주어야 한다.
만약 `),er=o("code"),Y7=e("json"),$7=e(` 태그를 지정하지 않으면 기본적으로 JSON 객체의 필드명과 구조체의 필드명을 매칭시킨다.
하지만 실제로는 필드명이 같다고 하더라도 struct tag를 명시해주는 것이 좋다.`),P1=u(),Ln=o("p"),g7=e("JSON을 구조체로 "),ar=o("em"),nm=e("unmarshaling"),sm=e("할 때 "),or=o("code"),tm=e("json"),em=e(` 태그가 명시되어있지 않으면, 필드가 매칭될때 대소문자를 구분하지 않는다.
반대로 구조체를 JSON으로 `),pr=o("em"),am=e("marshaling"),om=e("할 때 구조체 필드가 export되려면 첫 글자가 대문자일 수 밖에 없기 때문에, JSON 태그도 항상 대문자가 된다."),y1=u(),rn=o("p"),pm=e("만약 "),lr=o("em"),lm=e("marshaling"),cm=e(" 또는 "),cr=o("em"),rm=e("unmarshaling"),um=e("을 할 때 무시해야 하는 필드가 있다면 필드명으로 대시("),rr=o("code"),im=e("-"),dm=e(`)를 써주면 된다.
만약 필드가 비어있을 때 출력에서 제외되어야 하는 경우, 이름 뒤에 `),ur=o("code"),km=e(",omitempty"),fm=e(`를 추가한다.
이 때 필드가 비어있다는 것은 Zero value를 의미하는 것이 아니라, zero-length slice나 map 등이 이에 해당한다.`),w1=u(),Cs=o("p"),Em=e(`struct tag는 메타데이터를 사용하여 프로그램의 행동을 제어할 수 있게 해준다.
Java와 같은 다른 언어에서는 개발자들이 프로그램 요소에 주석을 달아
프로그램이 `),ir=o("em"),vm=e("어떤"),_m=e(" 처리를 하는 것에 대해 기술하는 것보다는 "),dr=o("em"),mm=e("어떻게"),Cm=e(" 처리되어야 할지 설명하도록 장려한다."),S1=u(),Da=o("p"),Om=e(`Java에서 주석을 달던 사람들은 무언가 잘못됐을 때, 특히 어떤 코드가 주석이 달려있음에도 어떤 역할을 하는지 이해하지 못할 때 당황하는 경향이 있다.
Go에서는 짧은 코드보단 명시적인 코드를 좋아한다.
struct tag는 자동으로 evaluate되지 않으며, 구조체 인스턴스가 함수로 전달될 때 처리된다.`),T1=u(),h1=o("br"),H1=o("br"),M1=u(),vt=o("h3"),_t=o("a"),kr=o("span"),Dm=e("Unmarshaling and Marshaling"),N1=u(),x1=o("hr"),j1=u(),y=o("p"),fr=o("code"),bm=e("encoding/json"),Rm=e(" 패키지의 "),Er=o("code"),Pm=e("json.Unmarshal()"),ym=e(" 함수는 "),vr=o("code"),wm=e("byte"),Sm=e("의 "),_r=o("code"),Tm=e("slice"),hm=e("를 "),mr=o("code"),Hm=e("struct"),Mm=e(`로 변환해준다.
아래 예제는 `),Cr=o("code"),Nm=e("data"),xm=e("라는 문자열 변수를 "),Or=o("code"),jm=e("struct"),Lm=e("를 위에서 확인한 "),Dr=o("code"),Am=e("Order"),Wm=e(" 구조체 타입으로 변환하는 예제이다."),L1=u(),ye=o("pre"),A1=u(),js=o("p"),br=o("code"),Bm=e("json.Unmarshal()"),qm=e(" 함수는 "),Rr=o("code"),Fm=e("io.Reader"),Jm=e(`처럼 데이터를 입력 파라미터에 생성한다.
이는 두 가지 이유가 있는데, 첫 번째는 쉽게 예상할 수 있듯 동일한 구조체를 재사용하여 효율적으로 메모리를 사용할 수 때문이다.
두 번째는 달리 다른 방법이 없기 때문이다.
Go에는 제네릭이 없기 때문에, 인스턴스로 만들 구조체의 타입을 지정할 방법이 달리 없다.
만약 Go에도 제네릭이 생긴다 해도, 메모리 사용의 이점때문에 이 방식이 그대로 사용되리라 예상된다.`),W1=u(),B1=o("br"),q1=u(),un=o("p"),Pr=o("code"),Gm=e("encoding/json"),Im=e(" 패키지의 "),yr=o("code"),Um=e("json.Marshal()"),zm=e(" 함수는 구조체 인스턴스를 다시 "),wr=o("code"),Zm=e("byte"),Qm=e("의 "),Sr=o("code"),Km=e("slice"),Vm=e(`인 JSON으로 변환해준다.
`),Tr=o("code"),Xm=e("json.Marshal()"),F1=u(),we=o("pre"),J1=u(),G1=o("br"),I1=o("br"),U1=u(),mt=o("h3"),Ct=o("a"),hr=o("span"),Ym=e("JSON, Readers, and Writers"),z1=u(),_=o("p"),Hr=o("code"),$m=e("json.Marshal()"),gm=e("와 "),Mr=o("code"),nC=e("json.Unmarshal()"),sC=e(" 함수는 "),Nr=o("code"),tC=e("[]byte"),eC=e(`를 사용한다.
또한 대부분의 데이터 소스와 싱크가 `),xr=o("code"),aC=e("io.Reader"),oC=e("와 "),jr=o("code"),pC=e("io.Writer"),lC=e(` 인터페이스를 충족시키는 것을 알고 있다.
그래서 `),Lr=o("code"),cC=e("ioutil.ReadAll()"),rC=e("을 통해 "),Ar=o("code"),uC=e("io.Reader"),iC=e("의 모든 내용을 "),Wr=o("code"),dC=e("[]byte"),kC=e("에 저장하여 "),Br=o("code"),fC=e("json.Unmarshal()"),EC=e(`을 사용할 수 있지만, 이 방식은 비효율적이다.
비슷하게 `),qr=o("code"),vC=e("json.Marshal()"),_C=e(" 함수를 통해 인메모리 "),Fr=o("code"),mC=e("[]byte"),CC=e(` 버퍼에 값을 쓰고, 해당 버퍼의 데이터를 네티워크나 디스크에 쓸 수 있다.
다만 그 경우 `),Jr=o("code"),OC=e("io.Writer"),DC=e("에 직접 데이터를 쓰는 편이 더 효율적일 것이다."),Z1=u(),$=o("p"),Gr=o("code"),bC=e("encoding/json"),RC=e(` 이러한 상황을 다루기 위한 두 가지 타입을 포함하고 있다.
바로 `),Ir=o("code"),PC=e("json.Decoder"),yC=e("와 "),Ur=o("code"),wC=e("json.Encoder"),SC=e(" 타입이며, 이 타입들은 "),zr=o("code"),TC=e("io.Reader"),hC=e(", "),Zr=o("code"),HC=e("io.Writer"),MC=e(` 인터페이스를 충족시키면서 읽기/쓰기를 할 수 있게 해준다.
간단한 예제를 확인해보자.`),Q1=u(),Se=o("pre"),K1=u(),V1=o("br"),X1=u(),D=o("p"),Qr=o("code"),NC=e("os.File"),xC=e(" 타입은 "),Kr=o("code"),jC=e("io.Writer"),LC=e("와 "),Vr=o("code"),AC=e("io.Reader"),WC=e(" 인터페이스를 모두 충족시키기 때문에, "),Xr=o("code"),BC=e("json.Decoder"),qC=e("와 "),Yr=o("code"),FC=e("json.Encodeer"),JC=e(`를 시연하는 데 사용해보자.
먼저 임시 파일 인스턴스를 만들어 `),$r=o("code"),GC=e("json.NewEncoder()"),IC=e(" 함수에 넘기면, 임시 파일에 대한 "),gr=o("code"),UC=e("json.Encoder"),zC=e(` 인스턴스를 생성한다.
그 후 `),nu=o("code"),ZC=e("Encode()"),QC=e(" 메소드를 호출할 때 "),su=o("code"),KC=e("toFile"),VC=e("을 넘기면 된다."),Y1=u(),Te=o("pre"),$1=u(),g1=o("br"),n2=u(),dn=o("p"),XC=e("이렇게 "),tu=o("code"),YC=e("toFile"),$C=e("을 임시 파일에 쓴 후 임시 파일을 다시 읽어들여서 "),eu=o("code"),gC=e("json.NewDecoder()"),nO=e(`로 보내고,
`),au=o("code"),sO=e("Decode()"),tO=e(" 메소드를 호출하여 "),ou=o("code"),eO=e("Person"),aO=e(" 타입의 변수로 불러올 것이다."),s2=u(),he=o("pre"),t2=u(),Ot=o("p"),oO=e("전체 예제는 "),He=o("a"),pO=e("여기"),lO=e("서 확인할 수 있다."),e2=u(),a2=o("br"),o2=o("br"),p2=u(),Dt=o("h3"),bt=o("a"),pu=o("span"),cO=e("Encoding and Decoding JSON Streams"),l2=u(),Os=o("p"),rO=e(`여러 개의 JSON 구조체를 한 번에 읽거나 쓰려면 어떻게 해야 할까?
이런 상황에서도 `),lu=o("code"),uO=e("json.Decoder"),iO=e("와 "),cu=o("code"),dO=e("json.Encoder"),kO=e("를 사용할 수 있다."),c2=u(),ba=o("p"),fO=e("아래와 같은 데이터가 있다고 해보자."),r2=u(),Me=o("pre"),u2=u(),Rt=o("p"),EO=e("우리의 예제에서 이 데이터는 "),ru=o("code"),vO=e("data"),_O=e(`라는 문자열로 저장되어 있다고 가정할 것이다.
다만 실제로 이 데이터는 파일이나 HTTP 요청의 데이터일 수도 있다.`),i2=u(),Pt=o("p"),mO=e("이 데이터를 "),uu=o("code"),CO=e("t"),OO=e("라는 구조체의 타입의 인스턴스로 만들 것이다."),d2=u(),Ne=o("pre"),k2=u(),f2=o("br"),E2=u(),kn=o("p"),DO=e("이전처럼 "),iu=o("code"),bO=e("json.Decoder"),RO=e(`를 데이터 소스로 초기화할 것이다.
다만 이번에는 `),du=o("code"),PO=e("json.Decoder"),yO=e("의 "),ku=o("code"),wO=e("More()"),SO=e(" 메소드를 "),fu=o("code"),TO=e("for"),hO=e(` 루프 조건으로 사용할 것이다.
이렇게 하면 한 번에 한 개의 JSON 객체를 데이터로 읽어올 수 있게 된다.`),v2=u(),xe=o("pre"),_2=u(),yt=o("p"),HO=e(`이 예제의 데이터 스트림에는 배열로 감싸지지 않은 여러 개의 JSON 객체들이 있다.
이들을 메모리에 한 번에 로드하지 않고, 위 예제처럼 `),Eu=o("code"),MO=e("json.Decoder"),NO=e(`로 단일 객체를 한 개씩 읽으면
성능이 향상되고 메모리 사용량이 줄어든다는 장점이 있다.`),m2=u(),C2=o("br"),O2=u(),Yn=o("p"),vu=o("code"),xO=e("json.Encoder"),jO=e(`로 여러 개의 값을 쓰는 것은 한 개의 값을 쓰는 것과 유사하다.
예제에서는 `),_u=o("code"),LO=e("bytes.Buffer"),AO=e("에 값을 쓸 것이지만, "),mu=o("code"),WO=e("io.Writer"),BO=e(" 인터페이스를 충족시킨다면 어느 타입이든 사용할 수 있다."),D2=u(),je=o("pre"),b2=u(),R2=o("br"),P2=o("br"),y2=u(),wt=o("h3"),St=o("a"),Cu=o("span"),qO=e("Custon JSON Parsing"),w2=u(),An=o("p"),FO=e(`JSON 파싱 라이브러리의 기본적인 기능으로도 사용하는 데 문제는 없겠지만, 종종 오버라이드하여 사용해야할 때도 있을 것이다.
`),Ou=o("code"),JO=e("time.Time"),GO=e(`은 RFC339 포맷은 기본적으로 JSON에서 RFC339 포맷을 사용하는데, 다른 시간 포맷을 사용해야 할 수도 있다.
그러한 경우 `),Du=o("code"),IO=e("json.Marshaler"),UO=e("와 "),bu=o("code"),zO=e("json.Unmarshaler"),ZO=e(" 인터페이스를 충족시키는 새로운 타입을 생성하면 된다."),S2=u(),Le=o("pre"),T2=u(),g=o("p"),Ru=o("code"),QO=e("time.Time"),KO=e(" 구조체 타입을 "),Pu=o("code"),VO=e("RFC822ZTime"),XO=e(" 타입에 Embedding하였기 때문에 기존 "),yu=o("code"),YO=e("time.Time"),$O=e(`의 메소드에 접근할 수 있다.
또한 value receiver로 선언된 `),wu=o("code"),gO=e("MarshalJSON()"),nD=e(` 메소드에서는 시간 값을 읽기만 하지만,
pointer receiver로 선언된 `),Su=o("code"),sD=e("UnmarshalJSON()"),tD=e(" 메소드에서는 시간 값을 변경한다."),h2=u(),H2=o("br"),M2=u(),Ds=o("p"),eD=e("이렇게 하여, 앞선 예제의 "),Tu=o("code"),aD=e("Order"),oD=e(" 타입의 "),hu=o("code"),pD=e("DateOrdered"),lD=e(" 필드를 RFC822 포맷으로 사용 가능하게끔 수정해주었다."),N2=u(),Ae=o("pre"),x2=u(),Tt=o("p"),cD=e("전체 예제는 "),We=o("a"),rD=e("여기"),uD=e("서 확인할 수 있다."),j2=u(),L2=o("br"),A2=u(),I=o("p"),iD=e(`사실 이러한 방식에는 원칙적으로는 문제가 있다.
우리는 JSON에 작성된 날짜 포맷을 날짜 자료구조 필드값으로 변환하는데, 이는 `),Hu=o("code"),dD=e("encoding/json"),kD=e(` 방식의 단점이다.
`),Mu=o("code"),fD=e("RFC822ZTime"),ED=e("가 아닌 "),Nu=o("code"),vD=e("Order"),_D=e("타입이 "),xu=o("code"),mD=e("json.Marshaler"),CD=e("나 "),ju=o("code"),OD=e("json.Unmarshaler"),DD=e(` 인터페이스를 충족시키게끔 할 수도 있었을 것이다.
다만 그렇게 하면 모든 필드를 직접 처리하도록 코드를 작성해주어야 한다. 직접 처리할 필요가 없는 필드에 대해서도 말이다.
struct tag는 함수가 특정 필드만 파싱하도록 명시할 수 없기 때문에, 필드에 대한 타입을 직접 생성해주어야 하는 것이다.`),W2=u(),Ra=o("p"),bD=e(`JSON을 파싱하는 코드의 양을 제한하려면 두 개의 각기 다른 구조체를 정의해야 한다.
하나는 JSON으로 변환하거나 변환되는 것이며, 다른 하나는 데이터 처리에 관련된 것이다.
읽기를 할 때는 JSON을 JSON 인식 유형으로 읽은 다음, 이를 다른 유형으로 복사한다.
반면 JSON으로 쓰기를 하려면 이를 반대로 해주면 된다.
이 방식은 코드에 중복성이 생기기는 하지만, 비즈니스 로직이 통신 프로토콜에 의존하는 것을 방지해준다.`),B2=u(),$n=o("p"),Lu=o("code"),RD=e("json.Marshal()"),PD=e("이나 "),Au=o("code"),yD=e("json.Unmarshal()"),wD=e(" 함수에 "),Wu=o("code"),SD=e("map[string]interface{}"),TD=e(` 타입을 파라미터로 보낼 수도 있다.
다만 이는 JSON에 무엇이 저장되어 있는지 확인하는 용도로만 쓰고, 확인한 이후에는 concrete type으로 변환해주는 것이 좋다.
Go에서 타입은 그 자체로 처리할 데이터에 대한 문서 역할도 하니 말이다.`),q2=u(),ht=o("p"),hD=e(`Go의 표준 라이브러리는 JSON뿐만 아니라 XML, Base64 등, 다양한 인코더와 디코더를 제공한다.
만약 인코딩해야 할 데이터 포맷이 있는데 이를 지원하는 표준 또는 서드 파티 라이브러리를 찾을 수 없다면, 직접 작성해주어야 한다.
직접 작성하는 법은 `),Bu=o("em"),HD=e("Reflection"),MD=e("을 다루는 포스트에서 추후 다룰 예정이다."),F2=u(),Pa=o("blockquote"),nn=o("p"),ND=e("표준 라이브러리 중 "),qu=o("code"),xD=e("encoding/gob"),jD=e(` 패키지는 Go의 바이너리 데이터 인코딩으로, Java의 serialization이랑 비슷하다.
Java serialization을 Java RMI나 Enterprise Java Beans에서 사용하는 것처럼,
`),Fu=o("code"),LD=e("gob"),AD=e(" 프로토콜은 Go의 RPC("),Ju=o("code"),WD=e("net/rpc"),BD=e(` 패키지)에서 사용하는 프로토콜이다.
다만 `),Gu=o("code"),qD=e("encoding/gob"),FD=e("나 "),Iu=o("code"),JD=e("net/rpc"),GD=e(` 둘 다 사용하지 않는 것을 권장한다.
특정 언어에 구애되지 않는 gRPC라는 좋은 프로토콜이 있다.`),J2=u(),G2=o("br"),I2=o("br"),U2=u(),Ht=o("h2"),Mt=o("a"),Uu=o("span"),ID=e("net/http"),z2=u(),Z2=o("hr"),Q2=u(),ya=o("p"),UD=e(`Go에는 HTTP/2 클라이언트 및 서버를 작성하는 표준 라이브러리가 있다.
클라이언트 및 서버의 코드 작성 예를 알아보자.`),K2=u(),V2=o("br"),X2=o("br"),Y2=u(),Nt=o("h3"),xt=o("a"),zu=o("span"),zD=e("The Client"),$2=u(),A=o("p"),Zu=o("code"),ZD=e("net/http"),QD=e(" 패키지에는 http request를 생성하고 http response를 받는, "),Qu=o("code"),KD=e("Client"),VD=e(` 타입이 정의되어 있다.
`),Ku=o("code"),XD=e("net/http"),YD=e("에 정의된 가장 기본적인 클라이언트 인스턴스("),Vu=o("code"),$D=e("DefaultClient"),gD=e(`)가 있지만, 릴리즈될 어플리케이션에서는 이를 사용하지 않는 것이 좋다.
기본적으로 `),Xu=o("code"),nb=e("DefaultClient"),sb=e(`에는 타임아웃이 없다. 따라서 직접 인스턴스 하나를 생성해 주는 것이 좋다.
기억해야 할 점은 프로그램 전체에서 단 한 개의 `),Yu=o("code"),tb=e("http.Client"),eb=e(` 인스턴스만 생성하면,
여러 개의 고루틴이 돌아간다고 해도 요청들을 충분히 처리할 수 있다는 것이다.`),g2=u(),Be=o("pre"),nE=u(),sE=o("br"),tE=u(),T=o("p"),ab=e("새로운 요청을 생성하려면 "),$u=o("code"),ob=e("http.NewRequsetWithContext()"),pb=e(" 함수에 context, requset method, URL을 넘겨서 "),gu=o("code"),lb=e("*http.Requset"),cb=e(` 인스턴스를 생성해준다.
만약 request method가 `),ni=o("code"),rb=e("PUT"),ub=e(", "),si=o("code"),ib=e("POST"),db=e(", "),ti=o("code"),kb=e("PATCH"),fb=e("라면, 마지막 파라미터로 "),ei=o("code"),Eb=e("io.Reader"),vb=e(` 타입의 request body를 작성해줘야 한다.
만약 request body가 없다면, `),ai=o("code"),_b=e("nil"),mb=e("을 쓰면 된다."),eE=u(),Wn=o("p"),Cb=e("또한 이렇게 생성한 "),oi=o("code"),Ob=e("*http.Requset"),Db=e(" 인스턴스의 "),pi=o("code"),bb=e("Header"),Rb=e(` 필드의 메소드들을 호출하여 request header를 설정할 수 있다.
아래 예제에서는 `),li=o("code"),Pb=e("Add()"),yb=e(" 메소드로 request header를 추가해주었다."),aE=u(),qe=o("pre"),oE=u(),pE=o("br"),lE=u(),bn=o("p"),ci=o("code"),wb=e("*http.Requset"),Sb=e(` 인스턴스의 설정을 마쳤다면, 이제 요청을 전송해보자.
`),ri=o("code"),Tb=e("http.Client"),hb=e("의 "),ui=o("code"),Hb=e("Do()"),Mb=e(" 메소드를 호출하면 요청이 전송되고, 요청에 대한 응답에 해당하는 "),ii=o("code"),Nb=e("http.Response"),xb=e(" 인스턴스를 리턴 값으로 받을 것이다."),cE=u(),Fe=o("pre"),rE=u(),uE=o("br"),iE=u(),h=o("p"),jb=e("이렇게 전송받은 "),di=o("code"),Lb=e("http.Response"),Ab=e(` 인스턴스의 필드값들은 요청에 대한 정보를 담고 있다.
response status code는 `),ki=o("code"),Wb=e("StatusCode"),Bb=e(" 필드에 저장되며, response status message는 "),fi=o("code"),qb=e("Status"),Fb=e(` 필드에 저장된다.
또한 response header는 `),Ei=o("code"),Jb=e("Header"),Gb=e(" 필드에, response body는 "),vi=o("code"),Ib=e("Body"),Ub=e(" 필드에 "),_i=o("code"),zb=e("io.ReadCloser"),Zb=e(` 타입으로 저장된다.
따라서 `),mi=o("code"),Qb=e("json.Decoder"),Kb=e("를 이용해서 REST API 응답을 처리할 수 있다."),dE=u(),Je=o("pre"),kE=u(),wa=o("p"),Vb=e("위 예제의 실행 결과는 다음과 같다."),fE=u(),Ge=o("pre"),EE=u(),vE=o("br"),_E=u(),Sa=o("blockquote"),fn=o("p"),Ci=o("code"),Xb=e("net/http"),Yb=e(" 패키지에는 "),Oi=o("code"),$b=e("http.Get()"),gb=e(", "),Di=o("code"),nR=e("http.Head()"),sR=e(", "),bi=o("code"),tR=e("http.Post()"),eR=e(`등 요청을 보내는 함수가 있다.
이 함수들은 `),Ri=o("code"),aR=e("DefaultClient"),oR=e("로 요청을 보내기 때문에 사용하지 않는 것이 좋다(얘네 타임아웃이 없다)."),mE=u(),CE=o("br"),OE=o("br"),DE=u(),jt=o("h3"),Lt=o("a"),Pi=o("span"),pR=e("The Server"),bE=u(),En=o("p"),lR=e("HTTP 서버는 "),yi=o("code"),cR=e("http.Server"),rR=e("와 "),wi=o("code"),uR=e("http.Handler"),iR=e(` 인터페이스의 개념에 기반하여 구축한다.
`),Si=o("code"),dR=e("http.Client"),kR=e("는 http request를 전송하는 역할을 하듯, "),Ti=o("code"),fR=e("http.Server"),ER=e("는 TLS를 지원하며, http request를 핸들링하는 성능 좋은 HTTP/2 서버이다."),RE=u(),At=o("p"),vR=e("서버에 대한 요청은 "),hi=o("code"),_R=e("http.Handler"),mR=e(` 인터페이스를 충족시키는 타입에 의해 핸들링된다.
이 인터페이스는 단일 메소드를 정의한다.`),PE=u(),Ie=o("pre"),yE=u(),wE=o("br"),SE=u(),Rn=o("p"),Hi=o("code"),CR=e("ServeHTTP()"),OR=e("의 파라미터 중 "),Mi=o("code"),DR=e("*http.Request"),bR=e("는 "),Ni=o("code"),RR=e("http.Client"),PR=e(`로 요청을 보낼 때 사용했던 타입과 동일한 것이다.
`),xi=o("code"),yR=e("http.ResponseWriter"),wR=e(" 인터페이스는 아래처럼 세 개의 메소드를 정의한다."),TE=u(),Ue=o("pre"),hE=u(),Ta=o("p"),SR=e("이 세 개의 메소드는 반드시 일정한 순서대로 호출된다."),HE=u(),Bn=o("p"),TR=e("가장 먼저 호출되는 것은 "),ji=o("code"),hR=e("Header()"),HR=e("로, "),Li=o("code"),MR=e("http.Header"),NR=e(` 인스턴스를 리턴받아서 response header를 설정하기 위해 사용된다.
특별히 response header를 설정할 필요가 없다면 `),Ai=o("code"),xR=e("Header()"),jR=e("를 반드시 호출할 필요는 없다."),ME=u(),qn=o("p"),LR=e("그 다음으로는 response status code를 설정하기 위해 "),Wi=o("code"),AR=e("WriteHeader()"),WR=e(`를 호출한다.
이때 모든 status code는 `),Bi=o("code"),BR=e("net/http"),qR=e(`에 상수로 정의되어 있다.
(패키지 레벨에서 status code에 대한 특정한 타입이 정의되었으면 좋았을 텐데, 그렇지 않다.
실제로 status code들은 특별한 타입이 없는 그냥 정수형이다.)
만약 status code 200을 보내려고 한다면 `),qi=o("code"),FR=e("WriteHeader()"),JR=e("를 굳이 호출해줄 필요는 없다."),NE=u(),Wt=o("p"),GR=e("마지막으로 "),Fi=o("code"),IR=e("Write()"),UR=e("를 호출하여, response body를 설정해준다."),xE=u(),jE=o("br"),LE=u(),ha=o("p"),zR=e("가장 기본적인 형태의 handler를 작성해보자."),AE=u(),ze=o("pre"),WE=u(),Bt=o("p"),ZR=e("어차피 구조체의 필드는 그렇게 중요하지 않으니 비워 두었고, 필요한 "),Ji=o("code"),QR=e("ServeHTTP()"),KR=e(" 메소드만 정의해 주었다."),BE=u(),qE=o("br"),FE=u(),qt=o("p"),VR=e("새로운 "),Gi=o("code"),XR=e("http.Server"),YR=e(" 인스턴스를 생성하여, 서버를 열어보자."),JE=u(),Ze=o("pre"),GE=u(),Ls=o("p"),Ii=o("code"),$R=e("http.Server"),gR=e("의 "),Ui=o("code"),nP=e("Addr"),sP=e(` 필드는 서버가 열릴 호스트 주소와 포트를 지정한다.
따로 지정해주지 않으면 모든 호스트 주소에 대해 HTTP 표준 포트인 80으로 서버를 열 것이다.`),IE=u(),Pn=o("p"),zi=o("code"),tP=e("ReadTimeout"),eP=e(", "),Zi=o("code"),aP=e("WriteTimeout"),oP=e(", "),Qi=o("code"),pP=e("IdleTimeout"),lP=e(" 필드는 서버의 읽기, 쓰기, 유휴 상태의 타임아웃을 "),Ki=o("code"),cP=e("time.Duration"),rP=e(`값으로 명시할 수 있다.
기본적으로 타임아웃을 두지 않기 때문에, 이 필드를 지정해주지 않으면 잘못된 요청을 적절히 핸들링하지 못할 것이다.`),UE=u(),As=o("p"),Vi=o("code"),uP=e("Hander"),iP=e(" 필드에 "),Xi=o("code"),dP=e("http.Handler"),kP=e("를 충족시키는 타입을 지정해주면 된다."),zE=u(),ZE=o("br"),QE=u(),x=o("p"),fP=e(`단일 종류의 요청만 받는 서버는 별로 쓸데가 없을 것이다.
Go 표준 라이브러리에는 요청 라우터인, `),Yi=o("code"),EP=e("*http.ServeMux"),vP=e(`를 포함하고 있다.
`),$i=o("code"),_P=e("http.NewServerMux()"),mP=e(" 함수로 새로운 "),gi=o("code"),CP=e("*http.ServeMux"),OP=e(` 인스턴스를 생성할 수 있으며,
이는 `),nd=o("code"),DP=e("http.Handler"),bP=e(" 인터페이스를 충족시키기 때문에 "),sd=o("code"),RP=e("http.Server"),PP=e("의 "),td=o("code"),yP=e("Handler"),wP=e(" 필드에 할당될 수 있다."),KE=u(),U=o("p"),SP=e("또한, "),ed=o("code"),TP=e("*http.ServeMux"),hP=e(`는 요청을 분류할 수 있는 두 개의 메소드를 포함하고 있다.
첫 번째 메소드는 두 개의 파라미터를 받는 `),ad=o("code"),HP=e("Handle()"),MP=e("로, 두 개의 파라미터는 각각 주소 경로와 "),od=o("code"),NP=e("http.Handler"),xP=e(` 인스턴스이다.
만약 주소가 일치한다면 `),pd=o("code"),jP=e("http.Handler"),LP=e(`가 호출될 것이다.
또 다른 방법은 더 일반적으로 사용하는 `),ld=o("code"),AP=e("HandleFunc()"),WP=e(" 메소드이다."),VE=u(),Qe=o("pre"),XE=u(),Fn=o("p"),BP=e("이 메소드에서 볼 수 있듯 파라미터로 주소 경로와, "),cd=o("code"),qP=e("http.Handler"),FP=e("의 "),rd=o("code"),JP=e("ServeHTTP()"),GP=e(`를 만족시키는 closure를 작성해 주었다.
해당 패턴은 인터페이스 포스트의 `),Ke=o("a"),IP=e("Function Types Are a Bridge to Interfaces"),UP=e("에서 소개하였으니, 확인할 수 있다."),YE=u(),Ft=o("p"),zP=e(`다만 핸들러가 다른 비즈니스 로직을 사용하여 더 복잡해질 경우, 구조체 타입에 메소드를 정의하여 사용해주는 것이 좋다.
이에 관련된 내용도 인터페이스 포스트의 `),Ve=o("a"),ZP=e("Implicit Interfaces Make Dependency Injection Easier"),QP=e("에서 소개하였다."),$E=u(),gE=o("br"),n3=u(),Jt=o("blockquote"),j=o("p"),ud=o("code"),KP=e("net/http"),VP=e("에는 패키지 레벨 함수인 "),id=o("code"),XP=e("http.Handle"),YP=e(", "),dd=o("code"),$P=e("http.HandleFunc"),gP=e(", "),kd=o("code"),ny=e("http.ListenAndServe"),sy=e(", "),fd=o("code"),ty=e("http.ListenAndServeTLS"),ey=e(` 함수가 있으며,
이들은 `),Ed=o("code"),ay=e("*http.ServeMux"),oy=e("의 패키지 레벨 인스턴스인 "),vd=o("code"),py=e("http.DefaultServeMux"),ly=e(`를 기준으로 동작한다.
예상되겠지만, 이 함수들은 릴리즈될 어플리케이션에서는 사용이 권장되지 않는다.`),cy=u(),Jn=o("p"),_d=o("code"),ry=e("http.Server"),uy=e(" 인스턴스가 "),md=o("code"),iy=e("http.ListenAndServe"),dy=e("나 "),Cd=o("code"),ky=e("http.ListenAndServeTLS"),fy=e(`에서 생성되기 때문에, 타임아웃과 같은 설정을 지정해줄 수 없다.
뿐만 아니라 서드 파티 라이브러리가 `),Od=o("code"),Ey=e("http.DefaultServeMux"),vy=e(`에 자체 핸들러를 등록해버릴 수 있기 때문에,
모든 의존성들을 스캔하지 않고는 이를 알 수 없다.
어플리케이션이 shared state로 인해 통제되는 상황은 되도록 피해야 한다.`),s3=u(),t3=o("br"),e3=u(),sn=o("p"),Dd=o("code"),_y=e("*http.ServeMux"),my=e("는 "),bd=o("code"),Cy=e("http.Handler"),Oy=e("에 요청을 보내고 "),Rd=o("code"),Dy=e("http.Handler"),by=e(` 인터페이스를 충족시키기 때문에,
여러 관련된 요청에 대한 `),Pd=o("code"),Ry=e("*http.ServeMux"),Py=e(" 인스턴스를 생성하고, 부모 "),yd=o("code"),yy=e("*http.ServeMux"),wy=e("에 등록할 수 있다."),a3=u(),Xe=o("pre"),o3=u(),Ha=o("p"),Sy=e("위 예제의 구조를 이해하는 것이 그렇게 어렵진 않을 것이다."),p3=u(),yn=o("p"),wd=o("code"),Ty=e("/person/greet"),hy=e("로 요청을 보내면 "),Sd=o("code"),Hy=e("person"),My=e(`에 붙어있는 핸들러로 처리되며,
`),Td=o("code"),Ny=e("/dog/greet"),xy=e("로 요청을 보내면 "),hd=o("code"),jy=e("dog"),Ly=e("에 붙어있는 핸들러로 처리가 된다."),l3=u(),tn=o("p"),Hd=o("code"),Ay=e("person"),Wy=e("과 "),Md=o("code"),By=e("dog"),qy=e("를 "),Nd=o("code"),Fy=e("mux"),Jy=e("에 등록할 때 "),xd=o("code"),Gy=e("http.StripPrefix()"),Iy=e(` 함수를 사용하여,
주소에서 `),jd=o("code"),Uy=e("mux"),zy=e("에 의해 이미 처리된 부분을 제거해주었다."),c3=u(),r3=o("br"),u3=o("br"),i3=u(),Gt=o("h3"),It=o("a"),Ld=o("span"),Zy=e("Middleware"),d3=u(),z=o("p"),Qy=e(`HTTP 서버의 또 다른 중요한 요소 중 하나는 로그인 여부 확인, 요청 시간 체크, 요청 헤더 체크 등 여러 동작을 수행하는 것이다.
Go에서는 이러한 연관된 기능들을 `),Ad=o("em"),Ky=e("미들웨어"),Vy=e(`를 사용하여 구현한다.
미들웨어는 특별한 타입을 사용하지 않고, `),Wd=o("code"),Xy=e("http.Handler"),Yy=e("를 파라미터로 받아 "),Bd=o("code"),$y=e("http.Handler"),gy=e(`를 반환하는 함수를 작성하여 사용한다.
대개 반환된 `),qd=o("code"),nw=e("http.Handler"),sw=e("는 "),Fd=o("code"),tw=e("http.HandlerFunc"),ew=e("로 반환될 수 있는 closure가 된다."),k3=u(),f3=o("br"),E3=u(),Ma=o("p"),aw=e(`아래 예제에는 두 개의 미들웨어 생성기가 있다.
하나는 요청의 시간을 재는 것이고, 또 하나는 액세스 제어의 나쁜 예라고 할 수 있다.`),v3=u(),Ye=o("pre"),_3=u(),bs=o("p"),ow=e(`이 두 개의 미들웨어 구현을 보면 미들웨어가 무슨 역할을 하는지 알 수 있을 것이다.
먼저 연산이나 조건 검사를 하기 위한 셋업을 한 후,
조건을 만족하지 않으면 보통 미들웨어에서 error status code와 함께 `),Jd=o("code"),pw=e("Write()"),lw=e(`로 출력을 한 후 함수를 리턴한다.
만약 문제가 없다면, 다음 핸들러의 `),Gd=o("code"),cw=e("ServeHTTP()"),rw=e(` 메소드를 호출한다.
그 후 정리 작업을 수행한다.`),m3=u(),Ws=o("p"),Id=o("code"),uw=e("TerribleSecurityProvider()"),iw=e(`는 직접 설정 가능한 미들웨어를 생성하는 예제라고 할 수 있다.
설정 정보(예제에서는 비밀번호)를 `),Ud=o("code"),dw=e("TerribleSecurityProvider()"),kw=e(`의 파라미터로 보내면, 해당 정보를 사용하는 미들웨어를 반환한다.
다만 closure를 반환하는 closure를 반환하기 때문에(쓰기도 어려움;), 살짝 마음에 걸리는 것이다.`),C3=u(),O3=o("br"),D3=u(),Na=o("blockquote"),zd=o("p"),fw=e("미들웨어 레이어에서의 값의 전달은 context를 통해 이루어진다."),b3=u(),R3=o("br"),P3=u(),xa=o("p"),Ew=e("미들웨어를 연결하여 request handler에 추가해보자."),y3=u(),$e=o("pre"),w3=u(),Gn=o("p"),vw=e("위 예제에서 우리는 "),Zd=o("code"),_w=e("TerribleSecurityProvider()"),mw=e(`로부터 미들웨어를 생성하고, 핸들러를 각각의 함수 호출로 감싸주었다.
구조적으로 `),Qd=o("code"),Cw=e("terribleSecurity()"),Ow=e(" closure가 먼저 호출되고, 그 다음으로 "),Kd=o("code"),Dw=e("RequestTimer"),bw=e(", 그 다음으로 원래의 request handler가 호출된다."),S3=u(),Bs=o("p"),Vd=o("code"),Rw=e("*http.ServeMux"),Pw=e("는 "),Xd=o("code"),yw=e("http.Handler"),ww=e(` 인터페이스를 충족시킨다.
아래처럼 적용하면 미들웨어들을 request router에 등록된 모든 핸들러에 적용할 수 있다.`),T3=u(),ge=o("pre"),h3=u(),H3=o("br"),M3=o("br"),N3=u(),Ut=o("h3"),zt=o("a"),Yd=o("span"),Sw=e("Use idiomatic third-party modules to enhance the server"),x3=u(),ja=o("p"),Tw=e(`서버에 서드파티 라이브러리를 사용하여 기능을 개선할 수 있다.
위 예제에서 보았던 미들웨어의 chain이 마음에 들지 않는다면, alice라는 서드파티 라이브러리를 사용할 수 있다.`),j3=u(),na=o("pre"),L3=u(),A3=o("br"),W3=u(),Rs=o("p"),hw=e("표준 라이브러리를 사용하여 HTTP 서버를 구축하는 것의 가장 큰 문제점은 "),$d=o("code"),Hw=e("*http.ServeMux"),Mw=e(`를 request router로 사용한다는 점이다.
이 request router는 HTTP 메소드나 헤더를 기준으로 구분할 수 없으며, Query parameter도 처리할 수 없다.
게다가 `),gd=o("code"),Nw=e("*http.ServeMux"),xw=e(" 인스턴스가 중첩되면 너무 거대해지기도 한다."),B3=u(),In=o("p"),jw=e("이를 대체하기 위한 프로젝트는 되게 많은데, 대표적인 게 바로 "),sa=o("a"),Lw=e("gorilla mux"),Aw=e(`와 [https://github.com/go-chi/chi]이다.
이 두 라이브러리가 이상적이라 여겨지는 이유는 `),nk=o("code"),Ww=e("http.Handler"),Bw=e("나 "),sk=o("code"),qw=e("http.HandlerFunc"),Fw=e(` 인스턴스와 함께 사용할 수 있기 때문이며,
표준 라이브러리와 잘 어우러질 수 있는 라이브러리를 사용하는 Go의 철학을 보여준다.
또한 관용적인 미들웨어들을 사용할 수 있으며, 주로 사용되는 미들웨어의 구현체를 제공한다.`),q3=u(),F3=o("br"),J3=o("br"),G3=u(),Zt=o("h2"),Qt=o("a"),tk=o("span"),Jw=e("References"),I3=u(),U3=o("hr"),z3=u(),La=o("center"),qs=o("p"),ta=o("a"),Aa=o("img"),Gw=u(),Iw=o("br"),Uw=u(),ea=o("a"),zw=e("Jon Bodner, 『Learning Go』, O’Reilly Media, Inc."),Z3=u(),Q3=o("br"),K3=o("br"),this.h()},l(n){ua=p(n,"BR",{}),uk=i(n),ia=p(n,"P",{});var c=l(ia);kv=a(c,"본 글은 Golang을 공부하며 주요 내용이라 생각되는 것들을 기록해둔 자료이며, Ubuntu 22.04 LTS 기준으로 작성되었습니다."),c.forEach(t),ik=i(n),dk=p(n,"BR",{}),kk=p(n,"BR",{}),fk=i(n),Xs=p(n,"H2",{id:!0});var Zw=l(Xs);Ys=p(Zw,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var iS=l(Ys);no=p(iS,"SPAN",{class:!0}),l(no).forEach(t),iS.forEach(t),fv=a(Zw,"Introduction"),Zw.forEach(t),Ek=i(n),vk=p(n,"HR",{}),_k=i(n),$s=p(n,"P",{});var V3=l($s);Ev=a(V3,`Go의 표준 라이브러리는 여러 장점이 있다.
Python의 라이브러리 철학인 `),so=p(V3,"EM",{});var dS=l(so);vv=a(dS,"“batteries included”"),dS.forEach(t),_v=a(V3,` 처럼, 서비스를 빌드하기 위해 필요한 다양한 도구를 제공한다.
Go는 비교적 최신 언어인 만큼, 현대 프로그래밍 환경에서 직면하는 문제에 초점을 맞춘 라이브러리를 제공한다.`),V3.forEach(t),mk=i(n),w=p(n,"P",{});var Z=l(w);mv=a(Z,`이 장에서 모든 표준 라이브러리 패키지들을 다룰 수 없고, 그럴 필요도 없다.
표준 라이브러리에 대한 다양한 정보들과 `),le=p(Z,"A",{href:!0,rel:!0});var kS=l(le);Cv=a(kS,"문서"),kS.forEach(t),Ov=a(Z,`가 있으니, 여기를 참조하면 될 것이다.
이 포스트에서는 몇 개의 가장 중요한 패키지, 그리고 이들의 디자인적인 측면이나 사용 방법을 알아볼 것이다.
`),to=p(Z,"CODE",{});var fS=l(to);Dv=a(fS,"errors"),fS.forEach(t),bv=a(Z,", "),eo=p(Z,"CODE",{});var ES=l(eo);Rv=a(ES,"sync"),ES.forEach(t),Pv=a(Z,", "),ao=p(Z,"CODE",{});var vS=l(ao);yv=a(vS,"context"),vS.forEach(t),wv=a(Z,", "),oo=p(Z,"CODE",{});var _S=l(oo);Sv=a(_S,"testing"),_S.forEach(t),Tv=a(Z,", "),po=p(Z,"CODE",{});var mS=l(po);hv=a(mS,"reflect"),mS.forEach(t),Hv=a(Z,", "),lo=p(Z,"CODE",{});var CS=l(lo);Mv=a(CS,"unsafe"),CS.forEach(t),Nv=a(Z,` 등 패키지들은 각각의 챕터에서 집중적으로 다루었거나 다룰 예정이다.
이 챕터에서는 I/O, 시간, JSON, HTTP 등을 지원하는 패키지에 대해 알아볼 것이다.`),Z.forEach(t),Ck=i(n),Ok=p(n,"BR",{}),Dk=p(n,"BR",{}),bk=i(n),gs=p(n,"H2",{id:!0});var Qw=l(gs);nt=p(Qw,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var OS=l(nt);co=p(OS,"SPAN",{class:!0}),l(co).forEach(t),OS.forEach(t),xv=a(Qw,"io and Friends"),Qw.forEach(t),Rk=i(n),Pk=p(n,"HR",{}),yk=i(n),on=p(n,"P",{});var Ps=l(on);jv=a(Ps,`실용적인 프로그램을 데이터를 읽고 쓸 수 있어야 한다.
Go의 입/출력 철학은 `),ro=p(Ps,"CODE",{});var DS=l(ro);Lv=a(DS,"io"),DS.forEach(t),Av=a(Ps,` 패키지에서 찾아볼 수 있다.
특히 이 패키지에 정의된 `),uo=p(Ps,"CODE",{});var bS=l(uo);Wv=a(bS,"io.Reader"),bS.forEach(t),Bv=a(Ps,"와 "),io=p(Ps,"CODE",{});var RS=l(io);qv=a(RS,"io.Writer"),RS.forEach(t),Fv=a(Ps,"는 각각 Go에서 두 번째, 세 번째로 많이 사용되는 인터페이스일 것이다. (첫 번째는 "),ko=p(Ps,"CODE",{});var PS=l(ko);Jv=a(PS,"error"),PS.forEach(t),Gv=a(Ps,"이다)"),Ps.forEach(t),wk=i(n),Sk=p(n,"BR",{}),Tk=i(n),xs=p(n,"P",{});var ek=l(xs);fo=p(ek,"CODE",{});var yS=l(fo);Iv=a(yS,"io.Reader"),yS.forEach(t),Uv=a(ek,"와 "),Eo=p(ek,"CODE",{});var wS=l(Eo);zv=a(wS,"io.Writer"),wS.forEach(t),Zv=a(ek,"는 모두 한 개의 메소드를 정의한다."),ek.forEach(t),hk=i(n),ce=p(n,"PRE",{class:!0});var jA=l(ce);jA.forEach(t),Hk=i(n),X=p(n,"P",{});var gn=l(X);vo=p(gn,"CODE",{});var SS=l(vo);Qv=a(SS,"io.Writer"),SS.forEach(t),Kv=a(gn,"의 "),_o=p(gn,"CODE",{});var TS=l(_o);Vv=a(TS,"Write()"),TS.forEach(t),Xv=a(gn,` 메소드는 바이트 덩어리를 파라미터로 받고, 바이트의 수와 에러 발생 여부를 반환한다.
`),mo=p(gn,"CODE",{});var hS=l(mo);Yv=a(hS,"io.Reader"),hS.forEach(t),$v=a(gn,"의 "),Co=p(gn,"CODE",{});var HS=l(Co);gv=a(HS,"Read()"),HS.forEach(t),n5=a(gn,` 메소드는 좀 더 신기하다.
리턴 파라미터로 값을 반환하기보다는 입력 파라미터로 보낸 값을 변경한다.
최대 `),Oo=p(gn,"CODE",{});var MS=l(Oo);s5=a(MS,"len(p)"),MS.forEach(t),t5=a(gn," 바이트만큼의 데이터가 슬라이스에 쓰일 것이고, 기록된 바이트의 수와 에러 여부가 반환된다."),gn.forEach(t),Mk=i(n),Nk=p(n,"BR",{}),xk=i(n),os=p(n,"P",{});var Wa=l(os);e5=a(Wa,"사실 "),Do=p(Wa,"CODE",{});var NS=l(Do);a5=a(NS,"io.Reader"),NS.forEach(t),o5=a(Wa,"의 "),bo=p(Wa,"CODE",{});var xS=l(bo);p5=a(xS,"Read()"),xS.forEach(t),l5=a(Wa," 메소드는 아래와 같이 정의되는 것이 직관적일 것이다."),Wa.forEach(t),jk=i(n),re=p(n,"PRE",{class:!0});var LA=l(re);LA.forEach(t),Lk=i(n),ps=p(n,"P",{});var Ba=l(ps);c5=a(Ba,"하지만 "),Ro=p(Ba,"CODE",{});var jS=l(Ro);r5=a(jS,"io.Reader"),jS.forEach(t),u5=a(Ba,`가 기존 방식으로 정의되는 데에는 이유가 있다.
`),Po=p(Ba,"CODE",{});var LS=l(Po);i5=a(LS,"io.Reader"),LS.forEach(t),d5=a(Ba,"를 사용하는 함수를 작성하여 이해해보도록 하자."),Ba.forEach(t),Ak=i(n),ue=p(n,"PRE",{class:!0});var AA=l(ue);AA.forEach(t),Wk=i(n),da=p(n,"P",{});var AS=l(da);k5=a(AS,"위 예제에서 주목할 점들이 있다."),AS.forEach(t),Bk=i(n),hn=p(n,"OL",{});var Kt=l(hn);yo=p(Kt,"LI",{});var WS=l(yo);Y=p(WS,"P",{});var Un=l(Y);f5=a(Un,"버퍼를 한 번 생성하고 "),wo=p(Un,"CODE",{});var BS=l(wo);E5=a(BS,"r.Read()"),BS.forEach(t),v5=a(Un,`를 호출할 때마다 재사용할 것이다.
이러한 방식을 쓰면 크기가 클 수도 있는 데이터에 대해 한 번의 메모리 할당으로 값을 읽어올 수 있다.
만약 `),So=p(Un,"CODE",{});var qS=l(So);_5=a(qS,"Read()"),qS.forEach(t),m5=a(Un," 메소드가 "),To=p(Un,"CODE",{});var FS=l(To);C5=a(FS,"[]byte"),FS.forEach(t),O5=a(Un,"를 리턴하게끔 작성되어 있다면, 매번 함수를 호출할 때마다 새롭게 메모리 할당을 할 것이고, 가비지 컬렉터가 할 일이 많아질 것이다."),D5=p(Un,"BR",{}),b5=a(Un,`
추후 이렇게 낭비적인 할당을 줄이고 싶다면, 프로그램이 실행될 때 버퍼 풀을 생성해 놓는 방법도 있다.
함수가 실행될 때 해당 버퍼 풀에서 버퍼를 가져와 사용하고, 끝나면 되돌려 놓는 식이다.
`),ho=p(Un,"CODE",{});var JS=l(ho);R5=a(JS,"io.Reader"),JS.forEach(t),P5=a(Un,"에 slice를 보낼 수 있기 떄문에 메모리 할당을 개발자의 몫으로 남겨둘 수 있다."),Un.forEach(t),WS.forEach(t),y5=i(Kt),Ho=p(Kt,"LI",{});var GS=l(Ho);ls=p(GS,"P",{});var aa=l(ls);Mo=p(aa,"CODE",{});var IS=l(Mo);w5=a(IS,"r.Read()"),IS.forEach(t),S5=a(aa,"에서 반환된 "),No=p(aa,"CODE",{});var US=l(No);T5=a(US,"n"),US.forEach(t),h5=a(aa,`값을 사용하여 버퍼에 바이트가 얼마나 많이 기록되었는지 확인하고,
`),xo=p(aa,"CODE",{});var zS=l(xo);H5=a(zS,"buf"),zS.forEach(t),M5=a(aa," slice의 subslice를 이터레이션하여 읽어온 데이터를 처리할 수 있다."),aa.forEach(t),GS.forEach(t),N5=i(Kt),jo=p(Kt,"LI",{});var ZS=l(jo);Hn=p(ZS,"P",{});var Fs=l(Hn);Lo=p(Fs,"CODE",{});var QS=l(Lo);x5=a(QS,"r.Read()"),QS.forEach(t),j5=a(Fs,"의 리턴 타입 중 error로 "),Ao=p(Fs,"CODE",{});var KS=l(Ao);L5=a(KS,"io.EOF"),KS.forEach(t),A5=a(Fs,"를 반환한 경우("),Wo=p(Fs,"CODE",{});var VS=l(Wo);W5=a(VS,"io.EOF"),VS.forEach(t),B5=a(Fs,`는 실제로 에러가 아니다), 읽어올 데이터가 끝났음을 의미한다.
위 예제에서는 `),Bo=p(Fs,"CODE",{});var XS=l(Bo);q5=a(XS,"io.EOF"),XS.forEach(t),F5=a(Fs,"가 반환될 시 처리를 끝내고 결과물을 리턴한다."),Fs.forEach(t),ZS.forEach(t),J5=i(Kt),qo=p(Kt,"LI",{});var YS=l(qo);J=p(YS,"P",{});var wn=l(J);Fo=p(wn,"CODE",{});var $S=l(Fo);G5=a($S,"io.Reader"),$S.forEach(t),I5=a(wn,`에는 특이사항이 있다. 대부분의 함수 또는 메소드에 error 리턴값이 있다면, 오류가 아닌 값을 처리하기 전에 에러를 먼저 확인할 것이다.
`),Jo=p(wn,"CODE",{});var gS=l(Jo);U5=a(gS,"Read()"),gS.forEach(t),z5=a(wn,"를 사용할때는 데이터 스트림의 끝 또는 예기치 않은 오류가 발생하기 전에 반환된 바이트가 있을 수 있기 떄문에 이와 반대로 한다."),Z5=p(wn,"BR",{}),Q5=a(wn,`
만약 `),Go=p(wn,"CODE",{});var nT=l(Go);K5=a(nT,"io.Reader"),nT.forEach(t),V5=a(wn,"가 예상치 못하게 끝난다면 다른 종류의 sentinel error("),Io=p(wn,"CODE",{});var sT=l(Io);X5=a(sT,"io.ErrUnexpectedEOF"),sT.forEach(t),Y5=a(wn,`)가 반환될 것이다.
이처럼 예측하지 못한 상태를 나타내는 에러는 `),Uo=p(wn,"CODE",{});var tT=l(Uo);$5=a(tT,"Err"),tT.forEach(t),g5=a(wn,"로 시작한다."),wn.forEach(t),YS.forEach(t),Kt.forEach(t),qk=i(n),Fk=p(n,"BR",{}),Jk=i(n),pn=p(n,"P",{});var ys=l(pn);n_=a(ys,"이렇듯 "),zo=p(ys,"CODE",{});var eT=l(zo);s_=a(eT,"io.Reader"),eT.forEach(t),t_=a(ys,"와 "),Zo=p(ys,"CODE",{});var aT=l(Zo);e_=a(aT,"io.Writer"),aT.forEach(t),a_=a(ys,` 인터페이스가 간단하기 때문에, 여러 가지 방법으로 충족시킬 수 있다.
`),Qo=p(ys,"CODE",{});var oT=l(Qo);o_=a(oT,"strings.NewReader()"),oT.forEach(t),p_=a(ys," 함수를 사용하여 문자열로부터 "),Ko=p(ys,"CODE",{});var pT=l(Ko);l_=a(pT,"io.Reader"),pT.forEach(t),c_=a(ys,"를 생성시킬 수도 있다."),ys.forEach(t),Gk=i(n),ie=p(n,"PRE",{class:!0});var WA=l(ie);WA.forEach(t),Ik=i(n),mn=p(n,"P",{});var Js=l(mn);Vo=p(Js,"CODE",{});var lT=l(Vo);r_=a(lT,"countLetters"),lT.forEach(t),u_=a(Js," 함수가 파라미터로 "),Xo=p(Js,"CODE",{});var cT=l(Xo);i_=a(cT,"io.Reader"),cT.forEach(t),d_=a(Js,"를 사용하므로, "),Yo=p(Js,"CODE",{});var rT=l(Yo);k_=a(rT,"countLetters"),rT.forEach(t),f_=a(Js,` 함수를 써서 gzip으로 압축된 영문자를 카운트할 수도 있다.
진짜 되는지 해보자. 먼저 파일명을 파라미터로 받아 `),$o=p(Js,"CODE",{});var uT=l($o);E_=a(uT,"*gzip.Reader"),uT.forEach(t),v_=a(Js,"를 반환하는 함수를 작성해준다."),Js.forEach(t),Uk=i(n),de=p(n,"PRE",{class:!0});var BA=l(de);BA.forEach(t),zk=i(n),G=p(n,"P",{});var zn=l(G);__=a(zn,`함수의 구조가 그다지 어렵지는 않다.
먼저 `),go=p(zn,"CODE",{});var iT=l(go);m_=a(iT,"os.Open()"),iT.forEach(t),C_=a(zn," 함수로 "),np=p(zn,"CODE",{});var dT=l(np);O_=a(dT,"*os.File"),dT.forEach(t),D_=a(zn,` 인스턴스를 만들고 에러 검사를 한다.
그 후 `),sp=p(zn,"CODE",{});var kT=l(sp);b_=a(kT,"gzip.NewReader()"),kT.forEach(t),R_=a(zn," 함수를 호출하여 "),tp=p(zn,"CODE",{});var fT=l(tp);P_=a(fT,"*gzip.Reader"),fT.forEach(t),y_=a(zn,` 인스턴스를 생성한다.
리턴 값들은 `),ep=p(zn,"CODE",{});var ET=l(ep);w_=a(ET,"*gzip.Reader"),ET.forEach(t),S_=a(zn," 인스턴스, 생성된 인스턴스들을 제거하는 closure, 그리고 에러 변수이다."),zn.forEach(t),Zk=i(n),Cn=p(n,"P",{});var Gs=l(Cn);ap=p(Gs,"CODE",{});var vT=l(ap);T_=a(vT,"*gzip.Reader"),vT.forEach(t),h_=a(Gs," 인스턴스는 "),op=p(Gs,"CODE",{});var _T=l(op);H_=a(_T,"*strings.Reader"),_T.forEach(t),M_=a(Gs,"처럼 "),pp=p(Gs,"CODE",{});var mT=l(pp);N_=a(mT,"io.Reader"),mT.forEach(t),x_=a(Gs,"를 충족시키기 때문에 "),lp=p(Gs,"CODE",{});var CT=l(lp);j_=a(CT,"countLettters()"),CT.forEach(t),L_=a(Gs," 함수에서 사용할 수 있다."),Gs.forEach(t),Qk=i(n),ke=p(n,"PRE",{class:!0});var qA=l(ke);qA.forEach(t),Kk=i(n),Vk=p(n,"BR",{}),Xk=i(n),N=p(n,"P",{});var vn=l(N);A_=a(vn,"읽기/쓰기를 위한 표준 인터페이스가 있기 때문에, "),cp=p(vn,"CODE",{});var OT=l(cp);W_=a(OT,"io.Reader"),OT.forEach(t),B_=a(vn,"와 "),rp=p(vn,"CODE",{});var DT=l(rp);q_=a(DT,"io.Writer"),DT.forEach(t),F_=a(vn,"에서 데이터를 복사하는 표준 함수 "),up=p(vn,"CODE",{});var bT=l(up);J_=a(bT,"io.Copy()"),bT.forEach(t),G_=a(vn,"도 "),ip=p(vn,"CODE",{});var RT=l(ip);I_=a(RT,"io"),RT.forEach(t),U_=a(vn,` 패키지에 존재한다.
기존 `),dp=p(vn,"CODE",{});var PT=l(dp);z_=a(PT,"io.Reader"),PT.forEach(t),Z_=a(vn,"와 "),kp=p(vn,"CODE",{});var yT=l(kp);Q_=a(yT,"io.Writer"),yT.forEach(t),K_=a(vn,"인스턴스에 새로운 기능을 추가하기 위한 다른 표준 함수들도 있다."),vn.forEach(t),Yk=i(n),cs=p(n,"UL",{});var qa=l(cs);rs=p(qa,"LI",{});var oa=l(rs);fp=p(oa,"CODE",{});var wT=l(fp);V_=a(wT,"io.MultiReader"),wT.forEach(t),X_=a(oa," : 여러 개의 "),Ep=p(oa,"CODE",{});var ST=l(Ep);Y_=a(ST,"io.Reader"),ST.forEach(t),$_=a(oa," 인스턴스로부터 잇따라 데이터를 읽을 수 있는 "),vp=p(oa,"CODE",{});var TT=l(vp);g_=a(TT,"io.Reader"),TT.forEach(t),n0=a(oa," 인스턴스를 반환한다."),oa.forEach(t),s0=i(qa),st=p(qa,"LI",{});var ak=l(st);_p=p(ak,"CODE",{});var hT=l(_p);t0=a(hT,"io.LimitReader"),hT.forEach(t),e0=a(ak," : 명시된 수 만큼의 바이트만 읽을 수 있는 "),mp=p(ak,"CODE",{});var HT=l(mp);a0=a(HT,"io.Reader"),HT.forEach(t),o0=a(ak," 인스턴스를 반환한다."),ak.forEach(t),p0=i(qa),us=p(qa,"LI",{});var pa=l(us);Cp=p(pa,"CODE",{});var MT=l(Cp);l0=a(MT,"io.MultiWriter"),MT.forEach(t),c0=a(pa," : 동시에 여러 "),Op=p(pa,"CODE",{});var NT=l(Op);r0=a(NT,"io.Writer"),NT.forEach(t),u0=a(pa,"에 데이터를 쓸 수 있는 "),Dp=p(pa,"CODE",{});var xT=l(Dp);i0=a(xT,"io.Writer"),xT.forEach(t),d0=a(pa," 인스턴스를 반환한다."),pa.forEach(t),qa.forEach(t),$k=i(n),is=p(n,"P",{});var Fa=l(is);k0=a(Fa,"표준 라이브러리 내의 다른 패키지에서는 "),bp=p(Fa,"CODE",{});var jT=l(bp);f0=a(jT,"io.Reader"),jT.forEach(t),E0=a(Fa,"와 "),Rp=p(Fa,"CODE",{});var LT=l(Rp);v0=a(LT,"io.Writer"),LT.forEach(t),_0=a(Fa,`와 같이 사용할 수 있는 타입이나 함수들을 제공한다.
몇 개는 이미 봤지만 압축 알고리즘, 아카이브, 암호화, 버퍼, byte slice, 문자열 등 다양하게 제공하고 있다.`),Fa.forEach(t),gk=i(n),nf=p(n,"BR",{}),sf=i(n),Xn=p(n,"P",{});var la=l(Xn);Pp=p(la,"CODE",{});var AT=l(Pp);m0=a(AT,"io"),AT.forEach(t),C0=a(la," 패키지에는 "),yp=p(la,"CODE",{});var WT=l(yp);O0=a(WT,"io.Closer"),WT.forEach(t),D0=a(la,"나 "),wp=p(la,"CODE",{});var BT=l(wp);b0=a(BT,"io.Seeker"),BT.forEach(t),R0=a(la,"등, 또다른 단일 메소드 인터페이스가 있다."),la.forEach(t),tf=i(n),fe=p(n,"PRE",{class:!0});var FA=l(fe);FA.forEach(t),ef=i(n),On=p(n,"P",{});var Is=l(On);Sp=p(Is,"CODE",{});var qT=l(Sp);P0=a(qT,"os.File"),qT.forEach(t),y0=a(Is,"과 같이, 읽기나 쓰기가 끝나면 정리를 해줘야 하는 타입들은 "),Tp=p(Is,"CODE",{});var FT=l(Tp);w0=a(FT,"io.Closer"),FT.forEach(t),S0=a(Is,`를 충족시킨다.
일반적으로 `),hp=p(Is,"CODE",{});var JT=l(hp);T0=a(JT,"Close()"),JT.forEach(t),h0=a(Is," 메소드는 "),Hp=p(Is,"CODE",{});var GT=l(Hp);H0=a(GT,"defer"),GT.forEach(t),M0=a(Is,"를 통해 호출된다."),Is.forEach(t),af=i(n),Ee=p(n,"PRE",{class:!0});var JA=l(Ee);JA.forEach(t),of=i(n),Mn=p(n,"P",{});var Vt=l(Mn);N0=a(Vt,"만약 리소스를 반복문 내에서 여는 경우, "),Mp=p(Vt,"CODE",{});var IT=l(Mp);x0=a(IT,"defer"),IT.forEach(t),j0=a(Vt,`를 이용하지 않는 것이 좋다.
반복문 내에서 열린 리소스는 이터레이션의 끝에서 닫아주는 게 좋겠지만, `),Np=p(Vt,"CODE",{});var UT=l(Np);L0=a(UT,"defer"),UT.forEach(t),A0=a(Vt,`는 함수가 끝날 때 실행된다.
따라서 이터레이션의 끝 부분이나 함수가 끝날 수도 있는 에러가 발생할 만한 부분에 `),xp=p(Vt,"CODE",{});var zT=l(xp);W0=a(zT,"Close()"),zT.forEach(t),B0=a(Vt,"를 호출해 주는 게 좋다."),Vt.forEach(t),pf=i(n),H=p(n,"P",{});var en=l(H);jp=p(en,"CODE",{});var ZT=l(jp);q0=a(ZT,"io.Seeker"),ZT.forEach(t),F0=a(en,` 인터페이스는 리소스에 임의 접근(random access) 하기 위해 사용된다.
이 때 파라미터 `),Lp=p(en,"CODE",{});var QT=l(Lp);J0=a(QT,"whence"),QT.forEach(t),G0=a(en,"에 유효한 값은 상수 "),Ap=p(en,"CODE",{});var KT=l(Ap);I0=a(KT,"io.SeekStart"),KT.forEach(t),U0=a(en,", "),Wp=p(en,"CODE",{});var VT=l(Wp);z0=a(VT,"io.SeekCurrent"),VT.forEach(t),Z0=a(en,", "),Bp=p(en,"CODE",{});var XT=l(Bp);Q0=a(XT,"io.SeekEnd"),XT.forEach(t),K0=a(en,`이다.
사실 이건 제작자 실수인게, `),qp=p(en,"CODE",{});var YT=l(qp);V0=a(YT,"whence"),YT.forEach(t),X0=a(en,"는 타입을 새로 생성하여 명확히 해줬어야 하는데 "),Fp=p(en,"CODE",{});var $T=l(Fp);Y0=a($T,"whence"),$T.forEach(t),$0=a(en,"는 int 타입이다."),en.forEach(t),lf=i(n),cf=p(n,"BR",{}),rf=i(n),v=p(n,"P",{});var C=l(v);Jp=p(C,"CODE",{});var gT=l(Jp);g0=a(gT,"io"),gT.forEach(t),n6=a(C," 패키지는 앞서 보았던 "),Gp=p(C,"CODE",{});var nh=l(Gp);s6=a(nh,"io.Reader"),nh.forEach(t),t6=a(C,", "),Ip=p(C,"CODE",{});var sh=l(Ip);e6=a(sh,"io.Writer"),sh.forEach(t),a6=a(C,", "),Up=p(C,"CODE",{});var th=l(Up);o6=a(th,"io.Closer"),th.forEach(t),p6=a(C,", "),zp=p(C,"CODE",{});var eh=l(zp);l6=a(eh,"io.Seeker"),eh.forEach(t),c6=a(C,`, 이렇게 네 개의 인터페이스를 여러 방식으로 합친 인터페이스를 정의한다.
`),Zp=p(C,"CODE",{});var ah=l(Zp);r6=a(ah,"io.ReadCloser"),ah.forEach(t),u6=a(C,", "),Qp=p(C,"CODE",{});var oh=l(Qp);i6=a(oh,"io.ReadSeeker"),oh.forEach(t),d6=a(C,", "),Kp=p(C,"CODE",{});var ph=l(Kp);k6=a(ph,"io.ReadWriteCloser"),ph.forEach(t),f6=a(C,", "),Vp=p(C,"CODE",{});var lh=l(Vp);E6=a(lh,"io.ReadWriteSeeker"),lh.forEach(t),v6=a(C,", "),Xp=p(C,"CODE",{});var ch=l(Xp);_6=a(ch,"io.ReadWriter"),ch.forEach(t),m6=a(C,", "),Yp=p(C,"CODE",{});var rh=l(Yp);C6=a(rh,"io.WriteCloser"),rh.forEach(t),O6=a(C,", "),$p=p(C,"CODE",{});var uh=l($p);D6=a(uh,"io.WriteSeeker"),uh.forEach(t),b6=a(C,` 등이 있다.
이런 인터페이스들은 함수가 데이터에 대해 어떤 프로세스를 하는지 정확히 명시하기 위해 사용된다.`),C.forEach(t),uf=i(n),tt=p(n,"P",{});var X3=l(tt);R6=a(X3,"이를테면 파라미터의 타입으로 "),gp=p(X3,"CODE",{});var ih=l(gp);P6=a(ih,"os.File"),ih.forEach(t),y6=a(X3,`를 써주는 것보다는, 그 파라미터를 가지고 뭘 할건지 명시하기 위헤 인터페이스를 사용하는 것이 좋다.
또한 자체 데이터 소스나 싱크를 작성하는 경우, 코드가 이러한 인터페이스와 호환되도록 하는 것이 좋다.`),X3.forEach(t),df=i(n),b=p(n,"P",{});var W=l(b);nl=p(W,"CODE",{});var dh=l(nl);w6=a(dh,"ioutil"),dh.forEach(t),S6=a(W," 패키지는 "),sl=p(W,"CODE",{});var kh=l(sl);T6=a(kh,"io.Reader"),kh.forEach(t),h6=a(W,` 인스턴스에 대한 다양한 도구들을 제공한다.
byte slice로 한 번에 읽기, 파일 읽기 및 쓰기, 임시 파일 작업 등 보다 간단한 도구들이 포함된다.
이를테면 `),tl=p(W,"CODE",{});var fh=l(tl);H6=a(fh,"io.Reader"),fh.forEach(t),M6=a(W,", "),el=p(W,"CODE",{});var Eh=l(el);N6=a(Eh,"io.Writer"),Eh.forEach(t),x6=a(W,", "),al=p(W,"CODE",{});var vh=l(al);j6=a(vh,"bufio.Scanner"),vh.forEach(t),L6=a(W,` 등은 크기가 큰 데이터를 처리하는데 용이한 편이지만,
`),ol=p(W,"CODE",{});var _h=l(ol);A6=a(_h,"ioutil.ReadAll"),_h.forEach(t),W6=a(W,", "),pl=p(W,"CODE",{});var mh=l(pl);B6=a(mh,"ioutil.ReadFile"),mh.forEach(t),q6=a(W,", "),ll=p(W,"CODE",{});var Ch=l(ll);F6=a(Ch,"ioutil.WriteFile"),Ch.forEach(t),J6=a(W,"은 보다 작은 데이터를 처리하는데 유용하다."),W.forEach(t),kf=i(n),R=p(n,"P",{});var B=l(R);cl=p(B,"CODE",{});var Oh=l(cl);G6=a(Oh,"ioutil"),Oh.forEach(t),I6=a(B,` 패키지에는 유용한 함수들이 더 있다.
가령 `),rl=p(B,"CODE",{});var Dh=l(rl);U6=a(Dh,"io.Reader"),Dh.forEach(t),z6=a(B,"는 충족하지만 "),ul=p(B,"CODE",{});var bh=l(ul);Z6=a(bh,"io.Closer"),bh.forEach(t),Q6=a(B,"는 충족하지 않는 인스턴스("),il=p(B,"CODE",{});var Rh=l(il);K6=a(Rh,"strings.Reader"),Rh.forEach(t),V6=a(B,` 등)가 있고,
이를 `),dl=p(B,"CODE",{});var Ph=l(dl);X6=a(Ph,"io.ReadCloser"),Ph.forEach(t),Y6=a(B,`를 파라미터로 받는 함수에 넘겨야 한다고 가정해보자.
이 때 `),kl=p(B,"CODE",{});var yh=l(kl);$6=a(yh,"io.Reader"),yh.forEach(t),g6=a(B,"를 "),fl=p(B,"CODE",{});var wh=l(fl);n9=a(wh,"ioutil.NopCloser()"),wh.forEach(t),s9=a(B," 함수로 보내면 "),El=p(B,"CODE",{});var Sh=l(El);t9=a(Sh,"io.ReadCloser()"),Sh.forEach(t),e9=a(B," 타입을 반환할 것이고, 이걸 해당 함수의 파라미터로 넘기면 된다."),B.forEach(t),ff=i(n),et=p(n,"P",{});var Y3=l(et);a9=a(Y3,"실제로 "),vl=p(Y3,"CODE",{});var Th=l(vl);o9=a(Th,"ioutil.NopCloser()"),Th.forEach(t),p9=a(Y3,"의 구현을 들여다보면 생각보다 단순하다."),Y3.forEach(t),Ef=i(n),ve=p(n,"PRE",{class:!0});var GA=l(ve);GA.forEach(t),vf=i(n),ka=p(n,"P",{});var hh=l(ka);l9=a(hh,`위 구현을 보면 Go에서 타입에 메소드를 추가하는 패턴을 확인할 수 있다.
인터페이스를 충족할 수 있게끔 타입에 메소드를 추가해주고 싶다면, 이렇게 Embedded type 패턴을 사용해주면 된다.`),hh.forEach(t),_f=i(n),fa=p(n,"BLOCKQUOTE",{});var Hh=l(fa);_e=p(Hh,"P",{});var $3=l(_e);c9=a($3,`함수에서 인터페이스를 리턴하지 않는다는 규칙이 기억날 것이다.
`),_l=p($3,"CODE",{});var Mh=l(_l);r9=a(Mh,"ioutil.NopCloser()"),Mh.forEach(t),u9=a($3,` 함수는 이를 위반하긴 한다.
하지만 표준 라이브러리에 속하는 인터페이스끼리의 변환을 해주는 간단한 어댑터 역할만 하기 때문에 예외로 두고 넘어가 주자.`),$3.forEach(t),Hh.forEach(t),mf=i(n),Cf=p(n,"BR",{}),Of=p(n,"BR",{}),Df=i(n),at=p(n,"H2",{id:!0});var Kw=l(at);ot=p(Kw,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Nh=l(ot);ml=p(Nh,"SPAN",{class:!0}),l(ml).forEach(t),Nh.forEach(t),i9=a(Kw,"time"),Kw.forEach(t),bf=i(n),Rf=p(n,"HR",{}),Pf=i(n),Nn=p(n,"P",{});var Xt=l(Nn);d9=a(Xt,"다른 언어들처럼 Go에도 시간 연산을 하는 라이브러리인 "),Cl=p(Xt,"CODE",{});var xh=l(Cl);k9=a(xh,"time"),xh.forEach(t),f9=a(Xt,` 패키지가 있다.
시간을 나타내는 주요 타입이 두 가지 있는데, 바로 `),Ol=p(Xt,"CODE",{});var jh=l(Ol);E9=a(jh,"time.Duration"),jh.forEach(t),v9=a(Xt,"과 "),Dl=p(Xt,"CODE",{});var Lh=l(Dl);_9=a(Lh,"time.Time"),Lh.forEach(t),m9=a(Xt,"이다."),Xt.forEach(t),yf=i(n),ln=p(n,"P",{});var ws=l(ln);C9=a(ws,"시각 사이의 시간은 "),bl=p(ws,"CODE",{});var Ah=l(bl);O9=a(Ah,"time.Duration"),Ah.forEach(t),D9=a(ws,"으로 표현되며, 이는 "),Rl=p(ws,"CODE",{});var Wh=l(Rl);b9=a(Wh,"int64"),Wh.forEach(t),R9=a(ws,` 기반이다.
Go의 시간 최소단위는 나노초(ns)이고, `),Pl=p(ws,"CODE",{});var Bh=l(Pl);P9=a(Bh,"time"),Bh.forEach(t),y9=a(ws," 패키지에서는 "),yl=p(ws,"CODE",{});var qh=l(yl);w9=a(qh,"time.Duration"),qh.forEach(t),S9=a(ws,` 타입의
나노초(nanosecond), 마이크로초(microsecond), 밀리초(milisecond), 초(second), 분(minute), 시간(hour) 상수를 정의한다.`),ws.forEach(t),wf=i(n),Ea=p(n,"P",{});var Fh=l(Ea);T9=a(Fh,"예를 들어, 2시간 30분은 아래와 같이 정의한다."),Fh.forEach(t),Sf=i(n),me=p(n,"PRE",{class:!0});var IA=l(me);IA.forEach(t),Tf=i(n),pt=p(n,"P",{});var g3=l(pt);h9=a(g3,"이러한 상수들을 사용하면 "),wl=p(g3,"CODE",{});var Jh=l(wl);H9=a(Jh,"time.Duration"),Jh.forEach(t),M9=a(g3," 타입을 readable하고 type-safe하게 만들어준다."),g3.forEach(t),hf=i(n),Hf=p(n,"BR",{}),Mf=i(n),xn=p(n,"P",{});var Yt=l(xn);N9=a(Yt,"Go는 "),Sl=p(Yt,"CODE",{});var Gh=l(Sl);x9=a(Gh,"time,ParseDuration()"),Gh.forEach(t),j9=a(Yt," 함수에 특정한 스트링 포맷이나 숫자들의 배열을 넘겨서 "),Tl=p(Yt,"CODE",{});var Ih=l(Tl);L9=a(Ih,"time.Duration"),Ih.forEach(t),A9=a(Yt,` 타입으로 파싱할 수 있다.
이에 대한 설명은 `),Ce=p(Yt,"A",{href:!0,rel:!0});var Uh=l(Ce);W9=a(Uh,"표준 라이브러리 문서"),Uh.forEach(t),B9=a(Yt,`에 작성되어 있다.
아래 내용은 원문인데, 번역하는 것보다 영어로 읽는게 더 편할것 같아서 따로 번역하지는 않았다.`),Yt.forEach(t),Nf=i(n),va=p(n,"BLOCKQUOTE",{});var zh=l(va);hl=p(zh,"P",{});var Zh=l(hl);q9=a(Zh,`A duration string is a possibly signed sequence of decimal numbers,
each with optional fraction and a unit suffix, such as “300ms”, “-1.5h” or “2h45m”.
Valid time units are “ns”, “us” (or “µs”), “ms”, “s”, “m”, “h”.`),Zh.forEach(t),zh.forEach(t),xf=i(n),P=p(n,"P",{});var q=l(P);Hl=p(q,"CODE",{});var Qh=l(Hl);F9=a(Qh,"time.Duration"),Qh.forEach(t),J9=a(q,"에는 여러 가지 메소드들이 정의되어 있고, "),Ml=p(q,"CODE",{});var Kh=l(Ml);G9=a(Kh,"fmt.Stringer"),Kh.forEach(t),I9=a(q,` 인터페이스를 충족시킨다.
따라서 `),Nl=p(q,"CODE",{});var Vh=l(Nl);U9=a(Vh,"fmt.Stringer"),Vh.forEach(t),z9=a(q,"에 정의된 "),xl=p(q,"CODE",{});var Xh=l(xl);Z9=a(Xh,"String()"),Xh.forEach(t),Q9=a(q,` 메소드를 호출하면 formatted string을 반환받는다.
또한 `),jl=p(q,"CODE",{});var Yh=l(jl);K9=a(Yh,"Truncate"),Yh.forEach(t),V9=a(q,"나 "),Ll=p(q,"CODE",{});var $h=l(Ll);X9=a($h,"Round"),$h.forEach(t),Y9=a(q," 메소드를 쓰면 "),Al=p(q,"CODE",{});var gh=l(Al);$9=a(gh,"time.Duration"),gh.forEach(t),g9=a(q,"을 지정된 "),Wl=p(q,"CODE",{});var nH=l(Wl);n4=a(nH,"time.Duration"),nH.forEach(t),s4=a(q," 단위만큼 반올림하거나 자른다."),q.forEach(t),jf=i(n),Lf=p(n,"BR",{}),Af=i(n),jn=p(n,"P",{});var $t=l(jn);t4=a($t,"특정한 시각의 경우 "),Bl=p($t,"CODE",{});var sH=l(Bl);e4=a(sH,"time.Time"),sH.forEach(t),a4=a($t,` 타입으로 표현되는데, 시간대(time zone)를 명시해 주어야 한다.
또한 `),ql=p($t,"CODE",{});var tH=l(ql);o4=a(tH,"Time.Now()"),tH.forEach(t),p4=a($t," 함수로 현재 로컬 시간인 "),Fl=p($t,"CODE",{});var eH=l(Fl);l4=a(eH,"time.Time()"),eH.forEach(t),c4=a($t," 인스턴스를 얻을 수 있다."),$t.forEach(t),Wf=i(n),Dn=p(n,"P",{});var Us=l(Dn);Jl=p(Us,"CODE",{});var aH=l(Jl);r4=a(aH,"time.Time"),aH.forEach(t),u4=a(Us,` 인스턴스는 시간대에 대한 정보까지 포함하기 때문에,
두 개의 `),Gl=p(Us,"CODE",{});var oH=l(Gl);i4=a(oH,"time.Time"),oH.forEach(t),d4=a(Us," 인스턴스가 같은 시간대를 나타내더라도 "),Il=p(Us,"CODE",{});var pH=l(Il);k4=a(pH,"=="),pH.forEach(t),f4=a(Us,` 연산자를 사용하면 제대로 된 결과가 나타나지 않을 수 있다.
`),Ul=p(Us,"CODE",{});var lH=l(Ul);E4=a(lH,"Equal()"),lH.forEach(t),v4=a(Us," 메소드를 사용하면, 표준 시간대를 기준으로 비교해준다."),Us.forEach(t),Bf=i(n),L=p(n,"P",{});var Sn=l(L);zl=p(Sn,"CODE",{});var cH=l(zl);_4=a(cH,"time.Parse()"),cH.forEach(t),m4=a(Sn," 함수는 "),Zl=p(Sn,"CODE",{});var rH=l(Zl);C4=a(rH,"string"),rH.forEach(t),O4=a(Sn,"을 "),Ql=p(Sn,"CODE",{});var uH=l(Ql);D4=a(uH,"time.Time"),uH.forEach(t),b4=a(Sn," 타입으로 변환해주고, "),Kl=p(Sn,"CODE",{});var iH=l(Kl);R4=a(iH,"Format()"),iH.forEach(t),P4=a(Sn," 메소드는 "),Vl=p(Sn,"CODE",{});var dH=l(Vl);y4=a(dH,"time.Time"),dH.forEach(t),w4=a(Sn," 타입을 "),Xl=p(Sn,"CODE",{});var kH=l(Xl);S4=a(kH,"string"),kH.forEach(t),T4=a(Sn,"으로 변환해준다."),Sn.forEach(t),qf=i(n),Oe=p(n,"PRE",{class:!0});var UA=l(Oe);UA.forEach(t),Ff=i(n),_a=p(n,"P",{});var fH=l(_a);h4=a(fH,"출력 결과는 다음과 같다."),fH.forEach(t),Jf=i(n),De=p(n,"PRE",{class:!0});var zA=l(De);zA.forEach(t),Gf=i(n),lt=p(n,"P",{});var nv=l(lt);H4=a(nv,`이러한 날짜나 시간 포맷은 유용하게 사용되게끔 의도되었지만, 기억하기 힘들기 때문에 사용하려 할 때마다 찾아봐야 한다는 단점이 있다.
다행히도 주로 사용되는 날짜 및 시각 포맷은 `),Yl=p(nv,"CODE",{});var EH=l(Yl);M4=a(EH,"time"),EH.forEach(t),N4=a(nv," 패키지에서 상수로 주어진다."),nv.forEach(t),If=i(n),k=p(n,"P",{});var f=l(k);$l=p(f,"CODE",{});var vH=l($l);x4=a(vH,"time.Duration"),vH.forEach(t),j4=a(f,"처럼, "),gl=p(f,"CODE",{});var _H=l(gl);L4=a(_H,"time.Time"),_H.forEach(t),A4=a(f,"에도 "),nc=p(f,"CODE",{});var mH=l(nc);W4=a(mH,"Day"),mH.forEach(t),B4=a(f,", "),sc=p(f,"CODE",{});var CH=l(sc);q4=a(CH,"Month"),CH.forEach(t),F4=a(f,", "),tc=p(f,"CODE",{});var OH=l(tc);J4=a(OH,"Year"),OH.forEach(t),G4=a(f,", "),ec=p(f,"CODE",{});var DH=l(ec);I4=a(DH,"Hour"),DH.forEach(t),U4=a(f,", "),ac=p(f,"CODE",{});var bH=l(ac);z4=a(bH,"Minute"),bH.forEach(t),Z4=a(f,", "),oc=p(f,"CODE",{});var RH=l(oc);Q4=a(RH,"Second"),RH.forEach(t),K4=a(f,", "),pc=p(f,"CODE",{});var PH=l(pc);V4=a(PH,"Weekday"),PH.forEach(t),X4=a(f,", "),lc=p(f,"CODE",{});var yH=l(lc);Y4=a(yH,"Clock"),yH.forEach(t),$4=a(f,` 등 시각의 일부분을 추출할 수 있는 메소드가 존재한다.
이 중 `),cc=p(f,"CODE",{});var wH=l(cc);g4=a(wH,"Clock()"),wH.forEach(t),n8=a(f," 메소드는 시, 분, 초를 각각의 "),rc=p(f,"CODE",{});var SH=l(rc);s8=a(SH,"int"),SH.forEach(t),t8=a(f,"로 반환하고, "),uc=p(f,"CODE",{});var TH=l(uc);e8=a(TH,"Date()"),TH.forEach(t),a8=a(f,"는 연, 월, 일을 각각의 "),ic=p(f,"CODE",{});var hH=l(ic);o8=a(hH,"int"),hH.forEach(t),p8=a(f,`로 반환한다.
또한 `),dc=p(f,"CODE",{});var HH=l(dc);l8=a(HH,"time.Time"),HH.forEach(t),c8=a(f," 인스턴스는 "),kc=p(f,"CODE",{});var MH=l(kc);r8=a(MH,"After"),MH.forEach(t),u8=a(f,", "),fc=p(f,"CODE",{});var NH=l(fc);i8=a(NH,"Before"),NH.forEach(t),d8=a(f,", "),Ec=p(f,"CODE",{});var xH=l(Ec);k8=a(xH,"Equal"),xH.forEach(t),f8=a(f," 메소드를 통해 다른 인스턴스와 비교할 수 있다."),f.forEach(t),Uf=i(n),E=p(n,"P",{});var m=l(E);vc=p(m,"CODE",{});var jH=l(vc);E8=a(jH,"time.Time"),jH.forEach(t),v8=a(m,"의 "),_c=p(m,"CODE",{});var LH=l(_c);_8=a(LH,"Sub()"),LH.forEach(t),m8=a(m," 메소드는 두 시각 사이의 경과 시간을 "),mc=p(m,"CODE",{});var AH=l(mc);C8=a(AH,"time.Duration"),AH.forEach(t),O8=a(m,`으로 반환하며,
`),Cc=p(m,"CODE",{});var WH=l(Cc);D8=a(WH,"time.Time"),WH.forEach(t),b8=a(m,"의 "),Oc=p(m,"CODE",{});var BH=l(Oc);R8=a(BH,"Add()"),BH.forEach(t),P8=a(m," 메소드는 "),Dc=p(m,"CODE",{});var qH=l(Dc);y8=a(qH,"time.Duration"),qH.forEach(t),w8=a(m,"을 파라미터로 받아 해당 시간만큼 더해진 시각의 "),bc=p(m,"CODE",{});var FH=l(bc);S8=a(FH,"time.Time"),FH.forEach(t),T8=a(m,` 인스턴스를 반환한다.
`),Rc=p(m,"CODE",{});var JH=l(Rc);h8=a(JH,"time.Time"),JH.forEach(t),H8=a(m,"의 "),Pc=p(m,"CODE",{});var GH=l(Pc);M8=a(GH,"AddDate()"),GH.forEach(t),N8=a(m," 메소드는 연, 월, 일을 각각 입력받아 그만큼 더해진 날짜의 "),yc=p(m,"CODE",{});var IH=l(yc);x8=a(IH,"time.Time"),IH.forEach(t),j8=a(m,` 인스턴스를 반환한다.
`),wc=p(m,"CODE",{});var UH=l(wc);L8=a(UH,"time.Duration"),UH.forEach(t),A8=a(m," 인스턴스를 인자로 주고, 앞서 언급한 "),Sc=p(m,"CODE",{});var zH=l(Sc);W8=a(zH,"Truncate()"),zH.forEach(t),B8=a(m,"와 "),Tc=p(m,"CODE",{});var ZH=l(Tc);q8=a(ZH,"Round()"),ZH.forEach(t),F8=a(m," 메소드를 사용할 수도 있다."),m.forEach(t),zf=i(n),ds=p(n,"P",{});var Ja=l(ds);J8=a(Ja,"이러한 메소드들은 모두 "),hc=p(Ja,"EM",{});var QH=l(hc);G8=a(QH,"value receiver"),QH.forEach(t),I8=a(Ja,"로 정의되었기 때문에, 원래의 "),Hc=p(Ja,"CODE",{});var KH=l(Hc);U8=a(KH,"time.Time"),KH.forEach(t),z8=a(Ja," 인스턴스를 변경하지 않는다."),Ja.forEach(t),Zf=i(n),Qf=p(n,"BR",{}),Kf=p(n,"BR",{}),Vf=i(n),ct=p(n,"H3",{id:!0});var Vw=l(ct);rt=p(Vw,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var VH=l(rt);Mc=p(VH,"SPAN",{class:!0}),l(Mc).forEach(t),VH.forEach(t),Z8=a(Vw,"Monotonic Time"),Vw.forEach(t),Xf=i(n),ks=p(n,"P",{});var Ga=l(ks);Q8=a(Ga,`대부분의 OS에서는 두 종류의 시각을 기록하고 있다.
그중 `),Nc=p(Ga,"EM",{});var XH=l(Nc);K8=a(XH,"wall clock"),XH.forEach(t),V8=a(Ga,"은 말 그대로 현재 시각에 대응하는 것이며, "),xc=p(Ga,"EM",{});var YH=l(xc);X8=a(YH,"monotonic clock"),YH.forEach(t),Y8=a(Ga,`은 컴퓨터가 켜진 시각으로부터 얼마만큼 시간이 흘렀는지를 의미한다.
두 종류의 시각을 기록하는 이유는, wall clock이 일정하게 증가하는 것이 아니기 때문이다.
서머타임(Daylight Saving Time), 윤초(leap seconds), Network Time Protocol의 업데이트로 인해 wall clock에는 오차가 생길 수 있으며,
이로 인해 타이머를 실행하거나 경과된 시간을 얻고자 할 때 문제가 생길 수 있다.`),Ga.forEach(t),Yf=i(n),S=p(n,"P",{});var Q=l(S);$8=a(Q,"이러한 잠재적인 문제점을 해결하기 위해, Go에서는 "),jc=p(Q,"CODE",{});var $H=l(jc);g8=a($H,"time.Now()"),$H.forEach(t),n7=a(Q,"로 "),Lc=p(Q,"CODE",{});var gH=l(Lc);s7=a(gH,"time.Time"),gH.forEach(t),t7=a(Q,` 인스턴스가 생성되거나 타이머가 설정될 때
monotonic time을 사용하여 경과 시간을 추적한다.
`),Ac=p(Q,"CODE",{});var nM=l(Ac);e7=a(nM,"Sub()"),nM.forEach(t),a7=a(Q," 메소드는 두 "),Wc=p(Q,"CODE",{});var sM=l(Wc);o7=a(sM,"time.Time"),sM.forEach(t),p7=a(Q," 인스턴스가 모두 monotonic time이 설정된 경우, monotonic time을 이용하여 "),Bc=p(Q,"CODE",{});var tM=l(Bc);l7=a(tM,"time.Duration"),tM.forEach(t),c7=a(Q,`을 계산한다.
만약 그렇지 않다면 `),qc=p(Q,"CODE",{});var eM=l(qc);r7=a(eM,"Sub()"),eM.forEach(t),u7=a(Q," 메소드는 인스턴스에 지정된 시간을 사용하여 "),Fc=p(Q,"CODE",{});var aM=l(Fc);i7=a(aM,"time.Duration"),aM.forEach(t),d7=a(Q,"을 계산한다."),Q.forEach(t),$f=i(n),gf=p(n,"BR",{}),n1=p(n,"BR",{}),s1=i(n),ut=p(n,"H3",{id:!0});var Xw=l(ut);it=p(Xw,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var oM=l(it);Jc=p(oM,"SPAN",{class:!0}),l(Jc).forEach(t),oM.forEach(t),k7=a(Xw,"Timers and Timeout"),Xw.forEach(t),t1=i(n),cn=p(n,"P",{});var Ss=l(cn);f7=a(Ss,"앞선 포스트에서 다루었듯, "),Gc=p(Ss,"CODE",{});var pM=l(Gc);E7=a(pM,"time"),pM.forEach(t),v7=a(Ss,` 패키지에는 채널을 리턴하여 일정 시간이 지난 후 값이 출력되는 함수가 내장되어 있다.
`),Ic=p(Ss,"CODE",{});var lM=l(Ic);_7=a(lM,"time.After()"),lM.forEach(t),m7=a(Ss,` 함수는 일정 시간이 지나면 값이 단 한번 출력되는 채널을 리턴한다.
반면 `),Uc=p(Ss,"CODE",{});var cM=l(Uc);C7=a(cM,"time.Tick()"),cM.forEach(t),O7=a(Ss," 함수에서 리턴되는 채널은 파라미터로 넘어온 "),zc=p(Ss,"CODE",{});var rM=l(zc);D7=a(rM,"time.Duration"),rM.forEach(t),b7=a(Ss,` 만큼의 시간이 흐를 때마다 값이 출력된다.
이러한 함수들은 시간 초과 및 반복 작업을 가능하게 함으로써 Go의 동시성을 지원한다.`),Ss.forEach(t),e1=i(n),fs=p(n,"P",{});var Ia=l(fs);R7=a(Ia,"다만 "),Zc=p(Ia,"CODE",{});var uM=l(Zc);P7=a(uM,"Time.Tick()"),uM.forEach(t),y7=a(Ia,` 함수는 멈출 수 없고, 따라서 가비지 컬렉터에 의해 정리되지도 않는다.
그래서 `),Qc=p(Ia,"CODE",{});var iM=l(Qc);w7=a(iM,"Time.NewTicker()"),iM.forEach(t),S7=a(Ia,"를 사용하는데 이 함수는 채널을 닫거나 간격을 재설정하는 메소드를 함께 제공하니, 되도록 이 쪽을 선택하는 게 좋을 것 같다."),Ia.forEach(t),a1=i(n),ma=p(n,"P",{});var dM=l(ma);T7=a(dM,"위 함수들을 사용하는 예제가 따로 없길래 대충 짜보았다."),dM.forEach(t),o1=i(n),be=p(n,"PRE",{class:!0});var ZA=l(be);ZA.forEach(t),p1=i(n),l1=p(n,"BR",{}),c1=p(n,"BR",{}),r1=i(n),dt=p(n,"H2",{id:!0});var Yw=l(dt);kt=p(Yw,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var kM=l(kt);Kc=p(kM,"SPAN",{class:!0}),l(Kc).forEach(t),kM.forEach(t),h7=a(Yw,"encoding/json"),Yw.forEach(t),u1=i(n),i1=p(n,"HR",{}),d1=i(n),Es=p(n,"P",{});var Ua=l(Es);H7=a(Ua,`REST API는 JSON을 주고받는 통신을 한다. 따라서 Go의 표준 라이브러리는 JSON과 Go 데이터 타입의 상호 변환을 지원한다.
`),Vc=p(Ua,"EM",{});var fM=l(Vc);M7=a(fM,"marshaling"),fM.forEach(t),N7=a(Ua,"이란 Go 데이터 타입에서 인코딩된 JSON으로 변환하는 것을 의미하며, "),Xc=p(Ua,"EM",{});var EM=l(Xc);x7=a(EM,"unmarshaling"),EM.forEach(t),j7=a(Ua,"이란 그 반대를 의미한다."),Ua.forEach(t),k1=i(n),f1=p(n,"BR",{}),E1=p(n,"BR",{}),v1=i(n),ft=p(n,"H3",{id:!0});var $w=l(ft);Et=p($w,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var vM=l(Et);Yc=p(vM,"SPAN",{class:!0}),l(Yc).forEach(t),vM.forEach(t),L7=a($w,"Use Struct Tags to Add Metadata"),$w.forEach(t),_1=i(n),Ca=p(n,"P",{});var _M=l(Ca);A7=a(_M,"우리가 주문 관리 시스템을 만들고 있다고 가정하고, 아래 JSON 파일을 확인해보자."),_M.forEach(t),m1=i(n),Re=p(n,"PRE",{class:!0});var QA=l(Re);QA.forEach(t),C1=i(n),Oa=p(n,"P",{});var mM=l(Oa);W7=a(mM,"이제 이 타입과 대응되는 타입을 정의해 보자."),mM.forEach(t),O1=i(n),Pe=p(n,"PRE",{class:!0});var KA=l(Pe);KA.forEach(t),D1=i(n),vs=p(n,"P",{});var za=l(vs);B7=a(za,`JSON으로 변환되는 struct임을 명시하기 위해서는 구조체에 필드를 입력해준 뒤 struct tag를 입력해줘야 한다.
struct tag는 backtick(`),$c=p(za,"CODE",{});var CM=l($c);q7=a(CM,"`"),CM.forEach(t),F7=a(za,`)으로 문자열을 감싸는 구조이지만, 한 줄 이상 이어서 작성할 수 없다.
struct tag는 한 개 이상의 tag/value 쌍으로 이루어져 있으며, `),gc=p(za,"CODE",{});var OM=l(gc);J7=a(OM,'tagName: "tagValue"'),OM.forEach(t),G7=a(za,"의 구조로 작성되며 공백으로 구분한다."),za.forEach(t),b1=i(n),_s=p(n,"P",{});var Za=l(_s);I7=a(Za,`struct tag는 그냥 문자열이기 때문에, 컴파일러는 얘네가 제대로 작성되어 있는지 알 수가 없다.
다만 `),nr=p(Za,"CODE",{});var DM=l(nr);U7=a(DM,"go vet"),DM.forEach(t),z7=a(Za,` 명령어를 치면 검증할 수 있으며, 이러한 모든 필드들은 export된다.
다른 패키지와 마찬가지로, `),sr=p(Za,"CODE",{});var bM=l(sr);Z7=a(bM,"encoding/json"),bM.forEach(t),Q7=a(Za," 패키지의 코드들은 구조체의 export되지 않은 필드에 접근할 수 없다."),Za.forEach(t),R1=i(n),ms=p(n,"P",{});var Qa=l(ms);K7=a(Qa,"JSON을 처리하기 위해서는 태그명을 "),tr=p(Qa,"CODE",{});var RM=l(tr);V7=a(RM,"json"),RM.forEach(t),X7=a(Qa,`으로 지어서 구조체 필드와 연결되어야 하는 JSON 필드의 이름을 지정해주어야 한다.
만약 `),er=p(Qa,"CODE",{});var PM=l(er);Y7=a(PM,"json"),PM.forEach(t),$7=a(Qa,` 태그를 지정하지 않으면 기본적으로 JSON 객체의 필드명과 구조체의 필드명을 매칭시킨다.
하지만 실제로는 필드명이 같다고 하더라도 struct tag를 명시해주는 것이 좋다.`),Qa.forEach(t),P1=i(n),Ln=p(n,"P",{});var gt=l(Ln);g7=a(gt,"JSON을 구조체로 "),ar=p(gt,"EM",{});var yM=l(ar);nm=a(yM,"unmarshaling"),yM.forEach(t),sm=a(gt,"할 때 "),or=p(gt,"CODE",{});var wM=l(or);tm=a(wM,"json"),wM.forEach(t),em=a(gt,` 태그가 명시되어있지 않으면, 필드가 매칭될때 대소문자를 구분하지 않는다.
반대로 구조체를 JSON으로 `),pr=p(gt,"EM",{});var SM=l(pr);am=a(SM,"marshaling"),SM.forEach(t),om=a(gt,"할 때 구조체 필드가 export되려면 첫 글자가 대문자일 수 밖에 없기 때문에, JSON 태그도 항상 대문자가 된다."),gt.forEach(t),y1=i(n),rn=p(n,"P",{});var Ts=l(rn);pm=a(Ts,"만약 "),lr=p(Ts,"EM",{});var TM=l(lr);lm=a(TM,"marshaling"),TM.forEach(t),cm=a(Ts," 또는 "),cr=p(Ts,"EM",{});var hM=l(cr);rm=a(hM,"unmarshaling"),hM.forEach(t),um=a(Ts,"을 할 때 무시해야 하는 필드가 있다면 필드명으로 대시("),rr=p(Ts,"CODE",{});var HM=l(rr);im=a(HM,"-"),HM.forEach(t),dm=a(Ts,`)를 써주면 된다.
만약 필드가 비어있을 때 출력에서 제외되어야 하는 경우, 이름 뒤에 `),ur=p(Ts,"CODE",{});var MM=l(ur);km=a(MM,",omitempty"),MM.forEach(t),fm=a(Ts,`를 추가한다.
이 때 필드가 비어있다는 것은 Zero value를 의미하는 것이 아니라, zero-length slice나 map 등이 이에 해당한다.`),Ts.forEach(t),w1=i(n),Cs=p(n,"P",{});var Ka=l(Cs);Em=a(Ka,`struct tag는 메타데이터를 사용하여 프로그램의 행동을 제어할 수 있게 해준다.
Java와 같은 다른 언어에서는 개발자들이 프로그램 요소에 주석을 달아
프로그램이 `),ir=p(Ka,"EM",{});var NM=l(ir);vm=a(NM,"어떤"),NM.forEach(t),_m=a(Ka," 처리를 하는 것에 대해 기술하는 것보다는 "),dr=p(Ka,"EM",{});var xM=l(dr);mm=a(xM,"어떻게"),xM.forEach(t),Cm=a(Ka," 처리되어야 할지 설명하도록 장려한다."),Ka.forEach(t),S1=i(n),Da=p(n,"P",{});var jM=l(Da);Om=a(jM,`Java에서 주석을 달던 사람들은 무언가 잘못됐을 때, 특히 어떤 코드가 주석이 달려있음에도 어떤 역할을 하는지 이해하지 못할 때 당황하는 경향이 있다.
Go에서는 짧은 코드보단 명시적인 코드를 좋아한다.
struct tag는 자동으로 evaluate되지 않으며, 구조체 인스턴스가 함수로 전달될 때 처리된다.`),jM.forEach(t),T1=i(n),h1=p(n,"BR",{}),H1=p(n,"BR",{}),M1=i(n),vt=p(n,"H3",{id:!0});var gw=l(vt);_t=p(gw,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var LM=l(_t);kr=p(LM,"SPAN",{class:!0}),l(kr).forEach(t),LM.forEach(t),Dm=a(gw,"Unmarshaling and Marshaling"),gw.forEach(t),N1=i(n),x1=p(n,"HR",{}),j1=i(n),y=p(n,"P",{});var F=l(y);fr=p(F,"CODE",{});var AM=l(fr);bm=a(AM,"encoding/json"),AM.forEach(t),Rm=a(F," 패키지의 "),Er=p(F,"CODE",{});var WM=l(Er);Pm=a(WM,"json.Unmarshal()"),WM.forEach(t),ym=a(F," 함수는 "),vr=p(F,"CODE",{});var BM=l(vr);wm=a(BM,"byte"),BM.forEach(t),Sm=a(F,"의 "),_r=p(F,"CODE",{});var qM=l(_r);Tm=a(qM,"slice"),qM.forEach(t),hm=a(F,"를 "),mr=p(F,"CODE",{});var FM=l(mr);Hm=a(FM,"struct"),FM.forEach(t),Mm=a(F,`로 변환해준다.
아래 예제는 `),Cr=p(F,"CODE",{});var JM=l(Cr);Nm=a(JM,"data"),JM.forEach(t),xm=a(F,"라는 문자열 변수를 "),Or=p(F,"CODE",{});var GM=l(Or);jm=a(GM,"struct"),GM.forEach(t),Lm=a(F,"를 위에서 확인한 "),Dr=p(F,"CODE",{});var IM=l(Dr);Am=a(IM,"Order"),IM.forEach(t),Wm=a(F," 구조체 타입으로 변환하는 예제이다."),F.forEach(t),L1=i(n),ye=p(n,"PRE",{class:!0});var VA=l(ye);VA.forEach(t),A1=i(n),js=p(n,"P",{});var ok=l(js);br=p(ok,"CODE",{});var UM=l(br);Bm=a(UM,"json.Unmarshal()"),UM.forEach(t),qm=a(ok," 함수는 "),Rr=p(ok,"CODE",{});var zM=l(Rr);Fm=a(zM,"io.Reader"),zM.forEach(t),Jm=a(ok,`처럼 데이터를 입력 파라미터에 생성한다.
이는 두 가지 이유가 있는데, 첫 번째는 쉽게 예상할 수 있듯 동일한 구조체를 재사용하여 효율적으로 메모리를 사용할 수 때문이다.
두 번째는 달리 다른 방법이 없기 때문이다.
Go에는 제네릭이 없기 때문에, 인스턴스로 만들 구조체의 타입을 지정할 방법이 달리 없다.
만약 Go에도 제네릭이 생긴다 해도, 메모리 사용의 이점때문에 이 방식이 그대로 사용되리라 예상된다.`),ok.forEach(t),W1=i(n),B1=p(n,"BR",{}),q1=i(n),un=p(n,"P",{});var hs=l(un);Pr=p(hs,"CODE",{});var ZM=l(Pr);Gm=a(ZM,"encoding/json"),ZM.forEach(t),Im=a(hs," 패키지의 "),yr=p(hs,"CODE",{});var QM=l(yr);Um=a(QM,"json.Marshal()"),QM.forEach(t),zm=a(hs," 함수는 구조체 인스턴스를 다시 "),wr=p(hs,"CODE",{});var KM=l(wr);Zm=a(KM,"byte"),KM.forEach(t),Qm=a(hs,"의 "),Sr=p(hs,"CODE",{});var VM=l(Sr);Km=a(VM,"slice"),VM.forEach(t),Vm=a(hs,`인 JSON으로 변환해준다.
`),Tr=p(hs,"CODE",{});var XM=l(Tr);Xm=a(XM,"json.Marshal()"),XM.forEach(t),hs.forEach(t),F1=i(n),we=p(n,"PRE",{class:!0});var XA=l(we);XA.forEach(t),J1=i(n),G1=p(n,"BR",{}),I1=p(n,"BR",{}),U1=i(n),mt=p(n,"H3",{id:!0});var nS=l(mt);Ct=p(nS,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var YM=l(Ct);hr=p(YM,"SPAN",{class:!0}),l(hr).forEach(t),YM.forEach(t),Ym=a(nS,"JSON, Readers, and Writers"),nS.forEach(t),z1=i(n),_=p(n,"P",{});var O=l(_);Hr=p(O,"CODE",{});var $M=l(Hr);$m=a($M,"json.Marshal()"),$M.forEach(t),gm=a(O,"와 "),Mr=p(O,"CODE",{});var gM=l(Mr);nC=a(gM,"json.Unmarshal()"),gM.forEach(t),sC=a(O," 함수는 "),Nr=p(O,"CODE",{});var nN=l(Nr);tC=a(nN,"[]byte"),nN.forEach(t),eC=a(O,`를 사용한다.
또한 대부분의 데이터 소스와 싱크가 `),xr=p(O,"CODE",{});var sN=l(xr);aC=a(sN,"io.Reader"),sN.forEach(t),oC=a(O,"와 "),jr=p(O,"CODE",{});var tN=l(jr);pC=a(tN,"io.Writer"),tN.forEach(t),lC=a(O,` 인터페이스를 충족시키는 것을 알고 있다.
그래서 `),Lr=p(O,"CODE",{});var eN=l(Lr);cC=a(eN,"ioutil.ReadAll()"),eN.forEach(t),rC=a(O,"을 통해 "),Ar=p(O,"CODE",{});var aN=l(Ar);uC=a(aN,"io.Reader"),aN.forEach(t),iC=a(O,"의 모든 내용을 "),Wr=p(O,"CODE",{});var oN=l(Wr);dC=a(oN,"[]byte"),oN.forEach(t),kC=a(O,"에 저장하여 "),Br=p(O,"CODE",{});var pN=l(Br);fC=a(pN,"json.Unmarshal()"),pN.forEach(t),EC=a(O,`을 사용할 수 있지만, 이 방식은 비효율적이다.
비슷하게 `),qr=p(O,"CODE",{});var lN=l(qr);vC=a(lN,"json.Marshal()"),lN.forEach(t),_C=a(O," 함수를 통해 인메모리 "),Fr=p(O,"CODE",{});var cN=l(Fr);mC=a(cN,"[]byte"),cN.forEach(t),CC=a(O,` 버퍼에 값을 쓰고, 해당 버퍼의 데이터를 네티워크나 디스크에 쓸 수 있다.
다만 그 경우 `),Jr=p(O,"CODE",{});var rN=l(Jr);OC=a(rN,"io.Writer"),rN.forEach(t),DC=a(O,"에 직접 데이터를 쓰는 편이 더 효율적일 것이다."),O.forEach(t),Z1=i(n),$=p(n,"P",{});var ns=l($);Gr=p(ns,"CODE",{});var uN=l(Gr);bC=a(uN,"encoding/json"),uN.forEach(t),RC=a(ns,` 이러한 상황을 다루기 위한 두 가지 타입을 포함하고 있다.
바로 `),Ir=p(ns,"CODE",{});var iN=l(Ir);PC=a(iN,"json.Decoder"),iN.forEach(t),yC=a(ns,"와 "),Ur=p(ns,"CODE",{});var dN=l(Ur);wC=a(dN,"json.Encoder"),dN.forEach(t),SC=a(ns," 타입이며, 이 타입들은 "),zr=p(ns,"CODE",{});var kN=l(zr);TC=a(kN,"io.Reader"),kN.forEach(t),hC=a(ns,", "),Zr=p(ns,"CODE",{});var fN=l(Zr);HC=a(fN,"io.Writer"),fN.forEach(t),MC=a(ns,` 인터페이스를 충족시키면서 읽기/쓰기를 할 수 있게 해준다.
간단한 예제를 확인해보자.`),ns.forEach(t),Q1=i(n),Se=p(n,"PRE",{class:!0});var YA=l(Se);YA.forEach(t),K1=i(n),V1=p(n,"BR",{}),X1=i(n),D=p(n,"P",{});var M=l(D);Qr=p(M,"CODE",{});var EN=l(Qr);NC=a(EN,"os.File"),EN.forEach(t),xC=a(M," 타입은 "),Kr=p(M,"CODE",{});var vN=l(Kr);jC=a(vN,"io.Writer"),vN.forEach(t),LC=a(M,"와 "),Vr=p(M,"CODE",{});var _N=l(Vr);AC=a(_N,"io.Reader"),_N.forEach(t),WC=a(M," 인터페이스를 모두 충족시키기 때문에, "),Xr=p(M,"CODE",{});var mN=l(Xr);BC=a(mN,"json.Decoder"),mN.forEach(t),qC=a(M,"와 "),Yr=p(M,"CODE",{});var CN=l(Yr);FC=a(CN,"json.Encodeer"),CN.forEach(t),JC=a(M,`를 시연하는 데 사용해보자.
먼저 임시 파일 인스턴스를 만들어 `),$r=p(M,"CODE",{});var ON=l($r);GC=a(ON,"json.NewEncoder()"),ON.forEach(t),IC=a(M," 함수에 넘기면, 임시 파일에 대한 "),gr=p(M,"CODE",{});var DN=l(gr);UC=a(DN,"json.Encoder"),DN.forEach(t),zC=a(M,` 인스턴스를 생성한다.
그 후 `),nu=p(M,"CODE",{});var bN=l(nu);ZC=a(bN,"Encode()"),bN.forEach(t),QC=a(M," 메소드를 호출할 때 "),su=p(M,"CODE",{});var RN=l(su);KC=a(RN,"toFile"),RN.forEach(t),VC=a(M,"을 넘기면 된다."),M.forEach(t),Y1=i(n),Te=p(n,"PRE",{class:!0});var $A=l(Te);$A.forEach(t),$1=i(n),g1=p(n,"BR",{}),n2=i(n),dn=p(n,"P",{});var Hs=l(dn);XC=a(Hs,"이렇게 "),tu=p(Hs,"CODE",{});var PN=l(tu);YC=a(PN,"toFile"),PN.forEach(t),$C=a(Hs,"을 임시 파일에 쓴 후 임시 파일을 다시 읽어들여서 "),eu=p(Hs,"CODE",{});var yN=l(eu);gC=a(yN,"json.NewDecoder()"),yN.forEach(t),nO=a(Hs,`로 보내고,
`),au=p(Hs,"CODE",{});var wN=l(au);sO=a(wN,"Decode()"),wN.forEach(t),tO=a(Hs," 메소드를 호출하여 "),ou=p(Hs,"CODE",{});var SN=l(ou);eO=a(SN,"Person"),SN.forEach(t),aO=a(Hs," 타입의 변수로 불러올 것이다."),Hs.forEach(t),s2=i(n),he=p(n,"PRE",{class:!0});var gA=l(he);gA.forEach(t),t2=i(n),Ot=p(n,"P",{});var sv=l(Ot);oO=a(sv,"전체 예제는 "),He=p(sv,"A",{href:!0,rel:!0});var TN=l(He);pO=a(TN,"여기"),TN.forEach(t),lO=a(sv,"서 확인할 수 있다."),sv.forEach(t),e2=i(n),a2=p(n,"BR",{}),o2=p(n,"BR",{}),p2=i(n),Dt=p(n,"H3",{id:!0});var sS=l(Dt);bt=p(sS,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var hN=l(bt);pu=p(hN,"SPAN",{class:!0}),l(pu).forEach(t),hN.forEach(t),cO=a(sS,"Encoding and Decoding JSON Streams"),sS.forEach(t),l2=i(n),Os=p(n,"P",{});var Va=l(Os);rO=a(Va,`여러 개의 JSON 구조체를 한 번에 읽거나 쓰려면 어떻게 해야 할까?
이런 상황에서도 `),lu=p(Va,"CODE",{});var HN=l(lu);uO=a(HN,"json.Decoder"),HN.forEach(t),iO=a(Va,"와 "),cu=p(Va,"CODE",{});var MN=l(cu);dO=a(MN,"json.Encoder"),MN.forEach(t),kO=a(Va,"를 사용할 수 있다."),Va.forEach(t),c2=i(n),ba=p(n,"P",{});var NN=l(ba);fO=a(NN,"아래와 같은 데이터가 있다고 해보자."),NN.forEach(t),r2=i(n),Me=p(n,"PRE",{class:!0});var nW=l(Me);nW.forEach(t),u2=i(n),Rt=p(n,"P",{});var tv=l(Rt);EO=a(tv,"우리의 예제에서 이 데이터는 "),ru=p(tv,"CODE",{});var xN=l(ru);vO=a(xN,"data"),xN.forEach(t),_O=a(tv,`라는 문자열로 저장되어 있다고 가정할 것이다.
다만 실제로 이 데이터는 파일이나 HTTP 요청의 데이터일 수도 있다.`),tv.forEach(t),i2=i(n),Pt=p(n,"P",{});var ev=l(Pt);mO=a(ev,"이 데이터를 "),uu=p(ev,"CODE",{});var jN=l(uu);CO=a(jN,"t"),jN.forEach(t),OO=a(ev,"라는 구조체의 타입의 인스턴스로 만들 것이다."),ev.forEach(t),d2=i(n),Ne=p(n,"PRE",{class:!0});var sW=l(Ne);sW.forEach(t),k2=i(n),f2=p(n,"BR",{}),E2=i(n),kn=p(n,"P",{});var Ms=l(kn);DO=a(Ms,"이전처럼 "),iu=p(Ms,"CODE",{});var LN=l(iu);bO=a(LN,"json.Decoder"),LN.forEach(t),RO=a(Ms,`를 데이터 소스로 초기화할 것이다.
다만 이번에는 `),du=p(Ms,"CODE",{});var AN=l(du);PO=a(AN,"json.Decoder"),AN.forEach(t),yO=a(Ms,"의 "),ku=p(Ms,"CODE",{});var WN=l(ku);wO=a(WN,"More()"),WN.forEach(t),SO=a(Ms," 메소드를 "),fu=p(Ms,"CODE",{});var BN=l(fu);TO=a(BN,"for"),BN.forEach(t),hO=a(Ms,` 루프 조건으로 사용할 것이다.
이렇게 하면 한 번에 한 개의 JSON 객체를 데이터로 읽어올 수 있게 된다.`),Ms.forEach(t),v2=i(n),xe=p(n,"PRE",{class:!0});var tW=l(xe);tW.forEach(t),_2=i(n),yt=p(n,"P",{});var av=l(yt);HO=a(av,`이 예제의 데이터 스트림에는 배열로 감싸지지 않은 여러 개의 JSON 객체들이 있다.
이들을 메모리에 한 번에 로드하지 않고, 위 예제처럼 `),Eu=p(av,"CODE",{});var qN=l(Eu);MO=a(qN,"json.Decoder"),qN.forEach(t),NO=a(av,`로 단일 객체를 한 개씩 읽으면
성능이 향상되고 메모리 사용량이 줄어든다는 장점이 있다.`),av.forEach(t),m2=i(n),C2=p(n,"BR",{}),O2=i(n),Yn=p(n,"P",{});var ca=l(Yn);vu=p(ca,"CODE",{});var FN=l(vu);xO=a(FN,"json.Encoder"),FN.forEach(t),jO=a(ca,`로 여러 개의 값을 쓰는 것은 한 개의 값을 쓰는 것과 유사하다.
예제에서는 `),_u=p(ca,"CODE",{});var JN=l(_u);LO=a(JN,"bytes.Buffer"),JN.forEach(t),AO=a(ca,"에 값을 쓸 것이지만, "),mu=p(ca,"CODE",{});var GN=l(mu);WO=a(GN,"io.Writer"),GN.forEach(t),BO=a(ca," 인터페이스를 충족시킨다면 어느 타입이든 사용할 수 있다."),ca.forEach(t),D2=i(n),je=p(n,"PRE",{class:!0});var eW=l(je);eW.forEach(t),b2=i(n),R2=p(n,"BR",{}),P2=p(n,"BR",{}),y2=i(n),wt=p(n,"H3",{id:!0});var tS=l(wt);St=p(tS,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var IN=l(St);Cu=p(IN,"SPAN",{class:!0}),l(Cu).forEach(t),IN.forEach(t),qO=a(tS,"Custon JSON Parsing"),tS.forEach(t),w2=i(n),An=p(n,"P",{});var ne=l(An);FO=a(ne,`JSON 파싱 라이브러리의 기본적인 기능으로도 사용하는 데 문제는 없겠지만, 종종 오버라이드하여 사용해야할 때도 있을 것이다.
`),Ou=p(ne,"CODE",{});var UN=l(Ou);JO=a(UN,"time.Time"),UN.forEach(t),GO=a(ne,`은 RFC339 포맷은 기본적으로 JSON에서 RFC339 포맷을 사용하는데, 다른 시간 포맷을 사용해야 할 수도 있다.
그러한 경우 `),Du=p(ne,"CODE",{});var zN=l(Du);IO=a(zN,"json.Marshaler"),zN.forEach(t),UO=a(ne,"와 "),bu=p(ne,"CODE",{});var ZN=l(bu);zO=a(ZN,"json.Unmarshaler"),ZN.forEach(t),ZO=a(ne," 인터페이스를 충족시키는 새로운 타입을 생성하면 된다."),ne.forEach(t),S2=i(n),Le=p(n,"PRE",{class:!0});var aW=l(Le);aW.forEach(t),T2=i(n),g=p(n,"P",{});var ss=l(g);Ru=p(ss,"CODE",{});var QN=l(Ru);QO=a(QN,"time.Time"),QN.forEach(t),KO=a(ss," 구조체 타입을 "),Pu=p(ss,"CODE",{});var KN=l(Pu);VO=a(KN,"RFC822ZTime"),KN.forEach(t),XO=a(ss," 타입에 Embedding하였기 때문에 기존 "),yu=p(ss,"CODE",{});var VN=l(yu);YO=a(VN,"time.Time"),VN.forEach(t),$O=a(ss,`의 메소드에 접근할 수 있다.
또한 value receiver로 선언된 `),wu=p(ss,"CODE",{});var XN=l(wu);gO=a(XN,"MarshalJSON()"),XN.forEach(t),nD=a(ss,` 메소드에서는 시간 값을 읽기만 하지만,
pointer receiver로 선언된 `),Su=p(ss,"CODE",{});var YN=l(Su);sD=a(YN,"UnmarshalJSON()"),YN.forEach(t),tD=a(ss," 메소드에서는 시간 값을 변경한다."),ss.forEach(t),h2=i(n),H2=p(n,"BR",{}),M2=i(n),Ds=p(n,"P",{});var Xa=l(Ds);eD=a(Xa,"이렇게 하여, 앞선 예제의 "),Tu=p(Xa,"CODE",{});var $N=l(Tu);aD=a($N,"Order"),$N.forEach(t),oD=a(Xa," 타입의 "),hu=p(Xa,"CODE",{});var gN=l(hu);pD=a(gN,"DateOrdered"),gN.forEach(t),lD=a(Xa," 필드를 RFC822 포맷으로 사용 가능하게끔 수정해주었다."),Xa.forEach(t),N2=i(n),Ae=p(n,"PRE",{class:!0});var oW=l(Ae);oW.forEach(t),x2=i(n),Tt=p(n,"P",{});var ov=l(Tt);cD=a(ov,"전체 예제는 "),We=p(ov,"A",{href:!0,rel:!0});var nx=l(We);rD=a(nx,"여기"),nx.forEach(t),uD=a(ov,"서 확인할 수 있다."),ov.forEach(t),j2=i(n),L2=p(n,"BR",{}),A2=i(n),I=p(n,"P",{});var Zn=l(I);iD=a(Zn,`사실 이러한 방식에는 원칙적으로는 문제가 있다.
우리는 JSON에 작성된 날짜 포맷을 날짜 자료구조 필드값으로 변환하는데, 이는 `),Hu=p(Zn,"CODE",{});var sx=l(Hu);dD=a(sx,"encoding/json"),sx.forEach(t),kD=a(Zn,` 방식의 단점이다.
`),Mu=p(Zn,"CODE",{});var tx=l(Mu);fD=a(tx,"RFC822ZTime"),tx.forEach(t),ED=a(Zn,"가 아닌 "),Nu=p(Zn,"CODE",{});var ex=l(Nu);vD=a(ex,"Order"),ex.forEach(t),_D=a(Zn,"타입이 "),xu=p(Zn,"CODE",{});var ax=l(xu);mD=a(ax,"json.Marshaler"),ax.forEach(t),CD=a(Zn,"나 "),ju=p(Zn,"CODE",{});var ox=l(ju);OD=a(ox,"json.Unmarshaler"),ox.forEach(t),DD=a(Zn,` 인터페이스를 충족시키게끔 할 수도 있었을 것이다.
다만 그렇게 하면 모든 필드를 직접 처리하도록 코드를 작성해주어야 한다. 직접 처리할 필요가 없는 필드에 대해서도 말이다.
struct tag는 함수가 특정 필드만 파싱하도록 명시할 수 없기 때문에, 필드에 대한 타입을 직접 생성해주어야 하는 것이다.`),Zn.forEach(t),W2=i(n),Ra=p(n,"P",{});var px=l(Ra);bD=a(px,`JSON을 파싱하는 코드의 양을 제한하려면 두 개의 각기 다른 구조체를 정의해야 한다.
하나는 JSON으로 변환하거나 변환되는 것이며, 다른 하나는 데이터 처리에 관련된 것이다.
읽기를 할 때는 JSON을 JSON 인식 유형으로 읽은 다음, 이를 다른 유형으로 복사한다.
반면 JSON으로 쓰기를 하려면 이를 반대로 해주면 된다.
이 방식은 코드에 중복성이 생기기는 하지만, 비즈니스 로직이 통신 프로토콜에 의존하는 것을 방지해준다.`),px.forEach(t),B2=i(n),$n=p(n,"P",{});var ra=l($n);Lu=p(ra,"CODE",{});var lx=l(Lu);RD=a(lx,"json.Marshal()"),lx.forEach(t),PD=a(ra,"이나 "),Au=p(ra,"CODE",{});var cx=l(Au);yD=a(cx,"json.Unmarshal()"),cx.forEach(t),wD=a(ra," 함수에 "),Wu=p(ra,"CODE",{});var rx=l(Wu);SD=a(rx,"map[string]interface{}"),rx.forEach(t),TD=a(ra,` 타입을 파라미터로 보낼 수도 있다.
다만 이는 JSON에 무엇이 저장되어 있는지 확인하는 용도로만 쓰고, 확인한 이후에는 concrete type으로 변환해주는 것이 좋다.
Go에서 타입은 그 자체로 처리할 데이터에 대한 문서 역할도 하니 말이다.`),ra.forEach(t),q2=i(n),ht=p(n,"P",{});var pv=l(ht);hD=a(pv,`Go의 표준 라이브러리는 JSON뿐만 아니라 XML, Base64 등, 다양한 인코더와 디코더를 제공한다.
만약 인코딩해야 할 데이터 포맷이 있는데 이를 지원하는 표준 또는 서드 파티 라이브러리를 찾을 수 없다면, 직접 작성해주어야 한다.
직접 작성하는 법은 `),Bu=p(pv,"EM",{});var ux=l(Bu);HD=a(ux,"Reflection"),ux.forEach(t),MD=a(pv,"을 다루는 포스트에서 추후 다룰 예정이다."),pv.forEach(t),F2=i(n),Pa=p(n,"BLOCKQUOTE",{});var ix=l(Pa);nn=p(ix,"P",{});var Qn=l(nn);ND=a(Qn,"표준 라이브러리 중 "),qu=p(Qn,"CODE",{});var dx=l(qu);xD=a(dx,"encoding/gob"),dx.forEach(t),jD=a(Qn,` 패키지는 Go의 바이너리 데이터 인코딩으로, Java의 serialization이랑 비슷하다.
Java serialization을 Java RMI나 Enterprise Java Beans에서 사용하는 것처럼,
`),Fu=p(Qn,"CODE",{});var kx=l(Fu);LD=a(kx,"gob"),kx.forEach(t),AD=a(Qn," 프로토콜은 Go의 RPC("),Ju=p(Qn,"CODE",{});var fx=l(Ju);WD=a(fx,"net/rpc"),fx.forEach(t),BD=a(Qn,` 패키지)에서 사용하는 프로토콜이다.
다만 `),Gu=p(Qn,"CODE",{});var Ex=l(Gu);qD=a(Ex,"encoding/gob"),Ex.forEach(t),FD=a(Qn,"나 "),Iu=p(Qn,"CODE",{});var vx=l(Iu);JD=a(vx,"net/rpc"),vx.forEach(t),GD=a(Qn,` 둘 다 사용하지 않는 것을 권장한다.
특정 언어에 구애되지 않는 gRPC라는 좋은 프로토콜이 있다.`),Qn.forEach(t),ix.forEach(t),J2=i(n),G2=p(n,"BR",{}),I2=p(n,"BR",{}),U2=i(n),Ht=p(n,"H2",{id:!0});var eS=l(Ht);Mt=p(eS,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var _x=l(Mt);Uu=p(_x,"SPAN",{class:!0}),l(Uu).forEach(t),_x.forEach(t),ID=a(eS,"net/http"),eS.forEach(t),z2=i(n),Z2=p(n,"HR",{}),Q2=i(n),ya=p(n,"P",{});var mx=l(ya);UD=a(mx,`Go에는 HTTP/2 클라이언트 및 서버를 작성하는 표준 라이브러리가 있다.
클라이언트 및 서버의 코드 작성 예를 알아보자.`),mx.forEach(t),K2=i(n),V2=p(n,"BR",{}),X2=p(n,"BR",{}),Y2=i(n),Nt=p(n,"H3",{id:!0});var aS=l(Nt);xt=p(aS,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Cx=l(xt);zu=p(Cx,"SPAN",{class:!0}),l(zu).forEach(t),Cx.forEach(t),zD=a(aS,"The Client"),aS.forEach(t),$2=i(n),A=p(n,"P",{});var Tn=l(A);Zu=p(Tn,"CODE",{});var Ox=l(Zu);ZD=a(Ox,"net/http"),Ox.forEach(t),QD=a(Tn," 패키지에는 http request를 생성하고 http response를 받는, "),Qu=p(Tn,"CODE",{});var Dx=l(Qu);KD=a(Dx,"Client"),Dx.forEach(t),VD=a(Tn,` 타입이 정의되어 있다.
`),Ku=p(Tn,"CODE",{});var bx=l(Ku);XD=a(bx,"net/http"),bx.forEach(t),YD=a(Tn,"에 정의된 가장 기본적인 클라이언트 인스턴스("),Vu=p(Tn,"CODE",{});var Rx=l(Vu);$D=a(Rx,"DefaultClient"),Rx.forEach(t),gD=a(Tn,`)가 있지만, 릴리즈될 어플리케이션에서는 이를 사용하지 않는 것이 좋다.
기본적으로 `),Xu=p(Tn,"CODE",{});var Px=l(Xu);nb=a(Px,"DefaultClient"),Px.forEach(t),sb=a(Tn,`에는 타임아웃이 없다. 따라서 직접 인스턴스 하나를 생성해 주는 것이 좋다.
기억해야 할 점은 프로그램 전체에서 단 한 개의 `),Yu=p(Tn,"CODE",{});var yx=l(Yu);tb=a(yx,"http.Client"),yx.forEach(t),eb=a(Tn,` 인스턴스만 생성하면,
여러 개의 고루틴이 돌아간다고 해도 요청들을 충분히 처리할 수 있다는 것이다.`),Tn.forEach(t),g2=i(n),Be=p(n,"PRE",{class:!0});var pW=l(Be);pW.forEach(t),nE=i(n),sE=p(n,"BR",{}),tE=i(n),T=p(n,"P",{});var K=l(T);ab=a(K,"새로운 요청을 생성하려면 "),$u=p(K,"CODE",{});var wx=l($u);ob=a(wx,"http.NewRequsetWithContext()"),wx.forEach(t),pb=a(K," 함수에 context, requset method, URL을 넘겨서 "),gu=p(K,"CODE",{});var Sx=l(gu);lb=a(Sx,"*http.Requset"),Sx.forEach(t),cb=a(K,` 인스턴스를 생성해준다.
만약 request method가 `),ni=p(K,"CODE",{});var Tx=l(ni);rb=a(Tx,"PUT"),Tx.forEach(t),ub=a(K,", "),si=p(K,"CODE",{});var hx=l(si);ib=a(hx,"POST"),hx.forEach(t),db=a(K,", "),ti=p(K,"CODE",{});var Hx=l(ti);kb=a(Hx,"PATCH"),Hx.forEach(t),fb=a(K,"라면, 마지막 파라미터로 "),ei=p(K,"CODE",{});var Mx=l(ei);Eb=a(Mx,"io.Reader"),Mx.forEach(t),vb=a(K,` 타입의 request body를 작성해줘야 한다.
만약 request body가 없다면, `),ai=p(K,"CODE",{});var Nx=l(ai);_b=a(Nx,"nil"),Nx.forEach(t),mb=a(K,"을 쓰면 된다."),K.forEach(t),eE=i(n),Wn=p(n,"P",{});var se=l(Wn);Cb=a(se,"또한 이렇게 생성한 "),oi=p(se,"CODE",{});var xx=l(oi);Ob=a(xx,"*http.Requset"),xx.forEach(t),Db=a(se," 인스턴스의 "),pi=p(se,"CODE",{});var jx=l(pi);bb=a(jx,"Header"),jx.forEach(t),Rb=a(se,` 필드의 메소드들을 호출하여 request header를 설정할 수 있다.
아래 예제에서는 `),li=p(se,"CODE",{});var Lx=l(li);Pb=a(Lx,"Add()"),Lx.forEach(t),yb=a(se," 메소드로 request header를 추가해주었다."),se.forEach(t),aE=i(n),qe=p(n,"PRE",{class:!0});var lW=l(qe);lW.forEach(t),oE=i(n),pE=p(n,"BR",{}),lE=i(n),bn=p(n,"P",{});var zs=l(bn);ci=p(zs,"CODE",{});var Ax=l(ci);wb=a(Ax,"*http.Requset"),Ax.forEach(t),Sb=a(zs,` 인스턴스의 설정을 마쳤다면, 이제 요청을 전송해보자.
`),ri=p(zs,"CODE",{});var Wx=l(ri);Tb=a(Wx,"http.Client"),Wx.forEach(t),hb=a(zs,"의 "),ui=p(zs,"CODE",{});var Bx=l(ui);Hb=a(Bx,"Do()"),Bx.forEach(t),Mb=a(zs," 메소드를 호출하면 요청이 전송되고, 요청에 대한 응답에 해당하는 "),ii=p(zs,"CODE",{});var qx=l(ii);Nb=a(qx,"http.Response"),qx.forEach(t),xb=a(zs," 인스턴스를 리턴 값으로 받을 것이다."),zs.forEach(t),cE=i(n),Fe=p(n,"PRE",{class:!0});var cW=l(Fe);cW.forEach(t),rE=i(n),uE=p(n,"BR",{}),iE=i(n),h=p(n,"P",{});var V=l(h);jb=a(V,"이렇게 전송받은 "),di=p(V,"CODE",{});var Fx=l(di);Lb=a(Fx,"http.Response"),Fx.forEach(t),Ab=a(V,` 인스턴스의 필드값들은 요청에 대한 정보를 담고 있다.
response status code는 `),ki=p(V,"CODE",{});var Jx=l(ki);Wb=a(Jx,"StatusCode"),Jx.forEach(t),Bb=a(V," 필드에 저장되며, response status message는 "),fi=p(V,"CODE",{});var Gx=l(fi);qb=a(Gx,"Status"),Gx.forEach(t),Fb=a(V,` 필드에 저장된다.
또한 response header는 `),Ei=p(V,"CODE",{});var Ix=l(Ei);Jb=a(Ix,"Header"),Ix.forEach(t),Gb=a(V," 필드에, response body는 "),vi=p(V,"CODE",{});var Ux=l(vi);Ib=a(Ux,"Body"),Ux.forEach(t),Ub=a(V," 필드에 "),_i=p(V,"CODE",{});var zx=l(_i);zb=a(zx,"io.ReadCloser"),zx.forEach(t),Zb=a(V,` 타입으로 저장된다.
따라서 `),mi=p(V,"CODE",{});var Zx=l(mi);Qb=a(Zx,"json.Decoder"),Zx.forEach(t),Kb=a(V,"를 이용해서 REST API 응답을 처리할 수 있다."),V.forEach(t),dE=i(n),Je=p(n,"PRE",{class:!0});var rW=l(Je);rW.forEach(t),kE=i(n),wa=p(n,"P",{});var Qx=l(wa);Vb=a(Qx,"위 예제의 실행 결과는 다음과 같다."),Qx.forEach(t),fE=i(n),Ge=p(n,"PRE",{class:!0});var uW=l(Ge);uW.forEach(t),EE=i(n),vE=p(n,"BR",{}),_E=i(n),Sa=p(n,"BLOCKQUOTE",{});var Kx=l(Sa);fn=p(Kx,"P",{});var ts=l(fn);Ci=p(ts,"CODE",{});var Vx=l(Ci);Xb=a(Vx,"net/http"),Vx.forEach(t),Yb=a(ts," 패키지에는 "),Oi=p(ts,"CODE",{});var Xx=l(Oi);$b=a(Xx,"http.Get()"),Xx.forEach(t),gb=a(ts,", "),Di=p(ts,"CODE",{});var Yx=l(Di);nR=a(Yx,"http.Head()"),Yx.forEach(t),sR=a(ts,", "),bi=p(ts,"CODE",{});var $x=l(bi);tR=a($x,"http.Post()"),$x.forEach(t),eR=a(ts,`등 요청을 보내는 함수가 있다.
이 함수들은 `),Ri=p(ts,"CODE",{});var gx=l(Ri);aR=a(gx,"DefaultClient"),gx.forEach(t),oR=a(ts,"로 요청을 보내기 때문에 사용하지 않는 것이 좋다(얘네 타임아웃이 없다)."),ts.forEach(t),Kx.forEach(t),mE=i(n),CE=p(n,"BR",{}),OE=p(n,"BR",{}),DE=i(n),jt=p(n,"H3",{id:!0});var oS=l(jt);Lt=p(oS,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var nj=l(Lt);Pi=p(nj,"SPAN",{class:!0}),l(Pi).forEach(t),nj.forEach(t),pR=a(oS,"The Server"),oS.forEach(t),bE=i(n),En=p(n,"P",{});var Ns=l(En);lR=a(Ns,"HTTP 서버는 "),yi=p(Ns,"CODE",{});var sj=l(yi);cR=a(sj,"http.Server"),sj.forEach(t),rR=a(Ns,"와 "),wi=p(Ns,"CODE",{});var tj=l(wi);uR=a(tj,"http.Handler"),tj.forEach(t),iR=a(Ns,` 인터페이스의 개념에 기반하여 구축한다.
`),Si=p(Ns,"CODE",{});var ej=l(Si);dR=a(ej,"http.Client"),ej.forEach(t),kR=a(Ns,"는 http request를 전송하는 역할을 하듯, "),Ti=p(Ns,"CODE",{});var aj=l(Ti);fR=a(aj,"http.Server"),aj.forEach(t),ER=a(Ns,"는 TLS를 지원하며, http request를 핸들링하는 성능 좋은 HTTP/2 서버이다."),Ns.forEach(t),RE=i(n),At=p(n,"P",{});var lv=l(At);vR=a(lv,"서버에 대한 요청은 "),hi=p(lv,"CODE",{});var oj=l(hi);_R=a(oj,"http.Handler"),oj.forEach(t),mR=a(lv,` 인터페이스를 충족시키는 타입에 의해 핸들링된다.
이 인터페이스는 단일 메소드를 정의한다.`),lv.forEach(t),PE=i(n),Ie=p(n,"PRE",{class:!0});var iW=l(Ie);iW.forEach(t),yE=i(n),wE=p(n,"BR",{}),SE=i(n),Rn=p(n,"P",{});var Zs=l(Rn);Hi=p(Zs,"CODE",{});var pj=l(Hi);CR=a(pj,"ServeHTTP()"),pj.forEach(t),OR=a(Zs,"의 파라미터 중 "),Mi=p(Zs,"CODE",{});var lj=l(Mi);DR=a(lj,"*http.Request"),lj.forEach(t),bR=a(Zs,"는 "),Ni=p(Zs,"CODE",{});var cj=l(Ni);RR=a(cj,"http.Client"),cj.forEach(t),PR=a(Zs,`로 요청을 보낼 때 사용했던 타입과 동일한 것이다.
`),xi=p(Zs,"CODE",{});var rj=l(xi);yR=a(rj,"http.ResponseWriter"),rj.forEach(t),wR=a(Zs," 인터페이스는 아래처럼 세 개의 메소드를 정의한다."),Zs.forEach(t),TE=i(n),Ue=p(n,"PRE",{class:!0});var dW=l(Ue);dW.forEach(t),hE=i(n),Ta=p(n,"P",{});var uj=l(Ta);SR=a(uj,"이 세 개의 메소드는 반드시 일정한 순서대로 호출된다."),uj.forEach(t),HE=i(n),Bn=p(n,"P",{});var te=l(Bn);TR=a(te,"가장 먼저 호출되는 것은 "),ji=p(te,"CODE",{});var ij=l(ji);hR=a(ij,"Header()"),ij.forEach(t),HR=a(te,"로, "),Li=p(te,"CODE",{});var dj=l(Li);MR=a(dj,"http.Header"),dj.forEach(t),NR=a(te,` 인스턴스를 리턴받아서 response header를 설정하기 위해 사용된다.
특별히 response header를 설정할 필요가 없다면 `),Ai=p(te,"CODE",{});var kj=l(Ai);xR=a(kj,"Header()"),kj.forEach(t),jR=a(te,"를 반드시 호출할 필요는 없다."),te.forEach(t),ME=i(n),qn=p(n,"P",{});var ee=l(qn);LR=a(ee,"그 다음으로는 response status code를 설정하기 위해 "),Wi=p(ee,"CODE",{});var fj=l(Wi);AR=a(fj,"WriteHeader()"),fj.forEach(t),WR=a(ee,`를 호출한다.
이때 모든 status code는 `),Bi=p(ee,"CODE",{});var Ej=l(Bi);BR=a(Ej,"net/http"),Ej.forEach(t),qR=a(ee,`에 상수로 정의되어 있다.
(패키지 레벨에서 status code에 대한 특정한 타입이 정의되었으면 좋았을 텐데, 그렇지 않다.
실제로 status code들은 특별한 타입이 없는 그냥 정수형이다.)
만약 status code 200을 보내려고 한다면 `),qi=p(ee,"CODE",{});var vj=l(qi);FR=a(vj,"WriteHeader()"),vj.forEach(t),JR=a(ee,"를 굳이 호출해줄 필요는 없다."),ee.forEach(t),NE=i(n),Wt=p(n,"P",{});var cv=l(Wt);GR=a(cv,"마지막으로 "),Fi=p(cv,"CODE",{});var _j=l(Fi);IR=a(_j,"Write()"),_j.forEach(t),UR=a(cv,"를 호출하여, response body를 설정해준다."),cv.forEach(t),xE=i(n),jE=p(n,"BR",{}),LE=i(n),ha=p(n,"P",{});var mj=l(ha);zR=a(mj,"가장 기본적인 형태의 handler를 작성해보자."),mj.forEach(t),AE=i(n),ze=p(n,"PRE",{class:!0});var kW=l(ze);kW.forEach(t),WE=i(n),Bt=p(n,"P",{});var rv=l(Bt);ZR=a(rv,"어차피 구조체의 필드는 그렇게 중요하지 않으니 비워 두었고, 필요한 "),Ji=p(rv,"CODE",{});var Cj=l(Ji);QR=a(Cj,"ServeHTTP()"),Cj.forEach(t),KR=a(rv," 메소드만 정의해 주었다."),rv.forEach(t),BE=i(n),qE=p(n,"BR",{}),FE=i(n),qt=p(n,"P",{});var uv=l(qt);VR=a(uv,"새로운 "),Gi=p(uv,"CODE",{});var Oj=l(Gi);XR=a(Oj,"http.Server"),Oj.forEach(t),YR=a(uv," 인스턴스를 생성하여, 서버를 열어보자."),uv.forEach(t),JE=i(n),Ze=p(n,"PRE",{class:!0});var fW=l(Ze);fW.forEach(t),GE=i(n),Ls=p(n,"P",{});var pk=l(Ls);Ii=p(pk,"CODE",{});var Dj=l(Ii);$R=a(Dj,"http.Server"),Dj.forEach(t),gR=a(pk,"의 "),Ui=p(pk,"CODE",{});var bj=l(Ui);nP=a(bj,"Addr"),bj.forEach(t),sP=a(pk,` 필드는 서버가 열릴 호스트 주소와 포트를 지정한다.
따로 지정해주지 않으면 모든 호스트 주소에 대해 HTTP 표준 포트인 80으로 서버를 열 것이다.`),pk.forEach(t),IE=i(n),Pn=p(n,"P",{});var Qs=l(Pn);zi=p(Qs,"CODE",{});var Rj=l(zi);tP=a(Rj,"ReadTimeout"),Rj.forEach(t),eP=a(Qs,", "),Zi=p(Qs,"CODE",{});var Pj=l(Zi);aP=a(Pj,"WriteTimeout"),Pj.forEach(t),oP=a(Qs,", "),Qi=p(Qs,"CODE",{});var yj=l(Qi);pP=a(yj,"IdleTimeout"),yj.forEach(t),lP=a(Qs," 필드는 서버의 읽기, 쓰기, 유휴 상태의 타임아웃을 "),Ki=p(Qs,"CODE",{});var wj=l(Ki);cP=a(wj,"time.Duration"),wj.forEach(t),rP=a(Qs,`값으로 명시할 수 있다.
기본적으로 타임아웃을 두지 않기 때문에, 이 필드를 지정해주지 않으면 잘못된 요청을 적절히 핸들링하지 못할 것이다.`),Qs.forEach(t),UE=i(n),As=p(n,"P",{});var lk=l(As);Vi=p(lk,"CODE",{});var Sj=l(Vi);uP=a(Sj,"Hander"),Sj.forEach(t),iP=a(lk," 필드에 "),Xi=p(lk,"CODE",{});var Tj=l(Xi);dP=a(Tj,"http.Handler"),Tj.forEach(t),kP=a(lk,"를 충족시키는 타입을 지정해주면 된다."),lk.forEach(t),zE=i(n),ZE=p(n,"BR",{}),QE=i(n),x=p(n,"P",{});var _n=l(x);fP=a(_n,`단일 종류의 요청만 받는 서버는 별로 쓸데가 없을 것이다.
Go 표준 라이브러리에는 요청 라우터인, `),Yi=p(_n,"CODE",{});var hj=l(Yi);EP=a(hj,"*http.ServeMux"),hj.forEach(t),vP=a(_n,`를 포함하고 있다.
`),$i=p(_n,"CODE",{});var Hj=l($i);_P=a(Hj,"http.NewServerMux()"),Hj.forEach(t),mP=a(_n," 함수로 새로운 "),gi=p(_n,"CODE",{});var Mj=l(gi);CP=a(Mj,"*http.ServeMux"),Mj.forEach(t),OP=a(_n,` 인스턴스를 생성할 수 있으며,
이는 `),nd=p(_n,"CODE",{});var Nj=l(nd);DP=a(Nj,"http.Handler"),Nj.forEach(t),bP=a(_n," 인터페이스를 충족시키기 때문에 "),sd=p(_n,"CODE",{});var xj=l(sd);RP=a(xj,"http.Server"),xj.forEach(t),PP=a(_n,"의 "),td=p(_n,"CODE",{});var jj=l(td);yP=a(jj,"Handler"),jj.forEach(t),wP=a(_n," 필드에 할당될 수 있다."),_n.forEach(t),KE=i(n),U=p(n,"P",{});var Kn=l(U);SP=a(Kn,"또한, "),ed=p(Kn,"CODE",{});var Lj=l(ed);TP=a(Lj,"*http.ServeMux"),Lj.forEach(t),hP=a(Kn,`는 요청을 분류할 수 있는 두 개의 메소드를 포함하고 있다.
첫 번째 메소드는 두 개의 파라미터를 받는 `),ad=p(Kn,"CODE",{});var Aj=l(ad);HP=a(Aj,"Handle()"),Aj.forEach(t),MP=a(Kn,"로, 두 개의 파라미터는 각각 주소 경로와 "),od=p(Kn,"CODE",{});var Wj=l(od);NP=a(Wj,"http.Handler"),Wj.forEach(t),xP=a(Kn,` 인스턴스이다.
만약 주소가 일치한다면 `),pd=p(Kn,"CODE",{});var Bj=l(pd);jP=a(Bj,"http.Handler"),Bj.forEach(t),LP=a(Kn,`가 호출될 것이다.
또 다른 방법은 더 일반적으로 사용하는 `),ld=p(Kn,"CODE",{});var qj=l(ld);AP=a(qj,"HandleFunc()"),qj.forEach(t),WP=a(Kn," 메소드이다."),Kn.forEach(t),VE=i(n),Qe=p(n,"PRE",{class:!0});var EW=l(Qe);EW.forEach(t),XE=i(n),Fn=p(n,"P",{});var ae=l(Fn);BP=a(ae,"이 메소드에서 볼 수 있듯 파라미터로 주소 경로와, "),cd=p(ae,"CODE",{});var Fj=l(cd);qP=a(Fj,"http.Handler"),Fj.forEach(t),FP=a(ae,"의 "),rd=p(ae,"CODE",{});var Jj=l(rd);JP=a(Jj,"ServeHTTP()"),Jj.forEach(t),GP=a(ae,`를 만족시키는 closure를 작성해 주었다.
해당 패턴은 인터페이스 포스트의 `),Ke=p(ae,"A",{href:!0,rel:!0});var Gj=l(Ke);IP=a(Gj,"Function Types Are a Bridge to Interfaces"),Gj.forEach(t),UP=a(ae,"에서 소개하였으니, 확인할 수 있다."),ae.forEach(t),YE=i(n),Ft=p(n,"P",{});var iv=l(Ft);zP=a(iv,`다만 핸들러가 다른 비즈니스 로직을 사용하여 더 복잡해질 경우, 구조체 타입에 메소드를 정의하여 사용해주는 것이 좋다.
이에 관련된 내용도 인터페이스 포스트의 `),Ve=p(iv,"A",{href:!0,rel:!0});var Ij=l(Ve);ZP=a(Ij,"Implicit Interfaces Make Dependency Injection Easier"),Ij.forEach(t),QP=a(iv,"에서 소개하였다."),iv.forEach(t),$E=i(n),gE=p(n,"BR",{}),n3=i(n),Jt=p(n,"BLOCKQUOTE",{});var dv=l(Jt);j=p(dv,"P",{});var an=l(j);ud=p(an,"CODE",{});var Uj=l(ud);KP=a(Uj,"net/http"),Uj.forEach(t),VP=a(an,"에는 패키지 레벨 함수인 "),id=p(an,"CODE",{});var zj=l(id);XP=a(zj,"http.Handle"),zj.forEach(t),YP=a(an,", "),dd=p(an,"CODE",{});var Zj=l(dd);$P=a(Zj,"http.HandleFunc"),Zj.forEach(t),gP=a(an,", "),kd=p(an,"CODE",{});var Qj=l(kd);ny=a(Qj,"http.ListenAndServe"),Qj.forEach(t),sy=a(an,", "),fd=p(an,"CODE",{});var Kj=l(fd);ty=a(Kj,"http.ListenAndServeTLS"),Kj.forEach(t),ey=a(an,` 함수가 있으며,
이들은 `),Ed=p(an,"CODE",{});var Vj=l(Ed);ay=a(Vj,"*http.ServeMux"),Vj.forEach(t),oy=a(an,"의 패키지 레벨 인스턴스인 "),vd=p(an,"CODE",{});var Xj=l(vd);py=a(Xj,"http.DefaultServeMux"),Xj.forEach(t),ly=a(an,`를 기준으로 동작한다.
예상되겠지만, 이 함수들은 릴리즈될 어플리케이션에서는 사용이 권장되지 않는다.`),an.forEach(t),cy=i(dv),Jn=p(dv,"P",{});var Ks=l(Jn);_d=p(Ks,"CODE",{});var Yj=l(_d);ry=a(Yj,"http.Server"),Yj.forEach(t),uy=a(Ks," 인스턴스가 "),md=p(Ks,"CODE",{});var $j=l(md);iy=a($j,"http.ListenAndServe"),$j.forEach(t),dy=a(Ks,"나 "),Cd=p(Ks,"CODE",{});var gj=l(Cd);ky=a(gj,"http.ListenAndServeTLS"),gj.forEach(t),fy=a(Ks,`에서 생성되기 때문에, 타임아웃과 같은 설정을 지정해줄 수 없다.
뿐만 아니라 서드 파티 라이브러리가 `),Od=p(Ks,"CODE",{});var nL=l(Od);Ey=a(nL,"http.DefaultServeMux"),nL.forEach(t),vy=a(Ks,`에 자체 핸들러를 등록해버릴 수 있기 때문에,
모든 의존성들을 스캔하지 않고는 이를 알 수 없다.
어플리케이션이 shared state로 인해 통제되는 상황은 되도록 피해야 한다.`),Ks.forEach(t),dv.forEach(t),s3=i(n),t3=p(n,"BR",{}),e3=i(n),sn=p(n,"P",{});var es=l(sn);Dd=p(es,"CODE",{});var sL=l(Dd);_y=a(sL,"*http.ServeMux"),sL.forEach(t),my=a(es,"는 "),bd=p(es,"CODE",{});var tL=l(bd);Cy=a(tL,"http.Handler"),tL.forEach(t),Oy=a(es,"에 요청을 보내고 "),Rd=p(es,"CODE",{});var eL=l(Rd);Dy=a(eL,"http.Handler"),eL.forEach(t),by=a(es,` 인터페이스를 충족시키기 때문에,
여러 관련된 요청에 대한 `),Pd=p(es,"CODE",{});var aL=l(Pd);Ry=a(aL,"*http.ServeMux"),aL.forEach(t),Py=a(es," 인스턴스를 생성하고, 부모 "),yd=p(es,"CODE",{});var oL=l(yd);yy=a(oL,"*http.ServeMux"),oL.forEach(t),wy=a(es,"에 등록할 수 있다."),es.forEach(t),a3=i(n),Xe=p(n,"PRE",{class:!0});var vW=l(Xe);vW.forEach(t),o3=i(n),Ha=p(n,"P",{});var pL=l(Ha);Sy=a(pL,"위 예제의 구조를 이해하는 것이 그렇게 어렵진 않을 것이다."),pL.forEach(t),p3=i(n),yn=p(n,"P",{});var Vs=l(yn);wd=p(Vs,"CODE",{});var lL=l(wd);Ty=a(lL,"/person/greet"),lL.forEach(t),hy=a(Vs,"로 요청을 보내면 "),Sd=p(Vs,"CODE",{});var cL=l(Sd);Hy=a(cL,"person"),cL.forEach(t),My=a(Vs,`에 붙어있는 핸들러로 처리되며,
`),Td=p(Vs,"CODE",{});var rL=l(Td);Ny=a(rL,"/dog/greet"),rL.forEach(t),xy=a(Vs,"로 요청을 보내면 "),hd=p(Vs,"CODE",{});var uL=l(hd);jy=a(uL,"dog"),uL.forEach(t),Ly=a(Vs,"에 붙어있는 핸들러로 처리가 된다."),Vs.forEach(t),l3=i(n),tn=p(n,"P",{});var as=l(tn);Hd=p(as,"CODE",{});var iL=l(Hd);Ay=a(iL,"person"),iL.forEach(t),Wy=a(as,"과 "),Md=p(as,"CODE",{});var dL=l(Md);By=a(dL,"dog"),dL.forEach(t),qy=a(as,"를 "),Nd=p(as,"CODE",{});var kL=l(Nd);Fy=a(kL,"mux"),kL.forEach(t),Jy=a(as,"에 등록할 때 "),xd=p(as,"CODE",{});var fL=l(xd);Gy=a(fL,"http.StripPrefix()"),fL.forEach(t),Iy=a(as,` 함수를 사용하여,
주소에서 `),jd=p(as,"CODE",{});var EL=l(jd);Uy=a(EL,"mux"),EL.forEach(t),zy=a(as,"에 의해 이미 처리된 부분을 제거해주었다."),as.forEach(t),c3=i(n),r3=p(n,"BR",{}),u3=p(n,"BR",{}),i3=i(n),Gt=p(n,"H3",{id:!0});var pS=l(Gt);It=p(pS,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var vL=l(It);Ld=p(vL,"SPAN",{class:!0}),l(Ld).forEach(t),vL.forEach(t),Zy=a(pS,"Middleware"),pS.forEach(t),d3=i(n),z=p(n,"P",{});var Vn=l(z);Qy=a(Vn,`HTTP 서버의 또 다른 중요한 요소 중 하나는 로그인 여부 확인, 요청 시간 체크, 요청 헤더 체크 등 여러 동작을 수행하는 것이다.
Go에서는 이러한 연관된 기능들을 `),Ad=p(Vn,"EM",{});var _L=l(Ad);Ky=a(_L,"미들웨어"),_L.forEach(t),Vy=a(Vn,`를 사용하여 구현한다.
미들웨어는 특별한 타입을 사용하지 않고, `),Wd=p(Vn,"CODE",{});var mL=l(Wd);Xy=a(mL,"http.Handler"),mL.forEach(t),Yy=a(Vn,"를 파라미터로 받아 "),Bd=p(Vn,"CODE",{});var CL=l(Bd);$y=a(CL,"http.Handler"),CL.forEach(t),gy=a(Vn,`를 반환하는 함수를 작성하여 사용한다.
대개 반환된 `),qd=p(Vn,"CODE",{});var OL=l(qd);nw=a(OL,"http.Handler"),OL.forEach(t),sw=a(Vn,"는 "),Fd=p(Vn,"CODE",{});var DL=l(Fd);tw=a(DL,"http.HandlerFunc"),DL.forEach(t),ew=a(Vn,"로 반환될 수 있는 closure가 된다."),Vn.forEach(t),k3=i(n),f3=p(n,"BR",{}),E3=i(n),Ma=p(n,"P",{});var bL=l(Ma);aw=a(bL,`아래 예제에는 두 개의 미들웨어 생성기가 있다.
하나는 요청의 시간을 재는 것이고, 또 하나는 액세스 제어의 나쁜 예라고 할 수 있다.`),bL.forEach(t),v3=i(n),Ye=p(n,"PRE",{class:!0});var _W=l(Ye);_W.forEach(t),_3=i(n),bs=p(n,"P",{});var Ya=l(bs);ow=a(Ya,`이 두 개의 미들웨어 구현을 보면 미들웨어가 무슨 역할을 하는지 알 수 있을 것이다.
먼저 연산이나 조건 검사를 하기 위한 셋업을 한 후,
조건을 만족하지 않으면 보통 미들웨어에서 error status code와 함께 `),Jd=p(Ya,"CODE",{});var RL=l(Jd);pw=a(RL,"Write()"),RL.forEach(t),lw=a(Ya,`로 출력을 한 후 함수를 리턴한다.
만약 문제가 없다면, 다음 핸들러의 `),Gd=p(Ya,"CODE",{});var PL=l(Gd);cw=a(PL,"ServeHTTP()"),PL.forEach(t),rw=a(Ya,` 메소드를 호출한다.
그 후 정리 작업을 수행한다.`),Ya.forEach(t),m3=i(n),Ws=p(n,"P",{});var ck=l(Ws);Id=p(ck,"CODE",{});var yL=l(Id);uw=a(yL,"TerribleSecurityProvider()"),yL.forEach(t),iw=a(ck,`는 직접 설정 가능한 미들웨어를 생성하는 예제라고 할 수 있다.
설정 정보(예제에서는 비밀번호)를 `),Ud=p(ck,"CODE",{});var wL=l(Ud);dw=a(wL,"TerribleSecurityProvider()"),wL.forEach(t),kw=a(ck,`의 파라미터로 보내면, 해당 정보를 사용하는 미들웨어를 반환한다.
다만 closure를 반환하는 closure를 반환하기 때문에(쓰기도 어려움;), 살짝 마음에 걸리는 것이다.`),ck.forEach(t),C3=i(n),O3=p(n,"BR",{}),D3=i(n),Na=p(n,"BLOCKQUOTE",{});var SL=l(Na);zd=p(SL,"P",{});var TL=l(zd);fw=a(TL,"미들웨어 레이어에서의 값의 전달은 context를 통해 이루어진다."),TL.forEach(t),SL.forEach(t),b3=i(n),R3=p(n,"BR",{}),P3=i(n),xa=p(n,"P",{});var hL=l(xa);Ew=a(hL,"미들웨어를 연결하여 request handler에 추가해보자."),hL.forEach(t),y3=i(n),$e=p(n,"PRE",{class:!0});var mW=l($e);mW.forEach(t),w3=i(n),Gn=p(n,"P",{});var oe=l(Gn);vw=a(oe,"위 예제에서 우리는 "),Zd=p(oe,"CODE",{});var HL=l(Zd);_w=a(HL,"TerribleSecurityProvider()"),HL.forEach(t),mw=a(oe,`로부터 미들웨어를 생성하고, 핸들러를 각각의 함수 호출로 감싸주었다.
구조적으로 `),Qd=p(oe,"CODE",{});var ML=l(Qd);Cw=a(ML,"terribleSecurity()"),ML.forEach(t),Ow=a(oe," closure가 먼저 호출되고, 그 다음으로 "),Kd=p(oe,"CODE",{});var NL=l(Kd);Dw=a(NL,"RequestTimer"),NL.forEach(t),bw=a(oe,", 그 다음으로 원래의 request handler가 호출된다."),oe.forEach(t),S3=i(n),Bs=p(n,"P",{});var rk=l(Bs);Vd=p(rk,"CODE",{});var xL=l(Vd);Rw=a(xL,"*http.ServeMux"),xL.forEach(t),Pw=a(rk,"는 "),Xd=p(rk,"CODE",{});var jL=l(Xd);yw=a(jL,"http.Handler"),jL.forEach(t),ww=a(rk,` 인터페이스를 충족시킨다.
아래처럼 적용하면 미들웨어들을 request router에 등록된 모든 핸들러에 적용할 수 있다.`),rk.forEach(t),T3=i(n),ge=p(n,"PRE",{class:!0});var CW=l(ge);CW.forEach(t),h3=i(n),H3=p(n,"BR",{}),M3=p(n,"BR",{}),N3=i(n),Ut=p(n,"H3",{id:!0});var lS=l(Ut);zt=p(lS,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var LL=l(zt);Yd=p(LL,"SPAN",{class:!0}),l(Yd).forEach(t),LL.forEach(t),Sw=a(lS,"Use idiomatic third-party modules to enhance the server"),lS.forEach(t),x3=i(n),ja=p(n,"P",{});var AL=l(ja);Tw=a(AL,`서버에 서드파티 라이브러리를 사용하여 기능을 개선할 수 있다.
위 예제에서 보았던 미들웨어의 chain이 마음에 들지 않는다면, alice라는 서드파티 라이브러리를 사용할 수 있다.`),AL.forEach(t),j3=i(n),na=p(n,"PRE",{class:!0});var OW=l(na);OW.forEach(t),L3=i(n),A3=p(n,"BR",{}),W3=i(n),Rs=p(n,"P",{});var $a=l(Rs);hw=a($a,"표준 라이브러리를 사용하여 HTTP 서버를 구축하는 것의 가장 큰 문제점은 "),$d=p($a,"CODE",{});var WL=l($d);Hw=a(WL,"*http.ServeMux"),WL.forEach(t),Mw=a($a,`를 request router로 사용한다는 점이다.
이 request router는 HTTP 메소드나 헤더를 기준으로 구분할 수 없으며, Query parameter도 처리할 수 없다.
게다가 `),gd=p($a,"CODE",{});var BL=l(gd);Nw=a(BL,"*http.ServeMux"),BL.forEach(t),xw=a($a," 인스턴스가 중첩되면 너무 거대해지기도 한다."),$a.forEach(t),B3=i(n),In=p(n,"P",{});var pe=l(In);jw=a(pe,"이를 대체하기 위한 프로젝트는 되게 많은데, 대표적인 게 바로 "),sa=p(pe,"A",{href:!0,rel:!0});var qL=l(sa);Lw=a(qL,"gorilla mux"),qL.forEach(t),Aw=a(pe,`와 [https://github.com/go-chi/chi]이다.
이 두 라이브러리가 이상적이라 여겨지는 이유는 `),nk=p(pe,"CODE",{});var FL=l(nk);Ww=a(FL,"http.Handler"),FL.forEach(t),Bw=a(pe,"나 "),sk=p(pe,"CODE",{});var JL=l(sk);qw=a(JL,"http.HandlerFunc"),JL.forEach(t),Fw=a(pe,` 인스턴스와 함께 사용할 수 있기 때문이며,
표준 라이브러리와 잘 어우러질 수 있는 라이브러리를 사용하는 Go의 철학을 보여준다.
또한 관용적인 미들웨어들을 사용할 수 있으며, 주로 사용되는 미들웨어의 구현체를 제공한다.`),pe.forEach(t),q3=i(n),F3=p(n,"BR",{}),J3=p(n,"BR",{}),G3=i(n),Zt=p(n,"H2",{id:!0});var cS=l(Zt);Qt=p(cS,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var GL=l(Qt);tk=p(GL,"SPAN",{class:!0}),l(tk).forEach(t),GL.forEach(t),Jw=a(cS,"References"),cS.forEach(t),I3=i(n),U3=p(n,"HR",{}),z3=i(n),La=p(n,"CENTER",{});var IL=l(La);qs=p(IL,"P",{});var ga=l(qs);ta=p(ga,"A",{href:!0,rel:!0});var UL=l(ta);Aa=p(UL,"IMG",{src:!0,alt:!0}),UL.forEach(t),Gw=i(ga),Iw=p(ga,"BR",{}),Uw=i(ga),ea=p(ga,"A",{href:!0,rel:!0});var zL=l(ea);zw=a(zL,"Jon Bodner, 『Learning Go』, O’Reilly Media, Inc."),zL.forEach(t),ga.forEach(t),IL.forEach(t),Z3=i(n),Q3=p(n,"BR",{}),K3=p(n,"BR",{}),this.h()},h(){d(no,"class","icon icon-link"),d(Ys,"aria-hidden","true"),d(Ys,"tabindex","-1"),d(Ys,"href","#introduction"),d(Xs,"id","introduction"),d(le,"href","https://pkg.go.dev/std"),d(le,"rel","nofollow"),d(co,"class","icon icon-link"),d(nt,"aria-hidden","true"),d(nt,"tabindex","-1"),d(nt,"href","#io-and-friends"),d(gs,"id","io-and-friends"),d(ce,"class","language-go"),d(re,"class","language-go"),d(ue,"class","language-go"),d(ie,"class","language-go"),d(de,"class","language-go"),d(ke,"class","language-go"),d(fe,"class","language-go"),d(Ee,"class","language-go"),d(ve,"class","language-go"),d(ml,"class","icon icon-link"),d(ot,"aria-hidden","true"),d(ot,"tabindex","-1"),d(ot,"href","#time"),d(at,"id","time"),d(me,"class","language-go"),d(Ce,"href","https://pkg.go.dev/time#ParseDuration"),d(Ce,"rel","nofollow"),d(Oe,"class","language-go"),d(De,"class","language-bash"),d(Mc,"class","icon icon-link"),d(rt,"aria-hidden","true"),d(rt,"tabindex","-1"),d(rt,"href","#monotonic-time"),d(ct,"id","monotonic-time"),d(Jc,"class","icon icon-link"),d(it,"aria-hidden","true"),d(it,"tabindex","-1"),d(it,"href","#timers-and-timeout"),d(ut,"id","timers-and-timeout"),d(be,"class","language-go"),d(Kc,"class","icon icon-link"),d(kt,"aria-hidden","true"),d(kt,"tabindex","-1"),d(kt,"href","#encodingjson"),d(dt,"id","encodingjson"),d(Yc,"class","icon icon-link"),d(Et,"aria-hidden","true"),d(Et,"tabindex","-1"),d(Et,"href","#use-struct-tags-to-add-metadata"),d(ft,"id","use-struct-tags-to-add-metadata"),d(Re,"class","language-json"),d(Pe,"class","language-go"),d(kr,"class","icon icon-link"),d(_t,"aria-hidden","true"),d(_t,"tabindex","-1"),d(_t,"href","#unmarshaling-and-marshaling"),d(vt,"id","unmarshaling-and-marshaling"),d(ye,"class","language-go"),d(we,"class","language-go"),d(hr,"class","icon icon-link"),d(Ct,"aria-hidden","true"),d(Ct,"tabindex","-1"),d(Ct,"href","#json-readers-and-writers"),d(mt,"id","json-readers-and-writers"),d(Se,"class","language-go"),d(Te,"class","language-go"),d(he,"class","language-go"),d(He,"href","https://github.com/jhseoeo/Learning-golang/blob/master/11-standard_library/json/writer_reader.go"),d(He,"rel","nofollow"),d(pu,"class","icon icon-link"),d(bt,"aria-hidden","true"),d(bt,"tabindex","-1"),d(bt,"href","#encoding-and-decoding-json-streams"),d(Dt,"id","encoding-and-decoding-json-streams"),d(Me,"class","language-json"),d(Ne,"class","language-go"),d(xe,"class","language-go"),d(je,"class","language-go"),d(Cu,"class","icon icon-link"),d(St,"aria-hidden","true"),d(St,"tabindex","-1"),d(St,"href","#custon-json-parsing"),d(wt,"id","custon-json-parsing"),d(Le,"class","language-go"),d(Ae,"class","language-go"),d(We,"href","https://github.com/jhseoeo/Learning-golang/blob/master/11-standard_library/json/custon_parsing.go"),d(We,"rel","nofollow"),d(Uu,"class","icon icon-link"),d(Mt,"aria-hidden","true"),d(Mt,"tabindex","-1"),d(Mt,"href","#nethttp"),d(Ht,"id","nethttp"),d(zu,"class","icon icon-link"),d(xt,"aria-hidden","true"),d(xt,"tabindex","-1"),d(xt,"href","#the-client"),d(Nt,"id","the-client"),d(Be,"class","language-go"),d(qe,"class","language-go"),d(Fe,"class","language-go"),d(Je,"class","language-go"),d(Ge,"class","language-bash"),d(Pi,"class","icon icon-link"),d(Lt,"aria-hidden","true"),d(Lt,"tabindex","-1"),d(Lt,"href","#the-server"),d(jt,"id","the-server"),d(Ie,"class","language-go"),d(Ue,"class","language-go"),d(ze,"class","language-go"),d(Ze,"class","language-go"),d(Qe,"class","language-go"),d(Ke,"href","https://learning.oreilly.com/library/view/learning-go/9781492077206/ch07.html#function_type_interface"),d(Ke,"rel","nofollow"),d(Ve,"href","https://learning.oreilly.com/library/view/learning-go/9781492077206/ch07.html#dependency_injection"),d(Ve,"rel","nofollow"),d(Xe,"class","language-go"),d(Ld,"class","icon icon-link"),d(It,"aria-hidden","true"),d(It,"tabindex","-1"),d(It,"href","#middleware"),d(Gt,"id","middleware"),d(Ye,"class","language-go"),d($e,"class","language-go"),d(ge,"class","language-go"),d(Yd,"class","icon icon-link"),d(zt,"aria-hidden","true"),d(zt,"tabindex","-1"),d(zt,"href","#use-idiomatic-third-party-modules-to-enhance-the-server"),d(Ut,"id","use-idiomatic-third-party-modules-to-enhance-the-server"),d(na,"class","language-go"),d(sa,"href","https://github.com/gorilla/mux"),d(sa,"rel","nofollow"),d(tk,"class","icon icon-link"),d(Qt,"aria-hidden","true"),d(Qt,"tabindex","-1"),d(Qt,"href","#references"),d(Zt,"id","references"),PW(Aa.src,uS="https://learning.oreilly.com/covers/urn:orm:book:9781492077206/400w/")||d(Aa,"src",uS),d(Aa,"alt","Learning Go Book Cover"),d(ta,"href","https://learning.oreilly.com/library/view/learning-go/9781492077206/"),d(ta,"rel","nofollow"),d(ea,"href","https://learning.oreilly.com/library/view/learning-go/9781492077206/"),d(ea,"rel","nofollow")},m(n,c){r(n,ua,c),r(n,uk,c),r(n,ia,c),s(ia,kv),r(n,ik,c),r(n,dk,c),r(n,kk,c),r(n,fk,c),r(n,Xs,c),s(Xs,Ys),s(Ys,no),s(Xs,fv),r(n,Ek,c),r(n,vk,c),r(n,_k,c),r(n,$s,c),s($s,Ev),s($s,so),s(so,vv),s($s,_v),r(n,mk,c),r(n,w,c),s(w,mv),s(w,le),s(le,Cv),s(w,Ov),s(w,to),s(to,Dv),s(w,bv),s(w,eo),s(eo,Rv),s(w,Pv),s(w,ao),s(ao,yv),s(w,wv),s(w,oo),s(oo,Sv),s(w,Tv),s(w,po),s(po,hv),s(w,Hv),s(w,lo),s(lo,Mv),s(w,Nv),r(n,Ck,c),r(n,Ok,c),r(n,Dk,c),r(n,bk,c),r(n,gs,c),s(gs,nt),s(nt,co),s(gs,xv),r(n,Rk,c),r(n,Pk,c),r(n,yk,c),r(n,on,c),s(on,jv),s(on,ro),s(ro,Lv),s(on,Av),s(on,uo),s(uo,Wv),s(on,Bv),s(on,io),s(io,qv),s(on,Fv),s(on,ko),s(ko,Jv),s(on,Gv),r(n,wk,c),r(n,Sk,c),r(n,Tk,c),r(n,xs,c),s(xs,fo),s(fo,Iv),s(xs,Uv),s(xs,Eo),s(Eo,zv),s(xs,Zv),r(n,hk,c),r(n,ce,c),ce.innerHTML=QL,r(n,Hk,c),r(n,X,c),s(X,vo),s(vo,Qv),s(X,Kv),s(X,_o),s(_o,Vv),s(X,Xv),s(X,mo),s(mo,Yv),s(X,$v),s(X,Co),s(Co,gv),s(X,n5),s(X,Oo),s(Oo,s5),s(X,t5),r(n,Mk,c),r(n,Nk,c),r(n,xk,c),r(n,os,c),s(os,e5),s(os,Do),s(Do,a5),s(os,o5),s(os,bo),s(bo,p5),s(os,l5),r(n,jk,c),r(n,re,c),re.innerHTML=KL,r(n,Lk,c),r(n,ps,c),s(ps,c5),s(ps,Ro),s(Ro,r5),s(ps,u5),s(ps,Po),s(Po,i5),s(ps,d5),r(n,Ak,c),r(n,ue,c),ue.innerHTML=VL,r(n,Wk,c),r(n,da,c),s(da,k5),r(n,Bk,c),r(n,hn,c),s(hn,yo),s(yo,Y),s(Y,f5),s(Y,wo),s(wo,E5),s(Y,v5),s(Y,So),s(So,_5),s(Y,m5),s(Y,To),s(To,C5),s(Y,O5),s(Y,D5),s(Y,b5),s(Y,ho),s(ho,R5),s(Y,P5),s(hn,y5),s(hn,Ho),s(Ho,ls),s(ls,Mo),s(Mo,w5),s(ls,S5),s(ls,No),s(No,T5),s(ls,h5),s(ls,xo),s(xo,H5),s(ls,M5),s(hn,N5),s(hn,jo),s(jo,Hn),s(Hn,Lo),s(Lo,x5),s(Hn,j5),s(Hn,Ao),s(Ao,L5),s(Hn,A5),s(Hn,Wo),s(Wo,W5),s(Hn,B5),s(Hn,Bo),s(Bo,q5),s(Hn,F5),s(hn,J5),s(hn,qo),s(qo,J),s(J,Fo),s(Fo,G5),s(J,I5),s(J,Jo),s(Jo,U5),s(J,z5),s(J,Z5),s(J,Q5),s(J,Go),s(Go,K5),s(J,V5),s(J,Io),s(Io,X5),s(J,Y5),s(J,Uo),s(Uo,$5),s(J,g5),r(n,qk,c),r(n,Fk,c),r(n,Jk,c),r(n,pn,c),s(pn,n_),s(pn,zo),s(zo,s_),s(pn,t_),s(pn,Zo),s(Zo,e_),s(pn,a_),s(pn,Qo),s(Qo,o_),s(pn,p_),s(pn,Ko),s(Ko,l_),s(pn,c_),r(n,Gk,c),r(n,ie,c),ie.innerHTML=XL,r(n,Ik,c),r(n,mn,c),s(mn,Vo),s(Vo,r_),s(mn,u_),s(mn,Xo),s(Xo,i_),s(mn,d_),s(mn,Yo),s(Yo,k_),s(mn,f_),s(mn,$o),s($o,E_),s(mn,v_),r(n,Uk,c),r(n,de,c),de.innerHTML=YL,r(n,zk,c),r(n,G,c),s(G,__),s(G,go),s(go,m_),s(G,C_),s(G,np),s(np,O_),s(G,D_),s(G,sp),s(sp,b_),s(G,R_),s(G,tp),s(tp,P_),s(G,y_),s(G,ep),s(ep,w_),s(G,S_),r(n,Zk,c),r(n,Cn,c),s(Cn,ap),s(ap,T_),s(Cn,h_),s(Cn,op),s(op,H_),s(Cn,M_),s(Cn,pp),s(pp,N_),s(Cn,x_),s(Cn,lp),s(lp,j_),s(Cn,L_),r(n,Qk,c),r(n,ke,c),ke.innerHTML=$L,r(n,Kk,c),r(n,Vk,c),r(n,Xk,c),r(n,N,c),s(N,A_),s(N,cp),s(cp,W_),s(N,B_),s(N,rp),s(rp,q_),s(N,F_),s(N,up),s(up,J_),s(N,G_),s(N,ip),s(ip,I_),s(N,U_),s(N,dp),s(dp,z_),s(N,Z_),s(N,kp),s(kp,Q_),s(N,K_),r(n,Yk,c),r(n,cs,c),s(cs,rs),s(rs,fp),s(fp,V_),s(rs,X_),s(rs,Ep),s(Ep,Y_),s(rs,$_),s(rs,vp),s(vp,g_),s(rs,n0),s(cs,s0),s(cs,st),s(st,_p),s(_p,t0),s(st,e0),s(st,mp),s(mp,a0),s(st,o0),s(cs,p0),s(cs,us),s(us,Cp),s(Cp,l0),s(us,c0),s(us,Op),s(Op,r0),s(us,u0),s(us,Dp),s(Dp,i0),s(us,d0),r(n,$k,c),r(n,is,c),s(is,k0),s(is,bp),s(bp,f0),s(is,E0),s(is,Rp),s(Rp,v0),s(is,_0),r(n,gk,c),r(n,nf,c),r(n,sf,c),r(n,Xn,c),s(Xn,Pp),s(Pp,m0),s(Xn,C0),s(Xn,yp),s(yp,O0),s(Xn,D0),s(Xn,wp),s(wp,b0),s(Xn,R0),r(n,tf,c),r(n,fe,c),fe.innerHTML=gL,r(n,ef,c),r(n,On,c),s(On,Sp),s(Sp,P0),s(On,y0),s(On,Tp),s(Tp,w0),s(On,S0),s(On,hp),s(hp,T0),s(On,h0),s(On,Hp),s(Hp,H0),s(On,M0),r(n,af,c),r(n,Ee,c),Ee.innerHTML=nA,r(n,of,c),r(n,Mn,c),s(Mn,N0),s(Mn,Mp),s(Mp,x0),s(Mn,j0),s(Mn,Np),s(Np,L0),s(Mn,A0),s(Mn,xp),s(xp,W0),s(Mn,B0),r(n,pf,c),r(n,H,c),s(H,jp),s(jp,q0),s(H,F0),s(H,Lp),s(Lp,J0),s(H,G0),s(H,Ap),s(Ap,I0),s(H,U0),s(H,Wp),s(Wp,z0),s(H,Z0),s(H,Bp),s(Bp,Q0),s(H,K0),s(H,qp),s(qp,V0),s(H,X0),s(H,Fp),s(Fp,Y0),s(H,$0),r(n,lf,c),r(n,cf,c),r(n,rf,c),r(n,v,c),s(v,Jp),s(Jp,g0),s(v,n6),s(v,Gp),s(Gp,s6),s(v,t6),s(v,Ip),s(Ip,e6),s(v,a6),s(v,Up),s(Up,o6),s(v,p6),s(v,zp),s(zp,l6),s(v,c6),s(v,Zp),s(Zp,r6),s(v,u6),s(v,Qp),s(Qp,i6),s(v,d6),s(v,Kp),s(Kp,k6),s(v,f6),s(v,Vp),s(Vp,E6),s(v,v6),s(v,Xp),s(Xp,_6),s(v,m6),s(v,Yp),s(Yp,C6),s(v,O6),s(v,$p),s($p,D6),s(v,b6),r(n,uf,c),r(n,tt,c),s(tt,R6),s(tt,gp),s(gp,P6),s(tt,y6),r(n,df,c),r(n,b,c),s(b,nl),s(nl,w6),s(b,S6),s(b,sl),s(sl,T6),s(b,h6),s(b,tl),s(tl,H6),s(b,M6),s(b,el),s(el,N6),s(b,x6),s(b,al),s(al,j6),s(b,L6),s(b,ol),s(ol,A6),s(b,W6),s(b,pl),s(pl,B6),s(b,q6),s(b,ll),s(ll,F6),s(b,J6),r(n,kf,c),r(n,R,c),s(R,cl),s(cl,G6),s(R,I6),s(R,rl),s(rl,U6),s(R,z6),s(R,ul),s(ul,Z6),s(R,Q6),s(R,il),s(il,K6),s(R,V6),s(R,dl),s(dl,X6),s(R,Y6),s(R,kl),s(kl,$6),s(R,g6),s(R,fl),s(fl,n9),s(R,s9),s(R,El),s(El,t9),s(R,e9),r(n,ff,c),r(n,et,c),s(et,a9),s(et,vl),s(vl,o9),s(et,p9),r(n,Ef,c),r(n,ve,c),ve.innerHTML=sA,r(n,vf,c),r(n,ka,c),s(ka,l9),r(n,_f,c),r(n,fa,c),s(fa,_e),s(_e,c9),s(_e,_l),s(_l,r9),s(_e,u9),r(n,mf,c),r(n,Cf,c),r(n,Of,c),r(n,Df,c),r(n,at,c),s(at,ot),s(ot,ml),s(at,i9),r(n,bf,c),r(n,Rf,c),r(n,Pf,c),r(n,Nn,c),s(Nn,d9),s(Nn,Cl),s(Cl,k9),s(Nn,f9),s(Nn,Ol),s(Ol,E9),s(Nn,v9),s(Nn,Dl),s(Dl,_9),s(Nn,m9),r(n,yf,c),r(n,ln,c),s(ln,C9),s(ln,bl),s(bl,O9),s(ln,D9),s(ln,Rl),s(Rl,b9),s(ln,R9),s(ln,Pl),s(Pl,P9),s(ln,y9),s(ln,yl),s(yl,w9),s(ln,S9),r(n,wf,c),r(n,Ea,c),s(Ea,T9),r(n,Sf,c),r(n,me,c),me.innerHTML=tA,r(n,Tf,c),r(n,pt,c),s(pt,h9),s(pt,wl),s(wl,H9),s(pt,M9),r(n,hf,c),r(n,Hf,c),r(n,Mf,c),r(n,xn,c),s(xn,N9),s(xn,Sl),s(Sl,x9),s(xn,j9),s(xn,Tl),s(Tl,L9),s(xn,A9),s(xn,Ce),s(Ce,W9),s(xn,B9),r(n,Nf,c),r(n,va,c),s(va,hl),s(hl,q9),r(n,xf,c),r(n,P,c),s(P,Hl),s(Hl,F9),s(P,J9),s(P,Ml),s(Ml,G9),s(P,I9),s(P,Nl),s(Nl,U9),s(P,z9),s(P,xl),s(xl,Z9),s(P,Q9),s(P,jl),s(jl,K9),s(P,V9),s(P,Ll),s(Ll,X9),s(P,Y9),s(P,Al),s(Al,$9),s(P,g9),s(P,Wl),s(Wl,n4),s(P,s4),r(n,jf,c),r(n,Lf,c),r(n,Af,c),r(n,jn,c),s(jn,t4),s(jn,Bl),s(Bl,e4),s(jn,a4),s(jn,ql),s(ql,o4),s(jn,p4),s(jn,Fl),s(Fl,l4),s(jn,c4),r(n,Wf,c),r(n,Dn,c),s(Dn,Jl),s(Jl,r4),s(Dn,u4),s(Dn,Gl),s(Gl,i4),s(Dn,d4),s(Dn,Il),s(Il,k4),s(Dn,f4),s(Dn,Ul),s(Ul,E4),s(Dn,v4),r(n,Bf,c),r(n,L,c),s(L,zl),s(zl,_4),s(L,m4),s(L,Zl),s(Zl,C4),s(L,O4),s(L,Ql),s(Ql,D4),s(L,b4),s(L,Kl),s(Kl,R4),s(L,P4),s(L,Vl),s(Vl,y4),s(L,w4),s(L,Xl),s(Xl,S4),s(L,T4),r(n,qf,c),r(n,Oe,c),Oe.innerHTML=eA,r(n,Ff,c),r(n,_a,c),s(_a,h4),r(n,Jf,c),r(n,De,c),De.innerHTML=aA,r(n,Gf,c),r(n,lt,c),s(lt,H4),s(lt,Yl),s(Yl,M4),s(lt,N4),r(n,If,c),r(n,k,c),s(k,$l),s($l,x4),s(k,j4),s(k,gl),s(gl,L4),s(k,A4),s(k,nc),s(nc,W4),s(k,B4),s(k,sc),s(sc,q4),s(k,F4),s(k,tc),s(tc,J4),s(k,G4),s(k,ec),s(ec,I4),s(k,U4),s(k,ac),s(ac,z4),s(k,Z4),s(k,oc),s(oc,Q4),s(k,K4),s(k,pc),s(pc,V4),s(k,X4),s(k,lc),s(lc,Y4),s(k,$4),s(k,cc),s(cc,g4),s(k,n8),s(k,rc),s(rc,s8),s(k,t8),s(k,uc),s(uc,e8),s(k,a8),s(k,ic),s(ic,o8),s(k,p8),s(k,dc),s(dc,l8),s(k,c8),s(k,kc),s(kc,r8),s(k,u8),s(k,fc),s(fc,i8),s(k,d8),s(k,Ec),s(Ec,k8),s(k,f8),r(n,Uf,c),r(n,E,c),s(E,vc),s(vc,E8),s(E,v8),s(E,_c),s(_c,_8),s(E,m8),s(E,mc),s(mc,C8),s(E,O8),s(E,Cc),s(Cc,D8),s(E,b8),s(E,Oc),s(Oc,R8),s(E,P8),s(E,Dc),s(Dc,y8),s(E,w8),s(E,bc),s(bc,S8),s(E,T8),s(E,Rc),s(Rc,h8),s(E,H8),s(E,Pc),s(Pc,M8),s(E,N8),s(E,yc),s(yc,x8),s(E,j8),s(E,wc),s(wc,L8),s(E,A8),s(E,Sc),s(Sc,W8),s(E,B8),s(E,Tc),s(Tc,q8),s(E,F8),r(n,zf,c),r(n,ds,c),s(ds,J8),s(ds,hc),s(hc,G8),s(ds,I8),s(ds,Hc),s(Hc,U8),s(ds,z8),r(n,Zf,c),r(n,Qf,c),r(n,Kf,c),r(n,Vf,c),r(n,ct,c),s(ct,rt),s(rt,Mc),s(ct,Z8),r(n,Xf,c),r(n,ks,c),s(ks,Q8),s(ks,Nc),s(Nc,K8),s(ks,V8),s(ks,xc),s(xc,X8),s(ks,Y8),r(n,Yf,c),r(n,S,c),s(S,$8),s(S,jc),s(jc,g8),s(S,n7),s(S,Lc),s(Lc,s7),s(S,t7),s(S,Ac),s(Ac,e7),s(S,a7),s(S,Wc),s(Wc,o7),s(S,p7),s(S,Bc),s(Bc,l7),s(S,c7),s(S,qc),s(qc,r7),s(S,u7),s(S,Fc),s(Fc,i7),s(S,d7),r(n,$f,c),r(n,gf,c),r(n,n1,c),r(n,s1,c),r(n,ut,c),s(ut,it),s(it,Jc),s(ut,k7),r(n,t1,c),r(n,cn,c),s(cn,f7),s(cn,Gc),s(Gc,E7),s(cn,v7),s(cn,Ic),s(Ic,_7),s(cn,m7),s(cn,Uc),s(Uc,C7),s(cn,O7),s(cn,zc),s(zc,D7),s(cn,b7),r(n,e1,c),r(n,fs,c),s(fs,R7),s(fs,Zc),s(Zc,P7),s(fs,y7),s(fs,Qc),s(Qc,w7),s(fs,S7),r(n,a1,c),r(n,ma,c),s(ma,T7),r(n,o1,c),r(n,be,c),be.innerHTML=oA,r(n,p1,c),r(n,l1,c),r(n,c1,c),r(n,r1,c),r(n,dt,c),s(dt,kt),s(kt,Kc),s(dt,h7),r(n,u1,c),r(n,i1,c),r(n,d1,c),r(n,Es,c),s(Es,H7),s(Es,Vc),s(Vc,M7),s(Es,N7),s(Es,Xc),s(Xc,x7),s(Es,j7),r(n,k1,c),r(n,f1,c),r(n,E1,c),r(n,v1,c),r(n,ft,c),s(ft,Et),s(Et,Yc),s(ft,L7),r(n,_1,c),r(n,Ca,c),s(Ca,A7),r(n,m1,c),r(n,Re,c),Re.innerHTML=pA,r(n,C1,c),r(n,Oa,c),s(Oa,W7),r(n,O1,c),r(n,Pe,c),Pe.innerHTML=lA,r(n,D1,c),r(n,vs,c),s(vs,B7),s(vs,$c),s($c,q7),s(vs,F7),s(vs,gc),s(gc,J7),s(vs,G7),r(n,b1,c),r(n,_s,c),s(_s,I7),s(_s,nr),s(nr,U7),s(_s,z7),s(_s,sr),s(sr,Z7),s(_s,Q7),r(n,R1,c),r(n,ms,c),s(ms,K7),s(ms,tr),s(tr,V7),s(ms,X7),s(ms,er),s(er,Y7),s(ms,$7),r(n,P1,c),r(n,Ln,c),s(Ln,g7),s(Ln,ar),s(ar,nm),s(Ln,sm),s(Ln,or),s(or,tm),s(Ln,em),s(Ln,pr),s(pr,am),s(Ln,om),r(n,y1,c),r(n,rn,c),s(rn,pm),s(rn,lr),s(lr,lm),s(rn,cm),s(rn,cr),s(cr,rm),s(rn,um),s(rn,rr),s(rr,im),s(rn,dm),s(rn,ur),s(ur,km),s(rn,fm),r(n,w1,c),r(n,Cs,c),s(Cs,Em),s(Cs,ir),s(ir,vm),s(Cs,_m),s(Cs,dr),s(dr,mm),s(Cs,Cm),r(n,S1,c),r(n,Da,c),s(Da,Om),r(n,T1,c),r(n,h1,c),r(n,H1,c),r(n,M1,c),r(n,vt,c),s(vt,_t),s(_t,kr),s(vt,Dm),r(n,N1,c),r(n,x1,c),r(n,j1,c),r(n,y,c),s(y,fr),s(fr,bm),s(y,Rm),s(y,Er),s(Er,Pm),s(y,ym),s(y,vr),s(vr,wm),s(y,Sm),s(y,_r),s(_r,Tm),s(y,hm),s(y,mr),s(mr,Hm),s(y,Mm),s(y,Cr),s(Cr,Nm),s(y,xm),s(y,Or),s(Or,jm),s(y,Lm),s(y,Dr),s(Dr,Am),s(y,Wm),r(n,L1,c),r(n,ye,c),ye.innerHTML=cA,r(n,A1,c),r(n,js,c),s(js,br),s(br,Bm),s(js,qm),s(js,Rr),s(Rr,Fm),s(js,Jm),r(n,W1,c),r(n,B1,c),r(n,q1,c),r(n,un,c),s(un,Pr),s(Pr,Gm),s(un,Im),s(un,yr),s(yr,Um),s(un,zm),s(un,wr),s(wr,Zm),s(un,Qm),s(un,Sr),s(Sr,Km),s(un,Vm),s(un,Tr),s(Tr,Xm),r(n,F1,c),r(n,we,c),we.innerHTML=rA,r(n,J1,c),r(n,G1,c),r(n,I1,c),r(n,U1,c),r(n,mt,c),s(mt,Ct),s(Ct,hr),s(mt,Ym),r(n,z1,c),r(n,_,c),s(_,Hr),s(Hr,$m),s(_,gm),s(_,Mr),s(Mr,nC),s(_,sC),s(_,Nr),s(Nr,tC),s(_,eC),s(_,xr),s(xr,aC),s(_,oC),s(_,jr),s(jr,pC),s(_,lC),s(_,Lr),s(Lr,cC),s(_,rC),s(_,Ar),s(Ar,uC),s(_,iC),s(_,Wr),s(Wr,dC),s(_,kC),s(_,Br),s(Br,fC),s(_,EC),s(_,qr),s(qr,vC),s(_,_C),s(_,Fr),s(Fr,mC),s(_,CC),s(_,Jr),s(Jr,OC),s(_,DC),r(n,Z1,c),r(n,$,c),s($,Gr),s(Gr,bC),s($,RC),s($,Ir),s(Ir,PC),s($,yC),s($,Ur),s(Ur,wC),s($,SC),s($,zr),s(zr,TC),s($,hC),s($,Zr),s(Zr,HC),s($,MC),r(n,Q1,c),r(n,Se,c),Se.innerHTML=uA,r(n,K1,c),r(n,V1,c),r(n,X1,c),r(n,D,c),s(D,Qr),s(Qr,NC),s(D,xC),s(D,Kr),s(Kr,jC),s(D,LC),s(D,Vr),s(Vr,AC),s(D,WC),s(D,Xr),s(Xr,BC),s(D,qC),s(D,Yr),s(Yr,FC),s(D,JC),s(D,$r),s($r,GC),s(D,IC),s(D,gr),s(gr,UC),s(D,zC),s(D,nu),s(nu,ZC),s(D,QC),s(D,su),s(su,KC),s(D,VC),r(n,Y1,c),r(n,Te,c),Te.innerHTML=iA,r(n,$1,c),r(n,g1,c),r(n,n2,c),r(n,dn,c),s(dn,XC),s(dn,tu),s(tu,YC),s(dn,$C),s(dn,eu),s(eu,gC),s(dn,nO),s(dn,au),s(au,sO),s(dn,tO),s(dn,ou),s(ou,eO),s(dn,aO),r(n,s2,c),r(n,he,c),he.innerHTML=dA,r(n,t2,c),r(n,Ot,c),s(Ot,oO),s(Ot,He),s(He,pO),s(Ot,lO),r(n,e2,c),r(n,a2,c),r(n,o2,c),r(n,p2,c),r(n,Dt,c),s(Dt,bt),s(bt,pu),s(Dt,cO),r(n,l2,c),r(n,Os,c),s(Os,rO),s(Os,lu),s(lu,uO),s(Os,iO),s(Os,cu),s(cu,dO),s(Os,kO),r(n,c2,c),r(n,ba,c),s(ba,fO),r(n,r2,c),r(n,Me,c),Me.innerHTML=kA,r(n,u2,c),r(n,Rt,c),s(Rt,EO),s(Rt,ru),s(ru,vO),s(Rt,_O),r(n,i2,c),r(n,Pt,c),s(Pt,mO),s(Pt,uu),s(uu,CO),s(Pt,OO),r(n,d2,c),r(n,Ne,c),Ne.innerHTML=fA,r(n,k2,c),r(n,f2,c),r(n,E2,c),r(n,kn,c),s(kn,DO),s(kn,iu),s(iu,bO),s(kn,RO),s(kn,du),s(du,PO),s(kn,yO),s(kn,ku),s(ku,wO),s(kn,SO),s(kn,fu),s(fu,TO),s(kn,hO),r(n,v2,c),r(n,xe,c),xe.innerHTML=EA,r(n,_2,c),r(n,yt,c),s(yt,HO),s(yt,Eu),s(Eu,MO),s(yt,NO),r(n,m2,c),r(n,C2,c),r(n,O2,c),r(n,Yn,c),s(Yn,vu),s(vu,xO),s(Yn,jO),s(Yn,_u),s(_u,LO),s(Yn,AO),s(Yn,mu),s(mu,WO),s(Yn,BO),r(n,D2,c),r(n,je,c),je.innerHTML=vA,r(n,b2,c),r(n,R2,c),r(n,P2,c),r(n,y2,c),r(n,wt,c),s(wt,St),s(St,Cu),s(wt,qO),r(n,w2,c),r(n,An,c),s(An,FO),s(An,Ou),s(Ou,JO),s(An,GO),s(An,Du),s(Du,IO),s(An,UO),s(An,bu),s(bu,zO),s(An,ZO),r(n,S2,c),r(n,Le,c),Le.innerHTML=_A,r(n,T2,c),r(n,g,c),s(g,Ru),s(Ru,QO),s(g,KO),s(g,Pu),s(Pu,VO),s(g,XO),s(g,yu),s(yu,YO),s(g,$O),s(g,wu),s(wu,gO),s(g,nD),s(g,Su),s(Su,sD),s(g,tD),r(n,h2,c),r(n,H2,c),r(n,M2,c),r(n,Ds,c),s(Ds,eD),s(Ds,Tu),s(Tu,aD),s(Ds,oD),s(Ds,hu),s(hu,pD),s(Ds,lD),r(n,N2,c),r(n,Ae,c),Ae.innerHTML=mA,r(n,x2,c),r(n,Tt,c),s(Tt,cD),s(Tt,We),s(We,rD),s(Tt,uD),r(n,j2,c),r(n,L2,c),r(n,A2,c),r(n,I,c),s(I,iD),s(I,Hu),s(Hu,dD),s(I,kD),s(I,Mu),s(Mu,fD),s(I,ED),s(I,Nu),s(Nu,vD),s(I,_D),s(I,xu),s(xu,mD),s(I,CD),s(I,ju),s(ju,OD),s(I,DD),r(n,W2,c),r(n,Ra,c),s(Ra,bD),r(n,B2,c),r(n,$n,c),s($n,Lu),s(Lu,RD),s($n,PD),s($n,Au),s(Au,yD),s($n,wD),s($n,Wu),s(Wu,SD),s($n,TD),r(n,q2,c),r(n,ht,c),s(ht,hD),s(ht,Bu),s(Bu,HD),s(ht,MD),r(n,F2,c),r(n,Pa,c),s(Pa,nn),s(nn,ND),s(nn,qu),s(qu,xD),s(nn,jD),s(nn,Fu),s(Fu,LD),s(nn,AD),s(nn,Ju),s(Ju,WD),s(nn,BD),s(nn,Gu),s(Gu,qD),s(nn,FD),s(nn,Iu),s(Iu,JD),s(nn,GD),r(n,J2,c),r(n,G2,c),r(n,I2,c),r(n,U2,c),r(n,Ht,c),s(Ht,Mt),s(Mt,Uu),s(Ht,ID),r(n,z2,c),r(n,Z2,c),r(n,Q2,c),r(n,ya,c),s(ya,UD),r(n,K2,c),r(n,V2,c),r(n,X2,c),r(n,Y2,c),r(n,Nt,c),s(Nt,xt),s(xt,zu),s(Nt,zD),r(n,$2,c),r(n,A,c),s(A,Zu),s(Zu,ZD),s(A,QD),s(A,Qu),s(Qu,KD),s(A,VD),s(A,Ku),s(Ku,XD),s(A,YD),s(A,Vu),s(Vu,$D),s(A,gD),s(A,Xu),s(Xu,nb),s(A,sb),s(A,Yu),s(Yu,tb),s(A,eb),r(n,g2,c),r(n,Be,c),Be.innerHTML=CA,r(n,nE,c),r(n,sE,c),r(n,tE,c),r(n,T,c),s(T,ab),s(T,$u),s($u,ob),s(T,pb),s(T,gu),s(gu,lb),s(T,cb),s(T,ni),s(ni,rb),s(T,ub),s(T,si),s(si,ib),s(T,db),s(T,ti),s(ti,kb),s(T,fb),s(T,ei),s(ei,Eb),s(T,vb),s(T,ai),s(ai,_b),s(T,mb),r(n,eE,c),r(n,Wn,c),s(Wn,Cb),s(Wn,oi),s(oi,Ob),s(Wn,Db),s(Wn,pi),s(pi,bb),s(Wn,Rb),s(Wn,li),s(li,Pb),s(Wn,yb),r(n,aE,c),r(n,qe,c),qe.innerHTML=OA,r(n,oE,c),r(n,pE,c),r(n,lE,c),r(n,bn,c),s(bn,ci),s(ci,wb),s(bn,Sb),s(bn,ri),s(ri,Tb),s(bn,hb),s(bn,ui),s(ui,Hb),s(bn,Mb),s(bn,ii),s(ii,Nb),s(bn,xb),r(n,cE,c),r(n,Fe,c),Fe.innerHTML=DA,r(n,rE,c),r(n,uE,c),r(n,iE,c),r(n,h,c),s(h,jb),s(h,di),s(di,Lb),s(h,Ab),s(h,ki),s(ki,Wb),s(h,Bb),s(h,fi),s(fi,qb),s(h,Fb),s(h,Ei),s(Ei,Jb),s(h,Gb),s(h,vi),s(vi,Ib),s(h,Ub),s(h,_i),s(_i,zb),s(h,Zb),s(h,mi),s(mi,Qb),s(h,Kb),r(n,dE,c),r(n,Je,c),Je.innerHTML=bA,r(n,kE,c),r(n,wa,c),s(wa,Vb),r(n,fE,c),r(n,Ge,c),Ge.innerHTML=RA,r(n,EE,c),r(n,vE,c),r(n,_E,c),r(n,Sa,c),s(Sa,fn),s(fn,Ci),s(Ci,Xb),s(fn,Yb),s(fn,Oi),s(Oi,$b),s(fn,gb),s(fn,Di),s(Di,nR),s(fn,sR),s(fn,bi),s(bi,tR),s(fn,eR),s(fn,Ri),s(Ri,aR),s(fn,oR),r(n,mE,c),r(n,CE,c),r(n,OE,c),r(n,DE,c),r(n,jt,c),s(jt,Lt),s(Lt,Pi),s(jt,pR),r(n,bE,c),r(n,En,c),s(En,lR),s(En,yi),s(yi,cR),s(En,rR),s(En,wi),s(wi,uR),s(En,iR),s(En,Si),s(Si,dR),s(En,kR),s(En,Ti),s(Ti,fR),s(En,ER),r(n,RE,c),r(n,At,c),s(At,vR),s(At,hi),s(hi,_R),s(At,mR),r(n,PE,c),r(n,Ie,c),Ie.innerHTML=PA,r(n,yE,c),r(n,wE,c),r(n,SE,c),r(n,Rn,c),s(Rn,Hi),s(Hi,CR),s(Rn,OR),s(Rn,Mi),s(Mi,DR),s(Rn,bR),s(Rn,Ni),s(Ni,RR),s(Rn,PR),s(Rn,xi),s(xi,yR),s(Rn,wR),r(n,TE,c),r(n,Ue,c),Ue.innerHTML=yA,r(n,hE,c),r(n,Ta,c),s(Ta,SR),r(n,HE,c),r(n,Bn,c),s(Bn,TR),s(Bn,ji),s(ji,hR),s(Bn,HR),s(Bn,Li),s(Li,MR),s(Bn,NR),s(Bn,Ai),s(Ai,xR),s(Bn,jR),r(n,ME,c),r(n,qn,c),s(qn,LR),s(qn,Wi),s(Wi,AR),s(qn,WR),s(qn,Bi),s(Bi,BR),s(qn,qR),s(qn,qi),s(qi,FR),s(qn,JR),r(n,NE,c),r(n,Wt,c),s(Wt,GR),s(Wt,Fi),s(Fi,IR),s(Wt,UR),r(n,xE,c),r(n,jE,c),r(n,LE,c),r(n,ha,c),s(ha,zR),r(n,AE,c),r(n,ze,c),ze.innerHTML=wA,r(n,WE,c),r(n,Bt,c),s(Bt,ZR),s(Bt,Ji),s(Ji,QR),s(Bt,KR),r(n,BE,c),r(n,qE,c),r(n,FE,c),r(n,qt,c),s(qt,VR),s(qt,Gi),s(Gi,XR),s(qt,YR),r(n,JE,c),r(n,Ze,c),Ze.innerHTML=SA,r(n,GE,c),r(n,Ls,c),s(Ls,Ii),s(Ii,$R),s(Ls,gR),s(Ls,Ui),s(Ui,nP),s(Ls,sP),r(n,IE,c),r(n,Pn,c),s(Pn,zi),s(zi,tP),s(Pn,eP),s(Pn,Zi),s(Zi,aP),s(Pn,oP),s(Pn,Qi),s(Qi,pP),s(Pn,lP),s(Pn,Ki),s(Ki,cP),s(Pn,rP),r(n,UE,c),r(n,As,c),s(As,Vi),s(Vi,uP),s(As,iP),s(As,Xi),s(Xi,dP),s(As,kP),r(n,zE,c),r(n,ZE,c),r(n,QE,c),r(n,x,c),s(x,fP),s(x,Yi),s(Yi,EP),s(x,vP),s(x,$i),s($i,_P),s(x,mP),s(x,gi),s(gi,CP),s(x,OP),s(x,nd),s(nd,DP),s(x,bP),s(x,sd),s(sd,RP),s(x,PP),s(x,td),s(td,yP),s(x,wP),r(n,KE,c),r(n,U,c),s(U,SP),s(U,ed),s(ed,TP),s(U,hP),s(U,ad),s(ad,HP),s(U,MP),s(U,od),s(od,NP),s(U,xP),s(U,pd),s(pd,jP),s(U,LP),s(U,ld),s(ld,AP),s(U,WP),r(n,VE,c),r(n,Qe,c),Qe.innerHTML=TA,r(n,XE,c),r(n,Fn,c),s(Fn,BP),s(Fn,cd),s(cd,qP),s(Fn,FP),s(Fn,rd),s(rd,JP),s(Fn,GP),s(Fn,Ke),s(Ke,IP),s(Fn,UP),r(n,YE,c),r(n,Ft,c),s(Ft,zP),s(Ft,Ve),s(Ve,ZP),s(Ft,QP),r(n,$E,c),r(n,gE,c),r(n,n3,c),r(n,Jt,c),s(Jt,j),s(j,ud),s(ud,KP),s(j,VP),s(j,id),s(id,XP),s(j,YP),s(j,dd),s(dd,$P),s(j,gP),s(j,kd),s(kd,ny),s(j,sy),s(j,fd),s(fd,ty),s(j,ey),s(j,Ed),s(Ed,ay),s(j,oy),s(j,vd),s(vd,py),s(j,ly),s(Jt,cy),s(Jt,Jn),s(Jn,_d),s(_d,ry),s(Jn,uy),s(Jn,md),s(md,iy),s(Jn,dy),s(Jn,Cd),s(Cd,ky),s(Jn,fy),s(Jn,Od),s(Od,Ey),s(Jn,vy),r(n,s3,c),r(n,t3,c),r(n,e3,c),r(n,sn,c),s(sn,Dd),s(Dd,_y),s(sn,my),s(sn,bd),s(bd,Cy),s(sn,Oy),s(sn,Rd),s(Rd,Dy),s(sn,by),s(sn,Pd),s(Pd,Ry),s(sn,Py),s(sn,yd),s(yd,yy),s(sn,wy),r(n,a3,c),r(n,Xe,c),Xe.innerHTML=hA,r(n,o3,c),r(n,Ha,c),s(Ha,Sy),r(n,p3,c),r(n,yn,c),s(yn,wd),s(wd,Ty),s(yn,hy),s(yn,Sd),s(Sd,Hy),s(yn,My),s(yn,Td),s(Td,Ny),s(yn,xy),s(yn,hd),s(hd,jy),s(yn,Ly),r(n,l3,c),r(n,tn,c),s(tn,Hd),s(Hd,Ay),s(tn,Wy),s(tn,Md),s(Md,By),s(tn,qy),s(tn,Nd),s(Nd,Fy),s(tn,Jy),s(tn,xd),s(xd,Gy),s(tn,Iy),s(tn,jd),s(jd,Uy),s(tn,zy),r(n,c3,c),r(n,r3,c),r(n,u3,c),r(n,i3,c),r(n,Gt,c),s(Gt,It),s(It,Ld),s(Gt,Zy),r(n,d3,c),r(n,z,c),s(z,Qy),s(z,Ad),s(Ad,Ky),s(z,Vy),s(z,Wd),s(Wd,Xy),s(z,Yy),s(z,Bd),s(Bd,$y),s(z,gy),s(z,qd),s(qd,nw),s(z,sw),s(z,Fd),s(Fd,tw),s(z,ew),r(n,k3,c),r(n,f3,c),r(n,E3,c),r(n,Ma,c),s(Ma,aw),r(n,v3,c),r(n,Ye,c),Ye.innerHTML=HA,r(n,_3,c),r(n,bs,c),s(bs,ow),s(bs,Jd),s(Jd,pw),s(bs,lw),s(bs,Gd),s(Gd,cw),s(bs,rw),r(n,m3,c),r(n,Ws,c),s(Ws,Id),s(Id,uw),s(Ws,iw),s(Ws,Ud),s(Ud,dw),s(Ws,kw),r(n,C3,c),r(n,O3,c),r(n,D3,c),r(n,Na,c),s(Na,zd),s(zd,fw),r(n,b3,c),r(n,R3,c),r(n,P3,c),r(n,xa,c),s(xa,Ew),r(n,y3,c),r(n,$e,c),$e.innerHTML=MA,r(n,w3,c),r(n,Gn,c),s(Gn,vw),s(Gn,Zd),s(Zd,_w),s(Gn,mw),s(Gn,Qd),s(Qd,Cw),s(Gn,Ow),s(Gn,Kd),s(Kd,Dw),s(Gn,bw),r(n,S3,c),r(n,Bs,c),s(Bs,Vd),s(Vd,Rw),s(Bs,Pw),s(Bs,Xd),s(Xd,yw),s(Bs,ww),r(n,T3,c),r(n,ge,c),ge.innerHTML=NA,r(n,h3,c),r(n,H3,c),r(n,M3,c),r(n,N3,c),r(n,Ut,c),s(Ut,zt),s(zt,Yd),s(Ut,Sw),r(n,x3,c),r(n,ja,c),s(ja,Tw),r(n,j3,c),r(n,na,c),na.innerHTML=xA,r(n,L3,c),r(n,A3,c),r(n,W3,c),r(n,Rs,c),s(Rs,hw),s(Rs,$d),s($d,Hw),s(Rs,Mw),s(Rs,gd),s(gd,Nw),s(Rs,xw),r(n,B3,c),r(n,In,c),s(In,jw),s(In,sa),s(sa,Lw),s(In,Aw),s(In,nk),s(nk,Ww),s(In,Bw),s(In,sk),s(sk,qw),s(In,Fw),r(n,q3,c),r(n,F3,c),r(n,J3,c),r(n,G3,c),r(n,Zt,c),s(Zt,Qt),s(Qt,tk),s(Zt,Jw),r(n,I3,c),r(n,U3,c),r(n,z3,c),r(n,La,c),s(La,qs),s(qs,ta),s(ta,Aa),s(qs,Gw),s(qs,Iw),s(qs,Uw),s(qs,ea),s(ea,zw),r(n,Z3,c),r(n,Q3,c),r(n,K3,c)},p:rS,i:rS,o:rS,d(n){n&&t(ua),n&&t(uk),n&&t(ia),n&&t(ik),n&&t(dk),n&&t(kk),n&&t(fk),n&&t(Xs),n&&t(Ek),n&&t(vk),n&&t(_k),n&&t($s),n&&t(mk),n&&t(w),n&&t(Ck),n&&t(Ok),n&&t(Dk),n&&t(bk),n&&t(gs),n&&t(Rk),n&&t(Pk),n&&t(yk),n&&t(on),n&&t(wk),n&&t(Sk),n&&t(Tk),n&&t(xs),n&&t(hk),n&&t(ce),n&&t(Hk),n&&t(X),n&&t(Mk),n&&t(Nk),n&&t(xk),n&&t(os),n&&t(jk),n&&t(re),n&&t(Lk),n&&t(ps),n&&t(Ak),n&&t(ue),n&&t(Wk),n&&t(da),n&&t(Bk),n&&t(hn),n&&t(qk),n&&t(Fk),n&&t(Jk),n&&t(pn),n&&t(Gk),n&&t(ie),n&&t(Ik),n&&t(mn),n&&t(Uk),n&&t(de),n&&t(zk),n&&t(G),n&&t(Zk),n&&t(Cn),n&&t(Qk),n&&t(ke),n&&t(Kk),n&&t(Vk),n&&t(Xk),n&&t(N),n&&t(Yk),n&&t(cs),n&&t($k),n&&t(is),n&&t(gk),n&&t(nf),n&&t(sf),n&&t(Xn),n&&t(tf),n&&t(fe),n&&t(ef),n&&t(On),n&&t(af),n&&t(Ee),n&&t(of),n&&t(Mn),n&&t(pf),n&&t(H),n&&t(lf),n&&t(cf),n&&t(rf),n&&t(v),n&&t(uf),n&&t(tt),n&&t(df),n&&t(b),n&&t(kf),n&&t(R),n&&t(ff),n&&t(et),n&&t(Ef),n&&t(ve),n&&t(vf),n&&t(ka),n&&t(_f),n&&t(fa),n&&t(mf),n&&t(Cf),n&&t(Of),n&&t(Df),n&&t(at),n&&t(bf),n&&t(Rf),n&&t(Pf),n&&t(Nn),n&&t(yf),n&&t(ln),n&&t(wf),n&&t(Ea),n&&t(Sf),n&&t(me),n&&t(Tf),n&&t(pt),n&&t(hf),n&&t(Hf),n&&t(Mf),n&&t(xn),n&&t(Nf),n&&t(va),n&&t(xf),n&&t(P),n&&t(jf),n&&t(Lf),n&&t(Af),n&&t(jn),n&&t(Wf),n&&t(Dn),n&&t(Bf),n&&t(L),n&&t(qf),n&&t(Oe),n&&t(Ff),n&&t(_a),n&&t(Jf),n&&t(De),n&&t(Gf),n&&t(lt),n&&t(If),n&&t(k),n&&t(Uf),n&&t(E),n&&t(zf),n&&t(ds),n&&t(Zf),n&&t(Qf),n&&t(Kf),n&&t(Vf),n&&t(ct),n&&t(Xf),n&&t(ks),n&&t(Yf),n&&t(S),n&&t($f),n&&t(gf),n&&t(n1),n&&t(s1),n&&t(ut),n&&t(t1),n&&t(cn),n&&t(e1),n&&t(fs),n&&t(a1),n&&t(ma),n&&t(o1),n&&t(be),n&&t(p1),n&&t(l1),n&&t(c1),n&&t(r1),n&&t(dt),n&&t(u1),n&&t(i1),n&&t(d1),n&&t(Es),n&&t(k1),n&&t(f1),n&&t(E1),n&&t(v1),n&&t(ft),n&&t(_1),n&&t(Ca),n&&t(m1),n&&t(Re),n&&t(C1),n&&t(Oa),n&&t(O1),n&&t(Pe),n&&t(D1),n&&t(vs),n&&t(b1),n&&t(_s),n&&t(R1),n&&t(ms),n&&t(P1),n&&t(Ln),n&&t(y1),n&&t(rn),n&&t(w1),n&&t(Cs),n&&t(S1),n&&t(Da),n&&t(T1),n&&t(h1),n&&t(H1),n&&t(M1),n&&t(vt),n&&t(N1),n&&t(x1),n&&t(j1),n&&t(y),n&&t(L1),n&&t(ye),n&&t(A1),n&&t(js),n&&t(W1),n&&t(B1),n&&t(q1),n&&t(un),n&&t(F1),n&&t(we),n&&t(J1),n&&t(G1),n&&t(I1),n&&t(U1),n&&t(mt),n&&t(z1),n&&t(_),n&&t(Z1),n&&t($),n&&t(Q1),n&&t(Se),n&&t(K1),n&&t(V1),n&&t(X1),n&&t(D),n&&t(Y1),n&&t(Te),n&&t($1),n&&t(g1),n&&t(n2),n&&t(dn),n&&t(s2),n&&t(he),n&&t(t2),n&&t(Ot),n&&t(e2),n&&t(a2),n&&t(o2),n&&t(p2),n&&t(Dt),n&&t(l2),n&&t(Os),n&&t(c2),n&&t(ba),n&&t(r2),n&&t(Me),n&&t(u2),n&&t(Rt),n&&t(i2),n&&t(Pt),n&&t(d2),n&&t(Ne),n&&t(k2),n&&t(f2),n&&t(E2),n&&t(kn),n&&t(v2),n&&t(xe),n&&t(_2),n&&t(yt),n&&t(m2),n&&t(C2),n&&t(O2),n&&t(Yn),n&&t(D2),n&&t(je),n&&t(b2),n&&t(R2),n&&t(P2),n&&t(y2),n&&t(wt),n&&t(w2),n&&t(An),n&&t(S2),n&&t(Le),n&&t(T2),n&&t(g),n&&t(h2),n&&t(H2),n&&t(M2),n&&t(Ds),n&&t(N2),n&&t(Ae),n&&t(x2),n&&t(Tt),n&&t(j2),n&&t(L2),n&&t(A2),n&&t(I),n&&t(W2),n&&t(Ra),n&&t(B2),n&&t($n),n&&t(q2),n&&t(ht),n&&t(F2),n&&t(Pa),n&&t(J2),n&&t(G2),n&&t(I2),n&&t(U2),n&&t(Ht),n&&t(z2),n&&t(Z2),n&&t(Q2),n&&t(ya),n&&t(K2),n&&t(V2),n&&t(X2),n&&t(Y2),n&&t(Nt),n&&t($2),n&&t(A),n&&t(g2),n&&t(Be),n&&t(nE),n&&t(sE),n&&t(tE),n&&t(T),n&&t(eE),n&&t(Wn),n&&t(aE),n&&t(qe),n&&t(oE),n&&t(pE),n&&t(lE),n&&t(bn),n&&t(cE),n&&t(Fe),n&&t(rE),n&&t(uE),n&&t(iE),n&&t(h),n&&t(dE),n&&t(Je),n&&t(kE),n&&t(wa),n&&t(fE),n&&t(Ge),n&&t(EE),n&&t(vE),n&&t(_E),n&&t(Sa),n&&t(mE),n&&t(CE),n&&t(OE),n&&t(DE),n&&t(jt),n&&t(bE),n&&t(En),n&&t(RE),n&&t(At),n&&t(PE),n&&t(Ie),n&&t(yE),n&&t(wE),n&&t(SE),n&&t(Rn),n&&t(TE),n&&t(Ue),n&&t(hE),n&&t(Ta),n&&t(HE),n&&t(Bn),n&&t(ME),n&&t(qn),n&&t(NE),n&&t(Wt),n&&t(xE),n&&t(jE),n&&t(LE),n&&t(ha),n&&t(AE),n&&t(ze),n&&t(WE),n&&t(Bt),n&&t(BE),n&&t(qE),n&&t(FE),n&&t(qt),n&&t(JE),n&&t(Ze),n&&t(GE),n&&t(Ls),n&&t(IE),n&&t(Pn),n&&t(UE),n&&t(As),n&&t(zE),n&&t(ZE),n&&t(QE),n&&t(x),n&&t(KE),n&&t(U),n&&t(VE),n&&t(Qe),n&&t(XE),n&&t(Fn),n&&t(YE),n&&t(Ft),n&&t($E),n&&t(gE),n&&t(n3),n&&t(Jt),n&&t(s3),n&&t(t3),n&&t(e3),n&&t(sn),n&&t(a3),n&&t(Xe),n&&t(o3),n&&t(Ha),n&&t(p3),n&&t(yn),n&&t(l3),n&&t(tn),n&&t(c3),n&&t(r3),n&&t(u3),n&&t(i3),n&&t(Gt),n&&t(d3),n&&t(z),n&&t(k3),n&&t(f3),n&&t(E3),n&&t(Ma),n&&t(v3),n&&t(Ye),n&&t(_3),n&&t(bs),n&&t(m3),n&&t(Ws),n&&t(C3),n&&t(O3),n&&t(D3),n&&t(Na),n&&t(b3),n&&t(R3),n&&t(P3),n&&t(xa),n&&t(y3),n&&t($e),n&&t(w3),n&&t(Gn),n&&t(S3),n&&t(Bs),n&&t(T3),n&&t(ge),n&&t(h3),n&&t(H3),n&&t(M3),n&&t(N3),n&&t(Ut),n&&t(x3),n&&t(ja),n&&t(j3),n&&t(na),n&&t(L3),n&&t(A3),n&&t(W3),n&&t(Rs),n&&t(B3),n&&t(In),n&&t(q3),n&&t(F3),n&&t(J3),n&&t(G3),n&&t(Zt),n&&t(I3),n&&t(U3),n&&t(z3),n&&t(La),n&&t(Z3),n&&t(Q3),n&&t(K3)}}}const SW={title:"표준 라이브러리",date:"2022-09-05T00:00:00.000Z",excerpt:"The Standard Library",categories:["Golang","Basic Golang"],coverImage:"/post_img/Go/Golang_basics/cover.png",coverWidth:16,coverHeight:9,indexed:!1,exposed:!0};class TW extends DW{constructor(ua){super(),bW(this,ua,null,yW,RW,{})}}export{TW as default,SW as metadata};
