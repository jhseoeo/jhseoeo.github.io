import{S as xe,i as Ie,s as ge,k as o,q as e,a as i,l as c,m as u,r as l,h as s,c as k,n as r,b as p,E as a,M as co}from"./index.5621e629.js";function Te(ke){let P,qa,bs,ws,ms,ys,M,x,Pn,Ja,Es,I,Za,K,za,Ka,vs,Ss,_s,dn,Qa,Cs,Q,re=`<code class="language-javascript"><span class="token keyword">const</span> wss <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocketServer</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">server</span><span class="token operator">:</span> httpsServer <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

wss<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'connection'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">ws</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	ws<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'message'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">message</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token comment">// Broadcast any received message to all clients</span>
		console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'received: %s'</span><span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>
		wss<span class="token punctuation">.</span><span class="token function">broadcast</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

wss<span class="token punctuation">.</span><span class="token function-variable function">broadcast</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">this</span><span class="token punctuation">.</span>clients<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">client</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>client<span class="token punctuation">.</span>readyState <span class="token operator">===</span> WebSocket<span class="token punctuation">.</span><span class="token constant">OPEN</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			client<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code>`,Ds,g,Va,V,Xa,Ya,Us,w,$a,X,nt,st,Y,at,tt,$,pt,ot,hs,Rs,Ps,bn,et,Ms,nn,fe=`<code class="language-go"><span class="token keyword">type</span> channelSet <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
	register   <span class="token keyword">chan</span> <span class="token operator">*</span>ws<span class="token punctuation">.</span>Conn
	unregister <span class="token keyword">chan</span> <span class="token operator">*</span>ws<span class="token punctuation">.</span>Conn
	broadcast  <span class="token keyword">chan</span> <span class="token builtin">string</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">type</span> client <span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>

<span class="token keyword">var</span> clients <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token operator">*</span>ws<span class="token punctuation">.</span>Conn<span class="token punctuation">]</span>client<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">sendBroadcastMessage</span><span class="token punctuation">(</span>cs <span class="token operator">*</span>channelSet<span class="token punctuation">,</span> message <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">for</span> c <span class="token operator">:=</span> <span class="token keyword">range</span> clients <span class="token punctuation">&#123;</span>
		<span class="token keyword">if</span> err <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">WriteMessage</span><span class="token punctuation">(</span>ws<span class="token punctuation">.</span>TextMessage<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
			fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"write error: err"</span><span class="token punctuation">)</span>
			c<span class="token punctuation">.</span><span class="token function">WriteMessage</span><span class="token punctuation">(</span>ws<span class="token punctuation">.</span>CloseMessage<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
			c<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">userHub</span><span class="token punctuation">(</span>cs <span class="token operator">*</span>channelSet<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">for</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">select</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">case</span> registerUser <span class="token operator">:=</span> <span class="token operator">&lt;-</span>cs<span class="token punctuation">.</span>register<span class="token punctuation">:</span>
			clients<span class="token punctuation">[</span>registerUser<span class="token punctuation">]</span> <span class="token operator">=</span> client<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
			fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"new client is connected"</span><span class="token punctuation">)</span>

		<span class="token keyword">case</span> unregisterUser <span class="token operator">:=</span> <span class="token operator">&lt;-</span>cs<span class="token punctuation">.</span>unregister<span class="token punctuation">:</span>
			<span class="token function">delete</span><span class="token punctuation">(</span>clients<span class="token punctuation">,</span> unregisterUser<span class="token punctuation">)</span>
			fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"connection terminated"</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">messageHub</span><span class="token punctuation">(</span>cs <span class="token operator">*</span>channelSet<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">for</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">select</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">case</span> message <span class="token operator">:=</span> <span class="token operator">&lt;-</span>cs<span class="token punctuation">.</span>broadcast<span class="token punctuation">:</span>
			fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"message received"</span><span class="token punctuation">)</span>
			<span class="token function">sendBroadcastMessage</span><span class="token punctuation">(</span>cs<span class="token punctuation">,</span> message<span class="token punctuation">)</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">var</span> channels <span class="token operator">=</span> channelSet<span class="token punctuation">&#123;</span>
		register<span class="token punctuation">:</span>   <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token operator">*</span>ws<span class="token punctuation">.</span>Conn<span class="token punctuation">)</span><span class="token punctuation">,</span>
		unregister<span class="token punctuation">:</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token operator">*</span>ws<span class="token punctuation">.</span>Conn<span class="token punctuation">)</span><span class="token punctuation">,</span>
		broadcast<span class="token punctuation">:</span>  <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">go</span> <span class="token function">userHub</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>channels<span class="token punctuation">)</span>
	<span class="token keyword">go</span> <span class="token function">messageHub</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>channels<span class="token punctuation">)</span>

	<span class="token operator">...</span>
<span class="token punctuation">&#125;</span></code>`,xs,d,ct,Mn,lt,ut,xn,it,kt,In,rt,ft,gn,dt,bt,Is,y,Tn,wt,mt,Wn,yt,Et,Hn,vt,St,gs,Ts,Ws,wn,_t,Hs,sn,de=`<code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token operator">...</span>

	app<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">"/ws/"</span><span class="token punctuation">,</span>
			<span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>fiber<span class="token punctuation">.</span>Ctx<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">&#123;</span>
				<span class="token keyword">if</span> ws<span class="token punctuation">.</span><span class="token function">IsWebSocketUpgrade</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
					c<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
				<span class="token punctuation">&#125;</span>
				<span class="token keyword">return</span> <span class="token boolean">nil</span>
			<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
			ws<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>ws<span class="token punctuation">.</span>Conn<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
				<span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
					channels<span class="token punctuation">.</span>unregister <span class="token operator">&lt;-</span> c
					c<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
				<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

				channels<span class="token punctuation">.</span>register <span class="token operator">&lt;-</span> c

				<span class="token keyword">for</span> <span class="token punctuation">&#123;</span>
					messageType<span class="token punctuation">,</span> message<span class="token punctuation">,</span> err <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">ReadMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
					<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
						<span class="token keyword">if</span> ws<span class="token punctuation">.</span><span class="token function">IsUnexpectedCloseError</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> ws<span class="token punctuation">.</span>CloseGoingAway<span class="token punctuation">,</span> ws<span class="token punctuation">.</span>CloseAbnormalClosure<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
							fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"read error:"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
						<span class="token punctuation">&#125;</span>
						<span class="token keyword">return</span>
					<span class="token punctuation">&#125;</span>

					<span class="token keyword">if</span> messageType <span class="token operator">==</span> ws<span class="token punctuation">.</span>TextMessage <span class="token punctuation">&#123;</span>
						channels<span class="token punctuation">.</span>broadcast <span class="token operator">&lt;-</span> <span class="token function">string</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span>
					<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
						fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"websocket message recived of type"</span><span class="token punctuation">,</span> messageType<span class="token punctuation">)</span>
					<span class="token punctuation">&#125;</span>
				<span class="token punctuation">&#125;</span>
			<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code>`,Os,v,Ct,On,Dt,Ut,Ln,ht,Rt,Ls,mn,Pt,Bs,Gs,Ns,T,Mt,an,xt,It,As,js,Fs,qs,W,H,Bn,gt,Js,yn,Tt,Zs,b,Gn,Wt,Ht,Nn,Ot,Lt,D,Bt,An,Gt,Nt,jn,At,jt,Ft,U,qt,Fn,Jt,Zt,qn,zt,Kt,Qt,tn,Vt,Jn,Xt,Yt,zs,En,$t,Ks,vn,np,Qs,Vs,Xs,Ys,O,L,Zn,sp,$s,pn,zn,ap,tp,na,on,be=`<code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	hub <span class="token operator">:=</span> <span class="token function">CreateHub</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	<span class="token operator">...</span>

	app<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">"/ws/:session"</span><span class="token punctuation">,</span>
		<span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>fiber<span class="token punctuation">.</span>Ctx<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">&#123;</span> <span class="token comment">// check if a client can establish websocket connection</span>
			<span class="token keyword">if</span> ws<span class="token punctuation">.</span><span class="token function">IsWebSocketUpgrade</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
				c<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
			<span class="token punctuation">&#125;</span>
			<span class="token keyword">return</span> <span class="token boolean">nil</span>
		<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
		ws<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span>conn <span class="token operator">*</span>ws<span class="token punctuation">.</span>Conn<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token function">WebsocketConnectionLoop</span><span class="token punctuation">(</span>clientDataStore<span class="token punctuation">,</span> hub<span class="token punctuation">,</span> conn<span class="token punctuation">)</span>
		<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code>`,sa,m,pp,Kn,op,ep,Qn,cp,lp,up,ip,aa,ta,pa,Sn,kp,oa,en,we=`<code class="language-go"><span class="token comment">// Websocket Session Loop for each client</span>
<span class="token keyword">func</span> <span class="token function">WebsocketConnectionLoop</span><span class="token punctuation">(</span>hub <span class="token operator">*</span>MessageHub<span class="token punctuation">,</span> conn <span class="token operator">*</span>ws<span class="token punctuation">.</span>Conn<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	session <span class="token operator">:=</span> <span class="token function">SessionName</span><span class="token punctuation">(</span>conn<span class="token punctuation">.</span><span class="token function">Params</span><span class="token punctuation">(</span><span class="token string">"session"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

	uuid<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">getUUID</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"an error occurred getting uuid:"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
		conn<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>

	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"user %s joined on %s&#92;n"</span><span class="token punctuation">,</span> uuid<span class="token punctuation">,</span> session<span class="token punctuation">)</span>

	client <span class="token operator">:=</span> Client<span class="token punctuation">&#123;</span>Conn<span class="token punctuation">:</span> conn<span class="token punctuation">&#125;</span>
	hub<span class="token punctuation">.</span><span class="token function">RegisterUser</span><span class="token punctuation">(</span>session<span class="token punctuation">,</span> uuid<span class="token punctuation">,</span> client<span class="token punctuation">)</span> <span class="token comment">// add current user's information to users list</span>

	<span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// when user leaves</span>
		fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"user %s leaved from %s&#92;n"</span><span class="token punctuation">,</span> uuid<span class="token punctuation">,</span> session<span class="token punctuation">)</span>
		hub<span class="token punctuation">.</span><span class="token function">UnregisterUser</span><span class="token punctuation">(</span>session<span class="token punctuation">,</span> uuid<span class="token punctuation">,</span> client<span class="token punctuation">)</span> <span class="token comment">// delete current user's information from users list</span>
		conn<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	<span class="token keyword">for</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">var</span> messageData MessageData
		err <span class="token operator">:=</span> conn<span class="token punctuation">.</span><span class="token function">ReadJSON</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>messageData<span class="token punctuation">)</span>

		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">if</span> ws<span class="token punctuation">.</span><span class="token function">IsUnexpectedCloseError</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> ws<span class="token punctuation">.</span>CloseGoingAway<span class="token punctuation">,</span> ws<span class="token punctuation">.</span>CloseAbnormalClosure<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
				fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"read error:"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
			<span class="token punctuation">&#125;</span>
			<span class="token keyword">return</span>
		<span class="token punctuation">&#125;</span>

		hub<span class="token punctuation">.</span><span class="token function">SendSignallingMessage</span><span class="token punctuation">(</span>session<span class="token punctuation">,</span> uuid<span class="token punctuation">,</span> messageData<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,ea,S,rp,Vn,fp,dp,Xn,bp,wp,ca,B,mp,Yn,yp,Ep,la,ua,ia,G,vp,$n,Sp,_p,ka,cn,me=`<code class="language-go"><span class="token comment">// Client struct type. you can add any data here</span>
<span class="token comment">// Client struct type. you can add any data here</span>
<span class="token keyword">type</span> Client <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
	Conn <span class="token operator">*</span>ws<span class="token punctuation">.</span>Conn
<span class="token punctuation">&#125;</span>

<span class="token comment">// Datastore of client</span>
<span class="token keyword">type</span> SessionDataStore <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
	mutex     sync<span class="token punctuation">.</span>RWMutex
	dataStore <span class="token keyword">map</span><span class="token punctuation">[</span>UUIDType<span class="token punctuation">]</span>Client
<span class="token punctuation">&#125;</span>

<span class="token comment">// Create new datastore</span>
<span class="token keyword">func</span> <span class="token function">MakeSessionDataStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>SessionDataStore <span class="token punctuation">&#123;</span>
	<span class="token keyword">return</span> <span class="token operator">&amp;</span>SessionDataStore<span class="token punctuation">&#123;</span>
		dataStore<span class="token punctuation">:</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span>UUIDType<span class="token punctuation">]</span>Client<span class="token punctuation">)</span><span class="token punctuation">,</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,ra,f,ns,Cp,Dp,ss,Up,hp,as,Rp,Pp,ts,Mp,xp,ps,Ip,gp,fa,da,ba,N,Tp,os,Wp,Hp,wa,ln,ye=`<code class="language-go"><span class="token operator">...</span>

<span class="token comment">// Message data protocol</span>
<span class="token keyword">type</span> MessageData <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
	Type    <span class="token builtin">string</span>      <span class="token string">&#96;json:"type"&#96;</span>
	Data    <span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token string">&#96;json:"data"&#96;</span>
	SrcUUID UUIDType    <span class="token string">&#96;json:"srcuuid"&#96;</span>
	DstUUID UUIDType    <span class="token string">&#96;json:"dstuuid"&#96;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">type</span> ChannelSet <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
	register      <span class="token keyword">chan</span> UserInfo
	unregister    <span class="token keyword">chan</span> UserInfo
	deleteSession <span class="token keyword">chan</span> <span class="token builtin">bool</span>
	broadcast     <span class="token keyword">chan</span> MessageInfo
	signaling     <span class="token keyword">chan</span> MessageInfo
<span class="token punctuation">&#125;</span>

<span class="token comment">// Set of channels</span>
<span class="token keyword">type</span> Hub <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
	mutex    sync<span class="token punctuation">.</span>RWMutex
	channels <span class="token keyword">map</span><span class="token punctuation">[</span>SessionName<span class="token punctuation">]</span>ChannelSet
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">CreateHub</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>Hub <span class="token punctuation">&#123;</span>
	hub <span class="token operator">:=</span> Hub<span class="token punctuation">&#123;</span>
		channels<span class="token punctuation">:</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span>SessionName<span class="token punctuation">]</span>ChannelSet<span class="token punctuation">)</span><span class="token punctuation">,</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">return</span> <span class="token operator">&amp;</span>hub
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>h <span class="token operator">*</span>Hub<span class="token punctuation">)</span> <span class="token function">SendBroadcastMessage</span><span class="token punctuation">(</span>session SessionName<span class="token punctuation">,</span> uuid UUIDType<span class="token punctuation">,</span> message MessageData<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	h<span class="token punctuation">.</span>mutex<span class="token punctuation">.</span><span class="token function">RLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">defer</span> h<span class="token punctuation">.</span>mutex<span class="token punctuation">.</span><span class="token function">RUnlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	h<span class="token punctuation">.</span>channels<span class="token punctuation">[</span>session<span class="token punctuation">]</span><span class="token punctuation">.</span>broadcast <span class="token operator">&lt;-</span> MessageInfo<span class="token punctuation">&#123;</span>session<span class="token punctuation">,</span> message<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>h <span class="token operator">*</span>Hub<span class="token punctuation">)</span> <span class="token function">SendSignallingMessage</span><span class="token punctuation">(</span>session SessionName<span class="token punctuation">,</span> uuid UUIDType<span class="token punctuation">,</span> message MessageData<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	h<span class="token punctuation">.</span>mutex<span class="token punctuation">.</span><span class="token function">RLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">defer</span> h<span class="token punctuation">.</span>mutex<span class="token punctuation">.</span><span class="token function">RUnlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	h<span class="token punctuation">.</span>channels<span class="token punctuation">[</span>session<span class="token punctuation">]</span><span class="token punctuation">.</span>signaling <span class="token operator">&lt;-</span> MessageInfo<span class="token punctuation">&#123;</span>session<span class="token punctuation">,</span> message<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,ma,h,es,Op,Lp,cs,Bp,Gp,ya,un,Ee=`<code class="language-go">
<span class="token keyword">func</span> <span class="token punctuation">(</span>h <span class="token operator">*</span>Hub<span class="token punctuation">)</span> <span class="token function">RegisterUser</span><span class="token punctuation">(</span>session SessionName<span class="token punctuation">,</span> uuid UUIDType<span class="token punctuation">,</span> client Client<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> <span class="token boolean">_</span><span class="token punctuation">,</span> ok <span class="token operator">:=</span> h<span class="token punctuation">.</span>channels<span class="token punctuation">[</span>session<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token operator">!</span>ok <span class="token punctuation">&#123;</span>
		channelSet<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">RunSessionLoop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">return</span> err
		<span class="token punctuation">&#125;</span>

		h<span class="token punctuation">.</span>mutex<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		h<span class="token punctuation">.</span>channels<span class="token punctuation">[</span>session<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">*</span>channelSet
		h<span class="token punctuation">.</span>mutex<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>

	h<span class="token punctuation">.</span>mutex<span class="token punctuation">.</span><span class="token function">RLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	h<span class="token punctuation">.</span>channels<span class="token punctuation">[</span>session<span class="token punctuation">]</span><span class="token punctuation">.</span>register <span class="token operator">&lt;-</span> UserInfo<span class="token punctuation">&#123;</span>session<span class="token punctuation">,</span> uuid<span class="token punctuation">,</span> client<span class="token punctuation">&#125;</span>
	h<span class="token punctuation">.</span>mutex<span class="token punctuation">.</span><span class="token function">RUnlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	<span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>h <span class="token operator">*</span>Hub<span class="token punctuation">)</span> <span class="token function">UnregisterUser</span><span class="token punctuation">(</span>session SessionName<span class="token punctuation">,</span> uuid UUIDType<span class="token punctuation">,</span> client Client<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	h<span class="token punctuation">.</span>mutex<span class="token punctuation">.</span><span class="token function">RLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	h<span class="token punctuation">.</span>channels<span class="token punctuation">[</span>session<span class="token punctuation">]</span><span class="token punctuation">.</span>unregister <span class="token operator">&lt;-</span> UserInfo<span class="token punctuation">&#123;</span>session<span class="token punctuation">,</span> uuid<span class="token punctuation">,</span> client<span class="token punctuation">&#125;</span>
	toDetete <span class="token operator">:=</span> <span class="token operator">&lt;-</span>h<span class="token punctuation">.</span>channels<span class="token punctuation">[</span>session<span class="token punctuation">]</span><span class="token punctuation">.</span>deleteSession
	h<span class="token punctuation">.</span>mutex<span class="token punctuation">.</span><span class="token function">RUnlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	<span class="token keyword">if</span> toDetete <span class="token punctuation">&#123;</span>
		h<span class="token punctuation">.</span>mutex<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token function">delete</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>channels<span class="token punctuation">,</span> session<span class="token punctuation">)</span>
		h<span class="token punctuation">.</span>mutex<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,Ea,R,ls,Np,Ap,us,jp,Fp,va,Sa,_a,A,qp,is,Jp,Zp,Ca,kn,ve=`<code class="language-go"><span class="token keyword">func</span> <span class="token function">RunSessionLoop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>ChannelSet<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	channelSet <span class="token operator">:=</span> ChannelSet<span class="token punctuation">&#123;</span>
		register<span class="token punctuation">:</span>      <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> UserInfo<span class="token punctuation">)</span><span class="token punctuation">,</span>
		unregister<span class="token punctuation">:</span>    <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> UserInfo<span class="token punctuation">)</span><span class="token punctuation">,</span>
		deleteSession<span class="token punctuation">:</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">bool</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
		broadcast<span class="token punctuation">:</span>     <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> MessageInfo<span class="token punctuation">)</span><span class="token punctuation">,</span>
		signaling<span class="token punctuation">:</span>     <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> MessageInfo<span class="token punctuation">)</span><span class="token punctuation">,</span>
	<span class="token punctuation">&#125;</span>

	clients <span class="token operator">:=</span> <span class="token function">MakeSessionDataStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	<span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	loop<span class="token punctuation">:</span>
		<span class="token keyword">for</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">select</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">case</span> registerUser <span class="token operator">:=</span> <span class="token operator">&lt;-</span>channelSet<span class="token punctuation">.</span>register<span class="token punctuation">:</span>
				err <span class="token operator">:=</span> <span class="token function">handleUserRegister</span><span class="token punctuation">(</span>clients<span class="token punctuation">,</span> registerUser<span class="token punctuation">)</span>
				<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
					fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"an error occurred while handling user registration, but still process :"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
				<span class="token punctuation">&#125;</span>

			<span class="token keyword">case</span> unregisterUser <span class="token operator">:=</span> <span class="token operator">&lt;-</span>channelSet<span class="token punctuation">.</span>unregister<span class="token punctuation">:</span>
				err <span class="token operator">:=</span> <span class="token function">handleUserUnregister</span><span class="token punctuation">(</span>clients<span class="token punctuation">,</span> unregisterUser<span class="token punctuation">)</span>
				<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
					fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"an error occurred while handling user unregistration, but still process :"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
				<span class="token punctuation">&#125;</span>

				<span class="token keyword">if</span> clients<span class="token punctuation">.</span><span class="token function">IsEmpty</span><span class="token punctuation">(</span>unregisterUser<span class="token punctuation">.</span>Session<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
					channelSet<span class="token punctuation">.</span>deleteSession <span class="token operator">&lt;-</span> <span class="token boolean">true</span>
					<span class="token keyword">break</span> loop
				<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
					channelSet<span class="token punctuation">.</span>deleteSession <span class="token operator">&lt;-</span> <span class="token boolean">false</span>
				<span class="token punctuation">&#125;</span>

			<span class="token keyword">case</span> messageData <span class="token operator">:=</span> <span class="token operator">&lt;-</span>channelSet<span class="token punctuation">.</span>broadcast<span class="token punctuation">:</span>
				err <span class="token operator">:=</span> <span class="token function">sendBroadcastMessage</span><span class="token punctuation">(</span>clients<span class="token punctuation">,</span> messageData<span class="token punctuation">)</span>
				<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
					fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"an error occurred while sending broadcast message, but still process :"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
				<span class="token punctuation">&#125;</span>

			<span class="token keyword">case</span> messageData <span class="token operator">:=</span> <span class="token operator">&lt;-</span>channelSet<span class="token punctuation">.</span>signaling<span class="token punctuation">:</span>
				err <span class="token operator">:=</span> <span class="token function">sendSignalingMessage</span><span class="token punctuation">(</span>clients<span class="token punctuation">,</span> messageData<span class="token punctuation">)</span>
				<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
					fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"an error occurred while sending signaling message, but still process :"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
				<span class="token punctuation">&#125;</span>
			<span class="token punctuation">&#125;</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	<span class="token keyword">return</span> <span class="token operator">&amp;</span>channelSet<span class="token punctuation">,</span> <span class="token boolean">nil</span>
<span class="token punctuation">&#125;</span></code>`,Da,j,zp,ks,Kp,Qp,Ua,ha,Ra,F,Vp,rn,Xp,Yp,Pa,Ma,xa,Ia,q,J,rs,$p,ga,_n,no,Ta,Cn,so;return{c(){P=o("p"),qa=e("Golang으로 하는 첫 프로젝트로, WebRTC many-to-many 시그널링 서버를 만들게 되었다."),bs=i(),ws=o("br"),ms=o("br"),ys=i(),M=o("h2"),x=o("a"),Pn=o("span"),Ja=e("Basic 1:1 Signaling"),Es=i(),I=o("p"),Za=e(`우선 가장 기본적인 예제인, 1:1 연결 시그널링 서버의 예제부터 구현하였다. 1:1 시그널링 서버는 언어를 막론하고 예제가 많이 존재한다.
본인 또한 참고한 예제가 있다. `),K=o("a"),za=e("https://github.com/shanet/WebRTC-Example"),Ka=e("의 예제를 확인하면 간단한 웹 클라이언트와, Node.js 및 WebSocket 기반의 간단한 시그널링 서버를 찾아볼 수 있다."),vs=i(),Ss=o("br"),_s=i(),dn=o("p"),Qa=e("서버쪽 소스코드는 너무나도 간단하다. ICE나 SDP 등 WebRTC 연결 정보를 전달해주는 역할을 하는 코드는 이 정도밖에 안된다."),Cs=i(),Q=o("pre"),Ds=i(),g=o("p"),Va=e(`한쪽 피어가 보낸 메시지를 다른 피어한테 웹소켓을 통해 전송해주는 로직으로, 사실상 채팅 서버와 거의 동일하다고 볼 수 있다.
그래서 Go로 작성된 웹소켓 기반 채팅서버 예제를 참조하여 금방 시그널링 서버를 구현할 수 있었다.
`),V=o("a"),Xa=e("https://github.com/jos-/gofiber-websocket-chat-example"),Ya=e("의 예제를 참조하여 동일 클라이언트 코드를 사용하는 Go 예제로 옮겨보았다."),Us=i(),w=o("p"),$a=e("프로젝트는 "),X=o("a"),nt=e("GoFiber"),st=e("의 "),Y=o("a"),at=e("웹소켓 extension"),tt=e(`을 사용하여 진행하였다.
웹소켓 관련 Go 라이브러리 중에서 가장 일반적으로 사용되는 게 `),$=o("a"),pt=e("Gorilla WebSocket"),ot=e(`으로 알고 있는데, 2022년 12월 쯤 Gorilla WebSocket의 깃허브 레포지토리가 archived 상태가 되었다.
괜찮은 대체제를 찾는 겸, Fiber 연습하는 겸 GoFiber WebSocket extension를 사용하게 되었다.`),hs=i(),Rs=o("br"),Ps=i(),bn=o("p"),et=e("먼저, 다음과 같이 유저가 접속하거나 나갈 때 데이터를 전송할 채널과, 채널에 들어온 데이터를 받아서 처리할 고루틴을 작성해주었다."),Ms=i(),nn=o("pre"),xs=i(),d=o("p"),ct=e("각각 "),Mn=o("code"),lt=e("register"),ut=e(" 채널에 유저 정보가 입력되면 유저를 전역변수 "),xn=o("code"),it=e("clients"),kt=e("에 추가하고, "),In=o("code"),rt=e("unregister"),ft=e(" 채널에 입력되면 유저를 제거한다. "),gn=o("code"),dt=e("broadcast"),bt=e(" 채널에 메시지가 입력되면 메시지를 모든 유저에게 전달한다."),Is=i(),y=o("p"),Tn=o("code"),wt=e("*ws.Conn"),mt=e(" 타입의 인스턴스는 각 웹소켓 클라이언트에 해당하는 것으로, "),Wn=o("code"),yt=e("*ws.Conn"),Et=e("의 "),Hn=o("code"),vt=e("ReadMessage()"),St=e(" 등을 호출하여 데이터를 읽거나 쓸 수 있다."),gs=i(),Ts=o("br"),Ws=i(),wn=o("p"),_t=e("유저의 웹소켓 세션에 관련된 부분은 다음과 같다."),Hs=i(),sn=o("pre"),Os=i(),v=o("p"),Ct=e(`먼저 웹소켓을 사용할 수 있는지 검사한 후, 사용 가능하다면 웹소켓 연결을 생성한다.
웹소켓 연결이 생성되면 `),On=o("code"),Dt=e("register"),Ut=e(" 채널에 클라이언트 정보를 보내고, defer문을 통해 클라이언트가 웹소켓 연결을 끊으면 "),Ln=o("code"),ht=e("unregister"),Rt=e(" 채널에 클라이언트 정보를 보낼 수 있게끔 하였다."),Ls=i(),mn=o("p"),Pt=e("1:1 연결에서는 이러한 100줄 정도의 코드만으로도 시그널링 서버를 구현할 수 있다."),Bs=i(),Gs=o("br"),Ns=i(),T=o("p"),Mt=e("전체 코드는 "),an=o("a"),xt=e("https://github.com/junhyuk0801/webrtc-mesh-server/tree/5d435d745a48ba3be0c1299163029364ec31a3bf"),It=e("에서 찾아볼 수 있다."),As=i(),js=o("br"),Fs=o("br"),qs=i(),W=o("h2"),H=o("a"),Bn=o("span"),gt=e("개선할 점"),Js=i(),yn=o("p"),Tt=e("일단 M:M으로 나아가기에 앞서, 위 예제에서 몇 가지 문제점을 찾아볼 수 있다."),Zs=i(),b=o("ul"),Gn=o("li"),Wt=e("서버가 1:1 연결 하나만 처리할 수 있음… 세션 정도는 만들어줄 필요가 있음."),Ht=i(),Nn=o("li"),Ot=e("클라이언트 코드도 마찬가지로 상대방이 한 명이라고 가정하여 작성되어 있음. 여러 명의 유저와 통신할 수 있게끔 수정해야 함."),Lt=i(),D=o("li"),Bt=e("유저가 나갈 때에 대한 처리가 부족함. 한 유저가 나가면 "),An=o("code"),Gt=e("RTCPeerConnection"),Nt=e("을 통해 유저가 나갔다는 사실을 전달받을 수 있겠지만, 그걸 통해 "),jn=o("code"),At=e("<video>"),jt=e(" element를 지운다던지 하는 처리가 전혀 없음."),Ft=i(),U=o("li"),qt=e("고루틴을 여러 개 띄워서 전역 변수인 "),Fn=o("code"),Jt=e("client"),Zt=e("에 읽기/쓰기를 시도하는 반면, "),qn=o("code"),zt=e("client"),Kt=e("는 뮤텍스 등을 통해 보호되지 않음. 이 때문에 새로고침을 막 눌러서 연결을 빡세게 시도하면 data race로 인한 panic이 일어나서 서버가 곧잘 죽는 것을 확인할 수 있음"),Qt=i(),tn=o("li"),Vt=e("모든 컴포넌트가 "),Jn=o("code"),Xt=e("main.go"),Yt=e(" 한 파일에 몰려있음. 리팩토링을 통해 디커플링하는 겸 변수 이름도 Convention에 맞게 다시 지어주면 좋을 듯 함."),zs=i(),En=o("p"),$t=e("또한 Mesh 형태의 many-to-many 연결을 구현하기 위해서는 시그널링 서버에서 특정 유저한테만 메시지를 보낼 수 있는 방법이 추가되어야 한다. WebRTC 연결을 생성하려는 대상이 아닌 다른 대상에게까지 메시지가 전달되면 오류가 발생하여 연결 설정이 제대로 안될 수 있기 때문이다."),Ks=i(),vn=o("p"),np=e("다음으로 다룰 예제에서 위 사항을 충족시킨 코드를 확인할 수 있을 것이다."),Qs=i(),Vs=o("br"),Xs=o("br"),Ys=i(),O=o("h2"),L=o("a"),Zn=o("span"),sp=e("Many-to-Many Mesh Server"),$s=i(),pn=o("p"),zn=o("code"),ap=e("main.go"),tp=e("의 변경사항이다."),na=i(),on=o("pre"),sa=i(),m=o("p"),pp=e("우선, 이전에 전역변수로 선언되던 "),Kn=o("code"),op=e("clients"),ep=e("는 각 세션별로 존재하며, 각 세션은 "),Qn=o("code"),cp=e("Hub"),lp=e("에서 만들어진다."),up=o("br"),ip=e(`
또한 클라이언트별 웹소켓 루프를 별도의 함수로 지정하였다.`),aa=i(),ta=o("br"),pa=i(),Sn=o("p"),kp=e("웹소켓 루프 함수를 살펴보자."),oa=i(),en=o("pre"),ea=i(),S=o("p"),rp=e("클라이언트가 접속하면 자신의 UUID를 보낸다. 클라이언트가 접속한 세션 정보와 이 UUID 정보를 바탕으로 "),Vn=o("code"),fp=e("RegisterUser()"),dp=e(" 메소드를 호출하면 클라이언트가 세션에 등록된다. 클라이언트가 접속을 종료할 때는 "),Xn=o("code"),bp=e("UnregisterUser()"),wp=e("를 호출하여 유저의 퇴장을 처리한다."),ca=i(),B=o("p"),mp=e("이후, ICE나 SDP 등 시그널링 메시지를 처리하는 단계로 진입한다. "),Yn=o("code"),yp=e("SendSignallingMessage()"),Ep=e(" 메소드를 통해 UUID로 구분하여 특정 대상에게 시그널링 메시지를 전달할 수 있다."),la=i(),ua=o("br"),ia=i(),G=o("p"),vp=e("다음으로, "),$n=o("code"),Sp=e("SessionDataStore"),_p=e("에 대해 살펴보자."),ka=i(),cn=o("pre"),ra=i(),f=o("p"),ns=o("code"),Cp=e("SessionDataStore"),Dp=e("는 세션별로 유저들의 정보가 저장되는 자료구조로, "),ss=o("code"),Up=e("GetSessionData()"),hp=e(", "),as=o("code"),Rp=e("SetUserData()"),Pp=e(", "),ts=o("code"),Mp=e("DeleteUserData()"),xp=e(` 메소드를 통해 접근할 수 있다.
`),ps=o("code"),Ip=e("RWMutex"),gp=e("를 설정하여 여러 고루틴에서 동시에 접근하여 생길 수 있는 Data race 문제를 해결하였다."),fa=i(),da=o("br"),ba=i(),N=o("p"),Tp=e("채널을 관리하는 "),os=o("code"),Wp=e("Hub"),Hp=e("쪽을 살펴보자."),wa=i(),ln=o("pre"),ma=i(),h=o("p"),es=o("code"),Op=e("Hub"),Lp=e("는 각 세션 별로 채널을 만들고 관리하는 역할이다. "),cs=o("code"),Bp=e("Hub"),Gp=e("의 메소드는 기본적으로 호출이 되면 유저의 세션에 따라 대응되는 채널에 정보를 집어넣는다. 이 채널은 각 세션별 고루틴으로 연결되어, 해당 고루틴에서 처리된다."),ya=i(),un=o("pre"),Ea=i(),R=o("p"),ls=o("code"),Np=e("RegisterUser()"),Ap=e("에서는 채널에 등록할 유저 정보를을 넣기에 앞서 채널이 있는지 검사하여, 없다면 각 세션의 고루틴 및 채널을 생성한다. "),us=o("code"),jp=e("UnregisterUser()"),Fp=e("에서는 세션에 더이상 유저가 없는 경우 채널을 삭제하는 로직까지 추가된다."),va=i(),Sa=o("br"),_a=i(),A=o("p"),qp=e("마지막으로 각 세션의 고루틴을 실행하는 "),is=o("code"),Jp=e("RunSessionLoop()"),Zp=e(" 함수를 살펴보자."),Ca=i(),kn=o("pre"),Da=i(),j=o("p"),zp=e("채널 목록 및 "),ks=o("code"),Kp=e("MakeSessionDataStore()"),Qp=e("으로 세션별 데이터 저장소를 생성하고 for~switch loop으로 채널에서 데이터를 읽어와 처리한다."),Ua=i(),ha=o("br"),Ra=i(),F=o("p"),Vp=e("전체 코드는 "),rn=o("a"),Xp=e("https://github.com/junhyuk0801/webrtc-mesh-server"),Yp=e("에서 찾아볼 수 있다."),Pa=i(),Ma=o("br"),xa=o("br"),Ia=i(),q=o("h2"),J=o("a"),rs=o("span"),$p=e("후기"),ga=i(),_n=o("p"),no=e("many-to-many 만들 때 시그널링 메시지를 브로드캐스팅으로 보내버려서 피어 수가 3명이 넘어가면 연결이 제대로 안됐었는데, 뭐가 문제인지 찾는 데 한참 걸렸다."),Ta=i(),Cn=o("p"),so=e("개인적으로 WebRTC 좀 친다고 생각했었는데 아직 갈 길이 먼 것 같다.."),this.h()},l(n){P=c(n,"P",{});var t=u(P);qa=l(t,"Golang으로 하는 첫 프로젝트로, WebRTC many-to-many 시그널링 서버를 만들게 되었다."),t.forEach(s),bs=k(n),ws=c(n,"BR",{}),ms=c(n,"BR",{}),ys=k(n),M=c(n,"H2",{id:!0});var ao=u(M);x=c(ao,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var lo=u(x);Pn=c(lo,"SPAN",{class:!0}),u(Pn).forEach(s),lo.forEach(s),Ja=l(ao,"Basic 1:1 Signaling"),ao.forEach(s),Es=k(n),I=c(n,"P",{});var Wa=u(I);Za=l(Wa,`우선 가장 기본적인 예제인, 1:1 연결 시그널링 서버의 예제부터 구현하였다. 1:1 시그널링 서버는 언어를 막론하고 예제가 많이 존재한다.
본인 또한 참고한 예제가 있다. `),K=c(Wa,"A",{href:!0,rel:!0});var uo=u(K);za=l(uo,"https://github.com/shanet/WebRTC-Example"),uo.forEach(s),Ka=l(Wa,"의 예제를 확인하면 간단한 웹 클라이언트와, Node.js 및 WebSocket 기반의 간단한 시그널링 서버를 찾아볼 수 있다."),Wa.forEach(s),vs=k(n),Ss=c(n,"BR",{}),_s=k(n),dn=c(n,"P",{});var io=u(dn);Qa=l(io,"서버쪽 소스코드는 너무나도 간단하다. ICE나 SDP 등 WebRTC 연결 정보를 전달해주는 역할을 하는 코드는 이 정도밖에 안된다."),io.forEach(s),Cs=k(n),Q=c(n,"PRE",{class:!0});var Se=u(Q);Se.forEach(s),Ds=k(n),g=c(n,"P",{});var Ha=u(g);Va=l(Ha,`한쪽 피어가 보낸 메시지를 다른 피어한테 웹소켓을 통해 전송해주는 로직으로, 사실상 채팅 서버와 거의 동일하다고 볼 수 있다.
그래서 Go로 작성된 웹소켓 기반 채팅서버 예제를 참조하여 금방 시그널링 서버를 구현할 수 있었다.
`),V=c(Ha,"A",{href:!0,rel:!0});var ko=u(V);Xa=l(ko,"https://github.com/jos-/gofiber-websocket-chat-example"),ko.forEach(s),Ya=l(Ha,"의 예제를 참조하여 동일 클라이언트 코드를 사용하는 Go 예제로 옮겨보았다."),Ha.forEach(s),Us=k(n),w=c(n,"P",{});var Z=u(w);$a=l(Z,"프로젝트는 "),X=c(Z,"A",{href:!0,rel:!0});var ro=u(X);nt=l(ro,"GoFiber"),ro.forEach(s),st=l(Z,"의 "),Y=c(Z,"A",{href:!0,rel:!0});var fo=u(Y);at=l(fo,"웹소켓 extension"),fo.forEach(s),tt=l(Z,`을 사용하여 진행하였다.
웹소켓 관련 Go 라이브러리 중에서 가장 일반적으로 사용되는 게 `),$=c(Z,"A",{href:!0,rel:!0});var bo=u($);pt=l(bo,"Gorilla WebSocket"),bo.forEach(s),ot=l(Z,`으로 알고 있는데, 2022년 12월 쯤 Gorilla WebSocket의 깃허브 레포지토리가 archived 상태가 되었다.
괜찮은 대체제를 찾는 겸, Fiber 연습하는 겸 GoFiber WebSocket extension를 사용하게 되었다.`),Z.forEach(s),hs=k(n),Rs=c(n,"BR",{}),Ps=k(n),bn=c(n,"P",{});var wo=u(bn);et=l(wo,"먼저, 다음과 같이 유저가 접속하거나 나갈 때 데이터를 전송할 채널과, 채널에 들어온 데이터를 받아서 처리할 고루틴을 작성해주었다."),wo.forEach(s),Ms=k(n),nn=c(n,"PRE",{class:!0});var _e=u(nn);_e.forEach(s),xs=k(n),d=c(n,"P",{});var _=u(d);ct=l(_,"각각 "),Mn=c(_,"CODE",{});var mo=u(Mn);lt=l(mo,"register"),mo.forEach(s),ut=l(_," 채널에 유저 정보가 입력되면 유저를 전역변수 "),xn=c(_,"CODE",{});var yo=u(xn);it=l(yo,"clients"),yo.forEach(s),kt=l(_,"에 추가하고, "),In=c(_,"CODE",{});var Eo=u(In);rt=l(Eo,"unregister"),Eo.forEach(s),ft=l(_," 채널에 입력되면 유저를 제거한다. "),gn=c(_,"CODE",{});var vo=u(gn);dt=l(vo,"broadcast"),vo.forEach(s),bt=l(_," 채널에 메시지가 입력되면 메시지를 모든 유저에게 전달한다."),_.forEach(s),Is=k(n),y=c(n,"P",{});var fn=u(y);Tn=c(fn,"CODE",{});var So=u(Tn);wt=l(So,"*ws.Conn"),So.forEach(s),mt=l(fn," 타입의 인스턴스는 각 웹소켓 클라이언트에 해당하는 것으로, "),Wn=c(fn,"CODE",{});var _o=u(Wn);yt=l(_o,"*ws.Conn"),_o.forEach(s),Et=l(fn,"의 "),Hn=c(fn,"CODE",{});var Co=u(Hn);vt=l(Co,"ReadMessage()"),Co.forEach(s),St=l(fn," 등을 호출하여 데이터를 읽거나 쓸 수 있다."),fn.forEach(s),gs=k(n),Ts=c(n,"BR",{}),Ws=k(n),wn=c(n,"P",{});var Do=u(wn);_t=l(Do,"유저의 웹소켓 세션에 관련된 부분은 다음과 같다."),Do.forEach(s),Hs=k(n),sn=c(n,"PRE",{class:!0});var Ce=u(sn);Ce.forEach(s),Os=k(n),v=c(n,"P",{});var Dn=u(v);Ct=l(Dn,`먼저 웹소켓을 사용할 수 있는지 검사한 후, 사용 가능하다면 웹소켓 연결을 생성한다.
웹소켓 연결이 생성되면 `),On=c(Dn,"CODE",{});var Uo=u(On);Dt=l(Uo,"register"),Uo.forEach(s),Ut=l(Dn," 채널에 클라이언트 정보를 보내고, defer문을 통해 클라이언트가 웹소켓 연결을 끊으면 "),Ln=c(Dn,"CODE",{});var ho=u(Ln);ht=l(ho,"unregister"),ho.forEach(s),Rt=l(Dn," 채널에 클라이언트 정보를 보낼 수 있게끔 하였다."),Dn.forEach(s),Ls=k(n),mn=c(n,"P",{});var Ro=u(mn);Pt=l(Ro,"1:1 연결에서는 이러한 100줄 정도의 코드만으로도 시그널링 서버를 구현할 수 있다."),Ro.forEach(s),Bs=k(n),Gs=c(n,"BR",{}),Ns=k(n),T=c(n,"P",{});var Oa=u(T);Mt=l(Oa,"전체 코드는 "),an=c(Oa,"A",{href:!0,rel:!0});var Po=u(an);xt=l(Po,"https://github.com/junhyuk0801/webrtc-mesh-server/tree/5d435d745a48ba3be0c1299163029364ec31a3bf"),Po.forEach(s),It=l(Oa,"에서 찾아볼 수 있다."),Oa.forEach(s),As=k(n),js=c(n,"BR",{}),Fs=c(n,"BR",{}),qs=k(n),W=c(n,"H2",{id:!0});var to=u(W);H=c(to,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Mo=u(H);Bn=c(Mo,"SPAN",{class:!0}),u(Bn).forEach(s),Mo.forEach(s),gt=l(to,"개선할 점"),to.forEach(s),Js=k(n),yn=c(n,"P",{});var xo=u(yn);Tt=l(xo,"일단 M:M으로 나아가기에 앞서, 위 예제에서 몇 가지 문제점을 찾아볼 수 있다."),xo.forEach(s),Zs=k(n),b=c(n,"UL",{});var C=u(b);Gn=c(C,"LI",{});var Io=u(Gn);Wt=l(Io,"서버가 1:1 연결 하나만 처리할 수 있음… 세션 정도는 만들어줄 필요가 있음."),Io.forEach(s),Ht=k(C),Nn=c(C,"LI",{});var go=u(Nn);Ot=l(go,"클라이언트 코드도 마찬가지로 상대방이 한 명이라고 가정하여 작성되어 있음. 여러 명의 유저와 통신할 수 있게끔 수정해야 함."),go.forEach(s),Lt=k(C),D=c(C,"LI",{});var Un=u(D);Bt=l(Un,"유저가 나갈 때에 대한 처리가 부족함. 한 유저가 나가면 "),An=c(Un,"CODE",{});var To=u(An);Gt=l(To,"RTCPeerConnection"),To.forEach(s),Nt=l(Un,"을 통해 유저가 나갔다는 사실을 전달받을 수 있겠지만, 그걸 통해 "),jn=c(Un,"CODE",{});var Wo=u(jn);At=l(Wo,"<video>"),Wo.forEach(s),jt=l(Un," element를 지운다던지 하는 처리가 전혀 없음."),Un.forEach(s),Ft=k(C),U=c(C,"LI",{});var hn=u(U);qt=l(hn,"고루틴을 여러 개 띄워서 전역 변수인 "),Fn=c(hn,"CODE",{});var Ho=u(Fn);Jt=l(Ho,"client"),Ho.forEach(s),Zt=l(hn,"에 읽기/쓰기를 시도하는 반면, "),qn=c(hn,"CODE",{});var Oo=u(qn);zt=l(Oo,"client"),Oo.forEach(s),Kt=l(hn,"는 뮤텍스 등을 통해 보호되지 않음. 이 때문에 새로고침을 막 눌러서 연결을 빡세게 시도하면 data race로 인한 panic이 일어나서 서버가 곧잘 죽는 것을 확인할 수 있음"),hn.forEach(s),Qt=k(C),tn=c(C,"LI",{});var La=u(tn);Vt=l(La,"모든 컴포넌트가 "),Jn=c(La,"CODE",{});var Lo=u(Jn);Xt=l(Lo,"main.go"),Lo.forEach(s),Yt=l(La," 한 파일에 몰려있음. 리팩토링을 통해 디커플링하는 겸 변수 이름도 Convention에 맞게 다시 지어주면 좋을 듯 함."),La.forEach(s),C.forEach(s),zs=k(n),En=c(n,"P",{});var Bo=u(En);$t=l(Bo,"또한 Mesh 형태의 many-to-many 연결을 구현하기 위해서는 시그널링 서버에서 특정 유저한테만 메시지를 보낼 수 있는 방법이 추가되어야 한다. WebRTC 연결을 생성하려는 대상이 아닌 다른 대상에게까지 메시지가 전달되면 오류가 발생하여 연결 설정이 제대로 안될 수 있기 때문이다."),Bo.forEach(s),Ks=k(n),vn=c(n,"P",{});var Go=u(vn);np=l(Go,"다음으로 다룰 예제에서 위 사항을 충족시킨 코드를 확인할 수 있을 것이다."),Go.forEach(s),Qs=k(n),Vs=c(n,"BR",{}),Xs=c(n,"BR",{}),Ys=k(n),O=c(n,"H2",{id:!0});var po=u(O);L=c(po,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var No=u(L);Zn=c(No,"SPAN",{class:!0}),u(Zn).forEach(s),No.forEach(s),sp=l(po,"Many-to-Many Mesh Server"),po.forEach(s),$s=k(n),pn=c(n,"P",{});var oo=u(pn);zn=c(oo,"CODE",{});var Ao=u(zn);ap=l(Ao,"main.go"),Ao.forEach(s),tp=l(oo,"의 변경사항이다."),oo.forEach(s),na=k(n),on=c(n,"PRE",{class:!0});var De=u(on);De.forEach(s),sa=k(n),m=c(n,"P",{});var z=u(m);pp=l(z,"우선, 이전에 전역변수로 선언되던 "),Kn=c(z,"CODE",{});var jo=u(Kn);op=l(jo,"clients"),jo.forEach(s),ep=l(z,"는 각 세션별로 존재하며, 각 세션은 "),Qn=c(z,"CODE",{});var Fo=u(Qn);cp=l(Fo,"Hub"),Fo.forEach(s),lp=l(z,"에서 만들어진다."),up=c(z,"BR",{}),ip=l(z,`
또한 클라이언트별 웹소켓 루프를 별도의 함수로 지정하였다.`),z.forEach(s),aa=k(n),ta=c(n,"BR",{}),pa=k(n),Sn=c(n,"P",{});var qo=u(Sn);kp=l(qo,"웹소켓 루프 함수를 살펴보자."),qo.forEach(s),oa=k(n),en=c(n,"PRE",{class:!0});var Ue=u(en);Ue.forEach(s),ea=k(n),S=c(n,"P",{});var Rn=u(S);rp=l(Rn,"클라이언트가 접속하면 자신의 UUID를 보낸다. 클라이언트가 접속한 세션 정보와 이 UUID 정보를 바탕으로 "),Vn=c(Rn,"CODE",{});var Jo=u(Vn);fp=l(Jo,"RegisterUser()"),Jo.forEach(s),dp=l(Rn," 메소드를 호출하면 클라이언트가 세션에 등록된다. 클라이언트가 접속을 종료할 때는 "),Xn=c(Rn,"CODE",{});var Zo=u(Xn);bp=l(Zo,"UnregisterUser()"),Zo.forEach(s),wp=l(Rn,"를 호출하여 유저의 퇴장을 처리한다."),Rn.forEach(s),ca=k(n),B=c(n,"P",{});var Ba=u(B);mp=l(Ba,"이후, ICE나 SDP 등 시그널링 메시지를 처리하는 단계로 진입한다. "),Yn=c(Ba,"CODE",{});var zo=u(Yn);yp=l(zo,"SendSignallingMessage()"),zo.forEach(s),Ep=l(Ba," 메소드를 통해 UUID로 구분하여 특정 대상에게 시그널링 메시지를 전달할 수 있다."),Ba.forEach(s),la=k(n),ua=c(n,"BR",{}),ia=k(n),G=c(n,"P",{});var Ga=u(G);vp=l(Ga,"다음으로, "),$n=c(Ga,"CODE",{});var Ko=u($n);Sp=l(Ko,"SessionDataStore"),Ko.forEach(s),_p=l(Ga,"에 대해 살펴보자."),Ga.forEach(s),ka=k(n),cn=c(n,"PRE",{class:!0});var he=u(cn);he.forEach(s),ra=k(n),f=c(n,"P",{});var E=u(f);ns=c(E,"CODE",{});var Qo=u(ns);Cp=l(Qo,"SessionDataStore"),Qo.forEach(s),Dp=l(E,"는 세션별로 유저들의 정보가 저장되는 자료구조로, "),ss=c(E,"CODE",{});var Vo=u(ss);Up=l(Vo,"GetSessionData()"),Vo.forEach(s),hp=l(E,", "),as=c(E,"CODE",{});var Xo=u(as);Rp=l(Xo,"SetUserData()"),Xo.forEach(s),Pp=l(E,", "),ts=c(E,"CODE",{});var Yo=u(ts);Mp=l(Yo,"DeleteUserData()"),Yo.forEach(s),xp=l(E,` 메소드를 통해 접근할 수 있다.
`),ps=c(E,"CODE",{});var $o=u(ps);Ip=l($o,"RWMutex"),$o.forEach(s),gp=l(E,"를 설정하여 여러 고루틴에서 동시에 접근하여 생길 수 있는 Data race 문제를 해결하였다."),E.forEach(s),fa=k(n),da=c(n,"BR",{}),ba=k(n),N=c(n,"P",{});var Na=u(N);Tp=l(Na,"채널을 관리하는 "),os=c(Na,"CODE",{});var ne=u(os);Wp=l(ne,"Hub"),ne.forEach(s),Hp=l(Na,"쪽을 살펴보자."),Na.forEach(s),wa=k(n),ln=c(n,"PRE",{class:!0});var Re=u(ln);Re.forEach(s),ma=k(n),h=c(n,"P",{});var fs=u(h);es=c(fs,"CODE",{});var se=u(es);Op=l(se,"Hub"),se.forEach(s),Lp=l(fs,"는 각 세션 별로 채널을 만들고 관리하는 역할이다. "),cs=c(fs,"CODE",{});var ae=u(cs);Bp=l(ae,"Hub"),ae.forEach(s),Gp=l(fs,"의 메소드는 기본적으로 호출이 되면 유저의 세션에 따라 대응되는 채널에 정보를 집어넣는다. 이 채널은 각 세션별 고루틴으로 연결되어, 해당 고루틴에서 처리된다."),fs.forEach(s),ya=k(n),un=c(n,"PRE",{class:!0});var Pe=u(un);Pe.forEach(s),Ea=k(n),R=c(n,"P",{});var ds=u(R);ls=c(ds,"CODE",{});var te=u(ls);Np=l(te,"RegisterUser()"),te.forEach(s),Ap=l(ds,"에서는 채널에 등록할 유저 정보를을 넣기에 앞서 채널이 있는지 검사하여, 없다면 각 세션의 고루틴 및 채널을 생성한다. "),us=c(ds,"CODE",{});var pe=u(us);jp=l(pe,"UnregisterUser()"),pe.forEach(s),Fp=l(ds,"에서는 세션에 더이상 유저가 없는 경우 채널을 삭제하는 로직까지 추가된다."),ds.forEach(s),va=k(n),Sa=c(n,"BR",{}),_a=k(n),A=c(n,"P",{});var Aa=u(A);qp=l(Aa,"마지막으로 각 세션의 고루틴을 실행하는 "),is=c(Aa,"CODE",{});var oe=u(is);Jp=l(oe,"RunSessionLoop()"),oe.forEach(s),Zp=l(Aa," 함수를 살펴보자."),Aa.forEach(s),Ca=k(n),kn=c(n,"PRE",{class:!0});var Me=u(kn);Me.forEach(s),Da=k(n),j=c(n,"P",{});var ja=u(j);zp=l(ja,"채널 목록 및 "),ks=c(ja,"CODE",{});var ee=u(ks);Kp=l(ee,"MakeSessionDataStore()"),ee.forEach(s),Qp=l(ja,"으로 세션별 데이터 저장소를 생성하고 for~switch loop으로 채널에서 데이터를 읽어와 처리한다."),ja.forEach(s),Ua=k(n),ha=c(n,"BR",{}),Ra=k(n),F=c(n,"P",{});var Fa=u(F);Vp=l(Fa,"전체 코드는 "),rn=c(Fa,"A",{href:!0,rel:!0});var ce=u(rn);Xp=l(ce,"https://github.com/junhyuk0801/webrtc-mesh-server"),ce.forEach(s),Yp=l(Fa,"에서 찾아볼 수 있다."),Fa.forEach(s),Pa=k(n),Ma=c(n,"BR",{}),xa=c(n,"BR",{}),Ia=k(n),q=c(n,"H2",{id:!0});var eo=u(q);J=c(eo,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var le=u(J);rs=c(le,"SPAN",{class:!0}),u(rs).forEach(s),le.forEach(s),$p=l(eo,"후기"),eo.forEach(s),ga=k(n),_n=c(n,"P",{});var ue=u(_n);no=l(ue,"many-to-many 만들 때 시그널링 메시지를 브로드캐스팅으로 보내버려서 피어 수가 3명이 넘어가면 연결이 제대로 안됐었는데, 뭐가 문제인지 찾는 데 한참 걸렸다."),ue.forEach(s),Ta=k(n),Cn=c(n,"P",{});var ie=u(Cn);so=l(ie,"개인적으로 WebRTC 좀 친다고 생각했었는데 아직 갈 길이 먼 것 같다.."),ie.forEach(s),this.h()},h(){r(Pn,"class","icon icon-link"),r(x,"aria-hidden","true"),r(x,"tabindex","-1"),r(x,"href","#basic-11-signaling"),r(M,"id","basic-11-signaling"),r(K,"href","https://github.com/shanet/WebRTC-Example"),r(K,"rel","nofollow"),r(Q,"class","language-javascript"),r(V,"href","https://github.com/jos-/gofiber-websocket-chat-example"),r(V,"rel","nofollow"),r(X,"href","https://github.com/gofiber/fiber"),r(X,"rel","nofollow"),r(Y,"href","https://github.com/gofiber/websocket"),r(Y,"rel","nofollow"),r($,"href","https://github.com/gorilla/websocket"),r($,"rel","nofollow"),r(nn,"class","language-go"),r(sn,"class","language-go"),r(an,"href","https://github.com/junhyuk0801/webrtc-mesh-server/tree/5d435d745a48ba3be0c1299163029364ec31a3bf"),r(an,"rel","nofollow"),r(Bn,"class","icon icon-link"),r(H,"aria-hidden","true"),r(H,"tabindex","-1"),r(H,"href","#개선할-점"),r(W,"id","개선할-점"),r(Zn,"class","icon icon-link"),r(L,"aria-hidden","true"),r(L,"tabindex","-1"),r(L,"href","#many-to-many-mesh-server"),r(O,"id","many-to-many-mesh-server"),r(on,"class","language-go"),r(en,"class","language-go"),r(cn,"class","language-go"),r(ln,"class","language-go"),r(un,"class","language-go"),r(kn,"class","language-go"),r(rn,"href","https://github.com/junhyuk0801/webrtc-mesh-server"),r(rn,"rel","nofollow"),r(rs,"class","icon icon-link"),r(J,"aria-hidden","true"),r(J,"tabindex","-1"),r(J,"href","#후기"),r(q,"id","후기")},m(n,t){p(n,P,t),a(P,qa),p(n,bs,t),p(n,ws,t),p(n,ms,t),p(n,ys,t),p(n,M,t),a(M,x),a(x,Pn),a(M,Ja),p(n,Es,t),p(n,I,t),a(I,Za),a(I,K),a(K,za),a(I,Ka),p(n,vs,t),p(n,Ss,t),p(n,_s,t),p(n,dn,t),a(dn,Qa),p(n,Cs,t),p(n,Q,t),Q.innerHTML=re,p(n,Ds,t),p(n,g,t),a(g,Va),a(g,V),a(V,Xa),a(g,Ya),p(n,Us,t),p(n,w,t),a(w,$a),a(w,X),a(X,nt),a(w,st),a(w,Y),a(Y,at),a(w,tt),a(w,$),a($,pt),a(w,ot),p(n,hs,t),p(n,Rs,t),p(n,Ps,t),p(n,bn,t),a(bn,et),p(n,Ms,t),p(n,nn,t),nn.innerHTML=fe,p(n,xs,t),p(n,d,t),a(d,ct),a(d,Mn),a(Mn,lt),a(d,ut),a(d,xn),a(xn,it),a(d,kt),a(d,In),a(In,rt),a(d,ft),a(d,gn),a(gn,dt),a(d,bt),p(n,Is,t),p(n,y,t),a(y,Tn),a(Tn,wt),a(y,mt),a(y,Wn),a(Wn,yt),a(y,Et),a(y,Hn),a(Hn,vt),a(y,St),p(n,gs,t),p(n,Ts,t),p(n,Ws,t),p(n,wn,t),a(wn,_t),p(n,Hs,t),p(n,sn,t),sn.innerHTML=de,p(n,Os,t),p(n,v,t),a(v,Ct),a(v,On),a(On,Dt),a(v,Ut),a(v,Ln),a(Ln,ht),a(v,Rt),p(n,Ls,t),p(n,mn,t),a(mn,Pt),p(n,Bs,t),p(n,Gs,t),p(n,Ns,t),p(n,T,t),a(T,Mt),a(T,an),a(an,xt),a(T,It),p(n,As,t),p(n,js,t),p(n,Fs,t),p(n,qs,t),p(n,W,t),a(W,H),a(H,Bn),a(W,gt),p(n,Js,t),p(n,yn,t),a(yn,Tt),p(n,Zs,t),p(n,b,t),a(b,Gn),a(Gn,Wt),a(b,Ht),a(b,Nn),a(Nn,Ot),a(b,Lt),a(b,D),a(D,Bt),a(D,An),a(An,Gt),a(D,Nt),a(D,jn),a(jn,At),a(D,jt),a(b,Ft),a(b,U),a(U,qt),a(U,Fn),a(Fn,Jt),a(U,Zt),a(U,qn),a(qn,zt),a(U,Kt),a(b,Qt),a(b,tn),a(tn,Vt),a(tn,Jn),a(Jn,Xt),a(tn,Yt),p(n,zs,t),p(n,En,t),a(En,$t),p(n,Ks,t),p(n,vn,t),a(vn,np),p(n,Qs,t),p(n,Vs,t),p(n,Xs,t),p(n,Ys,t),p(n,O,t),a(O,L),a(L,Zn),a(O,sp),p(n,$s,t),p(n,pn,t),a(pn,zn),a(zn,ap),a(pn,tp),p(n,na,t),p(n,on,t),on.innerHTML=be,p(n,sa,t),p(n,m,t),a(m,pp),a(m,Kn),a(Kn,op),a(m,ep),a(m,Qn),a(Qn,cp),a(m,lp),a(m,up),a(m,ip),p(n,aa,t),p(n,ta,t),p(n,pa,t),p(n,Sn,t),a(Sn,kp),p(n,oa,t),p(n,en,t),en.innerHTML=we,p(n,ea,t),p(n,S,t),a(S,rp),a(S,Vn),a(Vn,fp),a(S,dp),a(S,Xn),a(Xn,bp),a(S,wp),p(n,ca,t),p(n,B,t),a(B,mp),a(B,Yn),a(Yn,yp),a(B,Ep),p(n,la,t),p(n,ua,t),p(n,ia,t),p(n,G,t),a(G,vp),a(G,$n),a($n,Sp),a(G,_p),p(n,ka,t),p(n,cn,t),cn.innerHTML=me,p(n,ra,t),p(n,f,t),a(f,ns),a(ns,Cp),a(f,Dp),a(f,ss),a(ss,Up),a(f,hp),a(f,as),a(as,Rp),a(f,Pp),a(f,ts),a(ts,Mp),a(f,xp),a(f,ps),a(ps,Ip),a(f,gp),p(n,fa,t),p(n,da,t),p(n,ba,t),p(n,N,t),a(N,Tp),a(N,os),a(os,Wp),a(N,Hp),p(n,wa,t),p(n,ln,t),ln.innerHTML=ye,p(n,ma,t),p(n,h,t),a(h,es),a(es,Op),a(h,Lp),a(h,cs),a(cs,Bp),a(h,Gp),p(n,ya,t),p(n,un,t),un.innerHTML=Ee,p(n,Ea,t),p(n,R,t),a(R,ls),a(ls,Np),a(R,Ap),a(R,us),a(us,jp),a(R,Fp),p(n,va,t),p(n,Sa,t),p(n,_a,t),p(n,A,t),a(A,qp),a(A,is),a(is,Jp),a(A,Zp),p(n,Ca,t),p(n,kn,t),kn.innerHTML=ve,p(n,Da,t),p(n,j,t),a(j,zp),a(j,ks),a(ks,Kp),a(j,Qp),p(n,Ua,t),p(n,ha,t),p(n,Ra,t),p(n,F,t),a(F,Vp),a(F,rn),a(rn,Xp),a(F,Yp),p(n,Pa,t),p(n,Ma,t),p(n,xa,t),p(n,Ia,t),p(n,q,t),a(q,J),a(J,rs),a(q,$p),p(n,ga,t),p(n,_n,t),a(_n,no),p(n,Ta,t),p(n,Cn,t),a(Cn,so)},p:co,i:co,o:co,d(n){n&&s(P),n&&s(bs),n&&s(ws),n&&s(ms),n&&s(ys),n&&s(M),n&&s(Es),n&&s(I),n&&s(vs),n&&s(Ss),n&&s(_s),n&&s(dn),n&&s(Cs),n&&s(Q),n&&s(Ds),n&&s(g),n&&s(Us),n&&s(w),n&&s(hs),n&&s(Rs),n&&s(Ps),n&&s(bn),n&&s(Ms),n&&s(nn),n&&s(xs),n&&s(d),n&&s(Is),n&&s(y),n&&s(gs),n&&s(Ts),n&&s(Ws),n&&s(wn),n&&s(Hs),n&&s(sn),n&&s(Os),n&&s(v),n&&s(Ls),n&&s(mn),n&&s(Bs),n&&s(Gs),n&&s(Ns),n&&s(T),n&&s(As),n&&s(js),n&&s(Fs),n&&s(qs),n&&s(W),n&&s(Js),n&&s(yn),n&&s(Zs),n&&s(b),n&&s(zs),n&&s(En),n&&s(Ks),n&&s(vn),n&&s(Qs),n&&s(Vs),n&&s(Xs),n&&s(Ys),n&&s(O),n&&s($s),n&&s(pn),n&&s(na),n&&s(on),n&&s(sa),n&&s(m),n&&s(aa),n&&s(ta),n&&s(pa),n&&s(Sn),n&&s(oa),n&&s(en),n&&s(ea),n&&s(S),n&&s(ca),n&&s(B),n&&s(la),n&&s(ua),n&&s(ia),n&&s(G),n&&s(ka),n&&s(cn),n&&s(ra),n&&s(f),n&&s(fa),n&&s(da),n&&s(ba),n&&s(N),n&&s(wa),n&&s(ln),n&&s(ma),n&&s(h),n&&s(ya),n&&s(un),n&&s(Ea),n&&s(R),n&&s(va),n&&s(Sa),n&&s(_a),n&&s(A),n&&s(Ca),n&&s(kn),n&&s(Da),n&&s(j),n&&s(Ua),n&&s(ha),n&&s(Ra),n&&s(F),n&&s(Pa),n&&s(Ma),n&&s(xa),n&&s(Ia),n&&s(q),n&&s(ga),n&&s(_n),n&&s(Ta),n&&s(Cn)}}}const He={title:"Golang으로 WebRTC Mesh Server 구현하기",date:"2023-02-18T00:00:00.000Z",excerpt:"Golang을 통해 M:N WebRTC 시그널링 서버를 만들어보았습니다",categories:["WebRTC","Golang","Signaling Server"],coverImage:"/post_img/Networking/WebRTC/cover.png",coverWidth:16,coverHeight:9,indexed:!0,exposed:!0};class Oe extends xe{constructor(P){super(),Ie(this,P,null,Te,ge,{})}}export{Oe as default,He as metadata};
