import{S as zi,i as Vi,s as qi,k as e,a as u,q as l,y as Ji,l as o,c as r,m as i,r as c,h as n,z as Ui,n as k,b as p,E as a,A as Wi,M as Fi,g as Zi,d as Ki,B as Qi}from"./index.d78780bf.js";import{I as Xi}from"./Image.605b14b5.js";function Yi(pi){let hs,ka,Gs,De,fa,ma,ba,da,h,G,Ks,xe,Ea,va,_a,b,Be,Qs,He,Le,Xs,Se,Te,Ys,he,Ge,gs,Ae,Me,wa,cs,li=`<code class="language-go">x1 <span class="token operator">:=</span> <span class="token number">10</span> <span class="token comment">// shadowed variable.</span>
<span class="token keyword">if</span> x1 <span class="token operator">></span> <span class="token number">5</span> <span class="token punctuation">&#123;</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>x1<span class="token punctuation">)</span> <span class="token comment">// 10 => x1 is not yet shadowed</span>
    x1 <span class="token operator">:=</span> <span class="token number">5</span>         <span class="token comment">// shadowing variable. from this line to end of this block</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>x1<span class="token punctuation">)</span> <span class="token comment">// 5 => x1 is shadowed until if-blocks ends</span>
<span class="token punctuation">&#125;</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>x1<span class="token punctuation">)</span> <span class="token comment">// 10 => if-block ends. x1 is not shadowed</span></code>`,ya,As,Ne,Pa,Ca,Oa,is,ci=`<code class="language-go">	<span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token builtin">int</span> <span class="token operator">:=</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">"hi"</span>
	fmt <span class="token operator">:=</span> <span class="token string">"oops"</span>    <span class="token comment">// fmt is shadowed</span></code>`,Ra,O,Ie,sn,je,$e,nn,ze,Ve,Da,xa,Ba,Ms,qe,Ha,us,ii=`<code class="language-bash">go <span class="token function">install</span> golang.org/x/tools/go/analysis/passes/shadow/cmd/shadow@latest
shadow ./<span class="token punctuation">..</span></code>`,La,A,Je,an,Ue,We,Sa,rs,ui='<code class="language-bash">declaration of <span class="token string">"x"</span> shadows declaration at line <span class="token number">6</span></code>',Ta,ha,Ga,Aa,M,N,tn,Fe,Ma,Na,Ia,I,Ze,en,Ke,Qe,ja,ks,ri=`<code class="language-go">n1 <span class="token operator">:=</span> <span class="token number">7</span>
<span class="token keyword">if</span> n1 <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// there is no parenthesis around the condition</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"too low"</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> n1 <span class="token operator">></span> <span class="token number">5</span> <span class="token punctuation">&#123;</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"too big :"</span><span class="token punctuation">,</span> n1<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"good :"</span><span class="token punctuation">,</span> n1<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code>`,$a,za,Va,j,Xe,on,Ye,ge,qa,fs,ki=`<code class="language-go"><span class="token keyword">if</span> n2 <span class="token operator">:=</span> <span class="token number">4</span><span class="token punctuation">;</span> n2 <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span> <span class="token comment">// both declaring variable and checking condition</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"too low"</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> n2 <span class="token operator">></span> <span class="token number">5</span> <span class="token punctuation">&#123;</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"too big :"</span><span class="token punctuation">,</span> n2<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"good :"</span><span class="token punctuation">,</span> n2<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// fmt.Println(n2) // it causes error. once a if/else statement ends, n1 is not accessable.</span></code>`,Ja,$,so,pn,no,ao,Ua,Wa,Fa,Za,z,V,ln,to,Ka,Qa,Xa,q,eo,cn,oo,po,Ya,v,J,lo,un,co,io,rn,uo,ro,Ns,ko,kn,fo,mo,Is,bo,fn,Eo,vo,js,_o,mn,wo,ga,$s,yo,st,nt,at,tt,U,W,bn,Po,et,ms,fi=`<code class="language-go"><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>
    fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code>`,ot,y,dn,Co,Oo,En,Ro,Do,vn,xo,Bo,pt,lt,ct,F,Z,_n,Ho,it,bs,mi=`<code class="language-go">i <span class="token operator">:=</span> <span class="token number">1</span>
<span class="token keyword">for</span> i <span class="token operator">&lt;</span> <span class="token number">100</span> <span class="token punctuation">&#123;</span>
    fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token string">" "</span><span class="token punctuation">)</span>
    i <span class="token operator">=</span> i <span class="token operator">*</span> <span class="token number">2</span>
<span class="token punctuation">&#125;</span></code>`,ut,zs,Lo,rt,kt,ft,K,Q,wn,So,mt,ds,bi=`<code class="language-go">j <span class="token operator">:=</span> <span class="token number">0</span>
<span class="token keyword">for</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> j<span class="token operator">++</span><span class="token punctuation">;</span> j <span class="token operator">></span> <span class="token number">10</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">break</span> <span class="token comment">// if there is no break statement, loop will last until a keyboard interrupt(ctrl-c) occurs</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> j<span class="token operator">%</span><span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">continue</span>
    <span class="token punctuation">&#125;</span>
    fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token string">" "</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code>`,bt,P,yn,To,ho,Pn,Go,Ao,Cn,Mo,No,dt,Et,vt,X,Y,On,Io,_t,Es,di=`<code class="language-go"><span class="token comment">// for-range loop (array, slice, string)</span>
evenVals <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">&#125;</span>
<span class="token keyword">for</span> i<span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> evenVals <span class="token punctuation">&#123;</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> v<span class="token punctuation">)</span> <span class="token comment">// i is an key(index) of the data, v is value of the data</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// ignoring the key in a for-range loop</span>
<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> evenVals <span class="token punctuation">&#123;</span> <span class="token comment">// using underscore(_), we can only access the value</span>
    fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> <span class="token string">" "</span><span class="token punctuation">)</span> <span class="token comment">// if you want, it is also possible to ignore the value by using underscore</span>
<span class="token punctuation">&#125;</span></code>`,wt,_,jo,Rn,$o,zo,Dn,Vo,qo,xn,Jo,Uo,yt,Pt,Ct,vs,Bn,Wo,Fo,Ot,_s,Ei=`<code class="language-go"><span class="token comment">// for-range loop (map)</span>
names <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">bool</span><span class="token punctuation">&#123;</span>
    <span class="token string">"Fred"</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token string">"Raul"</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token string">"Will"</span><span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> names <span class="token punctuation">&#123;</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">for</span> k <span class="token operator">:=</span> <span class="token keyword">range</span> names <span class="token punctuation">&#123;</span> <span class="token comment">// by leave off second variable, it is possible to get key only.</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> names<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code>`,Rt,Vs,Zo,Dt,xt,Bt,ws,Hn,Ko,Qo,Ht,ys,vi=`<code class="language-go"><span class="token comment">// for-range loop (string)</span>
samples <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">&#123;</span><span class="token string">"hello"</span><span class="token punctuation">,</span> <span class="token string">"안녕하세요"</span><span class="token punctuation">&#125;</span>

<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> sample <span class="token operator">:=</span> <span class="token keyword">range</span> samples <span class="token punctuation">&#123;</span>
    <span class="token keyword">for</span> i<span class="token punctuation">,</span> r <span class="token operator">:=</span> <span class="token keyword">range</span> sample <span class="token punctuation">&#123;</span> <span class="token comment">// it iterates over the runes, not bytes</span>
        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> r<span class="token punctuation">,</span> <span class="token function">string</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// key is the number of byte from the beginning of the string, type of value is rune</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,Lt,R,Xo,Ln,Yo,go,Sn,sp,np,St,Tt,ht,D,ap,Tn,tp,ep,hn,op,pp,Gt,Ps,_i=`<code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	samples <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">&#123;</span><span class="token string">"hello"</span><span class="token punctuation">,</span> <span class="token string">"안녕hello"</span><span class="token punctuation">&#125;</span>

outer<span class="token punctuation">:</span> <span class="token comment">// label of outer for-statements</span>
	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> sample <span class="token operator">:=</span> <span class="token keyword">range</span> samples <span class="token punctuation">&#123;</span>
		<span class="token keyword">for</span> i<span class="token punctuation">,</span> r <span class="token operator">:=</span> <span class="token keyword">range</span> sample <span class="token punctuation">&#123;</span>
			fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> r<span class="token punctuation">,</span> <span class="token function">string</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span>
			<span class="token keyword">if</span> r <span class="token operator">==</span> <span class="token char">'l'</span> <span class="token punctuation">&#123;</span>
				<span class="token keyword">continue</span> outer <span class="token comment">// this leads to continue nested loop</span>
			<span class="token punctuation">&#125;</span>
		<span class="token punctuation">&#125;</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// this line is not reached because all the strings contain 'l', and the process continued outer loop</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,At,d,lp,Gn,cp,ip,An,up,rp,Mn,kp,fp,Nn,mp,bp,Mt,Nt,It,jt,g,ss,In,dp,$t,zt,Vt,x,Ep,jn,vp,_p,$n,wp,yp,qt,Cs,wi=`<code class="language-go">words <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">&#123;</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"cow"</span><span class="token punctuation">,</span> <span class="token string">"smile"</span><span class="token punctuation">,</span> <span class="token string">"gopher"</span><span class="token punctuation">,</span> <span class="token string">"octopus"</span><span class="token punctuation">,</span> <span class="token string">"영어싫어"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">&#125;</span>

<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> word <span class="token operator">:=</span> <span class="token keyword">range</span> words <span class="token punctuation">&#123;</span>
    <span class="token keyword">switch</span> size <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token punctuation">;</span> size <span class="token punctuation">&#123;</span> <span class="token comment">// as like if-statements, there is no parenthesis</span>
    <span class="token keyword">case</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">:</span> <span class="token comment">// using comma(,), we can make multiple matches</span>
        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>word<span class="token punctuation">,</span> <span class="token string">"is a short word!"</span><span class="token punctuation">)</span>
    <span class="token keyword">case</span> <span class="token number">5</span><span class="token punctuation">:</span>
        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>word<span class="token punctuation">,</span> <span class="token string">"is exactly the right length:"</span><span class="token punctuation">,</span> size<span class="token punctuation">)</span>
        <span class="token keyword">break</span>                         <span class="token comment">// this makes it exits switch earlier</span>
        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"not be printed"</span><span class="token punctuation">)</span> <span class="token comment">// because of break above, this line is unreachable</span>
    <span class="token keyword">case</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">:</span> <span class="token comment">// empty case (nothing happened)</span>
        <span class="token comment">// fallthrough // if keyword &#96;fallthrough&#96; is here, as like other languages, run next case's block</span>
    <span class="token keyword">default</span><span class="token punctuation">:</span>
        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>word<span class="token punctuation">,</span> <span class="token string">"is a wrong word"</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,Jt,f,Pp,zn,Cp,Op,Vn,Rp,Dp,xp,Bp,qn,Hp,Lp,Jn,Sp,Tp,Un,hp,Gp,Wn,Ap,Mp,Fn,Np,Ip,Zn,jp,$p,Ut,Wt,Ft,E,Kn,zp,Vp,Qn,qp,Jp,Xn,Up,Wp,Yn,Fp,Zp,Zt,Os,yi=`<code class="language-go">	<span class="token comment">// blank switch, break a loop in switch/case statements</span>
loop<span class="token punctuation">:</span> <span class="token comment">// to break in switch/case statement, attach a label to for-statements</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">switch</span> <span class="token punctuation">&#123;</span> <span class="token comment">// this is a blank switch. no variable</span>
		<span class="token keyword">case</span> i<span class="token operator">%</span><span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span> <span class="token comment">// here can be boolean expression</span>
			fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token string">"is even number"</span><span class="token punctuation">)</span>
		<span class="token keyword">case</span> i<span class="token operator">%</span><span class="token number">3</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
			fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token string">"is divisible by 3 but not 2"</span><span class="token punctuation">)</span>
		<span class="token keyword">case</span> i<span class="token operator">%</span><span class="token number">7</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
			fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"exit the loop"</span><span class="token punctuation">)</span>
			<span class="token keyword">break</span> loop <span class="token comment">// if this statement is just &#96;break&#96;, it cannot exit the loop. just proceed until the loop ends</span>
		<span class="token keyword">default</span><span class="token punctuation">:</span>
			fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token string">"is boring"</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span></code>`,Kt,C,gn,Kp,Qp,sa,Xp,Yp,na,gp,sl,Qt,Xt,Yt,gt,ns,as,aa,nl,se,ne,ae,B,al,ta,tl,el,ea,ol,pl,te,Rs,Pi=`<code class="language-go">	a <span class="token operator">:=</span> <span class="token number">10</span>
	<span class="token comment">// goto skip // cannot jump over variable declaration</span>
	b <span class="token operator">:=</span> <span class="token number">20</span>
	<span class="token keyword">goto</span> skip
skip<span class="token punctuation">:</span>
	c <span class="token operator">:=</span> <span class="token number">30</span>

	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span>
	<span class="token keyword">if</span> c <span class="token operator">></span> a <span class="token punctuation">&#123;</span>
		<span class="token comment">// goto inner // cannot jump into block</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">if</span> a <span class="token operator">&lt;</span> b <span class="token punctuation">&#123;</span>
		<span class="token keyword">goto</span> inner
	inner<span class="token punctuation">:</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"a is less than b"</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span></code>`,ee,Ds,oa,ll,cl,oe,pe,le,xs,pa,il,ul,ce,Bs,Ci=`<code class="language-go">    x <span class="token operator">:=</span> rand<span class="token punctuation">.</span><span class="token function">Intn</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>

	<span class="token keyword">for</span> x <span class="token operator">&lt;</span> <span class="token number">100</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">if</span> a<span class="token operator">%</span><span class="token number">5</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">goto</span> done <span class="token comment">// in this case, instead of using boolean flag, using goto makes code clearer and readable</span>
		<span class="token punctuation">&#125;</span>
		a <span class="token operator">=</span> a<span class="token operator">*</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span>
	<span class="token punctuation">&#125;</span>

	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"do something when the loop completes normally"</span><span class="token punctuation">)</span>
done<span class="token punctuation">:</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"do complicated stuff no matter why we left the loop"</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span></code>`,ie,H,rl,la,kl,fl,ca,ml,bl,ue,re,ke,fe,ts,es,ia,dl,me,be,de,w,El,ua,vl,_l,Hs,wl,yl,Pl,Ee,ve,_e,we;return Hs=new Xi({props:{alt:"Learning Go Book Cover",src:"https://learning.oreilly.com/covers/urn:orm:book:9781492077206/400w/"}}),{c(){hs=e("br"),ka=u(),Gs=e("p"),De=l("본 글은 Golang을 공부하며 주요 내용이라 생각되는 것들을 기록해둔 자료이며, Ubuntu 20.04 LTS 기준으로 작성되었습니다."),fa=u(),ma=e("br"),ba=e("br"),da=u(),h=e("h2"),G=e("a"),Ks=e("span"),xe=l("Shadowing"),Ea=u(),va=e("hr"),_a=u(),b=e("p"),Be=l("Go에서 기본적으로 "),Qs=e("code"),He=l("Block"),Le=l(`의 개념은 타 언어와 유사하다.
`),Xs=e("code"),Se=l("if"),Te=l(", "),Ys=e("code"),he=l("for"),Ge=l(" 등 흐름 제어 키워드들에 의해 중괄호가 시작되고, 해당 중괄호가 닫히는 영역까지를 "),gs=e("code"),Ae=l("Block"),Me=l("이라 한다."),wa=u(),cs=e("pre"),ya=u(),As=e("p"),Ne=l("이전 챕터에서도 다루었지만, Shadowing이 발생하면 해당 블록이 끝날 때까지 Shadowing된 변수에 접근할 수 없다."),Pa=u(),Ca=e("br"),Oa=u(),is=e("pre"),Ra=u(),O=e("p"),Ie=l("이렇게 패키지명이나 "),sn=e("em"),je=l("universe block"),$e=l("의 구분자들을 Shadowing하는 것이 문법적으로는 가능하지만, "),nn=e("strong"),ze=l("절대"),Ve=l(" 이렇게 하지 않도록 주의하자."),Da=u(),xa=e("br"),Ba=u(),Ms=e("p"),qe=l("변수가 Shadowing되는 것을 확인할 수 있는 명령어가 존재한다. 외부 모듈이므로 설치 후 사용해주어야 한다."),Ha=u(),us=e("pre"),La=u(),A=e("p"),Je=l("위와 같이 설치 후, "),an=e("code"),Ue=l("shadow"),We=l(" 명령어를 통해 검사를 실시하고자 하는 파일을 지정한다."),Sa=u(),rs=e("pre"),Ta=u(),ha=e("br"),Ga=e("br"),Aa=u(),M=e("h2"),N=e("a"),tn=e("span"),Fe=l("if"),Ma=u(),Na=e("hr"),Ia=u(),I=e("p"),Ze=l("C 계열 프로그래밍 언어의 "),en=e("code"),Ke=l("if"),Qe=l("문과 크게 다르지 않다. 특이사항으로는 괄호를 생략한다."),ja=u(),ks=e("pre"),$a=u(),za=e("br"),Va=u(),j=e("p"),Xe=l("특이사항으로는 "),on=e("code"),Ye=l("if"),ge=l("문의 조건 확인 구문 안에서 변수 선언을 동시에 할 수 있다."),qa=u(),fs=e("pre"),Ja=u(),$=e("p"),so=l("단, 이렇게 선언된 변수는 "),pn=e("code"),no=l("if"),ao=l("문 밖에선 접근할 수 없다."),Ua=u(),Wa=e("br"),Fa=e("br"),Za=u(),z=e("h2"),V=e("a"),ln=e("span"),to=l("for"),Ka=u(),Qa=e("hr"),Xa=u(),q=e("p"),eo=l("Go의 "),cn=e("code"),oo=l("for"),po=l("문은 4가지 유형이 존재한다."),Ya=u(),v=e("ol"),J=e("li"),lo=l("일반적인 "),un=e("code"),co=l("for"),io=l("문과 유사함 => "),rn=e("code"),uo=l("for(int i = 0; i < n; i++) {}"),ro=u(),Ns=e("li"),ko=l("일반적인 while문과 유사함 => "),kn=e("code"),fo=l("while(condition)"),mo=u(),Is=e("li"),bo=l("무한 루프 => "),fn=e("code"),Eo=l("while(True)"),vo=u(),js=e("li"),_o=l("range-based의 foreach문 => "),mn=e("code"),wo=l("for(const auto& element : containor) {}"),ga=u(),$s=e("p"),yo=l("하나씩 살펴보자."),st=u(),nt=e("br"),at=e("br"),tt=u(),U=e("h3"),W=e("a"),bn=e("span"),Po=l("The Complete for Statement"),et=u(),ms=e("pre"),ot=u(),y=e("p"),dn=e("code"),Co=l("if"),Oo=l("문처럼 괄호를 사용하지 않는다. 또한 변수를 초기화할 때 "),En=e("code"),Ro=l("var"),Do=l(" 키워드를 사용하지 않고, "),vn=e("code"),xo=l(":="),Bo=l(" 연산자를 이용하여 초기화해야 한다."),pt=u(),lt=e("br"),ct=u(),F=e("h3"),Z=e("a"),_n=e("span"),Ho=l("condition-only statements"),it=u(),bs=e("pre"),ut=u(),zs=e("p"),Lo=l("변수의 선언과 증감이 생략된 형태로, 다른 언어의 while문과 유사한 형태이다."),rt=u(),kt=e("br"),ft=u(),K=e("h3"),Q=e("a"),wn=e("span"),So=l("infinite loop and break, continue statements"),mt=u(),ds=e("pre"),bt=u(),P=e("p"),yn=e("code"),To=l("for"),ho=l(" 키워드 이후 아무런 표현식도 오지 않으면 무한루프를 돌게 된다. "),Pn=e("code"),Go=l("break"),Ao=l("문과 "),Cn=e("code"),Mo=l("contine"),No=l("문도 사용 가능하다."),dt=u(),Et=e("br"),vt=u(),X=e("h3"),Y=e("a"),On=e("span"),Io=l("for-range loop"),_t=u(),Es=e("pre"),wt=u(),_=e("p"),jo=l("다른 언어에 존재하는 "),Rn=e("code"),$o=l("for-each"),zo=l(" 형태의 반복문과 유사한 형태이다. "),Dn=e("code"),Vo=l("range"),qo=l(` 키워드를 통해 각각 인덱스와 값에 접근할 수 있다.
또한 변수 이름을 언더바(`),xn=e("code"),Jo=l("_"),Uo=l(")로 설정하면, 해당 값을 사용하지 않고 넘긴다는 의미가 된다. 적절히 사용할 수 있도록 하자."),yt=u(),Pt=e("br"),Ct=u(),vs=e("p"),Bn=e("code"),Wo=l("map"),Fo=l(" 타입에 대해서도 for-range loop를 적용할 수 있다."),Ot=u(),_s=e("pre"),Rt=u(),Vs=e("p"),Zo=l("대충 Python이랑 비슷한 것 같다."),Dt=u(),xt=e("br"),Bt=u(),ws=e("p"),Hn=e("code"),Ko=l("string"),Qo=l("에 대해서도 for-range loop가 가능하다."),Ht=u(),ys=e("pre"),Lt=u(),R=e("p"),Xo=l("특이사항은 "),Ln=e("code"),Yo=l("byte"),go=l(" 단위가 아닌 "),Sn=e("code"),sp=l("rune"),np=l(` 단위로 iterating한다는 것.
따라서 문자의 크기가 2바이트 이상인 경우, 인덱스가 점프하는 것을 확인할 수 있다.`),St=u(),Tt=e("br"),ht=u(),D=e("p"),ap=l("Go에서의 "),Tn=e("code"),tp=l("for"),ep=l("문은 "),hn=e("strong"),op=l("Labeling"),pp=l("을 지원한다."),Gt=u(),Ps=e("pre"),At=u(),d=e("p"),lp=l("바깥쪽 반복문에 "),Gn=e("code"),cp=l("outer"),ip=l(`라는 Label이 붙어있다.
그리고 안쪽 반복문에서 `),An=e("code"),up=l("continue outer"),rp=l("를 통해 "),Mn=e("code"),kp=l("for i, r := range sample {}"),fp=l(" 블록이 아닌, "),Nn=e("code"),mp=l("for _, sample := range samples"),bp=l(" 블록의 시작점으로 되돌아가고 있다."),Mt=u(),Nt=e("br"),It=e("br"),jt=u(),g=e("h2"),ss=e("a"),In=e("span"),dp=l("switch"),$t=u(),zt=e("hr"),Vt=u(),x=e("p"),Ep=l("보통 제한적인 상황에서만 사용되거나 "),jn=e("code"),vp=l("switch"),_p=l("문이 없는 다른 언어들과는 달리, Go는 "),$n=e("code"),wp=l("switch"),yp=l("문이 엄청 잘되어있다."),qt=u(),Cs=e("pre"),Jt=u(),f=e("p"),Pp=l("여러 값에 대해 적용되는 "),zn=e("code"),Cp=l("case"),Op=l("를 설정하려면 컴마("),Vn=e("code"),Rp=l(","),Dp=l(")로 값들을 구분지어서 나열하면 된다."),xp=e("br"),Bp=l(`
특이사항은 `),qn=e("code"),Hp=l("case"),Lp=l(" 블록에서 "),Jn=e("code"),Sp=l("break"),Tp=l("를 통한 탈출을 지원하긴 하지만, 다른 언어와 달리 반드시 사용하지 않아도 "),Un=e("code"),hp=l("case"),Gp=l(` 블록이 끝나면 알아서 탈출해준다.
만약 `),Wn=e("code"),Ap=l("case"),Mp=l(" 블록이 끝나고 아래 "),Fn=e("code"),Np=l("case"),Ip=l(" 블록도 실행되게끔 하고자 하는 경우, "),Zn=e("code"),jp=l("fallthrough"),$p=l(" 키워드를 사용하면 된다 한다. 다만 권장되지는 않는 듯 하다."),Ut=u(),Wt=e("br"),Ft=u(),E=e("p"),Kn=e("code"),zp=l("switch"),Vp=l("문에 아무런 변수도 할당하지 않는 경우, boolean expression의 true/false 여부에 따라 "),Qn=e("code"),qp=l("case"),Jp=l(" 블록이 실행된다. "),Xn=e("code"),Up=l("if"),Wp=l("/"),Yn=e("code"),Fp=l("else"),Zp=l("문이랑 비슷한듯."),Zt=u(),Os=e("pre"),Kt=u(),C=e("p"),gn=e("code"),Kp=l("case"),Qp=l("안에서 "),sa=e("code"),Xp=l("for"),Yp=l("문을 탈출하려면 위처럼 "),na=e("code"),gp=l("break"),sl=l("문에 Label을 명시해주어야 한다."),Qt=u(),Xt=e("br"),Yt=e("br"),gt=u(),ns=e("h2"),as=e("a"),aa=e("span"),nl=l("goto"),se=u(),ne=e("hr"),ae=u(),B=e("p"),al=l("놀랍게도 Go엔 "),ta=e("code"),tl=l("goto"),el=l("가 있다. "),ea=e("code"),ol=l("goto"),pl=l(" 자체가 가지고 있는 문제점을 해결하기 위해 몇 가지 보완이 이루어진 듯 하다."),te=u(),Rs=e("pre"),ee=u(),Ds=e("p"),oa=e("code"),ll=l("goto"),cl=l("를 통해 특정 block 안으로 들어가거나, 변수 선언 이전으로 되돌아가거나 할 수는 없다."),oe=u(),pe=e("br"),le=u(),xs=e("p"),pa=e("code"),il=l("goto"),ul=l("가 유용하게 쓰이는 경우가 한 가지 있다."),ce=u(),Bs=e("pre"),ie=u(),H=e("p"),rl=l(`위처럼 flag를 설정하여, flag의 여부에 따라 추가적으로 처리를 해주어야 하는 경우이다.
이 경우 위처럼 `),la=e("code"),kl=l("goto"),fl=l("를 사용하는 것이 "),ca=e("code"),ml=l("if"),bl=l("를 사용하는 것보다 깔끔하다고 한다."),ue=u(),re=e("br"),ke=e("br"),fe=u(),ts=e("h2"),es=e("a"),ia=e("span"),dl=l("References"),me=u(),be=e("hr"),de=u(),w=e("center"),El=l(`****
`),ua=e("p"),vl=l("["),_l=u(),Ji(Hs.$$.fragment),wl=l(`
](https://learning.oreilly.com/library/view/learning-go/9781492077206/) `),yl=e("br"),Pl=l(`
[Jon Bodner, 『Learning Go』, O'Reilly Media, Inc.](https://learning.oreilly.com/library/view/learning-go/9781492077206/)`),Ee=u(),ve=e("br"),_e=e("br"),this.h()},l(s){hs=o(s,"BR",{}),ka=r(s),Gs=o(s,"P",{});var t=i(Gs);De=c(t,"본 글은 Golang을 공부하며 주요 내용이라 생각되는 것들을 기록해둔 자료이며, Ubuntu 20.04 LTS 기준으로 작성되었습니다."),t.forEach(n),fa=r(s),ma=o(s,"BR",{}),ba=o(s,"BR",{}),da=r(s),h=o(s,"H2",{id:!0});var Cl=i(h);G=o(Cl,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var $l=i(G);Ks=o($l,"SPAN",{class:!0}),i(Ks).forEach(n),$l.forEach(n),xe=c(Cl,"Shadowing"),Cl.forEach(n),Ea=r(s),va=o(s,"HR",{}),_a=r(s),b=o(s,"P",{});var L=i(b);Be=c(L,"Go에서 기본적으로 "),Qs=o(L,"CODE",{});var zl=i(Qs);He=c(zl,"Block"),zl.forEach(n),Le=c(L,`의 개념은 타 언어와 유사하다.
`),Xs=o(L,"CODE",{});var Vl=i(Xs);Se=c(Vl,"if"),Vl.forEach(n),Te=c(L,", "),Ys=o(L,"CODE",{});var ql=i(Ys);he=c(ql,"for"),ql.forEach(n),Ge=c(L," 등 흐름 제어 키워드들에 의해 중괄호가 시작되고, 해당 중괄호가 닫히는 영역까지를 "),gs=o(L,"CODE",{});var Jl=i(gs);Ae=c(Jl,"Block"),Jl.forEach(n),Me=c(L,"이라 한다."),L.forEach(n),wa=r(s),cs=o(s,"PRE",{class:!0});var Oi=i(cs);Oi.forEach(n),ya=r(s),As=o(s,"P",{});var Ul=i(As);Ne=c(Ul,"이전 챕터에서도 다루었지만, Shadowing이 발생하면 해당 블록이 끝날 때까지 Shadowing된 변수에 접근할 수 없다."),Ul.forEach(n),Pa=r(s),Ca=o(s,"BR",{}),Oa=r(s),is=o(s,"PRE",{class:!0});var Ri=i(is);Ri.forEach(n),Ra=r(s),O=o(s,"P",{});var qs=i(O);Ie=c(qs,"이렇게 패키지명이나 "),sn=o(qs,"EM",{});var Wl=i(sn);je=c(Wl,"universe block"),Wl.forEach(n),$e=c(qs,"의 구분자들을 Shadowing하는 것이 문법적으로는 가능하지만, "),nn=o(qs,"STRONG",{});var Fl=i(nn);ze=c(Fl,"절대"),Fl.forEach(n),Ve=c(qs," 이렇게 하지 않도록 주의하자."),qs.forEach(n),Da=r(s),xa=o(s,"BR",{}),Ba=r(s),Ms=o(s,"P",{});var Zl=i(Ms);qe=c(Zl,"변수가 Shadowing되는 것을 확인할 수 있는 명령어가 존재한다. 외부 모듈이므로 설치 후 사용해주어야 한다."),Zl.forEach(n),Ha=r(s),us=o(s,"PRE",{class:!0});var Di=i(us);Di.forEach(n),La=r(s),A=o(s,"P",{});var ye=i(A);Je=c(ye,"위와 같이 설치 후, "),an=o(ye,"CODE",{});var Kl=i(an);Ue=c(Kl,"shadow"),Kl.forEach(n),We=c(ye," 명령어를 통해 검사를 실시하고자 하는 파일을 지정한다."),ye.forEach(n),Sa=r(s),rs=o(s,"PRE",{class:!0});var xi=i(rs);xi.forEach(n),Ta=r(s),ha=o(s,"BR",{}),Ga=o(s,"BR",{}),Aa=r(s),M=o(s,"H2",{id:!0});var Ol=i(M);N=o(Ol,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Ql=i(N);tn=o(Ql,"SPAN",{class:!0}),i(tn).forEach(n),Ql.forEach(n),Fe=c(Ol,"if"),Ol.forEach(n),Ma=r(s),Na=o(s,"HR",{}),Ia=r(s),I=o(s,"P",{});var Pe=i(I);Ze=c(Pe,"C 계열 프로그래밍 언어의 "),en=o(Pe,"CODE",{});var Xl=i(en);Ke=c(Xl,"if"),Xl.forEach(n),Qe=c(Pe,"문과 크게 다르지 않다. 특이사항으로는 괄호를 생략한다."),Pe.forEach(n),ja=r(s),ks=o(s,"PRE",{class:!0});var Bi=i(ks);Bi.forEach(n),$a=r(s),za=o(s,"BR",{}),Va=r(s),j=o(s,"P",{});var Ce=i(j);Xe=c(Ce,"특이사항으로는 "),on=o(Ce,"CODE",{});var Yl=i(on);Ye=c(Yl,"if"),Yl.forEach(n),ge=c(Ce,"문의 조건 확인 구문 안에서 변수 선언을 동시에 할 수 있다."),Ce.forEach(n),qa=r(s),fs=o(s,"PRE",{class:!0});var Hi=i(fs);Hi.forEach(n),Ja=r(s),$=o(s,"P",{});var Oe=i($);so=c(Oe,"단, 이렇게 선언된 변수는 "),pn=o(Oe,"CODE",{});var gl=i(pn);no=c(gl,"if"),gl.forEach(n),ao=c(Oe,"문 밖에선 접근할 수 없다."),Oe.forEach(n),Ua=r(s),Wa=o(s,"BR",{}),Fa=o(s,"BR",{}),Za=r(s),z=o(s,"H2",{id:!0});var Rl=i(z);V=o(Rl,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var sc=i(V);ln=o(sc,"SPAN",{class:!0}),i(ln).forEach(n),sc.forEach(n),to=c(Rl,"for"),Rl.forEach(n),Ka=r(s),Qa=o(s,"HR",{}),Xa=r(s),q=o(s,"P",{});var Re=i(q);eo=c(Re,"Go의 "),cn=o(Re,"CODE",{});var nc=i(cn);oo=c(nc,"for"),nc.forEach(n),po=c(Re,"문은 4가지 유형이 존재한다."),Re.forEach(n),Ya=r(s),v=o(s,"OL",{});var os=i(v);J=o(os,"LI",{});var ra=i(J);lo=c(ra,"일반적인 "),un=o(ra,"CODE",{});var ac=i(un);co=c(ac,"for"),ac.forEach(n),io=c(ra,"문과 유사함 => "),rn=o(ra,"CODE",{});var tc=i(rn);uo=c(tc,"for(int i = 0; i < n; i++) {}"),tc.forEach(n),ra.forEach(n),ro=r(os),Ns=o(os,"LI",{});var Dl=i(Ns);ko=c(Dl,"일반적인 while문과 유사함 => "),kn=o(Dl,"CODE",{});var ec=i(kn);fo=c(ec,"while(condition)"),ec.forEach(n),Dl.forEach(n),mo=r(os),Is=o(os,"LI",{});var xl=i(Is);bo=c(xl,"무한 루프 => "),fn=o(xl,"CODE",{});var oc=i(fn);Eo=c(oc,"while(True)"),oc.forEach(n),xl.forEach(n),vo=r(os),js=o(os,"LI",{});var Bl=i(js);_o=c(Bl,"range-based의 foreach문 => "),mn=o(Bl,"CODE",{});var pc=i(mn);wo=c(pc,"for(const auto& element : containor) {}"),pc.forEach(n),Bl.forEach(n),os.forEach(n),ga=r(s),$s=o(s,"P",{});var lc=i($s);yo=c(lc,"하나씩 살펴보자."),lc.forEach(n),st=r(s),nt=o(s,"BR",{}),at=o(s,"BR",{}),tt=r(s),U=o(s,"H3",{id:!0});var Hl=i(U);W=o(Hl,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var cc=i(W);bn=o(cc,"SPAN",{class:!0}),i(bn).forEach(n),cc.forEach(n),Po=c(Hl,"The Complete for Statement"),Hl.forEach(n),et=r(s),ms=o(s,"PRE",{class:!0});var Li=i(ms);Li.forEach(n),ot=r(s),y=o(s,"P",{});var Ls=i(y);dn=o(Ls,"CODE",{});var ic=i(dn);Co=c(ic,"if"),ic.forEach(n),Oo=c(Ls,"문처럼 괄호를 사용하지 않는다. 또한 변수를 초기화할 때 "),En=o(Ls,"CODE",{});var uc=i(En);Ro=c(uc,"var"),uc.forEach(n),Do=c(Ls," 키워드를 사용하지 않고, "),vn=o(Ls,"CODE",{});var rc=i(vn);xo=c(rc,":="),rc.forEach(n),Bo=c(Ls," 연산자를 이용하여 초기화해야 한다."),Ls.forEach(n),pt=r(s),lt=o(s,"BR",{}),ct=r(s),F=o(s,"H3",{id:!0});var Ll=i(F);Z=o(Ll,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var kc=i(Z);_n=o(kc,"SPAN",{class:!0}),i(_n).forEach(n),kc.forEach(n),Ho=c(Ll,"condition-only statements"),Ll.forEach(n),it=r(s),bs=o(s,"PRE",{class:!0});var Si=i(bs);Si.forEach(n),ut=r(s),zs=o(s,"P",{});var fc=i(zs);Lo=c(fc,"변수의 선언과 증감이 생략된 형태로, 다른 언어의 while문과 유사한 형태이다."),fc.forEach(n),rt=r(s),kt=o(s,"BR",{}),ft=r(s),K=o(s,"H3",{id:!0});var Sl=i(K);Q=o(Sl,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var mc=i(Q);wn=o(mc,"SPAN",{class:!0}),i(wn).forEach(n),mc.forEach(n),So=c(Sl,"infinite loop and break, continue statements"),Sl.forEach(n),mt=r(s),ds=o(s,"PRE",{class:!0});var Ti=i(ds);Ti.forEach(n),bt=r(s),P=o(s,"P",{});var Ss=i(P);yn=o(Ss,"CODE",{});var bc=i(yn);To=c(bc,"for"),bc.forEach(n),ho=c(Ss," 키워드 이후 아무런 표현식도 오지 않으면 무한루프를 돌게 된다. "),Pn=o(Ss,"CODE",{});var dc=i(Pn);Go=c(dc,"break"),dc.forEach(n),Ao=c(Ss,"문과 "),Cn=o(Ss,"CODE",{});var Ec=i(Cn);Mo=c(Ec,"contine"),Ec.forEach(n),No=c(Ss,"문도 사용 가능하다."),Ss.forEach(n),dt=r(s),Et=o(s,"BR",{}),vt=r(s),X=o(s,"H3",{id:!0});var Tl=i(X);Y=o(Tl,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var vc=i(Y);On=o(vc,"SPAN",{class:!0}),i(On).forEach(n),vc.forEach(n),Io=c(Tl,"for-range loop"),Tl.forEach(n),_t=r(s),Es=o(s,"PRE",{class:!0});var hi=i(Es);hi.forEach(n),wt=r(s),_=o(s,"P",{});var ps=i(_);jo=c(ps,"다른 언어에 존재하는 "),Rn=o(ps,"CODE",{});var _c=i(Rn);$o=c(_c,"for-each"),_c.forEach(n),zo=c(ps," 형태의 반복문과 유사한 형태이다. "),Dn=o(ps,"CODE",{});var wc=i(Dn);Vo=c(wc,"range"),wc.forEach(n),qo=c(ps,` 키워드를 통해 각각 인덱스와 값에 접근할 수 있다.
또한 변수 이름을 언더바(`),xn=o(ps,"CODE",{});var yc=i(xn);Jo=c(yc,"_"),yc.forEach(n),Uo=c(ps,")로 설정하면, 해당 값을 사용하지 않고 넘긴다는 의미가 된다. 적절히 사용할 수 있도록 하자."),ps.forEach(n),yt=r(s),Pt=o(s,"BR",{}),Ct=r(s),vs=o(s,"P",{});var hl=i(vs);Bn=o(hl,"CODE",{});var Pc=i(Bn);Wo=c(Pc,"map"),Pc.forEach(n),Fo=c(hl," 타입에 대해서도 for-range loop를 적용할 수 있다."),hl.forEach(n),Ot=r(s),_s=o(s,"PRE",{class:!0});var Gi=i(_s);Gi.forEach(n),Rt=r(s),Vs=o(s,"P",{});var Cc=i(Vs);Zo=c(Cc,"대충 Python이랑 비슷한 것 같다."),Cc.forEach(n),Dt=r(s),xt=o(s,"BR",{}),Bt=r(s),ws=o(s,"P",{});var Gl=i(ws);Hn=o(Gl,"CODE",{});var Oc=i(Hn);Ko=c(Oc,"string"),Oc.forEach(n),Qo=c(Gl,"에 대해서도 for-range loop가 가능하다."),Gl.forEach(n),Ht=r(s),ys=o(s,"PRE",{class:!0});var Ai=i(ys);Ai.forEach(n),Lt=r(s),R=o(s,"P",{});var Js=i(R);Xo=c(Js,"특이사항은 "),Ln=o(Js,"CODE",{});var Rc=i(Ln);Yo=c(Rc,"byte"),Rc.forEach(n),go=c(Js," 단위가 아닌 "),Sn=o(Js,"CODE",{});var Dc=i(Sn);sp=c(Dc,"rune"),Dc.forEach(n),np=c(Js,` 단위로 iterating한다는 것.
따라서 문자의 크기가 2바이트 이상인 경우, 인덱스가 점프하는 것을 확인할 수 있다.`),Js.forEach(n),St=r(s),Tt=o(s,"BR",{}),ht=r(s),D=o(s,"P",{});var Us=i(D);ap=c(Us,"Go에서의 "),Tn=o(Us,"CODE",{});var xc=i(Tn);tp=c(xc,"for"),xc.forEach(n),ep=c(Us,"문은 "),hn=o(Us,"STRONG",{});var Bc=i(hn);op=c(Bc,"Labeling"),Bc.forEach(n),pp=c(Us,"을 지원한다."),Us.forEach(n),Gt=r(s),Ps=o(s,"PRE",{class:!0});var Mi=i(Ps);Mi.forEach(n),At=r(s),d=o(s,"P",{});var S=i(d);lp=c(S,"바깥쪽 반복문에 "),Gn=o(S,"CODE",{});var Hc=i(Gn);cp=c(Hc,"outer"),Hc.forEach(n),ip=c(S,`라는 Label이 붙어있다.
그리고 안쪽 반복문에서 `),An=o(S,"CODE",{});var Lc=i(An);up=c(Lc,"continue outer"),Lc.forEach(n),rp=c(S,"를 통해 "),Mn=o(S,"CODE",{});var Sc=i(Mn);kp=c(Sc,"for i, r := range sample {}"),Sc.forEach(n),fp=c(S," 블록이 아닌, "),Nn=o(S,"CODE",{});var Tc=i(Nn);mp=c(Tc,"for _, sample := range samples"),Tc.forEach(n),bp=c(S," 블록의 시작점으로 되돌아가고 있다."),S.forEach(n),Mt=r(s),Nt=o(s,"BR",{}),It=o(s,"BR",{}),jt=r(s),g=o(s,"H2",{id:!0});var Al=i(g);ss=o(Al,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var hc=i(ss);In=o(hc,"SPAN",{class:!0}),i(In).forEach(n),hc.forEach(n),dp=c(Al,"switch"),Al.forEach(n),$t=r(s),zt=o(s,"HR",{}),Vt=r(s),x=o(s,"P",{});var Ws=i(x);Ep=c(Ws,"보통 제한적인 상황에서만 사용되거나 "),jn=o(Ws,"CODE",{});var Gc=i(jn);vp=c(Gc,"switch"),Gc.forEach(n),_p=c(Ws,"문이 없는 다른 언어들과는 달리, Go는 "),$n=o(Ws,"CODE",{});var Ac=i($n);wp=c(Ac,"switch"),Ac.forEach(n),yp=c(Ws,"문이 엄청 잘되어있다."),Ws.forEach(n),qt=r(s),Cs=o(s,"PRE",{class:!0});var Ni=i(Cs);Ni.forEach(n),Jt=r(s),f=o(s,"P",{});var m=i(f);Pp=c(m,"여러 값에 대해 적용되는 "),zn=o(m,"CODE",{});var Mc=i(zn);Cp=c(Mc,"case"),Mc.forEach(n),Op=c(m,"를 설정하려면 컴마("),Vn=o(m,"CODE",{});var Nc=i(Vn);Rp=c(Nc,","),Nc.forEach(n),Dp=c(m,")로 값들을 구분지어서 나열하면 된다."),xp=o(m,"BR",{}),Bp=c(m,`
특이사항은 `),qn=o(m,"CODE",{});var Ic=i(qn);Hp=c(Ic,"case"),Ic.forEach(n),Lp=c(m," 블록에서 "),Jn=o(m,"CODE",{});var jc=i(Jn);Sp=c(jc,"break"),jc.forEach(n),Tp=c(m,"를 통한 탈출을 지원하긴 하지만, 다른 언어와 달리 반드시 사용하지 않아도 "),Un=o(m,"CODE",{});var $c=i(Un);hp=c($c,"case"),$c.forEach(n),Gp=c(m,` 블록이 끝나면 알아서 탈출해준다.
만약 `),Wn=o(m,"CODE",{});var zc=i(Wn);Ap=c(zc,"case"),zc.forEach(n),Mp=c(m," 블록이 끝나고 아래 "),Fn=o(m,"CODE",{});var Vc=i(Fn);Np=c(Vc,"case"),Vc.forEach(n),Ip=c(m," 블록도 실행되게끔 하고자 하는 경우, "),Zn=o(m,"CODE",{});var qc=i(Zn);jp=c(qc,"fallthrough"),qc.forEach(n),$p=c(m," 키워드를 사용하면 된다 한다. 다만 권장되지는 않는 듯 하다."),m.forEach(n),Ut=r(s),Wt=o(s,"BR",{}),Ft=r(s),E=o(s,"P",{});var T=i(E);Kn=o(T,"CODE",{});var Jc=i(Kn);zp=c(Jc,"switch"),Jc.forEach(n),Vp=c(T,"문에 아무런 변수도 할당하지 않는 경우, boolean expression의 true/false 여부에 따라 "),Qn=o(T,"CODE",{});var Uc=i(Qn);qp=c(Uc,"case"),Uc.forEach(n),Jp=c(T," 블록이 실행된다. "),Xn=o(T,"CODE",{});var Wc=i(Xn);Up=c(Wc,"if"),Wc.forEach(n),Wp=c(T,"/"),Yn=o(T,"CODE",{});var Fc=i(Yn);Fp=c(Fc,"else"),Fc.forEach(n),Zp=c(T,"문이랑 비슷한듯."),T.forEach(n),Zt=r(s),Os=o(s,"PRE",{class:!0});var Ii=i(Os);Ii.forEach(n),Kt=r(s),C=o(s,"P",{});var Ts=i(C);gn=o(Ts,"CODE",{});var Zc=i(gn);Kp=c(Zc,"case"),Zc.forEach(n),Qp=c(Ts,"안에서 "),sa=o(Ts,"CODE",{});var Kc=i(sa);Xp=c(Kc,"for"),Kc.forEach(n),Yp=c(Ts,"문을 탈출하려면 위처럼 "),na=o(Ts,"CODE",{});var Qc=i(na);gp=c(Qc,"break"),Qc.forEach(n),sl=c(Ts,"문에 Label을 명시해주어야 한다."),Ts.forEach(n),Qt=r(s),Xt=o(s,"BR",{}),Yt=o(s,"BR",{}),gt=r(s),ns=o(s,"H2",{id:!0});var Ml=i(ns);as=o(Ml,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Xc=i(as);aa=o(Xc,"SPAN",{class:!0}),i(aa).forEach(n),Xc.forEach(n),nl=c(Ml,"goto"),Ml.forEach(n),se=r(s),ne=o(s,"HR",{}),ae=r(s),B=o(s,"P",{});var Fs=i(B);al=c(Fs,"놀랍게도 Go엔 "),ta=o(Fs,"CODE",{});var Yc=i(ta);tl=c(Yc,"goto"),Yc.forEach(n),el=c(Fs,"가 있다. "),ea=o(Fs,"CODE",{});var gc=i(ea);ol=c(gc,"goto"),gc.forEach(n),pl=c(Fs," 자체가 가지고 있는 문제점을 해결하기 위해 몇 가지 보완이 이루어진 듯 하다."),Fs.forEach(n),te=r(s),Rs=o(s,"PRE",{class:!0});var ji=i(Rs);ji.forEach(n),ee=r(s),Ds=o(s,"P",{});var Nl=i(Ds);oa=o(Nl,"CODE",{});var si=i(oa);ll=c(si,"goto"),si.forEach(n),cl=c(Nl,"를 통해 특정 block 안으로 들어가거나, 변수 선언 이전으로 되돌아가거나 할 수는 없다."),Nl.forEach(n),oe=r(s),pe=o(s,"BR",{}),le=r(s),xs=o(s,"P",{});var Il=i(xs);pa=o(Il,"CODE",{});var ni=i(pa);il=c(ni,"goto"),ni.forEach(n),ul=c(Il,"가 유용하게 쓰이는 경우가 한 가지 있다."),Il.forEach(n),ce=r(s),Bs=o(s,"PRE",{class:!0});var $i=i(Bs);$i.forEach(n),ie=r(s),H=o(s,"P",{});var Zs=i(H);rl=c(Zs,`위처럼 flag를 설정하여, flag의 여부에 따라 추가적으로 처리를 해주어야 하는 경우이다.
이 경우 위처럼 `),la=o(Zs,"CODE",{});var ai=i(la);kl=c(ai,"goto"),ai.forEach(n),fl=c(Zs,"를 사용하는 것이 "),ca=o(Zs,"CODE",{});var ti=i(ca);ml=c(ti,"if"),ti.forEach(n),bl=c(Zs,"를 사용하는 것보다 깔끔하다고 한다."),Zs.forEach(n),ue=r(s),re=o(s,"BR",{}),ke=o(s,"BR",{}),fe=r(s),ts=o(s,"H2",{id:!0});var jl=i(ts);es=o(jl,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var ei=i(es);ia=o(ei,"SPAN",{class:!0}),i(ia).forEach(n),ei.forEach(n),dl=c(jl,"References"),jl.forEach(n),me=r(s),be=o(s,"HR",{}),de=r(s),w=o(s,"CENTER",{});var ls=i(w);El=c(ls,`****
`),ua=o(ls,"P",{});var oi=i(ua);vl=c(oi,"["),oi.forEach(n),_l=r(ls),Ui(Hs.$$.fragment,ls),wl=c(ls,`
](https://learning.oreilly.com/library/view/learning-go/9781492077206/) `),yl=o(ls,"BR",{}),Pl=c(ls,`
[Jon Bodner, 『Learning Go』, O'Reilly Media, Inc.](https://learning.oreilly.com/library/view/learning-go/9781492077206/)`),ls.forEach(n),Ee=r(s),ve=o(s,"BR",{}),_e=o(s,"BR",{}),this.h()},h(){k(Ks,"class","icon icon-link"),k(G,"aria-hidden","true"),k(G,"tabindex","-1"),k(G,"href","#shadowing"),k(h,"id","shadowing"),k(cs,"class","language-go"),k(is,"class","language-go"),k(us,"class","language-bash"),k(rs,"class","language-bash"),k(tn,"class","icon icon-link"),k(N,"aria-hidden","true"),k(N,"tabindex","-1"),k(N,"href","#if"),k(M,"id","if"),k(ks,"class","language-go"),k(fs,"class","language-go"),k(ln,"class","icon icon-link"),k(V,"aria-hidden","true"),k(V,"tabindex","-1"),k(V,"href","#for"),k(z,"id","for"),k(bn,"class","icon icon-link"),k(W,"aria-hidden","true"),k(W,"tabindex","-1"),k(W,"href","#the-complete-for-statement"),k(U,"id","the-complete-for-statement"),k(ms,"class","language-go"),k(_n,"class","icon icon-link"),k(Z,"aria-hidden","true"),k(Z,"tabindex","-1"),k(Z,"href","#condition-only-statements"),k(F,"id","condition-only-statements"),k(bs,"class","language-go"),k(wn,"class","icon icon-link"),k(Q,"aria-hidden","true"),k(Q,"tabindex","-1"),k(Q,"href","#infinite-loop-and-break-continue-statements"),k(K,"id","infinite-loop-and-break-continue-statements"),k(ds,"class","language-go"),k(On,"class","icon icon-link"),k(Y,"aria-hidden","true"),k(Y,"tabindex","-1"),k(Y,"href","#for-range-loop"),k(X,"id","for-range-loop"),k(Es,"class","language-go"),k(_s,"class","language-go"),k(ys,"class","language-go"),k(Ps,"class","language-go"),k(In,"class","icon icon-link"),k(ss,"aria-hidden","true"),k(ss,"tabindex","-1"),k(ss,"href","#switch"),k(g,"id","switch"),k(Cs,"class","language-go"),k(Os,"class","language-go"),k(aa,"class","icon icon-link"),k(as,"aria-hidden","true"),k(as,"tabindex","-1"),k(as,"href","#goto"),k(ns,"id","goto"),k(Rs,"class","language-go"),k(Bs,"class","language-go"),k(ia,"class","icon icon-link"),k(es,"aria-hidden","true"),k(es,"tabindex","-1"),k(es,"href","#references"),k(ts,"id","references")},m(s,t){p(s,hs,t),p(s,ka,t),p(s,Gs,t),a(Gs,De),p(s,fa,t),p(s,ma,t),p(s,ba,t),p(s,da,t),p(s,h,t),a(h,G),a(G,Ks),a(h,xe),p(s,Ea,t),p(s,va,t),p(s,_a,t),p(s,b,t),a(b,Be),a(b,Qs),a(Qs,He),a(b,Le),a(b,Xs),a(Xs,Se),a(b,Te),a(b,Ys),a(Ys,he),a(b,Ge),a(b,gs),a(gs,Ae),a(b,Me),p(s,wa,t),p(s,cs,t),cs.innerHTML=li,p(s,ya,t),p(s,As,t),a(As,Ne),p(s,Pa,t),p(s,Ca,t),p(s,Oa,t),p(s,is,t),is.innerHTML=ci,p(s,Ra,t),p(s,O,t),a(O,Ie),a(O,sn),a(sn,je),a(O,$e),a(O,nn),a(nn,ze),a(O,Ve),p(s,Da,t),p(s,xa,t),p(s,Ba,t),p(s,Ms,t),a(Ms,qe),p(s,Ha,t),p(s,us,t),us.innerHTML=ii,p(s,La,t),p(s,A,t),a(A,Je),a(A,an),a(an,Ue),a(A,We),p(s,Sa,t),p(s,rs,t),rs.innerHTML=ui,p(s,Ta,t),p(s,ha,t),p(s,Ga,t),p(s,Aa,t),p(s,M,t),a(M,N),a(N,tn),a(M,Fe),p(s,Ma,t),p(s,Na,t),p(s,Ia,t),p(s,I,t),a(I,Ze),a(I,en),a(en,Ke),a(I,Qe),p(s,ja,t),p(s,ks,t),ks.innerHTML=ri,p(s,$a,t),p(s,za,t),p(s,Va,t),p(s,j,t),a(j,Xe),a(j,on),a(on,Ye),a(j,ge),p(s,qa,t),p(s,fs,t),fs.innerHTML=ki,p(s,Ja,t),p(s,$,t),a($,so),a($,pn),a(pn,no),a($,ao),p(s,Ua,t),p(s,Wa,t),p(s,Fa,t),p(s,Za,t),p(s,z,t),a(z,V),a(V,ln),a(z,to),p(s,Ka,t),p(s,Qa,t),p(s,Xa,t),p(s,q,t),a(q,eo),a(q,cn),a(cn,oo),a(q,po),p(s,Ya,t),p(s,v,t),a(v,J),a(J,lo),a(J,un),a(un,co),a(J,io),a(J,rn),a(rn,uo),a(v,ro),a(v,Ns),a(Ns,ko),a(Ns,kn),a(kn,fo),a(v,mo),a(v,Is),a(Is,bo),a(Is,fn),a(fn,Eo),a(v,vo),a(v,js),a(js,_o),a(js,mn),a(mn,wo),p(s,ga,t),p(s,$s,t),a($s,yo),p(s,st,t),p(s,nt,t),p(s,at,t),p(s,tt,t),p(s,U,t),a(U,W),a(W,bn),a(U,Po),p(s,et,t),p(s,ms,t),ms.innerHTML=fi,p(s,ot,t),p(s,y,t),a(y,dn),a(dn,Co),a(y,Oo),a(y,En),a(En,Ro),a(y,Do),a(y,vn),a(vn,xo),a(y,Bo),p(s,pt,t),p(s,lt,t),p(s,ct,t),p(s,F,t),a(F,Z),a(Z,_n),a(F,Ho),p(s,it,t),p(s,bs,t),bs.innerHTML=mi,p(s,ut,t),p(s,zs,t),a(zs,Lo),p(s,rt,t),p(s,kt,t),p(s,ft,t),p(s,K,t),a(K,Q),a(Q,wn),a(K,So),p(s,mt,t),p(s,ds,t),ds.innerHTML=bi,p(s,bt,t),p(s,P,t),a(P,yn),a(yn,To),a(P,ho),a(P,Pn),a(Pn,Go),a(P,Ao),a(P,Cn),a(Cn,Mo),a(P,No),p(s,dt,t),p(s,Et,t),p(s,vt,t),p(s,X,t),a(X,Y),a(Y,On),a(X,Io),p(s,_t,t),p(s,Es,t),Es.innerHTML=di,p(s,wt,t),p(s,_,t),a(_,jo),a(_,Rn),a(Rn,$o),a(_,zo),a(_,Dn),a(Dn,Vo),a(_,qo),a(_,xn),a(xn,Jo),a(_,Uo),p(s,yt,t),p(s,Pt,t),p(s,Ct,t),p(s,vs,t),a(vs,Bn),a(Bn,Wo),a(vs,Fo),p(s,Ot,t),p(s,_s,t),_s.innerHTML=Ei,p(s,Rt,t),p(s,Vs,t),a(Vs,Zo),p(s,Dt,t),p(s,xt,t),p(s,Bt,t),p(s,ws,t),a(ws,Hn),a(Hn,Ko),a(ws,Qo),p(s,Ht,t),p(s,ys,t),ys.innerHTML=vi,p(s,Lt,t),p(s,R,t),a(R,Xo),a(R,Ln),a(Ln,Yo),a(R,go),a(R,Sn),a(Sn,sp),a(R,np),p(s,St,t),p(s,Tt,t),p(s,ht,t),p(s,D,t),a(D,ap),a(D,Tn),a(Tn,tp),a(D,ep),a(D,hn),a(hn,op),a(D,pp),p(s,Gt,t),p(s,Ps,t),Ps.innerHTML=_i,p(s,At,t),p(s,d,t),a(d,lp),a(d,Gn),a(Gn,cp),a(d,ip),a(d,An),a(An,up),a(d,rp),a(d,Mn),a(Mn,kp),a(d,fp),a(d,Nn),a(Nn,mp),a(d,bp),p(s,Mt,t),p(s,Nt,t),p(s,It,t),p(s,jt,t),p(s,g,t),a(g,ss),a(ss,In),a(g,dp),p(s,$t,t),p(s,zt,t),p(s,Vt,t),p(s,x,t),a(x,Ep),a(x,jn),a(jn,vp),a(x,_p),a(x,$n),a($n,wp),a(x,yp),p(s,qt,t),p(s,Cs,t),Cs.innerHTML=wi,p(s,Jt,t),p(s,f,t),a(f,Pp),a(f,zn),a(zn,Cp),a(f,Op),a(f,Vn),a(Vn,Rp),a(f,Dp),a(f,xp),a(f,Bp),a(f,qn),a(qn,Hp),a(f,Lp),a(f,Jn),a(Jn,Sp),a(f,Tp),a(f,Un),a(Un,hp),a(f,Gp),a(f,Wn),a(Wn,Ap),a(f,Mp),a(f,Fn),a(Fn,Np),a(f,Ip),a(f,Zn),a(Zn,jp),a(f,$p),p(s,Ut,t),p(s,Wt,t),p(s,Ft,t),p(s,E,t),a(E,Kn),a(Kn,zp),a(E,Vp),a(E,Qn),a(Qn,qp),a(E,Jp),a(E,Xn),a(Xn,Up),a(E,Wp),a(E,Yn),a(Yn,Fp),a(E,Zp),p(s,Zt,t),p(s,Os,t),Os.innerHTML=yi,p(s,Kt,t),p(s,C,t),a(C,gn),a(gn,Kp),a(C,Qp),a(C,sa),a(sa,Xp),a(C,Yp),a(C,na),a(na,gp),a(C,sl),p(s,Qt,t),p(s,Xt,t),p(s,Yt,t),p(s,gt,t),p(s,ns,t),a(ns,as),a(as,aa),a(ns,nl),p(s,se,t),p(s,ne,t),p(s,ae,t),p(s,B,t),a(B,al),a(B,ta),a(ta,tl),a(B,el),a(B,ea),a(ea,ol),a(B,pl),p(s,te,t),p(s,Rs,t),Rs.innerHTML=Pi,p(s,ee,t),p(s,Ds,t),a(Ds,oa),a(oa,ll),a(Ds,cl),p(s,oe,t),p(s,pe,t),p(s,le,t),p(s,xs,t),a(xs,pa),a(pa,il),a(xs,ul),p(s,ce,t),p(s,Bs,t),Bs.innerHTML=Ci,p(s,ie,t),p(s,H,t),a(H,rl),a(H,la),a(la,kl),a(H,fl),a(H,ca),a(ca,ml),a(H,bl),p(s,ue,t),p(s,re,t),p(s,ke,t),p(s,fe,t),p(s,ts,t),a(ts,es),a(es,ia),a(ts,dl),p(s,me,t),p(s,be,t),p(s,de,t),p(s,w,t),a(w,El),a(w,ua),a(ua,vl),a(w,_l),Wi(Hs,w,null),a(w,wl),a(w,yl),a(w,Pl),p(s,Ee,t),p(s,ve,t),p(s,_e,t),we=!0},p:Fi,i(s){we||(Zi(Hs.$$.fragment,s),we=!0)},o(s){Ki(Hs.$$.fragment,s),we=!1},d(s){s&&n(hs),s&&n(ka),s&&n(Gs),s&&n(fa),s&&n(ma),s&&n(ba),s&&n(da),s&&n(h),s&&n(Ea),s&&n(va),s&&n(_a),s&&n(b),s&&n(wa),s&&n(cs),s&&n(ya),s&&n(As),s&&n(Pa),s&&n(Ca),s&&n(Oa),s&&n(is),s&&n(Ra),s&&n(O),s&&n(Da),s&&n(xa),s&&n(Ba),s&&n(Ms),s&&n(Ha),s&&n(us),s&&n(La),s&&n(A),s&&n(Sa),s&&n(rs),s&&n(Ta),s&&n(ha),s&&n(Ga),s&&n(Aa),s&&n(M),s&&n(Ma),s&&n(Na),s&&n(Ia),s&&n(I),s&&n(ja),s&&n(ks),s&&n($a),s&&n(za),s&&n(Va),s&&n(j),s&&n(qa),s&&n(fs),s&&n(Ja),s&&n($),s&&n(Ua),s&&n(Wa),s&&n(Fa),s&&n(Za),s&&n(z),s&&n(Ka),s&&n(Qa),s&&n(Xa),s&&n(q),s&&n(Ya),s&&n(v),s&&n(ga),s&&n($s),s&&n(st),s&&n(nt),s&&n(at),s&&n(tt),s&&n(U),s&&n(et),s&&n(ms),s&&n(ot),s&&n(y),s&&n(pt),s&&n(lt),s&&n(ct),s&&n(F),s&&n(it),s&&n(bs),s&&n(ut),s&&n(zs),s&&n(rt),s&&n(kt),s&&n(ft),s&&n(K),s&&n(mt),s&&n(ds),s&&n(bt),s&&n(P),s&&n(dt),s&&n(Et),s&&n(vt),s&&n(X),s&&n(_t),s&&n(Es),s&&n(wt),s&&n(_),s&&n(yt),s&&n(Pt),s&&n(Ct),s&&n(vs),s&&n(Ot),s&&n(_s),s&&n(Rt),s&&n(Vs),s&&n(Dt),s&&n(xt),s&&n(Bt),s&&n(ws),s&&n(Ht),s&&n(ys),s&&n(Lt),s&&n(R),s&&n(St),s&&n(Tt),s&&n(ht),s&&n(D),s&&n(Gt),s&&n(Ps),s&&n(At),s&&n(d),s&&n(Mt),s&&n(Nt),s&&n(It),s&&n(jt),s&&n(g),s&&n($t),s&&n(zt),s&&n(Vt),s&&n(x),s&&n(qt),s&&n(Cs),s&&n(Jt),s&&n(f),s&&n(Ut),s&&n(Wt),s&&n(Ft),s&&n(E),s&&n(Zt),s&&n(Os),s&&n(Kt),s&&n(C),s&&n(Qt),s&&n(Xt),s&&n(Yt),s&&n(gt),s&&n(ns),s&&n(se),s&&n(ne),s&&n(ae),s&&n(B),s&&n(te),s&&n(Rs),s&&n(ee),s&&n(Ds),s&&n(oe),s&&n(pe),s&&n(le),s&&n(xs),s&&n(ce),s&&n(Bs),s&&n(ie),s&&n(H),s&&n(ue),s&&n(re),s&&n(ke),s&&n(fe),s&&n(ts),s&&n(me),s&&n(be),s&&n(de),s&&n(w),Qi(Hs),s&&n(Ee),s&&n(ve),s&&n(_e)}}}const nu={title:"블록, Shadowing, 흐름 제어문",date:"2022-07-27T00:00:00.000Z",excerpt:"Blocks, Shadows, and Control Structures",categories:["Golang","Basic Golang"],coverImage:"/post_img/Go/Golang_basics/cover.png",coverWidth:16,coverHeight:9,indexed:!1,exposed:!0};class au extends zi{constructor(hs){super(),Vi(this,hs,null,Yi,qi,{})}}export{au as default,nu as metadata};
