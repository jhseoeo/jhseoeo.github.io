import{S as Pi,i as yi,s as Ai,k as r,q as f,a as s,y as Si,l as i,m as a,h as l,r as n,c as d,z as xi,n as v,b as o,E as e,A as wi,M as ki,g as Hi,d as Oi,B as Ci}from"./index.d78780bf.js";import{I as Li}from"./Image.605b14b5.js";function Ii(Bi){let u,S,pt,ze,Ft,Jt,Xt,V,We,gt,K,Ve,te,Q,Ke,ee,c,Et,_t,Qe,Ye,U,Ze,ut,Fe,Je,Xe,b,Y,ct,ge,tl,el,Z,mt,ll,rl,il,F,bt,al,Dl,le,J,ol,re,ie,ae,De,x,w,ht,fl,oe,fe,ne,m,G,M,nl,sl,dl,vl,Tt,pl,El,$,q,_l,ul,cl,ml,Rt,bl,hl,Bt,j,Tl,Rl,Bl,se,de,ve,pe,k,H,Pt,Pl,Ee,_e,ue,X,yl,ce,g,Al,me,be,he,Te,O,C,yt,Sl,Re,Be,Pe,tt,xl,ye,et,wl,Ae,L,At,h,St,kl,Hl,xt,Ol,Cl,wt,Ll,Il,p,T,kt,Nl,Ul,Ht,Gl,Ml,Ot,$l,ql,R,Ct,jl,zl,Lt,Wl,Vl,It,Kl,Ql,B,Nt,Yl,Zl,Ut,Fl,Jl,Gt,Xl,gl,P,Mt,tr,er,$t,lr,rr,qt,ir,ar,y,jt,Dr,or,zt,fr,nr,Wt,sr,dr,A,Vt,vr,pr,Kt,Er,_r,Qt,ur,Se,lt,cr,xe,we,ke,He,I,N,Yt,mr,Oe,Ce,Le,_,Zt,br,hr,z,Tr,Rr,Br,Ie;return z=new Li({props:{alt:"Domain-Driven Design with Golang Cover",src:"https://learning.oreilly.com/covers/urn:orm:book:9781804613450/400w/"}}),{c(){u=r("h2"),S=r("a"),pt=r("span"),ze=f("Domain Driven Design의 탄생"),Ft=s(),Jt=r("hr"),Xt=s(),V=r("p"),We=f(`소프트웨어가 점점 복잡해지면서 공학자들과 아키텍트들은 시스템의 구조에 대해 여러 가지 고민을 하였고,
모델링하려는 문제 공간(도메인)을 시스템에 나타내는 방식으로 접근했다.
이 때 시스템이 도메인에 가까울 수록 변경하기가 쉽다는 장점이 있었고, 시스템과 실세계의 도메인 사이의 단절이 적기 때문에 다른 관계자가 모델을 이해하기 쉬웠다.`),gt=s(),K=r("p"),Ve=f(`소프트웨어 엔지니어인 Eric Evans가 마주한 문제는 시스템의 복잡성 증가와 시스템 생성 및 유지 보수의 실패였다.
이로 인해 그는 Domain-Driven Design: Tacking Complexity in the Heart of Software , Addison-Wesley Professional 이라는 책을 저술하였다.`),te=s(),Q=r("p"),Ke=f("이 책은 복잡한 시스템을 구축하고 유지하는 데 도움이 되는 방법들을 제시하며, 도메인 주도 설계의 많은 부분이 객체지향 설계 패턴에서 유래했음을 언급하고 있다."),ee=s(),c=r("blockquote"),Et=r("p"),_t=r("strong"),Qe=f("객체지향 패턴이란?"),Ye=s(),U=r("p"),Ze=f("1995년도에 저술된 "),ut=r("em"),Fe=f("Design Patterns, Elements of Reusable Object-Oriented Software"),Je=f(`라는 책은 현재까지도 컴퓨터공학 분야에서 가장 유명한 책 중 하나이다.
이 책에서는 뛰어난 확장성과 유지보수성을 가진 객체지향 소프트웨어를 설계하기 위한 23개의 패턴을 소개하고 있다.
그리고, DDD에서도 이러한 패턴 중 일부에서 아주 중요한 영감을 얻었다고 한다.`),Xe=s(),b=r("ul"),Y=r("li"),ct=r("strong"),ge=f("Creational Patterns"),tl=f(" : 오브젝트를 직접 생성하지 않고, 생성하는 방법을 제공하는 패턴으로, 오브젝트 생성의 유연성을 높이고 코드의 유지보수를 쉽게 한다."),el=s(),Z=r("li"),mt=r("strong"),ll=f("Structural Patterns"),rl=f(" : 특정 기능을 수행하기 위해 클래스와 객체를 조합하는 패턴으로, 클래스와 객체의 구성을 통해 더 큰 구조를 만들 수 있다."),il=s(),F=r("li"),bt=r("strong"),al=f("Behavioral Patterns"),Dl=f(" : 오브젝트 사이의 통신에 관한 패턴이다."),le=s(),J=r("p"),ol=f(`Big Blue Book이라고도 불리는 Evans의 책은, 세련되고 명확한 시스템을 설계하기 위한 공통 언어와 원칙을 제시한다.
또한, 복잡한 소프트웨어를 개선할 때 사용할 수 있는 세 가지 기둥을 제시한다.`),re=s(),ie=r("br"),ae=r("br"),De=s(),x=r("h2"),w=r("a"),ht=r("span"),fl=f("DDD의 세 가지 기둥"),oe=s(),fe=r("hr"),ne=s(),m=r("ul"),G=r("li"),M=r("p"),nl=f("Ubiquitous Language"),sl=r("br"),dl=f(`
도메인에대해 이야기할 때 사용하는 공통 언어이다.
이 언어는 도메인 전문가와 개발자 모두가 사용할 수 있어야 하며, 소통 과정에서의 불확실성을 줄여 준다.`),vl=s(),Tt=r("p"),pl=f(`실제 언어와 마찬가지로, 유비쿼터스 언어는 도메인에 대한 팀의 이해가 높아질수록 발전해야 한다.
비즈니스 언어가 아니기 때문에 도메인 전문가에 의해 강요되어서는 안 된다.`),El=s(),$=r("li"),q=r("p"),_l=f("Strategic Design"),ul=r("br"),cl=f(`
비즈니스 도메인을 매핑하고 제한된 컨텍스트를 정의하는 DDD 프로세스의 한 단계이다.
Strategic Design의 목표는 비즈니스 결과에 초점을 맞춰 시스템을 설계하는 것이다.`),ml=s(),Rt=r("p"),bl=f(`먼저 문제 공간의 추상적 표현인 도메인 모델을 만든다.
제한된 컨텍스트를 만들기 위해 이 단계에서 해야 할 일이 더 있지만,
DDD 프로세스의 초기 단계에서도 시스템이 어떻게 보일 지 생각할 수도 있다.`),hl=s(),Bt=r("li"),j=r("p"),Tl=f("Tactical Design"),Rl=r("br"),Bl=f(`
Tactical Design에서는 시스템이 어떻게 보일지에 대한 세부사항을 다룬다.
이 단계에서는 entity, aggregates, 그리고 value object에 대해 논하며,
이러한 패턴을 통해 소프트웨어 경계를 정의한다.`),se=s(),de=r("br"),ve=r("br"),pe=s(),k=r("h2"),H=r("a"),Pt=r("span"),Pl=f("Adoptation of DDD"),Ee=s(),_e=r("hr"),ue=s(),X=r("p"),yl=f(`DDD는 그 개념이 처음 등장했을 때부터, 지금까지도 매우 인기있는 개념이다.
Microsoft나 Amazon 같은 기업에서도 내부적으로 DDD를 사용하므로, DDD를 배우는 것은 가치있는 일이라고 할 수 있다.`),ce=s(),g=r("p"),Al=f(`물론 DDD를 어느 곳에사 사용할 수 있는 것은 아니다.
여러 대기업에서 사용하긴 하지만, 모든 사이드 프로젝트에 적합하지는 않다.
다음 장에서 이에 대해 자세히 살펴보자.`),me=s(),be=r("br"),he=r("br"),Te=s(),O=r("h2"),C=r("a"),yt=r("span"),Sl=f("언제 DDD를 사용해야 할까?"),Re=s(),Be=r("hr"),Pe=s(),tt=r("p"),xl=f(`DDD는 크고 복잡한 시스템에 더 적합하다.
절대다수의 소프트웨어 개발자들이 작성하는 소프트웨어는 기본적인 CRUD 애플리케이션이다.
이러한 애플리케이션에 DDD를 적용하는 것은 오히려 더 복잡하고 비효율적일 수 있다.`),ye=s(),et=r("p"),wl=f("Big Red Book에서는 다음과 같은 DDD 스코어 카드를 제시한다."),Ae=s(),L=r("table"),At=r("thead"),h=r("tr"),St=r("th"),kl=f("프로젝트 종류"),Hl=s(),xt=r("th"),Ol=f("포인트"),Cl=s(),wt=r("th"),Ll=f("고려할 사항"),Il=s(),p=r("tbody"),T=r("tr"),kt=r("td"),Nl=f("주로 DB에서 단순한 CRUD 작업만을 하는가?"),Ul=s(),Ht=r("td"),Gl=f("0"),Ml=s(),Ot=r("td"),$l=f("‘단순하다’는 평가를 내리는 게 쉽지 않긴 하지만, 입력과 출력 사이에 많은 비즈니스 로직이 있는 경우 이 범주에 맞지 않을 수 있다. 반면, 입력을 Validating하여 데이터베이스 레이어로 전달하는 것 뿐이라면 이 범주에 속한다."),ql=s(),R=r("tr"),Ct=r("td"),jl=f("애플리케이션이 30개 미만의 유저 스토리 및 비즈니스 플로우를 가지는가?"),zl=s(),Lt=r("td"),Wl=f("1"),Vl=s(),It=r("td"),Kl=f("만약 미래에도 이러한 유저 스토리가 추가되지 않고 자잘한 마이너 업데이트만 계획되어 있다면, DDD를 적용할 필요성이 높지 않은 셈이다."),Ql=s(),B=r("tr"),Nt=r("td"),Yl=f("애플리케이션이 40개 이상의 유저 스토리 및 비즈니스 플로우를 가지는가?"),Zl=s(),Ut=r("td"),Fl=f("2"),Jl=s(),Gt=r("td"),Xl=f("이 단계에서부터는 DDD를 도입하는 것을 적극적으로 고려해볼만 하다. 복잡한 시스템을 구축하고 있는 것 같다면, 미리 DDD를 도입하는 것이 좋을 수도 있다."),gl=s(),P=r("tr"),Mt=r("td"),tr=f("애플리케이션이 점차 복잡해질 가능성이 있는가?"),er=s(),$t=r("td"),lr=f("3"),rr=s(),qt=r("td"),ir=f("어떤 애플리케이션은 간단하게 시작하지만, 복잡도가 증가하기도 한다. 예를 들어 스타트업에서는 처음 몇 달 동안은 간단한 일만 할 수 있지만, 투자를 받고 나면 해결하려는 문제의 복잡성을 강화해야 한다"),ar=s(),y=r("tr"),jt=r("td"),Dr=f("애플리케이션이 오래동안 유지될 것이며, 변경 사항은 간단하지 않을 것으로 예상된다."),or=s(),zt=r("td"),fr=f("4"),nr=s(),Wt=r("td"),sr=f("정기적인 변경을 거치지 않는 프로그램은 거의 없다. DDD가 적합한지 판단하기 위해, 필요한 변경 사항의 복잡도를 이해하는 것은 중요한 일이다. 간단한 변경 사항보다는 크고 복잡한 변경 사항이 이 카테고리에 보다 적합하다고 볼 수 있다."),dr=s(),A=r("tr"),Vt=r("td"),vr=f("현재 도메인이 새롭기 때문에 잘 이해하지 못한 상태이며, 내가 아는 한 이러한 종류의 시스템을 구축해본 사람이 없다."),pr=s(),Kt=r("td"),Er=f("5"),_r=s(),Qt=r("td"),ur=f("모델링과 도메인 정의는 DDD의 빵과 버터와 같다"),Se=s(),lt=r("p"),cr=f(`만약 테이블에서 7 포인트 이상을 획득했다면, DDD를 적용하는 것이 좋다고 볼 수 있다.
반면 7 포인트 미만이라면, DDD의 일부 원칙이 도움이 될 수는 있지만 제대로 된 DDD를 적용하는 것은 비효율적일 수 있다.`),xe=s(),we=r("br"),ke=r("br"),He=s(),I=r("h2"),N=r("a"),Yt=r("span"),mr=f("References"),Oe=s(),Ce=r("hr"),Le=s(),_=r("center"),Zt=r("p"),br=f("["),hr=s(),Si(z.$$.fragment),Tr=f(`
](https://learning.oreilly.com/library/view/domain-driven-design-with/9781804613450/) `),Rr=r("br"),Br=f(`
[Matthew Boyle, Domain-Driven Design with Golang』, O'Reilly Media, Inc.](https://learning.oreilly.com/library/view/domain-driven-design-with/9781804613450/)`),this.h()},l(t){u=i(t,"H2",{id:!0});var D=a(u);S=i(D,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Hr=a(S);pt=i(Hr,"SPAN",{class:!0}),a(pt).forEach(l),Hr.forEach(l),ze=n(D,"Domain Driven Design의 탄생"),D.forEach(l),Ft=d(t),Jt=i(t,"HR",{}),Xt=d(t),V=i(t,"P",{});var Or=a(V);We=n(Or,`소프트웨어가 점점 복잡해지면서 공학자들과 아키텍트들은 시스템의 구조에 대해 여러 가지 고민을 하였고,
모델링하려는 문제 공간(도메인)을 시스템에 나타내는 방식으로 접근했다.
이 때 시스템이 도메인에 가까울 수록 변경하기가 쉽다는 장점이 있었고, 시스템과 실세계의 도메인 사이의 단절이 적기 때문에 다른 관계자가 모델을 이해하기 쉬웠다.`),Or.forEach(l),gt=d(t),K=i(t,"P",{});var Cr=a(K);Ve=n(Cr,`소프트웨어 엔지니어인 Eric Evans가 마주한 문제는 시스템의 복잡성 증가와 시스템 생성 및 유지 보수의 실패였다.
이로 인해 그는 Domain-Driven Design: Tacking Complexity in the Heart of Software , Addison-Wesley Professional 이라는 책을 저술하였다.`),Cr.forEach(l),te=d(t),Q=i(t,"P",{});var Lr=a(Q);Ke=n(Lr,"이 책은 복잡한 시스템을 구축하고 유지하는 데 도움이 되는 방법들을 제시하며, 도메인 주도 설계의 많은 부분이 객체지향 설계 패턴에서 유래했음을 언급하고 있다."),Lr.forEach(l),ee=d(t),c=i(t,"BLOCKQUOTE",{});var rt=a(c);Et=i(rt,"P",{});var Ir=a(Et);_t=i(Ir,"STRONG",{});var Nr=a(_t);Qe=n(Nr,"객체지향 패턴이란?"),Nr.forEach(l),Ir.forEach(l),Ye=d(rt),U=i(rt,"P",{});var Ne=a(U);Ze=n(Ne,"1995년도에 저술된 "),ut=i(Ne,"EM",{});var Ur=a(ut);Fe=n(Ur,"Design Patterns, Elements of Reusable Object-Oriented Software"),Ur.forEach(l),Je=n(Ne,`라는 책은 현재까지도 컴퓨터공학 분야에서 가장 유명한 책 중 하나이다.
이 책에서는 뛰어난 확장성과 유지보수성을 가진 객체지향 소프트웨어를 설계하기 위한 23개의 패턴을 소개하고 있다.
그리고, DDD에서도 이러한 패턴 중 일부에서 아주 중요한 영감을 얻었다고 한다.`),Ne.forEach(l),Xe=d(rt),b=i(rt,"UL",{});var it=a(b);Y=i(it,"LI",{});var Pr=a(Y);ct=i(Pr,"STRONG",{});var Gr=a(ct);ge=n(Gr,"Creational Patterns"),Gr.forEach(l),tl=n(Pr," : 오브젝트를 직접 생성하지 않고, 생성하는 방법을 제공하는 패턴으로, 오브젝트 생성의 유연성을 높이고 코드의 유지보수를 쉽게 한다."),Pr.forEach(l),el=d(it),Z=i(it,"LI",{});var yr=a(Z);mt=i(yr,"STRONG",{});var Mr=a(mt);ll=n(Mr,"Structural Patterns"),Mr.forEach(l),rl=n(yr," : 특정 기능을 수행하기 위해 클래스와 객체를 조합하는 패턴으로, 클래스와 객체의 구성을 통해 더 큰 구조를 만들 수 있다."),yr.forEach(l),il=d(it),F=i(it,"LI",{});var Ar=a(F);bt=i(Ar,"STRONG",{});var $r=a(bt);al=n($r,"Behavioral Patterns"),$r.forEach(l),Dl=n(Ar," : 오브젝트 사이의 통신에 관한 패턴이다."),Ar.forEach(l),it.forEach(l),rt.forEach(l),le=d(t),J=i(t,"P",{});var qr=a(J);ol=n(qr,`Big Blue Book이라고도 불리는 Evans의 책은, 세련되고 명확한 시스템을 설계하기 위한 공통 언어와 원칙을 제시한다.
또한, 복잡한 소프트웨어를 개선할 때 사용할 수 있는 세 가지 기둥을 제시한다.`),qr.forEach(l),re=d(t),ie=i(t,"BR",{}),ae=i(t,"BR",{}),De=d(t),x=i(t,"H2",{id:!0});var Sr=a(x);w=i(Sr,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var jr=a(w);ht=i(jr,"SPAN",{class:!0}),a(ht).forEach(l),jr.forEach(l),fl=n(Sr,"DDD의 세 가지 기둥"),Sr.forEach(l),oe=d(t),fe=i(t,"HR",{}),ne=d(t),m=i(t,"UL",{});var at=a(m);G=i(at,"LI",{});var Ue=a(G);M=i(Ue,"P",{});var Ge=a(M);nl=n(Ge,"Ubiquitous Language"),sl=i(Ge,"BR",{}),dl=n(Ge,`
도메인에대해 이야기할 때 사용하는 공통 언어이다.
이 언어는 도메인 전문가와 개발자 모두가 사용할 수 있어야 하며, 소통 과정에서의 불확실성을 줄여 준다.`),Ge.forEach(l),vl=d(Ue),Tt=i(Ue,"P",{});var zr=a(Tt);pl=n(zr,`실제 언어와 마찬가지로, 유비쿼터스 언어는 도메인에 대한 팀의 이해가 높아질수록 발전해야 한다.
비즈니스 언어가 아니기 때문에 도메인 전문가에 의해 강요되어서는 안 된다.`),zr.forEach(l),Ue.forEach(l),El=d(at),$=i(at,"LI",{});var Me=a($);q=i(Me,"P",{});var $e=a(q);_l=n($e,"Strategic Design"),ul=i($e,"BR",{}),cl=n($e,`
비즈니스 도메인을 매핑하고 제한된 컨텍스트를 정의하는 DDD 프로세스의 한 단계이다.
Strategic Design의 목표는 비즈니스 결과에 초점을 맞춰 시스템을 설계하는 것이다.`),$e.forEach(l),ml=d(Me),Rt=i(Me,"P",{});var Wr=a(Rt);bl=n(Wr,`먼저 문제 공간의 추상적 표현인 도메인 모델을 만든다.
제한된 컨텍스트를 만들기 위해 이 단계에서 해야 할 일이 더 있지만,
DDD 프로세스의 초기 단계에서도 시스템이 어떻게 보일 지 생각할 수도 있다.`),Wr.forEach(l),Me.forEach(l),hl=d(at),Bt=i(at,"LI",{});var Vr=a(Bt);j=i(Vr,"P",{});var qe=a(j);Tl=n(qe,"Tactical Design"),Rl=i(qe,"BR",{}),Bl=n(qe,`
Tactical Design에서는 시스템이 어떻게 보일지에 대한 세부사항을 다룬다.
이 단계에서는 entity, aggregates, 그리고 value object에 대해 논하며,
이러한 패턴을 통해 소프트웨어 경계를 정의한다.`),qe.forEach(l),Vr.forEach(l),at.forEach(l),se=d(t),de=i(t,"BR",{}),ve=i(t,"BR",{}),pe=d(t),k=i(t,"H2",{id:!0});var xr=a(k);H=i(xr,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Kr=a(H);Pt=i(Kr,"SPAN",{class:!0}),a(Pt).forEach(l),Kr.forEach(l),Pl=n(xr,"Adoptation of DDD"),xr.forEach(l),Ee=d(t),_e=i(t,"HR",{}),ue=d(t),X=i(t,"P",{});var Qr=a(X);yl=n(Qr,`DDD는 그 개념이 처음 등장했을 때부터, 지금까지도 매우 인기있는 개념이다.
Microsoft나 Amazon 같은 기업에서도 내부적으로 DDD를 사용하므로, DDD를 배우는 것은 가치있는 일이라고 할 수 있다.`),Qr.forEach(l),ce=d(t),g=i(t,"P",{});var Yr=a(g);Al=n(Yr,`물론 DDD를 어느 곳에사 사용할 수 있는 것은 아니다.
여러 대기업에서 사용하긴 하지만, 모든 사이드 프로젝트에 적합하지는 않다.
다음 장에서 이에 대해 자세히 살펴보자.`),Yr.forEach(l),me=d(t),be=i(t,"BR",{}),he=i(t,"BR",{}),Te=d(t),O=i(t,"H2",{id:!0});var wr=a(O);C=i(wr,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Zr=a(C);yt=i(Zr,"SPAN",{class:!0}),a(yt).forEach(l),Zr.forEach(l),Sl=n(wr,"언제 DDD를 사용해야 할까?"),wr.forEach(l),Re=d(t),Be=i(t,"HR",{}),Pe=d(t),tt=i(t,"P",{});var Fr=a(tt);xl=n(Fr,`DDD는 크고 복잡한 시스템에 더 적합하다.
절대다수의 소프트웨어 개발자들이 작성하는 소프트웨어는 기본적인 CRUD 애플리케이션이다.
이러한 애플리케이션에 DDD를 적용하는 것은 오히려 더 복잡하고 비효율적일 수 있다.`),Fr.forEach(l),ye=d(t),et=i(t,"P",{});var Jr=a(et);wl=n(Jr,"Big Red Book에서는 다음과 같은 DDD 스코어 카드를 제시한다."),Jr.forEach(l),Ae=d(t),L=i(t,"TABLE",{});var je=a(L);At=i(je,"THEAD",{});var Xr=a(At);h=i(Xr,"TR",{});var Dt=a(h);St=i(Dt,"TH",{});var gr=a(St);kl=n(gr,"프로젝트 종류"),gr.forEach(l),Hl=d(Dt),xt=i(Dt,"TH",{});var ti=a(xt);Ol=n(ti,"포인트"),ti.forEach(l),Cl=d(Dt),wt=i(Dt,"TH",{});var ei=a(wt);Ll=n(ei,"고려할 사항"),ei.forEach(l),Dt.forEach(l),Xr.forEach(l),Il=d(je),p=i(je,"TBODY",{});var E=a(p);T=i(E,"TR",{});var ot=a(T);kt=i(ot,"TD",{});var li=a(kt);Nl=n(li,"주로 DB에서 단순한 CRUD 작업만을 하는가?"),li.forEach(l),Ul=d(ot),Ht=i(ot,"TD",{});var ri=a(Ht);Gl=n(ri,"0"),ri.forEach(l),Ml=d(ot),Ot=i(ot,"TD",{});var ii=a(Ot);$l=n(ii,"‘단순하다’는 평가를 내리는 게 쉽지 않긴 하지만, 입력과 출력 사이에 많은 비즈니스 로직이 있는 경우 이 범주에 맞지 않을 수 있다. 반면, 입력을 Validating하여 데이터베이스 레이어로 전달하는 것 뿐이라면 이 범주에 속한다."),ii.forEach(l),ot.forEach(l),ql=d(E),R=i(E,"TR",{});var ft=a(R);Ct=i(ft,"TD",{});var ai=a(Ct);jl=n(ai,"애플리케이션이 30개 미만의 유저 스토리 및 비즈니스 플로우를 가지는가?"),ai.forEach(l),zl=d(ft),Lt=i(ft,"TD",{});var Di=a(Lt);Wl=n(Di,"1"),Di.forEach(l),Vl=d(ft),It=i(ft,"TD",{});var oi=a(It);Kl=n(oi,"만약 미래에도 이러한 유저 스토리가 추가되지 않고 자잘한 마이너 업데이트만 계획되어 있다면, DDD를 적용할 필요성이 높지 않은 셈이다."),oi.forEach(l),ft.forEach(l),Ql=d(E),B=i(E,"TR",{});var nt=a(B);Nt=i(nt,"TD",{});var fi=a(Nt);Yl=n(fi,"애플리케이션이 40개 이상의 유저 스토리 및 비즈니스 플로우를 가지는가?"),fi.forEach(l),Zl=d(nt),Ut=i(nt,"TD",{});var ni=a(Ut);Fl=n(ni,"2"),ni.forEach(l),Jl=d(nt),Gt=i(nt,"TD",{});var si=a(Gt);Xl=n(si,"이 단계에서부터는 DDD를 도입하는 것을 적극적으로 고려해볼만 하다. 복잡한 시스템을 구축하고 있는 것 같다면, 미리 DDD를 도입하는 것이 좋을 수도 있다."),si.forEach(l),nt.forEach(l),gl=d(E),P=i(E,"TR",{});var st=a(P);Mt=i(st,"TD",{});var di=a(Mt);tr=n(di,"애플리케이션이 점차 복잡해질 가능성이 있는가?"),di.forEach(l),er=d(st),$t=i(st,"TD",{});var vi=a($t);lr=n(vi,"3"),vi.forEach(l),rr=d(st),qt=i(st,"TD",{});var pi=a(qt);ir=n(pi,"어떤 애플리케이션은 간단하게 시작하지만, 복잡도가 증가하기도 한다. 예를 들어 스타트업에서는 처음 몇 달 동안은 간단한 일만 할 수 있지만, 투자를 받고 나면 해결하려는 문제의 복잡성을 강화해야 한다"),pi.forEach(l),st.forEach(l),ar=d(E),y=i(E,"TR",{});var dt=a(y);jt=i(dt,"TD",{});var Ei=a(jt);Dr=n(Ei,"애플리케이션이 오래동안 유지될 것이며, 변경 사항은 간단하지 않을 것으로 예상된다."),Ei.forEach(l),or=d(dt),zt=i(dt,"TD",{});var _i=a(zt);fr=n(_i,"4"),_i.forEach(l),nr=d(dt),Wt=i(dt,"TD",{});var ui=a(Wt);sr=n(ui,"정기적인 변경을 거치지 않는 프로그램은 거의 없다. DDD가 적합한지 판단하기 위해, 필요한 변경 사항의 복잡도를 이해하는 것은 중요한 일이다. 간단한 변경 사항보다는 크고 복잡한 변경 사항이 이 카테고리에 보다 적합하다고 볼 수 있다."),ui.forEach(l),dt.forEach(l),dr=d(E),A=i(E,"TR",{});var vt=a(A);Vt=i(vt,"TD",{});var ci=a(Vt);vr=n(ci,"현재 도메인이 새롭기 때문에 잘 이해하지 못한 상태이며, 내가 아는 한 이러한 종류의 시스템을 구축해본 사람이 없다."),ci.forEach(l),pr=d(vt),Kt=i(vt,"TD",{});var mi=a(Kt);Er=n(mi,"5"),mi.forEach(l),_r=d(vt),Qt=i(vt,"TD",{});var bi=a(Qt);ur=n(bi,"모델링과 도메인 정의는 DDD의 빵과 버터와 같다"),bi.forEach(l),vt.forEach(l),E.forEach(l),je.forEach(l),Se=d(t),lt=i(t,"P",{});var hi=a(lt);cr=n(hi,`만약 테이블에서 7 포인트 이상을 획득했다면, DDD를 적용하는 것이 좋다고 볼 수 있다.
반면 7 포인트 미만이라면, DDD의 일부 원칙이 도움이 될 수는 있지만 제대로 된 DDD를 적용하는 것은 비효율적일 수 있다.`),hi.forEach(l),xe=d(t),we=i(t,"BR",{}),ke=i(t,"BR",{}),He=d(t),I=i(t,"H2",{id:!0});var kr=a(I);N=i(kr,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Ti=a(N);Yt=i(Ti,"SPAN",{class:!0}),a(Yt).forEach(l),Ti.forEach(l),mr=n(kr,"References"),kr.forEach(l),Oe=d(t),Ce=i(t,"HR",{}),Le=d(t),_=i(t,"CENTER",{});var W=a(_);Zt=i(W,"P",{});var Ri=a(Zt);br=n(Ri,"["),Ri.forEach(l),hr=d(W),xi(z.$$.fragment,W),Tr=n(W,`
](https://learning.oreilly.com/library/view/domain-driven-design-with/9781804613450/) `),Rr=i(W,"BR",{}),Br=n(W,`
[Matthew Boyle, Domain-Driven Design with Golang』, O'Reilly Media, Inc.](https://learning.oreilly.com/library/view/domain-driven-design-with/9781804613450/)`),W.forEach(l),this.h()},h(){v(pt,"class","icon icon-link"),v(S,"aria-hidden","true"),v(S,"tabindex","-1"),v(S,"href","#domain-driven-design의-탄생"),v(u,"id","domain-driven-design의-탄생"),v(ht,"class","icon icon-link"),v(w,"aria-hidden","true"),v(w,"tabindex","-1"),v(w,"href","#ddd의-세-가지-기둥"),v(x,"id","ddd의-세-가지-기둥"),v(Pt,"class","icon icon-link"),v(H,"aria-hidden","true"),v(H,"tabindex","-1"),v(H,"href","#adoptation-of-ddd"),v(k,"id","adoptation-of-ddd"),v(yt,"class","icon icon-link"),v(C,"aria-hidden","true"),v(C,"tabindex","-1"),v(C,"href","#언제-ddd를-사용해야-할까"),v(O,"id","언제-ddd를-사용해야-할까"),v(Yt,"class","icon icon-link"),v(N,"aria-hidden","true"),v(N,"tabindex","-1"),v(N,"href","#references"),v(I,"id","references")},m(t,D){o(t,u,D),e(u,S),e(S,pt),e(u,ze),o(t,Ft,D),o(t,Jt,D),o(t,Xt,D),o(t,V,D),e(V,We),o(t,gt,D),o(t,K,D),e(K,Ve),o(t,te,D),o(t,Q,D),e(Q,Ke),o(t,ee,D),o(t,c,D),e(c,Et),e(Et,_t),e(_t,Qe),e(c,Ye),e(c,U),e(U,Ze),e(U,ut),e(ut,Fe),e(U,Je),e(c,Xe),e(c,b),e(b,Y),e(Y,ct),e(ct,ge),e(Y,tl),e(b,el),e(b,Z),e(Z,mt),e(mt,ll),e(Z,rl),e(b,il),e(b,F),e(F,bt),e(bt,al),e(F,Dl),o(t,le,D),o(t,J,D),e(J,ol),o(t,re,D),o(t,ie,D),o(t,ae,D),o(t,De,D),o(t,x,D),e(x,w),e(w,ht),e(x,fl),o(t,oe,D),o(t,fe,D),o(t,ne,D),o(t,m,D),e(m,G),e(G,M),e(M,nl),e(M,sl),e(M,dl),e(G,vl),e(G,Tt),e(Tt,pl),e(m,El),e(m,$),e($,q),e(q,_l),e(q,ul),e(q,cl),e($,ml),e($,Rt),e(Rt,bl),e(m,hl),e(m,Bt),e(Bt,j),e(j,Tl),e(j,Rl),e(j,Bl),o(t,se,D),o(t,de,D),o(t,ve,D),o(t,pe,D),o(t,k,D),e(k,H),e(H,Pt),e(k,Pl),o(t,Ee,D),o(t,_e,D),o(t,ue,D),o(t,X,D),e(X,yl),o(t,ce,D),o(t,g,D),e(g,Al),o(t,me,D),o(t,be,D),o(t,he,D),o(t,Te,D),o(t,O,D),e(O,C),e(C,yt),e(O,Sl),o(t,Re,D),o(t,Be,D),o(t,Pe,D),o(t,tt,D),e(tt,xl),o(t,ye,D),o(t,et,D),e(et,wl),o(t,Ae,D),o(t,L,D),e(L,At),e(At,h),e(h,St),e(St,kl),e(h,Hl),e(h,xt),e(xt,Ol),e(h,Cl),e(h,wt),e(wt,Ll),e(L,Il),e(L,p),e(p,T),e(T,kt),e(kt,Nl),e(T,Ul),e(T,Ht),e(Ht,Gl),e(T,Ml),e(T,Ot),e(Ot,$l),e(p,ql),e(p,R),e(R,Ct),e(Ct,jl),e(R,zl),e(R,Lt),e(Lt,Wl),e(R,Vl),e(R,It),e(It,Kl),e(p,Ql),e(p,B),e(B,Nt),e(Nt,Yl),e(B,Zl),e(B,Ut),e(Ut,Fl),e(B,Jl),e(B,Gt),e(Gt,Xl),e(p,gl),e(p,P),e(P,Mt),e(Mt,tr),e(P,er),e(P,$t),e($t,lr),e(P,rr),e(P,qt),e(qt,ir),e(p,ar),e(p,y),e(y,jt),e(jt,Dr),e(y,or),e(y,zt),e(zt,fr),e(y,nr),e(y,Wt),e(Wt,sr),e(p,dr),e(p,A),e(A,Vt),e(Vt,vr),e(A,pr),e(A,Kt),e(Kt,Er),e(A,_r),e(A,Qt),e(Qt,ur),o(t,Se,D),o(t,lt,D),e(lt,cr),o(t,xe,D),o(t,we,D),o(t,ke,D),o(t,He,D),o(t,I,D),e(I,N),e(N,Yt),e(I,mr),o(t,Oe,D),o(t,Ce,D),o(t,Le,D),o(t,_,D),e(_,Zt),e(Zt,br),e(_,hr),wi(z,_,null),e(_,Tr),e(_,Rr),e(_,Br),Ie=!0},p:ki,i(t){Ie||(Hi(z.$$.fragment,t),Ie=!0)},o(t){Oi(z.$$.fragment,t),Ie=!1},d(t){t&&l(u),t&&l(Ft),t&&l(Jt),t&&l(Xt),t&&l(V),t&&l(gt),t&&l(K),t&&l(te),t&&l(Q),t&&l(ee),t&&l(c),t&&l(le),t&&l(J),t&&l(re),t&&l(ie),t&&l(ae),t&&l(De),t&&l(x),t&&l(oe),t&&l(fe),t&&l(ne),t&&l(m),t&&l(se),t&&l(de),t&&l(ve),t&&l(pe),t&&l(k),t&&l(Ee),t&&l(_e),t&&l(ue),t&&l(X),t&&l(ce),t&&l(g),t&&l(me),t&&l(be),t&&l(he),t&&l(Te),t&&l(O),t&&l(Re),t&&l(Be),t&&l(Pe),t&&l(tt),t&&l(ye),t&&l(et),t&&l(Ae),t&&l(L),t&&l(Se),t&&l(lt),t&&l(xe),t&&l(we),t&&l(ke),t&&l(He),t&&l(I),t&&l(Oe),t&&l(Ce),t&&l(Le),t&&l(_),Ci(z)}}}const Gi={title:"Domain Driven Design의 역사",date:"2023-07-04T00:00:00.000Z",excerpt:"History of Domain Driven Design",categories:["Golang","Backend","Architecture","Domain Driven Design"],coverImage:"/post_img/Backend/Architecture/DDD/cover.png",coverWidth:16,coverHeight:9,indexed:!1,exposed:!0};class Mi extends Pi{constructor(u){super(),yi(this,u,null,Ii,Ai,{})}}export{Mi as default,Gi as metadata};
