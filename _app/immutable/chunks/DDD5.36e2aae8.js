import{S as Y3,i as g3,s as sv,k as p,q as c,a as r,y as F,l as e,m as u,r as l,h as n,c as i,z as j,n as k,U as nv,b as o,E as a,A as K,g as q,d as V,B as X,M as z}from"./index.5621e629.js";import{C as W}from"./CodeBlockWrapper.c301ace2.js";function av(m){let f,v=`<code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>p <span class="token operator">*</span>Purchase<span class="token punctuation">)</span> <span class="token function">validateAndEnrich</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>ProductsToPurchase<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"puchase must have at least one product"</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>

    p<span class="token punctuation">.</span>total <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> p<span class="token punctuation">.</span>ProductsToPurchase <span class="token punctuation">&#123;</span>
    	p<span class="token punctuation">.</span>total <span class="token operator">+=</span> v<span class="token punctuation">.</span>BasePrice
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">if</span> p<span class="token punctuation">.</span>total <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>
    	<span class="token keyword">return</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"total price must be greater than 0"</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>

    p<span class="token punctuation">.</span>id <span class="token operator">=</span> uuid<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    p<span class="token punctuation">.</span>timeOfPurchase <span class="token operator">=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token boolean">nil</span>

<span class="token punctuation">&#125;</span></code>`;return{c(){f=p("pre"),this.h()},l(d){f=e(d,"PRE",{class:!0});var E=u(f);E.forEach(n),this.h()},h(){k(f,"class","language-go")},m(d,E){o(d,f,E),f.innerHTML=v},p:z,d(d){d&&n(f)}}}function tv(m){let f,v=`<code class="language-go"><span class="token keyword">type</span> CardChargeService <span class="token keyword">interface</span> <span class="token punctuation">&#123;</span>
	<span class="token function">ChargeCard</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> amount coffeeco<span class="token punctuation">.</span>Money<span class="token punctuation">,</span> cardToken <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">type</span> Service <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
	cardService  CardChargeService
	purchaseRepo Repository
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>s Service<span class="token punctuation">)</span> <span class="token function">CompletePurchase</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> purchase <span class="token operator">*</span>Purchase<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">&#123;</span>
	err <span class="token operator">:=</span> purchase<span class="token punctuation">.</span><span class="token function">validateAndEnrich</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> err
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">switch</span> purchase<span class="token punctuation">.</span>PaymentMeans <span class="token punctuation">&#123;</span>
	<span class="token keyword">case</span> payment<span class="token punctuation">.</span>MEANS_CARD<span class="token punctuation">:</span>
		err <span class="token operator">:=</span> s<span class="token punctuation">.</span>cardService<span class="token punctuation">.</span><span class="token function">ChargeCard</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> purchase<span class="token punctuation">.</span>total<span class="token punctuation">,</span> <span class="token operator">*</span>purchase<span class="token punctuation">.</span>cardToken<span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">return</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"card charge is failed"</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#125;</span>

	<span class="token keyword">case</span> payment<span class="token punctuation">.</span>MEANS_CASH<span class="token punctuation">:</span>
		<span class="token comment">// do nothing</span>

	<span class="token keyword">default</span><span class="token punctuation">:</span>
		<span class="token keyword">return</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"unknown payment means"</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>

	err <span class="token operator">=</span> s<span class="token punctuation">.</span>purchaseRepo<span class="token punctuation">.</span><span class="token function">Store</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token operator">*</span>purchase<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"failed to store purchase"</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">&#125;</span></code>`;return{c(){f=p("pre"),this.h()},l(d){f=e(d,"PRE",{class:!0});var E=u(f);E.forEach(n),this.h()},h(){k(f,"class","language-go")},m(d,E){o(d,f,E),f.innerHTML=v},p:z,d(d){d&&n(f)}}}function pv(m){let f,v=`<code class="language-go"><span class="token keyword">type</span> MongoRepository <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
	purchases <span class="token operator">*</span>mongo<span class="token punctuation">.</span>Collection
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">NewMongoRepo</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> connectionString <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>MongoRepository<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	client<span class="token punctuation">,</span> err <span class="token operator">:=</span> mongo<span class="token punctuation">.</span><span class="token function">Connect</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> options<span class="token punctuation">.</span><span class="token function">Client</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ApplyURI</span><span class="token punctuation">(</span>connectionString<span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"failed to create a mongo client: %w"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>

	purchases <span class="token operator">:=</span> client<span class="token punctuation">.</span><span class="token function">Database</span><span class="token punctuation">(</span><span class="token string">"coffeeco"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Collection</span><span class="token punctuation">(</span><span class="token string">"purchases"</span><span class="token punctuation">)</span>

	<span class="token keyword">return</span> <span class="token operator">&amp;</span>MongoRepository<span class="token punctuation">&#123;</span>
		purchases<span class="token punctuation">:</span> purchases<span class="token punctuation">,</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>
<span class="token punctuation">&#125;</span></code>`;return{c(){f=p("pre"),this.h()},l(d){f=e(d,"PRE",{class:!0});var E=u(f);E.forEach(n),this.h()},h(){k(f,"class","language-go")},m(d,E){o(d,f,E),f.innerHTML=v},p:z,d(d){d&&n(f)}}}function ev(m){let f,v=`<code class="language-go"><span class="token keyword">type</span> mongoPurchase <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
	id                 uuid<span class="token punctuation">.</span>UUID          <span class="token string">&#96;bson:"ID"&#96;</span>
	store              store<span class="token punctuation">.</span>Store        <span class="token string">&#96;bson:"Store"&#96;</span>
	productsToPurchase <span class="token punctuation">[</span><span class="token punctuation">]</span>coffeeco<span class="token punctuation">.</span>Product <span class="token string">&#96;bson:"product_purchased"&#96;</span>
	total              <span class="token builtin">int64</span>              <span class="token string">&#96;bson:"purchase_total"&#96;</span>
	paymentMeans       payment<span class="token punctuation">.</span>Means      <span class="token string">&#96;bson:"payment_means"&#96;</span>
	timeOfPurchase     time<span class="token punctuation">.</span>Time          <span class="token string">&#96;bson:"created_at"&#96;</span>
	cardToken          <span class="token operator">*</span><span class="token builtin">string</span>            <span class="token string">&#96;bson:"card_token"&#96;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">toMongoPurchase</span><span class="token punctuation">(</span>p Purchase<span class="token punctuation">)</span> mongoPurchase <span class="token punctuation">&#123;</span>
	<span class="token keyword">return</span> mongoPurchase<span class="token punctuation">&#123;</span>
		id<span class="token punctuation">:</span>                 p<span class="token punctuation">.</span>id<span class="token punctuation">,</span>
		store<span class="token punctuation">:</span>              p<span class="token punctuation">.</span>Store<span class="token punctuation">,</span>
		productsToPurchase<span class="token punctuation">:</span> p<span class="token punctuation">.</span>ProductsToPurchase<span class="token punctuation">,</span>
		total<span class="token punctuation">:</span>              <span class="token function">int64</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>total<span class="token punctuation">)</span><span class="token punctuation">,</span>
		paymentMeans<span class="token punctuation">:</span>       p<span class="token punctuation">.</span>PaymentMeans<span class="token punctuation">,</span>
		timeOfPurchase<span class="token punctuation">:</span>     p<span class="token punctuation">.</span>timeOfPurchase<span class="token punctuation">,</span>
		cardToken<span class="token punctuation">:</span>          p<span class="token punctuation">.</span>cardToken<span class="token punctuation">,</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`;return{c(){f=p("pre"),this.h()},l(d){f=e(d,"PRE",{class:!0});var E=u(f);E.forEach(n),this.h()},h(){k(f,"class","language-go")},m(d,E){o(d,f,E),f.innerHTML=v},p:z,d(d){d&&n(f)}}}function ov(m){let f,v=`<code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>s StripeService<span class="token punctuation">)</span> <span class="token function">ChargeCard</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> amount coffeeco<span class="token punctuation">.</span>Money<span class="token punctuation">,</span> cardToken <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">&#123;</span>
	params <span class="token operator">:=</span> <span class="token operator">&amp;</span>stripe<span class="token punctuation">.</span>ChargeParams<span class="token punctuation">&#123;</span>
		Amount<span class="token punctuation">:</span>   stripe<span class="token punctuation">.</span><span class="token function">Int64</span><span class="token punctuation">(</span><span class="token function">int64</span><span class="token punctuation">(</span>amount<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
		Currency<span class="token punctuation">:</span> stripe<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token function">string</span><span class="token punctuation">(</span>stripe<span class="token punctuation">.</span>CurrencyKRW<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
		Source<span class="token punctuation">:</span>   <span class="token operator">&amp;</span>stripe<span class="token punctuation">.</span>PaymentSourceSourceParams<span class="token punctuation">&#123;</span>Token<span class="token punctuation">:</span> stripe<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span>cardToken<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
	<span class="token punctuation">&#125;</span>

	<span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> charge<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"failed to create a charge: %w"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">&#125;</span></code>`;return{c(){f=p("pre"),this.h()},l(d){f=e(d,"PRE",{class:!0});var E=u(f);E.forEach(n),this.h()},h(){k(f,"class","language-go")},m(d,E){o(d,f,E),f.innerHTML=v},p:z,d(d){d&&n(f)}}}function cv(m){let f,v=`<code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>s Service<span class="token punctuation">)</span> <span class="token function">CompletePurchase</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> purchase <span class="token operator">*</span>Purchase<span class="token punctuation">,</span> coffeeBuxCard <span class="token operator">*</span>membership<span class="token punctuation">.</span>CoffeeBux<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">&#123;</span>
	err <span class="token operator">:=</span> purchase<span class="token punctuation">.</span><span class="token function">validateAndEnrich</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> err
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">switch</span> purchase<span class="token punctuation">.</span>PaymentMeans <span class="token punctuation">&#123;</span>
	<span class="token keyword">case</span> payment<span class="token punctuation">.</span>MEANS_CARD<span class="token punctuation">:</span>
		err <span class="token operator">:=</span> s<span class="token punctuation">.</span>cardService<span class="token punctuation">.</span><span class="token function">ChargeCard</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> purchase<span class="token punctuation">.</span>total<span class="token punctuation">,</span> <span class="token operator">*</span>purchase<span class="token punctuation">.</span>cardToken<span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">return</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"card charge is failed"</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#125;</span>

	<span class="token keyword">case</span> payment<span class="token punctuation">.</span>MEANS_CASH<span class="token punctuation">:</span>
		<span class="token comment">// do nothing</span>

	<span class="token keyword">default</span><span class="token punctuation">:</span>
		<span class="token keyword">return</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"unknown payment means"</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>

	err <span class="token operator">=</span> s<span class="token punctuation">.</span>purchaseRepo<span class="token punctuation">.</span><span class="token function">Store</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token operator">*</span>purchase<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"failed to store purchase"</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">if</span> coffeeBuxCard <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		coffeeBuxCard<span class="token punctuation">.</span><span class="token function">AddStamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">&#125;</span></code>`;return{c(){f=p("pre"),this.h()},l(d){f=e(d,"PRE",{class:!0});var E=u(f);E.forEach(n),this.h()},h(){k(f,"class","language-go")},m(d,E){o(d,f,E),f.innerHTML=v},p:z,d(d){d&&n(f)}}}function lv(m){let f,v=`<code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>CoffeeBux<span class="token punctuation">)</span> <span class="token function">Pay</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> purchases <span class="token punctuation">[</span><span class="token punctuation">]</span>purchase<span class="token punctuation">.</span>Purchase<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">&#123;</span>
	lp <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>purchases<span class="token punctuation">)</span>
	<span class="token keyword">if</span> lp <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"nothing to buy"</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">if</span> c<span class="token punctuation">.</span>FreeDrinksAvailable <span class="token operator">&lt;</span> lp <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"not enough free drinks available, %d requestsed, %d available"</span><span class="token punctuation">,</span> lp<span class="token punctuation">,</span> c<span class="token punctuation">.</span>FreeDrinksAvailable<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>

	c<span class="token punctuation">.</span>FreeDrinksAvailable <span class="token operator">-=</span> lp
	<span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">&#125;</span></code>`;return{c(){f=p("pre"),this.h()},l(d){f=e(d,"PRE",{class:!0});var E=u(f);E.forEach(n),this.h()},h(){k(f,"class","language-go")},m(d,E){o(d,f,E),f.innerHTML=v},p:z,d(d){d&&n(f)}}}function uv(m){let f,v=`<code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>s Service<span class="token punctuation">)</span> <span class="token function">CompletePurchase</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> purchase <span class="token operator">*</span>Purchase<span class="token punctuation">,</span> coffeeBuxCard <span class="token operator">*</span>membership<span class="token punctuation">.</span>CoffeeBux<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">&#123;</span>
	err <span class="token operator">:=</span> purchase<span class="token punctuation">.</span><span class="token function">validateAndEnrich</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> err
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">switch</span> purchase<span class="token punctuation">.</span>PaymentMeans <span class="token punctuation">&#123;</span>
	<span class="token keyword">case</span> payment<span class="token punctuation">.</span>MEANS_CARD<span class="token punctuation">:</span>
		err <span class="token operator">:=</span> s<span class="token punctuation">.</span>cardService<span class="token punctuation">.</span><span class="token function">ChargeCard</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> purchase<span class="token punctuation">.</span>total<span class="token punctuation">,</span> <span class="token operator">*</span>purchase<span class="token punctuation">.</span>cardToken<span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">return</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"card charge is failed"</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#125;</span>

	<span class="token keyword">case</span> payment<span class="token punctuation">.</span>MEANS_CASH<span class="token punctuation">:</span>
	<span class="token comment">// do nothing</span>

	<span class="token keyword">case</span> payment<span class="token punctuation">.</span>MEANS_COFFEEBUX<span class="token punctuation">:</span>
		err <span class="token operator">:=</span> coffeeBuxCard<span class="token punctuation">.</span><span class="token function">Pay</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> purchase<span class="token punctuation">.</span>ProductsToPurchase<span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"failed to charge membership card: %w"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
		<span class="token punctuation">&#125;</span>

	<span class="token keyword">default</span><span class="token punctuation">:</span>
		<span class="token keyword">return</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"unknown payment means"</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>

	err <span class="token operator">=</span> s<span class="token punctuation">.</span>purchaseRepo<span class="token punctuation">.</span><span class="token function">Store</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token operator">*</span>purchase<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"failed to store purchase"</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">if</span> coffeeBuxCard <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		coffeeBuxCard<span class="token punctuation">.</span><span class="token function">AddStamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">&#125;</span></code>`;return{c(){f=p("pre"),this.h()},l(d){f=e(d,"PRE",{class:!0});var E=u(f);E.forEach(n),this.h()},h(){k(f,"class","language-go")},m(d,E){o(d,f,E),f.innerHTML=v},p:z,d(d){d&&n(f)}}}function rv(m){let f,v=`<code class="language-go"><span class="token keyword">package</span> store

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">"context"</span>
	<span class="token string">"errors"</span>
	<span class="token string">"fmt"</span>
	<span class="token string">"github.com/google/uuid"</span>
	<span class="token string">"go.mongodb.org/mongo-driver/bson"</span>
	<span class="token string">"go.mongodb.org/mongo-driver/mongo"</span>
	<span class="token string">"go.mongodb.org/mongo-driver/mongo/options"</span>
<span class="token punctuation">)</span>

<span class="token keyword">var</span> ErrNoDiscount <span class="token operator">=</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"no discount for store"</span><span class="token punctuation">)</span>

<span class="token keyword">type</span> Repository <span class="token keyword">interface</span> <span class="token punctuation">&#123;</span>
	<span class="token function">GetStoreDiscount</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> storeId uuid<span class="token punctuation">.</span>UUID<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">type</span> MongoRepository <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
	storeDiscounts <span class="token operator">*</span>mongo<span class="token punctuation">.</span>Collection
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">NewMongoRepo</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> connectionString <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>MongoRepository<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	client<span class="token punctuation">,</span> err <span class="token operator">:=</span> mongo<span class="token punctuation">.</span><span class="token function">Connect</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> options<span class="token punctuation">.</span><span class="token function">Client</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ApplyURI</span><span class="token punctuation">(</span>connectionString<span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"failed to create a mongo client: %w"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>

	discounts <span class="token operator">:=</span> client<span class="token punctuation">.</span><span class="token function">Database</span><span class="token punctuation">(</span><span class="token string">"coffeeco"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Collection</span><span class="token punctuation">(</span><span class="token string">"store_discounts"</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span> <span class="token operator">&amp;</span>MongoRepository<span class="token punctuation">&#123;</span>
		storeDiscounts<span class="token punctuation">:</span> discounts<span class="token punctuation">,</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>m MongoRepository<span class="token punctuation">)</span> <span class="token function">GetStoreDiscount</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> storeId uuid<span class="token punctuation">.</span>UUID<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">float32</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">var</span> discountRate <span class="token builtin">float32</span>
	err <span class="token operator">:=</span> m<span class="token punctuation">.</span>storeDiscounts<span class="token punctuation">.</span><span class="token function">FindOne</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> bson<span class="token punctuation">.</span>D<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token string">"store_id"</span><span class="token punctuation">,</span> storeId<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Decode</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>discountRate<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">if</span> errors<span class="token punctuation">.</span><span class="token function">Is</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> mongo<span class="token punctuation">.</span>ErrNoDocuments<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">,</span> ErrNoDiscount
		<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"failed to get store discount: %w"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">return</span> discountRate<span class="token punctuation">,</span> <span class="token boolean">nil</span>
<span class="token punctuation">&#125;</span></code>`;return{c(){f=p("pre"),this.h()},l(d){f=e(d,"PRE",{class:!0});var E=u(f);E.forEach(n),this.h()},h(){k(f,"class","language-go")},m(d,E){o(d,f,E),f.innerHTML=v},p:z,d(d){d&&n(f)}}}function iv(m){let f,v=`<code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>s Service<span class="token punctuation">)</span> <span class="token function">CompletePurchase</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> storeId uuid<span class="token punctuation">.</span>UUID<span class="token punctuation">,</span> purchase <span class="token operator">*</span>Purchase<span class="token punctuation">,</span> coffeeBuxCard <span class="token operator">*</span>membership<span class="token punctuation">.</span>CoffeeBux<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">&#123;</span>
	err <span class="token operator">:=</span> purchase<span class="token punctuation">.</span><span class="token function">validateAndEnrich</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> err
	<span class="token punctuation">&#125;</span>

	discount<span class="token punctuation">,</span> err <span class="token operator">:=</span> s<span class="token punctuation">.</span>storeService<span class="token punctuation">.</span><span class="token function">GetStoreSpecificDiscount</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> storeId<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>errors<span class="token punctuation">.</span><span class="token function">Is</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> store<span class="token punctuation">.</span>ErrNoDiscount<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"failed to get discount: %w"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>

	purchasePrice <span class="token operator">:=</span> purchase<span class="token punctuation">.</span>total
	<span class="token keyword">if</span> discount <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>
		purchasePrice <span class="token operator">*=</span> coffeeco<span class="token punctuation">.</span><span class="token function">Money</span><span class="token punctuation">(</span><span class="token number">100</span> <span class="token operator">-</span> discount<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">switch</span> purchase<span class="token punctuation">.</span>PaymentMeans <span class="token punctuation">&#123;</span>
	<span class="token keyword">case</span> payment<span class="token punctuation">.</span>MEANS_CARD<span class="token punctuation">:</span>
		err <span class="token operator">:=</span> s<span class="token punctuation">.</span>cardService<span class="token punctuation">.</span><span class="token function">ChargeCard</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> purchase<span class="token punctuation">.</span>total<span class="token punctuation">,</span> <span class="token operator">*</span>purchase<span class="token punctuation">.</span>cardToken<span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">return</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"card charge is failed"</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#125;</span>

	<span class="token keyword">case</span> payment<span class="token punctuation">.</span>MEANS_CASH<span class="token punctuation">:</span>
	<span class="token comment">// do nothing</span>

	<span class="token keyword">case</span> payment<span class="token punctuation">.</span>MEANS_COFFEEBUX<span class="token punctuation">:</span>
		err <span class="token operator">:=</span> coffeeBuxCard<span class="token punctuation">.</span><span class="token function">Pay</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> purchase<span class="token punctuation">.</span>ProductsToPurchase<span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"failed to charge membership card: %w"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
		<span class="token punctuation">&#125;</span>

	<span class="token keyword">default</span><span class="token punctuation">:</span>
		<span class="token keyword">return</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"unknown payment means"</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>

	err <span class="token operator">=</span> s<span class="token punctuation">.</span>purchaseRepo<span class="token punctuation">.</span><span class="token function">Store</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token operator">*</span>purchase<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"failed to store purchase"</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">if</span> coffeeBuxCard <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		coffeeBuxCard<span class="token punctuation">.</span><span class="token function">AddStamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">&#125;</span></code>`;return{c(){f=p("pre"),this.h()},l(d){f=e(d,"PRE",{class:!0});var E=u(f);E.forEach(n),this.h()},h(){k(f,"class","language-go")},m(d,E){o(d,f,E),f.innerHTML=v},p:z,d(d){d&&n(f)}}}function kv(m){let f,v=`<code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>s Service<span class="token punctuation">)</span> <span class="token function">CompletePurchase</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> storeId uuid<span class="token punctuation">.</span>UUID<span class="token punctuation">,</span> purchase <span class="token operator">*</span>Purchase<span class="token punctuation">,</span> coffeeBuxCard <span class="token operator">*</span>membership<span class="token punctuation">.</span>CoffeeBux<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">&#123;</span>
	err <span class="token operator">:=</span> purchase<span class="token punctuation">.</span><span class="token function">validateAndEnrich</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> err
	<span class="token punctuation">&#125;</span>

	err <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">calculateStoreSpecificDiscount</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> storeId<span class="token punctuation">,</span> purchase<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> err
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">switch</span> purchase<span class="token punctuation">.</span>PaymentMeans <span class="token punctuation">&#123;</span>
	<span class="token keyword">case</span> payment<span class="token punctuation">.</span>MEANS_CARD<span class="token punctuation">:</span>
		err <span class="token operator">:=</span> s<span class="token punctuation">.</span>cardService<span class="token punctuation">.</span><span class="token function">ChargeCard</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> purchase<span class="token punctuation">.</span>total<span class="token punctuation">,</span> <span class="token operator">*</span>purchase<span class="token punctuation">.</span>cardToken<span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">return</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"card charge is failed"</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#125;</span>

	<span class="token keyword">case</span> payment<span class="token punctuation">.</span>MEANS_CASH<span class="token punctuation">:</span>
	<span class="token comment">// do nothing</span>

	<span class="token keyword">case</span> payment<span class="token punctuation">.</span>MEANS_COFFEEBUX<span class="token punctuation">:</span>
		err <span class="token operator">:=</span> coffeeBuxCard<span class="token punctuation">.</span><span class="token function">Pay</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> purchase<span class="token punctuation">.</span>ProductsToPurchase<span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"failed to charge membership card: %w"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
		<span class="token punctuation">&#125;</span>

	<span class="token keyword">default</span><span class="token punctuation">:</span>
		<span class="token keyword">return</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"unknown payment type"</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>

	err <span class="token operator">=</span> s<span class="token punctuation">.</span>purchaseRepo<span class="token punctuation">.</span><span class="token function">Store</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token operator">*</span>purchase<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"failed to store purchase"</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">if</span> coffeeBuxCard <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		coffeeBuxCard<span class="token punctuation">.</span><span class="token function">AddStamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>Service<span class="token punctuation">)</span> <span class="token function">calculateStoreSpecificDiscount</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> storeId uuid<span class="token punctuation">.</span>UUID<span class="token punctuation">,</span> purchase <span class="token operator">*</span>Purchase<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">&#123;</span>
	discount<span class="token punctuation">,</span> err <span class="token operator">:=</span> s<span class="token punctuation">.</span>storeService<span class="token punctuation">.</span><span class="token function">GetStoreSpecificDiscount</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> storeId<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>errors<span class="token punctuation">.</span><span class="token function">Is</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> store<span class="token punctuation">.</span>ErrNoDiscount<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"failed to get discount: %w"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>

	purchasePrice <span class="token operator">:=</span> purchase<span class="token punctuation">.</span>total
	<span class="token keyword">if</span> discount <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>
		purchase<span class="token punctuation">.</span>total <span class="token operator">=</span> purchasePrice <span class="token operator">*</span> coffeeco<span class="token punctuation">.</span><span class="token function">Money</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token operator">-</span>discount<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">&#125;</span></code>`;return{c(){f=p("pre"),this.h()},l(d){f=e(d,"PRE",{class:!0});var E=u(f);E.forEach(n),this.h()},h(){k(f,"class","language-go")},m(d,E){o(d,f,E),f.innerHTML=v},p:z,d(d){d&&n(f)}}}function fv(m){let f,v,d,E,Ce,De,_s,bs,ja,lu,Pe,Se,$e,qn,uu,xe,Vn,ru,he,Z,Ka,iu,ku,qa,fu,du,Va,Eu,Re,Xn,vu,Me,y,Xa,mu,_u,Wa,bu,wu,za,yu,Cu,Za,Du,Pu,Ja,Su,Oe,Wn,$u,Ae,Be,Ie,Le,ws,ys,Qa,xu,Ne,J,hu,Ya,Ru,Mu,ga,Ou,Au,Te,zn,Bu,He,Cs,Iu,st,Lu,Nu,Ue,Zn,Tu,Ge,Fe,je,Jn,Hu,Ke,Q,Qn,nt,Uu,Gu,Fu,Yn,at,ju,Ku,qu,gn,tt,Vu,Xu,qe,sa,Wu,Ve,h,pt,zu,Zu,et,Ju,Qu,ot,Yu,gu,ct,sr,Xe,na,nr,We,_,lt,ar,tr,ut,pr,er,rt,or,cr,it,lr,ur,kt,rr,ir,ft,kr,ze,aa,fr,Ze,Je,Qe,Ye,Ds,Ps,dt,dr,ge,so,no,ta,Er,ao,_n,k3=`<code class="language-bash">$ tree
<span class="token builtin class-name">.</span>
├── go.mod
└── internal</code>`,to,Y,vr,Et,mr,_r,vt,br,wr,po,Ss,$s,mt,yr,eo,g,Cr,_t,Dr,Pr,bt,Sr,$r,oo,is,wt,xr,hr,yt,Rr,Mr,co,bn,f3=`<code class="language-go"><span class="token keyword">package</span> coffeeco

<span class="token keyword">import</span> <span class="token string">"github.com/google/uuid"</span>

<span class="token keyword">type</span> CoffeeLover <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
	ID           uuid<span class="token punctuation">.</span>UUID
	FirstName    <span class="token builtin">string</span>
	LastName     <span class="token builtin">string</span>
	EmailAddress <span class="token builtin">string</span>
<span class="token punctuation">&#125;</span></code>`,lo,T,Ct,Or,Ar,Dt,Br,Ir,Pt,Lr,Nr,uo,ro,io,C,Tr,St,Hr,Ur,$t,Gr,Fr,xt,jr,Kr,ht,qr,Vr,ko,wn,d3=`<code class="language-go"><span class="token keyword">package</span> store

<span class="token keyword">import</span> <span class="token string">"github.com/google/uuid"</span>

<span class="token keyword">type</span> Store <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
	ID       uuid<span class="token punctuation">.</span>UUID
	Location <span class="token builtin">string</span>
<span class="token punctuation">&#125;</span></code>`,fo,pa,Xr,Eo,vo,mo,ea,Wr,_o,oa,zr,bo,R,Rt,Zr,Jr,Mt,Qr,Yr,Ot,gr,si,At,ni,wo,ks,Bt,ai,ti,It,pi,ei,yo,yn,E3=`<code class="language-go"><span class="token keyword">package</span> coffeeco

<span class="token keyword">type</span> Money <span class="token operator">=</span> <span class="token builtin">int</span>

<span class="token keyword">type</span> Product <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
	ItemName  <span class="token builtin">string</span>
	BasePrice Money
<span class="token punctuation">&#125;</span></code>`,Co,Do,Po,xs,oi,Lt,ci,li,So,Cn,v3=`<code class="language-go"><span class="token keyword">package</span> store

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">"github.com/google/uuid"</span>
	coffeeco <span class="token string">"github.com/jhseoeo/Golang-DDD/chapter5/internal"</span>
<span class="token punctuation">)</span>

<span class="token keyword">type</span> Store <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
	ID             uuid<span class="token punctuation">.</span>UUID
	Location       <span class="token builtin">string</span>
	ProductForSale coffeeco<span class="token punctuation">.</span>Product
<span class="token punctuation">&#125;</span></code>`,$o,xo,ho,ca,ui,Ro,w,Nt,ri,ii,Tt,ki,fi,Ht,di,Ei,Ut,vi,mi,Gt,_i,bi,Mo,Dn,m3=`<code class="language-go"><span class="token keyword">package</span> payment

<span class="token keyword">type</span> Means <span class="token builtin">string</span>

<span class="token keyword">const</span> <span class="token punctuation">(</span>
	MEANS_CARD      <span class="token operator">=</span> <span class="token string">"card"</span>
	MEANS_CASH      <span class="token operator">=</span> <span class="token string">"cash"</span>
	MEANS_COFFEEBUX <span class="token operator">=</span> <span class="token string">"coffeebux"</span>
<span class="token punctuation">)</span>

<span class="token keyword">type</span> CardDetails <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
	cardToken <span class="token builtin">string</span>
<span class="token punctuation">&#125;</span></code>`,Oo,M,wi,Ft,yi,Ci,jt,Di,Pi,Kt,Si,$i,Ao,hs,xi,qt,hi,Ri,Bo,Io,Lo,la,Mi,No,P,Vt,Oi,Ai,Xt,Bi,Ii,Wt,Li,Ni,zt,Ti,Hi,To,Pn,_3=`<code class="language-go"><span class="token keyword">package</span> purchase

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">"github.com/google/uuid"</span>
	coffeeco <span class="token string">"github.com/jhseoeo/Golang-DDD/chapter5/internal"</span>
	<span class="token string">"github.com/jhseoeo/Golang-DDD/chapter5/internal/payment"</span>
	<span class="token string">"github.com/jhseoeo/Golang-DDD/chapter5/internal/store"</span>
	<span class="token string">"time"</span>
<span class="token punctuation">)</span>

<span class="token keyword">type</span> Purchase <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
	id                 uuid<span class="token punctuation">.</span>UUID
	Store              store<span class="token punctuation">.</span>Store
	ProductsToPurchase <span class="token punctuation">[</span><span class="token punctuation">]</span>coffeeco<span class="token punctuation">.</span>Product
	total              coffeeco<span class="token punctuation">.</span>Money
	PaymentMeans       payment<span class="token punctuation">.</span>Means
	timeOfPurchase     time<span class="token punctuation">.</span>Time
	cardToken          <span class="token operator">*</span><span class="token builtin">string</span>
<span class="token punctuation">&#125;</span></code>`,Ho,Sn,Zt,Ui,Gi,Uo,Go,Fo,D,Fi,Jt,ji,Ki,Qt,qi,Vi,Yt,Xi,Wi,gt,zi,Zi,jo,$n,b3=`<code class="language-go"><span class="token keyword">package</span> membership

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">"github.com/google/uuid"</span>
	coffeeco <span class="token string">"github.com/jhseoeo/Golang-DDD/chapter5/internal"</span>
	<span class="token string">"github.com/jhseoeo/Golang-DDD/chapter5/internal/store"</span>
<span class="token punctuation">)</span>

<span class="token keyword">type</span> CoffeeBux <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
	ID                                    uuid<span class="token punctuation">.</span>UUID
	store                                 store<span class="token punctuation">.</span>Store
	coffeeLover                           coffeeco<span class="token punctuation">.</span>CoffeeLover
	FreeDrinksAvailable                   <span class="token builtin">int</span>
	RemainingDrinkPurchasesUntilFreeDrink <span class="token builtin">int</span>
<span class="token punctuation">&#125;</span></code>`,Ko,qo,Vo,ua,Ji,Xo,xn,w3=`<code class="language-bash"><span class="token builtin class-name">.</span>
├── go.mod
├── go.sum
└── internal
    ├── coffeelover.go
    ├── membership
    │   └── coffeebux.go
    ├── payment
    │   └── means.go
    ├── product.go
    ├── purchase
    │   └── purchase.go
    └── store
        └── store.go</code>`,Wo,zo,Zo,Jo,Rs,Ms,sp,Qi,Qo,Os,Yi,np,gi,sk,Yo,ss,ap,nk,ak,tp,tk,pk,pp,ek,go,As,ok,ep,ck,lk,sc,Bs,nc,Is,uk,op,rk,ik,ac,Ls,tc,O,kk,cp,fk,dk,lp,Ek,vk,up,mk,_k,pc,ec,oc,H,rp,bk,wk,ip,yk,Ck,kp,Dk,Pk,cc,ns,Sk,fp,$k,xk,dp,hk,Rk,lc,hn,y3=`<code class="language-go"><span class="token keyword">package</span> purchase

<span class="token keyword">import</span> <span class="token string">"context"</span>

<span class="token keyword">type</span> Repository <span class="token keyword">interface</span> <span class="token punctuation">&#123;</span>
	<span class="token function">Store</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> purchase Purchase<span class="token punctuation">)</span> <span class="token builtin">error</span>
<span class="token punctuation">&#125;</span></code>`,uc,ra,Mk,rc,ia,Ok,ic,Rn,C3=`<code class="language-bash"><span class="token builtin class-name">.</span>
├── go.mod
├── go.sum
└── internal
    ├── coffeelover.go
    ├── membership
    │   └── coffeebux.go
    ├── payment
    │   └── means.go
    ├── product.go
    ├── purchase
    │   ├── purchase.go
    │   └── repository.go
    └── store
        └── store.go</code>`,kc,fc,dc,Ec,Ns,Ts,Ep,Ak,vc,ka,Bk,mc,Mn,D3='<code class="language-bash">go get go.mongodb.org/mongo-driver/mongo</code>',_c,as,Ik,vp,Lk,Nk,mp,Tk,Hk,bc,Hs,wc,ts,Uk,_p,Gk,Fk,bp,jk,Kk,yc,On,P3=`<code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>mr <span class="token operator">*</span>MongoRepository<span class="token punctuation">)</span> <span class="token function">Store</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> purchase Purchase<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">&#123;</span>
	mongoP <span class="token operator">:=</span> <span class="token function">toMongoPurchase</span><span class="token punctuation">(</span>purchase<span class="token punctuation">)</span>
	<span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> mr<span class="token punctuation">.</span>purchases<span class="token punctuation">.</span><span class="token function">InsertOne</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> mongoP<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"failed to persist purchase: %w"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">&#125;</span></code>`,Cc,b,qk,wp,Vk,Xk,yp,Wk,zk,Cp,Zk,Jk,Dp,Qk,Yk,Pp,gk,sf,Dc,A,nf,Sp,af,tf,$p,pf,ef,xp,of,cf,Pc,Us,Sc,fa,lf,$c,da,uf,xc,An,S3=`<code class="language-bash"><span class="token builtin class-name">.</span>
├── go.mod
├── go.sum
└── internal
    ├── coffeelover.go
    ├── membership
    │   └── coffeebux.go
    ├── payment
    │   └── means.go
    ├── product.go
    ├── purchase
    │   ├── purchase.go
    │   └── repository.go
    └── store
        └── store.go</code>`,hc,Rc,Mc,Oc,Gs,Fs,hp,rf,Ac,js,kf,Rp,ff,df,Bc,Ea,Ef,Ic,Bn,$3='<code class="language-bash">go get github.com/stripe/stripe-go/v73</code>',Lc,va,vf,Nc,ps,mf,Mp,_f,bf,Op,wf,yf,Tc,In,x3=`<code class="language-go"><span class="token keyword">package</span> payment

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">"errors"</span>
	<span class="token string">"github.com/stripe/stripe-go/v73/client"</span>
<span class="token punctuation">)</span>

<span class="token keyword">type</span> StripeService <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
	stripeClient <span class="token operator">*</span>client<span class="token punctuation">.</span>API
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">NewStripeService</span><span class="token punctuation">(</span>apiKey <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>StripeService<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> apiKey <span class="token operator">==</span> <span class="token string">""</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"API key cannot be nil"</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>

	sc <span class="token operator">:=</span> <span class="token operator">&amp;</span>client<span class="token punctuation">.</span>API<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
	sc<span class="token punctuation">.</span><span class="token function">Init</span><span class="token punctuation">(</span>apiKey<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span> <span class="token operator">&amp;</span>StripeService<span class="token punctuation">&#123;</span>stripeClient<span class="token punctuation">:</span> sc<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>
<span class="token punctuation">&#125;</span></code>`,Hc,es,Cf,Ap,Df,Pf,Bp,Sf,$f,Uc,Ks,Gc,ma,xf,Fc,jc,Kc,qc,qs,Vs,Ip,hf,Vc,Xc,Wc,_a,Rf,zc,Xs,Ws,Lp,Mf,Zc,zs,Of,Np,Af,Bf,Jc,Ln,h3=`<code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>CoffeeBux<span class="token punctuation">)</span> <span class="token function">AddStamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> c<span class="token punctuation">.</span>RemainingDrinkPurchasesUntilFreeDrink <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">&#123;</span>
		c<span class="token punctuation">.</span>RemainingDrinkPurchasesUntilFreeDrink <span class="token operator">=</span> <span class="token number">10</span>
		c<span class="token punctuation">.</span>FreeDrinksAvailable <span class="token operator">+=</span> <span class="token number">1</span>
	<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
		c<span class="token punctuation">.</span>RemainingDrinkPurchasesUntilFreeDrink<span class="token operator">--</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,Qc,S,Tp,If,Lf,Hp,Nf,Tf,Up,Hf,Uf,Gp,Gf,Ff,Yc,Zs,gc,$,Fp,jf,Kf,jp,qf,Vf,Kp,Xf,Wf,qp,zf,Zf,sl,nl,al,os,Jf,Vp,Qf,Yf,Xp,gf,s1,tl,Js,pl,ba,n1,el,ol,cl,B,a1,Wp,t1,p1,zp,e1,o1,Zp,c1,l1,ll,Qs,ul,Ys,u1,Jp,r1,i1,rl,il,kl,fl,gs,sn,Qp,k1,dl,cs,f1,Yp,d1,E1,gp,v1,m1,El,nn,vl,wa,_1,ml,U,se,b1,w1,ne,y1,C1,ae,D1,P1,_l,bl,wl,ls,S1,te,$1,x1,pe,h1,R1,yl,Nn,R3=`<code class="language-go"><span class="token keyword">type</span> StoreService <span class="token keyword">interface</span> <span class="token punctuation">&#123;</span>
	<span class="token function">GetStoreSpecificDiscount</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> storeId uuid<span class="token punctuation">.</span>UUID<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">float32</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">type</span> Service <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
	cardService  CardChargeService
	purchaseRepo Repository
	storeService StoreService
<span class="token punctuation">&#125;</span></code>`,Cl,an,M1,ee,O1,A1,Dl,tn,Pl,ya,B1,Sl,pn,$l,en,I1,oe,L1,N1,xl,hl,Rl,I,T1,ce,H1,U1,le,G1,F1,ue,j1,K1,Ml,Tn,M3=`<code class="language-go"><span class="token keyword">type</span> Service <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
	repo Repository
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>s Service<span class="token punctuation">)</span> <span class="token function">GetStoreSpecificDiscount</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> storeId uuid<span class="token punctuation">.</span>UUID<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">float32</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	dis<span class="token punctuation">,</span> err <span class="token operator">:=</span> s<span class="token punctuation">.</span>repo<span class="token punctuation">.</span><span class="token function">GetStoreDiscount</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> storeId<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">,</span> err
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">return</span> <span class="token function">float32</span><span class="token punctuation">(</span>dis<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>
<span class="token punctuation">&#125;</span></code>`,Ol,Al,Bl,Ca,q1,Il,Hn,O3=`<code class="language-bash"><span class="token builtin class-name">.</span>
├── go.mod
├── go.sum
└── internal
    ├── coffeelover.go
    ├── membership
    │   └── coffeebux.go
    ├── payment
    │   ├── means.go
    │   └── stripe.go
    ├── product.go
    ├── purchase
    │   ├── purchase.go
    │   └── repository.go
    └── store
        ├── repository.go
        └── store.go</code>`,Ll,Nl,Tl,Hl,on,cn,re,V1,Ul,Gl,Fl,Da,X1,jl,Pa,W1,Kl,ql,Vl,Xl,ln,un,ie,z1,Wl,zl,Zl,Sa,fs,Un,$a,dd,Z1,J1,Q1,Gn,Y1,Jl;return Bs=new W({props:{$$slots:{default:[av]},$$scope:{ctx:m}}}),Ls=new W({props:{$$slots:{default:[tv]},$$scope:{ctx:m}}}),Hs=new W({props:{$$slots:{default:[pv]},$$scope:{ctx:m}}}),Us=new W({props:{$$slots:{default:[ev]},$$scope:{ctx:m}}}),Ks=new W({props:{$$slots:{default:[ov]},$$scope:{ctx:m}}}),Zs=new W({props:{$$slots:{default:[cv]},$$scope:{ctx:m}}}),Js=new W({props:{$$slots:{default:[lv]},$$scope:{ctx:m}}}),Qs=new W({props:{$$slots:{default:[uv]},$$scope:{ctx:m}}}),nn=new W({props:{$$slots:{default:[rv]},$$scope:{ctx:m}}}),tn=new W({props:{$$slots:{default:[iv]},$$scope:{ctx:m}}}),pn=new W({props:{$$slots:{default:[kv]},$$scope:{ctx:m}}}),{c(){f=p("p"),v=c("이전 포스트까지는 주로 DDD의 이론적인 부분에 대해 다루었다면, 이번 포스트부터는 실제 애플리케이션에 DDD를 적용하는 방법에 대해 다룰 것이다."),d=r(),E=p("br"),Ce=p("br"),De=r(),_s=p("h2"),bs=p("a"),ja=p("span"),lu=c("모놀리식 애플리케이션이란?"),Pe=r(),Se=p("hr"),$e=r(),qn=p("p"),uu=c(`모놀리식 애플리케이션(Monolithic Application)은 시스템의 모든 컴포넌츠가 하나의 단위로 묶여있는 애플리케이션을 말한다.
가령 UI, 도메인, 인프라스트럭처 서비스가 동일한 배포 단위에 합쳐져 있다면, 그 애플리케이션은 모놀리식 애플리케이션이라 할 수 있다.`),xe=r(),Vn=p("p"),ru=c("모놀리식 애플리케이션은 몇 가지 이유에서 인기가 높다."),he=r(),Z=p("ul"),Ka=p("li"),iu=c("모든 코드와 우려 사항이 한 곳에 존재하므로 개발이 쉽다. 분산 시스템에서 RPC를 사용할 때 고려해야 하는 사항이 없다."),ku=r(),qa=p("li"),fu=c("배포할 항목이 하나이기 때문에 배포가 간단하다."),du=r(),Va=p("li"),Eu=c("서비스 간 통신이 인메모리에서 이루어지기 때문에 성능이 좋다."),Re=r(),Xn=p("p"),vu=c("하지만, 모놀리식 애플리케이션의 복잡도가 증가하면서, 다음과 같은 단점들이 드러나기 시작했다."),Me=r(),y=p("ul"),Xa=p("li"),mu=c("애플리케이션의 스타트업 시간이 길어진다."),_u=r(),Wa=p("li"),bu=c("애플리케이션의 확장(스케일링)이 어렵다. 위의 스타트업 시간이 길어진다는 점과 더해져, 애플리케이션의 인스턴스를 늘리는 것이 어렵다. 따라서 수직적 확장은 가능하지만, 수평적 확장에는 실질적 어려움이 있다."),wu=r(),za=p("li"),yu=c("지속적 배포(Continious Deployment, CD)가 느려진다. 애플리케이션의 일부분만 수정하더라도 전체 애플리케이션을 모두 배포해야 하며, 이는 애플리케이션이 복잡해질수록 더욱 느려진다."),Cu=r(),Za=p("li"),Du=c("특정 기술 스택에 귀속된다. 더 적합한 기술 스택이 나오거나 다른 기술 스택의 전문가이더라도 사용하던 기술 스택을 사용해야 한다. 만약 새로운 언어로 애플리케이션을 작성하고 싶다면, 애플리케이션 전체를 다시 작성해야 한다."),Pu=r(),Ja=p("li"),Su=c("변경 사항을 적용하기가 어렵고 모듈성이 떨어진다. 이는 DDD를 적용함으로써 해결할 수 있다."),Oe=r(),Wn=p("p"),$u=c("본 포스트에서는 DDD를 통해 간단한 모놀리식 애플리케이션을 작성해볼 것이다."),Ae=r(),Be=p("br"),Ie=p("br"),Le=r(),ws=p("h2"),ys=p("a"),Qa=p("span"),xu=c("애플리케이션의 요구사항"),Ne=r(),J=p("p"),hu=c("가상의 회사인 "),Ya=p("em"),Ru=c("CoffeeCo"),Mu=c("는 국제 커피 체인점이다. "),ga=p("em"),Ou=c("CoffeeCo"),Au=c("에 대한 비즈니스 도메인은 다음과 같다."),Te=r(),zn=p("p"),Bu=c(`이 회사는 작년에만 50개의 매장을 새로 내는 등 급속한 성장을 이루었다.
각 매장은 커피 및 커피 관련 액세서리와 매장별 음료를 판매한다.
매장은 개별적인 가격을 가지고 있지만, 국가적인 마케팅 캠페인이 종종 운영되기도 하며, 이는 품목의 가격에 영향을 미친다.`),He=r(),Cs=p("p"),Iu=c("CoffeeCo는 음료를 10회 구매할 때마다 1회의 무료 음료를 제공하는 "),st=p("em"),Lu=c("CoffeeBux"),Nu=c(`라는 로열티 프로그램을 시작하였다.
모든 매장에서 음료를 구매하거나 교환할 수 있다.`),Ue=r(),Zn=p("p"),Tu=c("CoffeeCo는 온라인 매장을 출시하는 것을 고려하고 있으며, 구매자가 매월 무제한 커피를 받을 수 있는 월간 구독과 다른 음료에 대한 할인을 고려하고 있다."),Ge=r(),Fe=p("br"),je=r(),Jn=p("p"),Hu=c("시스템을 개발할 때 다음과 같은 유비쿼터스 언어와 정의를 따라야 한다."),Ke=r(),Q=p("ul"),Qn=p("li"),nt=p("strong"),Uu=c("Coffee Lovers"),Gu=c(": CoffeeCo의 고객"),Fu=r(),Yn=p("li"),at=p("strong"),ju=c("CoffeeBux"),Ku=c(": CoffeeCo의 멤버십 프로그램으로, Coffee Lovers가 음료 또는 악세서리를 구매할 때마다 CoffeeBux 포인트가 1점씩 쌓임."),qu=r(),gn=p("li"),tt=p("strong"),Vu=c("Tiny, medium, and massive"),Xu=c(": 음료의 크기를 오름차순으로 나타냄. 일부 음료는 사이즈가 하나로 고정되어 있음."),qe=r(),sa=p("p"),Wu=c("도메인 모델링 과정에서, 다음과 같은 도메인 객체를 식별할 수 있다."),Ve=r(),h=p("ul"),pt=p("li"),zu=c("Store"),Zu=r(),et=p("li"),Ju=c("Products"),Qu=r(),ot=p("li"),Yu=c("Membership(원문에서는 Loyalty)"),gu=r(),ct=p("li"),sr=c("Subscription"),Xe=r(),na=p("p"),nr=c("또한, 시스템의 MVP(Minimum Viable Product)는 다음과 같은 기능을 갖추어야 한다."),We=r(),_=p("ul"),lt=p("li"),ar=c("CoffeeBux를 이용해서 음료 또는 악세서리를 구매할 수 있어야 한다."),tr=r(),ut=p("li"),pr=c("신용카드 및 체크카드를 이용해서 음료 또는 악세서리를 구매할 수 있어야 한다."),er=r(),rt=p("li"),or=c("현금을 이용해서 음료 또는 악세서리를 구매할 수 있어야 한다."),cr=r(),it=p("li"),lr=c("구매시마다 CoffeeBux 포인트가 쌓인다."),ur=r(),kt=p("li"),rr=c("매장별 할인 캠페인"),ir=r(),ft=p("li"),kr=c("현재는 음료는 한 사이즈만 존재"),ze=r(),aa=p("p"),fr=c("비즈니스 도메인에 대한 사항을 모두 파악했으므로, 이제 DDD를 통해 애플리케이션을 작성해보자."),Ze=r(),Je=p("br"),Qe=p("br"),Ye=r(),Ds=p("h2"),Ps=p("a"),dt=p("span"),dr=c("프로젝트 시작"),ge=r(),so=p("hr"),no=r(),ta=p("p"),Er=c("먼저, 다음과 같은 패키지 구조를 갖는 프로젝트를 생성한다."),ao=r(),_n=p("pre"),to=r(),Y=p("p"),vr=c("Golang에서 "),Et=p("code"),mr=c("internal"),_r=c(` 폴더는 특수한 의미를 가지며, 다른 프로젝트에서 임포트할 수 없다.
따라서 공개 API에 노출되지 않아야 하는 도메인 코드를 작성하기에 적합하며, 모든 도메인 코드는 `),vt=p("code"),br=c("internal"),wr=c(" 폴더에 작성할 것이다."),po=r(),Ss=p("h3"),$s=p("a"),mt=p("span"),yr=c("도메인 모델 작성"),eo=r(),g=p("p"),Cr=c("가장 먼저 작성해야 할 것은 "),_t=p("strong"),Dr=c("Coffee Lover"),Pr=c(" 모델이다. Coffee Lover는 가장 확실한 "),bt=p("strong"),Sr=c("엔티티"),$r=c("이며, 다른 도메인 객체와의 상호작용에서 중심적인 역할을 수행하기 때문이다."),oo=r(),is=p("p"),wt=p("code"),xr=c("internal"),hr=c(" 폴더에 "),yt=p("code"),Rr=c("coffeelover.go"),Mr=c("파일을 생성하여, Coffee Lover 모델을 작성한다."),co=r(),bn=p("pre"),lo=r(),T=p("p"),Ct=p("code"),Or=c("CoffeeLover"),Ar=c(" 구조체에 "),Dt=p("code"),Br=c("FirstName"),Ir=c("이나 "),Pt=p("code"),Lr=c("EmailAddress"),Nr=c("와 같은 필드가 일부 추가되었는데, 이는 Coffee Lover에 대해 저장할 필요가 있는 추가적인 정보이다. 가령 도메인 전문가나 관계자와의 주기적인 회의를 통해 이러한 정보를 파악할 수 있다."),uo=r(),ro=p("br"),io=r(),C=p("p"),Tr=c("이번에는 매장 도메인을 작성해볼 것이다. "),St=p("code"),Hr=c("internal"),Ur=c(" 폴더 안에 "),$t=p("code"),Gr=c("store"),Fr=c(" 폴더를 만들고, 그 아래 "),xt=p("code"),jr=c("store.go"),Kr=c(" 파일을 생성한다. "),ht=p("code"),qr=c("store/store.go"),Vr=c(" 파일에는 다음과 같은 코드를 작성한다."),ko=r(),wn=p("pre"),fo=r(),pa=p("p"),Xr=c("이와 같이 매장은 ID를 가지는 엔티티가 된다."),Eo=r(),vo=p("br"),mo=r(),ea=p("p"),Wr=c("각 매장에서는 커피, 커피에 관련된 악세사리, 매장별 음료를 팔고, 따라서 우리는 상품을 정의해야 한다."),_o=r(),oa=p("p"),zr=c(`여기까지는 비교적 간단한 모델링이었지만, 상품을 정의하는 것은 꽤 까다롭다. 상품은 엔티티일까, 아니면 밸류 오브젝트일까?
결론만 말하자면 상품은 밸류 오브젝트로 두는 것이 좋다. 왜냐하면,`),bo=r(),R=p("ul"),Rt=p("li"),Zr=c("각 상품은 불변성을 가진다고 볼 수 있으며"),Jr=r(),Mt=p("li"),Qr=c("상품은 도매인 개념을 측정, 설명, 수량화하며,"),Yr=r(),Ot=p("li"),gr=c("값만으로 동일한 타입의 다른 객체와 구분할 수 있으며,"),si=r(),At=p("li"),ni=c("엔티티인지 밸류 오브젝트인지 애매한 것들은 일단 밸류 오브젝트로 처리하고 나중에 엔티티로 변경하는 것이 더 안전한 선택이기 때문이다."),wo=r(),ks=p("p"),Bt=p("code"),ai=c("internal"),ti=c(" 폴더 안에 "),It=p("code"),pi=c("product.go"),ei=c(" 파일을 생성하고, 다음과 같이 작성한다."),yo=r(),yn=p("pre"),Co=r(),Do=p("br"),Po=r(),xs=p("p"),oi=c(`이제 매장 도메인으로 다시 돌아가서, 매장에서 판매하는 상품을 정의해야 한다.
`),Lt=p("code"),ci=c("store/store.go"),li=c(" 파일을 다음과 같이 수정한다."),So=r(),Cn=p("pre"),$o=r(),xo=p("br"),ho=r(),ca=p("p"),ui=c("사용자가 상품을 구매할 때 카드를 사용하는지 혹은 현금을 사용하는지, 카드를 사용했다면 어떤 카드인지에 대한 정보를 표현할 수 있어야 한다."),Ro=r(),w=p("p"),Nt=p("code"),ri=c("payment"),ii=c(" 도메인을 정의할 것이다. "),Tt=p("code"),ki=c("internal"),fi=c(" 폴더 안에 "),Ht=p("code"),di=c("payment"),Ei=c(" 폴더를 만들고, 그 아래 "),Ut=p("code"),vi=c("means.go"),mi=c(" 파일을 생성한다. "),Gt=p("code"),_i=c("payment/means.go"),bi=c(" 파일에는 다음과 같은 코드를 작성한다."),Mo=r(),Dn=p("pre"),Oo=r(),M=p("p"),wi=c("지불 수단을 나타내기 위한 타입인 "),Ft=p("code"),yi=c("Means"),Ci=c(`는 string에 대한 alias이다.
또한 카드에 대한 정보를 나타내는 `),jt=p("code"),Di=c("CardDetails"),Pi=c(" 타입을 정의하였다. 실제 카드 결제가 동작하는 방식과는 다소 거리가 있으나, 본 예제에서는 "),Kt=p("code"),Si=c("cardToken"),$i=c("을 사용하여 결제를 처리한다고 가정한다."),Ao=r(),hs=p("p"),xi=c("또한 현금 및 CoffeeBux 결제에 관련된 상수를 정의하였는데, 이는 결제 수단을 나타내는 "),qt=p("code"),hi=c("Means"),Ri=c(" 타입의 값으로 사용된다."),Bo=r(),Io=p("br"),Lo=r(),la=p("p"),Mi=c(`다음으로는 상품의 구매에 관련된 도메인을 작성해야 한다.
coffee lover가 상품을 구매할 때 필요한 정보에 대해 잘 이해하고 있는지, 그리고 알아야 할 추가적인 도메인 정보는 없는지에 대해 도메인 전문가와 대화해야 할 타이밍이 아마 이쯤이 될 것이다.`),No=r(),P=p("p"),Vt=p("code"),Oi=c("internal"),Ai=c(" 폴더 안에 "),Xt=p("code"),Bi=c("purchase"),Ii=c(" 폴더를 만들고, 그 아래 "),Wt=p("code"),Li=c("purchase.go"),Ni=c(" 파일을 생성한다. "),zt=p("code"),Ti=c("purchase/purchase.go"),Hi=c(" 파일에는 다음과 같은 코드를 작성한다."),To=r(),Pn=p("pre"),Ho=r(),Sn=p("p"),Zt=p("code"),Ui=c("Purchase"),Gi=c("는 ID를 가지는 엔티티여야 한다. 만약 사용자가 구매를 취소하고 싶을 때, ID를 통해 구매를 취소할 수 있어야 하기 때문이다."),Uo=r(),Go=p("br"),Fo=r(),D=p("p"),Fi=c("이제 멤버십에 관한 도메인을 정의할 차례이다. "),Jt=p("code"),ji=c("internal"),Ki=c(" 폴더 안에 "),Qt=p("code"),qi=c("membership"),Vi=c(" 폴더를 만들고, 그 아래 "),Yt=p("code"),Xi=c("coffeebux.go"),Wi=c(" 파일을 생성한다. "),gt=p("code"),zi=c("membership/coffeebux.go"),Zi=c(" 파일에는 다음과 같은 코드를 작성한다."),jo=r(),$n=p("pre"),Ko=r(),qo=p("br"),Vo=r(),ua=p("p"),Ji=c("여기까지, 모든 도메인 모델이 정의되었다. 지금까지의 작업이 반영된 패키지 구조는 다음과 같다."),Xo=r(),xn=p("pre"),Wo=r(),zo=p("br"),Zo=p("br"),Jo=r(),Rs=p("h3"),Ms=p("a"),sp=p("span"),Qi=c("도메인 서비스 작성"),Qo=r(),Os=p("p"),Yi=c("이제 도메인 서비스를 작성할 차례이다. "),np=p("code"),gi=c("Purchase"),sk=c("가 서비스 로직이 작성되기에 가장 적절하다고 볼 수 있는데, 이유는 다음과 같다."),Yo=r(),ss=p("ul"),ap=p("li"),nk=c("도매인 내의 중요한 비즈니스 로직이 수행될 것이며,"),ak=r(),tp=p("li"),tk=c("일부 값을 계산해야 하며,"),pk=r(),pp=p("li"),ek=c("레포지토리 레이어에 접근해야 하기 때문이다."),go=r(),As=p("p"),ok=c("프로그램을 방어적으로 작성하려면 서비스를 얇게 유지하는 것이 좋고, 따라서 로직 코드를 최대한 도메인 객체에까지 내리는게 좋다. "),ep=p("code"),ck=c("purchase/purchase.go"),lk=c("를 열어, 다음과 같이 각 상품의 가격을 합하여 총 가격을 계산하고, 구매건에 대한 ID를 생성하는 메소드를 추가한다."),sc=r(),F(Bs.$$.fragment),nc=r(),Is=p("p"),uk=c("이어서, "),op=p("code"),rk=c("purchase/purchase.go"),ik=c("에 서비스를 계속 작성한다."),ac=r(),F(Ls.$$.fragment),tc=r(),O=p("p"),kk=c("이 서비스는 "),cp=p("code"),fk=c("Purchase"),dk=c(" 객체에 필요한 값을 추가하기 위해 "),lp=p("code"),Ek=c("validateAndEnrich"),vk=c(" 메소드를 호출한다. 이후, 결제 수단에 따라 결제를 처리하고, 결제가 성공적으로 이루어지면 "),up=p("code"),mk=c("Purchase"),_k=c(" 객체를 저장한다."),pc=r(),ec=p("br"),oc=r(),H=p("p"),rp=p("code"),bk=c("purchase.validateAndEnrich()"),wk=c(`를 호출하고 나서 결제 수단에 따라 처리해야 할 몇 가지 로직이 있다.
카드 결제의 경우 `),ip=p("code"),yk=c("CardService"),Ck=c("를 통해 카드 결제를 처리하므로, "),kp=p("code"),Dk=c("CardService"),Pk=c(` 인터페이스를 정의할 것이다.
이렇게 인터페이스로 정의하면 개발자 혹은 개발팀이 나뉘어져 있을 때, 정해진 인터페이스를 통해 서로간의 의존성을 줄이면서도 개발 속도를 높이며 원활한 협업이 가능해진다.`),cc=r(),ns=p("p"),Sk=c("다음으로, 레포지토리 인터페이스를 정의할 것이다. "),fp=p("code"),$k=c("purchase"),xk=c(" 디렉토리에 "),dp=p("code"),hk=c("repository.go"),Rk=c(" 파일을 생성하고, 다음과 같이 작성한다."),lc=r(),hn=p("pre"),uc=r(),ra=p("p"),Mk=c("이렇게 인터페이스를 정의하여 사용하는 것은 좋은 방법이다. 레포지토리의 구현체가 어떤 데이터베이스에 의존하든, 인터페이스만 충족시키면 되기 때문이다."),rc=r(),ia=p("p"),Ok=c("지금까지의 작업이 반영된 패키지 구조는 다음과 같다. 프로젝트의 대략적인 윤곽이 잡히고 있다!"),ic=r(),Rn=p("pre"),kc=r(),fc=p("br"),dc=p("br"),Ec=r(),Ns=p("h3"),Ts=p("a"),Ep=p("span"),Ak=c("레포지토리 작성"),vc=r(),ka=p("p"),Bk=c("MongoDB를 사용하여 레포지토리 계층을 구현할 것이다. 먼저, MongoDB Golang Driver를 설치한다."),mc=r(),Mn=p("pre"),_c=r(),as=p("p"),Ik=c("그리고 "),vp=p("code"),Lk=c("Purchase"),Nk=c(" 모델을 저장하기 위한 레포지토리를 작성할 것이므로, "),mp=p("code"),Tk=c("purchase/repository.go"),Hk=c(" 파일에 다음과 같이 이어서 작성한다."),bc=r(),F(Hs.$$.fragment),wc=r(),ts=p("p"),Uk=c("다음으로 이전에 선언한 "),_p=p("code"),Gk=c("Repository"),Fk=c(" 인터페이스를 충족시키기 위해 "),bp=p("code"),jk=c("Store"),Kk=c(" 메소드를 작성한다."),yc=r(),On=p("pre"),Cc=r(),b=p("p"),qk=c("여기에서 "),wp=p("code"),Vk=c("toMongoPurchase"),Xk=c(" 함수는 "),yp=p("code"),Wk=c("Purchase"),zk=c(" 객체를 "),Cp=p("code"),Zk=c("MongoPurchase"),Jk=c(` 객체로 변환하는 어댑터 함수이며,
`),Dp=p("code"),Qk=c("MongoPurchase"),Yk=c("는 "),Pp=p("code"),gk=c("Purchase"),sf=c(" 객체를 저장하기 위해 MongoDB에 저장되는 도큐먼트의 구조체 타입이다."),Dc=r(),A=p("p"),nf=c("계속해서 "),Sp=p("code"),af=c("purchase/repository.go"),tf=c("에 "),$p=p("code"),pf=c("mongoPurchase"),ef=c("와 "),xp=p("code"),of=c("toMongoPurchase"),cf=c("를 구현한다."),Pc=r(),F(Us.$$.fragment),Sc=r(),fa=p("p"),lf=c("이와 같이 MongoDB에 대한 의존성과 Purchase 애그리거트를 디커플링할 수 있다. 다른 도메인 모델도 마찬가지로 데이터베이스 모델과 디커플링해야 한다."),$c=r(),da=p("p"),uf=c("지금까지의 작업이 반영된 패키지 구조는 다음과 같다."),xc=r(),An=p("pre"),hc=r(),Rc=p("br"),Mc=p("br"),Oc=r(),Gs=p("h3"),Fs=p("a"),hp=p("span"),rf=c("인프라스트럭처 서비스 작성"),Ac=r(),js=p("p"),kf=c("결제 서비스를 위해 "),Rp=p("em"),ff=c("Stripe"),df=c(`라는 것을 써볼 것이다.
Mongo 레포지토리처럼 Stripe에 대한 의존성을 디커플링하기 위해 인터페이스를 정의할 것이다.`),Bc=r(),Ea=p("p"),Ef=c("먼저, 다음 명령어로 Stripe Golang SDK를 설치한다."),Ic=r(),Bn=p("pre"),Lc=r(),va=p("p"),vf=c("이거 뭔데 73버전까지 있는거지..?"),Nc=r(),ps=p("p"),mf=c("아무튼 "),Mp=p("code"),_f=c("payment"),bf=c(" 폴더에 "),Op=p("code"),wf=c("stripe.go"),yf=c(" 파일을 생성하고, 다음과 같이 작성한다."),Tc=r(),In=p("pre"),Hc=r(),es=p("p"),Cf=c("그리고 "),Ap=p("code"),Df=c("CardChargeService"),Pf=c(" 인터페이스를 충족시키기 위해 "),Bp=p("code"),Sf=c("ChargeCard"),$f=c(" 메소드를 작성한다."),Uc=r(),F(Ks.$$.fragment),Gc=r(),ma=p("p"),xf=c("이와 같이 외부 리소스인 Stripe를 사용하는 코드를 인프라스트럭처 레이어에 작성하였다."),Fc=r(),jc=p("br"),Kc=p("br"),qc=r(),qs=p("h2"),Vs=p("a"),Ip=p("span"),hf=c("기능 추가 구현하기"),Vc=r(),Xc=p("hr"),Wc=r(),_a=p("p"),Rf=c("DDD의 장점 중 하나는 모듈성 덕분에 새로운 기능을 추가하기가 쉽다는 것이다. 아직 비즈니스 요구사항을 모두 충족시킨 것은 아니기 떄문에, 남은 요구사항을 충족시키기 위해 기능을 추가해보자."),zc=r(),Xs=p("h3"),Ws=p("a"),Lp=p("span"),Mf=c("멤버십 프로그램 구현"),Zc=r(),zs=p("p"),Of=c("요구사항 중 10회 구매시 1회 무료 음료를 제공하는 멤버십 프로그램이 있다. 이를 구현하기 위해 "),Np=p("code"),Af=c("membership/coffeebux.go"),Bf=c(" 파일에 다음과 같은 메소드를 추가한다."),Jc=r(),Ln=p("pre"),Qc=r(),S=p("p"),Tp=p("code"),If=c("AddStamp"),Lf=c(" 무료 음료를 제공하는 로직을 구현한 메소드이다. 이제 "),Hp=p("code"),Nf=c("purchase/purchase.go"),Tf=c(" 파일의 "),Up=p("code"),Hf=c("CompletePurchase"),Uf=c(" 메소드에서 "),Gp=p("em"),Gf=c("coffeebux"),Ff=c(" 스탬프를 쌓는 로직을 추가한다."),Yc=r(),F(Zs.$$.fragment),gc=r(),$=p("p"),Fp=p("code"),jf=c("CompletePurchase"),Kf=c("의 파라미터로 "),jp=p("code"),qf=c("coffeeBuxCard"),Vf=c("를 추가하였는데, 고객이 멤버십을 가지고 있지 않을 수 있기 때문에 "),Kp=p("code"),Xf=c("nil"),Wf=c(" 여부를 검사해야 한다. 검사 이후에는 단지 "),qp=p("code"),zf=c("AddStamp"),Zf=c(" 메소드를 호출함으로써, 아주 쉽게 멤버십 프로그램을 구현할 수 있다."),sl=r(),nl=p("br"),al=r(),os=p("p"),Jf=c("이제 결제 수단으로 CoffeeBux를 사용할 수 있도록 구현해야 하는데, 이는 결제 도메인과 멤버십 도메인에 모두 속하기 때문에 어디에 구현해야 할지 고민이 될 수 있다. 이를 구현하는 데는 여러 가지 방법이 있을 수 있으며, 정답은 없다. 이번 예제에서는 결제 도메인에 구현할 것이다. "),Vp=p("code"),Qf=c("purchase/purchase.go"),Yf=c(" 파일을 열어 다음과 같이 "),Xp=p("code"),gf=c("Pay"),s1=c(" 메소드를 추가한다."),tl=r(),F(Js.$$.fragment),pl=r(),ba=p("p"),n1=c("이와 같이 사용할 수 있는 무료 음료의 수를 확인하고, 충분한 음료가 있다면 무료 음료의 수를 차감한다."),el=r(),ol=p("br"),cl=r(),B=p("p"),a1=c("남은 것은 구매 서비스의 "),Wp=p("code"),t1=c("CompletePurchase"),p1=c(" 메소드에서 결제 수단으로 CoffeeBux를 사용할 수 있도록 구현하는 것이다. "),zp=p("code"),e1=c("purchase/purchase.go"),o1=c(" 파일을 열어 다음과 같이 "),Zp=p("code"),c1=c("CompletePurchase"),l1=c(" 메소드를 수정한다."),ll=r(),F(Qs.$$.fragment),ul=r(),Ys=p("p"),u1=c(`이와 같이 결제 수단으로 CoffeeBux를 사용할 수 있도록 구현하였다.
이 때 CoffeeBux를 사용하여도 `),Jp=p("code"),r1=c("AddStamp"),i1=c(" 메소드를 호출하여 멤버십 포인트가 쌓이도록 구현하였는데, 이러한 비즈니스 불변성은 도메인 전문가와의 대화를 통해 확인할 수 있다."),rl=r(),il=p("br"),kl=p("br"),fl=r(),gs=p("h3"),sn=p("a"),Qp=p("span"),k1=c("매장별 할인 캠페인 구현"),dl=r(),cs=p("p"),f1=c("매장별 할인 정보를 저장하기 위해서는 레포지토리 계층이 필요하다. "),Yp=p("code"),d1=c("store"),E1=c(" 폴더에 "),gp=p("code"),v1=c("repository.go"),m1=c(" 파일을 생성하고, 다음과 같이 작성한다."),El=r(),F(nn.$$.fragment),vl=r(),wa=p("p"),_1=c("이 코드는 이전의 레포지토리 레이어와 비슷하다. 다만 현재 각각의 레포지토리 레이어에서 Mongo 연결 풀을 중복으로 생성하고 있는데, 이를 다른 패키지로 분리하여 공유하는 것이 향후 개선사항이 될 수 있다."),ml=r(),U=p("p"),se=p("code"),b1=c("GetStoreDiscount"),w1=c(" 메소드를 사용할 때 에러 체크를 하는 것을 알 수있는데, 만약 "),ne=p("code"),y1=c("ErrNoDocuments"),C1=c(" 에러가 발생하면 할인이 적용되지 않은 것이므로 "),ae=p("code"),D1=c("ErrNoDiscount"),P1=c(" 에러를 반환하며, 이는 실제 에러라기보다는 할인이 적용되지 않았음을 명시적으로 알리는 것이다."),_l=r(),bl=p("br"),wl=r(),ls=p("p"),S1=c("이렇게 구현된 매장별 할인을 구매 서비스에 추가할 것이다. "),te=p("code"),$1=c("purchase/purchase.go"),x1=c(" 파일을 열어 "),pe=p("code"),h1=c("StoreService"),R1=c(" 인터페이스를 정의하고, 이를 구매 서비스 구조체에 추가한다."),yl=r(),Nn=p("pre"),Cl=r(),an=p("p"),M1=c("이후 "),ee=p("code"),O1=c("CompletePurchase"),A1=c(" 메소드에서 매장별 할인을 적용하는 로직을 추가한다."),Dl=r(),F(tn.$$.fragment),Pl=r(),ya=p("p"),B1=c("이렇게 이것저것 추가하고 나니 가독성도 떨어지고 도메인이 복잡해졌다. 리팩토링이 필요해 보인다."),Sl=r(),F(pn.$$.fragment),$l=r(),en=p("p"),I1=c("이와 같이 "),oe=p("code"),L1=c("calculateStoreSpecificDiscount"),N1=c("함수로 따로 분리하였고, 훨씬 더 보기 깔끔해진 만큼 도메인 전문가와 이야기하기 더 쉬울 것이다."),xl=r(),hl=p("br"),Rl=r(),I=p("p"),T1=c("마지막으로 "),ce=p("code"),H1=c("store/store.go"),U1=c("를 열어 "),le=p("code"),G1=c("StoreService"),F1=c("를 충족시키는 "),ue=p("code"),j1=c("Service"),K1=c(" 구조체를 작성한다."),Ml=r(),Tn=p("pre"),Ol=r(),Al=p("br"),Bl=r(),Ca=p("p"),q1=c("이로써 Domain Driven Design 기반의 전체 서비스가 완성되었다. 지금까지의 작업이 반영된 패키지 구조는 다음과 같다."),Il=r(),Hn=p("pre"),Ll=r(),Nl=p("br"),Tl=p("br"),Hl=r(),on=p("h2"),cn=p("a"),re=p("span"),V1=c("마치며"),Ul=r(),Gl=p("hr"),Fl=r(),Da=p("p"),X1=c(`이렇게 모놀리식 아키텍처에 DDD를 적용해보았다.
현재로서는 서비스만 구현되어 있지만 REST API 등 인터페이스가 정의된다면 어떻게 구현해야 할지 고민해보는 것도 좋을 것 같다.
또한 유닛 테스트 또는 통합 테스트를 작성해보는 것도 좋을 것 같다.`),jl=r(),Pa=p("p"),W1=c(`DDD가 적용되지 않은 기존 코드에서, 이 포스트에서와 같이 레포지토리 패턴을 사용하고 도메인 객체를 사용하도록 리팩토링하는 것은 꽤 노력이 요구되는 일일 수 있다.
하지만 인프라스트럭처 레이어를 적용하는 것은 꽤 권장되는 방법이다.
비즈니스 로직과 인프라스트럭처를 분리함으로써, 비즈니스 로직을 테스트하기가 훨씬 쉬워지기 때문이다.`),Kl=r(),ql=p("br"),Vl=p("br"),Xl=r(),ln=p("h2"),un=p("a"),ie=p("span"),z1=c("References"),Wl=r(),zl=p("hr"),Zl=r(),Sa=p("center"),fs=p("p"),Un=p("a"),$a=p("img"),Z1=r(),J1=p("br"),Q1=r(),Gn=p("a"),Y1=c("Matthew Boyle, Domain-Driven Design with Golang』, O’Reilly Media, Inc."),this.h()},l(s){f=e(s,"P",{});var t=u(f);v=l(t,"이전 포스트까지는 주로 DDD의 이론적인 부분에 대해 다루었다면, 이번 포스트부터는 실제 애플리케이션에 DDD를 적용하는 방법에 대해 다룰 것이다."),t.forEach(n),d=i(s),E=e(s,"BR",{}),Ce=e(s,"BR",{}),De=i(s),_s=e(s,"H2",{id:!0});var xa=u(_s);bs=e(xa,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var ke=u(bs);ja=e(ke,"SPAN",{class:!0}),u(ja).forEach(n),ke.forEach(n),lu=l(xa,"모놀리식 애플리케이션이란?"),xa.forEach(n),Pe=i(s),Se=e(s,"HR",{}),$e=i(s),qn=e(s,"P",{});var fe=u(qn);uu=l(fe,`모놀리식 애플리케이션(Monolithic Application)은 시스템의 모든 컴포넌츠가 하나의 단위로 묶여있는 애플리케이션을 말한다.
가령 UI, 도메인, 인프라스트럭처 서비스가 동일한 배포 단위에 합쳐져 있다면, 그 애플리케이션은 모놀리식 애플리케이션이라 할 수 있다.`),fe.forEach(n),xe=i(s),Vn=e(s,"P",{});var de=u(Vn);ru=l(de,"모놀리식 애플리케이션은 몇 가지 이유에서 인기가 높다."),de.forEach(n),he=i(s),Z=e(s,"UL",{});var ds=u(Z);Ka=e(ds,"LI",{});var Ee=u(Ka);iu=l(Ee,"모든 코드와 우려 사항이 한 곳에 존재하므로 개발이 쉽다. 분산 시스템에서 RPC를 사용할 때 고려해야 하는 사항이 없다."),Ee.forEach(n),ku=i(ds),qa=e(ds,"LI",{});var ve=u(qa);fu=l(ve,"배포할 항목이 하나이기 때문에 배포가 간단하다."),ve.forEach(n),du=i(ds),Va=e(ds,"LI",{});var me=u(Va);Eu=l(me,"서비스 간 통신이 인메모리에서 이루어지기 때문에 성능이 좋다."),me.forEach(n),ds.forEach(n),Re=i(s),Xn=e(s,"P",{});var _e=u(Xn);vu=l(_e,"하지만, 모놀리식 애플리케이션의 복잡도가 증가하면서, 다음과 같은 단점들이 드러나기 시작했다."),_e.forEach(n),Me=i(s),y=e(s,"UL",{});var x=u(y);Xa=e(x,"LI",{});var be=u(Xa);mu=l(be,"애플리케이션의 스타트업 시간이 길어진다."),be.forEach(n),_u=i(x),Wa=e(x,"LI",{});var Ed=u(Wa);bu=l(Ed,"애플리케이션의 확장(스케일링)이 어렵다. 위의 스타트업 시간이 길어진다는 점과 더해져, 애플리케이션의 인스턴스를 늘리는 것이 어렵다. 따라서 수직적 확장은 가능하지만, 수평적 확장에는 실질적 어려움이 있다."),Ed.forEach(n),wu=i(x),za=e(x,"LI",{});var vd=u(za);yu=l(vd,"지속적 배포(Continious Deployment, CD)가 느려진다. 애플리케이션의 일부분만 수정하더라도 전체 애플리케이션을 모두 배포해야 하며, 이는 애플리케이션이 복잡해질수록 더욱 느려진다."),vd.forEach(n),Cu=i(x),Za=e(x,"LI",{});var md=u(Za);Du=l(md,"특정 기술 스택에 귀속된다. 더 적합한 기술 스택이 나오거나 다른 기술 스택의 전문가이더라도 사용하던 기술 스택을 사용해야 한다. 만약 새로운 언어로 애플리케이션을 작성하고 싶다면, 애플리케이션 전체를 다시 작성해야 한다."),md.forEach(n),Pu=i(x),Ja=e(x,"LI",{});var _d=u(Ja);Su=l(_d,"변경 사항을 적용하기가 어렵고 모듈성이 떨어진다. 이는 DDD를 적용함으로써 해결할 수 있다."),_d.forEach(n),x.forEach(n),Oe=i(s),Wn=e(s,"P",{});var bd=u(Wn);$u=l(bd,"본 포스트에서는 DDD를 통해 간단한 모놀리식 애플리케이션을 작성해볼 것이다."),bd.forEach(n),Ae=i(s),Be=e(s,"BR",{}),Ie=e(s,"BR",{}),Le=i(s),ws=e(s,"H2",{id:!0});var g1=u(ws);ys=e(g1,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var wd=u(ys);Qa=e(wd,"SPAN",{class:!0}),u(Qa).forEach(n),wd.forEach(n),xu=l(g1,"애플리케이션의 요구사항"),g1.forEach(n),Ne=i(s),J=e(s,"P",{});var ha=u(J);hu=l(ha,"가상의 회사인 "),Ya=e(ha,"EM",{});var yd=u(Ya);Ru=l(yd,"CoffeeCo"),yd.forEach(n),Mu=l(ha,"는 국제 커피 체인점이다. "),ga=e(ha,"EM",{});var Cd=u(ga);Ou=l(Cd,"CoffeeCo"),Cd.forEach(n),Au=l(ha,"에 대한 비즈니스 도메인은 다음과 같다."),ha.forEach(n),Te=i(s),zn=e(s,"P",{});var Dd=u(zn);Bu=l(Dd,`이 회사는 작년에만 50개의 매장을 새로 내는 등 급속한 성장을 이루었다.
각 매장은 커피 및 커피 관련 액세서리와 매장별 음료를 판매한다.
매장은 개별적인 가격을 가지고 있지만, 국가적인 마케팅 캠페인이 종종 운영되기도 하며, 이는 품목의 가격에 영향을 미친다.`),Dd.forEach(n),He=i(s),Cs=e(s,"P",{});var Ql=u(Cs);Iu=l(Ql,"CoffeeCo는 음료를 10회 구매할 때마다 1회의 무료 음료를 제공하는 "),st=e(Ql,"EM",{});var Pd=u(st);Lu=l(Pd,"CoffeeBux"),Pd.forEach(n),Nu=l(Ql,`라는 로열티 프로그램을 시작하였다.
모든 매장에서 음료를 구매하거나 교환할 수 있다.`),Ql.forEach(n),Ue=i(s),Zn=e(s,"P",{});var Sd=u(Zn);Tu=l(Sd,"CoffeeCo는 온라인 매장을 출시하는 것을 고려하고 있으며, 구매자가 매월 무제한 커피를 받을 수 있는 월간 구독과 다른 음료에 대한 할인을 고려하고 있다."),Sd.forEach(n),Ge=i(s),Fe=e(s,"BR",{}),je=i(s),Jn=e(s,"P",{});var $d=u(Jn);Hu=l($d,"시스템을 개발할 때 다음과 같은 유비쿼터스 언어와 정의를 따라야 한다."),$d.forEach(n),Ke=i(s),Q=e(s,"UL",{});var Ra=u(Q);Qn=e(Ra,"LI",{});var sd=u(Qn);nt=e(sd,"STRONG",{});var xd=u(nt);Uu=l(xd,"Coffee Lovers"),xd.forEach(n),Gu=l(sd,": CoffeeCo의 고객"),sd.forEach(n),Fu=i(Ra),Yn=e(Ra,"LI",{});var nd=u(Yn);at=e(nd,"STRONG",{});var hd=u(at);ju=l(hd,"CoffeeBux"),hd.forEach(n),Ku=l(nd,": CoffeeCo의 멤버십 프로그램으로, Coffee Lovers가 음료 또는 악세서리를 구매할 때마다 CoffeeBux 포인트가 1점씩 쌓임."),nd.forEach(n),qu=i(Ra),gn=e(Ra,"LI",{});var ad=u(gn);tt=e(ad,"STRONG",{});var Rd=u(tt);Vu=l(Rd,"Tiny, medium, and massive"),Rd.forEach(n),Xu=l(ad,": 음료의 크기를 오름차순으로 나타냄. 일부 음료는 사이즈가 하나로 고정되어 있음."),ad.forEach(n),Ra.forEach(n),qe=i(s),sa=e(s,"P",{});var Md=u(sa);Wu=l(Md,"도메인 모델링 과정에서, 다음과 같은 도메인 객체를 식별할 수 있다."),Md.forEach(n),Ve=i(s),h=e(s,"UL",{});var rn=u(h);pt=e(rn,"LI",{});var Od=u(pt);zu=l(Od,"Store"),Od.forEach(n),Zu=i(rn),et=e(rn,"LI",{});var Ad=u(et);Ju=l(Ad,"Products"),Ad.forEach(n),Qu=i(rn),ot=e(rn,"LI",{});var Bd=u(ot);Yu=l(Bd,"Membership(원문에서는 Loyalty)"),Bd.forEach(n),gu=i(rn),ct=e(rn,"LI",{});var Id=u(ct);sr=l(Id,"Subscription"),Id.forEach(n),rn.forEach(n),Xe=i(s),na=e(s,"P",{});var Ld=u(na);nr=l(Ld,"또한, 시스템의 MVP(Minimum Viable Product)는 다음과 같은 기능을 갖추어야 한다."),Ld.forEach(n),We=i(s),_=e(s,"UL",{});var L=u(_);lt=e(L,"LI",{});var Nd=u(lt);ar=l(Nd,"CoffeeBux를 이용해서 음료 또는 악세서리를 구매할 수 있어야 한다."),Nd.forEach(n),tr=i(L),ut=e(L,"LI",{});var Td=u(ut);pr=l(Td,"신용카드 및 체크카드를 이용해서 음료 또는 악세서리를 구매할 수 있어야 한다."),Td.forEach(n),er=i(L),rt=e(L,"LI",{});var Hd=u(rt);or=l(Hd,"현금을 이용해서 음료 또는 악세서리를 구매할 수 있어야 한다."),Hd.forEach(n),cr=i(L),it=e(L,"LI",{});var Ud=u(it);lr=l(Ud,"구매시마다 CoffeeBux 포인트가 쌓인다."),Ud.forEach(n),ur=i(L),kt=e(L,"LI",{});var Gd=u(kt);rr=l(Gd,"매장별 할인 캠페인"),Gd.forEach(n),ir=i(L),ft=e(L,"LI",{});var Fd=u(ft);kr=l(Fd,"현재는 음료는 한 사이즈만 존재"),Fd.forEach(n),L.forEach(n),ze=i(s),aa=e(s,"P",{});var jd=u(aa);fr=l(jd,"비즈니스 도메인에 대한 사항을 모두 파악했으므로, 이제 DDD를 통해 애플리케이션을 작성해보자."),jd.forEach(n),Ze=i(s),Je=e(s,"BR",{}),Qe=e(s,"BR",{}),Ye=i(s),Ds=e(s,"H2",{id:!0});var td=u(Ds);Ps=e(td,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Kd=u(Ps);dt=e(Kd,"SPAN",{class:!0}),u(dt).forEach(n),Kd.forEach(n),dr=l(td,"프로젝트 시작"),td.forEach(n),ge=i(s),so=e(s,"HR",{}),no=i(s),ta=e(s,"P",{});var qd=u(ta);Er=l(qd,"먼저, 다음과 같은 패키지 구조를 갖는 프로젝트를 생성한다."),qd.forEach(n),ao=i(s),_n=e(s,"PRE",{class:!0});var A3=u(_n);A3.forEach(n),to=i(s),Y=e(s,"P",{});var Ma=u(Y);vr=l(Ma,"Golang에서 "),Et=e(Ma,"CODE",{});var Vd=u(Et);mr=l(Vd,"internal"),Vd.forEach(n),_r=l(Ma,` 폴더는 특수한 의미를 가지며, 다른 프로젝트에서 임포트할 수 없다.
따라서 공개 API에 노출되지 않아야 하는 도메인 코드를 작성하기에 적합하며, 모든 도메인 코드는 `),vt=e(Ma,"CODE",{});var Xd=u(vt);br=l(Xd,"internal"),Xd.forEach(n),wr=l(Ma," 폴더에 작성할 것이다."),Ma.forEach(n),po=i(s),Ss=e(s,"H3",{id:!0});var pd=u(Ss);$s=e(pd,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Wd=u($s);mt=e(Wd,"SPAN",{class:!0}),u(mt).forEach(n),Wd.forEach(n),yr=l(pd,"도메인 모델 작성"),pd.forEach(n),eo=i(s),g=e(s,"P",{});var Oa=u(g);Cr=l(Oa,"가장 먼저 작성해야 할 것은 "),_t=e(Oa,"STRONG",{});var zd=u(_t);Dr=l(zd,"Coffee Lover"),zd.forEach(n),Pr=l(Oa," 모델이다. Coffee Lover는 가장 확실한 "),bt=e(Oa,"STRONG",{});var Zd=u(bt);Sr=l(Zd,"엔티티"),Zd.forEach(n),$r=l(Oa,"이며, 다른 도메인 객체와의 상호작용에서 중심적인 역할을 수행하기 때문이다."),Oa.forEach(n),oo=i(s),is=e(s,"P",{});var we=u(is);wt=e(we,"CODE",{});var Jd=u(wt);xr=l(Jd,"internal"),Jd.forEach(n),hr=l(we," 폴더에 "),yt=e(we,"CODE",{});var Qd=u(yt);Rr=l(Qd,"coffeelover.go"),Qd.forEach(n),Mr=l(we,"파일을 생성하여, Coffee Lover 모델을 작성한다."),we.forEach(n),co=i(s),bn=e(s,"PRE",{class:!0});var B3=u(bn);B3.forEach(n),lo=i(s),T=e(s,"P",{});var Fn=u(T);Ct=e(Fn,"CODE",{});var Yd=u(Ct);Or=l(Yd,"CoffeeLover"),Yd.forEach(n),Ar=l(Fn," 구조체에 "),Dt=e(Fn,"CODE",{});var gd=u(Dt);Br=l(gd,"FirstName"),gd.forEach(n),Ir=l(Fn,"이나 "),Pt=e(Fn,"CODE",{});var s2=u(Pt);Lr=l(s2,"EmailAddress"),s2.forEach(n),Nr=l(Fn,"와 같은 필드가 일부 추가되었는데, 이는 Coffee Lover에 대해 저장할 필요가 있는 추가적인 정보이다. 가령 도메인 전문가나 관계자와의 주기적인 회의를 통해 이러한 정보를 파악할 수 있다."),Fn.forEach(n),uo=i(s),ro=e(s,"BR",{}),io=i(s),C=e(s,"P",{});var us=u(C);Tr=l(us,"이번에는 매장 도메인을 작성해볼 것이다. "),St=e(us,"CODE",{});var n2=u(St);Hr=l(n2,"internal"),n2.forEach(n),Ur=l(us," 폴더 안에 "),$t=e(us,"CODE",{});var a2=u($t);Gr=l(a2,"store"),a2.forEach(n),Fr=l(us," 폴더를 만들고, 그 아래 "),xt=e(us,"CODE",{});var t2=u(xt);jr=l(t2,"store.go"),t2.forEach(n),Kr=l(us," 파일을 생성한다. "),ht=e(us,"CODE",{});var p2=u(ht);qr=l(p2,"store/store.go"),p2.forEach(n),Vr=l(us," 파일에는 다음과 같은 코드를 작성한다."),us.forEach(n),ko=i(s),wn=e(s,"PRE",{class:!0});var I3=u(wn);I3.forEach(n),fo=i(s),pa=e(s,"P",{});var e2=u(pa);Xr=l(e2,"이와 같이 매장은 ID를 가지는 엔티티가 된다."),e2.forEach(n),Eo=i(s),vo=e(s,"BR",{}),mo=i(s),ea=e(s,"P",{});var o2=u(ea);Wr=l(o2,"각 매장에서는 커피, 커피에 관련된 악세사리, 매장별 음료를 팔고, 따라서 우리는 상품을 정의해야 한다."),o2.forEach(n),_o=i(s),oa=e(s,"P",{});var c2=u(oa);zr=l(c2,`여기까지는 비교적 간단한 모델링이었지만, 상품을 정의하는 것은 꽤 까다롭다. 상품은 엔티티일까, 아니면 밸류 오브젝트일까?
결론만 말하자면 상품은 밸류 오브젝트로 두는 것이 좋다. 왜냐하면,`),c2.forEach(n),bo=i(s),R=e(s,"UL",{});var kn=u(R);Rt=e(kn,"LI",{});var l2=u(Rt);Zr=l(l2,"각 상품은 불변성을 가진다고 볼 수 있으며"),l2.forEach(n),Jr=i(kn),Mt=e(kn,"LI",{});var u2=u(Mt);Qr=l(u2,"상품은 도매인 개념을 측정, 설명, 수량화하며,"),u2.forEach(n),Yr=i(kn),Ot=e(kn,"LI",{});var r2=u(Ot);gr=l(r2,"값만으로 동일한 타입의 다른 객체와 구분할 수 있으며,"),r2.forEach(n),si=i(kn),At=e(kn,"LI",{});var i2=u(At);ni=l(i2,"엔티티인지 밸류 오브젝트인지 애매한 것들은 일단 밸류 오브젝트로 처리하고 나중에 엔티티로 변경하는 것이 더 안전한 선택이기 때문이다."),i2.forEach(n),kn.forEach(n),wo=i(s),ks=e(s,"P",{});var ye=u(ks);Bt=e(ye,"CODE",{});var k2=u(Bt);ai=l(k2,"internal"),k2.forEach(n),ti=l(ye," 폴더 안에 "),It=e(ye,"CODE",{});var f2=u(It);pi=l(f2,"product.go"),f2.forEach(n),ei=l(ye," 파일을 생성하고, 다음과 같이 작성한다."),ye.forEach(n),yo=i(s),yn=e(s,"PRE",{class:!0});var L3=u(yn);L3.forEach(n),Co=i(s),Do=e(s,"BR",{}),Po=i(s),xs=e(s,"P",{});var Yl=u(xs);oi=l(Yl,`이제 매장 도메인으로 다시 돌아가서, 매장에서 판매하는 상품을 정의해야 한다.
`),Lt=e(Yl,"CODE",{});var d2=u(Lt);ci=l(d2,"store/store.go"),d2.forEach(n),li=l(Yl," 파일을 다음과 같이 수정한다."),Yl.forEach(n),So=i(s),Cn=e(s,"PRE",{class:!0});var N3=u(Cn);N3.forEach(n),$o=i(s),xo=e(s,"BR",{}),ho=i(s),ca=e(s,"P",{});var E2=u(ca);ui=l(E2,"사용자가 상품을 구매할 때 카드를 사용하는지 혹은 현금을 사용하는지, 카드를 사용했다면 어떤 카드인지에 대한 정보를 표현할 수 있어야 한다."),E2.forEach(n),Ro=i(s),w=e(s,"P",{});var G=u(w);Nt=e(G,"CODE",{});var v2=u(Nt);ri=l(v2,"payment"),v2.forEach(n),ii=l(G," 도메인을 정의할 것이다. "),Tt=e(G,"CODE",{});var m2=u(Tt);ki=l(m2,"internal"),m2.forEach(n),fi=l(G," 폴더 안에 "),Ht=e(G,"CODE",{});var _2=u(Ht);di=l(_2,"payment"),_2.forEach(n),Ei=l(G," 폴더를 만들고, 그 아래 "),Ut=e(G,"CODE",{});var b2=u(Ut);vi=l(b2,"means.go"),b2.forEach(n),mi=l(G," 파일을 생성한다. "),Gt=e(G,"CODE",{});var w2=u(Gt);_i=l(w2,"payment/means.go"),w2.forEach(n),bi=l(G," 파일에는 다음과 같은 코드를 작성한다."),G.forEach(n),Mo=i(s),Dn=e(s,"PRE",{class:!0});var T3=u(Dn);T3.forEach(n),Oo=i(s),M=e(s,"P",{});var fn=u(M);wi=l(fn,"지불 수단을 나타내기 위한 타입인 "),Ft=e(fn,"CODE",{});var y2=u(Ft);yi=l(y2,"Means"),y2.forEach(n),Ci=l(fn,`는 string에 대한 alias이다.
또한 카드에 대한 정보를 나타내는 `),jt=e(fn,"CODE",{});var C2=u(jt);Di=l(C2,"CardDetails"),C2.forEach(n),Pi=l(fn," 타입을 정의하였다. 실제 카드 결제가 동작하는 방식과는 다소 거리가 있으나, 본 예제에서는 "),Kt=e(fn,"CODE",{});var D2=u(Kt);Si=l(D2,"cardToken"),D2.forEach(n),$i=l(fn,"을 사용하여 결제를 처리한다고 가정한다."),fn.forEach(n),Ao=i(s),hs=e(s,"P",{});var gl=u(hs);xi=l(gl,"또한 현금 및 CoffeeBux 결제에 관련된 상수를 정의하였는데, 이는 결제 수단을 나타내는 "),qt=e(gl,"CODE",{});var P2=u(qt);hi=l(P2,"Means"),P2.forEach(n),Ri=l(gl," 타입의 값으로 사용된다."),gl.forEach(n),Bo=i(s),Io=e(s,"BR",{}),Lo=i(s),la=e(s,"P",{});var S2=u(la);Mi=l(S2,`다음으로는 상품의 구매에 관련된 도메인을 작성해야 한다.
coffee lover가 상품을 구매할 때 필요한 정보에 대해 잘 이해하고 있는지, 그리고 알아야 할 추가적인 도메인 정보는 없는지에 대해 도메인 전문가와 대화해야 할 타이밍이 아마 이쯤이 될 것이다.`),S2.forEach(n),No=i(s),P=e(s,"P",{});var Es=u(P);Vt=e(Es,"CODE",{});var $2=u(Vt);Oi=l($2,"internal"),$2.forEach(n),Ai=l(Es," 폴더 안에 "),Xt=e(Es,"CODE",{});var x2=u(Xt);Bi=l(x2,"purchase"),x2.forEach(n),Ii=l(Es," 폴더를 만들고, 그 아래 "),Wt=e(Es,"CODE",{});var h2=u(Wt);Li=l(h2,"purchase.go"),h2.forEach(n),Ni=l(Es," 파일을 생성한다. "),zt=e(Es,"CODE",{});var R2=u(zt);Ti=l(R2,"purchase/purchase.go"),R2.forEach(n),Hi=l(Es," 파일에는 다음과 같은 코드를 작성한다."),Es.forEach(n),To=i(s),Pn=e(s,"PRE",{class:!0});var H3=u(Pn);H3.forEach(n),Ho=i(s),Sn=e(s,"P",{});var ed=u(Sn);Zt=e(ed,"CODE",{});var M2=u(Zt);Ui=l(M2,"Purchase"),M2.forEach(n),Gi=l(ed,"는 ID를 가지는 엔티티여야 한다. 만약 사용자가 구매를 취소하고 싶을 때, ID를 통해 구매를 취소할 수 있어야 하기 때문이다."),ed.forEach(n),Uo=i(s),Go=e(s,"BR",{}),Fo=i(s),D=e(s,"P",{});var rs=u(D);Fi=l(rs,"이제 멤버십에 관한 도메인을 정의할 차례이다. "),Jt=e(rs,"CODE",{});var O2=u(Jt);ji=l(O2,"internal"),O2.forEach(n),Ki=l(rs," 폴더 안에 "),Qt=e(rs,"CODE",{});var A2=u(Qt);qi=l(A2,"membership"),A2.forEach(n),Vi=l(rs," 폴더를 만들고, 그 아래 "),Yt=e(rs,"CODE",{});var B2=u(Yt);Xi=l(B2,"coffeebux.go"),B2.forEach(n),Wi=l(rs," 파일을 생성한다. "),gt=e(rs,"CODE",{});var I2=u(gt);zi=l(I2,"membership/coffeebux.go"),I2.forEach(n),Zi=l(rs," 파일에는 다음과 같은 코드를 작성한다."),rs.forEach(n),jo=i(s),$n=e(s,"PRE",{class:!0});var U3=u($n);U3.forEach(n),Ko=i(s),qo=e(s,"BR",{}),Vo=i(s),ua=e(s,"P",{});var L2=u(ua);Ji=l(L2,"여기까지, 모든 도메인 모델이 정의되었다. 지금까지의 작업이 반영된 패키지 구조는 다음과 같다."),L2.forEach(n),Xo=i(s),xn=e(s,"PRE",{class:!0});var G3=u(xn);G3.forEach(n),Wo=i(s),zo=e(s,"BR",{}),Zo=e(s,"BR",{}),Jo=i(s),Rs=e(s,"H3",{id:!0});var od=u(Rs);Ms=e(od,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var N2=u(Ms);sp=e(N2,"SPAN",{class:!0}),u(sp).forEach(n),N2.forEach(n),Qi=l(od,"도메인 서비스 작성"),od.forEach(n),Qo=i(s),Os=e(s,"P",{});var su=u(Os);Yi=l(su,"이제 도메인 서비스를 작성할 차례이다. "),np=e(su,"CODE",{});var T2=u(np);gi=l(T2,"Purchase"),T2.forEach(n),sk=l(su,"가 서비스 로직이 작성되기에 가장 적절하다고 볼 수 있는데, 이유는 다음과 같다."),su.forEach(n),Yo=i(s),ss=e(s,"UL",{});var Aa=u(ss);ap=e(Aa,"LI",{});var H2=u(ap);nk=l(H2,"도매인 내의 중요한 비즈니스 로직이 수행될 것이며,"),H2.forEach(n),ak=i(Aa),tp=e(Aa,"LI",{});var U2=u(tp);tk=l(U2,"일부 값을 계산해야 하며,"),U2.forEach(n),pk=i(Aa),pp=e(Aa,"LI",{});var G2=u(pp);ek=l(G2,"레포지토리 레이어에 접근해야 하기 때문이다."),G2.forEach(n),Aa.forEach(n),go=i(s),As=e(s,"P",{});var nu=u(As);ok=l(nu,"프로그램을 방어적으로 작성하려면 서비스를 얇게 유지하는 것이 좋고, 따라서 로직 코드를 최대한 도메인 객체에까지 내리는게 좋다. "),ep=e(nu,"CODE",{});var F2=u(ep);ck=l(F2,"purchase/purchase.go"),F2.forEach(n),lk=l(nu,"를 열어, 다음과 같이 각 상품의 가격을 합하여 총 가격을 계산하고, 구매건에 대한 ID를 생성하는 메소드를 추가한다."),nu.forEach(n),sc=i(s),j(Bs.$$.fragment,s),nc=i(s),Is=e(s,"P",{});var au=u(Is);uk=l(au,"이어서, "),op=e(au,"CODE",{});var j2=u(op);rk=l(j2,"purchase/purchase.go"),j2.forEach(n),ik=l(au,"에 서비스를 계속 작성한다."),au.forEach(n),ac=i(s),j(Ls.$$.fragment,s),tc=i(s),O=e(s,"P",{});var dn=u(O);kk=l(dn,"이 서비스는 "),cp=e(dn,"CODE",{});var K2=u(cp);fk=l(K2,"Purchase"),K2.forEach(n),dk=l(dn," 객체에 필요한 값을 추가하기 위해 "),lp=e(dn,"CODE",{});var q2=u(lp);Ek=l(q2,"validateAndEnrich"),q2.forEach(n),vk=l(dn," 메소드를 호출한다. 이후, 결제 수단에 따라 결제를 처리하고, 결제가 성공적으로 이루어지면 "),up=e(dn,"CODE",{});var V2=u(up);mk=l(V2,"Purchase"),V2.forEach(n),_k=l(dn," 객체를 저장한다."),dn.forEach(n),pc=i(s),ec=e(s,"BR",{}),oc=i(s),H=e(s,"P",{});var jn=u(H);rp=e(jn,"CODE",{});var X2=u(rp);bk=l(X2,"purchase.validateAndEnrich()"),X2.forEach(n),wk=l(jn,`를 호출하고 나서 결제 수단에 따라 처리해야 할 몇 가지 로직이 있다.
카드 결제의 경우 `),ip=e(jn,"CODE",{});var W2=u(ip);yk=l(W2,"CardService"),W2.forEach(n),Ck=l(jn,"를 통해 카드 결제를 처리하므로, "),kp=e(jn,"CODE",{});var z2=u(kp);Dk=l(z2,"CardService"),z2.forEach(n),Pk=l(jn,` 인터페이스를 정의할 것이다.
이렇게 인터페이스로 정의하면 개발자 혹은 개발팀이 나뉘어져 있을 때, 정해진 인터페이스를 통해 서로간의 의존성을 줄이면서도 개발 속도를 높이며 원활한 협업이 가능해진다.`),jn.forEach(n),cc=i(s),ns=e(s,"P",{});var Ba=u(ns);Sk=l(Ba,"다음으로, 레포지토리 인터페이스를 정의할 것이다. "),fp=e(Ba,"CODE",{});var Z2=u(fp);$k=l(Z2,"purchase"),Z2.forEach(n),xk=l(Ba," 디렉토리에 "),dp=e(Ba,"CODE",{});var J2=u(dp);hk=l(J2,"repository.go"),J2.forEach(n),Rk=l(Ba," 파일을 생성하고, 다음과 같이 작성한다."),Ba.forEach(n),lc=i(s),hn=e(s,"PRE",{class:!0});var F3=u(hn);F3.forEach(n),uc=i(s),ra=e(s,"P",{});var Q2=u(ra);Mk=l(Q2,"이렇게 인터페이스를 정의하여 사용하는 것은 좋은 방법이다. 레포지토리의 구현체가 어떤 데이터베이스에 의존하든, 인터페이스만 충족시키면 되기 때문이다."),Q2.forEach(n),rc=i(s),ia=e(s,"P",{});var Y2=u(ia);Ok=l(Y2,"지금까지의 작업이 반영된 패키지 구조는 다음과 같다. 프로젝트의 대략적인 윤곽이 잡히고 있다!"),Y2.forEach(n),ic=i(s),Rn=e(s,"PRE",{class:!0});var j3=u(Rn);j3.forEach(n),kc=i(s),fc=e(s,"BR",{}),dc=e(s,"BR",{}),Ec=i(s),Ns=e(s,"H3",{id:!0});var cd=u(Ns);Ts=e(cd,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var g2=u(Ts);Ep=e(g2,"SPAN",{class:!0}),u(Ep).forEach(n),g2.forEach(n),Ak=l(cd,"레포지토리 작성"),cd.forEach(n),vc=i(s),ka=e(s,"P",{});var sE=u(ka);Bk=l(sE,"MongoDB를 사용하여 레포지토리 계층을 구현할 것이다. 먼저, MongoDB Golang Driver를 설치한다."),sE.forEach(n),mc=i(s),Mn=e(s,"PRE",{class:!0});var K3=u(Mn);K3.forEach(n),_c=i(s),as=e(s,"P",{});var Ia=u(as);Ik=l(Ia,"그리고 "),vp=e(Ia,"CODE",{});var nE=u(vp);Lk=l(nE,"Purchase"),nE.forEach(n),Nk=l(Ia," 모델을 저장하기 위한 레포지토리를 작성할 것이므로, "),mp=e(Ia,"CODE",{});var aE=u(mp);Tk=l(aE,"purchase/repository.go"),aE.forEach(n),Hk=l(Ia," 파일에 다음과 같이 이어서 작성한다."),Ia.forEach(n),bc=i(s),j(Hs.$$.fragment,s),wc=i(s),ts=e(s,"P",{});var La=u(ts);Uk=l(La,"다음으로 이전에 선언한 "),_p=e(La,"CODE",{});var tE=u(_p);Gk=l(tE,"Repository"),tE.forEach(n),Fk=l(La," 인터페이스를 충족시키기 위해 "),bp=e(La,"CODE",{});var pE=u(bp);jk=l(pE,"Store"),pE.forEach(n),Kk=l(La," 메소드를 작성한다."),La.forEach(n),yc=i(s),On=e(s,"PRE",{class:!0});var q3=u(On);q3.forEach(n),Cc=i(s),b=e(s,"P",{});var N=u(b);qk=l(N,"여기에서 "),wp=e(N,"CODE",{});var eE=u(wp);Vk=l(eE,"toMongoPurchase"),eE.forEach(n),Xk=l(N," 함수는 "),yp=e(N,"CODE",{});var oE=u(yp);Wk=l(oE,"Purchase"),oE.forEach(n),zk=l(N," 객체를 "),Cp=e(N,"CODE",{});var cE=u(Cp);Zk=l(cE,"MongoPurchase"),cE.forEach(n),Jk=l(N,` 객체로 변환하는 어댑터 함수이며,
`),Dp=e(N,"CODE",{});var lE=u(Dp);Qk=l(lE,"MongoPurchase"),lE.forEach(n),Yk=l(N,"는 "),Pp=e(N,"CODE",{});var uE=u(Pp);gk=l(uE,"Purchase"),uE.forEach(n),sf=l(N," 객체를 저장하기 위해 MongoDB에 저장되는 도큐먼트의 구조체 타입이다."),N.forEach(n),Dc=i(s),A=e(s,"P",{});var En=u(A);nf=l(En,"계속해서 "),Sp=e(En,"CODE",{});var rE=u(Sp);af=l(rE,"purchase/repository.go"),rE.forEach(n),tf=l(En,"에 "),$p=e(En,"CODE",{});var iE=u($p);pf=l(iE,"mongoPurchase"),iE.forEach(n),ef=l(En,"와 "),xp=e(En,"CODE",{});var kE=u(xp);of=l(kE,"toMongoPurchase"),kE.forEach(n),cf=l(En,"를 구현한다."),En.forEach(n),Pc=i(s),j(Us.$$.fragment,s),Sc=i(s),fa=e(s,"P",{});var fE=u(fa);lf=l(fE,"이와 같이 MongoDB에 대한 의존성과 Purchase 애그리거트를 디커플링할 수 있다. 다른 도메인 모델도 마찬가지로 데이터베이스 모델과 디커플링해야 한다."),fE.forEach(n),$c=i(s),da=e(s,"P",{});var dE=u(da);uf=l(dE,"지금까지의 작업이 반영된 패키지 구조는 다음과 같다."),dE.forEach(n),xc=i(s),An=e(s,"PRE",{class:!0});var V3=u(An);V3.forEach(n),hc=i(s),Rc=e(s,"BR",{}),Mc=e(s,"BR",{}),Oc=i(s),Gs=e(s,"H3",{id:!0});var ld=u(Gs);Fs=e(ld,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var EE=u(Fs);hp=e(EE,"SPAN",{class:!0}),u(hp).forEach(n),EE.forEach(n),rf=l(ld,"인프라스트럭처 서비스 작성"),ld.forEach(n),Ac=i(s),js=e(s,"P",{});var tu=u(js);kf=l(tu,"결제 서비스를 위해 "),Rp=e(tu,"EM",{});var vE=u(Rp);ff=l(vE,"Stripe"),vE.forEach(n),df=l(tu,`라는 것을 써볼 것이다.
Mongo 레포지토리처럼 Stripe에 대한 의존성을 디커플링하기 위해 인터페이스를 정의할 것이다.`),tu.forEach(n),Bc=i(s),Ea=e(s,"P",{});var mE=u(Ea);Ef=l(mE,"먼저, 다음 명령어로 Stripe Golang SDK를 설치한다."),mE.forEach(n),Ic=i(s),Bn=e(s,"PRE",{class:!0});var X3=u(Bn);X3.forEach(n),Lc=i(s),va=e(s,"P",{});var _E=u(va);vf=l(_E,"이거 뭔데 73버전까지 있는거지..?"),_E.forEach(n),Nc=i(s),ps=e(s,"P",{});var Na=u(ps);mf=l(Na,"아무튼 "),Mp=e(Na,"CODE",{});var bE=u(Mp);_f=l(bE,"payment"),bE.forEach(n),bf=l(Na," 폴더에 "),Op=e(Na,"CODE",{});var wE=u(Op);wf=l(wE,"stripe.go"),wE.forEach(n),yf=l(Na," 파일을 생성하고, 다음과 같이 작성한다."),Na.forEach(n),Tc=i(s),In=e(s,"PRE",{class:!0});var W3=u(In);W3.forEach(n),Hc=i(s),es=e(s,"P",{});var Ta=u(es);Cf=l(Ta,"그리고 "),Ap=e(Ta,"CODE",{});var yE=u(Ap);Df=l(yE,"CardChargeService"),yE.forEach(n),Pf=l(Ta," 인터페이스를 충족시키기 위해 "),Bp=e(Ta,"CODE",{});var CE=u(Bp);Sf=l(CE,"ChargeCard"),CE.forEach(n),$f=l(Ta," 메소드를 작성한다."),Ta.forEach(n),Uc=i(s),j(Ks.$$.fragment,s),Gc=i(s),ma=e(s,"P",{});var DE=u(ma);xf=l(DE,"이와 같이 외부 리소스인 Stripe를 사용하는 코드를 인프라스트럭처 레이어에 작성하였다."),DE.forEach(n),Fc=i(s),jc=e(s,"BR",{}),Kc=e(s,"BR",{}),qc=i(s),qs=e(s,"H2",{id:!0});var ud=u(qs);Vs=e(ud,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var PE=u(Vs);Ip=e(PE,"SPAN",{class:!0}),u(Ip).forEach(n),PE.forEach(n),hf=l(ud,"기능 추가 구현하기"),ud.forEach(n),Vc=i(s),Xc=e(s,"HR",{}),Wc=i(s),_a=e(s,"P",{});var SE=u(_a);Rf=l(SE,"DDD의 장점 중 하나는 모듈성 덕분에 새로운 기능을 추가하기가 쉽다는 것이다. 아직 비즈니스 요구사항을 모두 충족시킨 것은 아니기 떄문에, 남은 요구사항을 충족시키기 위해 기능을 추가해보자."),SE.forEach(n),zc=i(s),Xs=e(s,"H3",{id:!0});var rd=u(Xs);Ws=e(rd,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var $E=u(Ws);Lp=e($E,"SPAN",{class:!0}),u(Lp).forEach(n),$E.forEach(n),Mf=l(rd,"멤버십 프로그램 구현"),rd.forEach(n),Zc=i(s),zs=e(s,"P",{});var pu=u(zs);Of=l(pu,"요구사항 중 10회 구매시 1회 무료 음료를 제공하는 멤버십 프로그램이 있다. 이를 구현하기 위해 "),Np=e(pu,"CODE",{});var xE=u(Np);Af=l(xE,"membership/coffeebux.go"),xE.forEach(n),Bf=l(pu," 파일에 다음과 같은 메소드를 추가한다."),pu.forEach(n),Jc=i(s),Ln=e(s,"PRE",{class:!0});var z3=u(Ln);z3.forEach(n),Qc=i(s),S=e(s,"P",{});var vs=u(S);Tp=e(vs,"CODE",{});var hE=u(Tp);If=l(hE,"AddStamp"),hE.forEach(n),Lf=l(vs," 무료 음료를 제공하는 로직을 구현한 메소드이다. 이제 "),Hp=e(vs,"CODE",{});var RE=u(Hp);Nf=l(RE,"purchase/purchase.go"),RE.forEach(n),Tf=l(vs," 파일의 "),Up=e(vs,"CODE",{});var ME=u(Up);Hf=l(ME,"CompletePurchase"),ME.forEach(n),Uf=l(vs," 메소드에서 "),Gp=e(vs,"EM",{});var OE=u(Gp);Gf=l(OE,"coffeebux"),OE.forEach(n),Ff=l(vs," 스탬프를 쌓는 로직을 추가한다."),vs.forEach(n),Yc=i(s),j(Zs.$$.fragment,s),gc=i(s),$=e(s,"P",{});var ms=u($);Fp=e(ms,"CODE",{});var AE=u(Fp);jf=l(AE,"CompletePurchase"),AE.forEach(n),Kf=l(ms,"의 파라미터로 "),jp=e(ms,"CODE",{});var BE=u(jp);qf=l(BE,"coffeeBuxCard"),BE.forEach(n),Vf=l(ms,"를 추가하였는데, 고객이 멤버십을 가지고 있지 않을 수 있기 때문에 "),Kp=e(ms,"CODE",{});var IE=u(Kp);Xf=l(IE,"nil"),IE.forEach(n),Wf=l(ms," 여부를 검사해야 한다. 검사 이후에는 단지 "),qp=e(ms,"CODE",{});var LE=u(qp);zf=l(LE,"AddStamp"),LE.forEach(n),Zf=l(ms," 메소드를 호출함으로써, 아주 쉽게 멤버십 프로그램을 구현할 수 있다."),ms.forEach(n),sl=i(s),nl=e(s,"BR",{}),al=i(s),os=e(s,"P",{});var Ha=u(os);Jf=l(Ha,"이제 결제 수단으로 CoffeeBux를 사용할 수 있도록 구현해야 하는데, 이는 결제 도메인과 멤버십 도메인에 모두 속하기 때문에 어디에 구현해야 할지 고민이 될 수 있다. 이를 구현하는 데는 여러 가지 방법이 있을 수 있으며, 정답은 없다. 이번 예제에서는 결제 도메인에 구현할 것이다. "),Vp=e(Ha,"CODE",{});var NE=u(Vp);Qf=l(NE,"purchase/purchase.go"),NE.forEach(n),Yf=l(Ha," 파일을 열어 다음과 같이 "),Xp=e(Ha,"CODE",{});var TE=u(Xp);gf=l(TE,"Pay"),TE.forEach(n),s1=l(Ha," 메소드를 추가한다."),Ha.forEach(n),tl=i(s),j(Js.$$.fragment,s),pl=i(s),ba=e(s,"P",{});var HE=u(ba);n1=l(HE,"이와 같이 사용할 수 있는 무료 음료의 수를 확인하고, 충분한 음료가 있다면 무료 음료의 수를 차감한다."),HE.forEach(n),el=i(s),ol=e(s,"BR",{}),cl=i(s),B=e(s,"P",{});var vn=u(B);a1=l(vn,"남은 것은 구매 서비스의 "),Wp=e(vn,"CODE",{});var UE=u(Wp);t1=l(UE,"CompletePurchase"),UE.forEach(n),p1=l(vn," 메소드에서 결제 수단으로 CoffeeBux를 사용할 수 있도록 구현하는 것이다. "),zp=e(vn,"CODE",{});var GE=u(zp);e1=l(GE,"purchase/purchase.go"),GE.forEach(n),o1=l(vn," 파일을 열어 다음과 같이 "),Zp=e(vn,"CODE",{});var FE=u(Zp);c1=l(FE,"CompletePurchase"),FE.forEach(n),l1=l(vn," 메소드를 수정한다."),vn.forEach(n),ll=i(s),j(Qs.$$.fragment,s),ul=i(s),Ys=e(s,"P",{});var eu=u(Ys);u1=l(eu,`이와 같이 결제 수단으로 CoffeeBux를 사용할 수 있도록 구현하였다.
이 때 CoffeeBux를 사용하여도 `),Jp=e(eu,"CODE",{});var jE=u(Jp);r1=l(jE,"AddStamp"),jE.forEach(n),i1=l(eu," 메소드를 호출하여 멤버십 포인트가 쌓이도록 구현하였는데, 이러한 비즈니스 불변성은 도메인 전문가와의 대화를 통해 확인할 수 있다."),eu.forEach(n),rl=i(s),il=e(s,"BR",{}),kl=e(s,"BR",{}),fl=i(s),gs=e(s,"H3",{id:!0});var id=u(gs);sn=e(id,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var KE=u(sn);Qp=e(KE,"SPAN",{class:!0}),u(Qp).forEach(n),KE.forEach(n),k1=l(id,"매장별 할인 캠페인 구현"),id.forEach(n),dl=i(s),cs=e(s,"P",{});var Ua=u(cs);f1=l(Ua,"매장별 할인 정보를 저장하기 위해서는 레포지토리 계층이 필요하다. "),Yp=e(Ua,"CODE",{});var qE=u(Yp);d1=l(qE,"store"),qE.forEach(n),E1=l(Ua," 폴더에 "),gp=e(Ua,"CODE",{});var VE=u(gp);v1=l(VE,"repository.go"),VE.forEach(n),m1=l(Ua," 파일을 생성하고, 다음과 같이 작성한다."),Ua.forEach(n),El=i(s),j(nn.$$.fragment,s),vl=i(s),wa=e(s,"P",{});var XE=u(wa);_1=l(XE,"이 코드는 이전의 레포지토리 레이어와 비슷하다. 다만 현재 각각의 레포지토리 레이어에서 Mongo 연결 풀을 중복으로 생성하고 있는데, 이를 다른 패키지로 분리하여 공유하는 것이 향후 개선사항이 될 수 있다."),XE.forEach(n),ml=i(s),U=e(s,"P",{});var Kn=u(U);se=e(Kn,"CODE",{});var WE=u(se);b1=l(WE,"GetStoreDiscount"),WE.forEach(n),w1=l(Kn," 메소드를 사용할 때 에러 체크를 하는 것을 알 수있는데, 만약 "),ne=e(Kn,"CODE",{});var zE=u(ne);y1=l(zE,"ErrNoDocuments"),zE.forEach(n),C1=l(Kn," 에러가 발생하면 할인이 적용되지 않은 것이므로 "),ae=e(Kn,"CODE",{});var ZE=u(ae);D1=l(ZE,"ErrNoDiscount"),ZE.forEach(n),P1=l(Kn," 에러를 반환하며, 이는 실제 에러라기보다는 할인이 적용되지 않았음을 명시적으로 알리는 것이다."),Kn.forEach(n),_l=i(s),bl=e(s,"BR",{}),wl=i(s),ls=e(s,"P",{});var Ga=u(ls);S1=l(Ga,"이렇게 구현된 매장별 할인을 구매 서비스에 추가할 것이다. "),te=e(Ga,"CODE",{});var JE=u(te);$1=l(JE,"purchase/purchase.go"),JE.forEach(n),x1=l(Ga," 파일을 열어 "),pe=e(Ga,"CODE",{});var QE=u(pe);h1=l(QE,"StoreService"),QE.forEach(n),R1=l(Ga," 인터페이스를 정의하고, 이를 구매 서비스 구조체에 추가한다."),Ga.forEach(n),yl=i(s),Nn=e(s,"PRE",{class:!0});var Z3=u(Nn);Z3.forEach(n),Cl=i(s),an=e(s,"P",{});var ou=u(an);M1=l(ou,"이후 "),ee=e(ou,"CODE",{});var YE=u(ee);O1=l(YE,"CompletePurchase"),YE.forEach(n),A1=l(ou," 메소드에서 매장별 할인을 적용하는 로직을 추가한다."),ou.forEach(n),Dl=i(s),j(tn.$$.fragment,s),Pl=i(s),ya=e(s,"P",{});var gE=u(ya);B1=l(gE,"이렇게 이것저것 추가하고 나니 가독성도 떨어지고 도메인이 복잡해졌다. 리팩토링이 필요해 보인다."),gE.forEach(n),Sl=i(s),j(pn.$$.fragment,s),$l=i(s),en=e(s,"P",{});var cu=u(en);I1=l(cu,"이와 같이 "),oe=e(cu,"CODE",{});var s3=u(oe);L1=l(s3,"calculateStoreSpecificDiscount"),s3.forEach(n),N1=l(cu,"함수로 따로 분리하였고, 훨씬 더 보기 깔끔해진 만큼 도메인 전문가와 이야기하기 더 쉬울 것이다."),cu.forEach(n),xl=i(s),hl=e(s,"BR",{}),Rl=i(s),I=e(s,"P",{});var mn=u(I);T1=l(mn,"마지막으로 "),ce=e(mn,"CODE",{});var n3=u(ce);H1=l(n3,"store/store.go"),n3.forEach(n),U1=l(mn,"를 열어 "),le=e(mn,"CODE",{});var a3=u(le);G1=l(a3,"StoreService"),a3.forEach(n),F1=l(mn,"를 충족시키는 "),ue=e(mn,"CODE",{});var t3=u(ue);j1=l(t3,"Service"),t3.forEach(n),K1=l(mn," 구조체를 작성한다."),mn.forEach(n),Ml=i(s),Tn=e(s,"PRE",{class:!0});var J3=u(Tn);J3.forEach(n),Ol=i(s),Al=e(s,"BR",{}),Bl=i(s),Ca=e(s,"P",{});var p3=u(Ca);q1=l(p3,"이로써 Domain Driven Design 기반의 전체 서비스가 완성되었다. 지금까지의 작업이 반영된 패키지 구조는 다음과 같다."),p3.forEach(n),Il=i(s),Hn=e(s,"PRE",{class:!0});var Q3=u(Hn);Q3.forEach(n),Ll=i(s),Nl=e(s,"BR",{}),Tl=e(s,"BR",{}),Hl=i(s),on=e(s,"H2",{id:!0});var kd=u(on);cn=e(kd,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var e3=u(cn);re=e(e3,"SPAN",{class:!0}),u(re).forEach(n),e3.forEach(n),V1=l(kd,"마치며"),kd.forEach(n),Ul=i(s),Gl=e(s,"HR",{}),Fl=i(s),Da=e(s,"P",{});var o3=u(Da);X1=l(o3,`이렇게 모놀리식 아키텍처에 DDD를 적용해보았다.
현재로서는 서비스만 구현되어 있지만 REST API 등 인터페이스가 정의된다면 어떻게 구현해야 할지 고민해보는 것도 좋을 것 같다.
또한 유닛 테스트 또는 통합 테스트를 작성해보는 것도 좋을 것 같다.`),o3.forEach(n),jl=i(s),Pa=e(s,"P",{});var c3=u(Pa);W1=l(c3,`DDD가 적용되지 않은 기존 코드에서, 이 포스트에서와 같이 레포지토리 패턴을 사용하고 도메인 객체를 사용하도록 리팩토링하는 것은 꽤 노력이 요구되는 일일 수 있다.
하지만 인프라스트럭처 레이어를 적용하는 것은 꽤 권장되는 방법이다.
비즈니스 로직과 인프라스트럭처를 분리함으로써, 비즈니스 로직을 테스트하기가 훨씬 쉬워지기 때문이다.`),c3.forEach(n),Kl=i(s),ql=e(s,"BR",{}),Vl=e(s,"BR",{}),Xl=i(s),ln=e(s,"H2",{id:!0});var fd=u(ln);un=e(fd,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var l3=u(un);ie=e(l3,"SPAN",{class:!0}),u(ie).forEach(n),l3.forEach(n),z1=l(fd,"References"),fd.forEach(n),Wl=i(s),zl=e(s,"HR",{}),Zl=i(s),Sa=e(s,"CENTER",{});var u3=u(Sa);fs=e(u3,"P",{});var Fa=u(fs);Un=e(Fa,"A",{href:!0,rel:!0});var r3=u(Un);$a=e(r3,"IMG",{src:!0,alt:!0}),r3.forEach(n),Z1=i(Fa),J1=e(Fa,"BR",{}),Q1=i(Fa),Gn=e(Fa,"A",{href:!0,rel:!0});var i3=u(Gn);Y1=l(i3,"Matthew Boyle, Domain-Driven Design with Golang』, O’Reilly Media, Inc."),i3.forEach(n),Fa.forEach(n),u3.forEach(n),this.h()},h(){k(ja,"class","icon icon-link"),k(bs,"aria-hidden","true"),k(bs,"tabindex","-1"),k(bs,"href","#모놀리식-애플리케이션이란"),k(_s,"id","모놀리식-애플리케이션이란"),k(Qa,"class","icon icon-link"),k(ys,"aria-hidden","true"),k(ys,"tabindex","-1"),k(ys,"href","#애플리케이션의-요구사항"),k(ws,"id","애플리케이션의-요구사항"),k(dt,"class","icon icon-link"),k(Ps,"aria-hidden","true"),k(Ps,"tabindex","-1"),k(Ps,"href","#프로젝트-시작"),k(Ds,"id","프로젝트-시작"),k(_n,"class","language-bash"),k(mt,"class","icon icon-link"),k($s,"aria-hidden","true"),k($s,"tabindex","-1"),k($s,"href","#도메인-모델-작성"),k(Ss,"id","도메인-모델-작성"),k(bn,"class","language-go"),k(wn,"class","language-go"),k(yn,"class","language-go"),k(Cn,"class","language-go"),k(Dn,"class","language-go"),k(Pn,"class","language-go"),k($n,"class","language-go"),k(xn,"class","language-bash"),k(sp,"class","icon icon-link"),k(Ms,"aria-hidden","true"),k(Ms,"tabindex","-1"),k(Ms,"href","#도메인-서비스-작성"),k(Rs,"id","도메인-서비스-작성"),k(hn,"class","language-go"),k(Rn,"class","language-bash"),k(Ep,"class","icon icon-link"),k(Ts,"aria-hidden","true"),k(Ts,"tabindex","-1"),k(Ts,"href","#레포지토리-작성"),k(Ns,"id","레포지토리-작성"),k(Mn,"class","language-bash"),k(On,"class","language-go"),k(An,"class","language-bash"),k(hp,"class","icon icon-link"),k(Fs,"aria-hidden","true"),k(Fs,"tabindex","-1"),k(Fs,"href","#인프라스트럭처-서비스-작성"),k(Gs,"id","인프라스트럭처-서비스-작성"),k(Bn,"class","language-bash"),k(In,"class","language-go"),k(Ip,"class","icon icon-link"),k(Vs,"aria-hidden","true"),k(Vs,"tabindex","-1"),k(Vs,"href","#기능-추가-구현하기"),k(qs,"id","기능-추가-구현하기"),k(Lp,"class","icon icon-link"),k(Ws,"aria-hidden","true"),k(Ws,"tabindex","-1"),k(Ws,"href","#멤버십-프로그램-구현"),k(Xs,"id","멤버십-프로그램-구현"),k(Ln,"class","language-go"),k(Qp,"class","icon icon-link"),k(sn,"aria-hidden","true"),k(sn,"tabindex","-1"),k(sn,"href","#매장별-할인-캠페인-구현"),k(gs,"id","매장별-할인-캠페인-구현"),k(Nn,"class","language-go"),k(Tn,"class","language-go"),k(Hn,"class","language-bash"),k(re,"class","icon icon-link"),k(cn,"aria-hidden","true"),k(cn,"tabindex","-1"),k(cn,"href","#마치며"),k(on,"id","마치며"),k(ie,"class","icon icon-link"),k(un,"aria-hidden","true"),k(un,"tabindex","-1"),k(un,"href","#references"),k(ln,"id","references"),nv($a.src,dd="https://learning.oreilly.com/covers/urn:orm:book:9781804613450/400w/")||k($a,"src",dd),k($a,"alt","Domain-Driven Design with Golang Cover"),k(Un,"href","https://learning.oreilly.com/library/view/domain-driven-design-with/9781804613450/"),k(Un,"rel","nofollow"),k(Gn,"href","https://learning.oreilly.com/library/view/domain-driven-design-with/9781804613450/"),k(Gn,"rel","nofollow")},m(s,t){o(s,f,t),a(f,v),o(s,d,t),o(s,E,t),o(s,Ce,t),o(s,De,t),o(s,_s,t),a(_s,bs),a(bs,ja),a(_s,lu),o(s,Pe,t),o(s,Se,t),o(s,$e,t),o(s,qn,t),a(qn,uu),o(s,xe,t),o(s,Vn,t),a(Vn,ru),o(s,he,t),o(s,Z,t),a(Z,Ka),a(Ka,iu),a(Z,ku),a(Z,qa),a(qa,fu),a(Z,du),a(Z,Va),a(Va,Eu),o(s,Re,t),o(s,Xn,t),a(Xn,vu),o(s,Me,t),o(s,y,t),a(y,Xa),a(Xa,mu),a(y,_u),a(y,Wa),a(Wa,bu),a(y,wu),a(y,za),a(za,yu),a(y,Cu),a(y,Za),a(Za,Du),a(y,Pu),a(y,Ja),a(Ja,Su),o(s,Oe,t),o(s,Wn,t),a(Wn,$u),o(s,Ae,t),o(s,Be,t),o(s,Ie,t),o(s,Le,t),o(s,ws,t),a(ws,ys),a(ys,Qa),a(ws,xu),o(s,Ne,t),o(s,J,t),a(J,hu),a(J,Ya),a(Ya,Ru),a(J,Mu),a(J,ga),a(ga,Ou),a(J,Au),o(s,Te,t),o(s,zn,t),a(zn,Bu),o(s,He,t),o(s,Cs,t),a(Cs,Iu),a(Cs,st),a(st,Lu),a(Cs,Nu),o(s,Ue,t),o(s,Zn,t),a(Zn,Tu),o(s,Ge,t),o(s,Fe,t),o(s,je,t),o(s,Jn,t),a(Jn,Hu),o(s,Ke,t),o(s,Q,t),a(Q,Qn),a(Qn,nt),a(nt,Uu),a(Qn,Gu),a(Q,Fu),a(Q,Yn),a(Yn,at),a(at,ju),a(Yn,Ku),a(Q,qu),a(Q,gn),a(gn,tt),a(tt,Vu),a(gn,Xu),o(s,qe,t),o(s,sa,t),a(sa,Wu),o(s,Ve,t),o(s,h,t),a(h,pt),a(pt,zu),a(h,Zu),a(h,et),a(et,Ju),a(h,Qu),a(h,ot),a(ot,Yu),a(h,gu),a(h,ct),a(ct,sr),o(s,Xe,t),o(s,na,t),a(na,nr),o(s,We,t),o(s,_,t),a(_,lt),a(lt,ar),a(_,tr),a(_,ut),a(ut,pr),a(_,er),a(_,rt),a(rt,or),a(_,cr),a(_,it),a(it,lr),a(_,ur),a(_,kt),a(kt,rr),a(_,ir),a(_,ft),a(ft,kr),o(s,ze,t),o(s,aa,t),a(aa,fr),o(s,Ze,t),o(s,Je,t),o(s,Qe,t),o(s,Ye,t),o(s,Ds,t),a(Ds,Ps),a(Ps,dt),a(Ds,dr),o(s,ge,t),o(s,so,t),o(s,no,t),o(s,ta,t),a(ta,Er),o(s,ao,t),o(s,_n,t),_n.innerHTML=k3,o(s,to,t),o(s,Y,t),a(Y,vr),a(Y,Et),a(Et,mr),a(Y,_r),a(Y,vt),a(vt,br),a(Y,wr),o(s,po,t),o(s,Ss,t),a(Ss,$s),a($s,mt),a(Ss,yr),o(s,eo,t),o(s,g,t),a(g,Cr),a(g,_t),a(_t,Dr),a(g,Pr),a(g,bt),a(bt,Sr),a(g,$r),o(s,oo,t),o(s,is,t),a(is,wt),a(wt,xr),a(is,hr),a(is,yt),a(yt,Rr),a(is,Mr),o(s,co,t),o(s,bn,t),bn.innerHTML=f3,o(s,lo,t),o(s,T,t),a(T,Ct),a(Ct,Or),a(T,Ar),a(T,Dt),a(Dt,Br),a(T,Ir),a(T,Pt),a(Pt,Lr),a(T,Nr),o(s,uo,t),o(s,ro,t),o(s,io,t),o(s,C,t),a(C,Tr),a(C,St),a(St,Hr),a(C,Ur),a(C,$t),a($t,Gr),a(C,Fr),a(C,xt),a(xt,jr),a(C,Kr),a(C,ht),a(ht,qr),a(C,Vr),o(s,ko,t),o(s,wn,t),wn.innerHTML=d3,o(s,fo,t),o(s,pa,t),a(pa,Xr),o(s,Eo,t),o(s,vo,t),o(s,mo,t),o(s,ea,t),a(ea,Wr),o(s,_o,t),o(s,oa,t),a(oa,zr),o(s,bo,t),o(s,R,t),a(R,Rt),a(Rt,Zr),a(R,Jr),a(R,Mt),a(Mt,Qr),a(R,Yr),a(R,Ot),a(Ot,gr),a(R,si),a(R,At),a(At,ni),o(s,wo,t),o(s,ks,t),a(ks,Bt),a(Bt,ai),a(ks,ti),a(ks,It),a(It,pi),a(ks,ei),o(s,yo,t),o(s,yn,t),yn.innerHTML=E3,o(s,Co,t),o(s,Do,t),o(s,Po,t),o(s,xs,t),a(xs,oi),a(xs,Lt),a(Lt,ci),a(xs,li),o(s,So,t),o(s,Cn,t),Cn.innerHTML=v3,o(s,$o,t),o(s,xo,t),o(s,ho,t),o(s,ca,t),a(ca,ui),o(s,Ro,t),o(s,w,t),a(w,Nt),a(Nt,ri),a(w,ii),a(w,Tt),a(Tt,ki),a(w,fi),a(w,Ht),a(Ht,di),a(w,Ei),a(w,Ut),a(Ut,vi),a(w,mi),a(w,Gt),a(Gt,_i),a(w,bi),o(s,Mo,t),o(s,Dn,t),Dn.innerHTML=m3,o(s,Oo,t),o(s,M,t),a(M,wi),a(M,Ft),a(Ft,yi),a(M,Ci),a(M,jt),a(jt,Di),a(M,Pi),a(M,Kt),a(Kt,Si),a(M,$i),o(s,Ao,t),o(s,hs,t),a(hs,xi),a(hs,qt),a(qt,hi),a(hs,Ri),o(s,Bo,t),o(s,Io,t),o(s,Lo,t),o(s,la,t),a(la,Mi),o(s,No,t),o(s,P,t),a(P,Vt),a(Vt,Oi),a(P,Ai),a(P,Xt),a(Xt,Bi),a(P,Ii),a(P,Wt),a(Wt,Li),a(P,Ni),a(P,zt),a(zt,Ti),a(P,Hi),o(s,To,t),o(s,Pn,t),Pn.innerHTML=_3,o(s,Ho,t),o(s,Sn,t),a(Sn,Zt),a(Zt,Ui),a(Sn,Gi),o(s,Uo,t),o(s,Go,t),o(s,Fo,t),o(s,D,t),a(D,Fi),a(D,Jt),a(Jt,ji),a(D,Ki),a(D,Qt),a(Qt,qi),a(D,Vi),a(D,Yt),a(Yt,Xi),a(D,Wi),a(D,gt),a(gt,zi),a(D,Zi),o(s,jo,t),o(s,$n,t),$n.innerHTML=b3,o(s,Ko,t),o(s,qo,t),o(s,Vo,t),o(s,ua,t),a(ua,Ji),o(s,Xo,t),o(s,xn,t),xn.innerHTML=w3,o(s,Wo,t),o(s,zo,t),o(s,Zo,t),o(s,Jo,t),o(s,Rs,t),a(Rs,Ms),a(Ms,sp),a(Rs,Qi),o(s,Qo,t),o(s,Os,t),a(Os,Yi),a(Os,np),a(np,gi),a(Os,sk),o(s,Yo,t),o(s,ss,t),a(ss,ap),a(ap,nk),a(ss,ak),a(ss,tp),a(tp,tk),a(ss,pk),a(ss,pp),a(pp,ek),o(s,go,t),o(s,As,t),a(As,ok),a(As,ep),a(ep,ck),a(As,lk),o(s,sc,t),K(Bs,s,t),o(s,nc,t),o(s,Is,t),a(Is,uk),a(Is,op),a(op,rk),a(Is,ik),o(s,ac,t),K(Ls,s,t),o(s,tc,t),o(s,O,t),a(O,kk),a(O,cp),a(cp,fk),a(O,dk),a(O,lp),a(lp,Ek),a(O,vk),a(O,up),a(up,mk),a(O,_k),o(s,pc,t),o(s,ec,t),o(s,oc,t),o(s,H,t),a(H,rp),a(rp,bk),a(H,wk),a(H,ip),a(ip,yk),a(H,Ck),a(H,kp),a(kp,Dk),a(H,Pk),o(s,cc,t),o(s,ns,t),a(ns,Sk),a(ns,fp),a(fp,$k),a(ns,xk),a(ns,dp),a(dp,hk),a(ns,Rk),o(s,lc,t),o(s,hn,t),hn.innerHTML=y3,o(s,uc,t),o(s,ra,t),a(ra,Mk),o(s,rc,t),o(s,ia,t),a(ia,Ok),o(s,ic,t),o(s,Rn,t),Rn.innerHTML=C3,o(s,kc,t),o(s,fc,t),o(s,dc,t),o(s,Ec,t),o(s,Ns,t),a(Ns,Ts),a(Ts,Ep),a(Ns,Ak),o(s,vc,t),o(s,ka,t),a(ka,Bk),o(s,mc,t),o(s,Mn,t),Mn.innerHTML=D3,o(s,_c,t),o(s,as,t),a(as,Ik),a(as,vp),a(vp,Lk),a(as,Nk),a(as,mp),a(mp,Tk),a(as,Hk),o(s,bc,t),K(Hs,s,t),o(s,wc,t),o(s,ts,t),a(ts,Uk),a(ts,_p),a(_p,Gk),a(ts,Fk),a(ts,bp),a(bp,jk),a(ts,Kk),o(s,yc,t),o(s,On,t),On.innerHTML=P3,o(s,Cc,t),o(s,b,t),a(b,qk),a(b,wp),a(wp,Vk),a(b,Xk),a(b,yp),a(yp,Wk),a(b,zk),a(b,Cp),a(Cp,Zk),a(b,Jk),a(b,Dp),a(Dp,Qk),a(b,Yk),a(b,Pp),a(Pp,gk),a(b,sf),o(s,Dc,t),o(s,A,t),a(A,nf),a(A,Sp),a(Sp,af),a(A,tf),a(A,$p),a($p,pf),a(A,ef),a(A,xp),a(xp,of),a(A,cf),o(s,Pc,t),K(Us,s,t),o(s,Sc,t),o(s,fa,t),a(fa,lf),o(s,$c,t),o(s,da,t),a(da,uf),o(s,xc,t),o(s,An,t),An.innerHTML=S3,o(s,hc,t),o(s,Rc,t),o(s,Mc,t),o(s,Oc,t),o(s,Gs,t),a(Gs,Fs),a(Fs,hp),a(Gs,rf),o(s,Ac,t),o(s,js,t),a(js,kf),a(js,Rp),a(Rp,ff),a(js,df),o(s,Bc,t),o(s,Ea,t),a(Ea,Ef),o(s,Ic,t),o(s,Bn,t),Bn.innerHTML=$3,o(s,Lc,t),o(s,va,t),a(va,vf),o(s,Nc,t),o(s,ps,t),a(ps,mf),a(ps,Mp),a(Mp,_f),a(ps,bf),a(ps,Op),a(Op,wf),a(ps,yf),o(s,Tc,t),o(s,In,t),In.innerHTML=x3,o(s,Hc,t),o(s,es,t),a(es,Cf),a(es,Ap),a(Ap,Df),a(es,Pf),a(es,Bp),a(Bp,Sf),a(es,$f),o(s,Uc,t),K(Ks,s,t),o(s,Gc,t),o(s,ma,t),a(ma,xf),o(s,Fc,t),o(s,jc,t),o(s,Kc,t),o(s,qc,t),o(s,qs,t),a(qs,Vs),a(Vs,Ip),a(qs,hf),o(s,Vc,t),o(s,Xc,t),o(s,Wc,t),o(s,_a,t),a(_a,Rf),o(s,zc,t),o(s,Xs,t),a(Xs,Ws),a(Ws,Lp),a(Xs,Mf),o(s,Zc,t),o(s,zs,t),a(zs,Of),a(zs,Np),a(Np,Af),a(zs,Bf),o(s,Jc,t),o(s,Ln,t),Ln.innerHTML=h3,o(s,Qc,t),o(s,S,t),a(S,Tp),a(Tp,If),a(S,Lf),a(S,Hp),a(Hp,Nf),a(S,Tf),a(S,Up),a(Up,Hf),a(S,Uf),a(S,Gp),a(Gp,Gf),a(S,Ff),o(s,Yc,t),K(Zs,s,t),o(s,gc,t),o(s,$,t),a($,Fp),a(Fp,jf),a($,Kf),a($,jp),a(jp,qf),a($,Vf),a($,Kp),a(Kp,Xf),a($,Wf),a($,qp),a(qp,zf),a($,Zf),o(s,sl,t),o(s,nl,t),o(s,al,t),o(s,os,t),a(os,Jf),a(os,Vp),a(Vp,Qf),a(os,Yf),a(os,Xp),a(Xp,gf),a(os,s1),o(s,tl,t),K(Js,s,t),o(s,pl,t),o(s,ba,t),a(ba,n1),o(s,el,t),o(s,ol,t),o(s,cl,t),o(s,B,t),a(B,a1),a(B,Wp),a(Wp,t1),a(B,p1),a(B,zp),a(zp,e1),a(B,o1),a(B,Zp),a(Zp,c1),a(B,l1),o(s,ll,t),K(Qs,s,t),o(s,ul,t),o(s,Ys,t),a(Ys,u1),a(Ys,Jp),a(Jp,r1),a(Ys,i1),o(s,rl,t),o(s,il,t),o(s,kl,t),o(s,fl,t),o(s,gs,t),a(gs,sn),a(sn,Qp),a(gs,k1),o(s,dl,t),o(s,cs,t),a(cs,f1),a(cs,Yp),a(Yp,d1),a(cs,E1),a(cs,gp),a(gp,v1),a(cs,m1),o(s,El,t),K(nn,s,t),o(s,vl,t),o(s,wa,t),a(wa,_1),o(s,ml,t),o(s,U,t),a(U,se),a(se,b1),a(U,w1),a(U,ne),a(ne,y1),a(U,C1),a(U,ae),a(ae,D1),a(U,P1),o(s,_l,t),o(s,bl,t),o(s,wl,t),o(s,ls,t),a(ls,S1),a(ls,te),a(te,$1),a(ls,x1),a(ls,pe),a(pe,h1),a(ls,R1),o(s,yl,t),o(s,Nn,t),Nn.innerHTML=R3,o(s,Cl,t),o(s,an,t),a(an,M1),a(an,ee),a(ee,O1),a(an,A1),o(s,Dl,t),K(tn,s,t),o(s,Pl,t),o(s,ya,t),a(ya,B1),o(s,Sl,t),K(pn,s,t),o(s,$l,t),o(s,en,t),a(en,I1),a(en,oe),a(oe,L1),a(en,N1),o(s,xl,t),o(s,hl,t),o(s,Rl,t),o(s,I,t),a(I,T1),a(I,ce),a(ce,H1),a(I,U1),a(I,le),a(le,G1),a(I,F1),a(I,ue),a(ue,j1),a(I,K1),o(s,Ml,t),o(s,Tn,t),Tn.innerHTML=M3,o(s,Ol,t),o(s,Al,t),o(s,Bl,t),o(s,Ca,t),a(Ca,q1),o(s,Il,t),o(s,Hn,t),Hn.innerHTML=O3,o(s,Ll,t),o(s,Nl,t),o(s,Tl,t),o(s,Hl,t),o(s,on,t),a(on,cn),a(cn,re),a(on,V1),o(s,Ul,t),o(s,Gl,t),o(s,Fl,t),o(s,Da,t),a(Da,X1),o(s,jl,t),o(s,Pa,t),a(Pa,W1),o(s,Kl,t),o(s,ql,t),o(s,Vl,t),o(s,Xl,t),o(s,ln,t),a(ln,un),a(un,ie),a(ln,z1),o(s,Wl,t),o(s,zl,t),o(s,Zl,t),o(s,Sa,t),a(Sa,fs),a(fs,Un),a(Un,$a),a(fs,Z1),a(fs,J1),a(fs,Q1),a(fs,Gn),a(Gn,Y1),Jl=!0},p(s,[t]){const xa={};t&1&&(xa.$$scope={dirty:t,ctx:s}),Bs.$set(xa);const ke={};t&1&&(ke.$$scope={dirty:t,ctx:s}),Ls.$set(ke);const fe={};t&1&&(fe.$$scope={dirty:t,ctx:s}),Hs.$set(fe);const de={};t&1&&(de.$$scope={dirty:t,ctx:s}),Us.$set(de);const ds={};t&1&&(ds.$$scope={dirty:t,ctx:s}),Ks.$set(ds);const Ee={};t&1&&(Ee.$$scope={dirty:t,ctx:s}),Zs.$set(Ee);const ve={};t&1&&(ve.$$scope={dirty:t,ctx:s}),Js.$set(ve);const me={};t&1&&(me.$$scope={dirty:t,ctx:s}),Qs.$set(me);const _e={};t&1&&(_e.$$scope={dirty:t,ctx:s}),nn.$set(_e);const x={};t&1&&(x.$$scope={dirty:t,ctx:s}),tn.$set(x);const be={};t&1&&(be.$$scope={dirty:t,ctx:s}),pn.$set(be)},i(s){Jl||(q(Bs.$$.fragment,s),q(Ls.$$.fragment,s),q(Hs.$$.fragment,s),q(Us.$$.fragment,s),q(Ks.$$.fragment,s),q(Zs.$$.fragment,s),q(Js.$$.fragment,s),q(Qs.$$.fragment,s),q(nn.$$.fragment,s),q(tn.$$.fragment,s),q(pn.$$.fragment,s),Jl=!0)},o(s){V(Bs.$$.fragment,s),V(Ls.$$.fragment,s),V(Hs.$$.fragment,s),V(Us.$$.fragment,s),V(Ks.$$.fragment,s),V(Zs.$$.fragment,s),V(Js.$$.fragment,s),V(Qs.$$.fragment,s),V(nn.$$.fragment,s),V(tn.$$.fragment,s),V(pn.$$.fragment,s),Jl=!1},d(s){s&&n(f),s&&n(d),s&&n(E),s&&n(Ce),s&&n(De),s&&n(_s),s&&n(Pe),s&&n(Se),s&&n($e),s&&n(qn),s&&n(xe),s&&n(Vn),s&&n(he),s&&n(Z),s&&n(Re),s&&n(Xn),s&&n(Me),s&&n(y),s&&n(Oe),s&&n(Wn),s&&n(Ae),s&&n(Be),s&&n(Ie),s&&n(Le),s&&n(ws),s&&n(Ne),s&&n(J),s&&n(Te),s&&n(zn),s&&n(He),s&&n(Cs),s&&n(Ue),s&&n(Zn),s&&n(Ge),s&&n(Fe),s&&n(je),s&&n(Jn),s&&n(Ke),s&&n(Q),s&&n(qe),s&&n(sa),s&&n(Ve),s&&n(h),s&&n(Xe),s&&n(na),s&&n(We),s&&n(_),s&&n(ze),s&&n(aa),s&&n(Ze),s&&n(Je),s&&n(Qe),s&&n(Ye),s&&n(Ds),s&&n(ge),s&&n(so),s&&n(no),s&&n(ta),s&&n(ao),s&&n(_n),s&&n(to),s&&n(Y),s&&n(po),s&&n(Ss),s&&n(eo),s&&n(g),s&&n(oo),s&&n(is),s&&n(co),s&&n(bn),s&&n(lo),s&&n(T),s&&n(uo),s&&n(ro),s&&n(io),s&&n(C),s&&n(ko),s&&n(wn),s&&n(fo),s&&n(pa),s&&n(Eo),s&&n(vo),s&&n(mo),s&&n(ea),s&&n(_o),s&&n(oa),s&&n(bo),s&&n(R),s&&n(wo),s&&n(ks),s&&n(yo),s&&n(yn),s&&n(Co),s&&n(Do),s&&n(Po),s&&n(xs),s&&n(So),s&&n(Cn),s&&n($o),s&&n(xo),s&&n(ho),s&&n(ca),s&&n(Ro),s&&n(w),s&&n(Mo),s&&n(Dn),s&&n(Oo),s&&n(M),s&&n(Ao),s&&n(hs),s&&n(Bo),s&&n(Io),s&&n(Lo),s&&n(la),s&&n(No),s&&n(P),s&&n(To),s&&n(Pn),s&&n(Ho),s&&n(Sn),s&&n(Uo),s&&n(Go),s&&n(Fo),s&&n(D),s&&n(jo),s&&n($n),s&&n(Ko),s&&n(qo),s&&n(Vo),s&&n(ua),s&&n(Xo),s&&n(xn),s&&n(Wo),s&&n(zo),s&&n(Zo),s&&n(Jo),s&&n(Rs),s&&n(Qo),s&&n(Os),s&&n(Yo),s&&n(ss),s&&n(go),s&&n(As),s&&n(sc),X(Bs,s),s&&n(nc),s&&n(Is),s&&n(ac),X(Ls,s),s&&n(tc),s&&n(O),s&&n(pc),s&&n(ec),s&&n(oc),s&&n(H),s&&n(cc),s&&n(ns),s&&n(lc),s&&n(hn),s&&n(uc),s&&n(ra),s&&n(rc),s&&n(ia),s&&n(ic),s&&n(Rn),s&&n(kc),s&&n(fc),s&&n(dc),s&&n(Ec),s&&n(Ns),s&&n(vc),s&&n(ka),s&&n(mc),s&&n(Mn),s&&n(_c),s&&n(as),s&&n(bc),X(Hs,s),s&&n(wc),s&&n(ts),s&&n(yc),s&&n(On),s&&n(Cc),s&&n(b),s&&n(Dc),s&&n(A),s&&n(Pc),X(Us,s),s&&n(Sc),s&&n(fa),s&&n($c),s&&n(da),s&&n(xc),s&&n(An),s&&n(hc),s&&n(Rc),s&&n(Mc),s&&n(Oc),s&&n(Gs),s&&n(Ac),s&&n(js),s&&n(Bc),s&&n(Ea),s&&n(Ic),s&&n(Bn),s&&n(Lc),s&&n(va),s&&n(Nc),s&&n(ps),s&&n(Tc),s&&n(In),s&&n(Hc),s&&n(es),s&&n(Uc),X(Ks,s),s&&n(Gc),s&&n(ma),s&&n(Fc),s&&n(jc),s&&n(Kc),s&&n(qc),s&&n(qs),s&&n(Vc),s&&n(Xc),s&&n(Wc),s&&n(_a),s&&n(zc),s&&n(Xs),s&&n(Zc),s&&n(zs),s&&n(Jc),s&&n(Ln),s&&n(Qc),s&&n(S),s&&n(Yc),X(Zs,s),s&&n(gc),s&&n($),s&&n(sl),s&&n(nl),s&&n(al),s&&n(os),s&&n(tl),X(Js,s),s&&n(pl),s&&n(ba),s&&n(el),s&&n(ol),s&&n(cl),s&&n(B),s&&n(ll),X(Qs,s),s&&n(ul),s&&n(Ys),s&&n(rl),s&&n(il),s&&n(kl),s&&n(fl),s&&n(gs),s&&n(dl),s&&n(cs),s&&n(El),X(nn,s),s&&n(vl),s&&n(wa),s&&n(ml),s&&n(U),s&&n(_l),s&&n(bl),s&&n(wl),s&&n(ls),s&&n(yl),s&&n(Nn),s&&n(Cl),s&&n(an),s&&n(Dl),X(tn,s),s&&n(Pl),s&&n(ya),s&&n(Sl),X(pn,s),s&&n($l),s&&n(en),s&&n(xl),s&&n(hl),s&&n(Rl),s&&n(I),s&&n(Ml),s&&n(Tn),s&&n(Ol),s&&n(Al),s&&n(Bl),s&&n(Ca),s&&n(Il),s&&n(Hn),s&&n(Ll),s&&n(Nl),s&&n(Tl),s&&n(Hl),s&&n(on),s&&n(Ul),s&&n(Gl),s&&n(Fl),s&&n(Da),s&&n(jl),s&&n(Pa),s&&n(Kl),s&&n(ql),s&&n(Vl),s&&n(Xl),s&&n(ln),s&&n(Wl),s&&n(zl),s&&n(Zl),s&&n(Sa)}}}const vv={title:"모놀리식 애플리케이션에 DDD 적용하기",date:"2023-07-20T00:00:00.000Z",excerpt:"Applying DDD to a Monolithic Application",categories:["Golang","Backend","Architecture","Domain Driven Design"],coverImage:"/post_img/Backend/Architecture/DDD/cover.png",coverWidth:16,coverHeight:9,indexed:!1,exposed:!0};class mv extends Y3{constructor(f){super(),g3(this,f,null,fv,sv,{})}}export{mv as default,vv as metadata};
