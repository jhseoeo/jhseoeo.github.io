import{S as Ji,i as Wi,s as Fi,k as t,a as u,q as l,l as e,c as r,m as i,r as c,h as n,n as k,U as Zi,b as p,E as a,M as jl}from"./index.5621e629.js";function Ki(ii){let hs,ma,Gs,xe,da,ba,Ea,va,h,G,$s,Be,_a,wa,ya,d,He,gs,Le,Se,sn,Te,he,nn,Ge,Ae,an,Me,Ne,Pa,ls,ui=`<code class="language-go">x1 <span class="token operator">:=</span> <span class="token number">10</span> <span class="token comment">// shadowed variable.</span>
<span class="token keyword">if</span> x1 <span class="token operator">></span> <span class="token number">5</span> <span class="token punctuation">&#123;</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>x1<span class="token punctuation">)</span> <span class="token comment">// 10 => x1 is not yet shadowed</span>
    x1 <span class="token operator">:=</span> <span class="token number">5</span>         <span class="token comment">// shadowing variable. from this line to end of this block</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>x1<span class="token punctuation">)</span> <span class="token comment">// 5 => x1 is shadowed until if-blocks ends</span>
<span class="token punctuation">&#125;</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>x1<span class="token punctuation">)</span> <span class="token comment">// 10 => if-block ends. x1 is not shadowed</span></code>`,Ca,As,Ie,Oa,Ra,Da,cs,ri=`<code class="language-go">	<span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token builtin">int</span> <span class="token operator">:=</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">"hi"</span>
	fmt <span class="token operator">:=</span> <span class="token string">"oops"</span>    <span class="token comment">// fmt is shadowed</span></code>`,xa,C,je,tn,qe,ze,en,Ue,Ve,Ba,Ha,La,Ms,Je,Sa,is,ki=`<code class="language-bash">go <span class="token function">install</span> golang.org/x/tools/go/analysis/passes/shadow/cmd/shadow@latest
shadow ./<span class="token punctuation">..</span></code>`,Ta,A,We,on,Fe,Ze,ha,us,fi='<code class="language-bash">declaration of <span class="token string">"x"</span> shadows declaration at line <span class="token number">6</span></code>',Ga,Aa,Ma,Na,M,N,pn,Ke,Ia,ja,qa,I,Qe,ln,Xe,Ye,za,rs,mi=`<code class="language-go">n1 <span class="token operator">:=</span> <span class="token number">7</span>
<span class="token keyword">if</span> n1 <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// there is no parenthesis around the condition</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"too low"</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> n1 <span class="token operator">></span> <span class="token number">5</span> <span class="token punctuation">&#123;</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"too big :"</span><span class="token punctuation">,</span> n1<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"good :"</span><span class="token punctuation">,</span> n1<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code>`,Ua,Va,Ja,j,$e,cn,ge,so,Wa,ks,di=`<code class="language-go"><span class="token keyword">if</span> n2 <span class="token operator">:=</span> <span class="token number">4</span><span class="token punctuation">;</span> n2 <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span> <span class="token comment">// both declaring variable and checking condition</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"too low"</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> n2 <span class="token operator">></span> <span class="token number">5</span> <span class="token punctuation">&#123;</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"too big :"</span><span class="token punctuation">,</span> n2<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"good :"</span><span class="token punctuation">,</span> n2<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// fmt.Println(n2) // it causes error. once a if/else statement ends, n1 is not accessable.</span></code>`,Fa,q,no,un,ao,to,Za,Ka,Qa,Xa,z,U,rn,eo,Ya,$a,ga,V,oo,kn,po,lo,st,v,J,co,fn,io,uo,mn,ro,ko,Ns,fo,dn,mo,bo,Is,Eo,bn,vo,_o,js,wo,En,yo,nt,qs,Po,at,tt,et,ot,W,F,vn,Co,pt,fs,bi=`<code class="language-go"><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>
    fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code>`,lt,w,_n,Oo,Ro,wn,Do,xo,yn,Bo,Ho,ct,it,ut,Z,K,Pn,Lo,rt,ms,Ei=`<code class="language-go">i <span class="token operator">:=</span> <span class="token number">1</span>
<span class="token keyword">for</span> i <span class="token operator">&lt;</span> <span class="token number">100</span> <span class="token punctuation">&#123;</span>
    fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token string">" "</span><span class="token punctuation">)</span>
    i <span class="token operator">=</span> i <span class="token operator">*</span> <span class="token number">2</span>
<span class="token punctuation">&#125;</span></code>`,kt,zs,So,ft,mt,dt,Q,X,Cn,To,bt,ds,vi=`<code class="language-go">j <span class="token operator">:=</span> <span class="token number">0</span>
<span class="token keyword">for</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> j<span class="token operator">++</span><span class="token punctuation">;</span> j <span class="token operator">></span> <span class="token number">10</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">break</span> <span class="token comment">// if there is no break statement, loop will last until a keyboard interrupt(ctrl-c) occurs</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> j<span class="token operator">%</span><span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">continue</span>
    <span class="token punctuation">&#125;</span>
    fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token string">" "</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code>`,Et,y,On,ho,Go,Rn,Ao,Mo,Dn,No,Io,vt,_t,wt,Y,$,xn,jo,yt,bs,_i=`<code class="language-go"><span class="token comment">// for-range loop (array, slice, string)</span>
evenVals <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">&#125;</span>
<span class="token keyword">for</span> i<span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> evenVals <span class="token punctuation">&#123;</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> v<span class="token punctuation">)</span> <span class="token comment">// i is an key(index) of the data, v is value of the data</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// ignoring the key in a for-range loop</span>
<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> evenVals <span class="token punctuation">&#123;</span> <span class="token comment">// using underscore(_), we can only access the value</span>
    fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> <span class="token string">" "</span><span class="token punctuation">)</span> <span class="token comment">// if you want, it is also possible to ignore the value by using underscore</span>
<span class="token punctuation">&#125;</span></code>`,Pt,_,qo,Bn,zo,Uo,Hn,Vo,Jo,Ln,Wo,Fo,Ct,Ot,Rt,Es,Sn,Zo,Ko,Dt,vs,wi=`<code class="language-go"><span class="token comment">// for-range loop (map)</span>
names <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">bool</span><span class="token punctuation">&#123;</span>
    <span class="token string">"Fred"</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token string">"Raul"</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token string">"Will"</span><span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> names <span class="token punctuation">&#123;</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">for</span> k <span class="token operator">:=</span> <span class="token keyword">range</span> names <span class="token punctuation">&#123;</span> <span class="token comment">// by leave off second variable, it is possible to get key only.</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> names<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code>`,xt,Us,Qo,Bt,Ht,Lt,_s,Tn,Xo,Yo,St,ws,yi=`<code class="language-go"><span class="token comment">// for-range loop (string)</span>
samples <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">&#123;</span><span class="token string">"hello"</span><span class="token punctuation">,</span> <span class="token string">"안녕하세요"</span><span class="token punctuation">&#125;</span>

<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> sample <span class="token operator">:=</span> <span class="token keyword">range</span> samples <span class="token punctuation">&#123;</span>
    <span class="token keyword">for</span> i<span class="token punctuation">,</span> r <span class="token operator">:=</span> <span class="token keyword">range</span> sample <span class="token punctuation">&#123;</span> <span class="token comment">// it iterates over the runes, not bytes</span>
        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> r<span class="token punctuation">,</span> <span class="token function">string</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// key is the number of byte from the beginning of the string, type of value is rune</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,Tt,O,$o,hn,go,sp,Gn,np,ap,ht,Gt,At,R,tp,An,ep,op,Mn,pp,lp,Mt,ys,Pi=`<code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	samples <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">&#123;</span><span class="token string">"hello"</span><span class="token punctuation">,</span> <span class="token string">"안녕hello"</span><span class="token punctuation">&#125;</span>

outer<span class="token punctuation">:</span> <span class="token comment">// label of outer for-statements</span>
	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> sample <span class="token operator">:=</span> <span class="token keyword">range</span> samples <span class="token punctuation">&#123;</span>
		<span class="token keyword">for</span> i<span class="token punctuation">,</span> r <span class="token operator">:=</span> <span class="token keyword">range</span> sample <span class="token punctuation">&#123;</span>
			fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> r<span class="token punctuation">,</span> <span class="token function">string</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span>
			<span class="token keyword">if</span> r <span class="token operator">==</span> <span class="token char">'l'</span> <span class="token punctuation">&#123;</span>
				<span class="token keyword">continue</span> outer <span class="token comment">// this leads to continue nested loop</span>
			<span class="token punctuation">&#125;</span>
		<span class="token punctuation">&#125;</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// this line is not reached because all the strings contain 'l', and the process continued outer loop</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,Nt,b,cp,Nn,ip,up,In,rp,kp,jn,fp,mp,qn,dp,bp,It,jt,qt,zt,g,ss,zn,Ep,Ut,Vt,Jt,D,vp,Un,_p,wp,Vn,yp,Pp,Wt,Ps,Ci=`<code class="language-go">words <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">&#123;</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"cow"</span><span class="token punctuation">,</span> <span class="token string">"smile"</span><span class="token punctuation">,</span> <span class="token string">"gopher"</span><span class="token punctuation">,</span> <span class="token string">"octopus"</span><span class="token punctuation">,</span> <span class="token string">"영어싫어"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">&#125;</span>

<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> word <span class="token operator">:=</span> <span class="token keyword">range</span> words <span class="token punctuation">&#123;</span>
    <span class="token keyword">switch</span> size <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token punctuation">;</span> size <span class="token punctuation">&#123;</span> <span class="token comment">// as like if-statements, there is no parenthesis</span>
    <span class="token keyword">case</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">:</span> <span class="token comment">// using comma(,), we can make multiple matches</span>
        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>word<span class="token punctuation">,</span> <span class="token string">"is a short word!"</span><span class="token punctuation">)</span>
    <span class="token keyword">case</span> <span class="token number">5</span><span class="token punctuation">:</span>
        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>word<span class="token punctuation">,</span> <span class="token string">"is exactly the right length:"</span><span class="token punctuation">,</span> size<span class="token punctuation">)</span>
        <span class="token keyword">break</span>                         <span class="token comment">// this makes it exits switch earlier</span>
        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"not be printed"</span><span class="token punctuation">)</span> <span class="token comment">// because of break above, this line is unreachable</span>
    <span class="token keyword">case</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">:</span> <span class="token comment">// empty case (nothing happened)</span>
        <span class="token comment">// fallthrough // if keyword &#96;fallthrough&#96; is here, as like other languages, run next case's block</span>
    <span class="token keyword">default</span><span class="token punctuation">:</span>
        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>word<span class="token punctuation">,</span> <span class="token string">"is a wrong word"</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,Ft,f,Cp,Jn,Op,Rp,Wn,Dp,xp,Bp,Hp,Fn,Lp,Sp,Zn,Tp,hp,Kn,Gp,Ap,Qn,Mp,Np,Xn,Ip,jp,Yn,qp,zp,Zt,Kt,Qt,E,$n,Up,Vp,gn,Jp,Wp,sa,Fp,Zp,na,Kp,Qp,Xt,Cs,Oi=`<code class="language-go">	<span class="token comment">// blank switch, break a loop in switch/case statements</span>
loop<span class="token punctuation">:</span> <span class="token comment">// to break in switch/case statement, attach a label to for-statements</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">switch</span> <span class="token punctuation">&#123;</span> <span class="token comment">// this is a blank switch. no variable</span>
		<span class="token keyword">case</span> i<span class="token operator">%</span><span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span> <span class="token comment">// here can be boolean expression</span>
			fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token string">"is even number"</span><span class="token punctuation">)</span>
		<span class="token keyword">case</span> i<span class="token operator">%</span><span class="token number">3</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
			fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token string">"is divisible by 3 but not 2"</span><span class="token punctuation">)</span>
		<span class="token keyword">case</span> i<span class="token operator">%</span><span class="token number">7</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
			fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"exit the loop"</span><span class="token punctuation">)</span>
			<span class="token keyword">break</span> loop <span class="token comment">// if this statement is just &#96;break&#96;, it cannot exit the loop. just proceed until the loop ends</span>
		<span class="token keyword">default</span><span class="token punctuation">:</span>
			fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token string">"is boring"</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span></code>`,Yt,P,aa,Xp,Yp,ta,$p,gp,ea,sl,nl,$t,gt,se,ne,ns,as,oa,al,ae,te,ee,x,tl,pa,el,ol,la,pl,ll,oe,Os,Ri=`<code class="language-go">	a <span class="token operator">:=</span> <span class="token number">10</span>
	<span class="token comment">// goto skip // cannot jump over variable declaration</span>
	b <span class="token operator">:=</span> <span class="token number">20</span>
	<span class="token keyword">goto</span> skip
skip<span class="token punctuation">:</span>
	c <span class="token operator">:=</span> <span class="token number">30</span>

	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span>
	<span class="token keyword">if</span> c <span class="token operator">></span> a <span class="token punctuation">&#123;</span>
		<span class="token comment">// goto inner // cannot jump into block</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">if</span> a <span class="token operator">&lt;</span> b <span class="token punctuation">&#123;</span>
		<span class="token keyword">goto</span> inner
	inner<span class="token punctuation">:</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"a is less than b"</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span></code>`,pe,Rs,ca,cl,il,le,ce,ie,Ds,ia,ul,rl,ue,xs,Di=`<code class="language-go">    x <span class="token operator">:=</span> rand<span class="token punctuation">.</span><span class="token function">Intn</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>

	<span class="token keyword">for</span> x <span class="token operator">&lt;</span> <span class="token number">100</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">if</span> a<span class="token operator">%</span><span class="token number">5</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">goto</span> done <span class="token comment">// in this case, instead of using boolean flag, using goto makes code clearer and readable</span>
		<span class="token punctuation">&#125;</span>
		a <span class="token operator">=</span> a<span class="token operator">*</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span>
	<span class="token punctuation">&#125;</span>

	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"do something when the loop completes normally"</span><span class="token punctuation">)</span>
done<span class="token punctuation">:</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"do complicated stuff no matter why we left the loop"</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span></code>`,re,B,kl,ua,fl,ml,ra,dl,bl,ke,fe,me,de,ts,es,ka,El,be,Ee,ve,Vs,S,Bs,Js,ql,vl,_l,wl,Hs,yl,_e,we,ye;return{c(){hs=t("br"),ma=u(),Gs=t("p"),xe=l("본 글은 Golang을 공부하며 주요 내용이라 생각되는 것들을 기록해둔 자료이며, Ubuntu 20.04 LTS 기준으로 작성되었습니다."),da=u(),ba=t("br"),Ea=t("br"),va=u(),h=t("h2"),G=t("a"),$s=t("span"),Be=l("Shadowing"),_a=u(),wa=t("hr"),ya=u(),d=t("p"),He=l("Go에서 기본적으로 "),gs=t("code"),Le=l("Block"),Se=l(`의 개념은 타 언어와 유사하다.
`),sn=t("code"),Te=l("if"),he=l(", "),nn=t("code"),Ge=l("for"),Ae=l(" 등 흐름 제어 키워드들에 의해 중괄호가 시작되고, 해당 중괄호가 닫히는 영역까지를 "),an=t("code"),Me=l("Block"),Ne=l("이라 한다."),Pa=u(),ls=t("pre"),Ca=u(),As=t("p"),Ie=l("이전 챕터에서도 다루었지만, Shadowing이 발생하면 해당 블록이 끝날 때까지 Shadowing된 변수에 접근할 수 없다."),Oa=u(),Ra=t("br"),Da=u(),cs=t("pre"),xa=u(),C=t("p"),je=l("이렇게 패키지명이나 "),tn=t("em"),qe=l("universe block"),ze=l("의 구분자들을 Shadowing하는 것이 문법적으로는 가능하지만, "),en=t("strong"),Ue=l("절대"),Ve=l(" 이렇게 하지 않도록 주의하자."),Ba=u(),Ha=t("br"),La=u(),Ms=t("p"),Je=l("변수가 Shadowing되는 것을 확인할 수 있는 명령어가 존재한다. 외부 모듈이므로 설치 후 사용해주어야 한다."),Sa=u(),is=t("pre"),Ta=u(),A=t("p"),We=l("위와 같이 설치 후, "),on=t("code"),Fe=l("shadow"),Ze=l(" 명령어를 통해 검사를 실시하고자 하는 파일을 지정한다."),ha=u(),us=t("pre"),Ga=u(),Aa=t("br"),Ma=t("br"),Na=u(),M=t("h2"),N=t("a"),pn=t("span"),Ke=l("if"),Ia=u(),ja=t("hr"),qa=u(),I=t("p"),Qe=l("C 계열 프로그래밍 언어의 "),ln=t("code"),Xe=l("if"),Ye=l("문과 크게 다르지 않다. 특이사항으로는 괄호를 생략한다."),za=u(),rs=t("pre"),Ua=u(),Va=t("br"),Ja=u(),j=t("p"),$e=l("특이사항으로는 "),cn=t("code"),ge=l("if"),so=l("문의 조건 확인 구문 안에서 변수 선언을 동시에 할 수 있다."),Wa=u(),ks=t("pre"),Fa=u(),q=t("p"),no=l("단, 이렇게 선언된 변수는 "),un=t("code"),ao=l("if"),to=l("문 밖에선 접근할 수 없다."),Za=u(),Ka=t("br"),Qa=t("br"),Xa=u(),z=t("h2"),U=t("a"),rn=t("span"),eo=l("for"),Ya=u(),$a=t("hr"),ga=u(),V=t("p"),oo=l("Go의 "),kn=t("code"),po=l("for"),lo=l("문은 4가지 유형이 존재한다."),st=u(),v=t("ol"),J=t("li"),co=l("일반적인 "),fn=t("code"),io=l("for"),uo=l("문과 유사함 => "),mn=t("code"),ro=l("for(int i = 0; i < n; i++) {}"),ko=u(),Ns=t("li"),fo=l("일반적인 while문과 유사함 => "),dn=t("code"),mo=l("while(condition)"),bo=u(),Is=t("li"),Eo=l("무한 루프 => "),bn=t("code"),vo=l("while(True)"),_o=u(),js=t("li"),wo=l("range-based의 foreach문 => "),En=t("code"),yo=l("for(const auto& element : containor) {}"),nt=u(),qs=t("p"),Po=l("하나씩 살펴보자."),at=u(),tt=t("br"),et=t("br"),ot=u(),W=t("h3"),F=t("a"),vn=t("span"),Co=l("The Complete for Statement"),pt=u(),fs=t("pre"),lt=u(),w=t("p"),_n=t("code"),Oo=l("if"),Ro=l("문처럼 괄호를 사용하지 않는다. 또한 변수를 초기화할 때 "),wn=t("code"),Do=l("var"),xo=l(" 키워드를 사용하지 않고, "),yn=t("code"),Bo=l(":="),Ho=l(" 연산자를 이용하여 초기화해야 한다."),ct=u(),it=t("br"),ut=u(),Z=t("h3"),K=t("a"),Pn=t("span"),Lo=l("condition-only statements"),rt=u(),ms=t("pre"),kt=u(),zs=t("p"),So=l("변수의 선언과 증감이 생략된 형태로, 다른 언어의 while문과 유사한 형태이다."),ft=u(),mt=t("br"),dt=u(),Q=t("h3"),X=t("a"),Cn=t("span"),To=l("infinite loop and break, continue statements"),bt=u(),ds=t("pre"),Et=u(),y=t("p"),On=t("code"),ho=l("for"),Go=l(" 키워드 이후 아무런 표현식도 오지 않으면 무한루프를 돌게 된다. "),Rn=t("code"),Ao=l("break"),Mo=l("문과 "),Dn=t("code"),No=l("contine"),Io=l("문도 사용 가능하다."),vt=u(),_t=t("br"),wt=u(),Y=t("h3"),$=t("a"),xn=t("span"),jo=l("for-range loop"),yt=u(),bs=t("pre"),Pt=u(),_=t("p"),qo=l("다른 언어에 존재하는 "),Bn=t("code"),zo=l("for-each"),Uo=l(" 형태의 반복문과 유사한 형태이다. "),Hn=t("code"),Vo=l("range"),Jo=l(` 키워드를 통해 각각 인덱스와 값에 접근할 수 있다.
또한 변수 이름을 언더바(`),Ln=t("code"),Wo=l("_"),Fo=l(")로 설정하면, 해당 값을 사용하지 않고 넘긴다는 의미가 된다. 적절히 사용할 수 있도록 하자."),Ct=u(),Ot=t("br"),Rt=u(),Es=t("p"),Sn=t("code"),Zo=l("map"),Ko=l(" 타입에 대해서도 for-range loop를 적용할 수 있다."),Dt=u(),vs=t("pre"),xt=u(),Us=t("p"),Qo=l("대충 Python이랑 비슷한 것 같다."),Bt=u(),Ht=t("br"),Lt=u(),_s=t("p"),Tn=t("code"),Xo=l("string"),Yo=l("에 대해서도 for-range loop가 가능하다."),St=u(),ws=t("pre"),Tt=u(),O=t("p"),$o=l("특이사항은 "),hn=t("code"),go=l("byte"),sp=l(" 단위가 아닌 "),Gn=t("code"),np=l("rune"),ap=l(` 단위로 iterating한다는 것.
따라서 문자의 크기가 2바이트 이상인 경우, 인덱스가 점프하는 것을 확인할 수 있다.`),ht=u(),Gt=t("br"),At=u(),R=t("p"),tp=l("Go에서의 "),An=t("code"),ep=l("for"),op=l("문은 "),Mn=t("strong"),pp=l("Labeling"),lp=l("을 지원한다."),Mt=u(),ys=t("pre"),Nt=u(),b=t("p"),cp=l("바깥쪽 반복문에 "),Nn=t("code"),ip=l("outer"),up=l(`라는 Label이 붙어있다.
그리고 안쪽 반복문에서 `),In=t("code"),rp=l("continue outer"),kp=l("를 통해 "),jn=t("code"),fp=l("for i, r := range sample {}"),mp=l(" 블록이 아닌, "),qn=t("code"),dp=l("for _, sample := range samples"),bp=l(" 블록의 시작점으로 되돌아가고 있다."),It=u(),jt=t("br"),qt=t("br"),zt=u(),g=t("h2"),ss=t("a"),zn=t("span"),Ep=l("switch"),Ut=u(),Vt=t("hr"),Jt=u(),D=t("p"),vp=l("보통 제한적인 상황에서만 사용되거나 "),Un=t("code"),_p=l("switch"),wp=l("문이 없는 다른 언어들과는 달리, Go는 "),Vn=t("code"),yp=l("switch"),Pp=l("문이 엄청 잘되어있다."),Wt=u(),Ps=t("pre"),Ft=u(),f=t("p"),Cp=l("여러 값에 대해 적용되는 "),Jn=t("code"),Op=l("case"),Rp=l("를 설정하려면 컴마("),Wn=t("code"),Dp=l(","),xp=l(")로 값들을 구분지어서 나열하면 된다."),Bp=t("br"),Hp=l(`
특이사항은 `),Fn=t("code"),Lp=l("case"),Sp=l(" 블록에서 "),Zn=t("code"),Tp=l("break"),hp=l("를 통한 탈출을 지원하긴 하지만, 다른 언어와 달리 반드시 사용하지 않아도 "),Kn=t("code"),Gp=l("case"),Ap=l(` 블록이 끝나면 알아서 탈출해준다.
만약 `),Qn=t("code"),Mp=l("case"),Np=l(" 블록이 끝나고 아래 "),Xn=t("code"),Ip=l("case"),jp=l(" 블록도 실행되게끔 하고자 하는 경우, "),Yn=t("code"),qp=l("fallthrough"),zp=l(" 키워드를 사용하면 된다 한다. 다만 권장되지는 않는 듯 하다."),Zt=u(),Kt=t("br"),Qt=u(),E=t("p"),$n=t("code"),Up=l("switch"),Vp=l("문에 아무런 변수도 할당하지 않는 경우, boolean expression의 true/false 여부에 따라 "),gn=t("code"),Jp=l("case"),Wp=l(" 블록이 실행된다. "),sa=t("code"),Fp=l("if"),Zp=l("/"),na=t("code"),Kp=l("else"),Qp=l("문이랑 비슷한듯."),Xt=u(),Cs=t("pre"),Yt=u(),P=t("p"),aa=t("code"),Xp=l("case"),Yp=l("안에서 "),ta=t("code"),$p=l("for"),gp=l("문을 탈출하려면 위처럼 "),ea=t("code"),sl=l("break"),nl=l("문에 Label을 명시해주어야 한다."),$t=u(),gt=t("br"),se=t("br"),ne=u(),ns=t("h2"),as=t("a"),oa=t("span"),al=l("goto"),ae=u(),te=t("hr"),ee=u(),x=t("p"),tl=l("놀랍게도 Go엔 "),pa=t("code"),el=l("goto"),ol=l("가 있다. "),la=t("code"),pl=l("goto"),ll=l(" 자체가 가지고 있는 문제점을 해결하기 위해 몇 가지 보완이 이루어진 듯 하다."),oe=u(),Os=t("pre"),pe=u(),Rs=t("p"),ca=t("code"),cl=l("goto"),il=l("를 통해 특정 block 안으로 들어가거나, 변수 선언 이전으로 되돌아가거나 할 수는 없다."),le=u(),ce=t("br"),ie=u(),Ds=t("p"),ia=t("code"),ul=l("goto"),rl=l("가 유용하게 쓰이는 경우가 한 가지 있다."),ue=u(),xs=t("pre"),re=u(),B=t("p"),kl=l(`위처럼 flag를 설정하여, flag의 여부에 따라 추가적으로 처리를 해주어야 하는 경우이다.
이 경우 위처럼 `),ua=t("code"),fl=l("goto"),ml=l("를 사용하는 것이 "),ra=t("code"),dl=l("if"),bl=l("를 사용하는 것보다 깔끔하다고 한다."),ke=u(),fe=t("br"),me=t("br"),de=u(),ts=t("h2"),es=t("a"),ka=t("span"),El=l("References"),be=u(),Ee=t("hr"),ve=u(),Vs=t("center"),S=t("p"),Bs=t("a"),Js=t("img"),vl=u(),_l=t("br"),wl=u(),Hs=t("a"),yl=l("Jon Bodner, 『Learning Go』, O’Reilly Media, Inc."),_e=u(),we=t("br"),ye=t("br"),this.h()},l(s){hs=e(s,"BR",{}),ma=r(s),Gs=e(s,"P",{});var o=i(Gs);xe=c(o,"본 글은 Golang을 공부하며 주요 내용이라 생각되는 것들을 기록해둔 자료이며, Ubuntu 20.04 LTS 기준으로 작성되었습니다."),o.forEach(n),da=r(s),ba=e(s,"BR",{}),Ea=e(s,"BR",{}),va=r(s),h=e(s,"H2",{id:!0});var Pl=i(h);G=e(Pl,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var zl=i(G);$s=e(zl,"SPAN",{class:!0}),i($s).forEach(n),zl.forEach(n),Be=c(Pl,"Shadowing"),Pl.forEach(n),_a=r(s),wa=e(s,"HR",{}),ya=r(s),d=e(s,"P",{});var H=i(d);He=c(H,"Go에서 기본적으로 "),gs=e(H,"CODE",{});var Ul=i(gs);Le=c(Ul,"Block"),Ul.forEach(n),Se=c(H,`의 개념은 타 언어와 유사하다.
`),sn=e(H,"CODE",{});var Vl=i(sn);Te=c(Vl,"if"),Vl.forEach(n),he=c(H,", "),nn=e(H,"CODE",{});var Jl=i(nn);Ge=c(Jl,"for"),Jl.forEach(n),Ae=c(H," 등 흐름 제어 키워드들에 의해 중괄호가 시작되고, 해당 중괄호가 닫히는 영역까지를 "),an=e(H,"CODE",{});var Wl=i(an);Me=c(Wl,"Block"),Wl.forEach(n),Ne=c(H,"이라 한다."),H.forEach(n),Pa=r(s),ls=e(s,"PRE",{class:!0});var xi=i(ls);xi.forEach(n),Ca=r(s),As=e(s,"P",{});var Fl=i(As);Ie=c(Fl,"이전 챕터에서도 다루었지만, Shadowing이 발생하면 해당 블록이 끝날 때까지 Shadowing된 변수에 접근할 수 없다."),Fl.forEach(n),Oa=r(s),Ra=e(s,"BR",{}),Da=r(s),cs=e(s,"PRE",{class:!0});var Bi=i(cs);Bi.forEach(n),xa=r(s),C=e(s,"P",{});var Ws=i(C);je=c(Ws,"이렇게 패키지명이나 "),tn=e(Ws,"EM",{});var Zl=i(tn);qe=c(Zl,"universe block"),Zl.forEach(n),ze=c(Ws,"의 구분자들을 Shadowing하는 것이 문법적으로는 가능하지만, "),en=e(Ws,"STRONG",{});var Kl=i(en);Ue=c(Kl,"절대"),Kl.forEach(n),Ve=c(Ws," 이렇게 하지 않도록 주의하자."),Ws.forEach(n),Ba=r(s),Ha=e(s,"BR",{}),La=r(s),Ms=e(s,"P",{});var Ql=i(Ms);Je=c(Ql,"변수가 Shadowing되는 것을 확인할 수 있는 명령어가 존재한다. 외부 모듈이므로 설치 후 사용해주어야 한다."),Ql.forEach(n),Sa=r(s),is=e(s,"PRE",{class:!0});var Hi=i(is);Hi.forEach(n),Ta=r(s),A=e(s,"P",{});var Pe=i(A);We=c(Pe,"위와 같이 설치 후, "),on=e(Pe,"CODE",{});var Xl=i(on);Fe=c(Xl,"shadow"),Xl.forEach(n),Ze=c(Pe," 명령어를 통해 검사를 실시하고자 하는 파일을 지정한다."),Pe.forEach(n),ha=r(s),us=e(s,"PRE",{class:!0});var Li=i(us);Li.forEach(n),Ga=r(s),Aa=e(s,"BR",{}),Ma=e(s,"BR",{}),Na=r(s),M=e(s,"H2",{id:!0});var Cl=i(M);N=e(Cl,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Yl=i(N);pn=e(Yl,"SPAN",{class:!0}),i(pn).forEach(n),Yl.forEach(n),Ke=c(Cl,"if"),Cl.forEach(n),Ia=r(s),ja=e(s,"HR",{}),qa=r(s),I=e(s,"P",{});var Ce=i(I);Qe=c(Ce,"C 계열 프로그래밍 언어의 "),ln=e(Ce,"CODE",{});var $l=i(ln);Xe=c($l,"if"),$l.forEach(n),Ye=c(Ce,"문과 크게 다르지 않다. 특이사항으로는 괄호를 생략한다."),Ce.forEach(n),za=r(s),rs=e(s,"PRE",{class:!0});var Si=i(rs);Si.forEach(n),Ua=r(s),Va=e(s,"BR",{}),Ja=r(s),j=e(s,"P",{});var Oe=i(j);$e=c(Oe,"특이사항으로는 "),cn=e(Oe,"CODE",{});var gl=i(cn);ge=c(gl,"if"),gl.forEach(n),so=c(Oe,"문의 조건 확인 구문 안에서 변수 선언을 동시에 할 수 있다."),Oe.forEach(n),Wa=r(s),ks=e(s,"PRE",{class:!0});var Ti=i(ks);Ti.forEach(n),Fa=r(s),q=e(s,"P",{});var Re=i(q);no=c(Re,"단, 이렇게 선언된 변수는 "),un=e(Re,"CODE",{});var sc=i(un);ao=c(sc,"if"),sc.forEach(n),to=c(Re,"문 밖에선 접근할 수 없다."),Re.forEach(n),Za=r(s),Ka=e(s,"BR",{}),Qa=e(s,"BR",{}),Xa=r(s),z=e(s,"H2",{id:!0});var Ol=i(z);U=e(Ol,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var nc=i(U);rn=e(nc,"SPAN",{class:!0}),i(rn).forEach(n),nc.forEach(n),eo=c(Ol,"for"),Ol.forEach(n),Ya=r(s),$a=e(s,"HR",{}),ga=r(s),V=e(s,"P",{});var De=i(V);oo=c(De,"Go의 "),kn=e(De,"CODE",{});var ac=i(kn);po=c(ac,"for"),ac.forEach(n),lo=c(De,"문은 4가지 유형이 존재한다."),De.forEach(n),st=r(s),v=e(s,"OL",{});var os=i(v);J=e(os,"LI",{});var fa=i(J);co=c(fa,"일반적인 "),fn=e(fa,"CODE",{});var tc=i(fn);io=c(tc,"for"),tc.forEach(n),uo=c(fa,"문과 유사함 => "),mn=e(fa,"CODE",{});var ec=i(mn);ro=c(ec,"for(int i = 0; i < n; i++) {}"),ec.forEach(n),fa.forEach(n),ko=r(os),Ns=e(os,"LI",{});var Rl=i(Ns);fo=c(Rl,"일반적인 while문과 유사함 => "),dn=e(Rl,"CODE",{});var oc=i(dn);mo=c(oc,"while(condition)"),oc.forEach(n),Rl.forEach(n),bo=r(os),Is=e(os,"LI",{});var Dl=i(Is);Eo=c(Dl,"무한 루프 => "),bn=e(Dl,"CODE",{});var pc=i(bn);vo=c(pc,"while(True)"),pc.forEach(n),Dl.forEach(n),_o=r(os),js=e(os,"LI",{});var xl=i(js);wo=c(xl,"range-based의 foreach문 => "),En=e(xl,"CODE",{});var lc=i(En);yo=c(lc,"for(const auto& element : containor) {}"),lc.forEach(n),xl.forEach(n),os.forEach(n),nt=r(s),qs=e(s,"P",{});var cc=i(qs);Po=c(cc,"하나씩 살펴보자."),cc.forEach(n),at=r(s),tt=e(s,"BR",{}),et=e(s,"BR",{}),ot=r(s),W=e(s,"H3",{id:!0});var Bl=i(W);F=e(Bl,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var ic=i(F);vn=e(ic,"SPAN",{class:!0}),i(vn).forEach(n),ic.forEach(n),Co=c(Bl,"The Complete for Statement"),Bl.forEach(n),pt=r(s),fs=e(s,"PRE",{class:!0});var hi=i(fs);hi.forEach(n),lt=r(s),w=e(s,"P",{});var Ls=i(w);_n=e(Ls,"CODE",{});var uc=i(_n);Oo=c(uc,"if"),uc.forEach(n),Ro=c(Ls,"문처럼 괄호를 사용하지 않는다. 또한 변수를 초기화할 때 "),wn=e(Ls,"CODE",{});var rc=i(wn);Do=c(rc,"var"),rc.forEach(n),xo=c(Ls," 키워드를 사용하지 않고, "),yn=e(Ls,"CODE",{});var kc=i(yn);Bo=c(kc,":="),kc.forEach(n),Ho=c(Ls," 연산자를 이용하여 초기화해야 한다."),Ls.forEach(n),ct=r(s),it=e(s,"BR",{}),ut=r(s),Z=e(s,"H3",{id:!0});var Hl=i(Z);K=e(Hl,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var fc=i(K);Pn=e(fc,"SPAN",{class:!0}),i(Pn).forEach(n),fc.forEach(n),Lo=c(Hl,"condition-only statements"),Hl.forEach(n),rt=r(s),ms=e(s,"PRE",{class:!0});var Gi=i(ms);Gi.forEach(n),kt=r(s),zs=e(s,"P",{});var mc=i(zs);So=c(mc,"변수의 선언과 증감이 생략된 형태로, 다른 언어의 while문과 유사한 형태이다."),mc.forEach(n),ft=r(s),mt=e(s,"BR",{}),dt=r(s),Q=e(s,"H3",{id:!0});var Ll=i(Q);X=e(Ll,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var dc=i(X);Cn=e(dc,"SPAN",{class:!0}),i(Cn).forEach(n),dc.forEach(n),To=c(Ll,"infinite loop and break, continue statements"),Ll.forEach(n),bt=r(s),ds=e(s,"PRE",{class:!0});var Ai=i(ds);Ai.forEach(n),Et=r(s),y=e(s,"P",{});var Ss=i(y);On=e(Ss,"CODE",{});var bc=i(On);ho=c(bc,"for"),bc.forEach(n),Go=c(Ss," 키워드 이후 아무런 표현식도 오지 않으면 무한루프를 돌게 된다. "),Rn=e(Ss,"CODE",{});var Ec=i(Rn);Ao=c(Ec,"break"),Ec.forEach(n),Mo=c(Ss,"문과 "),Dn=e(Ss,"CODE",{});var vc=i(Dn);No=c(vc,"contine"),vc.forEach(n),Io=c(Ss,"문도 사용 가능하다."),Ss.forEach(n),vt=r(s),_t=e(s,"BR",{}),wt=r(s),Y=e(s,"H3",{id:!0});var Sl=i(Y);$=e(Sl,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var _c=i($);xn=e(_c,"SPAN",{class:!0}),i(xn).forEach(n),_c.forEach(n),jo=c(Sl,"for-range loop"),Sl.forEach(n),yt=r(s),bs=e(s,"PRE",{class:!0});var Mi=i(bs);Mi.forEach(n),Pt=r(s),_=e(s,"P",{});var ps=i(_);qo=c(ps,"다른 언어에 존재하는 "),Bn=e(ps,"CODE",{});var wc=i(Bn);zo=c(wc,"for-each"),wc.forEach(n),Uo=c(ps," 형태의 반복문과 유사한 형태이다. "),Hn=e(ps,"CODE",{});var yc=i(Hn);Vo=c(yc,"range"),yc.forEach(n),Jo=c(ps,` 키워드를 통해 각각 인덱스와 값에 접근할 수 있다.
또한 변수 이름을 언더바(`),Ln=e(ps,"CODE",{});var Pc=i(Ln);Wo=c(Pc,"_"),Pc.forEach(n),Fo=c(ps,")로 설정하면, 해당 값을 사용하지 않고 넘긴다는 의미가 된다. 적절히 사용할 수 있도록 하자."),ps.forEach(n),Ct=r(s),Ot=e(s,"BR",{}),Rt=r(s),Es=e(s,"P",{});var Tl=i(Es);Sn=e(Tl,"CODE",{});var Cc=i(Sn);Zo=c(Cc,"map"),Cc.forEach(n),Ko=c(Tl," 타입에 대해서도 for-range loop를 적용할 수 있다."),Tl.forEach(n),Dt=r(s),vs=e(s,"PRE",{class:!0});var Ni=i(vs);Ni.forEach(n),xt=r(s),Us=e(s,"P",{});var Oc=i(Us);Qo=c(Oc,"대충 Python이랑 비슷한 것 같다."),Oc.forEach(n),Bt=r(s),Ht=e(s,"BR",{}),Lt=r(s),_s=e(s,"P",{});var hl=i(_s);Tn=e(hl,"CODE",{});var Rc=i(Tn);Xo=c(Rc,"string"),Rc.forEach(n),Yo=c(hl,"에 대해서도 for-range loop가 가능하다."),hl.forEach(n),St=r(s),ws=e(s,"PRE",{class:!0});var Ii=i(ws);Ii.forEach(n),Tt=r(s),O=e(s,"P",{});var Fs=i(O);$o=c(Fs,"특이사항은 "),hn=e(Fs,"CODE",{});var Dc=i(hn);go=c(Dc,"byte"),Dc.forEach(n),sp=c(Fs," 단위가 아닌 "),Gn=e(Fs,"CODE",{});var xc=i(Gn);np=c(xc,"rune"),xc.forEach(n),ap=c(Fs,` 단위로 iterating한다는 것.
따라서 문자의 크기가 2바이트 이상인 경우, 인덱스가 점프하는 것을 확인할 수 있다.`),Fs.forEach(n),ht=r(s),Gt=e(s,"BR",{}),At=r(s),R=e(s,"P",{});var Zs=i(R);tp=c(Zs,"Go에서의 "),An=e(Zs,"CODE",{});var Bc=i(An);ep=c(Bc,"for"),Bc.forEach(n),op=c(Zs,"문은 "),Mn=e(Zs,"STRONG",{});var Hc=i(Mn);pp=c(Hc,"Labeling"),Hc.forEach(n),lp=c(Zs,"을 지원한다."),Zs.forEach(n),Mt=r(s),ys=e(s,"PRE",{class:!0});var ji=i(ys);ji.forEach(n),Nt=r(s),b=e(s,"P",{});var L=i(b);cp=c(L,"바깥쪽 반복문에 "),Nn=e(L,"CODE",{});var Lc=i(Nn);ip=c(Lc,"outer"),Lc.forEach(n),up=c(L,`라는 Label이 붙어있다.
그리고 안쪽 반복문에서 `),In=e(L,"CODE",{});var Sc=i(In);rp=c(Sc,"continue outer"),Sc.forEach(n),kp=c(L,"를 통해 "),jn=e(L,"CODE",{});var Tc=i(jn);fp=c(Tc,"for i, r := range sample {}"),Tc.forEach(n),mp=c(L," 블록이 아닌, "),qn=e(L,"CODE",{});var hc=i(qn);dp=c(hc,"for _, sample := range samples"),hc.forEach(n),bp=c(L," 블록의 시작점으로 되돌아가고 있다."),L.forEach(n),It=r(s),jt=e(s,"BR",{}),qt=e(s,"BR",{}),zt=r(s),g=e(s,"H2",{id:!0});var Gl=i(g);ss=e(Gl,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Gc=i(ss);zn=e(Gc,"SPAN",{class:!0}),i(zn).forEach(n),Gc.forEach(n),Ep=c(Gl,"switch"),Gl.forEach(n),Ut=r(s),Vt=e(s,"HR",{}),Jt=r(s),D=e(s,"P",{});var Ks=i(D);vp=c(Ks,"보통 제한적인 상황에서만 사용되거나 "),Un=e(Ks,"CODE",{});var Ac=i(Un);_p=c(Ac,"switch"),Ac.forEach(n),wp=c(Ks,"문이 없는 다른 언어들과는 달리, Go는 "),Vn=e(Ks,"CODE",{});var Mc=i(Vn);yp=c(Mc,"switch"),Mc.forEach(n),Pp=c(Ks,"문이 엄청 잘되어있다."),Ks.forEach(n),Wt=r(s),Ps=e(s,"PRE",{class:!0});var qi=i(Ps);qi.forEach(n),Ft=r(s),f=e(s,"P",{});var m=i(f);Cp=c(m,"여러 값에 대해 적용되는 "),Jn=e(m,"CODE",{});var Nc=i(Jn);Op=c(Nc,"case"),Nc.forEach(n),Rp=c(m,"를 설정하려면 컴마("),Wn=e(m,"CODE",{});var Ic=i(Wn);Dp=c(Ic,","),Ic.forEach(n),xp=c(m,")로 값들을 구분지어서 나열하면 된다."),Bp=e(m,"BR",{}),Hp=c(m,`
특이사항은 `),Fn=e(m,"CODE",{});var jc=i(Fn);Lp=c(jc,"case"),jc.forEach(n),Sp=c(m," 블록에서 "),Zn=e(m,"CODE",{});var qc=i(Zn);Tp=c(qc,"break"),qc.forEach(n),hp=c(m,"를 통한 탈출을 지원하긴 하지만, 다른 언어와 달리 반드시 사용하지 않아도 "),Kn=e(m,"CODE",{});var zc=i(Kn);Gp=c(zc,"case"),zc.forEach(n),Ap=c(m,` 블록이 끝나면 알아서 탈출해준다.
만약 `),Qn=e(m,"CODE",{});var Uc=i(Qn);Mp=c(Uc,"case"),Uc.forEach(n),Np=c(m," 블록이 끝나고 아래 "),Xn=e(m,"CODE",{});var Vc=i(Xn);Ip=c(Vc,"case"),Vc.forEach(n),jp=c(m," 블록도 실행되게끔 하고자 하는 경우, "),Yn=e(m,"CODE",{});var Jc=i(Yn);qp=c(Jc,"fallthrough"),Jc.forEach(n),zp=c(m," 키워드를 사용하면 된다 한다. 다만 권장되지는 않는 듯 하다."),m.forEach(n),Zt=r(s),Kt=e(s,"BR",{}),Qt=r(s),E=e(s,"P",{});var T=i(E);$n=e(T,"CODE",{});var Wc=i($n);Up=c(Wc,"switch"),Wc.forEach(n),Vp=c(T,"문에 아무런 변수도 할당하지 않는 경우, boolean expression의 true/false 여부에 따라 "),gn=e(T,"CODE",{});var Fc=i(gn);Jp=c(Fc,"case"),Fc.forEach(n),Wp=c(T," 블록이 실행된다. "),sa=e(T,"CODE",{});var Zc=i(sa);Fp=c(Zc,"if"),Zc.forEach(n),Zp=c(T,"/"),na=e(T,"CODE",{});var Kc=i(na);Kp=c(Kc,"else"),Kc.forEach(n),Qp=c(T,"문이랑 비슷한듯."),T.forEach(n),Xt=r(s),Cs=e(s,"PRE",{class:!0});var zi=i(Cs);zi.forEach(n),Yt=r(s),P=e(s,"P",{});var Ts=i(P);aa=e(Ts,"CODE",{});var Qc=i(aa);Xp=c(Qc,"case"),Qc.forEach(n),Yp=c(Ts,"안에서 "),ta=e(Ts,"CODE",{});var Xc=i(ta);$p=c(Xc,"for"),Xc.forEach(n),gp=c(Ts,"문을 탈출하려면 위처럼 "),ea=e(Ts,"CODE",{});var Yc=i(ea);sl=c(Yc,"break"),Yc.forEach(n),nl=c(Ts,"문에 Label을 명시해주어야 한다."),Ts.forEach(n),$t=r(s),gt=e(s,"BR",{}),se=e(s,"BR",{}),ne=r(s),ns=e(s,"H2",{id:!0});var Al=i(ns);as=e(Al,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var $c=i(as);oa=e($c,"SPAN",{class:!0}),i(oa).forEach(n),$c.forEach(n),al=c(Al,"goto"),Al.forEach(n),ae=r(s),te=e(s,"HR",{}),ee=r(s),x=e(s,"P",{});var Qs=i(x);tl=c(Qs,"놀랍게도 Go엔 "),pa=e(Qs,"CODE",{});var gc=i(pa);el=c(gc,"goto"),gc.forEach(n),ol=c(Qs,"가 있다. "),la=e(Qs,"CODE",{});var si=i(la);pl=c(si,"goto"),si.forEach(n),ll=c(Qs," 자체가 가지고 있는 문제점을 해결하기 위해 몇 가지 보완이 이루어진 듯 하다."),Qs.forEach(n),oe=r(s),Os=e(s,"PRE",{class:!0});var Ui=i(Os);Ui.forEach(n),pe=r(s),Rs=e(s,"P",{});var Ml=i(Rs);ca=e(Ml,"CODE",{});var ni=i(ca);cl=c(ni,"goto"),ni.forEach(n),il=c(Ml,"를 통해 특정 block 안으로 들어가거나, 변수 선언 이전으로 되돌아가거나 할 수는 없다."),Ml.forEach(n),le=r(s),ce=e(s,"BR",{}),ie=r(s),Ds=e(s,"P",{});var Nl=i(Ds);ia=e(Nl,"CODE",{});var ai=i(ia);ul=c(ai,"goto"),ai.forEach(n),rl=c(Nl,"가 유용하게 쓰이는 경우가 한 가지 있다."),Nl.forEach(n),ue=r(s),xs=e(s,"PRE",{class:!0});var Vi=i(xs);Vi.forEach(n),re=r(s),B=e(s,"P",{});var Xs=i(B);kl=c(Xs,`위처럼 flag를 설정하여, flag의 여부에 따라 추가적으로 처리를 해주어야 하는 경우이다.
이 경우 위처럼 `),ua=e(Xs,"CODE",{});var ti=i(ua);fl=c(ti,"goto"),ti.forEach(n),ml=c(Xs,"를 사용하는 것이 "),ra=e(Xs,"CODE",{});var ei=i(ra);dl=c(ei,"if"),ei.forEach(n),bl=c(Xs,"를 사용하는 것보다 깔끔하다고 한다."),Xs.forEach(n),ke=r(s),fe=e(s,"BR",{}),me=e(s,"BR",{}),de=r(s),ts=e(s,"H2",{id:!0});var Il=i(ts);es=e(Il,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var oi=i(es);ka=e(oi,"SPAN",{class:!0}),i(ka).forEach(n),oi.forEach(n),El=c(Il,"References"),Il.forEach(n),be=r(s),Ee=e(s,"HR",{}),ve=r(s),Vs=e(s,"CENTER",{});var pi=i(Vs);S=e(pi,"P",{});var Ys=i(S);Bs=e(Ys,"A",{href:!0,rel:!0});var li=i(Bs);Js=e(li,"IMG",{src:!0,alt:!0}),li.forEach(n),vl=r(Ys),_l=e(Ys,"BR",{}),wl=r(Ys),Hs=e(Ys,"A",{href:!0,rel:!0});var ci=i(Hs);yl=c(ci,"Jon Bodner, 『Learning Go』, O’Reilly Media, Inc."),ci.forEach(n),Ys.forEach(n),pi.forEach(n),_e=r(s),we=e(s,"BR",{}),ye=e(s,"BR",{}),this.h()},h(){k($s,"class","icon icon-link"),k(G,"aria-hidden","true"),k(G,"tabindex","-1"),k(G,"href","#shadowing"),k(h,"id","shadowing"),k(ls,"class","language-go"),k(cs,"class","language-go"),k(is,"class","language-bash"),k(us,"class","language-bash"),k(pn,"class","icon icon-link"),k(N,"aria-hidden","true"),k(N,"tabindex","-1"),k(N,"href","#if"),k(M,"id","if"),k(rs,"class","language-go"),k(ks,"class","language-go"),k(rn,"class","icon icon-link"),k(U,"aria-hidden","true"),k(U,"tabindex","-1"),k(U,"href","#for"),k(z,"id","for"),k(vn,"class","icon icon-link"),k(F,"aria-hidden","true"),k(F,"tabindex","-1"),k(F,"href","#the-complete-for-statement"),k(W,"id","the-complete-for-statement"),k(fs,"class","language-go"),k(Pn,"class","icon icon-link"),k(K,"aria-hidden","true"),k(K,"tabindex","-1"),k(K,"href","#condition-only-statements"),k(Z,"id","condition-only-statements"),k(ms,"class","language-go"),k(Cn,"class","icon icon-link"),k(X,"aria-hidden","true"),k(X,"tabindex","-1"),k(X,"href","#infinite-loop-and-break-continue-statements"),k(Q,"id","infinite-loop-and-break-continue-statements"),k(ds,"class","language-go"),k(xn,"class","icon icon-link"),k($,"aria-hidden","true"),k($,"tabindex","-1"),k($,"href","#for-range-loop"),k(Y,"id","for-range-loop"),k(bs,"class","language-go"),k(vs,"class","language-go"),k(ws,"class","language-go"),k(ys,"class","language-go"),k(zn,"class","icon icon-link"),k(ss,"aria-hidden","true"),k(ss,"tabindex","-1"),k(ss,"href","#switch"),k(g,"id","switch"),k(Ps,"class","language-go"),k(Cs,"class","language-go"),k(oa,"class","icon icon-link"),k(as,"aria-hidden","true"),k(as,"tabindex","-1"),k(as,"href","#goto"),k(ns,"id","goto"),k(Os,"class","language-go"),k(xs,"class","language-go"),k(ka,"class","icon icon-link"),k(es,"aria-hidden","true"),k(es,"tabindex","-1"),k(es,"href","#references"),k(ts,"id","references"),Zi(Js.src,ql="https://learning.oreilly.com/covers/urn:orm:book:9781492077206/400w/")||k(Js,"src",ql),k(Js,"alt","Learning Go Book Cover"),k(Bs,"href","https://learning.oreilly.com/library/view/learning-go/9781492077206/"),k(Bs,"rel","nofollow"),k(Hs,"href","https://learning.oreilly.com/library/view/learning-go/9781492077206/"),k(Hs,"rel","nofollow")},m(s,o){p(s,hs,o),p(s,ma,o),p(s,Gs,o),a(Gs,xe),p(s,da,o),p(s,ba,o),p(s,Ea,o),p(s,va,o),p(s,h,o),a(h,G),a(G,$s),a(h,Be),p(s,_a,o),p(s,wa,o),p(s,ya,o),p(s,d,o),a(d,He),a(d,gs),a(gs,Le),a(d,Se),a(d,sn),a(sn,Te),a(d,he),a(d,nn),a(nn,Ge),a(d,Ae),a(d,an),a(an,Me),a(d,Ne),p(s,Pa,o),p(s,ls,o),ls.innerHTML=ui,p(s,Ca,o),p(s,As,o),a(As,Ie),p(s,Oa,o),p(s,Ra,o),p(s,Da,o),p(s,cs,o),cs.innerHTML=ri,p(s,xa,o),p(s,C,o),a(C,je),a(C,tn),a(tn,qe),a(C,ze),a(C,en),a(en,Ue),a(C,Ve),p(s,Ba,o),p(s,Ha,o),p(s,La,o),p(s,Ms,o),a(Ms,Je),p(s,Sa,o),p(s,is,o),is.innerHTML=ki,p(s,Ta,o),p(s,A,o),a(A,We),a(A,on),a(on,Fe),a(A,Ze),p(s,ha,o),p(s,us,o),us.innerHTML=fi,p(s,Ga,o),p(s,Aa,o),p(s,Ma,o),p(s,Na,o),p(s,M,o),a(M,N),a(N,pn),a(M,Ke),p(s,Ia,o),p(s,ja,o),p(s,qa,o),p(s,I,o),a(I,Qe),a(I,ln),a(ln,Xe),a(I,Ye),p(s,za,o),p(s,rs,o),rs.innerHTML=mi,p(s,Ua,o),p(s,Va,o),p(s,Ja,o),p(s,j,o),a(j,$e),a(j,cn),a(cn,ge),a(j,so),p(s,Wa,o),p(s,ks,o),ks.innerHTML=di,p(s,Fa,o),p(s,q,o),a(q,no),a(q,un),a(un,ao),a(q,to),p(s,Za,o),p(s,Ka,o),p(s,Qa,o),p(s,Xa,o),p(s,z,o),a(z,U),a(U,rn),a(z,eo),p(s,Ya,o),p(s,$a,o),p(s,ga,o),p(s,V,o),a(V,oo),a(V,kn),a(kn,po),a(V,lo),p(s,st,o),p(s,v,o),a(v,J),a(J,co),a(J,fn),a(fn,io),a(J,uo),a(J,mn),a(mn,ro),a(v,ko),a(v,Ns),a(Ns,fo),a(Ns,dn),a(dn,mo),a(v,bo),a(v,Is),a(Is,Eo),a(Is,bn),a(bn,vo),a(v,_o),a(v,js),a(js,wo),a(js,En),a(En,yo),p(s,nt,o),p(s,qs,o),a(qs,Po),p(s,at,o),p(s,tt,o),p(s,et,o),p(s,ot,o),p(s,W,o),a(W,F),a(F,vn),a(W,Co),p(s,pt,o),p(s,fs,o),fs.innerHTML=bi,p(s,lt,o),p(s,w,o),a(w,_n),a(_n,Oo),a(w,Ro),a(w,wn),a(wn,Do),a(w,xo),a(w,yn),a(yn,Bo),a(w,Ho),p(s,ct,o),p(s,it,o),p(s,ut,o),p(s,Z,o),a(Z,K),a(K,Pn),a(Z,Lo),p(s,rt,o),p(s,ms,o),ms.innerHTML=Ei,p(s,kt,o),p(s,zs,o),a(zs,So),p(s,ft,o),p(s,mt,o),p(s,dt,o),p(s,Q,o),a(Q,X),a(X,Cn),a(Q,To),p(s,bt,o),p(s,ds,o),ds.innerHTML=vi,p(s,Et,o),p(s,y,o),a(y,On),a(On,ho),a(y,Go),a(y,Rn),a(Rn,Ao),a(y,Mo),a(y,Dn),a(Dn,No),a(y,Io),p(s,vt,o),p(s,_t,o),p(s,wt,o),p(s,Y,o),a(Y,$),a($,xn),a(Y,jo),p(s,yt,o),p(s,bs,o),bs.innerHTML=_i,p(s,Pt,o),p(s,_,o),a(_,qo),a(_,Bn),a(Bn,zo),a(_,Uo),a(_,Hn),a(Hn,Vo),a(_,Jo),a(_,Ln),a(Ln,Wo),a(_,Fo),p(s,Ct,o),p(s,Ot,o),p(s,Rt,o),p(s,Es,o),a(Es,Sn),a(Sn,Zo),a(Es,Ko),p(s,Dt,o),p(s,vs,o),vs.innerHTML=wi,p(s,xt,o),p(s,Us,o),a(Us,Qo),p(s,Bt,o),p(s,Ht,o),p(s,Lt,o),p(s,_s,o),a(_s,Tn),a(Tn,Xo),a(_s,Yo),p(s,St,o),p(s,ws,o),ws.innerHTML=yi,p(s,Tt,o),p(s,O,o),a(O,$o),a(O,hn),a(hn,go),a(O,sp),a(O,Gn),a(Gn,np),a(O,ap),p(s,ht,o),p(s,Gt,o),p(s,At,o),p(s,R,o),a(R,tp),a(R,An),a(An,ep),a(R,op),a(R,Mn),a(Mn,pp),a(R,lp),p(s,Mt,o),p(s,ys,o),ys.innerHTML=Pi,p(s,Nt,o),p(s,b,o),a(b,cp),a(b,Nn),a(Nn,ip),a(b,up),a(b,In),a(In,rp),a(b,kp),a(b,jn),a(jn,fp),a(b,mp),a(b,qn),a(qn,dp),a(b,bp),p(s,It,o),p(s,jt,o),p(s,qt,o),p(s,zt,o),p(s,g,o),a(g,ss),a(ss,zn),a(g,Ep),p(s,Ut,o),p(s,Vt,o),p(s,Jt,o),p(s,D,o),a(D,vp),a(D,Un),a(Un,_p),a(D,wp),a(D,Vn),a(Vn,yp),a(D,Pp),p(s,Wt,o),p(s,Ps,o),Ps.innerHTML=Ci,p(s,Ft,o),p(s,f,o),a(f,Cp),a(f,Jn),a(Jn,Op),a(f,Rp),a(f,Wn),a(Wn,Dp),a(f,xp),a(f,Bp),a(f,Hp),a(f,Fn),a(Fn,Lp),a(f,Sp),a(f,Zn),a(Zn,Tp),a(f,hp),a(f,Kn),a(Kn,Gp),a(f,Ap),a(f,Qn),a(Qn,Mp),a(f,Np),a(f,Xn),a(Xn,Ip),a(f,jp),a(f,Yn),a(Yn,qp),a(f,zp),p(s,Zt,o),p(s,Kt,o),p(s,Qt,o),p(s,E,o),a(E,$n),a($n,Up),a(E,Vp),a(E,gn),a(gn,Jp),a(E,Wp),a(E,sa),a(sa,Fp),a(E,Zp),a(E,na),a(na,Kp),a(E,Qp),p(s,Xt,o),p(s,Cs,o),Cs.innerHTML=Oi,p(s,Yt,o),p(s,P,o),a(P,aa),a(aa,Xp),a(P,Yp),a(P,ta),a(ta,$p),a(P,gp),a(P,ea),a(ea,sl),a(P,nl),p(s,$t,o),p(s,gt,o),p(s,se,o),p(s,ne,o),p(s,ns,o),a(ns,as),a(as,oa),a(ns,al),p(s,ae,o),p(s,te,o),p(s,ee,o),p(s,x,o),a(x,tl),a(x,pa),a(pa,el),a(x,ol),a(x,la),a(la,pl),a(x,ll),p(s,oe,o),p(s,Os,o),Os.innerHTML=Ri,p(s,pe,o),p(s,Rs,o),a(Rs,ca),a(ca,cl),a(Rs,il),p(s,le,o),p(s,ce,o),p(s,ie,o),p(s,Ds,o),a(Ds,ia),a(ia,ul),a(Ds,rl),p(s,ue,o),p(s,xs,o),xs.innerHTML=Di,p(s,re,o),p(s,B,o),a(B,kl),a(B,ua),a(ua,fl),a(B,ml),a(B,ra),a(ra,dl),a(B,bl),p(s,ke,o),p(s,fe,o),p(s,me,o),p(s,de,o),p(s,ts,o),a(ts,es),a(es,ka),a(ts,El),p(s,be,o),p(s,Ee,o),p(s,ve,o),p(s,Vs,o),a(Vs,S),a(S,Bs),a(Bs,Js),a(S,vl),a(S,_l),a(S,wl),a(S,Hs),a(Hs,yl),p(s,_e,o),p(s,we,o),p(s,ye,o)},p:jl,i:jl,o:jl,d(s){s&&n(hs),s&&n(ma),s&&n(Gs),s&&n(da),s&&n(ba),s&&n(Ea),s&&n(va),s&&n(h),s&&n(_a),s&&n(wa),s&&n(ya),s&&n(d),s&&n(Pa),s&&n(ls),s&&n(Ca),s&&n(As),s&&n(Oa),s&&n(Ra),s&&n(Da),s&&n(cs),s&&n(xa),s&&n(C),s&&n(Ba),s&&n(Ha),s&&n(La),s&&n(Ms),s&&n(Sa),s&&n(is),s&&n(Ta),s&&n(A),s&&n(ha),s&&n(us),s&&n(Ga),s&&n(Aa),s&&n(Ma),s&&n(Na),s&&n(M),s&&n(Ia),s&&n(ja),s&&n(qa),s&&n(I),s&&n(za),s&&n(rs),s&&n(Ua),s&&n(Va),s&&n(Ja),s&&n(j),s&&n(Wa),s&&n(ks),s&&n(Fa),s&&n(q),s&&n(Za),s&&n(Ka),s&&n(Qa),s&&n(Xa),s&&n(z),s&&n(Ya),s&&n($a),s&&n(ga),s&&n(V),s&&n(st),s&&n(v),s&&n(nt),s&&n(qs),s&&n(at),s&&n(tt),s&&n(et),s&&n(ot),s&&n(W),s&&n(pt),s&&n(fs),s&&n(lt),s&&n(w),s&&n(ct),s&&n(it),s&&n(ut),s&&n(Z),s&&n(rt),s&&n(ms),s&&n(kt),s&&n(zs),s&&n(ft),s&&n(mt),s&&n(dt),s&&n(Q),s&&n(bt),s&&n(ds),s&&n(Et),s&&n(y),s&&n(vt),s&&n(_t),s&&n(wt),s&&n(Y),s&&n(yt),s&&n(bs),s&&n(Pt),s&&n(_),s&&n(Ct),s&&n(Ot),s&&n(Rt),s&&n(Es),s&&n(Dt),s&&n(vs),s&&n(xt),s&&n(Us),s&&n(Bt),s&&n(Ht),s&&n(Lt),s&&n(_s),s&&n(St),s&&n(ws),s&&n(Tt),s&&n(O),s&&n(ht),s&&n(Gt),s&&n(At),s&&n(R),s&&n(Mt),s&&n(ys),s&&n(Nt),s&&n(b),s&&n(It),s&&n(jt),s&&n(qt),s&&n(zt),s&&n(g),s&&n(Ut),s&&n(Vt),s&&n(Jt),s&&n(D),s&&n(Wt),s&&n(Ps),s&&n(Ft),s&&n(f),s&&n(Zt),s&&n(Kt),s&&n(Qt),s&&n(E),s&&n(Xt),s&&n(Cs),s&&n(Yt),s&&n(P),s&&n($t),s&&n(gt),s&&n(se),s&&n(ne),s&&n(ns),s&&n(ae),s&&n(te),s&&n(ee),s&&n(x),s&&n(oe),s&&n(Os),s&&n(pe),s&&n(Rs),s&&n(le),s&&n(ce),s&&n(ie),s&&n(Ds),s&&n(ue),s&&n(xs),s&&n(re),s&&n(B),s&&n(ke),s&&n(fe),s&&n(me),s&&n(de),s&&n(ts),s&&n(be),s&&n(Ee),s&&n(ve),s&&n(Vs),s&&n(_e),s&&n(we),s&&n(ye)}}}const Xi={title:"블록, Shadowing, 흐름 제어문",date:"2022-07-27T00:00:00.000Z",excerpt:"Blocks, Shadows, and Control Structures",categories:["Golang","Basic Golang"],coverImage:"/post_img/Go/Golang_basics/cover.png",coverWidth:16,coverHeight:9,indexed:!1,exposed:!0};class Yi extends Ji{constructor(hs){super(),Wi(this,hs,null,Ki,Fi,{})}}export{Yi as default,Xi as metadata};
