import{S as re,i as ke,s as fe,k as p,q as e,a as i,y as Wo,l as o,m as u,h as s,r as c,c as r,z as zo,n as k,b as l,E as a,A as Uo,g as qo,d as Fo,B as Zo,M as de}from"./index.d78780bf.js";import{C as me}from"./CodeBlockWrapper.eeb7c0c0.js";import{I as Ee}from"./Image.605b14b5.js";function ve(Ma){let m,D=`<code class="language-go"><span class="token keyword">func</span> <span class="token function">observer</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> cancel <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> progress <span class="token operator">*</span>ProgressMeter<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	tick <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">NewTicker</span><span class="token punctuation">(</span><span class="token number">100</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Millisecond<span class="token punctuation">)</span>
	<span class="token keyword">defer</span> tick<span class="token punctuation">.</span><span class="token function">Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">var</span> lastProgress <span class="token builtin">int64</span>
	<span class="token keyword">for</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">select</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">case</span> <span class="token operator">&lt;-</span>ctx<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
			<span class="token keyword">return</span>
		<span class="token keyword">case</span> <span class="token operator">&lt;-</span>tick<span class="token punctuation">.</span>C<span class="token punctuation">:</span>
			p<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> progress<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
			<span class="token keyword">if</span> p <span class="token operator">==</span> lastProgress <span class="token punctuation">&#123;</span>
				fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"No progress in the last 100ms"</span><span class="token punctuation">)</span>
				<span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
				<span class="token keyword">return</span>
			<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
				lastProgress <span class="token operator">=</span> p
				fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Progress:"</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span>
			<span class="token punctuation">&#125;</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`;return{c(){m=p("pre"),this.h()},l(C){m=o(C,"PRE",{class:!0});var Q=u(m);Q.forEach(s),this.h()},h(){k(m,"class","language-go")},m(C,Q){l(C,m,Q),m.innerHTML=D},p:de,d(C){C&&s(m)}}}function we(Ma){let m,D,C,Q,fs,ds,ms,cn,Sa,Es,ln,Ra,vs,un,Aa,ws,rn,Ha,_s,V,jo=`<code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">var</span> str <span class="token builtin">string</span>
	<span class="token keyword">var</span> done <span class="token builtin">bool</span>
	<span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		str <span class="token operator">=</span> <span class="token string">"Done!"</span>
		done <span class="token operator">=</span> <span class="token boolean">true</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">for</span> <span class="token operator">!</span>done <span class="token punctuation">&#123;</span>
	<span class="token punctuation">&#125;</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code>`,ys,O,$a,bn,La,Ba,Pn,Ta,Ia,bs,S,Na,Cn,Wa,za,Ps,X,Jo=`<code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">var</span> done atomic<span class="token punctuation">.</span>Bool
	<span class="token keyword">var</span> a <span class="token builtin">int</span>
	<span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		a <span class="token operator">=</span> <span class="token number">5</span>
		done<span class="token punctuation">.</span><span class="token function">Store</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> done<span class="token punctuation">.</span><span class="token function">Load</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,Cs,kn,Ua,xs,G,qa,xn,Fa,Za,Dn,ja,Ja,Ds,Os,Gs,Ms,R,A,On,Ka,Ss,Rs,As,fn,Qa,Hs,Y,Ko=`<code class="language-go"><span class="token keyword">var</span> locked sync<span class="token punctuation">.</span>Bool
<span class="token keyword">func</span> <span class="token function">wrongCriticalSectionExample</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token operator">!</span>locked<span class="token punctuation">.</span><span class="token function">Load</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    locked<span class="token punctuation">.</span><span class="token function">Store</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
    <span class="token keyword">defer</span> locked<span class="token punctuation">.</span><span class="token function">Store</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>
    <span class="token comment">// do something</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,$s,d,Va,Gn,Xa,Ya,Mn,ha,ga,Sn,nt,st,Rn,at,tt,An,pt,ot,Hn,et,ct,$n,lt,ut,Ls,dn,it,Bs,h,Qo=`<code class="language-go"><span class="token keyword">func</span> <span class="token function">criticalSection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> locked<span class="token punctuation">.</span><span class="token function">CompareAndSwap</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">defer</span> locked<span class="token punctuation">.</span><span class="token function">Store</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>
    <span class="token comment">// do something</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,Ts,f,rt,Ln,kt,ft,Bn,dt,mt,Tn,Et,vt,In,wt,_t,Nn,yt,bt,Wn,Pt,Ct,zn,xt,Dt,Un,Ot,Gt,Is,mn,Mt,Ns,Ws,zs,Us,H,$,qn,St,qs,Fs,Zs,En,Rt,js,L,B,Fn,At,Js,g,Vo=`<code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">var</span> count <span class="token builtin">int64</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10000</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			atomic<span class="token punctuation">.</span><span class="token function">AddInt64</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>count<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">for</span> <span class="token punctuation">&#123;</span>
		v <span class="token operator">:=</span> atomic<span class="token punctuation">.</span><span class="token function">LoadInt64</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>count<span class="token punctuation">)</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span>
		<span class="token keyword">if</span> v <span class="token operator">==</span> <span class="token number">10000</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">break</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,Ks,T,Ht,Zn,$t,Lt,Qs,Vs,Xs,I,N,jn,Bt,Ys,vn,Tt,hs,nn,Xo=`<code class="language-go"><span class="token keyword">type</span> ProgressMeter <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
	progress  <span class="token builtin">int64</span>
	timestamp <span class="token builtin">int64</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>pm <span class="token operator">*</span>ProgressMeter<span class="token punctuation">)</span> <span class="token function">Progress</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	atomic<span class="token punctuation">.</span><span class="token function">AddInt64</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pm<span class="token punctuation">.</span>progress<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
	atomic<span class="token punctuation">.</span><span class="token function">StoreInt64</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pm<span class="token punctuation">.</span>timestamp<span class="token punctuation">,</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">UnixNano</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>pm <span class="token operator">*</span>ProgressMeter<span class="token punctuation">)</span> <span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">int64</span><span class="token punctuation">,</span> <span class="token builtin">int64</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">return</span> atomic<span class="token punctuation">.</span><span class="token function">LoadInt64</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pm<span class="token punctuation">.</span>progress<span class="token punctuation">)</span><span class="token punctuation">,</span> atomic<span class="token punctuation">.</span><span class="token function">LoadInt64</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pm<span class="token punctuation">.</span>timestamp<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code>`,gs,y,It,Jn,Nt,Wt,Kn,zt,Ut,Qn,qt,Ft,na,sa,aa,W,Zt,Vn,jt,Jt,ta,sn,Yo=`<code class="language-go"><span class="token keyword">func</span> <span class="token function">longGoroutine</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> pm <span class="token operator">*</span>ProgressMeter<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">for</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">select</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">case</span> <span class="token operator">&lt;-</span>ctx<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
			fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Context cancelled"</span><span class="token punctuation">)</span>
			<span class="token keyword">return</span>
		<span class="token keyword">default</span><span class="token punctuation">:</span>
		<span class="token punctuation">&#125;</span>
		time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">Duration</span><span class="token punctuation">(</span>rand<span class="token punctuation">.</span><span class="token function">Intn</span><span class="token punctuation">(</span><span class="token number">120</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Millisecond<span class="token punctuation">)</span>
		pm<span class="token punctuation">.</span><span class="token function">Progress</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,pa,z,Kt,Xn,Qt,Vt,oa,U,ea,_,Yn,Xt,Yt,hn,ht,gt,gn,np,sp,ns,ap,tp,ca,an,ho=`<code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">var</span> progress ProgressMeter
	ctx<span class="token punctuation">,</span> cancel <span class="token operator">:=</span> context<span class="token punctuation">.</span><span class="token function">WithCancel</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token keyword">defer</span> <span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	wg <span class="token operator">:=</span> sync<span class="token punctuation">.</span>WaitGroup<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
	wg<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
	<span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">defer</span> wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token function">longGoroutine</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token operator">&amp;</span>progress<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">go</span> <span class="token function">observer</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> cancel<span class="token punctuation">,</span> <span class="token operator">&amp;</span>progress<span class="token punctuation">)</span>
	wg<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code>`,la,v,pp,ss,op,ep,as,cp,lp,ts,up,ip,ps,rp,kp,os,fp,dp,ua,ia,ra,q,F,es,mp,ka,wn,Ep,fa,tn,go=`<code class="language-go"><span class="token keyword">func</span> <span class="token function">CancelSupport</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>cancel <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> isCancelled <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	v <span class="token operator">:=</span> atomic<span class="token punctuation">.</span>Bool<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
	cancel <span class="token operator">=</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		v<span class="token punctuation">.</span><span class="token function">Store</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
	isCancelled <span class="token operator">=</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> v<span class="token punctuation">.</span><span class="token function">Load</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">return</span>
<span class="token punctuation">&#125;</span></code>`,da,b,vp,cs,wp,_p,ls,yp,bp,us,Pp,Cp,ma,pn,ne=`<code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	cancel<span class="token punctuation">,</span> isCancelled <span class="token operator">:=</span> <span class="token function">CancelSupport</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	wg <span class="token operator">:=</span> sync<span class="token punctuation">.</span>WaitGroup<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
	wg<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
	<span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">defer</span> wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token keyword">for</span> <span class="token punctuation">&#123;</span>
			time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">100</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Millisecond<span class="token punctuation">)</span>
			<span class="token keyword">if</span> <span class="token function">isCancelled</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
				fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Cancelled"</span><span class="token punctuation">)</span>
				<span class="token keyword">return</span>
			<span class="token punctuation">&#125;</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	time<span class="token punctuation">.</span><span class="token function">AfterFunc</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">,</span> cancel<span class="token punctuation">)</span>
	wg<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code>`,Ea,va,wa,_a,Z,j,is,xp,ya,ba,Pa,x,rs,Dp,Op,on,Gp,Mp,Sp,Ca;return U=new me({props:{$$slots:{default:[ve]},$$scope:{ctx:Ma}}}),on=new Ee({props:{alt:"Effective Concurrency in Go",src:"https://learning.oreilly.com/covers/urn:orm:book:9781804619070/400w/"}}),{c(){m=p("h2"),D=p("a"),C=p("span"),Q=e("Memory Guarantees"),fs=i(),ds=p("hr"),ms=i(),cn=p("p"),Sa=e("Go에서 mutex등을 사용했을 때 병목 현상이 일어나는 경우, 이를 atomic 연산으로 대체하여 일부 해결할 수 있다."),Es=i(),ln=p("p"),Ra=e(`Go의 메모리 모델은 word size보다 작은 변수의 write 연산에 대해 원자성을 보장하지만, 해당 연산의 효과를 다른 고루틴에서 볼 수 있는지에 대한 보장은 하지 않는다.
이전에도 언급했듯 컴파일러와 CPU는 코드의 실행순서를 최적화하거나 메모리 연산을 재배치할 수 있기 때문이다.`),vs=i(),un=p("p"),Aa=e(`하지만 다른 고루틴에서 해당 변수의 값을 읽을 때, 해당 고루틴이 write한 값을 읽을 수도 있고, 이전에 write한 값을 읽을 수도 있지만, 무작위한 값을 읽지 않도록 보장해준다.
한편, word size보다 큰 변수의 write 연산에 대해서는 원자성을 보장하지 않는다. 이로 인해 예상치 못한 결과가 발생할 수 있다.`),ws=i(),rn=p("p"),Ha=e("다음 예제를 보자."),_s=i(),V=p("pre"),ys=i(),O=p("p"),$a=e(`위 코드에는 memory race가 존재한다.
이를 실행하면 `),bn=p("em"),La=e("Done!"),Ba=e("이 출력되는 것을 기대하지만, 빈 문자열이 출력되거나, 어쩌면 프로그램이 중단될 수도 있다("),Pn=p("code"),Ta=e("done"),Ia=e("에 대한 memory write가 메인 고루틴에서 관측되지 않기 때문)."),bs=i(),S=p("p"),Na=e("이를 해결하기 위해 Go는 "),Cn=p("code"),Wa=e("sync/atomic"),za=e(" 패키지를 제공한다."),Ps=i(),X=p("pre"),Cs=i(),kn=p("p"),Ua=e(`메모리는 atomic 연산에 대한 원자성을 보장한다.
만약 atomic write의 결과가 atomic read에 의해 관측되면, 해당 write 연산은 read 연산 이후에 일어난(atomic write happened before atomic read) 것으로 간주된다.
위 코드는 5를 출력하거나, 아무것도 출력하지 않는다. 하지만 0을 출력하는 경우는 없다.`),xs=i(),G=p("p"),qa=e(`주의할 점은 memory race와 data race는 다르다는 것이다.
위 프로그램의 경우 `),xn=p("code"),Fa=e("atomic"),Za=e(` 패키지를 사용하여 memory race는 해결했지만, 여전히 data race를 가지고 있다.
이러한 점 때문에 `),Dn=p("code"),ja=e("atomic"),Ja=e(" 패키지를 사용할 때는 주의해야 한다."),Ds=i(),Os=p("br"),Gs=p("br"),Ms=i(),R=p("h2"),A=p("a"),On=p("span"),Ka=e("Compare and Swap"),Ss=i(),Rs=p("hr"),As=i(),fn=p("p"),Qa=e(`조건을 검사하고 결과에 따라 동작하는 코드는 race condition을 만들 수 있다.
예를 들면 다음의 코드는 atomic을 사용함에도 mutual exclusion을 보장하지 않는다.`),Hs=i(),Y=p("pre"),$s=i(),d=p("p"),Va=e("이 함수는 "),Gn=p("code"),Xa=e("locked"),Ya=e("가 "),Mn=p("code"),ha=e("false"),ga=e("일 때만 critical section에 들어가고, critical section을 빠져나올 때 "),Sn=p("code"),nt=e("locked"),st=e("를 "),Rn=p("code"),at=e("false"),tt=e(`로 바꾼다.
하지만 두 고루틴이 동시에 `),An=p("code"),pt=e("locked.Load()"),ot=e("를 호출하고, 두 고루틴이 "),Hn=p("code"),et=e("false"),ct=e("를 읽은 후에 "),$n=p("code"),lt=e("true"),ut=e("를 쓰면, 두 고루틴 모두 critical section에 들어가게 된다."),Ls=i(),dn=p("p"),it=e(`따라서 비교 및 저장 작업을 하나의 atomic 연산으로 수행해야 하며, 이를 compare-and-swap(CAS)이라고 한다.
예제를 통해 사용 방법을 살펴보자.`),Bs=i(),h=p("pre"),Ts=i(),f=p("p"),rt=e("위 예제에서 "),Ln=p("code"),kt=e("locked"),ft=e("가 "),Bn=p("code"),dt=e("false"),mt=e("일 때만 critical section에 들어가고, "),Tn=p("code"),Et=e("locked"),vt=e("의 값을 "),In=p("code"),wt=e("true"),_t=e("로 바꾼다. 그리고 critical section을 빠져나올 때 "),Nn=p("code"),yt=e("locked"),bt=e("를 "),Wn=p("code"),Pt=e("false"),Ct=e(`로 바꾼다.
또한 `),zn=p("code"),xt=e("locked"),Dt=e("가 "),Un=p("code"),Ot=e("true"),Gt=e("일 때는 critical section에 들어가지 않는다."),Is=i(),mn=p("p"),Mt=e("CAS를 통해 Mutex의 TryLock을 대체할 수 있다."),Ns=i(),Ws=p("br"),zs=p("br"),Us=i(),H=p("h2"),$=p("a"),qn=p("span"),St=e("Atomic의 실제 사용"),qs=i(),Fs=p("hr"),Zs=i(),En=p("p"),Rt=e("atomic operation이 사용된 몇 가지 예제를 살펴보자."),js=i(),L=p("h3"),B=p("a"),Fn=p("span"),At=e("카운터"),Js=i(),g=p("pre"),Ks=i(),T=p("p"),Ht=e("위 코드에서 write 연산에 대한 memory race가 존재하지 않기 때문에 "),Zn=p("code"),$t=e("count"),Lt=e(`의 값은 반드시 10000이 된다.
따라서 실행 결과는 (race condition은 존재하기 때문에) 매번 달라지지만, 가장 마지막에는 반드시 10000이 출력되고 프로그램이 종료될 것이다.`),Qs=i(),Vs=p("br"),Xs=i(),I=p("h3"),N=p("a"),jn=p("span"),Bt=e("Heartbeat 및 Progress Indicator"),Ys=i(),vn=p("p"),Tt=e(`고루틴의 Heartbeat 및 진행 상황을 표시하는 데에도 atomic을 사용할 수 있다.
이 때 shared variable 및 mutex를 사용하지 않기 때문에 추가적인 동기화 없이 여러 고루틴에서 사용할 수 있다는 장점이 있다.`),hs=i(),nn=p("pre"),gs=i(),y=p("p"),It=e("위 예제의 "),Jn=p("code"),Nt=e("ProgressMeter"),Wt=e("는 "),Kn=p("code"),zt=e("Progress()"),Ut=e(" 메서드를 통해 진행 상황을 업데이트하고, "),Qn=p("code"),qt=e("Get()"),Ft=e(` 메서드를 통해 진행 상황을 가져온다.
이 때 메서드 안의 atomic 연산의 원자성이 보장되는 것이지, 메서드 자체의 원자성은 보장되지 않기 때문에 올바르게 구현하려면 뮤텍스 등을 사용하는 것이 좋다.`),na=i(),sa=p("br"),aa=i(),W=p("p"),Zt=e("해당 "),Vn=p("code"),jt=e("ProgressMeter"),Jt=e("를 사용하는 예제는 다음과 같다."),ta=i(),sn=p("pre"),pa=i(),z=p("p"),Kt=e("위 고루틴은 0~120ms 사이의 랜덤한 시간 동안 대기한 후 "),Xn=p("code"),Qt=e("Progress()"),Vt=e("를 호출하여 진행 상황을 업데이트한다."),oa=i(),Wo(U.$$.fragment),ea=i(),_=p("p"),Yn=p("code"),Xt=e("observer"),Yt=e(" 고루틴은 100밀리초마다 "),hn=p("code"),ht=e("ProgressMeter"),gt=e(`의 진행 상황을 가져와서 이전 진행 상황과 비교한다.
만약 진행 상황이 업데이트되지 않았다면, `),gn=p("code"),np=e("cancel()"),sp=e("을 호출하여 "),ns=p("code"),ap=e("longGoroutine"),tp=e("을 종료시킨다."),ca=i(),an=p("pre"),la=i(),v=p("p"),pp=e("위 코드를 실행하면 "),ss=p("code"),op=e("longGoroutine"),ep=e("이 진행 상황을 업데이트하고, "),as=p("code"),cp=e("observer"),lp=e(`가 진행 상황을 확인한다.
만약 `),ts=p("code"),up=e("longGoroutine"),ip=e("이 100밀리초마다 진행 상황을 업데이트하지 않으면 "),ps=p("code"),rp=e("observer"),kp=e("가 "),os=p("code"),fp=e("longGoroutine"),dp=e("을 종료시킨다."),ua=i(),ia=p("br"),ra=i(),q=p("h3"),F=p("a"),es=p("span"),mp=e("취소"),ka=i(),wn=p("p"),Ep=e("채널을 통해 취소시키는 건 이미 알고 있지만, atomic을 사용하여 취소시키는 방법도 있다."),fa=i(),tn=p("pre"),da=i(),b=p("p"),vp=e("위 코드는 "),cs=p("code"),wp=e("cancel"),_p=e(" 함수를 호출하면 "),ls=p("code"),yp=e("isCancelled"),bp=e(" 함수가 "),us=p("code"),Pp=e("true"),Cp=e(`를 반환하도록 한다. 이를 통해 다음과 같이 취소 여부를 확인할 수 있다.
Go가 아닌 다른 언어에서는 이런 식으로 취소 여부를 확인하는 경우가 많은데, Go에서는 채널을 통해 취소하는 것이 더 좋은 방법인 것 같다.`),ma=i(),pn=p("pre"),Ea=i(),va=p("br"),wa=p("br"),_a=i(),Z=p("h2"),j=p("a"),is=p("span"),xp=e("References"),ya=i(),ba=p("hr"),Pa=i(),x=p("center"),rs=p("p"),Dp=e("["),Op=i(),Wo(on.$$.fragment),Gp=e(`
](https://learning.oreilly.com/library/view/effective-concurrency-in/9781804619070/)`),Mp=p("br"),Sp=e(`
[Burak Serdar, 『Effective Concurrency in Go』, Packt Publishing](https://learning.oreilly.com/library/view/effective-concurrency-in/9781804619070/)`),this.h()},l(n){m=o(n,"H2",{id:!0});var t=u(m);D=o(t,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var ks=u(D);C=o(ks,"SPAN",{class:!0}),u(C).forEach(s),ks.forEach(s),Q=c(t,"Memory Guarantees"),t.forEach(s),fs=r(n),ds=o(n,"HR",{}),ms=r(n),cn=o(n,"P",{});var Tp=u(cn);Sa=c(Tp,"Go에서 mutex등을 사용했을 때 병목 현상이 일어나는 경우, 이를 atomic 연산으로 대체하여 일부 해결할 수 있다."),Tp.forEach(s),Es=r(n),ln=o(n,"P",{});var Ip=u(ln);Ra=c(Ip,`Go의 메모리 모델은 word size보다 작은 변수의 write 연산에 대해 원자성을 보장하지만, 해당 연산의 효과를 다른 고루틴에서 볼 수 있는지에 대한 보장은 하지 않는다.
이전에도 언급했듯 컴파일러와 CPU는 코드의 실행순서를 최적화하거나 메모리 연산을 재배치할 수 있기 때문이다.`),Ip.forEach(s),vs=r(n),un=o(n,"P",{});var Np=u(un);Aa=c(Np,`하지만 다른 고루틴에서 해당 변수의 값을 읽을 때, 해당 고루틴이 write한 값을 읽을 수도 있고, 이전에 write한 값을 읽을 수도 있지만, 무작위한 값을 읽지 않도록 보장해준다.
한편, word size보다 큰 변수의 write 연산에 대해서는 원자성을 보장하지 않는다. 이로 인해 예상치 못한 결과가 발생할 수 있다.`),Np.forEach(s),ws=r(n),rn=o(n,"P",{});var Wp=u(rn);Ha=c(Wp,"다음 예제를 보자."),Wp.forEach(s),_s=r(n),V=o(n,"PRE",{class:!0});var se=u(V);se.forEach(s),ys=r(n),O=o(n,"P",{});var _n=u(O);$a=c(_n,`위 코드에는 memory race가 존재한다.
이를 실행하면 `),bn=o(_n,"EM",{});var zp=u(bn);La=c(zp,"Done!"),zp.forEach(s),Ba=c(_n,"이 출력되는 것을 기대하지만, 빈 문자열이 출력되거나, 어쩌면 프로그램이 중단될 수도 있다("),Pn=o(_n,"CODE",{});var Up=u(Pn);Ta=c(Up,"done"),Up.forEach(s),Ia=c(_n,"에 대한 memory write가 메인 고루틴에서 관측되지 않기 때문)."),_n.forEach(s),bs=r(n),S=o(n,"P",{});var xa=u(S);Na=c(xa,"이를 해결하기 위해 Go는 "),Cn=o(xa,"CODE",{});var qp=u(Cn);Wa=c(qp,"sync/atomic"),qp.forEach(s),za=c(xa," 패키지를 제공한다."),xa.forEach(s),Ps=r(n),X=o(n,"PRE",{class:!0});var ae=u(X);ae.forEach(s),Cs=r(n),kn=o(n,"P",{});var Fp=u(kn);Ua=c(Fp,`메모리는 atomic 연산에 대한 원자성을 보장한다.
만약 atomic write의 결과가 atomic read에 의해 관측되면, 해당 write 연산은 read 연산 이후에 일어난(atomic write happened before atomic read) 것으로 간주된다.
위 코드는 5를 출력하거나, 아무것도 출력하지 않는다. 하지만 0을 출력하는 경우는 없다.`),Fp.forEach(s),xs=r(n),G=o(n,"P",{});var yn=u(G);qa=c(yn,`주의할 점은 memory race와 data race는 다르다는 것이다.
위 프로그램의 경우 `),xn=o(yn,"CODE",{});var Zp=u(xn);Fa=c(Zp,"atomic"),Zp.forEach(s),Za=c(yn,` 패키지를 사용하여 memory race는 해결했지만, 여전히 data race를 가지고 있다.
이러한 점 때문에 `),Dn=o(yn,"CODE",{});var jp=u(Dn);ja=c(jp,"atomic"),jp.forEach(s),Ja=c(yn," 패키지를 사용할 때는 주의해야 한다."),yn.forEach(s),Ds=r(n),Os=o(n,"BR",{}),Gs=o(n,"BR",{}),Ms=r(n),R=o(n,"H2",{id:!0});var Rp=u(R);A=o(Rp,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Jp=u(A);On=o(Jp,"SPAN",{class:!0}),u(On).forEach(s),Jp.forEach(s),Ka=c(Rp,"Compare and Swap"),Rp.forEach(s),Ss=r(n),Rs=o(n,"HR",{}),As=r(n),fn=o(n,"P",{});var Kp=u(fn);Qa=c(Kp,`조건을 검사하고 결과에 따라 동작하는 코드는 race condition을 만들 수 있다.
예를 들면 다음의 코드는 atomic을 사용함에도 mutual exclusion을 보장하지 않는다.`),Kp.forEach(s),Hs=r(n),Y=o(n,"PRE",{class:!0});var te=u(Y);te.forEach(s),$s=r(n),d=o(n,"P",{});var w=u(d);Va=c(w,"이 함수는 "),Gn=o(w,"CODE",{});var Qp=u(Gn);Xa=c(Qp,"locked"),Qp.forEach(s),Ya=c(w,"가 "),Mn=o(w,"CODE",{});var Vp=u(Mn);ha=c(Vp,"false"),Vp.forEach(s),ga=c(w,"일 때만 critical section에 들어가고, critical section을 빠져나올 때 "),Sn=o(w,"CODE",{});var Xp=u(Sn);nt=c(Xp,"locked"),Xp.forEach(s),st=c(w,"를 "),Rn=o(w,"CODE",{});var Yp=u(Rn);at=c(Yp,"false"),Yp.forEach(s),tt=c(w,`로 바꾼다.
하지만 두 고루틴이 동시에 `),An=o(w,"CODE",{});var hp=u(An);pt=c(hp,"locked.Load()"),hp.forEach(s),ot=c(w,"를 호출하고, 두 고루틴이 "),Hn=o(w,"CODE",{});var gp=u(Hn);et=c(gp,"false"),gp.forEach(s),ct=c(w,"를 읽은 후에 "),$n=o(w,"CODE",{});var no=u($n);lt=c(no,"true"),no.forEach(s),ut=c(w,"를 쓰면, 두 고루틴 모두 critical section에 들어가게 된다."),w.forEach(s),Ls=r(n),dn=o(n,"P",{});var so=u(dn);it=c(so,`따라서 비교 및 저장 작업을 하나의 atomic 연산으로 수행해야 하며, 이를 compare-and-swap(CAS)이라고 한다.
예제를 통해 사용 방법을 살펴보자.`),so.forEach(s),Bs=r(n),h=o(n,"PRE",{class:!0});var pe=u(h);pe.forEach(s),Ts=r(n),f=o(n,"P",{});var E=u(f);rt=c(E,"위 예제에서 "),Ln=o(E,"CODE",{});var ao=u(Ln);kt=c(ao,"locked"),ao.forEach(s),ft=c(E,"가 "),Bn=o(E,"CODE",{});var to=u(Bn);dt=c(to,"false"),to.forEach(s),mt=c(E,"일 때만 critical section에 들어가고, "),Tn=o(E,"CODE",{});var po=u(Tn);Et=c(po,"locked"),po.forEach(s),vt=c(E,"의 값을 "),In=o(E,"CODE",{});var oo=u(In);wt=c(oo,"true"),oo.forEach(s),_t=c(E,"로 바꾼다. 그리고 critical section을 빠져나올 때 "),Nn=o(E,"CODE",{});var eo=u(Nn);yt=c(eo,"locked"),eo.forEach(s),bt=c(E,"를 "),Wn=o(E,"CODE",{});var co=u(Wn);Pt=c(co,"false"),co.forEach(s),Ct=c(E,`로 바꾼다.
또한 `),zn=o(E,"CODE",{});var lo=u(zn);xt=c(lo,"locked"),lo.forEach(s),Dt=c(E,"가 "),Un=o(E,"CODE",{});var uo=u(Un);Ot=c(uo,"true"),uo.forEach(s),Gt=c(E,"일 때는 critical section에 들어가지 않는다."),E.forEach(s),Is=r(n),mn=o(n,"P",{});var io=u(mn);Mt=c(io,"CAS를 통해 Mutex의 TryLock을 대체할 수 있다."),io.forEach(s),Ns=r(n),Ws=o(n,"BR",{}),zs=o(n,"BR",{}),Us=r(n),H=o(n,"H2",{id:!0});var Ap=u(H);$=o(Ap,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var ro=u($);qn=o(ro,"SPAN",{class:!0}),u(qn).forEach(s),ro.forEach(s),St=c(Ap,"Atomic의 실제 사용"),Ap.forEach(s),qs=r(n),Fs=o(n,"HR",{}),Zs=r(n),En=o(n,"P",{});var ko=u(En);Rt=c(ko,"atomic operation이 사용된 몇 가지 예제를 살펴보자."),ko.forEach(s),js=r(n),L=o(n,"H3",{id:!0});var Hp=u(L);B=o(Hp,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var fo=u(B);Fn=o(fo,"SPAN",{class:!0}),u(Fn).forEach(s),fo.forEach(s),At=c(Hp,"카운터"),Hp.forEach(s),Js=r(n),g=o(n,"PRE",{class:!0});var oe=u(g);oe.forEach(s),Ks=r(n),T=o(n,"P",{});var Da=u(T);Ht=c(Da,"위 코드에서 write 연산에 대한 memory race가 존재하지 않기 때문에 "),Zn=o(Da,"CODE",{});var mo=u(Zn);$t=c(mo,"count"),mo.forEach(s),Lt=c(Da,`의 값은 반드시 10000이 된다.
따라서 실행 결과는 (race condition은 존재하기 때문에) 매번 달라지지만, 가장 마지막에는 반드시 10000이 출력되고 프로그램이 종료될 것이다.`),Da.forEach(s),Qs=r(n),Vs=o(n,"BR",{}),Xs=r(n),I=o(n,"H3",{id:!0});var $p=u(I);N=o($p,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Eo=u(N);jn=o(Eo,"SPAN",{class:!0}),u(jn).forEach(s),Eo.forEach(s),Bt=c($p,"Heartbeat 및 Progress Indicator"),$p.forEach(s),Ys=r(n),vn=o(n,"P",{});var vo=u(vn);Tt=c(vo,`고루틴의 Heartbeat 및 진행 상황을 표시하는 데에도 atomic을 사용할 수 있다.
이 때 shared variable 및 mutex를 사용하지 않기 때문에 추가적인 동기화 없이 여러 고루틴에서 사용할 수 있다는 장점이 있다.`),vo.forEach(s),hs=r(n),nn=o(n,"PRE",{class:!0});var ee=u(nn);ee.forEach(s),gs=r(n),y=o(n,"P",{});var J=u(y);It=c(J,"위 예제의 "),Jn=o(J,"CODE",{});var wo=u(Jn);Nt=c(wo,"ProgressMeter"),wo.forEach(s),Wt=c(J,"는 "),Kn=o(J,"CODE",{});var _o=u(Kn);zt=c(_o,"Progress()"),_o.forEach(s),Ut=c(J," 메서드를 통해 진행 상황을 업데이트하고, "),Qn=o(J,"CODE",{});var yo=u(Qn);qt=c(yo,"Get()"),yo.forEach(s),Ft=c(J,` 메서드를 통해 진행 상황을 가져온다.
이 때 메서드 안의 atomic 연산의 원자성이 보장되는 것이지, 메서드 자체의 원자성은 보장되지 않기 때문에 올바르게 구현하려면 뮤텍스 등을 사용하는 것이 좋다.`),J.forEach(s),na=r(n),sa=o(n,"BR",{}),aa=r(n),W=o(n,"P",{});var Oa=u(W);Zt=c(Oa,"해당 "),Vn=o(Oa,"CODE",{});var bo=u(Vn);jt=c(bo,"ProgressMeter"),bo.forEach(s),Jt=c(Oa,"를 사용하는 예제는 다음과 같다."),Oa.forEach(s),ta=r(n),sn=o(n,"PRE",{class:!0});var ce=u(sn);ce.forEach(s),pa=r(n),z=o(n,"P",{});var Ga=u(z);Kt=c(Ga,"위 고루틴은 0~120ms 사이의 랜덤한 시간 동안 대기한 후 "),Xn=o(Ga,"CODE",{});var Po=u(Xn);Qt=c(Po,"Progress()"),Po.forEach(s),Vt=c(Ga,"를 호출하여 진행 상황을 업데이트한다."),Ga.forEach(s),oa=r(n),zo(U.$$.fragment,n),ea=r(n),_=o(n,"P",{});var M=u(_);Yn=o(M,"CODE",{});var Co=u(Yn);Xt=c(Co,"observer"),Co.forEach(s),Yt=c(M," 고루틴은 100밀리초마다 "),hn=o(M,"CODE",{});var xo=u(hn);ht=c(xo,"ProgressMeter"),xo.forEach(s),gt=c(M,`의 진행 상황을 가져와서 이전 진행 상황과 비교한다.
만약 진행 상황이 업데이트되지 않았다면, `),gn=o(M,"CODE",{});var Do=u(gn);np=c(Do,"cancel()"),Do.forEach(s),sp=c(M,"을 호출하여 "),ns=o(M,"CODE",{});var Oo=u(ns);ap=c(Oo,"longGoroutine"),Oo.forEach(s),tp=c(M,"을 종료시킨다."),M.forEach(s),ca=r(n),an=o(n,"PRE",{class:!0});var le=u(an);le.forEach(s),la=r(n),v=o(n,"P",{});var P=u(v);pp=c(P,"위 코드를 실행하면 "),ss=o(P,"CODE",{});var Go=u(ss);op=c(Go,"longGoroutine"),Go.forEach(s),ep=c(P,"이 진행 상황을 업데이트하고, "),as=o(P,"CODE",{});var Mo=u(as);cp=c(Mo,"observer"),Mo.forEach(s),lp=c(P,`가 진행 상황을 확인한다.
만약 `),ts=o(P,"CODE",{});var So=u(ts);up=c(So,"longGoroutine"),So.forEach(s),ip=c(P,"이 100밀리초마다 진행 상황을 업데이트하지 않으면 "),ps=o(P,"CODE",{});var Ro=u(ps);rp=c(Ro,"observer"),Ro.forEach(s),kp=c(P,"가 "),os=o(P,"CODE",{});var Ao=u(os);fp=c(Ao,"longGoroutine"),Ao.forEach(s),dp=c(P,"을 종료시킨다."),P.forEach(s),ua=r(n),ia=o(n,"BR",{}),ra=r(n),q=o(n,"H3",{id:!0});var Lp=u(q);F=o(Lp,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Ho=u(F);es=o(Ho,"SPAN",{class:!0}),u(es).forEach(s),Ho.forEach(s),mp=c(Lp,"취소"),Lp.forEach(s),ka=r(n),wn=o(n,"P",{});var $o=u(wn);Ep=c($o,"채널을 통해 취소시키는 건 이미 알고 있지만, atomic을 사용하여 취소시키는 방법도 있다."),$o.forEach(s),fa=r(n),tn=o(n,"PRE",{class:!0});var ue=u(tn);ue.forEach(s),da=r(n),b=o(n,"P",{});var K=u(b);vp=c(K,"위 코드는 "),cs=o(K,"CODE",{});var Lo=u(cs);wp=c(Lo,"cancel"),Lo.forEach(s),_p=c(K," 함수를 호출하면 "),ls=o(K,"CODE",{});var Bo=u(ls);yp=c(Bo,"isCancelled"),Bo.forEach(s),bp=c(K," 함수가 "),us=o(K,"CODE",{});var To=u(us);Pp=c(To,"true"),To.forEach(s),Cp=c(K,`를 반환하도록 한다. 이를 통해 다음과 같이 취소 여부를 확인할 수 있다.
Go가 아닌 다른 언어에서는 이런 식으로 취소 여부를 확인하는 경우가 많은데, Go에서는 채널을 통해 취소하는 것이 더 좋은 방법인 것 같다.`),K.forEach(s),ma=r(n),pn=o(n,"PRE",{class:!0});var ie=u(pn);ie.forEach(s),Ea=r(n),va=o(n,"BR",{}),wa=o(n,"BR",{}),_a=r(n),Z=o(n,"H2",{id:!0});var Bp=u(Z);j=o(Bp,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Io=u(j);is=o(Io,"SPAN",{class:!0}),u(is).forEach(s),Io.forEach(s),xp=c(Bp,"References"),Bp.forEach(s),ya=r(n),ba=o(n,"HR",{}),Pa=r(n),x=o(n,"CENTER",{});var en=u(x);rs=o(en,"P",{});var No=u(rs);Dp=c(No,"["),No.forEach(s),Op=r(en),zo(on.$$.fragment,en),Gp=c(en,`
](https://learning.oreilly.com/library/view/effective-concurrency-in/9781804619070/)`),Mp=o(en,"BR",{}),Sp=c(en,`
[Burak Serdar, 『Effective Concurrency in Go』, Packt Publishing](https://learning.oreilly.com/library/view/effective-concurrency-in/9781804619070/)`),en.forEach(s),this.h()},h(){k(C,"class","icon icon-link"),k(D,"aria-hidden","true"),k(D,"tabindex","-1"),k(D,"href","#memory-guarantees"),k(m,"id","memory-guarantees"),k(V,"class","language-go"),k(X,"class","language-go"),k(On,"class","icon icon-link"),k(A,"aria-hidden","true"),k(A,"tabindex","-1"),k(A,"href","#compare-and-swap"),k(R,"id","compare-and-swap"),k(Y,"class","language-go"),k(h,"class","language-go"),k(qn,"class","icon icon-link"),k($,"aria-hidden","true"),k($,"tabindex","-1"),k($,"href","#atomic의-실제-사용"),k(H,"id","atomic의-실제-사용"),k(Fn,"class","icon icon-link"),k(B,"aria-hidden","true"),k(B,"tabindex","-1"),k(B,"href","#카운터"),k(L,"id","카운터"),k(g,"class","language-go"),k(jn,"class","icon icon-link"),k(N,"aria-hidden","true"),k(N,"tabindex","-1"),k(N,"href","#heartbeat-및-progress-indicator"),k(I,"id","heartbeat-및-progress-indicator"),k(nn,"class","language-go"),k(sn,"class","language-go"),k(an,"class","language-go"),k(es,"class","icon icon-link"),k(F,"aria-hidden","true"),k(F,"tabindex","-1"),k(F,"href","#취소"),k(q,"id","취소"),k(tn,"class","language-go"),k(pn,"class","language-go"),k(is,"class","icon icon-link"),k(j,"aria-hidden","true"),k(j,"tabindex","-1"),k(j,"href","#references"),k(Z,"id","references")},m(n,t){l(n,m,t),a(m,D),a(D,C),a(m,Q),l(n,fs,t),l(n,ds,t),l(n,ms,t),l(n,cn,t),a(cn,Sa),l(n,Es,t),l(n,ln,t),a(ln,Ra),l(n,vs,t),l(n,un,t),a(un,Aa),l(n,ws,t),l(n,rn,t),a(rn,Ha),l(n,_s,t),l(n,V,t),V.innerHTML=jo,l(n,ys,t),l(n,O,t),a(O,$a),a(O,bn),a(bn,La),a(O,Ba),a(O,Pn),a(Pn,Ta),a(O,Ia),l(n,bs,t),l(n,S,t),a(S,Na),a(S,Cn),a(Cn,Wa),a(S,za),l(n,Ps,t),l(n,X,t),X.innerHTML=Jo,l(n,Cs,t),l(n,kn,t),a(kn,Ua),l(n,xs,t),l(n,G,t),a(G,qa),a(G,xn),a(xn,Fa),a(G,Za),a(G,Dn),a(Dn,ja),a(G,Ja),l(n,Ds,t),l(n,Os,t),l(n,Gs,t),l(n,Ms,t),l(n,R,t),a(R,A),a(A,On),a(R,Ka),l(n,Ss,t),l(n,Rs,t),l(n,As,t),l(n,fn,t),a(fn,Qa),l(n,Hs,t),l(n,Y,t),Y.innerHTML=Ko,l(n,$s,t),l(n,d,t),a(d,Va),a(d,Gn),a(Gn,Xa),a(d,Ya),a(d,Mn),a(Mn,ha),a(d,ga),a(d,Sn),a(Sn,nt),a(d,st),a(d,Rn),a(Rn,at),a(d,tt),a(d,An),a(An,pt),a(d,ot),a(d,Hn),a(Hn,et),a(d,ct),a(d,$n),a($n,lt),a(d,ut),l(n,Ls,t),l(n,dn,t),a(dn,it),l(n,Bs,t),l(n,h,t),h.innerHTML=Qo,l(n,Ts,t),l(n,f,t),a(f,rt),a(f,Ln),a(Ln,kt),a(f,ft),a(f,Bn),a(Bn,dt),a(f,mt),a(f,Tn),a(Tn,Et),a(f,vt),a(f,In),a(In,wt),a(f,_t),a(f,Nn),a(Nn,yt),a(f,bt),a(f,Wn),a(Wn,Pt),a(f,Ct),a(f,zn),a(zn,xt),a(f,Dt),a(f,Un),a(Un,Ot),a(f,Gt),l(n,Is,t),l(n,mn,t),a(mn,Mt),l(n,Ns,t),l(n,Ws,t),l(n,zs,t),l(n,Us,t),l(n,H,t),a(H,$),a($,qn),a(H,St),l(n,qs,t),l(n,Fs,t),l(n,Zs,t),l(n,En,t),a(En,Rt),l(n,js,t),l(n,L,t),a(L,B),a(B,Fn),a(L,At),l(n,Js,t),l(n,g,t),g.innerHTML=Vo,l(n,Ks,t),l(n,T,t),a(T,Ht),a(T,Zn),a(Zn,$t),a(T,Lt),l(n,Qs,t),l(n,Vs,t),l(n,Xs,t),l(n,I,t),a(I,N),a(N,jn),a(I,Bt),l(n,Ys,t),l(n,vn,t),a(vn,Tt),l(n,hs,t),l(n,nn,t),nn.innerHTML=Xo,l(n,gs,t),l(n,y,t),a(y,It),a(y,Jn),a(Jn,Nt),a(y,Wt),a(y,Kn),a(Kn,zt),a(y,Ut),a(y,Qn),a(Qn,qt),a(y,Ft),l(n,na,t),l(n,sa,t),l(n,aa,t),l(n,W,t),a(W,Zt),a(W,Vn),a(Vn,jt),a(W,Jt),l(n,ta,t),l(n,sn,t),sn.innerHTML=Yo,l(n,pa,t),l(n,z,t),a(z,Kt),a(z,Xn),a(Xn,Qt),a(z,Vt),l(n,oa,t),Uo(U,n,t),l(n,ea,t),l(n,_,t),a(_,Yn),a(Yn,Xt),a(_,Yt),a(_,hn),a(hn,ht),a(_,gt),a(_,gn),a(gn,np),a(_,sp),a(_,ns),a(ns,ap),a(_,tp),l(n,ca,t),l(n,an,t),an.innerHTML=ho,l(n,la,t),l(n,v,t),a(v,pp),a(v,ss),a(ss,op),a(v,ep),a(v,as),a(as,cp),a(v,lp),a(v,ts),a(ts,up),a(v,ip),a(v,ps),a(ps,rp),a(v,kp),a(v,os),a(os,fp),a(v,dp),l(n,ua,t),l(n,ia,t),l(n,ra,t),l(n,q,t),a(q,F),a(F,es),a(q,mp),l(n,ka,t),l(n,wn,t),a(wn,Ep),l(n,fa,t),l(n,tn,t),tn.innerHTML=go,l(n,da,t),l(n,b,t),a(b,vp),a(b,cs),a(cs,wp),a(b,_p),a(b,ls),a(ls,yp),a(b,bp),a(b,us),a(us,Pp),a(b,Cp),l(n,ma,t),l(n,pn,t),pn.innerHTML=ne,l(n,Ea,t),l(n,va,t),l(n,wa,t),l(n,_a,t),l(n,Z,t),a(Z,j),a(j,is),a(Z,xp),l(n,ya,t),l(n,ba,t),l(n,Pa,t),l(n,x,t),a(x,rs),a(rs,Dp),a(x,Op),Uo(on,x,null),a(x,Gp),a(x,Mp),a(x,Sp),Ca=!0},p(n,[t]){const ks={};t&1&&(ks.$$scope={dirty:t,ctx:n}),U.$set(ks)},i(n){Ca||(qo(U.$$.fragment,n),qo(on.$$.fragment,n),Ca=!0)},o(n){Fo(U.$$.fragment,n),Fo(on.$$.fragment,n),Ca=!1},d(n){n&&s(m),n&&s(fs),n&&s(ds),n&&s(ms),n&&s(cn),n&&s(Es),n&&s(ln),n&&s(vs),n&&s(un),n&&s(ws),n&&s(rn),n&&s(_s),n&&s(V),n&&s(ys),n&&s(O),n&&s(bs),n&&s(S),n&&s(Ps),n&&s(X),n&&s(Cs),n&&s(kn),n&&s(xs),n&&s(G),n&&s(Ds),n&&s(Os),n&&s(Gs),n&&s(Ms),n&&s(R),n&&s(Ss),n&&s(Rs),n&&s(As),n&&s(fn),n&&s(Hs),n&&s(Y),n&&s($s),n&&s(d),n&&s(Ls),n&&s(dn),n&&s(Bs),n&&s(h),n&&s(Ts),n&&s(f),n&&s(Is),n&&s(mn),n&&s(Ns),n&&s(Ws),n&&s(zs),n&&s(Us),n&&s(H),n&&s(qs),n&&s(Fs),n&&s(Zs),n&&s(En),n&&s(js),n&&s(L),n&&s(Js),n&&s(g),n&&s(Ks),n&&s(T),n&&s(Qs),n&&s(Vs),n&&s(Xs),n&&s(I),n&&s(Ys),n&&s(vn),n&&s(hs),n&&s(nn),n&&s(gs),n&&s(y),n&&s(na),n&&s(sa),n&&s(aa),n&&s(W),n&&s(ta),n&&s(sn),n&&s(pa),n&&s(z),n&&s(oa),Zo(U,n),n&&s(ea),n&&s(_),n&&s(ca),n&&s(an),n&&s(la),n&&s(v),n&&s(ua),n&&s(ia),n&&s(ra),n&&s(q),n&&s(ka),n&&s(wn),n&&s(fa),n&&s(tn),n&&s(da),n&&s(b),n&&s(ma),n&&s(pn),n&&s(Ea),n&&s(va),n&&s(wa),n&&s(_a),n&&s(Z),n&&s(ya),n&&s(ba),n&&s(Pa),n&&s(x),Zo(on)}}}const Pe={title:"아토믹 메모리 오퍼레이션",date:"2023-10-01T00:00:00.000Z",excerpt:"아토믹 메모리 오퍼레이션에 대해 알아보자",categories:["Golang","Concurrency in Go"],coverImage:"/post_img/Go/Concurrency in Go/cover.png",coverWidth:16,coverHeight:9,indexed:!1,exposed:!0};class Ce extends re{constructor(m){super(),ke(this,m,null,we,fe,{})}}export{Ce as default,Pe as metadata};
