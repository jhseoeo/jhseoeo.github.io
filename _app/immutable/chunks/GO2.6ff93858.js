import{S as Ic,i as qc,s as Zc,k as t,a as r,q as o,l as e,c as u,m as i,r as c,h as n,n as f,p as pc,U as zc,b as p,E as a,M as zp}from"./index.5621e629.js";function Uc(oc){let Os,$n,Ds,$t,hn,gn,sa,na,L,G,zs,ht,aa,ta,ea,la,pa,M,N,Us,gt,oa,xs,se,ca,w,Vs,ne,ae,ps,te,Bs,ee,le,pe,js,oe,ce,Js,ie,ia,os,cc=`<code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">"fmt"</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">var</span> a <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">1</span>         <span class="token comment">// variable declaration</span>
	<span class="token keyword">var</span> b <span class="token builtin">string</span>          <span class="token comment">// declare string variable. it's value would be zero value of string ("")</span>
	<span class="token keyword">var</span> c<span class="token punctuation">,</span> d <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">,</span> <span class="token string">"456"</span> <span class="token comment">// multiple declaration. their type would be int, string</span>
	<span class="token keyword">var</span> <span class="token punctuation">(</span>                 <span class="token comment">// inside parentheses, variables can be declared line by line</span>
		e    <span class="token builtin">int</span>            <span class="token comment">//</span>
		f    <span class="token operator">=</span> <span class="token number">20</span>           <span class="token comment">// it's type would be int</span>
		g<span class="token punctuation">,</span> h <span class="token operator">=</span> <span class="token number">1.23</span><span class="token punctuation">,</span> <span class="token string">"4.56"</span> <span class="token comment">// multiple declaration, only specified their values</span>
		i<span class="token punctuation">,</span> j <span class="token builtin">string</span>         <span class="token comment">// only specified their types</span>
	<span class="token punctuation">)</span>
	<span class="token keyword">var</span> 한글개꿀ㅋㅋ <span class="token operator">=</span> <span class="token number">1</span> <span class="token comment">// 한글도 되긴 하는데 이러지 맙시다</span></code>`,ra,ua,fa,A,Ks,re,ue,Qs,fe,ke,ka,cs,ic=`<code class="language-go">	k <span class="token operator">:=</span> <span class="token number">10</span>        <span class="token comment">// variable declaration by := operator</span>
	k<span class="token punctuation">,</span> l <span class="token operator">:=</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">20</span> <span class="token comment">// multiple declaration</span></code>`,ba,S,Ws,be,ve,Hs,de,Ee,va,C,is,F,Xs,me,_e,d,Ys,ye,we,$s,Pe,Ce,hs,Re,Oe,gs,De,xe,sn,Be,He,nn,Ae,Se,Te,k,Le,an,Ge,Me,tn,Ne,Fe,en,Ie,qe,ln,Ze,ze,pn,Ue,Ve,on,je,Je,cn,Ke,Qe,rn,We,Xe,un,Ye,$e,fn,he,ge,da,Ea,ma,I,sl,kn,nl,al,_a,rs,rc=`<code class="language-go">	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> e<span class="token punctuation">,</span> f<span class="token punctuation">,</span> g<span class="token punctuation">,</span> h<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> k<span class="token punctuation">,</span> l<span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>asd<span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>한글개꿀ㅋㅋ<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code>`,ya,wa,Pa,Ca,q,Z,bn,tl,Ra,z,el,vn,ll,pl,Oa,us,uc=`<code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">"fmt"</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">const</span> a <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">1</span>         <span class="token comment">// typed</span>
	<span class="token keyword">const</span> b<span class="token punctuation">,</span> c <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">,</span> <span class="token string">"456"</span> <span class="token comment">// untyped, multiple declaration</span>
	<span class="token keyword">const</span> <span class="token punctuation">(</span>                 <span class="token comment">// decalaration constants using parentheses</span>
		d    <span class="token operator">=</span> <span class="token number">20</span>           <span class="token comment">// inside parentheses, constants can be declared line by line</span>
		e<span class="token punctuation">,</span> f <span class="token operator">=</span> <span class="token number">1.23</span><span class="token punctuation">,</span> <span class="token string">"4.56"</span> <span class="token comment">// multiple decalaration</span>
	<span class="token punctuation">)</span>

	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> e<span class="token punctuation">,</span> f<span class="token punctuation">)</span></code>`,Da,xa,Ba,As,ol,Ha,fs,fc=`<code class="language-go">	<span class="token keyword">var</span> i <span class="token builtin">int</span> <span class="token operator">=</span> a <span class="token comment">// constants can be value of variables when their types are same</span>
	<span class="token comment">// var f float64 = a // if types are different, it occurs error</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code>`,Aa,Sa,Ta,La,U,V,dn,cl,Ga,Ma,Na,Ss,il,Fa,Ia,qa,Za,j,J,En,rl,za,K,ul,mn,fl,kl,Ua,ks,kc=`<code class="language-go"><span class="token keyword">var</span> flag <span class="token builtin">bool</span> <span class="token comment">// initial value is false</span>
<span class="token keyword">var</span> isAwesome <span class="token operator">=</span> <span class="token boolean">true</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>flag<span class="token punctuation">,</span> isAwesome<span class="token punctuation">)</span></code>`,Va,ja,Ja,Ka,Q,W,_n,bl,Qa,Ts,vl,Wa,bs,bc=`<code class="language-go"><span class="token keyword">var</span> i8 <span class="token builtin">int8</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">128</span>                  <span class="token comment">// 8-bit signed integer</span>
<span class="token keyword">var</span> i64 <span class="token builtin">int64</span> <span class="token operator">=</span> <span class="token number">9223372036854775807</span> <span class="token comment">// 64-bit signed integer</span>
<span class="token keyword">var</span> u32 <span class="token builtin">uint32</span> <span class="token operator">=</span> <span class="token number">4294967295</span>         <span class="token comment">// 32-bit unsigned integer</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i8<span class="token punctuation">,</span> i64<span class="token punctuation">,</span> u32<span class="token punctuation">)</span></code>`,Xa,Ya,$a,R,dl,yn,El,ml,wn,_l,yl,ha,vs,vc=`<code class="language-go"><span class="token keyword">var</span> b <span class="token builtin">byte</span> <span class="token operator">=</span> <span class="token number">123</span> <span class="token comment">// byte: 8-bit unsigned integer</span>
<span class="token keyword">var</span> uint8_ <span class="token builtin">uint8</span> <span class="token operator">=</span> <span class="token number">234</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>b <span class="token operator">==</span> uint8_<span class="token punctuation">)</span> <span class="token comment">// doesn't occur error</span></code>`,ga,st,nt,O,wl,Pn,Pl,Cl,Rl,Ol,at,ds,dc=`<code class="language-go"><span class="token keyword">var</span> i <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">9223372036854775807</span> <span class="token comment">// signed int. its size(32 or 64bits) is decided at compile time, determined by its hardware</span>
<span class="token keyword">var</span> ui <span class="token builtin">uint</span> <span class="token operator">=</span> <span class="token number">0</span>                 <span class="token comment">// unsigned int</span>
<span class="token comment">// fmt.Println(i == i64) occurs error</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> ui<span class="token punctuation">)</span></code>`,tt,et,lt,E,Dl,Cn,xl,Bl,Rn,Hl,Al,On,Sl,Tl,Dn,Ll,Gl,pt,ot,ct,P,Ml,xn,Nl,Fl,Bn,Il,ql,Hn,Zl,zl,it,Es,Ec=`<code class="language-go">fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token number">1_2_3_4</span><span class="token punctuation">,</span> <span class="token number">123_456_789_123123_456</span><span class="token punctuation">)</span> <span class="token comment">// numbers can distinguished by underbar(_)</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token number">0x1234</span><span class="token punctuation">,</span> <span class="token number">0o1234</span><span class="token punctuation">,</span> <span class="token number">0b1101</span><span class="token punctuation">)</span>          <span class="token comment">// hexadecimal, octal, binary representation</span></code>`,rt,ut,ft,kt,X,Y,An,Ul,bt,D,Vl,Sn,jl,Jl,Tn,Kl,Ql,vt,ms,mc=`<code class="language-go"><span class="token keyword">var</span> f32 <span class="token builtin">float32</span> <span class="token operator">=</span> <span class="token number">0.5</span>   <span class="token comment">// f32 : 32-bits floating point number</span>
<span class="token keyword">var</span> f64 <span class="token builtin">float32</span> <span class="token operator">=</span> <span class="token number">0.524</span> <span class="token comment">// f64 : 64-bits floating point number</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>f32<span class="token punctuation">,</span> f64<span class="token punctuation">)</span></code>`,dt,Et,mt,$,Wl,Ln,Xl,Yl,_t,_s,_c=`<code class="language-go"><span class="token keyword">var</span> c64 <span class="token builtin">complex64</span> <span class="token operator">=</span> <span class="token function">complex</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">// c64 : 복소수(float32 + float32)</span>
c128 <span class="token operator">:=</span> <span class="token function">complex</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>             <span class="token comment">// c128 : 복소수(float64 + float64)</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>c64<span class="token punctuation">,</span> c128<span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">real</span><span class="token punctuation">(</span>c128<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token comment">// 실수부</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">imag</span><span class="token punctuation">(</span>c128<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token comment">// 허수부</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>cmplx<span class="token punctuation">.</span><span class="token function">Abs</span><span class="token punctuation">(</span>c128<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 절댓값..?</span></code>`,yt,wt,Pt,Ct,h,g,Gn,$l,Rt,x,hl,Mn,gl,sp,Nn,np,ap,Ot,ys,yc=`<code class="language-go"><span class="token keyword">var</span> s1 <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">"qwe"</span>
<span class="token keyword">var</span> s2 <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">"asd"</span>

fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s1 <span class="token operator">==</span> s2<span class="token punctuation">)</span> <span class="token comment">// comparison operators between string</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s1 <span class="token operator">></span> s2<span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s1 <span class="token operator">+</span> s2<span class="token punctuation">)</span></code>`,Dt,xt,Bt,v,Fn,tp,ep,In,lp,pp,qn,op,cp,Zn,ip,rp,zn,up,fp,Un,kp,bp,Ht,ws,wc=`<code class="language-go"><span class="token keyword">var</span> character <span class="token builtin">rune</span> <span class="token operator">=</span> <span class="token char">'a'</span> <span class="token comment">// rune represents a single character</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>character<span class="token punctuation">)</span></code>`,At,St,Tt,Lt,ss,ns,Vn,vp,Gt,m,dp,jn,Ep,mp,Jn,_p,yp,Kn,wp,Pp,Qn,Cp,Rp,Mt,Ps,Pc=`<code class="language-go"><span class="token comment">// type conversion between int and float</span>
<span class="token keyword">var</span> x <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">10</span>
<span class="token keyword">var</span> y <span class="token builtin">float64</span> <span class="token operator">=</span> <span class="token number">30.2</span>
<span class="token keyword">var</span> z <span class="token builtin">float64</span> <span class="token operator">=</span> <span class="token function">float64</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> y
<span class="token keyword">var</span> d <span class="token builtin">int</span> <span class="token operator">=</span> x <span class="token operator">+</span> <span class="token function">int</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>z<span class="token punctuation">,</span> d<span class="token punctuation">)</span></code>`,Nt,Ft,It,qt,as,ts,Wn,Op,Zt,zt,Ut,Ls,T,Cs,Gs,Up,Dp,xp,Bp,Rs,Hp,Vt,jt,Jt;return{c(){Os=t("br"),$n=r(),Ds=t("p"),$t=o("본 글은 Golang을 공부하며 주요 내용이라 생각되는 것들을 기록해둔 자료이며, Ubuntu 20.04 LTS 기준으로 작성되었습니다."),hn=r(),gn=t("br"),sa=t("br"),na=r(),L=t("h2"),G=t("a"),zs=t("span"),ht=o("Variables and Constants"),aa=r(),ta=t("hr"),ea=r(),la=t("br"),pa=r(),M=t("h3"),N=t("a"),Us=t("span"),gt=o("Variables"),oa=r(),xs=t("p"),se=o("Go에서 변수는 아래와 같이 선언 및 초기화할 수 있다. 특이사항은 다음과 같다."),ca=r(),w=t("ol"),Vs=t("li"),ne=o("C/C++과는 달리, 타입이 변수명 뒤에 옴"),ae=r(),ps=t("li"),te=o("변수를 생성하고 값을 할당하지 않는 C나 C++와는 달리, 변수를 생성하면 기본적으로 할당되는 값인 "),Bs=t("span"),ee=o("zero value"),le=o("가 존재함"),pe=r(),js=t("li"),oe=o("변수가 선언만 되고 사용되지 않으면 에러가 발생함"),ce=r(),Js=t("li"),ie=o("권장되지는 않지만 전역변수도 됨"),ia=r(),os=t("pre"),ra=r(),ua=t("br"),fa=r(),A=t("p"),Ks=t("code"),re=o(":="),ue=o(" 연산자를 활용하여 변수를 선언할 수도 있다. 변수의 타입은 초기화되는 값에 따라 결정된다. c++의 "),Qs=t("code"),fe=o("auto"),ke=o(" 키워드와 비슷한 듯 하다."),ka=r(),cs=t("pre"),ba=r(),S=t("p"),Ws=t("code"),be=o(":="),ve=o(" 연산자는 편리하지만 주의해서 사용해야 한다. "),Hs=t("span"),de=o("Shadowing"),Ee=o("이 발생할 수도 있기 때문이다."),va=r(),C=t("blockquote"),is=t("h3"),F=t("a"),Xs=t("span"),me=o("Shadowing이란?"),_e=r(),d=t("p"),Ys=t("code"),ye=o("var"),we=o(` 키워드는 동일한 이름을 가진 변수를 선언할 때 에러가 발생하는데 반해,
위 예제에서는 `),$s=t("code"),Pe=o("k"),Ce=o("가 선언되고, 그 아래 줄에서 "),hs=t("code"),Re=o("l"),Oe=o("과 함께 "),gs=t("code"),De=o("k"),xe=o("가 다시 선언된 것을 확인할 수 있다("),sn=t("code"),Be=o("k"),He=o(`만 다시 선언하면 에러가 발생한다).
이 경우 해당 Block이 끝날 때까지, 앞서 선언한 `),nn=t("code"),Ae=o("k"),Se=o("의 값인 10에 접근할 수 없게 된다."),Te=r(),k=t("p"),Le=o("이런 현상을 Shadowing이라고 하며, "),an=t("code"),Ge=o(":="),Me=o(` 연산자를 사용할 때 주의해야 하는 이유이다.
특히 함수의 파라미터나, `),tn=t("code"),Ne=o("fmt"),Fe=o("같은 패키지 이름이나, 심지어는 "),en=t("code"),Ie=o("nil"),qe=o(" 또는 "),ln=t("code"),Ze=o("false"),ze=o(` 같은 리터럴들도 Shadowing할 수 있다.
`),pn=t("code"),Ue=o("var"),Ve=o(" 키워드는 함수의 타입을 명시해주는 효과도 있고 Shadowing의 염려가 없으므로 "),on=t("code"),je=o("var"),Je=o(`가 조금 더 안전한 선택지이다.
반면 `),cn=t("code"),Ke=o("if"),Qe=o(", "),rn=t("code"),We=o("switch"),Xe=o(", "),un=t("code"),Ye=o("for"),$e=o("문이나 에러 핸들링 등에서는 "),fn=t("code"),he=o(":="),ge=o("을 주로 사용한다."),da=r(),Ea=t("br"),ma=r(),I=t("p"),sl=o("변수가 선언만 되고 사용되지 않으면 에러가 발생하니, "),kn=t("code"),nl=o("fmt.Println()"),al=o(" 함수를 활용하여 모두 출력해주자."),_a=r(),rs=t("pre"),ya=r(),wa=t("br"),Pa=t("br"),Ca=r(),q=t("h3"),Z=t("a"),bn=t("span"),tl=o("Constants"),Ra=r(),z=t("p"),el=o("상수의 선언은 변수와 유사하다. "),vn=t("code"),ll=o("const"),pl=o(" 키워드를 사용한다"),Oa=r(),us=t("pre"),Da=r(),xa=t("br"),Ba=r(),As=t("p"),ol=o("상수로 선언된 값을 변수에 할당할 때, 타입이 다르면 에러가 발생한다."),Ha=r(),fs=t("pre"),Aa=r(),Sa=t("br"),Ta=t("br"),La=r(),U=t("h2"),V=t("a"),dn=t("span"),cl=o("Primitive Types"),Ga=r(),Ma=t("hr"),Na=r(),Ss=t("p"),il=o("Go의 타입들에는 아래와 같은 특징이 존재한다."),Fa=r(),Ia=t("br"),qa=t("br"),Za=r(),j=t("h3"),J=t("a"),En=t("span"),rl=o("bool"),za=r(),K=t("p"),ul=o("bool은 다른 언어와 크게 다르지 않다. Zero value는 "),mn=t("code"),fl=o("false"),kl=o("이다."),Ua=r(),ks=t("pre"),Va=r(),ja=t("br"),Ja=t("br"),Ka=r(),Q=t("h3"),W=t("a"),_n=t("span"),bl=o("int"),Qa=r(),Ts=t("p"),vl=o(`int는 C/C++와 유사하다. Zero value는 0이며, signed와 unsigned로 구분된다.
또한 8bit, 16bit, 32bit, 64bit중 변수의 크기를 결정할 수 있으며, (u)int 뒤에 크기를 붙임으로써 나타낸다.`),Wa=r(),bs=t("pre"),Xa=r(),Ya=t("br"),$a=r(),R=t("p"),dl=o("이 중 "),yn=t("code"),El=o("byte"),ml=o("라는 자료형은 "),wn=t("code"),_l=o("uint8"),yl=o("과 동일한 것으로 처리된다."),ha=r(),vs=t("pre"),ga=r(),st=t("br"),nt=r(),O=t("p"),wl=o("크기를 붙이지 않은 "),Pn=t("code"),Pl=o("int"),Cl=o("라는 자료형도 존재하는데, 32bit와 64bit중에서 정해진다. 이는 어떤 하드웨어를 사용하는지에 따라, 실행할때 결정된다."),Rl=t("br"),Ol=o(`
다만 컴퓨터가 64bit를 사용하는 경우라고 해도, int와 int64끼리의 연산은 에러가 발생한다. int는 플랫폼마다, 하드웨어마다 실행시 크기가 다르기 때문이다.`),at=r(),ds=t("pre"),tt=r(),et=t("br"),lt=r(),E=t("p"),Dl=o("일반적인 경우 "),Cn=t("code"),xl=o("(u)int"),Bl=o(` 타입을 선택하는 것이 권장되지만,
바이너리 파일 처리나 네트워크 통신 등, 정수 자료형의 특정한 크기를 사용해야 하는 경우라면 `),Rn=t("code"),Hl=o("(u)int8"),Al=o("~"),On=t("code"),Sl=o("(u)int64"),Tl=o(` 에서 타입을 선택한다.
또는 라이브러리 함수를 작성하는 경우, 함수의 파라미터나 변수로 `),Dn=t("code"),Ll=o("(u)int64"),Gl=o("를 선택하는 것이 좋다고 한다."),pt=r(),ot=t("br"),ct=r(),P=t("p"),Ml=o("정수를 표기할 때 언더바(_)로 구분할 수 있다. 또한 앞에 "),xn=t("code"),Nl=o("0x"),Fl=o(", "),Bn=t("code"),Il=o("0o"),ql=o(", "),Hn=t("code"),Zl=o("0b"),zl=o("를 붙여 각각 16, 8, 2진수로 표현할 수 있다."),it=r(),Es=t("pre"),rt=r(),ut=t("br"),ft=t("br"),kt=r(),X=t("h3"),Y=t("a"),An=t("span"),Ul=o("float"),bt=r(),D=t("p"),Vl=o("실수를 표현하는 타입은 32bit인 "),Sn=t("code"),jl=o("float32"),Jl=o("와 64bit인 "),Tn=t("code"),Kl=o("float64"),Ql=o(" 두 가지로 구분된다. C/C++와 유사하게 부동소숫점(Floating point) 방식을 사용한다."),vt=r(),ms=t("pre"),dt=r(),Et=t("br"),mt=r(),$=t("p"),Wl=o("또한 복소수를 표현하는 "),Ln=t("code"),Xl=o("complex"),Yl=o(" 타입도 존재한다. 다만 복소수가 필요한 수학, 물리 관련된 코드를 굳이 Go를..?"),_t=r(),_s=t("pre"),yt=r(),wt=t("br"),Pt=t("br"),Ct=r(),h=t("h3"),g=t("a"),Gn=t("span"),$l=o("string"),Rt=r(),x=t("p"),hl=o("문자열을 표현하는 "),Mn=t("code"),gl=o("string"),sp=o(" 타입이 존재한다. 아래 코드는 기본적인 선언과 연산자들이다. Zero value는 "),Nn=t("code"),np=o('""'),ap=o("이다. 또한 Go의 기본 문자열 인코딩은 UTF-8이다."),Ot=r(),ys=t("pre"),Dt=r(),xt=t("br"),Bt=r(),v=t("p"),Fn=t("code"),tp=o("string"),ep=o("을 구성하는 각 문자들은 "),In=t("code"),lp=o("rune"),pp=o(" 타입이다. "),qn=t("code"),op=o("byte"),cp=o("가 "),Zn=t("code"),ip=o("uint8"),rp=o("과 동의어인 것처럼, "),zn=t("code"),up=o("rune"),fp=o("은 "),Un=t("code"),kp=o("int32"),bp=o("와 동의어이다."),Ht=r(),ws=t("pre"),At=r(),St=t("br"),Tt=t("br"),Lt=r(),ss=t("h3"),ns=t("a"),Vn=t("span"),vp=o("Type Conversion"),Gt=r(),m=t("p"),dp=o("Go에서는 서로 다른 타입들간의 변환이 가능하다. 함수처럼 타입명에 괄호를 붙이면 된다. 이를테면 "),jn=t("code"),Ep=o("int16"),mp=o("에서 "),Jn=t("code"),_p=o("int32"),yp=o("로의 변환부터, "),Kn=t("code"),wp=o("int"),Pp=o("와 "),Qn=t("code"),Cp=o("float64"),Rp=o(" 사이의 변환 등도 가능하다"),Mt=r(),Ps=t("pre"),Nt=r(),Ft=t("br"),It=t("br"),qt=r(),as=t("h2"),ts=t("a"),Wn=t("span"),Op=o("References"),Zt=r(),zt=t("hr"),Ut=r(),Ls=t("center"),T=t("p"),Cs=t("a"),Gs=t("img"),Dp=r(),xp=t("br"),Bp=r(),Rs=t("a"),Hp=o("Jon Bodner, 『Learning Go』, O’Reilly Media, Inc."),Vt=r(),jt=t("br"),Jt=t("br"),this.h()},l(s){Os=e(s,"BR",{}),$n=u(s),Ds=e(s,"P",{});var l=i(Ds);$t=c(l,"본 글은 Golang을 공부하며 주요 내용이라 생각되는 것들을 기록해둔 자료이며, Ubuntu 20.04 LTS 기준으로 작성되었습니다."),l.forEach(n),hn=u(s),gn=e(s,"BR",{}),sa=e(s,"BR",{}),na=u(s),L=e(s,"H2",{id:!0});var Ap=i(L);G=e(Ap,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Vp=i(G);zs=e(Vp,"SPAN",{class:!0}),i(zs).forEach(n),Vp.forEach(n),ht=c(Ap,"Variables and Constants"),Ap.forEach(n),aa=u(s),ta=e(s,"HR",{}),ea=u(s),la=e(s,"BR",{}),pa=u(s),M=e(s,"H3",{id:!0});var Sp=i(M);N=e(Sp,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var jp=i(N);Us=e(jp,"SPAN",{class:!0}),i(Us).forEach(n),jp.forEach(n),gt=c(Sp,"Variables"),Sp.forEach(n),oa=u(s),xs=e(s,"P",{});var Jp=i(xs);se=c(Jp,"Go에서 변수는 아래와 같이 선언 및 초기화할 수 있다. 특이사항은 다음과 같다."),Jp.forEach(n),ca=u(s),w=e(s,"OL",{});var es=i(w);Vs=e(es,"LI",{});var Kp=i(Vs);ne=c(Kp,"C/C++과는 달리, 타입이 변수명 뒤에 옴"),Kp.forEach(n),ae=u(es),ps=e(es,"LI",{});var Kt=i(ps);te=c(Kt,"변수를 생성하고 값을 할당하지 않는 C나 C++와는 달리, 변수를 생성하면 기본적으로 할당되는 값인 "),Bs=e(Kt,"SPAN",{style:!0});var Qp=i(Bs);ee=c(Qp,"zero value"),Qp.forEach(n),le=c(Kt,"가 존재함"),Kt.forEach(n),pe=u(es),js=e(es,"LI",{});var Wp=i(js);oe=c(Wp,"변수가 선언만 되고 사용되지 않으면 에러가 발생함"),Wp.forEach(n),ce=u(es),Js=e(es,"LI",{});var Xp=i(Js);ie=c(Xp,"권장되지는 않지만 전역변수도 됨"),Xp.forEach(n),es.forEach(n),ia=u(s),os=e(s,"PRE",{class:!0});var Cc=i(os);Cc.forEach(n),ra=u(s),ua=e(s,"BR",{}),fa=u(s),A=e(s,"P",{});var Xn=i(A);Ks=e(Xn,"CODE",{});var Yp=i(Ks);re=c(Yp,":="),Yp.forEach(n),ue=c(Xn," 연산자를 활용하여 변수를 선언할 수도 있다. 변수의 타입은 초기화되는 값에 따라 결정된다. c++의 "),Qs=e(Xn,"CODE",{});var $p=i(Qs);fe=c($p,"auto"),$p.forEach(n),ke=c(Xn," 키워드와 비슷한 듯 하다."),Xn.forEach(n),ka=u(s),cs=e(s,"PRE",{class:!0});var Rc=i(cs);Rc.forEach(n),ba=u(s),S=e(s,"P",{});var Yn=i(S);Ws=e(Yn,"CODE",{});var hp=i(Ws);be=c(hp,":="),hp.forEach(n),ve=c(Yn," 연산자는 편리하지만 주의해서 사용해야 한다. "),Hs=e(Yn,"SPAN",{style:!0});var gp=i(Hs);de=c(gp,"Shadowing"),gp.forEach(n),Ee=c(Yn,"이 발생할 수도 있기 때문이다."),Yn.forEach(n),va=u(s),C=e(s,"BLOCKQUOTE",{});var Ms=i(C);is=e(Ms,"H3",{id:!0});var Tp=i(is);F=e(Tp,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var so=i(F);Xs=e(so,"SPAN",{class:!0}),i(Xs).forEach(n),so.forEach(n),me=c(Tp,"Shadowing이란?"),Tp.forEach(n),_e=u(Ms),d=e(Ms,"P",{});var _=i(d);Ys=e(_,"CODE",{});var no=i(Ys);ye=c(no,"var"),no.forEach(n),we=c(_,` 키워드는 동일한 이름을 가진 변수를 선언할 때 에러가 발생하는데 반해,
위 예제에서는 `),$s=e(_,"CODE",{});var ao=i($s);Pe=c(ao,"k"),ao.forEach(n),Ce=c(_,"가 선언되고, 그 아래 줄에서 "),hs=e(_,"CODE",{});var to=i(hs);Re=c(to,"l"),to.forEach(n),Oe=c(_,"과 함께 "),gs=e(_,"CODE",{});var eo=i(gs);De=c(eo,"k"),eo.forEach(n),xe=c(_,"가 다시 선언된 것을 확인할 수 있다("),sn=e(_,"CODE",{});var lo=i(sn);Be=c(lo,"k"),lo.forEach(n),He=c(_,`만 다시 선언하면 에러가 발생한다).
이 경우 해당 Block이 끝날 때까지, 앞서 선언한 `),nn=e(_,"CODE",{});var po=i(nn);Ae=c(po,"k"),po.forEach(n),Se=c(_,"의 값인 10에 접근할 수 없게 된다."),_.forEach(n),Te=u(Ms),k=e(Ms,"P",{});var b=i(k);Le=c(b,"이런 현상을 Shadowing이라고 하며, "),an=e(b,"CODE",{});var oo=i(an);Ge=c(oo,":="),oo.forEach(n),Me=c(b,` 연산자를 사용할 때 주의해야 하는 이유이다.
특히 함수의 파라미터나, `),tn=e(b,"CODE",{});var co=i(tn);Ne=c(co,"fmt"),co.forEach(n),Fe=c(b,"같은 패키지 이름이나, 심지어는 "),en=e(b,"CODE",{});var io=i(en);Ie=c(io,"nil"),io.forEach(n),qe=c(b," 또는 "),ln=e(b,"CODE",{});var ro=i(ln);Ze=c(ro,"false"),ro.forEach(n),ze=c(b,` 같은 리터럴들도 Shadowing할 수 있다.
`),pn=e(b,"CODE",{});var uo=i(pn);Ue=c(uo,"var"),uo.forEach(n),Ve=c(b," 키워드는 함수의 타입을 명시해주는 효과도 있고 Shadowing의 염려가 없으므로 "),on=e(b,"CODE",{});var fo=i(on);je=c(fo,"var"),fo.forEach(n),Je=c(b,`가 조금 더 안전한 선택지이다.
반면 `),cn=e(b,"CODE",{});var ko=i(cn);Ke=c(ko,"if"),ko.forEach(n),Qe=c(b,", "),rn=e(b,"CODE",{});var bo=i(rn);We=c(bo,"switch"),bo.forEach(n),Xe=c(b,", "),un=e(b,"CODE",{});var vo=i(un);Ye=c(vo,"for"),vo.forEach(n),$e=c(b,"문이나 에러 핸들링 등에서는 "),fn=e(b,"CODE",{});var Eo=i(fn);he=c(Eo,":="),Eo.forEach(n),ge=c(b,"을 주로 사용한다."),b.forEach(n),Ms.forEach(n),da=u(s),Ea=e(s,"BR",{}),ma=u(s),I=e(s,"P",{});var Qt=i(I);sl=c(Qt,"변수가 선언만 되고 사용되지 않으면 에러가 발생하니, "),kn=e(Qt,"CODE",{});var mo=i(kn);nl=c(mo,"fmt.Println()"),mo.forEach(n),al=c(Qt," 함수를 활용하여 모두 출력해주자."),Qt.forEach(n),_a=u(s),rs=e(s,"PRE",{class:!0});var Oc=i(rs);Oc.forEach(n),ya=u(s),wa=e(s,"BR",{}),Pa=e(s,"BR",{}),Ca=u(s),q=e(s,"H3",{id:!0});var Lp=i(q);Z=e(Lp,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var _o=i(Z);bn=e(_o,"SPAN",{class:!0}),i(bn).forEach(n),_o.forEach(n),tl=c(Lp,"Constants"),Lp.forEach(n),Ra=u(s),z=e(s,"P",{});var Wt=i(z);el=c(Wt,"상수의 선언은 변수와 유사하다. "),vn=e(Wt,"CODE",{});var yo=i(vn);ll=c(yo,"const"),yo.forEach(n),pl=c(Wt," 키워드를 사용한다"),Wt.forEach(n),Oa=u(s),us=e(s,"PRE",{class:!0});var Dc=i(us);Dc.forEach(n),Da=u(s),xa=e(s,"BR",{}),Ba=u(s),As=e(s,"P",{});var wo=i(As);ol=c(wo,"상수로 선언된 값을 변수에 할당할 때, 타입이 다르면 에러가 발생한다."),wo.forEach(n),Ha=u(s),fs=e(s,"PRE",{class:!0});var xc=i(fs);xc.forEach(n),Aa=u(s),Sa=e(s,"BR",{}),Ta=e(s,"BR",{}),La=u(s),U=e(s,"H2",{id:!0});var Gp=i(U);V=e(Gp,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Po=i(V);dn=e(Po,"SPAN",{class:!0}),i(dn).forEach(n),Po.forEach(n),cl=c(Gp,"Primitive Types"),Gp.forEach(n),Ga=u(s),Ma=e(s,"HR",{}),Na=u(s),Ss=e(s,"P",{});var Co=i(Ss);il=c(Co,"Go의 타입들에는 아래와 같은 특징이 존재한다."),Co.forEach(n),Fa=u(s),Ia=e(s,"BR",{}),qa=e(s,"BR",{}),Za=u(s),j=e(s,"H3",{id:!0});var Mp=i(j);J=e(Mp,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Ro=i(J);En=e(Ro,"SPAN",{class:!0}),i(En).forEach(n),Ro.forEach(n),rl=c(Mp,"bool"),Mp.forEach(n),za=u(s),K=e(s,"P",{});var Xt=i(K);ul=c(Xt,"bool은 다른 언어와 크게 다르지 않다. Zero value는 "),mn=e(Xt,"CODE",{});var Oo=i(mn);fl=c(Oo,"false"),Oo.forEach(n),kl=c(Xt,"이다."),Xt.forEach(n),Ua=u(s),ks=e(s,"PRE",{class:!0});var Bc=i(ks);Bc.forEach(n),Va=u(s),ja=e(s,"BR",{}),Ja=e(s,"BR",{}),Ka=u(s),Q=e(s,"H3",{id:!0});var Np=i(Q);W=e(Np,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Do=i(W);_n=e(Do,"SPAN",{class:!0}),i(_n).forEach(n),Do.forEach(n),bl=c(Np,"int"),Np.forEach(n),Qa=u(s),Ts=e(s,"P",{});var xo=i(Ts);vl=c(xo,`int는 C/C++와 유사하다. Zero value는 0이며, signed와 unsigned로 구분된다.
또한 8bit, 16bit, 32bit, 64bit중 변수의 크기를 결정할 수 있으며, (u)int 뒤에 크기를 붙임으로써 나타낸다.`),xo.forEach(n),Wa=u(s),bs=e(s,"PRE",{class:!0});var Hc=i(bs);Hc.forEach(n),Xa=u(s),Ya=e(s,"BR",{}),$a=u(s),R=e(s,"P",{});var Ns=i(R);dl=c(Ns,"이 중 "),yn=e(Ns,"CODE",{});var Bo=i(yn);El=c(Bo,"byte"),Bo.forEach(n),ml=c(Ns,"라는 자료형은 "),wn=e(Ns,"CODE",{});var Ho=i(wn);_l=c(Ho,"uint8"),Ho.forEach(n),yl=c(Ns,"과 동일한 것으로 처리된다."),Ns.forEach(n),ha=u(s),vs=e(s,"PRE",{class:!0});var Ac=i(vs);Ac.forEach(n),ga=u(s),st=e(s,"BR",{}),nt=u(s),O=e(s,"P",{});var Fs=i(O);wl=c(Fs,"크기를 붙이지 않은 "),Pn=e(Fs,"CODE",{});var Ao=i(Pn);Pl=c(Ao,"int"),Ao.forEach(n),Cl=c(Fs,"라는 자료형도 존재하는데, 32bit와 64bit중에서 정해진다. 이는 어떤 하드웨어를 사용하는지에 따라, 실행할때 결정된다."),Rl=e(Fs,"BR",{}),Ol=c(Fs,`
다만 컴퓨터가 64bit를 사용하는 경우라고 해도, int와 int64끼리의 연산은 에러가 발생한다. int는 플랫폼마다, 하드웨어마다 실행시 크기가 다르기 때문이다.`),Fs.forEach(n),at=u(s),ds=e(s,"PRE",{class:!0});var Sc=i(ds);Sc.forEach(n),tt=u(s),et=e(s,"BR",{}),lt=u(s),E=e(s,"P",{});var B=i(E);Dl=c(B,"일반적인 경우 "),Cn=e(B,"CODE",{});var So=i(Cn);xl=c(So,"(u)int"),So.forEach(n),Bl=c(B,` 타입을 선택하는 것이 권장되지만,
바이너리 파일 처리나 네트워크 통신 등, 정수 자료형의 특정한 크기를 사용해야 하는 경우라면 `),Rn=e(B,"CODE",{});var To=i(Rn);Hl=c(To,"(u)int8"),To.forEach(n),Al=c(B,"~"),On=e(B,"CODE",{});var Lo=i(On);Sl=c(Lo,"(u)int64"),Lo.forEach(n),Tl=c(B,` 에서 타입을 선택한다.
또는 라이브러리 함수를 작성하는 경우, 함수의 파라미터나 변수로 `),Dn=e(B,"CODE",{});var Go=i(Dn);Ll=c(Go,"(u)int64"),Go.forEach(n),Gl=c(B,"를 선택하는 것이 좋다고 한다."),B.forEach(n),pt=u(s),ot=e(s,"BR",{}),ct=u(s),P=e(s,"P",{});var ls=i(P);Ml=c(ls,"정수를 표기할 때 언더바(_)로 구분할 수 있다. 또한 앞에 "),xn=e(ls,"CODE",{});var Mo=i(xn);Nl=c(Mo,"0x"),Mo.forEach(n),Fl=c(ls,", "),Bn=e(ls,"CODE",{});var No=i(Bn);Il=c(No,"0o"),No.forEach(n),ql=c(ls,", "),Hn=e(ls,"CODE",{});var Fo=i(Hn);Zl=c(Fo,"0b"),Fo.forEach(n),zl=c(ls,"를 붙여 각각 16, 8, 2진수로 표현할 수 있다."),ls.forEach(n),it=u(s),Es=e(s,"PRE",{class:!0});var Tc=i(Es);Tc.forEach(n),rt=u(s),ut=e(s,"BR",{}),ft=e(s,"BR",{}),kt=u(s),X=e(s,"H3",{id:!0});var Fp=i(X);Y=e(Fp,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Io=i(Y);An=e(Io,"SPAN",{class:!0}),i(An).forEach(n),Io.forEach(n),Ul=c(Fp,"float"),Fp.forEach(n),bt=u(s),D=e(s,"P",{});var Is=i(D);Vl=c(Is,"실수를 표현하는 타입은 32bit인 "),Sn=e(Is,"CODE",{});var qo=i(Sn);jl=c(qo,"float32"),qo.forEach(n),Jl=c(Is,"와 64bit인 "),Tn=e(Is,"CODE",{});var Zo=i(Tn);Kl=c(Zo,"float64"),Zo.forEach(n),Ql=c(Is," 두 가지로 구분된다. C/C++와 유사하게 부동소숫점(Floating point) 방식을 사용한다."),Is.forEach(n),vt=u(s),ms=e(s,"PRE",{class:!0});var Lc=i(ms);Lc.forEach(n),dt=u(s),Et=e(s,"BR",{}),mt=u(s),$=e(s,"P",{});var Yt=i($);Wl=c(Yt,"또한 복소수를 표현하는 "),Ln=e(Yt,"CODE",{});var zo=i(Ln);Xl=c(zo,"complex"),zo.forEach(n),Yl=c(Yt," 타입도 존재한다. 다만 복소수가 필요한 수학, 물리 관련된 코드를 굳이 Go를..?"),Yt.forEach(n),_t=u(s),_s=e(s,"PRE",{class:!0});var Gc=i(_s);Gc.forEach(n),yt=u(s),wt=e(s,"BR",{}),Pt=e(s,"BR",{}),Ct=u(s),h=e(s,"H3",{id:!0});var Ip=i(h);g=e(Ip,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Uo=i(g);Gn=e(Uo,"SPAN",{class:!0}),i(Gn).forEach(n),Uo.forEach(n),$l=c(Ip,"string"),Ip.forEach(n),Rt=u(s),x=e(s,"P",{});var qs=i(x);hl=c(qs,"문자열을 표현하는 "),Mn=e(qs,"CODE",{});var Vo=i(Mn);gl=c(Vo,"string"),Vo.forEach(n),sp=c(qs," 타입이 존재한다. 아래 코드는 기본적인 선언과 연산자들이다. Zero value는 "),Nn=e(qs,"CODE",{});var jo=i(Nn);np=c(jo,'""'),jo.forEach(n),ap=c(qs,"이다. 또한 Go의 기본 문자열 인코딩은 UTF-8이다."),qs.forEach(n),Ot=u(s),ys=e(s,"PRE",{class:!0});var Mc=i(ys);Mc.forEach(n),Dt=u(s),xt=e(s,"BR",{}),Bt=u(s),v=e(s,"P",{});var y=i(v);Fn=e(y,"CODE",{});var Jo=i(Fn);tp=c(Jo,"string"),Jo.forEach(n),ep=c(y,"을 구성하는 각 문자들은 "),In=e(y,"CODE",{});var Ko=i(In);lp=c(Ko,"rune"),Ko.forEach(n),pp=c(y," 타입이다. "),qn=e(y,"CODE",{});var Qo=i(qn);op=c(Qo,"byte"),Qo.forEach(n),cp=c(y,"가 "),Zn=e(y,"CODE",{});var Wo=i(Zn);ip=c(Wo,"uint8"),Wo.forEach(n),rp=c(y,"과 동의어인 것처럼, "),zn=e(y,"CODE",{});var Xo=i(zn);up=c(Xo,"rune"),Xo.forEach(n),fp=c(y,"은 "),Un=e(y,"CODE",{});var Yo=i(Un);kp=c(Yo,"int32"),Yo.forEach(n),bp=c(y,"와 동의어이다."),y.forEach(n),Ht=u(s),ws=e(s,"PRE",{class:!0});var Nc=i(ws);Nc.forEach(n),At=u(s),St=e(s,"BR",{}),Tt=e(s,"BR",{}),Lt=u(s),ss=e(s,"H3",{id:!0});var qp=i(ss);ns=e(qp,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var $o=i(ns);Vn=e($o,"SPAN",{class:!0}),i(Vn).forEach(n),$o.forEach(n),vp=c(qp,"Type Conversion"),qp.forEach(n),Gt=u(s),m=e(s,"P",{});var H=i(m);dp=c(H,"Go에서는 서로 다른 타입들간의 변환이 가능하다. 함수처럼 타입명에 괄호를 붙이면 된다. 이를테면 "),jn=e(H,"CODE",{});var ho=i(jn);Ep=c(ho,"int16"),ho.forEach(n),mp=c(H,"에서 "),Jn=e(H,"CODE",{});var go=i(Jn);_p=c(go,"int32"),go.forEach(n),yp=c(H,"로의 변환부터, "),Kn=e(H,"CODE",{});var sc=i(Kn);wp=c(sc,"int"),sc.forEach(n),Pp=c(H,"와 "),Qn=e(H,"CODE",{});var nc=i(Qn);Cp=c(nc,"float64"),nc.forEach(n),Rp=c(H," 사이의 변환 등도 가능하다"),H.forEach(n),Mt=u(s),Ps=e(s,"PRE",{class:!0});var Fc=i(Ps);Fc.forEach(n),Nt=u(s),Ft=e(s,"BR",{}),It=e(s,"BR",{}),qt=u(s),as=e(s,"H2",{id:!0});var Zp=i(as);ts=e(Zp,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var ac=i(ts);Wn=e(ac,"SPAN",{class:!0}),i(Wn).forEach(n),ac.forEach(n),Op=c(Zp,"References"),Zp.forEach(n),Zt=u(s),zt=e(s,"HR",{}),Ut=u(s),Ls=e(s,"CENTER",{});var tc=i(Ls);T=e(tc,"P",{});var Zs=i(T);Cs=e(Zs,"A",{href:!0,rel:!0});var ec=i(Cs);Gs=e(ec,"IMG",{src:!0,alt:!0}),ec.forEach(n),Dp=u(Zs),xp=e(Zs,"BR",{}),Bp=u(Zs),Rs=e(Zs,"A",{href:!0,rel:!0});var lc=i(Rs);Hp=c(lc,"Jon Bodner, 『Learning Go』, O’Reilly Media, Inc."),lc.forEach(n),Zs.forEach(n),tc.forEach(n),Vt=u(s),jt=e(s,"BR",{}),Jt=e(s,"BR",{}),this.h()},h(){f(zs,"class","icon icon-link"),f(G,"aria-hidden","true"),f(G,"tabindex","-1"),f(G,"href","#variables-and-constants"),f(L,"id","variables-and-constants"),f(Us,"class","icon icon-link"),f(N,"aria-hidden","true"),f(N,"tabindex","-1"),f(N,"href","#variables"),f(M,"id","variables"),pc(Bs,"background-color","#FFF5B1"),f(os,"class","language-go"),f(cs,"class","language-go"),pc(Hs,"background-color","#FFF5B1"),f(Xs,"class","icon icon-link"),f(F,"aria-hidden","true"),f(F,"tabindex","-1"),f(F,"href","#shadowing이란"),f(is,"id","shadowing이란"),f(rs,"class","language-go"),f(bn,"class","icon icon-link"),f(Z,"aria-hidden","true"),f(Z,"tabindex","-1"),f(Z,"href","#constants"),f(q,"id","constants"),f(us,"class","language-go"),f(fs,"class","language-go"),f(dn,"class","icon icon-link"),f(V,"aria-hidden","true"),f(V,"tabindex","-1"),f(V,"href","#primitive-types"),f(U,"id","primitive-types"),f(En,"class","icon icon-link"),f(J,"aria-hidden","true"),f(J,"tabindex","-1"),f(J,"href","#bool"),f(j,"id","bool"),f(ks,"class","language-go"),f(_n,"class","icon icon-link"),f(W,"aria-hidden","true"),f(W,"tabindex","-1"),f(W,"href","#int"),f(Q,"id","int"),f(bs,"class","language-go"),f(vs,"class","language-go"),f(ds,"class","language-go"),f(Es,"class","language-go"),f(An,"class","icon icon-link"),f(Y,"aria-hidden","true"),f(Y,"tabindex","-1"),f(Y,"href","#float"),f(X,"id","float"),f(ms,"class","language-go"),f(_s,"class","language-go"),f(Gn,"class","icon icon-link"),f(g,"aria-hidden","true"),f(g,"tabindex","-1"),f(g,"href","#string"),f(h,"id","string"),f(ys,"class","language-go"),f(ws,"class","language-go"),f(Vn,"class","icon icon-link"),f(ns,"aria-hidden","true"),f(ns,"tabindex","-1"),f(ns,"href","#type-conversion"),f(ss,"id","type-conversion"),f(Ps,"class","language-go"),f(Wn,"class","icon icon-link"),f(ts,"aria-hidden","true"),f(ts,"tabindex","-1"),f(ts,"href","#references"),f(as,"id","references"),zc(Gs.src,Up="https://learning.oreilly.com/covers/urn:orm:book:9781492077206/400w/")||f(Gs,"src",Up),f(Gs,"alt","Learning Go Book Cover"),f(Cs,"href","https://learning.oreilly.com/library/view/learning-go/9781492077206/"),f(Cs,"rel","nofollow"),f(Rs,"href","https://learning.oreilly.com/library/view/learning-go/9781492077206/"),f(Rs,"rel","nofollow")},m(s,l){p(s,Os,l),p(s,$n,l),p(s,Ds,l),a(Ds,$t),p(s,hn,l),p(s,gn,l),p(s,sa,l),p(s,na,l),p(s,L,l),a(L,G),a(G,zs),a(L,ht),p(s,aa,l),p(s,ta,l),p(s,ea,l),p(s,la,l),p(s,pa,l),p(s,M,l),a(M,N),a(N,Us),a(M,gt),p(s,oa,l),p(s,xs,l),a(xs,se),p(s,ca,l),p(s,w,l),a(w,Vs),a(Vs,ne),a(w,ae),a(w,ps),a(ps,te),a(ps,Bs),a(Bs,ee),a(ps,le),a(w,pe),a(w,js),a(js,oe),a(w,ce),a(w,Js),a(Js,ie),p(s,ia,l),p(s,os,l),os.innerHTML=cc,p(s,ra,l),p(s,ua,l),p(s,fa,l),p(s,A,l),a(A,Ks),a(Ks,re),a(A,ue),a(A,Qs),a(Qs,fe),a(A,ke),p(s,ka,l),p(s,cs,l),cs.innerHTML=ic,p(s,ba,l),p(s,S,l),a(S,Ws),a(Ws,be),a(S,ve),a(S,Hs),a(Hs,de),a(S,Ee),p(s,va,l),p(s,C,l),a(C,is),a(is,F),a(F,Xs),a(is,me),a(C,_e),a(C,d),a(d,Ys),a(Ys,ye),a(d,we),a(d,$s),a($s,Pe),a(d,Ce),a(d,hs),a(hs,Re),a(d,Oe),a(d,gs),a(gs,De),a(d,xe),a(d,sn),a(sn,Be),a(d,He),a(d,nn),a(nn,Ae),a(d,Se),a(C,Te),a(C,k),a(k,Le),a(k,an),a(an,Ge),a(k,Me),a(k,tn),a(tn,Ne),a(k,Fe),a(k,en),a(en,Ie),a(k,qe),a(k,ln),a(ln,Ze),a(k,ze),a(k,pn),a(pn,Ue),a(k,Ve),a(k,on),a(on,je),a(k,Je),a(k,cn),a(cn,Ke),a(k,Qe),a(k,rn),a(rn,We),a(k,Xe),a(k,un),a(un,Ye),a(k,$e),a(k,fn),a(fn,he),a(k,ge),p(s,da,l),p(s,Ea,l),p(s,ma,l),p(s,I,l),a(I,sl),a(I,kn),a(kn,nl),a(I,al),p(s,_a,l),p(s,rs,l),rs.innerHTML=rc,p(s,ya,l),p(s,wa,l),p(s,Pa,l),p(s,Ca,l),p(s,q,l),a(q,Z),a(Z,bn),a(q,tl),p(s,Ra,l),p(s,z,l),a(z,el),a(z,vn),a(vn,ll),a(z,pl),p(s,Oa,l),p(s,us,l),us.innerHTML=uc,p(s,Da,l),p(s,xa,l),p(s,Ba,l),p(s,As,l),a(As,ol),p(s,Ha,l),p(s,fs,l),fs.innerHTML=fc,p(s,Aa,l),p(s,Sa,l),p(s,Ta,l),p(s,La,l),p(s,U,l),a(U,V),a(V,dn),a(U,cl),p(s,Ga,l),p(s,Ma,l),p(s,Na,l),p(s,Ss,l),a(Ss,il),p(s,Fa,l),p(s,Ia,l),p(s,qa,l),p(s,Za,l),p(s,j,l),a(j,J),a(J,En),a(j,rl),p(s,za,l),p(s,K,l),a(K,ul),a(K,mn),a(mn,fl),a(K,kl),p(s,Ua,l),p(s,ks,l),ks.innerHTML=kc,p(s,Va,l),p(s,ja,l),p(s,Ja,l),p(s,Ka,l),p(s,Q,l),a(Q,W),a(W,_n),a(Q,bl),p(s,Qa,l),p(s,Ts,l),a(Ts,vl),p(s,Wa,l),p(s,bs,l),bs.innerHTML=bc,p(s,Xa,l),p(s,Ya,l),p(s,$a,l),p(s,R,l),a(R,dl),a(R,yn),a(yn,El),a(R,ml),a(R,wn),a(wn,_l),a(R,yl),p(s,ha,l),p(s,vs,l),vs.innerHTML=vc,p(s,ga,l),p(s,st,l),p(s,nt,l),p(s,O,l),a(O,wl),a(O,Pn),a(Pn,Pl),a(O,Cl),a(O,Rl),a(O,Ol),p(s,at,l),p(s,ds,l),ds.innerHTML=dc,p(s,tt,l),p(s,et,l),p(s,lt,l),p(s,E,l),a(E,Dl),a(E,Cn),a(Cn,xl),a(E,Bl),a(E,Rn),a(Rn,Hl),a(E,Al),a(E,On),a(On,Sl),a(E,Tl),a(E,Dn),a(Dn,Ll),a(E,Gl),p(s,pt,l),p(s,ot,l),p(s,ct,l),p(s,P,l),a(P,Ml),a(P,xn),a(xn,Nl),a(P,Fl),a(P,Bn),a(Bn,Il),a(P,ql),a(P,Hn),a(Hn,Zl),a(P,zl),p(s,it,l),p(s,Es,l),Es.innerHTML=Ec,p(s,rt,l),p(s,ut,l),p(s,ft,l),p(s,kt,l),p(s,X,l),a(X,Y),a(Y,An),a(X,Ul),p(s,bt,l),p(s,D,l),a(D,Vl),a(D,Sn),a(Sn,jl),a(D,Jl),a(D,Tn),a(Tn,Kl),a(D,Ql),p(s,vt,l),p(s,ms,l),ms.innerHTML=mc,p(s,dt,l),p(s,Et,l),p(s,mt,l),p(s,$,l),a($,Wl),a($,Ln),a(Ln,Xl),a($,Yl),p(s,_t,l),p(s,_s,l),_s.innerHTML=_c,p(s,yt,l),p(s,wt,l),p(s,Pt,l),p(s,Ct,l),p(s,h,l),a(h,g),a(g,Gn),a(h,$l),p(s,Rt,l),p(s,x,l),a(x,hl),a(x,Mn),a(Mn,gl),a(x,sp),a(x,Nn),a(Nn,np),a(x,ap),p(s,Ot,l),p(s,ys,l),ys.innerHTML=yc,p(s,Dt,l),p(s,xt,l),p(s,Bt,l),p(s,v,l),a(v,Fn),a(Fn,tp),a(v,ep),a(v,In),a(In,lp),a(v,pp),a(v,qn),a(qn,op),a(v,cp),a(v,Zn),a(Zn,ip),a(v,rp),a(v,zn),a(zn,up),a(v,fp),a(v,Un),a(Un,kp),a(v,bp),p(s,Ht,l),p(s,ws,l),ws.innerHTML=wc,p(s,At,l),p(s,St,l),p(s,Tt,l),p(s,Lt,l),p(s,ss,l),a(ss,ns),a(ns,Vn),a(ss,vp),p(s,Gt,l),p(s,m,l),a(m,dp),a(m,jn),a(jn,Ep),a(m,mp),a(m,Jn),a(Jn,_p),a(m,yp),a(m,Kn),a(Kn,wp),a(m,Pp),a(m,Qn),a(Qn,Cp),a(m,Rp),p(s,Mt,l),p(s,Ps,l),Ps.innerHTML=Pc,p(s,Nt,l),p(s,Ft,l),p(s,It,l),p(s,qt,l),p(s,as,l),a(as,ts),a(ts,Wn),a(as,Op),p(s,Zt,l),p(s,zt,l),p(s,Ut,l),p(s,Ls,l),a(Ls,T),a(T,Cs),a(Cs,Gs),a(T,Dp),a(T,xp),a(T,Bp),a(T,Rs),a(Rs,Hp),p(s,Vt,l),p(s,jt,l),p(s,Jt,l)},p:zp,i:zp,o:zp,d(s){s&&n(Os),s&&n($n),s&&n(Ds),s&&n(hn),s&&n(gn),s&&n(sa),s&&n(na),s&&n(L),s&&n(aa),s&&n(ta),s&&n(ea),s&&n(la),s&&n(pa),s&&n(M),s&&n(oa),s&&n(xs),s&&n(ca),s&&n(w),s&&n(ia),s&&n(os),s&&n(ra),s&&n(ua),s&&n(fa),s&&n(A),s&&n(ka),s&&n(cs),s&&n(ba),s&&n(S),s&&n(va),s&&n(C),s&&n(da),s&&n(Ea),s&&n(ma),s&&n(I),s&&n(_a),s&&n(rs),s&&n(ya),s&&n(wa),s&&n(Pa),s&&n(Ca),s&&n(q),s&&n(Ra),s&&n(z),s&&n(Oa),s&&n(us),s&&n(Da),s&&n(xa),s&&n(Ba),s&&n(As),s&&n(Ha),s&&n(fs),s&&n(Aa),s&&n(Sa),s&&n(Ta),s&&n(La),s&&n(U),s&&n(Ga),s&&n(Ma),s&&n(Na),s&&n(Ss),s&&n(Fa),s&&n(Ia),s&&n(qa),s&&n(Za),s&&n(j),s&&n(za),s&&n(K),s&&n(Ua),s&&n(ks),s&&n(Va),s&&n(ja),s&&n(Ja),s&&n(Ka),s&&n(Q),s&&n(Qa),s&&n(Ts),s&&n(Wa),s&&n(bs),s&&n(Xa),s&&n(Ya),s&&n($a),s&&n(R),s&&n(ha),s&&n(vs),s&&n(ga),s&&n(st),s&&n(nt),s&&n(O),s&&n(at),s&&n(ds),s&&n(tt),s&&n(et),s&&n(lt),s&&n(E),s&&n(pt),s&&n(ot),s&&n(ct),s&&n(P),s&&n(it),s&&n(Es),s&&n(rt),s&&n(ut),s&&n(ft),s&&n(kt),s&&n(X),s&&n(bt),s&&n(D),s&&n(vt),s&&n(ms),s&&n(dt),s&&n(Et),s&&n(mt),s&&n($),s&&n(_t),s&&n(_s),s&&n(yt),s&&n(wt),s&&n(Pt),s&&n(Ct),s&&n(h),s&&n(Rt),s&&n(x),s&&n(Ot),s&&n(ys),s&&n(Dt),s&&n(xt),s&&n(Bt),s&&n(v),s&&n(Ht),s&&n(ws),s&&n(At),s&&n(St),s&&n(Tt),s&&n(Lt),s&&n(ss),s&&n(Gt),s&&n(m),s&&n(Mt),s&&n(Ps),s&&n(Nt),s&&n(Ft),s&&n(It),s&&n(qt),s&&n(as),s&&n(Zt),s&&n(zt),s&&n(Ut),s&&n(Ls),s&&n(Vt),s&&n(jt),s&&n(Jt)}}}const jc={title:"변수와 원시 타입",date:"2022-07-21T00:00:00.000Z",excerpt:"Primitive Types and Variable Declaration",categories:["Golang","Basic Golang"],coverImage:"/post_img/Go/Golang_basics/cover.png",coverWidth:16,coverHeight:9,indexed:!1,exposed:!0};class Jc extends Ic{constructor(Os){super(),qc(this,Os,null,Uc,Zc,{})}}export{Jc as default,jc as metadata};
