import{S as At,i as Lt,s as Nt,k as t,q as p,a as k,y as Ba,l as e,m as c,h as a,r as o,c as f,z as Ia,n as i,U as Mt,b as u,E as s,A as qa,g as Ja,d as Ua,B as Wa,M as Za}from"./index.d78780bf.js";import{C as za}from"./CodeBlockWrapper.9fa2b505.js";function Gt(q){let r,_=`<code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	timer <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">NewTimer</span><span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Millisecond<span class="token punctuation">)</span>
	timeout <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

	<span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token operator">&lt;-</span>timer<span class="token punctuation">.</span>C
		<span class="token function">close</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Timer expired"</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	x <span class="token operator">:=</span> <span class="token number">0</span>
	done <span class="token operator">:=</span> <span class="token boolean">false</span>
	<span class="token keyword">for</span> <span class="token operator">!</span>done <span class="token punctuation">&#123;</span>
		<span class="token keyword">select</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">case</span> <span class="token operator">&lt;-</span>timeout<span class="token punctuation">:</span>
			done <span class="token operator">=</span> <span class="token boolean">true</span>
		<span class="token keyword">default</span><span class="token punctuation">:</span>
		<span class="token punctuation">&#125;</span>

		time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Millisecond<span class="token punctuation">)</span>
		x<span class="token operator">++</span>
	<span class="token punctuation">&#125;</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"x ="</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code>`;return{c(){r=t("pre"),this.h()},l(d){r=e(d,"PRE",{class:!0});var E=c(r);E.forEach(a),this.h()},h(){i(r,"class","language-go")},m(d,E){u(d,r,E),r.innerHTML=_},p:Za,d(d){d&&a(r)}}}function Ft(q){let r,_=`<code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	start <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	ticker <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">NewTicker</span><span class="token punctuation">(</span><span class="token number">100</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Millisecond<span class="token punctuation">)</span>
	<span class="token keyword">defer</span> ticker<span class="token punctuation">.</span><span class="token function">Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	done <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">After</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>

	<span class="token keyword">for</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">select</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">case</span> <span class="token operator">&lt;-</span>ticker<span class="token punctuation">.</span>C<span class="token punctuation">:</span>
			fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"tick:"</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span><span class="token function">Since</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Milliseconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token keyword">case</span> <span class="token operator">&lt;-</span>done<span class="token punctuation">:</span>
			<span class="token keyword">return</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`;return{c(){r=t("pre"),this.h()},l(d){r=e(d,"PRE",{class:!0});var E=c(r);E.forEach(a),this.h()},h(){i(r,"class","language-go")},m(d,E){u(d,r,E),r.innerHTML=_},p:Za,d(d){d&&a(r)}}}function Bt(q){let r,_=`<code class="language-go"><span class="token keyword">func</span> <span class="token function">monitor</span><span class="token punctuation">(</span>heartbeat <span class="token operator">&lt;-</span><span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> done <span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> tick <span class="token operator">&lt;-</span><span class="token keyword">chan</span> time<span class="token punctuation">.</span>Time<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">var</span> lastHeartbeat time<span class="token punctuation">.</span>Time
	<span class="token keyword">var</span> numTicks <span class="token builtin">int</span>

	<span class="token keyword">for</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">select</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">case</span> <span class="token operator">&lt;-</span>tick<span class="token punctuation">:</span>
			numTicks<span class="token operator">++</span>
			<span class="token keyword">if</span> numTicks <span class="token operator">>=</span> <span class="token number">2</span> <span class="token punctuation">&#123;</span>
				fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"No progress since %s, exiting&#92;n"</span><span class="token punctuation">,</span> lastHeartbeat<span class="token punctuation">)</span>
				<span class="token function">close</span><span class="token punctuation">(</span>done<span class="token punctuation">)</span>
				<span class="token keyword">return</span>
			<span class="token punctuation">&#125;</span>

		<span class="token keyword">case</span> <span class="token operator">&lt;-</span>heartbeat<span class="token punctuation">:</span>
			lastHeartbeat <span class="token operator">=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
			numTicks <span class="token operator">=</span> <span class="token number">0</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">longRunningFunction</span><span class="token punctuation">(</span>heartbeat <span class="token keyword">chan</span><span class="token operator">&lt;-</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> done <span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">select</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">case</span> <span class="token operator">&lt;-</span>done<span class="token punctuation">:</span>
			<span class="token keyword">return</span>
		<span class="token keyword">case</span> heartbeat <span class="token operator">&lt;-</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">:</span>
		<span class="token punctuation">&#125;</span>
		fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Job %d&#92;n"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>
		time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">500</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Millisecond<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
	<span class="token function">close</span><span class="token punctuation">(</span>done<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	heartbeat <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
	<span class="token keyword">defer</span> <span class="token function">close</span><span class="token punctuation">(</span>heartbeat<span class="token punctuation">)</span>
	done <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
	tick <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">NewTicker</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>
	<span class="token keyword">defer</span> tick<span class="token punctuation">.</span><span class="token function">Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	<span class="token keyword">go</span> <span class="token function">monitor</span><span class="token punctuation">(</span>heartbeat<span class="token punctuation">,</span> done<span class="token punctuation">,</span> tick<span class="token punctuation">.</span>C<span class="token punctuation">)</span>
	<span class="token keyword">go</span> <span class="token function">longRunningFunction</span><span class="token punctuation">(</span>heartbeat<span class="token punctuation">,</span> done<span class="token punctuation">)</span>

	<span class="token operator">&lt;-</span>done
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Long running function finished"</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code>`;return{c(){r=t("pre"),this.h()},l(d){r=e(d,"PRE",{class:!0});var E=c(r);E.forEach(a),this.h()},h(){i(r,"class","language-go")},m(d,E){u(d,r,E),r.innerHTML=_},p:Za,d(d){d&&a(r)}}}function It(q){let r,_,d,E,Gn,T,vs,tn,bs,ys,en,Ts,hs,Fn,D,$s,pn,Cs,Rs,Bn,x,In,b,on,Os,Ps,cn,Ds,xs,ln,Hs,Ss,qn,J,Dt=`<code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
timeout <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

    time<span class="token punctuation">.</span><span class="token function">AfterFunc</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token operator">*</span>time<span class="token punctuation">.</span>Millisecond<span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    	<span class="token function">close</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span>
    	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Timer expired"</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

<span class="token punctuation">&#125;</span></code>`,Jn,Un,Wn,w,As,un,Ls,Ns,rn,Ms,Gs,kn,Fs,Bs,fn,Is,qs,zn,H,Js,dn,Us,Ws,Zn,S,mn,h,En,zs,Zs,_n,js,Ks,wn,Qs,Vs,Xs,U,$,vn,Ys,gs,bn,na,sa,yn,aa,ta,ea,V,xt=`<code class="language-go"><span class="token keyword">select</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">case</span> <span class="token operator">&lt;-</span>timer<span class="token punctuation">.</span>C<span class="token punctuation">:</span>
		<span class="token comment">// timeout</span>
	<span class="token keyword">case</span> d <span class="token operator">:=</span> <span class="token operator">&lt;-</span>resetTimer<span class="token punctuation">:</span>
		<span class="token keyword">if</span> <span class="token operator">!</span>timer<span class="token punctuation">.</span><span class="token function">Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token operator">&lt;-</span>timer<span class="token punctuation">.</span>C
		<span class="token punctuation">&#125;</span>
		timer<span class="token punctuation">.</span><span class="token function">Reset</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code>`,jn,Kn,Qn,Vn,A,L,Tn,pa,Xn,Yn,gn,y,hn,oa,ca,$n,la,ua,Cn,ra,ia,ns,N,ss,X,ka,as,C,fa,Rn,da,ma,On,Ea,_a,ts,M,G,Pn,wa,es,Y,va,ps,F,os,m,ba,Dn,ya,Ta,xn,ha,$a,Hn,Ca,Ra,Sn,Oa,Pa,An,Da,xa,cs,ls,us,rs,B,I,Ln,Ha,is,ks,fs,g,O,W,nn,ja,Sa,Aa,La,z,Na,ds;return x=new za({props:{$$slots:{default:[Gt]},$$scope:{ctx:q}}}),N=new za({props:{$$slots:{default:[Ft]},$$scope:{ctx:q}}}),F=new za({props:{$$slots:{default:[Bt]},$$scope:{ctx:q}}}),{c(){r=t("h2"),_=t("a"),d=t("span"),E=p("Timer"),Gn=k(),T=t("p"),vs=p("Go에서 일정 시간이 지난 이후 특정 작업을 수행하려면 "),tn=t("code"),bs=p("time.Timer"),ys=p(`를 사용하면 된다.
`),en=t("code"),Ts=p("time.Timer"),hs=p(`는 지정된 시간만큼 대기한 후 채널에 값을 전송한다.
이 때 채널에 전송되는 값은 메시지가 전송된 시간이며, 수신된 시간이 아님을 염두에 두어야 한다.`),Fn=k(),D=t("p"),$s=p("타이머는 주로 작업의 타임아웃을 설정할 때 사용한다. 타임아웃 자체는 "),pn=t("code"),Cs=p("context.Context"),Rs=p("를 사용하여 구현하는 것이 좋지만, 타이머를 사용하는 방법도 알아두면 좋다."),Bn=k(),Ba(x.$$.fragment),In=k(),b=t("p"),on=t("code"),Os=p("time.NewTimer"),Ps=p(" 대신 "),cn=t("code"),Ds=p("time.After"),xs=p(`를 사용할 수도 있다. 사용법은 거의 동일하므로 예제는 생략해도 될 듯 하다.
또한 이와 같은 예제는 `),ln=t("code"),Hs=p("time.AfterFunc"),Ss=p("을 사용하여 더 간단하게 작성할 수 있다."),qn=k(),J=t("pre"),Jn=k(),Un=t("br"),Wn=k(),w=t("p"),As=p(`어떤 작업이 타임아웃을 초과하기 이전에 정상적으로 완료되었다면 타이머를 중지해야 한다.
타이머를 중지하려면 `),un=t("code"),Ls=p("Stop"),Ns=p(` 메서드를 호출하면 된다.
타이머가 정상적으로 중지되었다면 `),rn=t("code"),Ms=p("Stop"),Gs=p(" 메서드는 "),kn=t("code"),Fs=p("true"),Bs=p("를 반환하고, 이미 중지되었다면 "),fn=t("code"),Is=p("false"),qs=p("를 반환한다."),zn=k(),H=t("p"),Js=p("타이머를 재설정하려면 "),dn=t("code"),Us=p("Reset"),Ws=p(" 메서드를 호출하면 된다."),Zn=k(),S=t("ul"),mn=t("li"),h=t("p"),En=t("code"),zs=p("AfterFunc"),Zs=p("로 생성된 타이머의 경우 아직 호출되지 않았다면 호출될 시간을 재설정하며, 이미 호출되었다면 한 번 더 호출될 시간이 설정된다. 전자의 경우 "),_n=t("code"),js=p("true"),Ks=p("가, 후자의 경우 "),wn=t("code"),Qs=p("false"),Vs=p("가 반환된다."),Xs=k(),U=t("li"),$=t("p"),vn=t("code"),Ys=p("NewTimer"),gs=p("로 생성된 타이머의 경우, "),bn=t("code"),na=p("Reset"),sa=p(" 메서드를 사용할 때 동시에 해당 타이머 채널으로부터 값을 수신하고 있는 고루틴이 있어선 안된다. 아래 예제가 "),yn=t("code"),aa=p("Reset"),ta=p(" 메서드를 사용할 때의 올바른 사용법이다."),ea=k(),V=t("pre"),jn=k(),Kn=t("br"),Qn=t("br"),Vn=k(),A=t("h2"),L=t("a"),Tn=t("span"),pa=p("Tickers"),Xn=k(),Yn=t("hr"),gn=k(),y=t("p"),hn=t("code"),oa=p("time.Ticker"),ca=p(`는 지정된 시간 간격으로 특정 작업을 수행하려고 할 때 사용한다.
`),$n=t("code"),la=p("time.Ticker"),ua=p(" 또한 마찬가지로 "),Cn=t("code"),ra=p("time.NewTicker"),ia=p(`를 사용하여 생성하며, 명시적으로 중지하기 전까지 주기적으로 채널에 값을 전송한다.
다음의 예제는 3초간 주기적으로 프로그램의 경과 시간을 출력하는 예제이다.`),ns=k(),Ba(N.$$.fragment),ss=k(),X=t("p"),ka=p(`Ticker의 간격보다 작업 시간이 길어져서 Ticker가 보내는 신호를 놓치는 경우가 생길 수 있다.
만약 Ticker 채널에서 다음 값이 발생하기 전에 값을 읽었다면 단순이 약간 늦게 읽었을 뿐이라 큰 차이가 없다.
반면 Ticker 채널에서 값을 읽지 못해 다음 값이 이미 발생하는 경우가 있을 수 있다. 이 경우 Ticker 채널에서 값을 읽으면 쌓여있는 값을 와다닥 다 읽는 게 아니라, 놓친 값들은 모두 버려지고 최신 값 하나만 읽게 된다.`),as=k(),C=t("p"),fa=p("Ticker를 모두 사용했다면 반드시 "),Rn=t("code"),da=p("Stop()"),ma=p(` 메서드를 호출하여 중지해야 한다. Timer와 달리 Ticker는 자동으로 중지되지 않기 때문에 가비지 컬렉터가 수거해가지 못한다.
`),On=t("code"),Ea=p("defer ticker.Stop()"),_a=p("를 통해 Ticker를 중지하는 것을 잊지 않도록 하자."),ts=k(),M=t("h3"),G=t("a"),Pn=t("span"),wa=p("Heartbeats"),es=k(),Y=t("p"),va=p(`Long-running 작업을 수행하는 경우, 작업이 정상적으로 수행되고 있는지 주기적으로 모니터링해야 할 필요가 있다.
이 경우 Long-running 함수가 모니터 함수에 Heartbeat를 보내어 작업이 정상적으로 수행되고 있는지 알려줄 수 있다.
모니터 함수는 일정 시간동안 Heartbeat를 받지 못하면 Long-running 함수가 정상적으로 수행되지 않고 있다고 판단할 수 있다.`),ps=k(),Ba(F.$$.fragment),os=k(),m=t("p"),ba=p("위 코드에서 "),Dn=t("code"),ya=p("monitor"),Ta=p(" 함수는 2회 연속으로 Tick에서 신호를 받는 동안 "),xn=t("code"),ha=p("longRunningFunction"),$a=p("으로부터 Heartbeat를 받지 못하면 문제가 생긴 것으로 판단하고 "),Hn=t("code"),Ca=p("longRunningFunction"),Ra=p(`을 종료한다.
이 예제에서 `),Sn=t("code"),Oa=p("heartbeat"),Pa=p(" 채널은 단순히 "),An=t("code"),Da=p("struct{}"),xa=p(" 타입이지만 다양한 메타데이터를 포함할 수 있다."),cs=k(),ls=t("br"),us=t("br"),rs=k(),B=t("h2"),I=t("a"),Ln=t("span"),Ha=p("References"),is=k(),ks=t("hr"),fs=k(),g=t("center"),O=t("p"),W=t("a"),nn=t("img"),Sa=k(),Aa=t("br"),La=k(),z=t("a"),Na=p("Jon Bodner, 『Learning Go』, O’Reilly Media, Inc."),this.h()},l(n){r=e(n,"H2",{id:!0});var l=c(r);_=e(l,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Nn=c(_);d=e(Nn,"SPAN",{class:!0}),c(d).forEach(a),Nn.forEach(a),E=o(l,"Timer"),l.forEach(a),Gn=f(n),T=e(n,"P",{});var P=c(T);vs=o(P,"Go에서 일정 시간이 지난 이후 특정 작업을 수행하려면 "),tn=e(P,"CODE",{});var Mn=c(tn);bs=o(Mn,"time.Timer"),Mn.forEach(a),ys=o(P,`를 사용하면 된다.
`),en=e(P,"CODE",{});var Ka=c(en);Ts=o(Ka,"time.Timer"),Ka.forEach(a),hs=o(P,`는 지정된 시간만큼 대기한 후 채널에 값을 전송한다.
이 때 채널에 전송되는 값은 메시지가 전송된 시간이며, 수신된 시간이 아님을 염두에 두어야 한다.`),P.forEach(a),Fn=f(n),D=e(n,"P",{});var ms=c(D);$s=o(ms,"타이머는 주로 작업의 타임아웃을 설정할 때 사용한다. 타임아웃 자체는 "),pn=e(ms,"CODE",{});var Qa=c(pn);Cs=o(Qa,"context.Context"),Qa.forEach(a),Rs=o(ms,"를 사용하여 구현하는 것이 좋지만, 타이머를 사용하는 방법도 알아두면 좋다."),ms.forEach(a),Bn=f(n),Ia(x.$$.fragment,n),In=f(n),b=e(n,"P",{});var Z=c(b);on=e(Z,"CODE",{});var Va=c(on);Os=o(Va,"time.NewTimer"),Va.forEach(a),Ps=o(Z," 대신 "),cn=e(Z,"CODE",{});var Xa=c(cn);Ds=o(Xa,"time.After"),Xa.forEach(a),xs=o(Z,`를 사용할 수도 있다. 사용법은 거의 동일하므로 예제는 생략해도 될 듯 하다.
또한 이와 같은 예제는 `),ln=e(Z,"CODE",{});var Ya=c(ln);Hs=o(Ya,"time.AfterFunc"),Ya.forEach(a),Ss=o(Z,"을 사용하여 더 간단하게 작성할 수 있다."),Z.forEach(a),qn=f(n),J=e(n,"PRE",{class:!0});var Ht=c(J);Ht.forEach(a),Jn=f(n),Un=e(n,"BR",{}),Wn=f(n),w=e(n,"P",{});var R=c(w);As=o(R,`어떤 작업이 타임아웃을 초과하기 이전에 정상적으로 완료되었다면 타이머를 중지해야 한다.
타이머를 중지하려면 `),un=e(R,"CODE",{});var ga=c(un);Ls=o(ga,"Stop"),ga.forEach(a),Ns=o(R,` 메서드를 호출하면 된다.
타이머가 정상적으로 중지되었다면 `),rn=e(R,"CODE",{});var nt=c(rn);Ms=o(nt,"Stop"),nt.forEach(a),Gs=o(R," 메서드는 "),kn=e(R,"CODE",{});var st=c(kn);Fs=o(st,"true"),st.forEach(a),Bs=o(R,"를 반환하고, 이미 중지되었다면 "),fn=e(R,"CODE",{});var at=c(fn);Is=o(at,"false"),at.forEach(a),qs=o(R,"를 반환한다."),R.forEach(a),zn=f(n),H=e(n,"P",{});var Es=c(H);Js=o(Es,"타이머를 재설정하려면 "),dn=e(Es,"CODE",{});var tt=c(dn);Us=o(tt,"Reset"),tt.forEach(a),Ws=o(Es," 메서드를 호출하면 된다."),Es.forEach(a),Zn=f(n),S=e(n,"UL",{});var _s=c(S);mn=e(_s,"LI",{});var et=c(mn);h=e(et,"P",{});var j=c(h);En=e(j,"CODE",{});var pt=c(En);zs=o(pt,"AfterFunc"),pt.forEach(a),Zs=o(j,"로 생성된 타이머의 경우 아직 호출되지 않았다면 호출될 시간을 재설정하며, 이미 호출되었다면 한 번 더 호출될 시간이 설정된다. 전자의 경우 "),_n=e(j,"CODE",{});var ot=c(_n);js=o(ot,"true"),ot.forEach(a),Ks=o(j,"가, 후자의 경우 "),wn=e(j,"CODE",{});var ct=c(wn);Qs=o(ct,"false"),ct.forEach(a),Vs=o(j,"가 반환된다."),j.forEach(a),et.forEach(a),Xs=f(_s),U=e(_s,"LI",{});var ws=c(U);$=e(ws,"P",{});var K=c($);vn=e(K,"CODE",{});var lt=c(vn);Ys=o(lt,"NewTimer"),lt.forEach(a),gs=o(K,"로 생성된 타이머의 경우, "),bn=e(K,"CODE",{});var ut=c(bn);na=o(ut,"Reset"),ut.forEach(a),sa=o(K," 메서드를 사용할 때 동시에 해당 타이머 채널으로부터 값을 수신하고 있는 고루틴이 있어선 안된다. 아래 예제가 "),yn=e(K,"CODE",{});var rt=c(yn);aa=o(rt,"Reset"),rt.forEach(a),ta=o(K," 메서드를 사용할 때의 올바른 사용법이다."),K.forEach(a),ea=f(ws),V=e(ws,"PRE",{class:!0});var St=c(V);St.forEach(a),ws.forEach(a),_s.forEach(a),jn=f(n),Kn=e(n,"BR",{}),Qn=e(n,"BR",{}),Vn=f(n),A=e(n,"H2",{id:!0});var Ma=c(A);L=e(Ma,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var it=c(L);Tn=e(it,"SPAN",{class:!0}),c(Tn).forEach(a),it.forEach(a),pa=o(Ma,"Tickers"),Ma.forEach(a),Xn=f(n),Yn=e(n,"HR",{}),gn=f(n),y=e(n,"P",{});var Q=c(y);hn=e(Q,"CODE",{});var kt=c(hn);oa=o(kt,"time.Ticker"),kt.forEach(a),ca=o(Q,`는 지정된 시간 간격으로 특정 작업을 수행하려고 할 때 사용한다.
`),$n=e(Q,"CODE",{});var ft=c($n);la=o(ft,"time.Ticker"),ft.forEach(a),ua=o(Q," 또한 마찬가지로 "),Cn=e(Q,"CODE",{});var dt=c(Cn);ra=o(dt,"time.NewTicker"),dt.forEach(a),ia=o(Q,`를 사용하여 생성하며, 명시적으로 중지하기 전까지 주기적으로 채널에 값을 전송한다.
다음의 예제는 3초간 주기적으로 프로그램의 경과 시간을 출력하는 예제이다.`),Q.forEach(a),ns=f(n),Ia(N.$$.fragment,n),ss=f(n),X=e(n,"P",{});var mt=c(X);ka=o(mt,`Ticker의 간격보다 작업 시간이 길어져서 Ticker가 보내는 신호를 놓치는 경우가 생길 수 있다.
만약 Ticker 채널에서 다음 값이 발생하기 전에 값을 읽었다면 단순이 약간 늦게 읽었을 뿐이라 큰 차이가 없다.
반면 Ticker 채널에서 값을 읽지 못해 다음 값이 이미 발생하는 경우가 있을 수 있다. 이 경우 Ticker 채널에서 값을 읽으면 쌓여있는 값을 와다닥 다 읽는 게 아니라, 놓친 값들은 모두 버려지고 최신 값 하나만 읽게 된다.`),mt.forEach(a),as=f(n),C=e(n,"P",{});var sn=c(C);fa=o(sn,"Ticker를 모두 사용했다면 반드시 "),Rn=e(sn,"CODE",{});var Et=c(Rn);da=o(Et,"Stop()"),Et.forEach(a),ma=o(sn,` 메서드를 호출하여 중지해야 한다. Timer와 달리 Ticker는 자동으로 중지되지 않기 때문에 가비지 컬렉터가 수거해가지 못한다.
`),On=e(sn,"CODE",{});var _t=c(On);Ea=o(_t,"defer ticker.Stop()"),_t.forEach(a),_a=o(sn,"를 통해 Ticker를 중지하는 것을 잊지 않도록 하자."),sn.forEach(a),ts=f(n),M=e(n,"H3",{id:!0});var Ga=c(M);G=e(Ga,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var wt=c(G);Pn=e(wt,"SPAN",{class:!0}),c(Pn).forEach(a),wt.forEach(a),wa=o(Ga,"Heartbeats"),Ga.forEach(a),es=f(n),Y=e(n,"P",{});var vt=c(Y);va=o(vt,`Long-running 작업을 수행하는 경우, 작업이 정상적으로 수행되고 있는지 주기적으로 모니터링해야 할 필요가 있다.
이 경우 Long-running 함수가 모니터 함수에 Heartbeat를 보내어 작업이 정상적으로 수행되고 있는지 알려줄 수 있다.
모니터 함수는 일정 시간동안 Heartbeat를 받지 못하면 Long-running 함수가 정상적으로 수행되지 않고 있다고 판단할 수 있다.`),vt.forEach(a),ps=f(n),Ia(F.$$.fragment,n),os=f(n),m=e(n,"P",{});var v=c(m);ba=o(v,"위 코드에서 "),Dn=e(v,"CODE",{});var bt=c(Dn);ya=o(bt,"monitor"),bt.forEach(a),Ta=o(v," 함수는 2회 연속으로 Tick에서 신호를 받는 동안 "),xn=e(v,"CODE",{});var yt=c(xn);ha=o(yt,"longRunningFunction"),yt.forEach(a),$a=o(v,"으로부터 Heartbeat를 받지 못하면 문제가 생긴 것으로 판단하고 "),Hn=e(v,"CODE",{});var Tt=c(Hn);Ca=o(Tt,"longRunningFunction"),Tt.forEach(a),Ra=o(v,`을 종료한다.
이 예제에서 `),Sn=e(v,"CODE",{});var ht=c(Sn);Oa=o(ht,"heartbeat"),ht.forEach(a),Pa=o(v," 채널은 단순히 "),An=e(v,"CODE",{});var $t=c(An);Da=o($t,"struct{}"),$t.forEach(a),xa=o(v," 타입이지만 다양한 메타데이터를 포함할 수 있다."),v.forEach(a),cs=f(n),ls=e(n,"BR",{}),us=e(n,"BR",{}),rs=f(n),B=e(n,"H2",{id:!0});var Fa=c(B);I=e(Fa,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Ct=c(I);Ln=e(Ct,"SPAN",{class:!0}),c(Ln).forEach(a),Ct.forEach(a),Ha=o(Fa,"References"),Fa.forEach(a),is=f(n),ks=e(n,"HR",{}),fs=f(n),g=e(n,"CENTER",{});var Rt=c(g);O=e(Rt,"P",{});var an=c(O);W=e(an,"A",{href:!0,rel:!0});var Ot=c(W);nn=e(Ot,"IMG",{src:!0,alt:!0}),Ot.forEach(a),Sa=f(an),Aa=e(an,"BR",{}),La=f(an),z=e(an,"A",{href:!0,rel:!0});var Pt=c(z);Na=o(Pt,"Jon Bodner, 『Learning Go』, O’Reilly Media, Inc."),Pt.forEach(a),an.forEach(a),Rt.forEach(a),this.h()},h(){i(d,"class","icon icon-link"),i(_,"aria-hidden","true"),i(_,"tabindex","-1"),i(_,"href","#timer"),i(r,"id","timer"),i(J,"class","language-go"),i(V,"class","language-go"),i(Tn,"class","icon icon-link"),i(L,"aria-hidden","true"),i(L,"tabindex","-1"),i(L,"href","#tickers"),i(A,"id","tickers"),i(Pn,"class","icon icon-link"),i(G,"aria-hidden","true"),i(G,"tabindex","-1"),i(G,"href","#heartbeats"),i(M,"id","heartbeats"),i(Ln,"class","icon icon-link"),i(I,"aria-hidden","true"),i(I,"tabindex","-1"),i(I,"href","#references"),i(B,"id","references"),Mt(nn.src,ja="https://learning.oreilly.com/covers/urn:orm:book:9781804619070/400w/")||i(nn,"src",ja),i(nn,"alt","Effective Concurrency in Go"),i(W,"href","https://learning.oreilly.com/library/view/effective-concurrency-in/9781804619070/"),i(W,"rel","nofollow"),i(z,"href","https://learning.oreilly.com/library/view/effective-concurrency-in/9781804619070/"),i(z,"rel","nofollow")},m(n,l){u(n,r,l),s(r,_),s(_,d),s(r,E),u(n,Gn,l),u(n,T,l),s(T,vs),s(T,tn),s(tn,bs),s(T,ys),s(T,en),s(en,Ts),s(T,hs),u(n,Fn,l),u(n,D,l),s(D,$s),s(D,pn),s(pn,Cs),s(D,Rs),u(n,Bn,l),qa(x,n,l),u(n,In,l),u(n,b,l),s(b,on),s(on,Os),s(b,Ps),s(b,cn),s(cn,Ds),s(b,xs),s(b,ln),s(ln,Hs),s(b,Ss),u(n,qn,l),u(n,J,l),J.innerHTML=Dt,u(n,Jn,l),u(n,Un,l),u(n,Wn,l),u(n,w,l),s(w,As),s(w,un),s(un,Ls),s(w,Ns),s(w,rn),s(rn,Ms),s(w,Gs),s(w,kn),s(kn,Fs),s(w,Bs),s(w,fn),s(fn,Is),s(w,qs),u(n,zn,l),u(n,H,l),s(H,Js),s(H,dn),s(dn,Us),s(H,Ws),u(n,Zn,l),u(n,S,l),s(S,mn),s(mn,h),s(h,En),s(En,zs),s(h,Zs),s(h,_n),s(_n,js),s(h,Ks),s(h,wn),s(wn,Qs),s(h,Vs),s(S,Xs),s(S,U),s(U,$),s($,vn),s(vn,Ys),s($,gs),s($,bn),s(bn,na),s($,sa),s($,yn),s(yn,aa),s($,ta),s(U,ea),s(U,V),V.innerHTML=xt,u(n,jn,l),u(n,Kn,l),u(n,Qn,l),u(n,Vn,l),u(n,A,l),s(A,L),s(L,Tn),s(A,pa),u(n,Xn,l),u(n,Yn,l),u(n,gn,l),u(n,y,l),s(y,hn),s(hn,oa),s(y,ca),s(y,$n),s($n,la),s(y,ua),s(y,Cn),s(Cn,ra),s(y,ia),u(n,ns,l),qa(N,n,l),u(n,ss,l),u(n,X,l),s(X,ka),u(n,as,l),u(n,C,l),s(C,fa),s(C,Rn),s(Rn,da),s(C,ma),s(C,On),s(On,Ea),s(C,_a),u(n,ts,l),u(n,M,l),s(M,G),s(G,Pn),s(M,wa),u(n,es,l),u(n,Y,l),s(Y,va),u(n,ps,l),qa(F,n,l),u(n,os,l),u(n,m,l),s(m,ba),s(m,Dn),s(Dn,ya),s(m,Ta),s(m,xn),s(xn,ha),s(m,$a),s(m,Hn),s(Hn,Ca),s(m,Ra),s(m,Sn),s(Sn,Oa),s(m,Pa),s(m,An),s(An,Da),s(m,xa),u(n,cs,l),u(n,ls,l),u(n,us,l),u(n,rs,l),u(n,B,l),s(B,I),s(I,Ln),s(B,Ha),u(n,is,l),u(n,ks,l),u(n,fs,l),u(n,g,l),s(g,O),s(O,W),s(W,nn),s(O,Sa),s(O,Aa),s(O,La),s(O,z),s(z,Na),ds=!0},p(n,[l]){const Nn={};l&1&&(Nn.$$scope={dirty:l,ctx:n}),x.$set(Nn);const P={};l&1&&(P.$$scope={dirty:l,ctx:n}),N.$set(P);const Mn={};l&1&&(Mn.$$scope={dirty:l,ctx:n}),F.$set(Mn)},i(n){ds||(Ja(x.$$.fragment,n),Ja(N.$$.fragment,n),Ja(F.$$.fragment,n),ds=!0)},o(n){Ua(x.$$.fragment,n),Ua(N.$$.fragment,n),Ua(F.$$.fragment,n),ds=!1},d(n){n&&a(r),n&&a(Gn),n&&a(T),n&&a(Fn),n&&a(D),n&&a(Bn),Wa(x,n),n&&a(In),n&&a(b),n&&a(qn),n&&a(J),n&&a(Jn),n&&a(Un),n&&a(Wn),n&&a(w),n&&a(zn),n&&a(H),n&&a(Zn),n&&a(S),n&&a(jn),n&&a(Kn),n&&a(Qn),n&&a(Vn),n&&a(A),n&&a(Xn),n&&a(Yn),n&&a(gn),n&&a(y),n&&a(ns),Wa(N,n),n&&a(ss),n&&a(X),n&&a(as),n&&a(C),n&&a(ts),n&&a(M),n&&a(es),n&&a(Y),n&&a(ps),Wa(F,n),n&&a(os),n&&a(m),n&&a(cs),n&&a(ls),n&&a(us),n&&a(rs),n&&a(B),n&&a(is),n&&a(ks),n&&a(fs),n&&a(g)}}}const Ut={title:"Timer와 Ticker",date:"2023-09-14T00:00:00.000Z",excerpt:"Go에서 일정 시간이 지난 이후 또는 주기적으로 특정 작업을 수행하려면 어떻게 해야 할지 알아보자.",categories:["Golang","Concurrency in Go"],coverImage:"/post_img/Go/Concurrency in Go/cover.png",coverWidth:16,coverHeight:9,indexed:!1,exposed:!0};class Wt extends At{constructor(r){super(),Lt(this,r,null,It,Nt,{})}}export{Wt as default,Ut as metadata};
