import{S as _B,i as mB,s as CB,k as o,a as u,q as e,y as OB,l as p,c as i,m as l,r as a,h as t,z as DB,n as d,b as r,E as s,A as bB,M as RB,g as yB,d as PB,B as wB}from"./index.d78780bf.js";import{I as SB}from"./Image.605b14b5.js";function TB(GL){let ua,ck,ia,dv,rk,uk,ik,dk,Vs,Xs,Xa,kv,kk,fk,Ek,Ys,fv,Ya,Ev,vv,vk,w,_v,le,mv,Cv,ga,Ov,Dv,no,bv,Rv,so,yv,Pv,to,wv,Sv,eo,Tv,hv,ao,Hv,Mv,_k,mk,Ck,Ok,gs,nt,oo,Nv,Dk,bk,Rk,on,xv,po,jv,Lv,lo,Av,Bv,co,Wv,qv,ro,Fv,Jv,yk,Pk,wk,js,uo,Gv,Iv,io,Uv,zv,Sk,ce,IL=`<code class="language-go"><span class="token keyword">type</span> Reader <span class="token keyword">interface</span> <span class="token punctuation">&#123;</span>
    <span class="token function">Read</span><span class="token punctuation">(</span>p <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">type</span> Writer <span class="token keyword">interface</span> <span class="token punctuation">&#123;</span>
    <span class="token function">Write</span><span class="token punctuation">(</span>p <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code>`,Tk,V,ko,Zv,Qv,fo,$v,Kv,Eo,Vv,Xv,vo,Yv,gv,_o,n5,s5,hk,Hk,Mk,ps,t5,mo,e5,a5,Co,o5,p5,Nk,re,UL=`<code class="language-go"><span class="token keyword">type</span> NotHowReaderIsDefined <span class="token keyword">interface</span> <span class="token punctuation">&#123;</span>
    <span class="token function">Read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>p <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code>`,xk,ls,l5,Oo,c5,r5,Do,u5,i5,jk,ue,zL=`<code class="language-go"><span class="token keyword">func</span> <span class="token function">countLetters</span><span class="token punctuation">(</span>r io<span class="token punctuation">.</span>Reader<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	buf <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token number">2048</span><span class="token punctuation">)</span>
	out <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
	<span class="token keyword">for</span> <span class="token punctuation">&#123;</span>
		n<span class="token punctuation">,</span> err <span class="token operator">:=</span> r<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span>
		<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> b <span class="token operator">:=</span> <span class="token keyword">range</span> buf<span class="token punctuation">[</span><span class="token punctuation">:</span>n<span class="token punctuation">]</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">>=</span> <span class="token char">'A'</span> <span class="token operator">&amp;&amp;</span> b <span class="token operator">&lt;=</span> <span class="token char">'Z'</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>b <span class="token operator">>=</span> <span class="token char">'a'</span> <span class="token operator">&amp;&amp;</span> b <span class="token operator">&lt;=</span> <span class="token char">'z'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
				out<span class="token punctuation">[</span><span class="token function">string</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">++</span>
			<span class="token punctuation">&#125;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token keyword">if</span> err <span class="token operator">==</span> io<span class="token punctuation">.</span>EOF <span class="token punctuation">&#123;</span>
			<span class="token keyword">return</span> out<span class="token punctuation">,</span> <span class="token boolean">nil</span>
		<span class="token punctuation">&#125;</span>
		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,Lk,da,d5,Ak,hn,bo,X,k5,Ro,f5,E5,yo,v5,_5,Po,m5,C5,O5,D5,wo,b5,R5,y5,So,cs,To,P5,w5,ho,S5,T5,Ho,h5,H5,M5,Mo,Hn,No,N5,x5,xo,j5,L5,jo,A5,B5,Lo,W5,q5,F5,Ao,J,Bo,J5,G5,Wo,I5,U5,z5,Z5,qo,Q5,$5,Fo,K5,V5,Jo,X5,Y5,Bk,Wk,qk,pn,g5,Go,n_,s_,Io,t_,e_,Uo,a_,o_,zo,p_,l_,Fk,ie,ZL=`<code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	s <span class="token operator">:=</span> <span class="token string">"The quick brown fox jumped over the lazy dog"</span>
	sr <span class="token operator">:=</span> strings<span class="token punctuation">.</span><span class="token function">NewReader</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>
	counts<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">countLetters</span><span class="token punctuation">(</span>sr<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>counts<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code>`,Jk,mn,Zo,c_,r_,Qo,u_,i_,$o,d_,k_,Ko,f_,E_,Gk,de,QL=`<code class="language-go"><span class="token keyword">func</span> <span class="token function">buildGZipReader</span><span class="token punctuation">(</span>filename <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>gzip<span class="token punctuation">.</span>Reader<span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	r<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err
	<span class="token punctuation">&#125;</span>

	gr<span class="token punctuation">,</span> err <span class="token operator">:=</span> gzip<span class="token punctuation">.</span><span class="token function">NewReader</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">return</span> gr<span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		gr<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		r<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>
<span class="token punctuation">&#125;</span></code>`,Ik,G,v_,Vo,__,m_,Xo,C_,O_,Yo,D_,b_,go,R_,y_,np,P_,w_,Uk,Cn,sp,S_,T_,tp,h_,H_,ep,M_,N_,ap,x_,j_,zk,ke,$L=`<code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	r<span class="token punctuation">,</span> closer<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">buildGZipReader</span><span class="token punctuation">(</span><span class="token string">"my_data.txt.gz"</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">defer</span> <span class="token function">closer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	counts<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">countLetters</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>counts<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code>`,Zk,Qk,$k,N,L_,op,A_,B_,pp,W_,q_,lp,F_,J_,cp,G_,I_,rp,U_,z_,up,Z_,Q_,Kk,rs,us,ip,$_,K_,dp,V_,X_,kp,Y_,g_,n0,st,fp,s0,t0,Ep,e0,a0,o0,is,vp,p0,l0,_p,c0,r0,mp,u0,i0,Vk,ds,d0,Cp,k0,f0,Op,E0,v0,Xk,Yk,gk,Vn,Dp,_0,m0,bp,C0,O0,Rp,D0,b0,nf,fe,KL=`<code class="language-go"><span class="token keyword">type</span> Closer <span class="token keyword">interface</span> <span class="token punctuation">&#123;</span>
    <span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">type</span> Seeker <span class="token keyword">interface</span> <span class="token punctuation">&#123;</span>
    <span class="token function">Seek</span><span class="token punctuation">(</span>offset <span class="token builtin">int64</span><span class="token punctuation">,</span> whence <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">int64</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code>`,sf,On,yp,R0,y0,Pp,P0,w0,wp,S0,T0,Sp,h0,H0,tf,Ee,VL=`<code class="language-go">f<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span>
<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err
<span class="token punctuation">&#125;</span>
<span class="token keyword">defer</span> f<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code>`,ef,Mn,M0,Tp,N0,x0,hp,j0,L0,Hp,A0,B0,af,H,Mp,W0,q0,Np,F0,J0,xp,G0,I0,jp,U0,z0,Lp,Z0,Q0,Ap,$0,K0,Bp,V0,X0,of,pf,lf,v,Wp,Y0,g0,qp,n6,s6,Fp,t6,e6,Jp,a6,o6,Gp,p6,l6,Ip,c6,r6,Up,u6,i6,zp,d6,k6,Zp,f6,E6,Qp,v6,_6,$p,m6,C6,Kp,O6,D6,cf,tt,b6,Vp,R6,y6,rf,b,Xp,P6,w6,Yp,S6,T6,gp,h6,H6,nl,M6,N6,sl,x6,j6,tl,L6,A6,el,B6,W6,al,q6,F6,uf,R,ol,J6,G6,pl,I6,U6,ll,z6,Z6,cl,Q6,$6,rl,K6,V6,ul,X6,Y6,il,g6,n9,dl,s9,t9,df,et,e9,kl,a9,o9,kf,ve,XL=`<code class="language-go"><span class="token keyword">type</span> nopCloser <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
    io<span class="token punctuation">.</span>Reader
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>nopCloser<span class="token punctuation">)</span> <span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token boolean">nil</span> <span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">NopCloser</span><span class="token punctuation">(</span>r io<span class="token punctuation">.</span>Reader<span class="token punctuation">)</span> io<span class="token punctuation">.</span>ReadCloser <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> nopCloser<span class="token punctuation">&#123;</span>r<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,ff,ka,p9,Ef,fa,_e,l9,fl,c9,r9,vf,_f,mf,Cf,at,ot,El,u9,Of,Df,bf,Nn,i9,vl,d9,k9,_l,f9,E9,ml,v9,_9,Rf,ln,m9,Cl,C9,O9,Ol,D9,b9,Dl,R9,y9,bl,P9,w9,yf,Ea,S9,Pf,me,YL='<code class="language-go">d <span class="token operator">:=</span> <span class="token number">2</span><span class="token operator">*</span>time<span class="token punctuation">.</span>Hour <span class="token operator">+</span> <span class="token number">30</span><span class="token operator">*</span>time<span class="token punctuation">.</span>Minute</code>',wf,pt,T9,Rl,h9,H9,Sf,Tf,hf,xn,M9,yl,N9,x9,Pl,j9,L9,Ce,A9,B9,Hf,va,wl,W9,Mf,y,Sl,q9,F9,Tl,J9,G9,hl,I9,U9,Hl,z9,Z9,Ml,Q9,$9,Nl,K9,V9,xl,X9,Y9,jl,g9,n4,Nf,xf,jf,jn,s4,Ll,t4,e4,Al,a4,o4,Bl,p4,l4,Lf,Dn,Wl,c4,r4,ql,u4,i4,Fl,d4,k4,Jl,f4,E4,Af,L,Gl,v4,_4,Il,m4,C4,Ul,O4,D4,zl,b4,R4,Zl,y4,P4,Ql,w4,S4,Bf,Oe,gL=`<code class="language-go">t<span class="token punctuation">,</span> err <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span><span class="token string">"2006-02-01 15:04:05 -0700"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"January 2, 2006 at 3:04:05PM MST"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code>`,Wf,_a,T4,qf,De,nA='<code class="language-bash">March <span class="token number">13</span>, <span class="token number">2016</span> at <span class="token number">12</span>:00:00AM +0000</code>',Ff,lt,h4,$l,H4,M4,Jf,k,Kl,N4,x4,Vl,j4,L4,Xl,A4,B4,Yl,W4,q4,gl,F4,J4,nc,G4,I4,sc,U4,z4,tc,Z4,Q4,ec,$4,K4,ac,V4,X4,oc,Y4,g4,pc,n8,s8,lc,t8,e8,cc,a8,o8,rc,p8,l8,uc,c8,r8,ic,u8,i8,dc,d8,k8,Gf,E,kc,f8,E8,fc,v8,_8,Ec,m8,C8,vc,O8,D8,_c,b8,R8,mc,y8,P8,Cc,w8,S8,Oc,T8,h8,Dc,H8,M8,bc,N8,x8,Rc,j8,L8,yc,A8,B8,Pc,W8,q8,If,ks,F8,wc,J8,G8,Sc,I8,U8,Uf,zf,Zf,Qf,ct,rt,Tc,z8,$f,fs,Z8,hc,Q8,$8,Hc,K8,V8,Kf,S,X8,Mc,Y8,g8,Nc,nm,sm,xc,tm,em,jc,am,om,Lc,pm,lm,Ac,cm,rm,Bc,um,im,Vf,Xf,Yf,gf,ut,it,Wc,dm,n1,cn,km,qc,fm,Em,Fc,vm,_m,Jc,mm,Cm,Gc,Om,Dm,s1,Es,bm,Ic,Rm,ym,Uc,Pm,wm,t1,ma,Sm,e1,be,sA=`<code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	dura <span class="token operator">:=</span> time<span class="token punctuation">.</span>Second <span class="token operator">*</span> <span class="token number">2</span>
	timer <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">NewTicker</span><span class="token punctuation">(</span>dura<span class="token punctuation">)</span>
	<span class="token keyword">defer</span> timer<span class="token punctuation">.</span><span class="token function">Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// shutdown ticker</span>
	after <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">After</span><span class="token punctuation">(</span>dura <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">)</span>

	time<span class="token punctuation">.</span><span class="token function">AfterFunc</span><span class="token punctuation">(</span>dura<span class="token operator">*</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"응애"</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

loop1<span class="token punctuation">:</span>
	<span class="token keyword">for</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">select</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">case</span> <span class="token operator">&lt;-</span>timer<span class="token punctuation">.</span>C<span class="token punctuation">:</span> <span class="token comment">// channel that listens ticking</span>
			fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"야옹"</span><span class="token punctuation">)</span>
			timer<span class="token punctuation">.</span><span class="token function">Reset</span><span class="token punctuation">(</span>dura <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// reconfirguration tick interval</span>
		<span class="token keyword">case</span> <span class="token operator">&lt;-</span>after<span class="token punctuation">:</span>
			fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"끝"</span><span class="token punctuation">)</span>
			<span class="token keyword">break</span> loop1
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,a1,o1,p1,l1,dt,kt,zc,Tm,c1,r1,u1,vs,hm,Zc,Hm,Mm,Qc,Nm,xm,i1,d1,k1,f1,ft,Et,$c,jm,E1,Ca,Lm,v1,Re,tA=`<code class="language-json"><span class="token punctuation">&#123;</span>
	<span class="token property">"id"</span><span class="token operator">:</span> <span class="token string">"12345"</span><span class="token punctuation">,</span>
	<span class="token property">"date_ordered"</span><span class="token operator">:</span> <span class="token string">"2020-05-01T13:01:02Z"</span><span class="token punctuation">,</span>
	<span class="token property">"customer_id"</span><span class="token operator">:</span> <span class="token string">"3"</span><span class="token punctuation">,</span>
	<span class="token property">"items"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
		<span class="token punctuation">&#123;</span> <span class="token property">"id"</span><span class="token operator">:</span> <span class="token string">"xyz123"</span><span class="token punctuation">,</span> <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Thing 1"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
		<span class="token punctuation">&#123;</span> <span class="token property">"id"</span><span class="token operator">:</span> <span class="token string">"abc789"</span><span class="token punctuation">,</span> <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Thing 2"</span> <span class="token punctuation">&#125;</span>
	<span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span></code>`,_1,Oa,Am,m1,ye,eA=`<code class="language-go"><span class="token keyword">type</span> Order <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
	ID          <span class="token builtin">string</span>    <span class="token string">&#96;json:"id"&#96;</span>
	DateOrdered time<span class="token punctuation">.</span>Time <span class="token string">&#96;json:"date_ordered"&#96;</span>
	CustomerID  <span class="token builtin">string</span>    <span class="token string">&#96;json:"customer_id"&#96;</span>
	Items       <span class="token punctuation">[</span><span class="token punctuation">]</span>Item    <span class="token string">&#96;json:"items"&#96;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">type</span> Item <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
	ID   <span class="token builtin">string</span> <span class="token string">&#96;json:"id"&#96;</span>
	Name <span class="token builtin">string</span> <span class="token string">&#96;json:"name"&#96;</span>
<span class="token punctuation">&#125;</span></code>`,C1,_s,Bm,Kc,Wm,qm,Vc,Fm,Jm,O1,ms,Gm,Xc,Im,Um,Yc,zm,Zm,D1,Cs,Qm,gc,$m,Km,nr,Vm,Xm,b1,Ln,Ym,sr,gm,n7,tr,s7,t7,er,e7,a7,R1,rn,o7,ar,p7,l7,or,c7,r7,pr,u7,i7,lr,d7,k7,y1,Os,f7,cr,E7,v7,rr,_7,m7,P1,Da,C7,w1,S1,T1,h1,vt,_t,ur,O7,H1,M1,N1,P,ir,D7,b7,dr,R7,y7,kr,P7,w7,fr,S7,T7,Er,h7,H7,vr,M7,N7,_r,x7,j7,mr,L7,A7,x1,Pe,aA=`<code class="language-go">data <span class="token operator">:=</span> <span class="token string">&#96;&#123;
	"id":"12345",
	"date_ordered":"2020-05-01T13:01:02Z",
	"customer_id":"3",
	"items":[&#123;"id":"xyz123","name":"Thing 1"&#125;,&#123;"id":"abc789","name":"Thing 2"&#125;]
&#125;&#96;</span>

<span class="token keyword">var</span> o Order
err <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">Unmarshal</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>o<span class="token punctuation">)</span>
<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span></code>`,j1,Ls,Cr,B7,W7,Or,q7,F7,L1,A1,B1,un,Dr,J7,G7,br,I7,U7,Rr,z7,Z7,yr,Q7,$7,Pr,K7,W1,we,oA=`<code class="language-go">	out<span class="token punctuation">,</span> err <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">Marshal</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">string</span><span class="token punctuation">(</span>out<span class="token punctuation">)</span><span class="token punctuation">)</span></code>`,q1,F1,J1,G1,mt,Ct,wr,V7,I1,_,Sr,X7,Y7,Tr,g7,nC,hr,sC,tC,Hr,eC,aC,Mr,oC,pC,Nr,lC,cC,xr,rC,uC,jr,iC,dC,Lr,kC,fC,Ar,EC,vC,Br,_C,mC,Wr,CC,OC,U1,Y,qr,DC,bC,Fr,RC,yC,Jr,PC,wC,Gr,SC,TC,Ir,hC,HC,z1,Se,pA=`<code class="language-go"><span class="token keyword">type</span> Person <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
	Name <span class="token builtin">string</span> <span class="token string">&#96;json:"name"&#96;</span>
	Age  <span class="token builtin">int</span>    <span class="token string">&#96;json:"age"&#96;</span>
<span class="token punctuation">&#125;</span>

toFile <span class="token operator">:=</span> Person<span class="token punctuation">&#123;</span>
	Name<span class="token punctuation">:</span> <span class="token string">"Fred"</span><span class="token punctuation">,</span>
	Age<span class="token punctuation">:</span>  <span class="token number">40</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span></code>`,Z1,Q1,$1,D,Ur,MC,NC,zr,xC,jC,Zr,LC,AC,Qr,BC,WC,$r,qC,FC,Kr,JC,GC,Vr,IC,UC,Xr,zC,ZC,Yr,QC,$C,K1,Te,lA=`<code class="language-go">tmpFile<span class="token punctuation">,</span> err <span class="token operator">:=</span> ioutil<span class="token punctuation">.</span><span class="token function">TempFile</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span><span class="token function">TempDir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"sample-"</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
	<span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">defer</span> os<span class="token punctuation">.</span><span class="token function">Remove</span><span class="token punctuation">(</span>tmpFile<span class="token punctuation">.</span><span class="token function">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

err <span class="token operator">=</span> json<span class="token punctuation">.</span><span class="token function">NewEncoder</span><span class="token punctuation">(</span>tmpFile<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Encode</span><span class="token punctuation">(</span>toFile<span class="token punctuation">)</span>
<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
	<span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

err <span class="token operator">=</span> tmpFile<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
	<span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code>`,V1,X1,Y1,dn,KC,gr,VC,XC,nu,YC,gC,su,nO,sO,tu,tO,eO,g1,he,cA=`<code class="language-go">tmpFile2<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>tmpFile<span class="token punctuation">.</span><span class="token function">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
	<span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">var</span> fromFile Person
err <span class="token operator">=</span> json<span class="token punctuation">.</span><span class="token function">NewDecoder</span><span class="token punctuation">(</span>tmpFile2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Decode</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>fromFile<span class="token punctuation">)</span>
<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
	<span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

err <span class="token operator">=</span> tmpFile2<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
	<span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%+v&#92;n"</span><span class="token punctuation">,</span> fromFile<span class="token punctuation">)</span></code>`,n2,Ot,aO,He,oO,pO,s2,t2,e2,a2,Dt,bt,eu,lO,o2,Ds,cO,au,rO,uO,ou,iO,dO,p2,ba,kO,l2,Me,rA=`<code class="language-json"><span class="token punctuation">&#123;</span> <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Fred"</span><span class="token punctuation">,</span> <span class="token property">"age"</span><span class="token operator">:</span> <span class="token number">40</span> <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#123;</span> <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Mary"</span><span class="token punctuation">,</span> <span class="token property">"age"</span><span class="token operator">:</span> <span class="token number">21</span> <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#123;</span> <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Pat"</span><span class="token punctuation">,</span> <span class="token property">"age"</span><span class="token operator">:</span> <span class="token number">30</span> <span class="token punctuation">&#125;</span></code>`,c2,Rt,fO,pu,EO,vO,r2,yt,_O,lu,mO,CO,u2,Ne,uA=`<code class="language-go"><span class="token keyword">var</span> t <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
	Name <span class="token builtin">string</span> <span class="token string">&#96;json:"name"&#96;</span>
	Age  <span class="token builtin">int</span>    <span class="token string">&#96;json:"age"&#96;</span>
<span class="token punctuation">&#125;</span></code>`,i2,d2,k2,kn,OO,cu,DO,bO,ru,RO,yO,uu,PO,wO,iu,SO,TO,f2,xe,iA=`<code class="language-go">dec <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">NewDecoder</span><span class="token punctuation">(</span>strings<span class="token punctuation">.</span><span class="token function">NewReader</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> dec<span class="token punctuation">.</span><span class="token function">More</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	err <span class="token operator">:=</span> dec<span class="token punctuation">.</span><span class="token function">Decode</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>t<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		<span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code>`,E2,Pt,hO,du,HO,MO,v2,_2,m2,Xn,ku,NO,xO,fu,jO,LO,Eu,AO,BO,C2,je,dA=`<code class="language-go"><span class="token keyword">var</span> allInputs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>Person<span class="token punctuation">&#123;</span>
	<span class="token punctuation">&#123;</span>Name<span class="token punctuation">:</span> <span class="token string">"Fred"</span><span class="token punctuation">,</span> Age<span class="token punctuation">:</span> <span class="token number">40</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
	<span class="token punctuation">&#123;</span>Name<span class="token punctuation">:</span> <span class="token string">"Mary"</span><span class="token punctuation">,</span> Age<span class="token punctuation">:</span> <span class="token number">21</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
	<span class="token punctuation">&#123;</span>Name<span class="token punctuation">:</span> <span class="token string">"Pat"</span><span class="token punctuation">,</span> Age<span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">var</span> b bytes<span class="token punctuation">.</span>Buffer
enc <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">NewEncoder</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>b<span class="token punctuation">)</span>
<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> input <span class="token operator">:=</span> <span class="token keyword">range</span> allInputs <span class="token punctuation">&#123;</span>
	t <span class="token operator">:=</span> <span class="token function">process</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span>
	err <span class="token operator">:=</span> enc<span class="token punctuation">.</span><span class="token function">Encode</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		<span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
out <span class="token operator">:=</span> b<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>out<span class="token punctuation">)</span></code>`,O2,D2,b2,R2,wt,St,vu,WO,y2,An,qO,_u,FO,JO,mu,GO,IO,Cu,UO,zO,P2,Le,kA=`<code class="language-go"><span class="token keyword">type</span> RFC822ZTime <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
	time<span class="token punctuation">.</span>Time
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>rt RFC822ZTime<span class="token punctuation">)</span> <span class="token function">MarshalJSON</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	out <span class="token operator">:=</span> rt<span class="token punctuation">.</span>Time<span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>RFC822Z<span class="token punctuation">)</span>
	<span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>&#96;<span class="token string">"&#96; + out + &#96;"</span><span class="token string">&#96;), nil
&#125;

func (rt *RFC822ZTime) UnmarshalJSON(b []byte) error &#123;
	if string(b) == "null" &#123;
		return nil
	&#125;

	t, err := time.Parse(&#96;</span>"<span class="token string">&#96;+time.RFC822Z+&#96;</span>"&#96;<span class="token punctuation">,</span> <span class="token function">string</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> err
	<span class="token punctuation">&#125;</span>

	<span class="token operator">*</span>rt <span class="token operator">=</span> RFC822ZTime<span class="token punctuation">&#123;</span>t<span class="token punctuation">&#125;</span>
	<span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">&#125;</span></code>`,w2,g,Ou,ZO,QO,Du,$O,KO,bu,VO,XO,Ru,YO,gO,yu,nD,sD,S2,T2,h2,bs,tD,Pu,eD,aD,wu,oD,pD,H2,Ae,fA=`<code class="language-go"><span class="token keyword">type</span> Item <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
	ID   <span class="token builtin">string</span> <span class="token string">&#96;json:"id"&#96;</span>
	Name <span class="token builtin">string</span> <span class="token string">&#96;json:"name"&#96;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">type</span> Order <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
	ID           <span class="token builtin">string</span>      <span class="token string">&#96;json:"id"&#96;</span>
	DateOrdereds RFC822ZTime <span class="token string">&#96;json:"date_ordered"&#96;</span>
	CustomerID   <span class="token builtin">string</span>      <span class="token string">&#96;json:"customer_id"&#96;</span>
	Items        <span class="token punctuation">[</span><span class="token punctuation">]</span>Item      <span class="token string">&#96;json:"items"&#96;</span>
<span class="token punctuation">&#125;</span></code>`,M2,Tt,lD,Be,cD,rD,N2,x2,j2,I,uD,Su,iD,dD,Tu,kD,fD,hu,ED,vD,Hu,_D,mD,Mu,CD,OD,L2,Ra,DD,A2,Yn,Nu,bD,RD,xu,yD,PD,ju,wD,SD,B2,ht,TD,Lu,hD,HD,W2,ya,nn,MD,Au,ND,xD,Bu,jD,LD,Wu,AD,BD,qu,WD,qD,Fu,FD,JD,q2,F2,J2,G2,Ht,Mt,Ju,GD,I2,U2,z2,Pa,ID,Z2,Q2,$2,K2,Nt,xt,Gu,UD,V2,A,Iu,zD,ZD,Uu,QD,$D,zu,KD,VD,Zu,XD,YD,Qu,gD,nb,$u,sb,tb,X2,We,EA=`<code class="language-go">client <span class="token operator">:=</span> <span class="token operator">&amp;</span>http<span class="token punctuation">.</span>Client<span class="token punctuation">&#123;</span>
	Timeout<span class="token punctuation">:</span> <span class="token number">10</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span></code>`,Y2,g2,nE,T,eb,Ku,ab,ob,Vu,pb,lb,Xu,cb,rb,Yu,ub,ib,gu,db,kb,ni,fb,Eb,si,vb,_b,sE,Bn,mb,ti,Cb,Ob,ei,Db,bb,ai,Rb,yb,tE,qe,vA=`<code class="language-go">req<span class="token punctuation">,</span> err <span class="token operator">:=</span> http<span class="token punctuation">.</span><span class="token function">NewRequestWithContext</span><span class="token punctuation">(</span>
	context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
	http<span class="token punctuation">.</span>MethodGet<span class="token punctuation">,</span>
	<span class="token string">"https://jsonplaceholder.typicode.com/todos/1"</span><span class="token punctuation">,</span>
	<span class="token boolean">nil</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span>
<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
	<span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
req<span class="token punctuation">.</span>Header<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"X-My-Client"</span><span class="token punctuation">,</span> <span class="token string">"Learning Go"</span><span class="token punctuation">)</span></code>`,eE,aE,oE,bn,oi,Pb,wb,pi,Sb,Tb,li,hb,Hb,ci,Mb,Nb,pE,Fe,_A=`<code class="language-go">res<span class="token punctuation">,</span> err <span class="token operator">:=</span> client<span class="token punctuation">.</span><span class="token function">Do</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span>
<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
	<span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code>`,lE,cE,rE,h,xb,ri,jb,Lb,ui,Ab,Bb,ii,Wb,qb,di,Fb,Jb,ki,Gb,Ib,fi,Ub,zb,Ei,Zb,Qb,uE,Je,mA=`<code class="language-go"><span class="token keyword">defer</span> res<span class="token punctuation">.</span>Body<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> res<span class="token punctuation">.</span>StatusCode <span class="token operator">!=</span> http<span class="token punctuation">.</span>StatusOK <span class="token punctuation">&#123;</span>
	<span class="token function">panic</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"unexpected status: got %v"</span><span class="token punctuation">,</span> res<span class="token punctuation">.</span>Status<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>Header<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">"Content-Type"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">var</span> data <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
	UserID    <span class="token builtin">int</span>    <span class="token string">&#96;json:"userId"&#96;</span>
	ID        <span class="token builtin">int</span>    <span class="token string">&#96;json:"id"&#96;</span>
	Title     <span class="token builtin">string</span> <span class="token string">&#96;json:"title"&#96;</span>
	Completed <span class="token builtin">bool</span>   <span class="token string">&#96;json:"completed"&#96;</span>
<span class="token punctuation">&#125;</span>
err <span class="token operator">=</span> json<span class="token punctuation">.</span><span class="token function">NewDecoder</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>Body<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Decode</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>data<span class="token punctuation">)</span>
<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
	<span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%+v&#92;n"</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span></code>`,iE,wa,$b,dE,Ge,CA=`<code class="language-bash">application/json<span class="token punctuation">;</span> <span class="token assign-left variable">charset</span><span class="token operator">=</span>utf-8
<span class="token punctuation">&#123;</span>UserID:1 ID:1 Title:delectus aut autem Completed:false<span class="token punctuation">&#125;</span></code>`,kE,fE,EE,Sa,fn,vi,Kb,Vb,_i,Xb,Yb,mi,gb,nR,Ci,sR,tR,Oi,eR,aR,vE,_E,mE,CE,jt,Lt,Di,oR,OE,En,pR,bi,lR,cR,Ri,rR,uR,yi,iR,dR,Pi,kR,fR,DE,At,ER,wi,vR,_R,bE,Ie,OA=`<code class="language-go"><span class="token keyword">type</span> Handler <span class="token keyword">interface</span> <span class="token punctuation">&#123;</span>
	<span class="token function">ServeHTTP</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code>`,RE,yE,PE,Rn,Si,mR,CR,Ti,OR,DR,hi,bR,RR,Hi,yR,PR,wE,Ue,DA=`<code class="language-go"><span class="token keyword">type</span> ResponseWriter <span class="token keyword">interface</span> <span class="token punctuation">&#123;</span>
	<span class="token function">Header</span><span class="token punctuation">(</span><span class="token punctuation">)</span> http<span class="token punctuation">.</span>Header
	<span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span>
	<span class="token function">WriterHeader</span><span class="token punctuation">(</span>statusCode <span class="token builtin">int</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code>`,SE,Ta,wR,TE,Wn,SR,Mi,TR,hR,Ni,HR,MR,xi,NR,xR,hE,qn,jR,ji,LR,AR,Li,BR,WR,Ai,qR,FR,HE,Bt,JR,Bi,GR,IR,ME,NE,xE,ha,UR,jE,ze,bA=`<code class="language-go"><span class="token keyword">type</span> HelloHandler <span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>hh HelloHandler<span class="token punctuation">)</span> <span class="token function">ServeHTTP</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	w<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"Hello!&#92;n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code>`,LE,Wt,zR,Wi,ZR,QR,AE,BE,WE,qt,$R,qi,KR,VR,qE,Ze,RA=`<code class="language-go">s <span class="token operator">:=</span> http<span class="token punctuation">.</span>Server<span class="token punctuation">&#123;</span>
	Addr<span class="token punctuation">:</span>         <span class="token string">":8080"</span><span class="token punctuation">,</span>
	ReadTimeout<span class="token punctuation">:</span>  <span class="token number">3</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">,</span>
	WriteTimeout<span class="token punctuation">:</span> <span class="token number">5</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">,</span>
	IdleTimeout<span class="token punctuation">:</span>  <span class="token number">100</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">,</span>
	Handler<span class="token punctuation">:</span>      HelloHandler<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span>

err <span class="token operator">:=</span> s<span class="token punctuation">.</span><span class="token function">ListenAndServe</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> http<span class="token punctuation">.</span>ErrServerClosed <span class="token punctuation">&#123;</span>
		<span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,FE,As,Fi,XR,YR,Ji,gR,ny,JE,yn,Gi,sy,ty,Ii,ey,ay,Ui,oy,py,zi,ly,cy,GE,Bs,Zi,ry,uy,Qi,iy,dy,IE,UE,zE,x,ky,$i,fy,Ey,Ki,vy,_y,Vi,my,Cy,Xi,Oy,Dy,Yi,by,Ry,gi,yy,Py,ZE,U,wy,nd,Sy,Ty,sd,hy,Hy,td,My,Ny,ed,xy,jy,ad,Ly,Ay,QE,Qe,yA=`<code class="language-go">mux<span class="token punctuation">.</span><span class="token function">HandleFunc</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	w<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"Hello!&#92;n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code>`,$E,Fn,By,od,Wy,qy,pd,Fy,Jy,$e,Gy,Iy,KE,Ft,Uy,Ke,zy,Zy,VE,XE,YE,Jt,j,ld,Qy,$y,cd,Ky,Vy,rd,Xy,Yy,ud,gy,nP,id,sP,tP,dd,eP,aP,kd,oP,pP,lP,Jn,fd,cP,rP,Ed,uP,iP,vd,dP,kP,_d,fP,EP,gE,n3,s3,sn,md,vP,_P,Cd,mP,CP,Od,OP,DP,Dd,bP,RP,bd,yP,PP,t3,Ve,PA=`<code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	person <span class="token operator">:=</span> http<span class="token punctuation">.</span><span class="token function">NewServeMux</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	person<span class="token punctuation">.</span><span class="token function">HandleFunc</span><span class="token punctuation">(</span><span class="token string">"/greet"</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		w<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"greetings!&#92;n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

	dog <span class="token operator">:=</span> http<span class="token punctuation">.</span><span class="token function">NewServeMux</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	dog<span class="token punctuation">.</span><span class="token function">HandleFunc</span><span class="token punctuation">(</span><span class="token string">"/greet"</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		w<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"good puppy!&#92;n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

	mux <span class="token operator">:=</span> http<span class="token punctuation">.</span><span class="token function">NewServeMux</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	mux<span class="token punctuation">.</span><span class="token function">Handle</span><span class="token punctuation">(</span><span class="token string">"/person/"</span><span class="token punctuation">,</span> http<span class="token punctuation">.</span><span class="token function">StripPrefix</span><span class="token punctuation">(</span><span class="token string">"/person"</span><span class="token punctuation">,</span> person<span class="token punctuation">)</span><span class="token punctuation">)</span>
	mux<span class="token punctuation">.</span><span class="token function">Handle</span><span class="token punctuation">(</span><span class="token string">"/dog/"</span><span class="token punctuation">,</span> http<span class="token punctuation">.</span><span class="token function">StripPrefix</span><span class="token punctuation">(</span><span class="token string">"/dog"</span><span class="token punctuation">,</span> dog<span class="token punctuation">)</span><span class="token punctuation">)</span>

	s <span class="token operator">:=</span> http<span class="token punctuation">.</span>Server<span class="token punctuation">&#123;</span>
		Addr<span class="token punctuation">:</span>         <span class="token string">":8080"</span><span class="token punctuation">,</span>
		ReadTimeout<span class="token punctuation">:</span>  <span class="token number">3</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">,</span>
		WriteTimeout<span class="token punctuation">:</span> <span class="token number">5</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">,</span>
		IdleTimeout<span class="token punctuation">:</span>  <span class="token number">100</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">,</span>
		Handler<span class="token punctuation">:</span>      mux<span class="token punctuation">,</span>
	<span class="token punctuation">&#125;</span>

	err <span class="token operator">:=</span> s<span class="token punctuation">.</span><span class="token function">ListenAndServe</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">if</span> err <span class="token operator">!=</span> http<span class="token punctuation">.</span>ErrServerClosed <span class="token punctuation">&#123;</span>
			<span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,e3,Ha,wP,a3,Pn,Rd,SP,TP,yd,hP,HP,Pd,MP,NP,wd,xP,jP,o3,tn,Sd,LP,AP,Td,BP,WP,hd,qP,FP,Hd,JP,GP,Md,IP,UP,p3,l3,c3,r3,Gt,It,Nd,zP,u3,z,ZP,xd,QP,$P,jd,KP,VP,Ld,XP,YP,Ad,gP,nw,Bd,sw,tw,i3,d3,k3,Ma,ew,f3,Xe,wA=`<code class="language-go"><span class="token keyword">func</span> <span class="token function">RequestTimer</span><span class="token punctuation">(</span>h http<span class="token punctuation">.</span>Handler<span class="token punctuation">)</span> http<span class="token punctuation">.</span>Handler <span class="token punctuation">&#123;</span>
	<span class="token keyword">return</span> http<span class="token punctuation">.</span><span class="token function">HandlerFunc</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		start <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		h<span class="token punctuation">.</span><span class="token function">ServeHTTP</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> r<span class="token punctuation">)</span>
		end <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		log<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"request time for %s: %v"</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span>URL<span class="token punctuation">.</span>Path<span class="token punctuation">,</span> end<span class="token punctuation">.</span><span class="token function">Sub</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">var</span> securityMsg <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"You didn't give the secret password&#92;n"</span><span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">TerribleSecurityProvider</span><span class="token punctuation">(</span>password <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token keyword">func</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>Handler<span class="token punctuation">)</span> http<span class="token punctuation">.</span>Handler <span class="token punctuation">&#123;</span>
	<span class="token keyword">return</span> <span class="token keyword">func</span><span class="token punctuation">(</span>h http<span class="token punctuation">.</span>Handler<span class="token punctuation">)</span> http<span class="token punctuation">.</span>Handler <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> http<span class="token punctuation">.</span><span class="token function">HandlerFunc</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">if</span> r<span class="token punctuation">.</span>Header<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">"X-Secret-Password"</span><span class="token punctuation">)</span> <span class="token operator">!=</span> password <span class="token punctuation">&#123;</span>
				w<span class="token punctuation">.</span><span class="token function">WriteHeader</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusUnauthorized<span class="token punctuation">)</span>
				w<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>securityMsg<span class="token punctuation">)</span>
				<span class="token keyword">return</span>
			<span class="token punctuation">&#125;</span>
			h<span class="token punctuation">.</span><span class="token function">ServeHTTP</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> r<span class="token punctuation">)</span>
		<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,E3,Rs,aw,Wd,ow,pw,qd,lw,cw,v3,Ws,Fd,rw,uw,Jd,iw,dw,_3,m3,C3,Na,Gd,kw,O3,D3,b3,xa,fw,R3,Ye,SA=`<code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	terribleSecurity <span class="token operator">:=</span> <span class="token function">TerribleSecurityProvider</span><span class="token punctuation">(</span><span class="token string">"GOPHER"</span><span class="token punctuation">)</span>

	mux <span class="token operator">:=</span> http<span class="token punctuation">.</span><span class="token function">NewServeMux</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	mux<span class="token punctuation">.</span><span class="token function">Handle</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">,</span> http<span class="token punctuation">.</span><span class="token function">StripPrefix</span><span class="token punctuation">(</span><span class="token string">"/person"</span><span class="token punctuation">,</span> <span class="token function">terribleSecurity</span><span class="token punctuation">(</span><span class="token function">RequestTimer</span><span class="token punctuation">(</span>
		http<span class="token punctuation">.</span><span class="token function">HandlerFunc</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			w<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"Hello!&#92;n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
	<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

	s <span class="token operator">:=</span> http<span class="token punctuation">.</span>Server<span class="token punctuation">&#123;</span>
		Addr<span class="token punctuation">:</span>         <span class="token string">":8080"</span><span class="token punctuation">,</span>
		ReadTimeout<span class="token punctuation">:</span>  <span class="token number">3</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">,</span>
		WriteTimeout<span class="token punctuation">:</span> <span class="token number">5</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">,</span>
		IdleTimeout<span class="token punctuation">:</span>  <span class="token number">100</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">,</span>
		Handler<span class="token punctuation">:</span>      mux<span class="token punctuation">,</span>
	<span class="token punctuation">&#125;</span>

	err <span class="token operator">:=</span> s<span class="token punctuation">.</span><span class="token function">ListenAndServe</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">if</span> err <span class="token operator">!=</span> http<span class="token punctuation">.</span>ErrServerClosed <span class="token punctuation">&#123;</span>
			<span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,y3,Gn,Ew,Id,vw,_w,Ud,mw,Cw,zd,Ow,Dw,P3,qs,Zd,bw,Rw,Qd,yw,Pw,w3,ge,TA=`<code class="language-go">mux <span class="token operator">:=</span> http<span class="token punctuation">.</span><span class="token function">NewServeMux</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
mux<span class="token punctuation">.</span><span class="token function">HandleFunc</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	w<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"greetings!&#92;n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
wrappedMux <span class="token operator">:=</span> <span class="token function">terribleSecurity</span><span class="token punctuation">(</span><span class="token function">RequestTimer</span><span class="token punctuation">(</span>mux<span class="token punctuation">)</span><span class="token punctuation">)</span>

s <span class="token operator">:=</span> http<span class="token punctuation">.</span>Server<span class="token punctuation">&#123;</span>
	Addr<span class="token punctuation">:</span>         <span class="token string">":8080"</span><span class="token punctuation">,</span>
	ReadTimeout<span class="token punctuation">:</span>  <span class="token number">3</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">,</span>
	WriteTimeout<span class="token punctuation">:</span> <span class="token number">5</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">,</span>
	IdleTimeout<span class="token punctuation">:</span>  <span class="token number">100</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">,</span>
	Handler<span class="token punctuation">:</span>      wrappedMux<span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span></code>`,S3,T3,h3,H3,Ut,zt,$d,ww,M3,ja,Sw,N3,na,hA=`<code class="language-go">helloHandler <span class="token operator">:=</span> <span class="token keyword">func</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	w<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"Hello!&#92;n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
chain <span class="token operator">:=</span> alice<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>terribleSecurity<span class="token punctuation">,</span> RequestTimer<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ThenFunc</span><span class="token punctuation">(</span>helloHandler<span class="token punctuation">)</span>
mux<span class="token punctuation">.</span><span class="token function">handle</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">,</span> chain<span class="token punctuation">)</span></code>`,x3,j3,L3,ys,Tw,Kd,hw,Hw,Vd,Mw,Nw,A3,In,xw,sa,jw,Lw,Xd,Aw,Bw,Yd,Ww,qw,B3,W3,q3,F3,Zt,Qt,gd,Fw,J3,G3,I3,gn,nk,Jw,Gw,ta,Iw,Uw,zw,U3,z3,Z3,Q3;return ta=new SB({props:{alt:"Learning Go Book Cover",src:"https://learning.oreilly.com/covers/urn:orm:book:9781492077206/400w/"}}),{c(){ua=o("br"),ck=u(),ia=o("p"),dv=e("본 글은 Golang을 공부하며 주요 내용이라 생각되는 것들을 기록해둔 자료이며, Ubuntu 22.04 LTS 기준으로 작성되었습니다."),rk=u(),uk=o("br"),ik=o("br"),dk=u(),Vs=o("h2"),Xs=o("a"),Xa=o("span"),kv=e("Introduction"),kk=u(),fk=o("hr"),Ek=u(),Ys=o("p"),fv=e(`Go의 표준 라이브러리는 여러 장점이 있다.
Python의 라이브러리 철학인 `),Ya=o("em"),Ev=e("“batteries included”"),vv=e(` 처럼, 서비스를 빌드하기 위해 필요한 다양한 도구를 제공한다.
Go는 비교적 최신 언어인 만큼, 현대 프로그래밍 환경에서 직면하는 문제에 초점을 맞춘 라이브러리를 제공한다.`),vk=u(),w=o("p"),_v=e(`이 장에서 모든 표준 라이브러리 패키지들을 다룰 수 없고, 그럴 필요도 없다.
표준 라이브러리에 대한 다양한 정보들과 `),le=o("a"),mv=e("문서"),Cv=e(`가 있으니, 여기를 참조하면 될 것이다.
이 포스트에서는 몇 개의 가장 중요한 패키지, 그리고 이들의 디자인적인 측면이나 사용 방법을 알아볼 것이다.
`),ga=o("code"),Ov=e("errors"),Dv=e(", "),no=o("code"),bv=e("sync"),Rv=e(", "),so=o("code"),yv=e("context"),Pv=e(", "),to=o("code"),wv=e("testing"),Sv=e(", "),eo=o("code"),Tv=e("reflect"),hv=e(", "),ao=o("code"),Hv=e("unsafe"),Mv=e(` 등 패키지들은 각각의 챕터에서 집중적으로 다루었거나 다룰 예정이다.
이 챕터에서는 I/O, 시간, JSON, HTTP 등을 지원하는 패키지에 대해 알아볼 것이다.`),_k=u(),mk=o("br"),Ck=o("br"),Ok=u(),gs=o("h2"),nt=o("a"),oo=o("span"),Nv=e("io and Friends"),Dk=u(),bk=o("hr"),Rk=u(),on=o("p"),xv=e(`실용적인 프로그램을 데이터를 읽고 쓸 수 있어야 한다.
Go의 입/출력 철학은 `),po=o("code"),jv=e("io"),Lv=e(` 패키지에서 찾아볼 수 있다.
특히 이 패키지에 정의된 `),lo=o("code"),Av=e("io.Reader"),Bv=e("와 "),co=o("code"),Wv=e("io.Writer"),qv=e("는 각각 Go에서 두 번째, 세 번째로 많이 사용되는 인터페이스일 것이다. (첫 번째는 "),ro=o("code"),Fv=e("error"),Jv=e("이다)"),yk=u(),Pk=o("br"),wk=u(),js=o("p"),uo=o("code"),Gv=e("io.Reader"),Iv=e("와 "),io=o("code"),Uv=e("io.Writer"),zv=e("는 모두 한 개의 메소드를 정의한다."),Sk=u(),ce=o("pre"),Tk=u(),V=o("p"),ko=o("code"),Zv=e("io.Writer"),Qv=e("의 "),fo=o("code"),$v=e("Write()"),Kv=e(` 메소드는 바이트 덩어리를 파라미터로 받고, 바이트의 수와 에러 발생 여부를 반환한다.
`),Eo=o("code"),Vv=e("io.Reader"),Xv=e("의 "),vo=o("code"),Yv=e("Read()"),gv=e(` 메소드는 좀 더 신기하다.
리턴 파라미터로 값을 반환하기보다는 입력 파라미터로 보낸 값을 변경한다.
최대 `),_o=o("code"),n5=e("len(p)"),s5=e(" 바이트만큼의 데이터가 슬라이스에 쓰일 것이고, 기록된 바이트의 수와 에러 여부가 반환된다."),hk=u(),Hk=o("br"),Mk=u(),ps=o("p"),t5=e("사실 "),mo=o("code"),e5=e("io.Reader"),a5=e("의 "),Co=o("code"),o5=e("Read()"),p5=e(" 메소드는 아래와 같이 정의되는 것이 직관적일 것이다."),Nk=u(),re=o("pre"),xk=u(),ls=o("p"),l5=e("하지만 "),Oo=o("code"),c5=e("io.Reader"),r5=e(`가 기존 방식으로 정의되는 데에는 이유가 있다.
`),Do=o("code"),u5=e("io.Reader"),i5=e("를 사용하는 함수를 작성하여 이해해보도록 하자."),jk=u(),ue=o("pre"),Lk=u(),da=o("p"),d5=e("위 예제에서 주목할 점들이 있다."),Ak=u(),hn=o("ol"),bo=o("li"),X=o("p"),k5=e("버퍼를 한 번 생성하고 "),Ro=o("code"),f5=e("r.Read()"),E5=e(`를 호출할 때마다 재사용할 것이다.
이러한 방식을 쓰면 크기가 클 수도 있는 데이터에 대해 한 번의 메모리 할당으로 값을 읽어올 수 있다.
만약 `),yo=o("code"),v5=e("Read()"),_5=e(" 메소드가 "),Po=o("code"),m5=e("[]byte"),C5=e("를 리턴하게끔 작성되어 있다면, 매번 함수를 호출할 때마다 새롭게 메모리 할당을 할 것이고, 가비지 컬렉터가 할 일이 많아질 것이다."),O5=o("br"),D5=e(`
추후 이렇게 낭비적인 할당을 줄이고 싶다면, 프로그램이 실행될 때 버퍼 풀을 생성해 놓는 방법도 있다.
함수가 실행될 때 해당 버퍼 풀에서 버퍼를 가져와 사용하고, 끝나면 되돌려 놓는 식이다.
`),wo=o("code"),b5=e("io.Reader"),R5=e("에 slice를 보낼 수 있기 떄문에 메모리 할당을 개발자의 몫으로 남겨둘 수 있다."),y5=u(),So=o("li"),cs=o("p"),To=o("code"),P5=e("r.Read()"),w5=e("에서 반환된 "),ho=o("code"),S5=e("n"),T5=e(`값을 사용하여 버퍼에 바이트가 얼마나 많이 기록되었는지 확인하고,
`),Ho=o("code"),h5=e("buf"),H5=e(" slice의 subslice를 이터레이션하여 읽어온 데이터를 처리할 수 있다."),M5=u(),Mo=o("li"),Hn=o("p"),No=o("code"),N5=e("r.Read()"),x5=e("의 리턴 타입 중 error로 "),xo=o("code"),j5=e("io.EOF"),L5=e("를 반환한 경우("),jo=o("code"),A5=e("io.EOF"),B5=e(`는 실제로 에러가 아니다), 읽어올 데이터가 끝났음을 의미한다.
위 예제에서는 `),Lo=o("code"),W5=e("io.EOF"),q5=e("가 반환될 시 처리를 끝내고 결과물을 리턴한다."),F5=u(),Ao=o("li"),J=o("p"),Bo=o("code"),J5=e("io.Reader"),G5=e(`에는 특이사항이 있다. 대부분의 함수 또는 메소드에 error 리턴값이 있다면, 오류가 아닌 값을 처리하기 전에 에러를 먼저 확인할 것이다.
`),Wo=o("code"),I5=e("Read()"),U5=e("를 사용할때는 데이터 스트림의 끝 또는 예기치 않은 오류가 발생하기 전에 반환된 바이트가 있을 수 있기 떄문에 이와 반대로 한다."),z5=o("br"),Z5=e(`
만약 `),qo=o("code"),Q5=e("io.Reader"),$5=e("가 예상치 못하게 끝난다면 다른 종류의 sentinel error("),Fo=o("code"),K5=e("io.ErrUnexpectedEOF"),V5=e(`)가 반환될 것이다.
이처럼 예측하지 못한 상태를 나타내는 에러는 `),Jo=o("code"),X5=e("Err"),Y5=e("로 시작한다."),Bk=u(),Wk=o("br"),qk=u(),pn=o("p"),g5=e("이렇듯 "),Go=o("code"),n_=e("io.Reader"),s_=e("와 "),Io=o("code"),t_=e("io.Writer"),e_=e(` 인터페이스가 간단하기 때문에, 여러 가지 방법으로 충족시킬 수 있다.
`),Uo=o("code"),a_=e("strings.NewReader()"),o_=e(" 함수를 사용하여 문자열로부터 "),zo=o("code"),p_=e("io.Reader"),l_=e("를 생성시킬 수도 있다."),Fk=u(),ie=o("pre"),Jk=u(),mn=o("p"),Zo=o("code"),c_=e("countLetters"),r_=e(" 함수가 파라미터로 "),Qo=o("code"),u_=e("io.Reader"),i_=e("를 사용하므로, "),$o=o("code"),d_=e("countLetters"),k_=e(` 함수를 써서 gzip으로 압축된 영문자를 카운트할 수도 있다.
진짜 되는지 해보자. 먼저 파일명을 파라미터로 받아 `),Ko=o("code"),f_=e("*gzip.Reader"),E_=e("를 반환하는 함수를 작성해준다."),Gk=u(),de=o("pre"),Ik=u(),G=o("p"),v_=e(`함수의 구조가 그다지 어렵지는 않다.
먼저 `),Vo=o("code"),__=e("os.Open()"),m_=e(" 함수로 "),Xo=o("code"),C_=e("*os.File"),O_=e(` 인스턴스를 만들고 에러 검사를 한다.
그 후 `),Yo=o("code"),D_=e("gzip.NewReader()"),b_=e(" 함수를 호출하여 "),go=o("code"),R_=e("*gzip.Reader"),y_=e(` 인스턴스를 생성한다.
리턴 값들은 `),np=o("code"),P_=e("*gzip.Reader"),w_=e(" 인스턴스, 생성된 인스턴스들을 제거하는 closure, 그리고 에러 변수이다."),Uk=u(),Cn=o("p"),sp=o("code"),S_=e("*gzip.Reader"),T_=e(" 인스턴스는 "),tp=o("code"),h_=e("*strings.Reader"),H_=e("처럼 "),ep=o("code"),M_=e("io.Reader"),N_=e("를 충족시키기 때문에 "),ap=o("code"),x_=e("countLettters()"),j_=e(" 함수에서 사용할 수 있다."),zk=u(),ke=o("pre"),Zk=u(),Qk=o("br"),$k=u(),N=o("p"),L_=e("읽기/쓰기를 위한 표준 인터페이스가 있기 때문에, "),op=o("code"),A_=e("io.Reader"),B_=e("와 "),pp=o("code"),W_=e("io.Writer"),q_=e("에서 데이터를 복사하는 표준 함수 "),lp=o("code"),F_=e("io.Copy()"),J_=e("도 "),cp=o("code"),G_=e("io"),I_=e(` 패키지에 존재한다.
기존 `),rp=o("code"),U_=e("io.Reader"),z_=e("와 "),up=o("code"),Z_=e("io.Writer"),Q_=e("인스턴스에 새로운 기능을 추가하기 위한 다른 표준 함수들도 있다."),Kk=u(),rs=o("ul"),us=o("li"),ip=o("code"),$_=e("io.MultiReader"),K_=e(" : 여러 개의 "),dp=o("code"),V_=e("io.Reader"),X_=e(" 인스턴스로부터 잇따라 데이터를 읽을 수 있는 "),kp=o("code"),Y_=e("io.Reader"),g_=e(" 인스턴스를 반환한다."),n0=u(),st=o("li"),fp=o("code"),s0=e("io.LimitReader"),t0=e(" : 명시된 수 만큼의 바이트만 읽을 수 있는 "),Ep=o("code"),e0=e("io.Reader"),a0=e(" 인스턴스를 반환한다."),o0=u(),is=o("li"),vp=o("code"),p0=e("io.MultiWriter"),l0=e(" : 동시에 여러 "),_p=o("code"),c0=e("io.Writer"),r0=e("에 데이터를 쓸 수 있는 "),mp=o("code"),u0=e("io.Writer"),i0=e(" 인스턴스를 반환한다."),Vk=u(),ds=o("p"),d0=e("표준 라이브러리 내의 다른 패키지에서는 "),Cp=o("code"),k0=e("io.Reader"),f0=e("와 "),Op=o("code"),E0=e("io.Writer"),v0=e(`와 같이 사용할 수 있는 타입이나 함수들을 제공한다.
몇 개는 이미 봤지만 압축 알고리즘, 아카이브, 암호화, 버퍼, byte slice, 문자열 등 다양하게 제공하고 있다.`),Xk=u(),Yk=o("br"),gk=u(),Vn=o("p"),Dp=o("code"),_0=e("io"),m0=e(" 패키지에는 "),bp=o("code"),C0=e("io.Closer"),O0=e("나 "),Rp=o("code"),D0=e("io.Seeker"),b0=e("등, 또다른 단일 메소드 인터페이스가 있다."),nf=u(),fe=o("pre"),sf=u(),On=o("p"),yp=o("code"),R0=e("os.File"),y0=e("과 같이, 읽기나 쓰기가 끝나면 정리를 해줘야 하는 타입들은 "),Pp=o("code"),P0=e("io.Closer"),w0=e(`를 충족시킨다.
일반적으로 `),wp=o("code"),S0=e("Close()"),T0=e(" 메소드는 "),Sp=o("code"),h0=e("defer"),H0=e("를 통해 호출된다."),tf=u(),Ee=o("pre"),ef=u(),Mn=o("p"),M0=e("만약 리소스를 반복문 내에서 여는 경우, "),Tp=o("code"),N0=e("defer"),x0=e(`를 이용하지 않는 것이 좋다.
반복문 내에서 열린 리소스는 이터레이션의 끝에서 닫아주는 게 좋겠지만, `),hp=o("code"),j0=e("defer"),L0=e(`는 함수가 끝날 때 실행된다.
따라서 이터레이션의 끝 부분이나 함수가 끝날 수도 있는 에러가 발생할 만한 부분에 `),Hp=o("code"),A0=e("Close()"),B0=e("를 호출해 주는 게 좋다."),af=u(),H=o("p"),Mp=o("code"),W0=e("io.Seeker"),q0=e(` 인터페이스는 리소스에 임의 접근(random access) 하기 위해 사용된다.
이 때 파라미터 `),Np=o("code"),F0=e("whence"),J0=e("에 유효한 값은 상수 "),xp=o("code"),G0=e("io.SeekStart"),I0=e(", "),jp=o("code"),U0=e("io.SeekCurrent"),z0=e(", "),Lp=o("code"),Z0=e("io.SeekEnd"),Q0=e(`이다.
사실 이건 제작자 실수인게, `),Ap=o("code"),$0=e("whence"),K0=e("는 타입을 새로 생성하여 명확히 해줬어야 하는데 "),Bp=o("code"),V0=e("whence"),X0=e("는 int 타입이다."),of=u(),pf=o("br"),lf=u(),v=o("p"),Wp=o("code"),Y0=e("io"),g0=e(" 패키지는 앞서 보았던 "),qp=o("code"),n6=e("io.Reader"),s6=e(", "),Fp=o("code"),t6=e("io.Writer"),e6=e(", "),Jp=o("code"),a6=e("io.Closer"),o6=e(", "),Gp=o("code"),p6=e("io.Seeker"),l6=e(`, 이렇게 네 개의 인터페이스를 여러 방식으로 합친 인터페이스를 정의한다.
`),Ip=o("code"),c6=e("io.ReadCloser"),r6=e(", "),Up=o("code"),u6=e("io.ReadSeeker"),i6=e(", "),zp=o("code"),d6=e("io.ReadWriteCloser"),k6=e(", "),Zp=o("code"),f6=e("io.ReadWriteSeeker"),E6=e(", "),Qp=o("code"),v6=e("io.ReadWriter"),_6=e(", "),$p=o("code"),m6=e("io.WriteCloser"),C6=e(", "),Kp=o("code"),O6=e("io.WriteSeeker"),D6=e(` 등이 있다.
이런 인터페이스들은 함수가 데이터에 대해 어떤 프로세스를 하는지 정확히 명시하기 위해 사용된다.`),cf=u(),tt=o("p"),b6=e("이를테면 파라미터의 타입으로 "),Vp=o("code"),R6=e("os.File"),y6=e(`를 써주는 것보다는, 그 파라미터를 가지고 뭘 할건지 명시하기 위헤 인터페이스를 사용하는 것이 좋다.
또한 자체 데이터 소스나 싱크를 작성하는 경우, 코드가 이러한 인터페이스와 호환되도록 하는 것이 좋다.`),rf=u(),b=o("p"),Xp=o("code"),P6=e("ioutil"),w6=e(" 패키지는 "),Yp=o("code"),S6=e("io.Reader"),T6=e(` 인스턴스에 대한 다양한 도구들을 제공한다.
byte slice로 한 번에 읽기, 파일 읽기 및 쓰기, 임시 파일 작업 등 보다 간단한 도구들이 포함된다.
이를테면 `),gp=o("code"),h6=e("io.Reader"),H6=e(", "),nl=o("code"),M6=e("io.Writer"),N6=e(", "),sl=o("code"),x6=e("bufio.Scanner"),j6=e(` 등은 크기가 큰 데이터를 처리하는데 용이한 편이지만,
`),tl=o("code"),L6=e("ioutil.ReadAll"),A6=e(", "),el=o("code"),B6=e("ioutil.ReadFile"),W6=e(", "),al=o("code"),q6=e("ioutil.WriteFile"),F6=e("은 보다 작은 데이터를 처리하는데 유용하다."),uf=u(),R=o("p"),ol=o("code"),J6=e("ioutil"),G6=e(` 패키지에는 유용한 함수들이 더 있다.
가령 `),pl=o("code"),I6=e("io.Reader"),U6=e("는 충족하지만 "),ll=o("code"),z6=e("io.Closer"),Z6=e("는 충족하지 않는 인스턴스("),cl=o("code"),Q6=e("strings.Reader"),$6=e(` 등)가 있고,
이를 `),rl=o("code"),K6=e("io.ReadCloser"),V6=e(`를 파라미터로 받는 함수에 넘겨야 한다고 가정해보자.
이 때 `),ul=o("code"),X6=e("io.Reader"),Y6=e("를 "),il=o("code"),g6=e("ioutil.NopCloser()"),n9=e(" 함수로 보내면 "),dl=o("code"),s9=e("io.ReadCloser()"),t9=e(" 타입을 반환할 것이고, 이걸 해당 함수의 파라미터로 넘기면 된다."),df=u(),et=o("p"),e9=e("실제로 "),kl=o("code"),a9=e("ioutil.NopCloser()"),o9=e("의 구현을 들여다보면 생각보다 단순하다."),kf=u(),ve=o("pre"),ff=u(),ka=o("p"),p9=e(`위 구현을 보면 Go에서 타입에 메소드를 추가하는 패턴을 확인할 수 있다.
인터페이스를 충족할 수 있게끔 타입에 메소드를 추가해주고 싶다면, 이렇게 Embedded type 패턴을 사용해주면 된다.`),Ef=u(),fa=o("blockquote"),_e=o("p"),l9=e(`함수에서 인터페이스를 리턴하지 않는다는 규칙이 기억날 것이다.
`),fl=o("code"),c9=e("ioutil.NopCloser()"),r9=e(` 함수는 이를 위반하긴 한다.
하지만 표준 라이브러리에 속하는 인터페이스끼리의 변환을 해주는 간단한 어댑터 역할만 하기 때문에 예외로 두고 넘어가 주자.`),vf=u(),_f=o("br"),mf=o("br"),Cf=u(),at=o("h2"),ot=o("a"),El=o("span"),u9=e("time"),Of=u(),Df=o("hr"),bf=u(),Nn=o("p"),i9=e("다른 언어들처럼 Go에도 시간 연산을 하는 라이브러리인 "),vl=o("code"),d9=e("time"),k9=e(` 패키지가 있다.
시간을 나타내는 주요 타입이 두 가지 있는데, 바로 `),_l=o("code"),f9=e("time.Duration"),E9=e("과 "),ml=o("code"),v9=e("time.Time"),_9=e("이다."),Rf=u(),ln=o("p"),m9=e("시각 사이의 시간은 "),Cl=o("code"),C9=e("time.Duration"),O9=e("으로 표현되며, 이는 "),Ol=o("code"),D9=e("int64"),b9=e(` 기반이다.
Go의 시간 최소단위는 나노초(ns)이고, `),Dl=o("code"),R9=e("time"),y9=e(" 패키지에서는 "),bl=o("code"),P9=e("time.Duration"),w9=e(` 타입의
나노초(nanosecond), 마이크로초(microsecond), 밀리초(milisecond), 초(second), 분(minute), 시간(hour) 상수를 정의한다.`),yf=u(),Ea=o("p"),S9=e("예를 들어, 2시간 30분은 아래와 같이 정의한다."),Pf=u(),me=o("pre"),wf=u(),pt=o("p"),T9=e("이러한 상수들을 사용하면 "),Rl=o("code"),h9=e("time.Duration"),H9=e(" 타입을 readable하고 type-safe하게 만들어준다."),Sf=u(),Tf=o("br"),hf=u(),xn=o("p"),M9=e("Go는 "),yl=o("code"),N9=e("time,ParseDuration()"),x9=e(" 함수에 특정한 스트링 포맷이나 숫자들의 배열을 넘겨서 "),Pl=o("code"),j9=e("time.Duration"),L9=e(` 타입으로 파싱할 수 있다.
이에 대한 설명은 `),Ce=o("a"),A9=e("표준 라이브러리 문서"),B9=e(`에 작성되어 있다.
아래 내용은 원문인데, 번역하는 것보다 영어로 읽는게 더 편할것 같아서 따로 번역하지는 않았다.`),Hf=u(),va=o("blockquote"),wl=o("p"),W9=e(`A duration string is a possibly signed sequence of decimal numbers,
each with optional fraction and a unit suffix, such as “300ms”, “-1.5h” or “2h45m”.
Valid time units are “ns”, “us” (or “µs”), “ms”, “s”, “m”, “h”.`),Mf=u(),y=o("p"),Sl=o("code"),q9=e("time.Duration"),F9=e("에는 여러 가지 메소드들이 정의되어 있고, "),Tl=o("code"),J9=e("fmt.Stringer"),G9=e(` 인터페이스를 충족시킨다.
따라서 `),hl=o("code"),I9=e("fmt.Stringer"),U9=e("에 정의된 "),Hl=o("code"),z9=e("String()"),Z9=e(` 메소드를 호출하면 formatted string을 반환받는다.
또한 `),Ml=o("code"),Q9=e("Truncate"),$9=e("나 "),Nl=o("code"),K9=e("Round"),V9=e(" 메소드를 쓰면 "),xl=o("code"),X9=e("time.Duration"),Y9=e("을 지정된 "),jl=o("code"),g9=e("time.Duration"),n4=e(" 단위만큼 반올림하거나 자른다."),Nf=u(),xf=o("br"),jf=u(),jn=o("p"),s4=e("특정한 시각의 경우 "),Ll=o("code"),t4=e("time.Time"),e4=e(` 타입으로 표현되는데, 시간대(time zone)를 명시해 주어야 한다.
또한 `),Al=o("code"),a4=e("Time.Now()"),o4=e(" 함수로 현재 로컬 시간인 "),Bl=o("code"),p4=e("time.Time()"),l4=e(" 인스턴스를 얻을 수 있다."),Lf=u(),Dn=o("p"),Wl=o("code"),c4=e("time.Time"),r4=e(` 인스턴스는 시간대에 대한 정보까지 포함하기 때문에,
두 개의 `),ql=o("code"),u4=e("time.Time"),i4=e(" 인스턴스가 같은 시간대를 나타내더라도 "),Fl=o("code"),d4=e("=="),k4=e(` 연산자를 사용하면 제대로 된 결과가 나타나지 않을 수 있다.
`),Jl=o("code"),f4=e("Equal()"),E4=e(" 메소드를 사용하면, 표준 시간대를 기준으로 비교해준다."),Af=u(),L=o("p"),Gl=o("code"),v4=e("time.Parse()"),_4=e(" 함수는 "),Il=o("code"),m4=e("string"),C4=e("을 "),Ul=o("code"),O4=e("time.Time"),D4=e(" 타입으로 변환해주고, "),zl=o("code"),b4=e("Format()"),R4=e(" 메소드는 "),Zl=o("code"),y4=e("time.Time"),P4=e(" 타입을 "),Ql=o("code"),w4=e("string"),S4=e("으로 변환해준다."),Bf=u(),Oe=o("pre"),Wf=u(),_a=o("p"),T4=e("출력 결과는 다음과 같다."),qf=u(),De=o("pre"),Ff=u(),lt=o("p"),h4=e(`이러한 날짜나 시간 포맷은 유용하게 사용되게끔 의도되었지만, 기억하기 힘들기 때문에 사용하려 할 때마다 찾아봐야 한다는 단점이 있다.
다행히도 주로 사용되는 날짜 및 시각 포맷은 `),$l=o("code"),H4=e("time"),M4=e(" 패키지에서 상수로 주어진다."),Jf=u(),k=o("p"),Kl=o("code"),N4=e("time.Duration"),x4=e("처럼, "),Vl=o("code"),j4=e("time.Time"),L4=e("에도 "),Xl=o("code"),A4=e("Day"),B4=e(", "),Yl=o("code"),W4=e("Month"),q4=e(", "),gl=o("code"),F4=e("Year"),J4=e(", "),nc=o("code"),G4=e("Hour"),I4=e(", "),sc=o("code"),U4=e("Minute"),z4=e(", "),tc=o("code"),Z4=e("Second"),Q4=e(", "),ec=o("code"),$4=e("Weekday"),K4=e(", "),ac=o("code"),V4=e("Clock"),X4=e(` 등 시각의 일부분을 추출할 수 있는 메소드가 존재한다.
이 중 `),oc=o("code"),Y4=e("Clock()"),g4=e(" 메소드는 시, 분, 초를 각각의 "),pc=o("code"),n8=e("int"),s8=e("로 반환하고, "),lc=o("code"),t8=e("Date()"),e8=e("는 연, 월, 일을 각각의 "),cc=o("code"),a8=e("int"),o8=e(`로 반환한다.
또한 `),rc=o("code"),p8=e("time.Time"),l8=e(" 인스턴스는 "),uc=o("code"),c8=e("After"),r8=e(", "),ic=o("code"),u8=e("Before"),i8=e(", "),dc=o("code"),d8=e("Equal"),k8=e(" 메소드를 통해 다른 인스턴스와 비교할 수 있다."),Gf=u(),E=o("p"),kc=o("code"),f8=e("time.Time"),E8=e("의 "),fc=o("code"),v8=e("Sub()"),_8=e(" 메소드는 두 시각 사이의 경과 시간을 "),Ec=o("code"),m8=e("time.Duration"),C8=e(`으로 반환하며,
`),vc=o("code"),O8=e("time.Time"),D8=e("의 "),_c=o("code"),b8=e("Add()"),R8=e(" 메소드는 "),mc=o("code"),y8=e("time.Duration"),P8=e("을 파라미터로 받아 해당 시간만큼 더해진 시각의 "),Cc=o("code"),w8=e("time.Time"),S8=e(` 인스턴스를 반환한다.
`),Oc=o("code"),T8=e("time.Time"),h8=e("의 "),Dc=o("code"),H8=e("AddDate()"),M8=e(" 메소드는 연, 월, 일을 각각 입력받아 그만큼 더해진 날짜의 "),bc=o("code"),N8=e("time.Time"),x8=e(` 인스턴스를 반환한다.
`),Rc=o("code"),j8=e("time.Duration"),L8=e(" 인스턴스를 인자로 주고, 앞서 언급한 "),yc=o("code"),A8=e("Truncate()"),B8=e("와 "),Pc=o("code"),W8=e("Round()"),q8=e(" 메소드를 사용할 수도 있다."),If=u(),ks=o("p"),F8=e("이러한 메소드들은 모두 "),wc=o("em"),J8=e("value receiver"),G8=e("로 정의되었기 때문에, 원래의 "),Sc=o("code"),I8=e("time.Time"),U8=e(" 인스턴스를 변경하지 않는다."),Uf=u(),zf=o("br"),Zf=o("br"),Qf=u(),ct=o("h3"),rt=o("a"),Tc=o("span"),z8=e("Monotonic Time"),$f=u(),fs=o("p"),Z8=e(`대부분의 OS에서는 두 종류의 시각을 기록하고 있다.
그중 `),hc=o("em"),Q8=e("wall clock"),$8=e("은 말 그대로 현재 시각에 대응하는 것이며, "),Hc=o("em"),K8=e("monotonic clock"),V8=e(`은 컴퓨터가 켜진 시각으로부터 얼마만큼 시간이 흘렀는지를 의미한다.
두 종류의 시각을 기록하는 이유는, wall clock이 일정하게 증가하는 것이 아니기 때문이다.
서머타임(Daylight Saving Time), 윤초(leap seconds), Network Time Protocol의 업데이트로 인해 wall clock에는 오차가 생길 수 있으며,
이로 인해 타이머를 실행하거나 경과된 시간을 얻고자 할 때 문제가 생길 수 있다.`),Kf=u(),S=o("p"),X8=e("이러한 잠재적인 문제점을 해결하기 위해, Go에서는 "),Mc=o("code"),Y8=e("time.Now()"),g8=e("로 "),Nc=o("code"),nm=e("time.Time"),sm=e(` 인스턴스가 생성되거나 타이머가 설정될 때
monotonic time을 사용하여 경과 시간을 추적한다.
`),xc=o("code"),tm=e("Sub()"),em=e(" 메소드는 두 "),jc=o("code"),am=e("time.Time"),om=e(" 인스턴스가 모두 monotonic time이 설정된 경우, monotonic time을 이용하여 "),Lc=o("code"),pm=e("time.Duration"),lm=e(`을 계산한다.
만약 그렇지 않다면 `),Ac=o("code"),cm=e("Sub()"),rm=e(" 메소드는 인스턴스에 지정된 시간을 사용하여 "),Bc=o("code"),um=e("time.Duration"),im=e("을 계산한다."),Vf=u(),Xf=o("br"),Yf=o("br"),gf=u(),ut=o("h3"),it=o("a"),Wc=o("span"),dm=e("Timers and Timeout"),n1=u(),cn=o("p"),km=e("앞선 포스트에서 다루었듯, "),qc=o("code"),fm=e("time"),Em=e(` 패키지에는 채널을 리턴하여 일정 시간이 지난 후 값이 출력되는 함수가 내장되어 있다.
`),Fc=o("code"),vm=e("time.After()"),_m=e(` 함수는 일정 시간이 지나면 값이 단 한번 출력되는 채널을 리턴한다.
반면 `),Jc=o("code"),mm=e("time.Tick()"),Cm=e(" 함수에서 리턴되는 채널은 파라미터로 넘어온 "),Gc=o("code"),Om=e("time.Duration"),Dm=e(` 만큼의 시간이 흐를 때마다 값이 출력된다.
이러한 함수들은 시간 초과 및 반복 작업을 가능하게 함으로써 Go의 동시성을 지원한다.`),s1=u(),Es=o("p"),bm=e("다만 "),Ic=o("code"),Rm=e("Time.Tick()"),ym=e(` 함수는 멈출 수 없고, 따라서 가비지 컬렉터에 의해 정리되지도 않는다.
그래서 `),Uc=o("code"),Pm=e("Time.NewTicker()"),wm=e("를 사용하는데 이 함수는 채널을 닫거나 간격을 재설정하는 메소드를 함께 제공하니, 되도록 이 쪽을 선택하는 게 좋을 것 같다."),t1=u(),ma=o("p"),Sm=e("위 함수들을 사용하는 예제가 따로 없길래 대충 짜보았다."),e1=u(),be=o("pre"),a1=u(),o1=o("br"),p1=o("br"),l1=u(),dt=o("h2"),kt=o("a"),zc=o("span"),Tm=e("encoding/json"),c1=u(),r1=o("hr"),u1=u(),vs=o("p"),hm=e(`REST API는 JSON을 주고받는 통신을 한다. 따라서 Go의 표준 라이브러리는 JSON과 Go 데이터 타입의 상호 변환을 지원한다.
`),Zc=o("em"),Hm=e("marshaling"),Mm=e("이란 Go 데이터 타입에서 인코딩된 JSON으로 변환하는 것을 의미하며, "),Qc=o("em"),Nm=e("unmarshaling"),xm=e("이란 그 반대를 의미한다."),i1=u(),d1=o("br"),k1=o("br"),f1=u(),ft=o("h3"),Et=o("a"),$c=o("span"),jm=e("Use Struct Tags to Add Metadata"),E1=u(),Ca=o("p"),Lm=e("우리가 주문 관리 시스템을 만들고 있다고 가정하고, 아래 JSON 파일을 확인해보자."),v1=u(),Re=o("pre"),_1=u(),Oa=o("p"),Am=e("이제 이 타입과 대응되는 타입을 정의해 보자."),m1=u(),ye=o("pre"),C1=u(),_s=o("p"),Bm=e(`JSON으로 변환되는 struct임을 명시하기 위해서는 구조체에 필드를 입력해준 뒤 struct tag를 입력해줘야 한다.
struct tag는 backtick(`),Kc=o("code"),Wm=e("`"),qm=e(`)으로 문자열을 감싸는 구조이지만, 한 줄 이상 이어서 작성할 수 없다.
struct tag는 한 개 이상의 tag/value 쌍으로 이루어져 있으며, `),Vc=o("code"),Fm=e('tagName: "tagValue"'),Jm=e("의 구조로 작성되며 공백으로 구분한다."),O1=u(),ms=o("p"),Gm=e(`struct tag는 그냥 문자열이기 때문에, 컴파일러는 얘네가 제대로 작성되어 있는지 알 수가 없다.
다만 `),Xc=o("code"),Im=e("go vet"),Um=e(` 명령어를 치면 검증할 수 있으며, 이러한 모든 필드들은 export된다.
다른 패키지와 마찬가지로, `),Yc=o("code"),zm=e("encoding/json"),Zm=e(" 패키지의 코드들은 구조체의 export되지 않은 필드에 접근할 수 없다."),D1=u(),Cs=o("p"),Qm=e("JSON을 처리하기 위해서는 태그명을 "),gc=o("code"),$m=e("json"),Km=e(`으로 지어서 구조체 필드와 연결되어야 하는 JSON 필드의 이름을 지정해주어야 한다.
만약 `),nr=o("code"),Vm=e("json"),Xm=e(` 태그를 지정하지 않으면 기본적으로 JSON 객체의 필드명과 구조체의 필드명을 매칭시킨다.
하지만 실제로는 필드명이 같다고 하더라도 struct tag를 명시해주는 것이 좋다.`),b1=u(),Ln=o("p"),Ym=e("JSON을 구조체로 "),sr=o("em"),gm=e("unmarshaling"),n7=e("할 때 "),tr=o("code"),s7=e("json"),t7=e(` 태그가 명시되어있지 않으면, 필드가 매칭될때 대소문자를 구분하지 않는다.
반대로 구조체를 JSON으로 `),er=o("em"),e7=e("marshaling"),a7=e("할 때 구조체 필드가 export되려면 첫 글자가 대문자일 수 밖에 없기 때문에, JSON 태그도 항상 대문자가 된다."),R1=u(),rn=o("p"),o7=e("만약 "),ar=o("em"),p7=e("marshaling"),l7=e(" 또는 "),or=o("em"),c7=e("unmarshaling"),r7=e("을 할 때 무시해야 하는 필드가 있다면 필드명으로 대시("),pr=o("code"),u7=e("-"),i7=e(`)를 써주면 된다.
만약 필드가 비어있을 때 출력에서 제외되어야 하는 경우, 이름 뒤에 `),lr=o("code"),d7=e(",omitempty"),k7=e(`를 추가한다.
이 때 필드가 비어있다는 것은 Zero value를 의미하는 것이 아니라, zero-length slice나 map 등이 이에 해당한다.`),y1=u(),Os=o("p"),f7=e(`struct tag는 메타데이터를 사용하여 프로그램의 행동을 제어할 수 있게 해준다.
Java와 같은 다른 언어에서는 개발자들이 프로그램 요소에 주석을 달아
프로그램이 `),cr=o("em"),E7=e("어떤"),v7=e(" 처리를 하는 것에 대해 기술하는 것보다는 "),rr=o("em"),_7=e("어떻게"),m7=e(" 처리되어야 할지 설명하도록 장려한다."),P1=u(),Da=o("p"),C7=e(`Java에서 주석을 달던 사람들은 무언가 잘못됐을 때, 특히 어떤 코드가 주석이 달려있음에도 어떤 역할을 하는지 이해하지 못할 때 당황하는 경향이 있다.
Go에서는 짧은 코드보단 명시적인 코드를 좋아한다.
struct tag는 자동으로 evaluate되지 않으며, 구조체 인스턴스가 함수로 전달될 때 처리된다.`),w1=u(),S1=o("br"),T1=o("br"),h1=u(),vt=o("h3"),_t=o("a"),ur=o("span"),O7=e("Unmarshaling and Marshaling"),H1=u(),M1=o("hr"),N1=u(),P=o("p"),ir=o("code"),D7=e("encoding/json"),b7=e(" 패키지의 "),dr=o("code"),R7=e("json.Unmarshal()"),y7=e(" 함수는 "),kr=o("code"),P7=e("byte"),w7=e("의 "),fr=o("code"),S7=e("slice"),T7=e("를 "),Er=o("code"),h7=e("struct"),H7=e(`로 변환해준다.
아래 예제는 `),vr=o("code"),M7=e("data"),N7=e("라는 문자열 변수를 "),_r=o("code"),x7=e("struct"),j7=e("를 위에서 확인한 "),mr=o("code"),L7=e("Order"),A7=e(" 구조체 타입으로 변환하는 예제이다."),x1=u(),Pe=o("pre"),j1=u(),Ls=o("p"),Cr=o("code"),B7=e("json.Unmarshal()"),W7=e(" 함수는 "),Or=o("code"),q7=e("io.Reader"),F7=e(`처럼 데이터를 입력 파라미터에 생성한다.
이는 두 가지 이유가 있는데, 첫 번째는 쉽게 예상할 수 있듯 동일한 구조체를 재사용하여 효율적으로 메모리를 사용할 수 때문이다.
두 번째는 달리 다른 방법이 없기 때문이다.
Go에는 제네릭이 없기 때문에, 인스턴스로 만들 구조체의 타입을 지정할 방법이 달리 없다.
만약 Go에도 제네릭이 생긴다 해도, 메모리 사용의 이점때문에 이 방식이 그대로 사용되리라 예상된다.`),L1=u(),A1=o("br"),B1=u(),un=o("p"),Dr=o("code"),J7=e("encoding/json"),G7=e(" 패키지의 "),br=o("code"),I7=e("json.Marshal()"),U7=e(" 함수는 구조체 인스턴스를 다시 "),Rr=o("code"),z7=e("byte"),Z7=e("의 "),yr=o("code"),Q7=e("slice"),$7=e(`인 JSON으로 변환해준다.
`),Pr=o("code"),K7=e("json.Marshal()"),W1=u(),we=o("pre"),q1=u(),F1=o("br"),J1=o("br"),G1=u(),mt=o("h3"),Ct=o("a"),wr=o("span"),V7=e("JSON, Readers, and Writers"),I1=u(),_=o("p"),Sr=o("code"),X7=e("json.Marshal()"),Y7=e("와 "),Tr=o("code"),g7=e("json.Unmarshal()"),nC=e(" 함수는 "),hr=o("code"),sC=e("[]byte"),tC=e(`를 사용한다.
또한 대부분의 데이터 소스와 싱크가 `),Hr=o("code"),eC=e("io.Reader"),aC=e("와 "),Mr=o("code"),oC=e("io.Writer"),pC=e(` 인터페이스를 충족시키는 것을 알고 있다.
그래서 `),Nr=o("code"),lC=e("ioutil.ReadAll()"),cC=e("을 통해 "),xr=o("code"),rC=e("io.Reader"),uC=e("의 모든 내용을 "),jr=o("code"),iC=e("[]byte"),dC=e("에 저장하여 "),Lr=o("code"),kC=e("json.Unmarshal()"),fC=e(`을 사용할 수 있지만, 이 방식은 비효율적이다.
비슷하게 `),Ar=o("code"),EC=e("json.Marshal()"),vC=e(" 함수를 통해 인메모리 "),Br=o("code"),_C=e("[]byte"),mC=e(` 버퍼에 값을 쓰고, 해당 버퍼의 데이터를 네티워크나 디스크에 쓸 수 있다.
다만 그 경우 `),Wr=o("code"),CC=e("io.Writer"),OC=e("에 직접 데이터를 쓰는 편이 더 효율적일 것이다."),U1=u(),Y=o("p"),qr=o("code"),DC=e("encoding/json"),bC=e(` 이러한 상황을 다루기 위한 두 가지 타입을 포함하고 있다.
바로 `),Fr=o("code"),RC=e("json.Decoder"),yC=e("와 "),Jr=o("code"),PC=e("json.Encoder"),wC=e(" 타입이며, 이 타입들은 "),Gr=o("code"),SC=e("io.Reader"),TC=e(", "),Ir=o("code"),hC=e("io.Writer"),HC=e(` 인터페이스를 충족시키면서 읽기/쓰기를 할 수 있게 해준다.
간단한 예제를 확인해보자.`),z1=u(),Se=o("pre"),Z1=u(),Q1=o("br"),$1=u(),D=o("p"),Ur=o("code"),MC=e("os.File"),NC=e(" 타입은 "),zr=o("code"),xC=e("io.Writer"),jC=e("와 "),Zr=o("code"),LC=e("io.Reader"),AC=e(" 인터페이스를 모두 충족시키기 때문에, "),Qr=o("code"),BC=e("json.Decoder"),WC=e("와 "),$r=o("code"),qC=e("json.Encodeer"),FC=e(`를 시연하는 데 사용해보자.
먼저 임시 파일 인스턴스를 만들어 `),Kr=o("code"),JC=e("json.NewEncoder()"),GC=e(" 함수에 넘기면, 임시 파일에 대한 "),Vr=o("code"),IC=e("json.Encoder"),UC=e(` 인스턴스를 생성한다.
그 후 `),Xr=o("code"),zC=e("Encode()"),ZC=e(" 메소드를 호출할 때 "),Yr=o("code"),QC=e("toFile"),$C=e("을 넘기면 된다."),K1=u(),Te=o("pre"),V1=u(),X1=o("br"),Y1=u(),dn=o("p"),KC=e("이렇게 "),gr=o("code"),VC=e("toFile"),XC=e("을 임시 파일에 쓴 후 임시 파일을 다시 읽어들여서 "),nu=o("code"),YC=e("json.NewDecoder()"),gC=e(`로 보내고,
`),su=o("code"),nO=e("Decode()"),sO=e(" 메소드를 호출하여 "),tu=o("code"),tO=e("Person"),eO=e(" 타입의 변수로 불러올 것이다."),g1=u(),he=o("pre"),n2=u(),Ot=o("p"),aO=e("전체 예제는 "),He=o("a"),oO=e("여기"),pO=e("서 확인할 수 있다."),s2=u(),t2=o("br"),e2=o("br"),a2=u(),Dt=o("h3"),bt=o("a"),eu=o("span"),lO=e("Encoding and Decoding JSON Streams"),o2=u(),Ds=o("p"),cO=e(`여러 개의 JSON 구조체를 한 번에 읽거나 쓰려면 어떻게 해야 할까?
이런 상황에서도 `),au=o("code"),rO=e("json.Decoder"),uO=e("와 "),ou=o("code"),iO=e("json.Encoder"),dO=e("를 사용할 수 있다."),p2=u(),ba=o("p"),kO=e("아래와 같은 데이터가 있다고 해보자."),l2=u(),Me=o("pre"),c2=u(),Rt=o("p"),fO=e("우리의 예제에서 이 데이터는 "),pu=o("code"),EO=e("data"),vO=e(`라는 문자열로 저장되어 있다고 가정할 것이다.
다만 실제로 이 데이터는 파일이나 HTTP 요청의 데이터일 수도 있다.`),r2=u(),yt=o("p"),_O=e("이 데이터를 "),lu=o("code"),mO=e("t"),CO=e("라는 구조체의 타입의 인스턴스로 만들 것이다."),u2=u(),Ne=o("pre"),i2=u(),d2=o("br"),k2=u(),kn=o("p"),OO=e("이전처럼 "),cu=o("code"),DO=e("json.Decoder"),bO=e(`를 데이터 소스로 초기화할 것이다.
다만 이번에는 `),ru=o("code"),RO=e("json.Decoder"),yO=e("의 "),uu=o("code"),PO=e("More()"),wO=e(" 메소드를 "),iu=o("code"),SO=e("for"),TO=e(` 루프 조건으로 사용할 것이다.
이렇게 하면 한 번에 한 개의 JSON 객체를 데이터로 읽어올 수 있게 된다.`),f2=u(),xe=o("pre"),E2=u(),Pt=o("p"),hO=e(`이 예제의 데이터 스트림에는 배열로 감싸지지 않은 여러 개의 JSON 객체들이 있다.
이들을 메모리에 한 번에 로드하지 않고, 위 예제처럼 `),du=o("code"),HO=e("json.Decoder"),MO=e(`로 단일 객체를 한 개씩 읽으면
성능이 향상되고 메모리 사용량이 줄어든다는 장점이 있다.`),v2=u(),_2=o("br"),m2=u(),Xn=o("p"),ku=o("code"),NO=e("json.Encoder"),xO=e(`로 여러 개의 값을 쓰는 것은 한 개의 값을 쓰는 것과 유사하다.
예제에서는 `),fu=o("code"),jO=e("bytes.Buffer"),LO=e("에 값을 쓸 것이지만, "),Eu=o("code"),AO=e("io.Writer"),BO=e(" 인터페이스를 충족시킨다면 어느 타입이든 사용할 수 있다."),C2=u(),je=o("pre"),O2=u(),D2=o("br"),b2=o("br"),R2=u(),wt=o("h3"),St=o("a"),vu=o("span"),WO=e("Custon JSON Parsing"),y2=u(),An=o("p"),qO=e(`JSON 파싱 라이브러리의 기본적인 기능으로도 사용하는 데 문제는 없겠지만, 종종 오버라이드하여 사용해야할 때도 있을 것이다.
`),_u=o("code"),FO=e("time.Time"),JO=e(`은 RFC339 포맷은 기본적으로 JSON에서 RFC339 포맷을 사용하는데, 다른 시간 포맷을 사용해야 할 수도 있다.
그러한 경우 `),mu=o("code"),GO=e("json.Marshaler"),IO=e("와 "),Cu=o("code"),UO=e("json.Unmarshaler"),zO=e(" 인터페이스를 충족시키는 새로운 타입을 생성하면 된다."),P2=u(),Le=o("pre"),w2=u(),g=o("p"),Ou=o("code"),ZO=e("time.Time"),QO=e(" 구조체 타입을 "),Du=o("code"),$O=e("RFC822ZTime"),KO=e(" 타입에 Embedding하였기 때문에 기존 "),bu=o("code"),VO=e("time.Time"),XO=e(`의 메소드에 접근할 수 있다.
또한 value receiver로 선언된 `),Ru=o("code"),YO=e("MarshalJSON()"),gO=e(` 메소드에서는 시간 값을 읽기만 하지만,
pointer receiver로 선언된 `),yu=o("code"),nD=e("UnmarshalJSON()"),sD=e(" 메소드에서는 시간 값을 변경한다."),S2=u(),T2=o("br"),h2=u(),bs=o("p"),tD=e("이렇게 하여, 앞선 예제의 "),Pu=o("code"),eD=e("Order"),aD=e(" 타입의 "),wu=o("code"),oD=e("DateOrdered"),pD=e(" 필드를 RFC822 포맷으로 사용 가능하게끔 수정해주었다."),H2=u(),Ae=o("pre"),M2=u(),Tt=o("p"),lD=e("전체 예제는 "),Be=o("a"),cD=e("여기"),rD=e("서 확인할 수 있다."),N2=u(),x2=o("br"),j2=u(),I=o("p"),uD=e(`사실 이러한 방식에는 원칙적으로는 문제가 있다.
우리는 JSON에 작성된 날짜 포맷을 날짜 자료구조 필드값으로 변환하는데, 이는 `),Su=o("code"),iD=e("encoding/json"),dD=e(` 방식의 단점이다.
`),Tu=o("code"),kD=e("RFC822ZTime"),fD=e("가 아닌 "),hu=o("code"),ED=e("Order"),vD=e("타입이 "),Hu=o("code"),_D=e("json.Marshaler"),mD=e("나 "),Mu=o("code"),CD=e("json.Unmarshaler"),OD=e(` 인터페이스를 충족시키게끔 할 수도 있었을 것이다.
다만 그렇게 하면 모든 필드를 직접 처리하도록 코드를 작성해주어야 한다. 직접 처리할 필요가 없는 필드에 대해서도 말이다.
struct tag는 함수가 특정 필드만 파싱하도록 명시할 수 없기 때문에, 필드에 대한 타입을 직접 생성해주어야 하는 것이다.`),L2=u(),Ra=o("p"),DD=e(`JSON을 파싱하는 코드의 양을 제한하려면 두 개의 각기 다른 구조체를 정의해야 한다.
하나는 JSON으로 변환하거나 변환되는 것이며, 다른 하나는 데이터 처리에 관련된 것이다.
읽기를 할 때는 JSON을 JSON 인식 유형으로 읽은 다음, 이를 다른 유형으로 복사한다.
반면 JSON으로 쓰기를 하려면 이를 반대로 해주면 된다.
이 방식은 코드에 중복성이 생기기는 하지만, 비즈니스 로직이 통신 프로토콜에 의존하는 것을 방지해준다.`),A2=u(),Yn=o("p"),Nu=o("code"),bD=e("json.Marshal()"),RD=e("이나 "),xu=o("code"),yD=e("json.Unmarshal()"),PD=e(" 함수에 "),ju=o("code"),wD=e("map[string]interface{}"),SD=e(` 타입을 파라미터로 보낼 수도 있다.
다만 이는 JSON에 무엇이 저장되어 있는지 확인하는 용도로만 쓰고, 확인한 이후에는 concrete type으로 변환해주는 것이 좋다.
Go에서 타입은 그 자체로 처리할 데이터에 대한 문서 역할도 하니 말이다.`),B2=u(),ht=o("p"),TD=e(`Go의 표준 라이브러리는 JSON뿐만 아니라 XML, Base64 등, 다양한 인코더와 디코더를 제공한다.
만약 인코딩해야 할 데이터 포맷이 있는데 이를 지원하는 표준 또는 서드 파티 라이브러리를 찾을 수 없다면, 직접 작성해주어야 한다.
직접 작성하는 법은 `),Lu=o("em"),hD=e("Reflection"),HD=e("을 다루는 포스트에서 추후 다룰 예정이다."),W2=u(),ya=o("blockquote"),nn=o("p"),MD=e("표준 라이브러리 중 "),Au=o("code"),ND=e("encoding/gob"),xD=e(` 패키지는 Go의 바이너리 데이터 인코딩으로, Java의 serialization이랑 비슷하다.
Java serialization을 Java RMI나 Enterprise Java Beans에서 사용하는 것처럼,
`),Bu=o("code"),jD=e("gob"),LD=e(" 프로토콜은 Go의 RPC("),Wu=o("code"),AD=e("net/rpc"),BD=e(` 패키지)에서 사용하는 프로토콜이다.
다만 `),qu=o("code"),WD=e("encoding/gob"),qD=e("나 "),Fu=o("code"),FD=e("net/rpc"),JD=e(` 둘 다 사용하지 않는 것을 권장한다.
특정 언어에 구애되지 않는 gRPC라는 좋은 프로토콜이 있다.`),q2=u(),F2=o("br"),J2=o("br"),G2=u(),Ht=o("h2"),Mt=o("a"),Ju=o("span"),GD=e("net/http"),I2=u(),U2=o("hr"),z2=u(),Pa=o("p"),ID=e(`Go에는 HTTP/2 클라이언트 및 서버를 작성하는 표준 라이브러리가 있다.
클라이언트 및 서버의 코드 작성 예를 알아보자.`),Z2=u(),Q2=o("br"),$2=o("br"),K2=u(),Nt=o("h3"),xt=o("a"),Gu=o("span"),UD=e("The Client"),V2=u(),A=o("p"),Iu=o("code"),zD=e("net/http"),ZD=e(" 패키지에는 http request를 생성하고 http response를 받는, "),Uu=o("code"),QD=e("Client"),$D=e(` 타입이 정의되어 있다.
`),zu=o("code"),KD=e("net/http"),VD=e("에 정의된 가장 기본적인 클라이언트 인스턴스("),Zu=o("code"),XD=e("DefaultClient"),YD=e(`)가 있지만, 릴리즈될 어플리케이션에서는 이를 사용하지 않는 것이 좋다.
기본적으로 `),Qu=o("code"),gD=e("DefaultClient"),nb=e(`에는 타임아웃이 없다. 따라서 직접 인스턴스 하나를 생성해 주는 것이 좋다.
기억해야 할 점은 프로그램 전체에서 단 한 개의 `),$u=o("code"),sb=e("http.Client"),tb=e(` 인스턴스만 생성하면,
여러 개의 고루틴이 돌아간다고 해도 요청들을 충분히 처리할 수 있다는 것이다.`),X2=u(),We=o("pre"),Y2=u(),g2=o("br"),nE=u(),T=o("p"),eb=e("새로운 요청을 생성하려면 "),Ku=o("code"),ab=e("http.NewRequsetWithContext()"),ob=e(" 함수에 context, requset method, URL을 넘겨서 "),Vu=o("code"),pb=e("*http.Requset"),lb=e(` 인스턴스를 생성해준다.
만약 request method가 `),Xu=o("code"),cb=e("PUT"),rb=e(", "),Yu=o("code"),ub=e("POST"),ib=e(", "),gu=o("code"),db=e("PATCH"),kb=e("라면, 마지막 파라미터로 "),ni=o("code"),fb=e("io.Reader"),Eb=e(` 타입의 request body를 작성해줘야 한다.
만약 request body가 없다면, `),si=o("code"),vb=e("nil"),_b=e("을 쓰면 된다."),sE=u(),Bn=o("p"),mb=e("또한 이렇게 생성한 "),ti=o("code"),Cb=e("*http.Requset"),Ob=e(" 인스턴스의 "),ei=o("code"),Db=e("Header"),bb=e(` 필드의 메소드들을 호출하여 request header를 설정할 수 있다.
아래 예제에서는 `),ai=o("code"),Rb=e("Add()"),yb=e(" 메소드로 request header를 추가해주었다."),tE=u(),qe=o("pre"),eE=u(),aE=o("br"),oE=u(),bn=o("p"),oi=o("code"),Pb=e("*http.Requset"),wb=e(` 인스턴스의 설정을 마쳤다면, 이제 요청을 전송해보자.
`),pi=o("code"),Sb=e("http.Client"),Tb=e("의 "),li=o("code"),hb=e("Do()"),Hb=e(" 메소드를 호출하면 요청이 전송되고, 요청에 대한 응답에 해당하는 "),ci=o("code"),Mb=e("http.Response"),Nb=e(" 인스턴스를 리턴 값으로 받을 것이다."),pE=u(),Fe=o("pre"),lE=u(),cE=o("br"),rE=u(),h=o("p"),xb=e("이렇게 전송받은 "),ri=o("code"),jb=e("http.Response"),Lb=e(` 인스턴스의 필드값들은 요청에 대한 정보를 담고 있다.
response status code는 `),ui=o("code"),Ab=e("StatusCode"),Bb=e(" 필드에 저장되며, response status message는 "),ii=o("code"),Wb=e("Status"),qb=e(` 필드에 저장된다.
또한 response header는 `),di=o("code"),Fb=e("Header"),Jb=e(" 필드에, response body는 "),ki=o("code"),Gb=e("Body"),Ib=e(" 필드에 "),fi=o("code"),Ub=e("io.ReadCloser"),zb=e(` 타입으로 저장된다.
따라서 `),Ei=o("code"),Zb=e("json.Decoder"),Qb=e("를 이용해서 REST API 응답을 처리할 수 있다."),uE=u(),Je=o("pre"),iE=u(),wa=o("p"),$b=e("위 예제의 실행 결과는 다음과 같다."),dE=u(),Ge=o("pre"),kE=u(),fE=o("br"),EE=u(),Sa=o("blockquote"),fn=o("p"),vi=o("code"),Kb=e("net/http"),Vb=e(" 패키지에는 "),_i=o("code"),Xb=e("http.Get()"),Yb=e(", "),mi=o("code"),gb=e("http.Head()"),nR=e(", "),Ci=o("code"),sR=e("http.Post()"),tR=e(`등 요청을 보내는 함수가 있다.
이 함수들은 `),Oi=o("code"),eR=e("DefaultClient"),aR=e("로 요청을 보내기 때문에 사용하지 않는 것이 좋다(얘네 타임아웃이 없다)."),vE=u(),_E=o("br"),mE=o("br"),CE=u(),jt=o("h3"),Lt=o("a"),Di=o("span"),oR=e("The Server"),OE=u(),En=o("p"),pR=e("HTTP 서버는 "),bi=o("code"),lR=e("http.Server"),cR=e("와 "),Ri=o("code"),rR=e("http.Handler"),uR=e(` 인터페이스의 개념에 기반하여 구축한다.
`),yi=o("code"),iR=e("http.Client"),dR=e("는 http request를 전송하는 역할을 하듯, "),Pi=o("code"),kR=e("http.Server"),fR=e("는 TLS를 지원하며, http request를 핸들링하는 성능 좋은 HTTP/2 서버이다."),DE=u(),At=o("p"),ER=e("서버에 대한 요청은 "),wi=o("code"),vR=e("http.Handler"),_R=e(` 인터페이스를 충족시키는 타입에 의해 핸들링된다.
이 인터페이스는 단일 메소드를 정의한다.`),bE=u(),Ie=o("pre"),RE=u(),yE=o("br"),PE=u(),Rn=o("p"),Si=o("code"),mR=e("ServeHTTP()"),CR=e("의 파라미터 중 "),Ti=o("code"),OR=e("*http.Request"),DR=e("는 "),hi=o("code"),bR=e("http.Client"),RR=e(`로 요청을 보낼 때 사용했던 타입과 동일한 것이다.
`),Hi=o("code"),yR=e("http.ResponseWriter"),PR=e(" 인터페이스는 아래처럼 세 개의 메소드를 정의한다."),wE=u(),Ue=o("pre"),SE=u(),Ta=o("p"),wR=e("이 세 개의 메소드는 반드시 일정한 순서대로 호출된다."),TE=u(),Wn=o("p"),SR=e("가장 먼저 호출되는 것은 "),Mi=o("code"),TR=e("Header()"),hR=e("로, "),Ni=o("code"),HR=e("http.Header"),MR=e(` 인스턴스를 리턴받아서 response header를 설정하기 위해 사용된다.
특별히 response header를 설정할 필요가 없다면 `),xi=o("code"),NR=e("Header()"),xR=e("를 반드시 호출할 필요는 없다."),hE=u(),qn=o("p"),jR=e("그 다음으로는 response status code를 설정하기 위해 "),ji=o("code"),LR=e("WriteHeader()"),AR=e(`를 호출한다.
이때 모든 status code는 `),Li=o("code"),BR=e("net/http"),WR=e(`에 상수로 정의되어 있다.
(패키지 레벨에서 status code에 대한 특정한 타입이 정의되었으면 좋았을 텐데, 그렇지 않다.
실제로 status code들은 특별한 타입이 없는 그냥 정수형이다.)
만약 status code 200을 보내려고 한다면 `),Ai=o("code"),qR=e("WriteHeader()"),FR=e("를 굳이 호출해줄 필요는 없다."),HE=u(),Bt=o("p"),JR=e("마지막으로 "),Bi=o("code"),GR=e("Write()"),IR=e("를 호출하여, response body를 설정해준다."),ME=u(),NE=o("br"),xE=u(),ha=o("p"),UR=e("가장 기본적인 형태의 handler를 작성해보자."),jE=u(),ze=o("pre"),LE=u(),Wt=o("p"),zR=e("어차피 구조체의 필드는 그렇게 중요하지 않으니 비워 두었고, 필요한 "),Wi=o("code"),ZR=e("ServeHTTP()"),QR=e(" 메소드만 정의해 주었다."),AE=u(),BE=o("br"),WE=u(),qt=o("p"),$R=e("새로운 "),qi=o("code"),KR=e("http.Server"),VR=e(" 인스턴스를 생성하여, 서버를 열어보자."),qE=u(),Ze=o("pre"),FE=u(),As=o("p"),Fi=o("code"),XR=e("http.Server"),YR=e("의 "),Ji=o("code"),gR=e("Addr"),ny=e(` 필드는 서버가 열릴 호스트 주소와 포트를 지정한다.
따로 지정해주지 않으면 모든 호스트 주소에 대해 HTTP 표준 포트인 80으로 서버를 열 것이다.`),JE=u(),yn=o("p"),Gi=o("code"),sy=e("ReadTimeout"),ty=e(", "),Ii=o("code"),ey=e("WriteTimeout"),ay=e(", "),Ui=o("code"),oy=e("IdleTimeout"),py=e(" 필드는 서버의 읽기, 쓰기, 유휴 상태의 타임아웃을 "),zi=o("code"),ly=e("time.Duration"),cy=e(`값으로 명시할 수 있다.
기본적으로 타임아웃을 두지 않기 때문에, 이 필드를 지정해주지 않으면 잘못된 요청을 적절히 핸들링하지 못할 것이다.`),GE=u(),Bs=o("p"),Zi=o("code"),ry=e("Hander"),uy=e(" 필드에 "),Qi=o("code"),iy=e("http.Handler"),dy=e("를 충족시키는 타입을 지정해주면 된다."),IE=u(),UE=o("br"),zE=u(),x=o("p"),ky=e(`단일 종류의 요청만 받는 서버는 별로 쓸데가 없을 것이다.
Go 표준 라이브러리에는 요청 라우터인, `),$i=o("code"),fy=e("*http.ServeMux"),Ey=e(`를 포함하고 있다.
`),Ki=o("code"),vy=e("http.NewServerMux()"),_y=e(" 함수로 새로운 "),Vi=o("code"),my=e("*http.ServeMux"),Cy=e(` 인스턴스를 생성할 수 있으며,
이는 `),Xi=o("code"),Oy=e("http.Handler"),Dy=e(" 인터페이스를 충족시키기 때문에 "),Yi=o("code"),by=e("http.Server"),Ry=e("의 "),gi=o("code"),yy=e("Handler"),Py=e(" 필드에 할당될 수 있다."),ZE=u(),U=o("p"),wy=e("또한, "),nd=o("code"),Sy=e("*http.ServeMux"),Ty=e(`는 요청을 분류할 수 있는 두 개의 메소드를 포함하고 있다.
첫 번째 메소드는 두 개의 파라미터를 받는 `),sd=o("code"),hy=e("Handle()"),Hy=e("로, 두 개의 파라미터는 각각 주소 경로와 "),td=o("code"),My=e("http.Handler"),Ny=e(` 인스턴스이다.
만약 주소가 일치한다면 `),ed=o("code"),xy=e("http.Handler"),jy=e(`가 호출될 것이다.
또 다른 방법은 더 일반적으로 사용하는 `),ad=o("code"),Ly=e("HandleFunc()"),Ay=e(" 메소드이다."),QE=u(),Qe=o("pre"),$E=u(),Fn=o("p"),By=e("이 메소드에서 볼 수 있듯 파라미터로 주소 경로와, "),od=o("code"),Wy=e("http.Handler"),qy=e("의 "),pd=o("code"),Fy=e("ServeHTTP()"),Jy=e(`를 만족시키는 closure를 작성해 주었다.
해당 패턴은 인터페이스 포스트의 `),$e=o("a"),Gy=e("Function Types Are a Bridge to Interfaces"),Iy=e("에서 소개하였으니, 확인할 수 있다."),KE=u(),Ft=o("p"),Uy=e(`다만 핸들러가 다른 비즈니스 로직을 사용하여 더 복잡해질 경우, 구조체 타입에 메소드를 정의하여 사용해주는 것이 좋다.
이에 관련된 내용도 인터페이스 포스트의 `),Ke=o("a"),zy=e("Implicit Interfaces Make Dependency Injection Easier"),Zy=e("에서 소개하였다."),VE=u(),XE=o("br"),YE=u(),Jt=o("blockquote"),j=o("p"),ld=o("code"),Qy=e("net/http"),$y=e("에는 패키지 레벨 함수인 "),cd=o("code"),Ky=e("http.Handle"),Vy=e(", "),rd=o("code"),Xy=e("http.HandleFunc"),Yy=e(", "),ud=o("code"),gy=e("http.ListenAndServe"),nP=e(", "),id=o("code"),sP=e("http.ListenAndServeTLS"),tP=e(` 함수가 있으며,
이들은 `),dd=o("code"),eP=e("*http.ServeMux"),aP=e("의 패키지 레벨 인스턴스인 "),kd=o("code"),oP=e("http.DefaultServeMux"),pP=e(`를 기준으로 동작한다.
예상되겠지만, 이 함수들은 릴리즈될 어플리케이션에서는 사용이 권장되지 않는다.`),lP=u(),Jn=o("p"),fd=o("code"),cP=e("http.Server"),rP=e(" 인스턴스가 "),Ed=o("code"),uP=e("http.ListenAndServe"),iP=e("나 "),vd=o("code"),dP=e("http.ListenAndServeTLS"),kP=e(`에서 생성되기 때문에, 타임아웃과 같은 설정을 지정해줄 수 없다.
뿐만 아니라 서드 파티 라이브러리가 `),_d=o("code"),fP=e("http.DefaultServeMux"),EP=e(`에 자체 핸들러를 등록해버릴 수 있기 때문에,
모든 의존성들을 스캔하지 않고는 이를 알 수 없다.
어플리케이션이 shared state로 인해 통제되는 상황은 되도록 피해야 한다.`),gE=u(),n3=o("br"),s3=u(),sn=o("p"),md=o("code"),vP=e("*http.ServeMux"),_P=e("는 "),Cd=o("code"),mP=e("http.Handler"),CP=e("에 요청을 보내고 "),Od=o("code"),OP=e("http.Handler"),DP=e(` 인터페이스를 충족시키기 때문에,
여러 관련된 요청에 대한 `),Dd=o("code"),bP=e("*http.ServeMux"),RP=e(" 인스턴스를 생성하고, 부모 "),bd=o("code"),yP=e("*http.ServeMux"),PP=e("에 등록할 수 있다."),t3=u(),Ve=o("pre"),e3=u(),Ha=o("p"),wP=e("위 예제의 구조를 이해하는 것이 그렇게 어렵진 않을 것이다."),a3=u(),Pn=o("p"),Rd=o("code"),SP=e("/person/greet"),TP=e("로 요청을 보내면 "),yd=o("code"),hP=e("person"),HP=e(`에 붙어있는 핸들러로 처리되며,
`),Pd=o("code"),MP=e("/dog/greet"),NP=e("로 요청을 보내면 "),wd=o("code"),xP=e("dog"),jP=e("에 붙어있는 핸들러로 처리가 된다."),o3=u(),tn=o("p"),Sd=o("code"),LP=e("person"),AP=e("과 "),Td=o("code"),BP=e("dog"),WP=e("를 "),hd=o("code"),qP=e("mux"),FP=e("에 등록할 때 "),Hd=o("code"),JP=e("http.StripPrefix()"),GP=e(` 함수를 사용하여,
주소에서 `),Md=o("code"),IP=e("mux"),UP=e("에 의해 이미 처리된 부분을 제거해주었다."),p3=u(),l3=o("br"),c3=o("br"),r3=u(),Gt=o("h3"),It=o("a"),Nd=o("span"),zP=e("Middleware"),u3=u(),z=o("p"),ZP=e(`HTTP 서버의 또 다른 중요한 요소 중 하나는 로그인 여부 확인, 요청 시간 체크, 요청 헤더 체크 등 여러 동작을 수행하는 것이다.
Go에서는 이러한 연관된 기능들을 `),xd=o("em"),QP=e("미들웨어"),$P=e(`를 사용하여 구현한다.
미들웨어는 특별한 타입을 사용하지 않고, `),jd=o("code"),KP=e("http.Handler"),VP=e("를 파라미터로 받아 "),Ld=o("code"),XP=e("http.Handler"),YP=e(`를 반환하는 함수를 작성하여 사용한다.
대개 반환된 `),Ad=o("code"),gP=e("http.Handler"),nw=e("는 "),Bd=o("code"),sw=e("http.HandlerFunc"),tw=e("로 반환될 수 있는 closure가 된다."),i3=u(),d3=o("br"),k3=u(),Ma=o("p"),ew=e(`아래 예제에는 두 개의 미들웨어 생성기가 있다.
하나는 요청의 시간을 재는 것이고, 또 하나는 액세스 제어의 나쁜 예라고 할 수 있다.`),f3=u(),Xe=o("pre"),E3=u(),Rs=o("p"),aw=e(`이 두 개의 미들웨어 구현을 보면 미들웨어가 무슨 역할을 하는지 알 수 있을 것이다.
먼저 연산이나 조건 검사를 하기 위한 셋업을 한 후,
조건을 만족하지 않으면 보통 미들웨어에서 error status code와 함께 `),Wd=o("code"),ow=e("Write()"),pw=e(`로 출력을 한 후 함수를 리턴한다.
만약 문제가 없다면, 다음 핸들러의 `),qd=o("code"),lw=e("ServeHTTP()"),cw=e(` 메소드를 호출한다.
그 후 정리 작업을 수행한다.`),v3=u(),Ws=o("p"),Fd=o("code"),rw=e("TerribleSecurityProvider()"),uw=e(`는 직접 설정 가능한 미들웨어를 생성하는 예제라고 할 수 있다.
설정 정보(예제에서는 비밀번호)를 `),Jd=o("code"),iw=e("TerribleSecurityProvider()"),dw=e(`의 파라미터로 보내면, 해당 정보를 사용하는 미들웨어를 반환한다.
다만 closure를 반환하는 closure를 반환하기 때문에(쓰기도 어려움;), 살짝 마음에 걸리는 것이다.`),_3=u(),m3=o("br"),C3=u(),Na=o("blockquote"),Gd=o("p"),kw=e("미들웨어 레이어에서의 값의 전달은 context를 통해 이루어진다."),O3=u(),D3=o("br"),b3=u(),xa=o("p"),fw=e("미들웨어를 연결하여 request handler에 추가해보자."),R3=u(),Ye=o("pre"),y3=u(),Gn=o("p"),Ew=e("위 예제에서 우리는 "),Id=o("code"),vw=e("TerribleSecurityProvider()"),_w=e(`로부터 미들웨어를 생성하고, 핸들러를 각각의 함수 호출로 감싸주었다.
구조적으로 `),Ud=o("code"),mw=e("terribleSecurity()"),Cw=e(" closure가 먼저 호출되고, 그 다음으로 "),zd=o("code"),Ow=e("RequestTimer"),Dw=e(", 그 다음으로 원래의 request handler가 호출된다."),P3=u(),qs=o("p"),Zd=o("code"),bw=e("*http.ServeMux"),Rw=e("는 "),Qd=o("code"),yw=e("http.Handler"),Pw=e(` 인터페이스를 충족시킨다.
아래처럼 적용하면 미들웨어들을 request router에 등록된 모든 핸들러에 적용할 수 있다.`),w3=u(),ge=o("pre"),S3=u(),T3=o("br"),h3=o("br"),H3=u(),Ut=o("h3"),zt=o("a"),$d=o("span"),ww=e("Use idiomatic third-party modules to enhance the server"),M3=u(),ja=o("p"),Sw=e(`서버에 서드파티 라이브러리를 사용하여 기능을 개선할 수 있다.
위 예제에서 보았던 미들웨어의 chain이 마음에 들지 않는다면, alice라는 서드파티 라이브러리를 사용할 수 있다.`),N3=u(),na=o("pre"),x3=u(),j3=o("br"),L3=u(),ys=o("p"),Tw=e("표준 라이브러리를 사용하여 HTTP 서버를 구축하는 것의 가장 큰 문제점은 "),Kd=o("code"),hw=e("*http.ServeMux"),Hw=e(`를 request router로 사용한다는 점이다.
이 request router는 HTTP 메소드나 헤더를 기준으로 구분할 수 없으며, Query parameter도 처리할 수 없다.
게다가 `),Vd=o("code"),Mw=e("*http.ServeMux"),Nw=e(" 인스턴스가 중첩되면 너무 거대해지기도 한다."),A3=u(),In=o("p"),xw=e("이를 대체하기 위한 프로젝트는 되게 많은데, 대표적인 게 바로 "),sa=o("a"),jw=e("gorilla mux"),Lw=e(`와 [https://github.com/go-chi/chi]이다.
이 두 라이브러리가 이상적이라 여겨지는 이유는 `),Xd=o("code"),Aw=e("http.Handler"),Bw=e("나 "),Yd=o("code"),Ww=e("http.HandlerFunc"),qw=e(` 인스턴스와 함께 사용할 수 있기 때문이며,
표준 라이브러리와 잘 어우러질 수 있는 라이브러리를 사용하는 Go의 철학을 보여준다.
또한 관용적인 미들웨어들을 사용할 수 있으며, 주로 사용되는 미들웨어의 구현체를 제공한다.`),B3=u(),W3=o("br"),q3=o("br"),F3=u(),Zt=o("h2"),Qt=o("a"),gd=o("span"),Fw=e("References"),J3=u(),G3=o("hr"),I3=u(),gn=o("center"),nk=o("p"),Jw=e("["),Gw=u(),OB(ta.$$.fragment),Iw=e(`
](https://learning.oreilly.com/library/view/learning-go/9781492077206/) `),Uw=o("br"),zw=e(`
[Jon Bodner, 『Learning Go』, O'Reilly Media, Inc.](https://learning.oreilly.com/library/view/learning-go/9781492077206/)`),U3=u(),z3=o("br"),Z3=o("br"),this.h()},l(n){ua=p(n,"BR",{}),ck=i(n),ia=p(n,"P",{});var c=l(ia);dv=a(c,"본 글은 Golang을 공부하며 주요 내용이라 생각되는 것들을 기록해둔 자료이며, Ubuntu 22.04 LTS 기준으로 작성되었습니다."),c.forEach(t),rk=i(n),uk=p(n,"BR",{}),ik=p(n,"BR",{}),dk=i(n),Vs=p(n,"H2",{id:!0});var Zw=l(Vs);Xs=p(Zw,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var rS=l(Xs);Xa=p(rS,"SPAN",{class:!0}),l(Xa).forEach(t),rS.forEach(t),kv=a(Zw,"Introduction"),Zw.forEach(t),kk=i(n),fk=p(n,"HR",{}),Ek=i(n),Ys=p(n,"P",{});var $3=l(Ys);fv=a($3,`Go의 표준 라이브러리는 여러 장점이 있다.
Python의 라이브러리 철학인 `),Ya=p($3,"EM",{});var uS=l(Ya);Ev=a(uS,"“batteries included”"),uS.forEach(t),vv=a($3,` 처럼, 서비스를 빌드하기 위해 필요한 다양한 도구를 제공한다.
Go는 비교적 최신 언어인 만큼, 현대 프로그래밍 환경에서 직면하는 문제에 초점을 맞춘 라이브러리를 제공한다.`),$3.forEach(t),vk=i(n),w=p(n,"P",{});var Z=l(w);_v=a(Z,`이 장에서 모든 표준 라이브러리 패키지들을 다룰 수 없고, 그럴 필요도 없다.
표준 라이브러리에 대한 다양한 정보들과 `),le=p(Z,"A",{href:!0,rel:!0});var iS=l(le);mv=a(iS,"문서"),iS.forEach(t),Cv=a(Z,`가 있으니, 여기를 참조하면 될 것이다.
이 포스트에서는 몇 개의 가장 중요한 패키지, 그리고 이들의 디자인적인 측면이나 사용 방법을 알아볼 것이다.
`),ga=p(Z,"CODE",{});var dS=l(ga);Ov=a(dS,"errors"),dS.forEach(t),Dv=a(Z,", "),no=p(Z,"CODE",{});var kS=l(no);bv=a(kS,"sync"),kS.forEach(t),Rv=a(Z,", "),so=p(Z,"CODE",{});var fS=l(so);yv=a(fS,"context"),fS.forEach(t),Pv=a(Z,", "),to=p(Z,"CODE",{});var ES=l(to);wv=a(ES,"testing"),ES.forEach(t),Sv=a(Z,", "),eo=p(Z,"CODE",{});var vS=l(eo);Tv=a(vS,"reflect"),vS.forEach(t),hv=a(Z,", "),ao=p(Z,"CODE",{});var _S=l(ao);Hv=a(_S,"unsafe"),_S.forEach(t),Mv=a(Z,` 등 패키지들은 각각의 챕터에서 집중적으로 다루었거나 다룰 예정이다.
이 챕터에서는 I/O, 시간, JSON, HTTP 등을 지원하는 패키지에 대해 알아볼 것이다.`),Z.forEach(t),_k=i(n),mk=p(n,"BR",{}),Ck=p(n,"BR",{}),Ok=i(n),gs=p(n,"H2",{id:!0});var Qw=l(gs);nt=p(Qw,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var mS=l(nt);oo=p(mS,"SPAN",{class:!0}),l(oo).forEach(t),mS.forEach(t),Nv=a(Qw,"io and Friends"),Qw.forEach(t),Dk=i(n),bk=p(n,"HR",{}),Rk=i(n),on=p(n,"P",{});var Ps=l(on);xv=a(Ps,`실용적인 프로그램을 데이터를 읽고 쓸 수 있어야 한다.
Go의 입/출력 철학은 `),po=p(Ps,"CODE",{});var CS=l(po);jv=a(CS,"io"),CS.forEach(t),Lv=a(Ps,` 패키지에서 찾아볼 수 있다.
특히 이 패키지에 정의된 `),lo=p(Ps,"CODE",{});var OS=l(lo);Av=a(OS,"io.Reader"),OS.forEach(t),Bv=a(Ps,"와 "),co=p(Ps,"CODE",{});var DS=l(co);Wv=a(DS,"io.Writer"),DS.forEach(t),qv=a(Ps,"는 각각 Go에서 두 번째, 세 번째로 많이 사용되는 인터페이스일 것이다. (첫 번째는 "),ro=p(Ps,"CODE",{});var bS=l(ro);Fv=a(bS,"error"),bS.forEach(t),Jv=a(Ps,"이다)"),Ps.forEach(t),yk=i(n),Pk=p(n,"BR",{}),wk=i(n),js=p(n,"P",{});var sk=l(js);uo=p(sk,"CODE",{});var RS=l(uo);Gv=a(RS,"io.Reader"),RS.forEach(t),Iv=a(sk,"와 "),io=p(sk,"CODE",{});var yS=l(io);Uv=a(yS,"io.Writer"),yS.forEach(t),zv=a(sk,"는 모두 한 개의 메소드를 정의한다."),sk.forEach(t),Sk=i(n),ce=p(n,"PRE",{class:!0});var HA=l(ce);HA.forEach(t),Tk=i(n),V=p(n,"P",{});var ns=l(V);ko=p(ns,"CODE",{});var PS=l(ko);Zv=a(PS,"io.Writer"),PS.forEach(t),Qv=a(ns,"의 "),fo=p(ns,"CODE",{});var wS=l(fo);$v=a(wS,"Write()"),wS.forEach(t),Kv=a(ns,` 메소드는 바이트 덩어리를 파라미터로 받고, 바이트의 수와 에러 발생 여부를 반환한다.
`),Eo=p(ns,"CODE",{});var SS=l(Eo);Vv=a(SS,"io.Reader"),SS.forEach(t),Xv=a(ns,"의 "),vo=p(ns,"CODE",{});var TS=l(vo);Yv=a(TS,"Read()"),TS.forEach(t),gv=a(ns,` 메소드는 좀 더 신기하다.
리턴 파라미터로 값을 반환하기보다는 입력 파라미터로 보낸 값을 변경한다.
최대 `),_o=p(ns,"CODE",{});var hS=l(_o);n5=a(hS,"len(p)"),hS.forEach(t),s5=a(ns," 바이트만큼의 데이터가 슬라이스에 쓰일 것이고, 기록된 바이트의 수와 에러 여부가 반환된다."),ns.forEach(t),hk=i(n),Hk=p(n,"BR",{}),Mk=i(n),ps=p(n,"P",{});var La=l(ps);t5=a(La,"사실 "),mo=p(La,"CODE",{});var HS=l(mo);e5=a(HS,"io.Reader"),HS.forEach(t),a5=a(La,"의 "),Co=p(La,"CODE",{});var MS=l(Co);o5=a(MS,"Read()"),MS.forEach(t),p5=a(La," 메소드는 아래와 같이 정의되는 것이 직관적일 것이다."),La.forEach(t),Nk=i(n),re=p(n,"PRE",{class:!0});var MA=l(re);MA.forEach(t),xk=i(n),ls=p(n,"P",{});var Aa=l(ls);l5=a(Aa,"하지만 "),Oo=p(Aa,"CODE",{});var NS=l(Oo);c5=a(NS,"io.Reader"),NS.forEach(t),r5=a(Aa,`가 기존 방식으로 정의되는 데에는 이유가 있다.
`),Do=p(Aa,"CODE",{});var xS=l(Do);u5=a(xS,"io.Reader"),xS.forEach(t),i5=a(Aa,"를 사용하는 함수를 작성하여 이해해보도록 하자."),Aa.forEach(t),jk=i(n),ue=p(n,"PRE",{class:!0});var NA=l(ue);NA.forEach(t),Lk=i(n),da=p(n,"P",{});var jS=l(da);d5=a(jS,"위 예제에서 주목할 점들이 있다."),jS.forEach(t),Ak=i(n),hn=p(n,"OL",{});var $t=l(hn);bo=p($t,"LI",{});var LS=l(bo);X=p(LS,"P",{});var Un=l(X);k5=a(Un,"버퍼를 한 번 생성하고 "),Ro=p(Un,"CODE",{});var AS=l(Ro);f5=a(AS,"r.Read()"),AS.forEach(t),E5=a(Un,`를 호출할 때마다 재사용할 것이다.
이러한 방식을 쓰면 크기가 클 수도 있는 데이터에 대해 한 번의 메모리 할당으로 값을 읽어올 수 있다.
만약 `),yo=p(Un,"CODE",{});var BS=l(yo);v5=a(BS,"Read()"),BS.forEach(t),_5=a(Un," 메소드가 "),Po=p(Un,"CODE",{});var WS=l(Po);m5=a(WS,"[]byte"),WS.forEach(t),C5=a(Un,"를 리턴하게끔 작성되어 있다면, 매번 함수를 호출할 때마다 새롭게 메모리 할당을 할 것이고, 가비지 컬렉터가 할 일이 많아질 것이다."),O5=p(Un,"BR",{}),D5=a(Un,`
추후 이렇게 낭비적인 할당을 줄이고 싶다면, 프로그램이 실행될 때 버퍼 풀을 생성해 놓는 방법도 있다.
함수가 실행될 때 해당 버퍼 풀에서 버퍼를 가져와 사용하고, 끝나면 되돌려 놓는 식이다.
`),wo=p(Un,"CODE",{});var qS=l(wo);b5=a(qS,"io.Reader"),qS.forEach(t),R5=a(Un,"에 slice를 보낼 수 있기 떄문에 메모리 할당을 개발자의 몫으로 남겨둘 수 있다."),Un.forEach(t),LS.forEach(t),y5=i($t),So=p($t,"LI",{});var FS=l(So);cs=p(FS,"P",{});var ea=l(cs);To=p(ea,"CODE",{});var JS=l(To);P5=a(JS,"r.Read()"),JS.forEach(t),w5=a(ea,"에서 반환된 "),ho=p(ea,"CODE",{});var GS=l(ho);S5=a(GS,"n"),GS.forEach(t),T5=a(ea,`값을 사용하여 버퍼에 바이트가 얼마나 많이 기록되었는지 확인하고,
`),Ho=p(ea,"CODE",{});var IS=l(Ho);h5=a(IS,"buf"),IS.forEach(t),H5=a(ea," slice의 subslice를 이터레이션하여 읽어온 데이터를 처리할 수 있다."),ea.forEach(t),FS.forEach(t),M5=i($t),Mo=p($t,"LI",{});var US=l(Mo);Hn=p(US,"P",{});var Fs=l(Hn);No=p(Fs,"CODE",{});var zS=l(No);N5=a(zS,"r.Read()"),zS.forEach(t),x5=a(Fs,"의 리턴 타입 중 error로 "),xo=p(Fs,"CODE",{});var ZS=l(xo);j5=a(ZS,"io.EOF"),ZS.forEach(t),L5=a(Fs,"를 반환한 경우("),jo=p(Fs,"CODE",{});var QS=l(jo);A5=a(QS,"io.EOF"),QS.forEach(t),B5=a(Fs,`는 실제로 에러가 아니다), 읽어올 데이터가 끝났음을 의미한다.
위 예제에서는 `),Lo=p(Fs,"CODE",{});var $S=l(Lo);W5=a($S,"io.EOF"),$S.forEach(t),q5=a(Fs,"가 반환될 시 처리를 끝내고 결과물을 리턴한다."),Fs.forEach(t),US.forEach(t),F5=i($t),Ao=p($t,"LI",{});var KS=l(Ao);J=p(KS,"P",{});var wn=l(J);Bo=p(wn,"CODE",{});var VS=l(Bo);J5=a(VS,"io.Reader"),VS.forEach(t),G5=a(wn,`에는 특이사항이 있다. 대부분의 함수 또는 메소드에 error 리턴값이 있다면, 오류가 아닌 값을 처리하기 전에 에러를 먼저 확인할 것이다.
`),Wo=p(wn,"CODE",{});var XS=l(Wo);I5=a(XS,"Read()"),XS.forEach(t),U5=a(wn,"를 사용할때는 데이터 스트림의 끝 또는 예기치 않은 오류가 발생하기 전에 반환된 바이트가 있을 수 있기 떄문에 이와 반대로 한다."),z5=p(wn,"BR",{}),Z5=a(wn,`
만약 `),qo=p(wn,"CODE",{});var YS=l(qo);Q5=a(YS,"io.Reader"),YS.forEach(t),$5=a(wn,"가 예상치 못하게 끝난다면 다른 종류의 sentinel error("),Fo=p(wn,"CODE",{});var gS=l(Fo);K5=a(gS,"io.ErrUnexpectedEOF"),gS.forEach(t),V5=a(wn,`)가 반환될 것이다.
이처럼 예측하지 못한 상태를 나타내는 에러는 `),Jo=p(wn,"CODE",{});var nT=l(Jo);X5=a(nT,"Err"),nT.forEach(t),Y5=a(wn,"로 시작한다."),wn.forEach(t),KS.forEach(t),$t.forEach(t),Bk=i(n),Wk=p(n,"BR",{}),qk=i(n),pn=p(n,"P",{});var ws=l(pn);g5=a(ws,"이렇듯 "),Go=p(ws,"CODE",{});var sT=l(Go);n_=a(sT,"io.Reader"),sT.forEach(t),s_=a(ws,"와 "),Io=p(ws,"CODE",{});var tT=l(Io);t_=a(tT,"io.Writer"),tT.forEach(t),e_=a(ws,` 인터페이스가 간단하기 때문에, 여러 가지 방법으로 충족시킬 수 있다.
`),Uo=p(ws,"CODE",{});var eT=l(Uo);a_=a(eT,"strings.NewReader()"),eT.forEach(t),o_=a(ws," 함수를 사용하여 문자열로부터 "),zo=p(ws,"CODE",{});var aT=l(zo);p_=a(aT,"io.Reader"),aT.forEach(t),l_=a(ws,"를 생성시킬 수도 있다."),ws.forEach(t),Fk=i(n),ie=p(n,"PRE",{class:!0});var xA=l(ie);xA.forEach(t),Jk=i(n),mn=p(n,"P",{});var Js=l(mn);Zo=p(Js,"CODE",{});var oT=l(Zo);c_=a(oT,"countLetters"),oT.forEach(t),r_=a(Js," 함수가 파라미터로 "),Qo=p(Js,"CODE",{});var pT=l(Qo);u_=a(pT,"io.Reader"),pT.forEach(t),i_=a(Js,"를 사용하므로, "),$o=p(Js,"CODE",{});var lT=l($o);d_=a(lT,"countLetters"),lT.forEach(t),k_=a(Js,` 함수를 써서 gzip으로 압축된 영문자를 카운트할 수도 있다.
진짜 되는지 해보자. 먼저 파일명을 파라미터로 받아 `),Ko=p(Js,"CODE",{});var cT=l(Ko);f_=a(cT,"*gzip.Reader"),cT.forEach(t),E_=a(Js,"를 반환하는 함수를 작성해준다."),Js.forEach(t),Gk=i(n),de=p(n,"PRE",{class:!0});var jA=l(de);jA.forEach(t),Ik=i(n),G=p(n,"P",{});var zn=l(G);v_=a(zn,`함수의 구조가 그다지 어렵지는 않다.
먼저 `),Vo=p(zn,"CODE",{});var rT=l(Vo);__=a(rT,"os.Open()"),rT.forEach(t),m_=a(zn," 함수로 "),Xo=p(zn,"CODE",{});var uT=l(Xo);C_=a(uT,"*os.File"),uT.forEach(t),O_=a(zn,` 인스턴스를 만들고 에러 검사를 한다.
그 후 `),Yo=p(zn,"CODE",{});var iT=l(Yo);D_=a(iT,"gzip.NewReader()"),iT.forEach(t),b_=a(zn," 함수를 호출하여 "),go=p(zn,"CODE",{});var dT=l(go);R_=a(dT,"*gzip.Reader"),dT.forEach(t),y_=a(zn,` 인스턴스를 생성한다.
리턴 값들은 `),np=p(zn,"CODE",{});var kT=l(np);P_=a(kT,"*gzip.Reader"),kT.forEach(t),w_=a(zn," 인스턴스, 생성된 인스턴스들을 제거하는 closure, 그리고 에러 변수이다."),zn.forEach(t),Uk=i(n),Cn=p(n,"P",{});var Gs=l(Cn);sp=p(Gs,"CODE",{});var fT=l(sp);S_=a(fT,"*gzip.Reader"),fT.forEach(t),T_=a(Gs," 인스턴스는 "),tp=p(Gs,"CODE",{});var ET=l(tp);h_=a(ET,"*strings.Reader"),ET.forEach(t),H_=a(Gs,"처럼 "),ep=p(Gs,"CODE",{});var vT=l(ep);M_=a(vT,"io.Reader"),vT.forEach(t),N_=a(Gs,"를 충족시키기 때문에 "),ap=p(Gs,"CODE",{});var _T=l(ap);x_=a(_T,"countLettters()"),_T.forEach(t),j_=a(Gs," 함수에서 사용할 수 있다."),Gs.forEach(t),zk=i(n),ke=p(n,"PRE",{class:!0});var LA=l(ke);LA.forEach(t),Zk=i(n),Qk=p(n,"BR",{}),$k=i(n),N=p(n,"P",{});var vn=l(N);L_=a(vn,"읽기/쓰기를 위한 표준 인터페이스가 있기 때문에, "),op=p(vn,"CODE",{});var mT=l(op);A_=a(mT,"io.Reader"),mT.forEach(t),B_=a(vn,"와 "),pp=p(vn,"CODE",{});var CT=l(pp);W_=a(CT,"io.Writer"),CT.forEach(t),q_=a(vn,"에서 데이터를 복사하는 표준 함수 "),lp=p(vn,"CODE",{});var OT=l(lp);F_=a(OT,"io.Copy()"),OT.forEach(t),J_=a(vn,"도 "),cp=p(vn,"CODE",{});var DT=l(cp);G_=a(DT,"io"),DT.forEach(t),I_=a(vn,` 패키지에 존재한다.
기존 `),rp=p(vn,"CODE",{});var bT=l(rp);U_=a(bT,"io.Reader"),bT.forEach(t),z_=a(vn,"와 "),up=p(vn,"CODE",{});var RT=l(up);Z_=a(RT,"io.Writer"),RT.forEach(t),Q_=a(vn,"인스턴스에 새로운 기능을 추가하기 위한 다른 표준 함수들도 있다."),vn.forEach(t),Kk=i(n),rs=p(n,"UL",{});var Ba=l(rs);us=p(Ba,"LI",{});var aa=l(us);ip=p(aa,"CODE",{});var yT=l(ip);$_=a(yT,"io.MultiReader"),yT.forEach(t),K_=a(aa," : 여러 개의 "),dp=p(aa,"CODE",{});var PT=l(dp);V_=a(PT,"io.Reader"),PT.forEach(t),X_=a(aa," 인스턴스로부터 잇따라 데이터를 읽을 수 있는 "),kp=p(aa,"CODE",{});var wT=l(kp);Y_=a(wT,"io.Reader"),wT.forEach(t),g_=a(aa," 인스턴스를 반환한다."),aa.forEach(t),n0=i(Ba),st=p(Ba,"LI",{});var tk=l(st);fp=p(tk,"CODE",{});var ST=l(fp);s0=a(ST,"io.LimitReader"),ST.forEach(t),t0=a(tk," : 명시된 수 만큼의 바이트만 읽을 수 있는 "),Ep=p(tk,"CODE",{});var TT=l(Ep);e0=a(TT,"io.Reader"),TT.forEach(t),a0=a(tk," 인스턴스를 반환한다."),tk.forEach(t),o0=i(Ba),is=p(Ba,"LI",{});var oa=l(is);vp=p(oa,"CODE",{});var hT=l(vp);p0=a(hT,"io.MultiWriter"),hT.forEach(t),l0=a(oa," : 동시에 여러 "),_p=p(oa,"CODE",{});var HT=l(_p);c0=a(HT,"io.Writer"),HT.forEach(t),r0=a(oa,"에 데이터를 쓸 수 있는 "),mp=p(oa,"CODE",{});var MT=l(mp);u0=a(MT,"io.Writer"),MT.forEach(t),i0=a(oa," 인스턴스를 반환한다."),oa.forEach(t),Ba.forEach(t),Vk=i(n),ds=p(n,"P",{});var Wa=l(ds);d0=a(Wa,"표준 라이브러리 내의 다른 패키지에서는 "),Cp=p(Wa,"CODE",{});var NT=l(Cp);k0=a(NT,"io.Reader"),NT.forEach(t),f0=a(Wa,"와 "),Op=p(Wa,"CODE",{});var xT=l(Op);E0=a(xT,"io.Writer"),xT.forEach(t),v0=a(Wa,`와 같이 사용할 수 있는 타입이나 함수들을 제공한다.
몇 개는 이미 봤지만 압축 알고리즘, 아카이브, 암호화, 버퍼, byte slice, 문자열 등 다양하게 제공하고 있다.`),Wa.forEach(t),Xk=i(n),Yk=p(n,"BR",{}),gk=i(n),Vn=p(n,"P",{});var pa=l(Vn);Dp=p(pa,"CODE",{});var jT=l(Dp);_0=a(jT,"io"),jT.forEach(t),m0=a(pa," 패키지에는 "),bp=p(pa,"CODE",{});var LT=l(bp);C0=a(LT,"io.Closer"),LT.forEach(t),O0=a(pa,"나 "),Rp=p(pa,"CODE",{});var AT=l(Rp);D0=a(AT,"io.Seeker"),AT.forEach(t),b0=a(pa,"등, 또다른 단일 메소드 인터페이스가 있다."),pa.forEach(t),nf=i(n),fe=p(n,"PRE",{class:!0});var AA=l(fe);AA.forEach(t),sf=i(n),On=p(n,"P",{});var Is=l(On);yp=p(Is,"CODE",{});var BT=l(yp);R0=a(BT,"os.File"),BT.forEach(t),y0=a(Is,"과 같이, 읽기나 쓰기가 끝나면 정리를 해줘야 하는 타입들은 "),Pp=p(Is,"CODE",{});var WT=l(Pp);P0=a(WT,"io.Closer"),WT.forEach(t),w0=a(Is,`를 충족시킨다.
일반적으로 `),wp=p(Is,"CODE",{});var qT=l(wp);S0=a(qT,"Close()"),qT.forEach(t),T0=a(Is," 메소드는 "),Sp=p(Is,"CODE",{});var FT=l(Sp);h0=a(FT,"defer"),FT.forEach(t),H0=a(Is,"를 통해 호출된다."),Is.forEach(t),tf=i(n),Ee=p(n,"PRE",{class:!0});var BA=l(Ee);BA.forEach(t),ef=i(n),Mn=p(n,"P",{});var Kt=l(Mn);M0=a(Kt,"만약 리소스를 반복문 내에서 여는 경우, "),Tp=p(Kt,"CODE",{});var JT=l(Tp);N0=a(JT,"defer"),JT.forEach(t),x0=a(Kt,`를 이용하지 않는 것이 좋다.
반복문 내에서 열린 리소스는 이터레이션의 끝에서 닫아주는 게 좋겠지만, `),hp=p(Kt,"CODE",{});var GT=l(hp);j0=a(GT,"defer"),GT.forEach(t),L0=a(Kt,`는 함수가 끝날 때 실행된다.
따라서 이터레이션의 끝 부분이나 함수가 끝날 수도 있는 에러가 발생할 만한 부분에 `),Hp=p(Kt,"CODE",{});var IT=l(Hp);A0=a(IT,"Close()"),IT.forEach(t),B0=a(Kt,"를 호출해 주는 게 좋다."),Kt.forEach(t),af=i(n),H=p(n,"P",{});var en=l(H);Mp=p(en,"CODE",{});var UT=l(Mp);W0=a(UT,"io.Seeker"),UT.forEach(t),q0=a(en,` 인터페이스는 리소스에 임의 접근(random access) 하기 위해 사용된다.
이 때 파라미터 `),Np=p(en,"CODE",{});var zT=l(Np);F0=a(zT,"whence"),zT.forEach(t),J0=a(en,"에 유효한 값은 상수 "),xp=p(en,"CODE",{});var ZT=l(xp);G0=a(ZT,"io.SeekStart"),ZT.forEach(t),I0=a(en,", "),jp=p(en,"CODE",{});var QT=l(jp);U0=a(QT,"io.SeekCurrent"),QT.forEach(t),z0=a(en,", "),Lp=p(en,"CODE",{});var $T=l(Lp);Z0=a($T,"io.SeekEnd"),$T.forEach(t),Q0=a(en,`이다.
사실 이건 제작자 실수인게, `),Ap=p(en,"CODE",{});var KT=l(Ap);$0=a(KT,"whence"),KT.forEach(t),K0=a(en,"는 타입을 새로 생성하여 명확히 해줬어야 하는데 "),Bp=p(en,"CODE",{});var VT=l(Bp);V0=a(VT,"whence"),VT.forEach(t),X0=a(en,"는 int 타입이다."),en.forEach(t),of=i(n),pf=p(n,"BR",{}),lf=i(n),v=p(n,"P",{});var C=l(v);Wp=p(C,"CODE",{});var XT=l(Wp);Y0=a(XT,"io"),XT.forEach(t),g0=a(C," 패키지는 앞서 보았던 "),qp=p(C,"CODE",{});var YT=l(qp);n6=a(YT,"io.Reader"),YT.forEach(t),s6=a(C,", "),Fp=p(C,"CODE",{});var gT=l(Fp);t6=a(gT,"io.Writer"),gT.forEach(t),e6=a(C,", "),Jp=p(C,"CODE",{});var nh=l(Jp);a6=a(nh,"io.Closer"),nh.forEach(t),o6=a(C,", "),Gp=p(C,"CODE",{});var sh=l(Gp);p6=a(sh,"io.Seeker"),sh.forEach(t),l6=a(C,`, 이렇게 네 개의 인터페이스를 여러 방식으로 합친 인터페이스를 정의한다.
`),Ip=p(C,"CODE",{});var th=l(Ip);c6=a(th,"io.ReadCloser"),th.forEach(t),r6=a(C,", "),Up=p(C,"CODE",{});var eh=l(Up);u6=a(eh,"io.ReadSeeker"),eh.forEach(t),i6=a(C,", "),zp=p(C,"CODE",{});var ah=l(zp);d6=a(ah,"io.ReadWriteCloser"),ah.forEach(t),k6=a(C,", "),Zp=p(C,"CODE",{});var oh=l(Zp);f6=a(oh,"io.ReadWriteSeeker"),oh.forEach(t),E6=a(C,", "),Qp=p(C,"CODE",{});var ph=l(Qp);v6=a(ph,"io.ReadWriter"),ph.forEach(t),_6=a(C,", "),$p=p(C,"CODE",{});var lh=l($p);m6=a(lh,"io.WriteCloser"),lh.forEach(t),C6=a(C,", "),Kp=p(C,"CODE",{});var ch=l(Kp);O6=a(ch,"io.WriteSeeker"),ch.forEach(t),D6=a(C,` 등이 있다.
이런 인터페이스들은 함수가 데이터에 대해 어떤 프로세스를 하는지 정확히 명시하기 위해 사용된다.`),C.forEach(t),cf=i(n),tt=p(n,"P",{});var K3=l(tt);b6=a(K3,"이를테면 파라미터의 타입으로 "),Vp=p(K3,"CODE",{});var rh=l(Vp);R6=a(rh,"os.File"),rh.forEach(t),y6=a(K3,`를 써주는 것보다는, 그 파라미터를 가지고 뭘 할건지 명시하기 위헤 인터페이스를 사용하는 것이 좋다.
또한 자체 데이터 소스나 싱크를 작성하는 경우, 코드가 이러한 인터페이스와 호환되도록 하는 것이 좋다.`),K3.forEach(t),rf=i(n),b=p(n,"P",{});var B=l(b);Xp=p(B,"CODE",{});var uh=l(Xp);P6=a(uh,"ioutil"),uh.forEach(t),w6=a(B," 패키지는 "),Yp=p(B,"CODE",{});var ih=l(Yp);S6=a(ih,"io.Reader"),ih.forEach(t),T6=a(B,` 인스턴스에 대한 다양한 도구들을 제공한다.
byte slice로 한 번에 읽기, 파일 읽기 및 쓰기, 임시 파일 작업 등 보다 간단한 도구들이 포함된다.
이를테면 `),gp=p(B,"CODE",{});var dh=l(gp);h6=a(dh,"io.Reader"),dh.forEach(t),H6=a(B,", "),nl=p(B,"CODE",{});var kh=l(nl);M6=a(kh,"io.Writer"),kh.forEach(t),N6=a(B,", "),sl=p(B,"CODE",{});var fh=l(sl);x6=a(fh,"bufio.Scanner"),fh.forEach(t),j6=a(B,` 등은 크기가 큰 데이터를 처리하는데 용이한 편이지만,
`),tl=p(B,"CODE",{});var Eh=l(tl);L6=a(Eh,"ioutil.ReadAll"),Eh.forEach(t),A6=a(B,", "),el=p(B,"CODE",{});var vh=l(el);B6=a(vh,"ioutil.ReadFile"),vh.forEach(t),W6=a(B,", "),al=p(B,"CODE",{});var _h=l(al);q6=a(_h,"ioutil.WriteFile"),_h.forEach(t),F6=a(B,"은 보다 작은 데이터를 처리하는데 유용하다."),B.forEach(t),uf=i(n),R=p(n,"P",{});var W=l(R);ol=p(W,"CODE",{});var mh=l(ol);J6=a(mh,"ioutil"),mh.forEach(t),G6=a(W,` 패키지에는 유용한 함수들이 더 있다.
가령 `),pl=p(W,"CODE",{});var Ch=l(pl);I6=a(Ch,"io.Reader"),Ch.forEach(t),U6=a(W,"는 충족하지만 "),ll=p(W,"CODE",{});var Oh=l(ll);z6=a(Oh,"io.Closer"),Oh.forEach(t),Z6=a(W,"는 충족하지 않는 인스턴스("),cl=p(W,"CODE",{});var Dh=l(cl);Q6=a(Dh,"strings.Reader"),Dh.forEach(t),$6=a(W,` 등)가 있고,
이를 `),rl=p(W,"CODE",{});var bh=l(rl);K6=a(bh,"io.ReadCloser"),bh.forEach(t),V6=a(W,`를 파라미터로 받는 함수에 넘겨야 한다고 가정해보자.
이 때 `),ul=p(W,"CODE",{});var Rh=l(ul);X6=a(Rh,"io.Reader"),Rh.forEach(t),Y6=a(W,"를 "),il=p(W,"CODE",{});var yh=l(il);g6=a(yh,"ioutil.NopCloser()"),yh.forEach(t),n9=a(W," 함수로 보내면 "),dl=p(W,"CODE",{});var Ph=l(dl);s9=a(Ph,"io.ReadCloser()"),Ph.forEach(t),t9=a(W," 타입을 반환할 것이고, 이걸 해당 함수의 파라미터로 넘기면 된다."),W.forEach(t),df=i(n),et=p(n,"P",{});var V3=l(et);e9=a(V3,"실제로 "),kl=p(V3,"CODE",{});var wh=l(kl);a9=a(wh,"ioutil.NopCloser()"),wh.forEach(t),o9=a(V3,"의 구현을 들여다보면 생각보다 단순하다."),V3.forEach(t),kf=i(n),ve=p(n,"PRE",{class:!0});var WA=l(ve);WA.forEach(t),ff=i(n),ka=p(n,"P",{});var Sh=l(ka);p9=a(Sh,`위 구현을 보면 Go에서 타입에 메소드를 추가하는 패턴을 확인할 수 있다.
인터페이스를 충족할 수 있게끔 타입에 메소드를 추가해주고 싶다면, 이렇게 Embedded type 패턴을 사용해주면 된다.`),Sh.forEach(t),Ef=i(n),fa=p(n,"BLOCKQUOTE",{});var Th=l(fa);_e=p(Th,"P",{});var X3=l(_e);l9=a(X3,`함수에서 인터페이스를 리턴하지 않는다는 규칙이 기억날 것이다.
`),fl=p(X3,"CODE",{});var hh=l(fl);c9=a(hh,"ioutil.NopCloser()"),hh.forEach(t),r9=a(X3,` 함수는 이를 위반하긴 한다.
하지만 표준 라이브러리에 속하는 인터페이스끼리의 변환을 해주는 간단한 어댑터 역할만 하기 때문에 예외로 두고 넘어가 주자.`),X3.forEach(t),Th.forEach(t),vf=i(n),_f=p(n,"BR",{}),mf=p(n,"BR",{}),Cf=i(n),at=p(n,"H2",{id:!0});var $w=l(at);ot=p($w,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Hh=l(ot);El=p(Hh,"SPAN",{class:!0}),l(El).forEach(t),Hh.forEach(t),u9=a($w,"time"),$w.forEach(t),Of=i(n),Df=p(n,"HR",{}),bf=i(n),Nn=p(n,"P",{});var Vt=l(Nn);i9=a(Vt,"다른 언어들처럼 Go에도 시간 연산을 하는 라이브러리인 "),vl=p(Vt,"CODE",{});var Mh=l(vl);d9=a(Mh,"time"),Mh.forEach(t),k9=a(Vt,` 패키지가 있다.
시간을 나타내는 주요 타입이 두 가지 있는데, 바로 `),_l=p(Vt,"CODE",{});var Nh=l(_l);f9=a(Nh,"time.Duration"),Nh.forEach(t),E9=a(Vt,"과 "),ml=p(Vt,"CODE",{});var xh=l(ml);v9=a(xh,"time.Time"),xh.forEach(t),_9=a(Vt,"이다."),Vt.forEach(t),Rf=i(n),ln=p(n,"P",{});var Ss=l(ln);m9=a(Ss,"시각 사이의 시간은 "),Cl=p(Ss,"CODE",{});var jh=l(Cl);C9=a(jh,"time.Duration"),jh.forEach(t),O9=a(Ss,"으로 표현되며, 이는 "),Ol=p(Ss,"CODE",{});var Lh=l(Ol);D9=a(Lh,"int64"),Lh.forEach(t),b9=a(Ss,` 기반이다.
Go의 시간 최소단위는 나노초(ns)이고, `),Dl=p(Ss,"CODE",{});var Ah=l(Dl);R9=a(Ah,"time"),Ah.forEach(t),y9=a(Ss," 패키지에서는 "),bl=p(Ss,"CODE",{});var Bh=l(bl);P9=a(Bh,"time.Duration"),Bh.forEach(t),w9=a(Ss,` 타입의
나노초(nanosecond), 마이크로초(microsecond), 밀리초(milisecond), 초(second), 분(minute), 시간(hour) 상수를 정의한다.`),Ss.forEach(t),yf=i(n),Ea=p(n,"P",{});var Wh=l(Ea);S9=a(Wh,"예를 들어, 2시간 30분은 아래와 같이 정의한다."),Wh.forEach(t),Pf=i(n),me=p(n,"PRE",{class:!0});var qA=l(me);qA.forEach(t),wf=i(n),pt=p(n,"P",{});var Y3=l(pt);T9=a(Y3,"이러한 상수들을 사용하면 "),Rl=p(Y3,"CODE",{});var qh=l(Rl);h9=a(qh,"time.Duration"),qh.forEach(t),H9=a(Y3," 타입을 readable하고 type-safe하게 만들어준다."),Y3.forEach(t),Sf=i(n),Tf=p(n,"BR",{}),hf=i(n),xn=p(n,"P",{});var Xt=l(xn);M9=a(Xt,"Go는 "),yl=p(Xt,"CODE",{});var Fh=l(yl);N9=a(Fh,"time,ParseDuration()"),Fh.forEach(t),x9=a(Xt," 함수에 특정한 스트링 포맷이나 숫자들의 배열을 넘겨서 "),Pl=p(Xt,"CODE",{});var Jh=l(Pl);j9=a(Jh,"time.Duration"),Jh.forEach(t),L9=a(Xt,` 타입으로 파싱할 수 있다.
이에 대한 설명은 `),Ce=p(Xt,"A",{href:!0,rel:!0});var Gh=l(Ce);A9=a(Gh,"표준 라이브러리 문서"),Gh.forEach(t),B9=a(Xt,`에 작성되어 있다.
아래 내용은 원문인데, 번역하는 것보다 영어로 읽는게 더 편할것 같아서 따로 번역하지는 않았다.`),Xt.forEach(t),Hf=i(n),va=p(n,"BLOCKQUOTE",{});var Ih=l(va);wl=p(Ih,"P",{});var Uh=l(wl);W9=a(Uh,`A duration string is a possibly signed sequence of decimal numbers,
each with optional fraction and a unit suffix, such as “300ms”, “-1.5h” or “2h45m”.
Valid time units are “ns”, “us” (or “µs”), “ms”, “s”, “m”, “h”.`),Uh.forEach(t),Ih.forEach(t),Mf=i(n),y=p(n,"P",{});var q=l(y);Sl=p(q,"CODE",{});var zh=l(Sl);q9=a(zh,"time.Duration"),zh.forEach(t),F9=a(q,"에는 여러 가지 메소드들이 정의되어 있고, "),Tl=p(q,"CODE",{});var Zh=l(Tl);J9=a(Zh,"fmt.Stringer"),Zh.forEach(t),G9=a(q,` 인터페이스를 충족시킨다.
따라서 `),hl=p(q,"CODE",{});var Qh=l(hl);I9=a(Qh,"fmt.Stringer"),Qh.forEach(t),U9=a(q,"에 정의된 "),Hl=p(q,"CODE",{});var $h=l(Hl);z9=a($h,"String()"),$h.forEach(t),Z9=a(q,` 메소드를 호출하면 formatted string을 반환받는다.
또한 `),Ml=p(q,"CODE",{});var Kh=l(Ml);Q9=a(Kh,"Truncate"),Kh.forEach(t),$9=a(q,"나 "),Nl=p(q,"CODE",{});var Vh=l(Nl);K9=a(Vh,"Round"),Vh.forEach(t),V9=a(q," 메소드를 쓰면 "),xl=p(q,"CODE",{});var Xh=l(xl);X9=a(Xh,"time.Duration"),Xh.forEach(t),Y9=a(q,"을 지정된 "),jl=p(q,"CODE",{});var Yh=l(jl);g9=a(Yh,"time.Duration"),Yh.forEach(t),n4=a(q," 단위만큼 반올림하거나 자른다."),q.forEach(t),Nf=i(n),xf=p(n,"BR",{}),jf=i(n),jn=p(n,"P",{});var Yt=l(jn);s4=a(Yt,"특정한 시각의 경우 "),Ll=p(Yt,"CODE",{});var gh=l(Ll);t4=a(gh,"time.Time"),gh.forEach(t),e4=a(Yt,` 타입으로 표현되는데, 시간대(time zone)를 명시해 주어야 한다.
또한 `),Al=p(Yt,"CODE",{});var nH=l(Al);a4=a(nH,"Time.Now()"),nH.forEach(t),o4=a(Yt," 함수로 현재 로컬 시간인 "),Bl=p(Yt,"CODE",{});var sH=l(Bl);p4=a(sH,"time.Time()"),sH.forEach(t),l4=a(Yt," 인스턴스를 얻을 수 있다."),Yt.forEach(t),Lf=i(n),Dn=p(n,"P",{});var Us=l(Dn);Wl=p(Us,"CODE",{});var tH=l(Wl);c4=a(tH,"time.Time"),tH.forEach(t),r4=a(Us,` 인스턴스는 시간대에 대한 정보까지 포함하기 때문에,
두 개의 `),ql=p(Us,"CODE",{});var eH=l(ql);u4=a(eH,"time.Time"),eH.forEach(t),i4=a(Us," 인스턴스가 같은 시간대를 나타내더라도 "),Fl=p(Us,"CODE",{});var aH=l(Fl);d4=a(aH,"=="),aH.forEach(t),k4=a(Us,` 연산자를 사용하면 제대로 된 결과가 나타나지 않을 수 있다.
`),Jl=p(Us,"CODE",{});var oH=l(Jl);f4=a(oH,"Equal()"),oH.forEach(t),E4=a(Us," 메소드를 사용하면, 표준 시간대를 기준으로 비교해준다."),Us.forEach(t),Af=i(n),L=p(n,"P",{});var Sn=l(L);Gl=p(Sn,"CODE",{});var pH=l(Gl);v4=a(pH,"time.Parse()"),pH.forEach(t),_4=a(Sn," 함수는 "),Il=p(Sn,"CODE",{});var lH=l(Il);m4=a(lH,"string"),lH.forEach(t),C4=a(Sn,"을 "),Ul=p(Sn,"CODE",{});var cH=l(Ul);O4=a(cH,"time.Time"),cH.forEach(t),D4=a(Sn," 타입으로 변환해주고, "),zl=p(Sn,"CODE",{});var rH=l(zl);b4=a(rH,"Format()"),rH.forEach(t),R4=a(Sn," 메소드는 "),Zl=p(Sn,"CODE",{});var uH=l(Zl);y4=a(uH,"time.Time"),uH.forEach(t),P4=a(Sn," 타입을 "),Ql=p(Sn,"CODE",{});var iH=l(Ql);w4=a(iH,"string"),iH.forEach(t),S4=a(Sn,"으로 변환해준다."),Sn.forEach(t),Bf=i(n),Oe=p(n,"PRE",{class:!0});var FA=l(Oe);FA.forEach(t),Wf=i(n),_a=p(n,"P",{});var dH=l(_a);T4=a(dH,"출력 결과는 다음과 같다."),dH.forEach(t),qf=i(n),De=p(n,"PRE",{class:!0});var JA=l(De);JA.forEach(t),Ff=i(n),lt=p(n,"P",{});var g3=l(lt);h4=a(g3,`이러한 날짜나 시간 포맷은 유용하게 사용되게끔 의도되었지만, 기억하기 힘들기 때문에 사용하려 할 때마다 찾아봐야 한다는 단점이 있다.
다행히도 주로 사용되는 날짜 및 시각 포맷은 `),$l=p(g3,"CODE",{});var kH=l($l);H4=a(kH,"time"),kH.forEach(t),M4=a(g3," 패키지에서 상수로 주어진다."),g3.forEach(t),Jf=i(n),k=p(n,"P",{});var f=l(k);Kl=p(f,"CODE",{});var fH=l(Kl);N4=a(fH,"time.Duration"),fH.forEach(t),x4=a(f,"처럼, "),Vl=p(f,"CODE",{});var EH=l(Vl);j4=a(EH,"time.Time"),EH.forEach(t),L4=a(f,"에도 "),Xl=p(f,"CODE",{});var vH=l(Xl);A4=a(vH,"Day"),vH.forEach(t),B4=a(f,", "),Yl=p(f,"CODE",{});var _H=l(Yl);W4=a(_H,"Month"),_H.forEach(t),q4=a(f,", "),gl=p(f,"CODE",{});var mH=l(gl);F4=a(mH,"Year"),mH.forEach(t),J4=a(f,", "),nc=p(f,"CODE",{});var CH=l(nc);G4=a(CH,"Hour"),CH.forEach(t),I4=a(f,", "),sc=p(f,"CODE",{});var OH=l(sc);U4=a(OH,"Minute"),OH.forEach(t),z4=a(f,", "),tc=p(f,"CODE",{});var DH=l(tc);Z4=a(DH,"Second"),DH.forEach(t),Q4=a(f,", "),ec=p(f,"CODE",{});var bH=l(ec);$4=a(bH,"Weekday"),bH.forEach(t),K4=a(f,", "),ac=p(f,"CODE",{});var RH=l(ac);V4=a(RH,"Clock"),RH.forEach(t),X4=a(f,` 등 시각의 일부분을 추출할 수 있는 메소드가 존재한다.
이 중 `),oc=p(f,"CODE",{});var yH=l(oc);Y4=a(yH,"Clock()"),yH.forEach(t),g4=a(f," 메소드는 시, 분, 초를 각각의 "),pc=p(f,"CODE",{});var PH=l(pc);n8=a(PH,"int"),PH.forEach(t),s8=a(f,"로 반환하고, "),lc=p(f,"CODE",{});var wH=l(lc);t8=a(wH,"Date()"),wH.forEach(t),e8=a(f,"는 연, 월, 일을 각각의 "),cc=p(f,"CODE",{});var SH=l(cc);a8=a(SH,"int"),SH.forEach(t),o8=a(f,`로 반환한다.
또한 `),rc=p(f,"CODE",{});var TH=l(rc);p8=a(TH,"time.Time"),TH.forEach(t),l8=a(f," 인스턴스는 "),uc=p(f,"CODE",{});var hH=l(uc);c8=a(hH,"After"),hH.forEach(t),r8=a(f,", "),ic=p(f,"CODE",{});var HH=l(ic);u8=a(HH,"Before"),HH.forEach(t),i8=a(f,", "),dc=p(f,"CODE",{});var MH=l(dc);d8=a(MH,"Equal"),MH.forEach(t),k8=a(f," 메소드를 통해 다른 인스턴스와 비교할 수 있다."),f.forEach(t),Gf=i(n),E=p(n,"P",{});var m=l(E);kc=p(m,"CODE",{});var NH=l(kc);f8=a(NH,"time.Time"),NH.forEach(t),E8=a(m,"의 "),fc=p(m,"CODE",{});var xH=l(fc);v8=a(xH,"Sub()"),xH.forEach(t),_8=a(m," 메소드는 두 시각 사이의 경과 시간을 "),Ec=p(m,"CODE",{});var jH=l(Ec);m8=a(jH,"time.Duration"),jH.forEach(t),C8=a(m,`으로 반환하며,
`),vc=p(m,"CODE",{});var LH=l(vc);O8=a(LH,"time.Time"),LH.forEach(t),D8=a(m,"의 "),_c=p(m,"CODE",{});var AH=l(_c);b8=a(AH,"Add()"),AH.forEach(t),R8=a(m," 메소드는 "),mc=p(m,"CODE",{});var BH=l(mc);y8=a(BH,"time.Duration"),BH.forEach(t),P8=a(m,"을 파라미터로 받아 해당 시간만큼 더해진 시각의 "),Cc=p(m,"CODE",{});var WH=l(Cc);w8=a(WH,"time.Time"),WH.forEach(t),S8=a(m,` 인스턴스를 반환한다.
`),Oc=p(m,"CODE",{});var qH=l(Oc);T8=a(qH,"time.Time"),qH.forEach(t),h8=a(m,"의 "),Dc=p(m,"CODE",{});var FH=l(Dc);H8=a(FH,"AddDate()"),FH.forEach(t),M8=a(m," 메소드는 연, 월, 일을 각각 입력받아 그만큼 더해진 날짜의 "),bc=p(m,"CODE",{});var JH=l(bc);N8=a(JH,"time.Time"),JH.forEach(t),x8=a(m,` 인스턴스를 반환한다.
`),Rc=p(m,"CODE",{});var GH=l(Rc);j8=a(GH,"time.Duration"),GH.forEach(t),L8=a(m," 인스턴스를 인자로 주고, 앞서 언급한 "),yc=p(m,"CODE",{});var IH=l(yc);A8=a(IH,"Truncate()"),IH.forEach(t),B8=a(m,"와 "),Pc=p(m,"CODE",{});var UH=l(Pc);W8=a(UH,"Round()"),UH.forEach(t),q8=a(m," 메소드를 사용할 수도 있다."),m.forEach(t),If=i(n),ks=p(n,"P",{});var qa=l(ks);F8=a(qa,"이러한 메소드들은 모두 "),wc=p(qa,"EM",{});var zH=l(wc);J8=a(zH,"value receiver"),zH.forEach(t),G8=a(qa,"로 정의되었기 때문에, 원래의 "),Sc=p(qa,"CODE",{});var ZH=l(Sc);I8=a(ZH,"time.Time"),ZH.forEach(t),U8=a(qa," 인스턴스를 변경하지 않는다."),qa.forEach(t),Uf=i(n),zf=p(n,"BR",{}),Zf=p(n,"BR",{}),Qf=i(n),ct=p(n,"H3",{id:!0});var Kw=l(ct);rt=p(Kw,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var QH=l(rt);Tc=p(QH,"SPAN",{class:!0}),l(Tc).forEach(t),QH.forEach(t),z8=a(Kw,"Monotonic Time"),Kw.forEach(t),$f=i(n),fs=p(n,"P",{});var Fa=l(fs);Z8=a(Fa,`대부분의 OS에서는 두 종류의 시각을 기록하고 있다.
그중 `),hc=p(Fa,"EM",{});var $H=l(hc);Q8=a($H,"wall clock"),$H.forEach(t),$8=a(Fa,"은 말 그대로 현재 시각에 대응하는 것이며, "),Hc=p(Fa,"EM",{});var KH=l(Hc);K8=a(KH,"monotonic clock"),KH.forEach(t),V8=a(Fa,`은 컴퓨터가 켜진 시각으로부터 얼마만큼 시간이 흘렀는지를 의미한다.
두 종류의 시각을 기록하는 이유는, wall clock이 일정하게 증가하는 것이 아니기 때문이다.
서머타임(Daylight Saving Time), 윤초(leap seconds), Network Time Protocol의 업데이트로 인해 wall clock에는 오차가 생길 수 있으며,
이로 인해 타이머를 실행하거나 경과된 시간을 얻고자 할 때 문제가 생길 수 있다.`),Fa.forEach(t),Kf=i(n),S=p(n,"P",{});var Q=l(S);X8=a(Q,"이러한 잠재적인 문제점을 해결하기 위해, Go에서는 "),Mc=p(Q,"CODE",{});var VH=l(Mc);Y8=a(VH,"time.Now()"),VH.forEach(t),g8=a(Q,"로 "),Nc=p(Q,"CODE",{});var XH=l(Nc);nm=a(XH,"time.Time"),XH.forEach(t),sm=a(Q,` 인스턴스가 생성되거나 타이머가 설정될 때
monotonic time을 사용하여 경과 시간을 추적한다.
`),xc=p(Q,"CODE",{});var YH=l(xc);tm=a(YH,"Sub()"),YH.forEach(t),em=a(Q," 메소드는 두 "),jc=p(Q,"CODE",{});var gH=l(jc);am=a(gH,"time.Time"),gH.forEach(t),om=a(Q," 인스턴스가 모두 monotonic time이 설정된 경우, monotonic time을 이용하여 "),Lc=p(Q,"CODE",{});var nM=l(Lc);pm=a(nM,"time.Duration"),nM.forEach(t),lm=a(Q,`을 계산한다.
만약 그렇지 않다면 `),Ac=p(Q,"CODE",{});var sM=l(Ac);cm=a(sM,"Sub()"),sM.forEach(t),rm=a(Q," 메소드는 인스턴스에 지정된 시간을 사용하여 "),Bc=p(Q,"CODE",{});var tM=l(Bc);um=a(tM,"time.Duration"),tM.forEach(t),im=a(Q,"을 계산한다."),Q.forEach(t),Vf=i(n),Xf=p(n,"BR",{}),Yf=p(n,"BR",{}),gf=i(n),ut=p(n,"H3",{id:!0});var Vw=l(ut);it=p(Vw,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var eM=l(it);Wc=p(eM,"SPAN",{class:!0}),l(Wc).forEach(t),eM.forEach(t),dm=a(Vw,"Timers and Timeout"),Vw.forEach(t),n1=i(n),cn=p(n,"P",{});var Ts=l(cn);km=a(Ts,"앞선 포스트에서 다루었듯, "),qc=p(Ts,"CODE",{});var aM=l(qc);fm=a(aM,"time"),aM.forEach(t),Em=a(Ts,` 패키지에는 채널을 리턴하여 일정 시간이 지난 후 값이 출력되는 함수가 내장되어 있다.
`),Fc=p(Ts,"CODE",{});var oM=l(Fc);vm=a(oM,"time.After()"),oM.forEach(t),_m=a(Ts,` 함수는 일정 시간이 지나면 값이 단 한번 출력되는 채널을 리턴한다.
반면 `),Jc=p(Ts,"CODE",{});var pM=l(Jc);mm=a(pM,"time.Tick()"),pM.forEach(t),Cm=a(Ts," 함수에서 리턴되는 채널은 파라미터로 넘어온 "),Gc=p(Ts,"CODE",{});var lM=l(Gc);Om=a(lM,"time.Duration"),lM.forEach(t),Dm=a(Ts,` 만큼의 시간이 흐를 때마다 값이 출력된다.
이러한 함수들은 시간 초과 및 반복 작업을 가능하게 함으로써 Go의 동시성을 지원한다.`),Ts.forEach(t),s1=i(n),Es=p(n,"P",{});var Ja=l(Es);bm=a(Ja,"다만 "),Ic=p(Ja,"CODE",{});var cM=l(Ic);Rm=a(cM,"Time.Tick()"),cM.forEach(t),ym=a(Ja,` 함수는 멈출 수 없고, 따라서 가비지 컬렉터에 의해 정리되지도 않는다.
그래서 `),Uc=p(Ja,"CODE",{});var rM=l(Uc);Pm=a(rM,"Time.NewTicker()"),rM.forEach(t),wm=a(Ja,"를 사용하는데 이 함수는 채널을 닫거나 간격을 재설정하는 메소드를 함께 제공하니, 되도록 이 쪽을 선택하는 게 좋을 것 같다."),Ja.forEach(t),t1=i(n),ma=p(n,"P",{});var uM=l(ma);Sm=a(uM,"위 함수들을 사용하는 예제가 따로 없길래 대충 짜보았다."),uM.forEach(t),e1=i(n),be=p(n,"PRE",{class:!0});var GA=l(be);GA.forEach(t),a1=i(n),o1=p(n,"BR",{}),p1=p(n,"BR",{}),l1=i(n),dt=p(n,"H2",{id:!0});var Xw=l(dt);kt=p(Xw,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var iM=l(kt);zc=p(iM,"SPAN",{class:!0}),l(zc).forEach(t),iM.forEach(t),Tm=a(Xw,"encoding/json"),Xw.forEach(t),c1=i(n),r1=p(n,"HR",{}),u1=i(n),vs=p(n,"P",{});var Ga=l(vs);hm=a(Ga,`REST API는 JSON을 주고받는 통신을 한다. 따라서 Go의 표준 라이브러리는 JSON과 Go 데이터 타입의 상호 변환을 지원한다.
`),Zc=p(Ga,"EM",{});var dM=l(Zc);Hm=a(dM,"marshaling"),dM.forEach(t),Mm=a(Ga,"이란 Go 데이터 타입에서 인코딩된 JSON으로 변환하는 것을 의미하며, "),Qc=p(Ga,"EM",{});var kM=l(Qc);Nm=a(kM,"unmarshaling"),kM.forEach(t),xm=a(Ga,"이란 그 반대를 의미한다."),Ga.forEach(t),i1=i(n),d1=p(n,"BR",{}),k1=p(n,"BR",{}),f1=i(n),ft=p(n,"H3",{id:!0});var Yw=l(ft);Et=p(Yw,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var fM=l(Et);$c=p(fM,"SPAN",{class:!0}),l($c).forEach(t),fM.forEach(t),jm=a(Yw,"Use Struct Tags to Add Metadata"),Yw.forEach(t),E1=i(n),Ca=p(n,"P",{});var EM=l(Ca);Lm=a(EM,"우리가 주문 관리 시스템을 만들고 있다고 가정하고, 아래 JSON 파일을 확인해보자."),EM.forEach(t),v1=i(n),Re=p(n,"PRE",{class:!0});var IA=l(Re);IA.forEach(t),_1=i(n),Oa=p(n,"P",{});var vM=l(Oa);Am=a(vM,"이제 이 타입과 대응되는 타입을 정의해 보자."),vM.forEach(t),m1=i(n),ye=p(n,"PRE",{class:!0});var UA=l(ye);UA.forEach(t),C1=i(n),_s=p(n,"P",{});var Ia=l(_s);Bm=a(Ia,`JSON으로 변환되는 struct임을 명시하기 위해서는 구조체에 필드를 입력해준 뒤 struct tag를 입력해줘야 한다.
struct tag는 backtick(`),Kc=p(Ia,"CODE",{});var _M=l(Kc);Wm=a(_M,"`"),_M.forEach(t),qm=a(Ia,`)으로 문자열을 감싸는 구조이지만, 한 줄 이상 이어서 작성할 수 없다.
struct tag는 한 개 이상의 tag/value 쌍으로 이루어져 있으며, `),Vc=p(Ia,"CODE",{});var mM=l(Vc);Fm=a(mM,'tagName: "tagValue"'),mM.forEach(t),Jm=a(Ia,"의 구조로 작성되며 공백으로 구분한다."),Ia.forEach(t),O1=i(n),ms=p(n,"P",{});var Ua=l(ms);Gm=a(Ua,`struct tag는 그냥 문자열이기 때문에, 컴파일러는 얘네가 제대로 작성되어 있는지 알 수가 없다.
다만 `),Xc=p(Ua,"CODE",{});var CM=l(Xc);Im=a(CM,"go vet"),CM.forEach(t),Um=a(Ua,` 명령어를 치면 검증할 수 있으며, 이러한 모든 필드들은 export된다.
다른 패키지와 마찬가지로, `),Yc=p(Ua,"CODE",{});var OM=l(Yc);zm=a(OM,"encoding/json"),OM.forEach(t),Zm=a(Ua," 패키지의 코드들은 구조체의 export되지 않은 필드에 접근할 수 없다."),Ua.forEach(t),D1=i(n),Cs=p(n,"P",{});var za=l(Cs);Qm=a(za,"JSON을 처리하기 위해서는 태그명을 "),gc=p(za,"CODE",{});var DM=l(gc);$m=a(DM,"json"),DM.forEach(t),Km=a(za,`으로 지어서 구조체 필드와 연결되어야 하는 JSON 필드의 이름을 지정해주어야 한다.
만약 `),nr=p(za,"CODE",{});var bM=l(nr);Vm=a(bM,"json"),bM.forEach(t),Xm=a(za,` 태그를 지정하지 않으면 기본적으로 JSON 객체의 필드명과 구조체의 필드명을 매칭시킨다.
하지만 실제로는 필드명이 같다고 하더라도 struct tag를 명시해주는 것이 좋다.`),za.forEach(t),b1=i(n),Ln=p(n,"P",{});var gt=l(Ln);Ym=a(gt,"JSON을 구조체로 "),sr=p(gt,"EM",{});var RM=l(sr);gm=a(RM,"unmarshaling"),RM.forEach(t),n7=a(gt,"할 때 "),tr=p(gt,"CODE",{});var yM=l(tr);s7=a(yM,"json"),yM.forEach(t),t7=a(gt,` 태그가 명시되어있지 않으면, 필드가 매칭될때 대소문자를 구분하지 않는다.
반대로 구조체를 JSON으로 `),er=p(gt,"EM",{});var PM=l(er);e7=a(PM,"marshaling"),PM.forEach(t),a7=a(gt,"할 때 구조체 필드가 export되려면 첫 글자가 대문자일 수 밖에 없기 때문에, JSON 태그도 항상 대문자가 된다."),gt.forEach(t),R1=i(n),rn=p(n,"P",{});var hs=l(rn);o7=a(hs,"만약 "),ar=p(hs,"EM",{});var wM=l(ar);p7=a(wM,"marshaling"),wM.forEach(t),l7=a(hs," 또는 "),or=p(hs,"EM",{});var SM=l(or);c7=a(SM,"unmarshaling"),SM.forEach(t),r7=a(hs,"을 할 때 무시해야 하는 필드가 있다면 필드명으로 대시("),pr=p(hs,"CODE",{});var TM=l(pr);u7=a(TM,"-"),TM.forEach(t),i7=a(hs,`)를 써주면 된다.
만약 필드가 비어있을 때 출력에서 제외되어야 하는 경우, 이름 뒤에 `),lr=p(hs,"CODE",{});var hM=l(lr);d7=a(hM,",omitempty"),hM.forEach(t),k7=a(hs,`를 추가한다.
이 때 필드가 비어있다는 것은 Zero value를 의미하는 것이 아니라, zero-length slice나 map 등이 이에 해당한다.`),hs.forEach(t),y1=i(n),Os=p(n,"P",{});var Za=l(Os);f7=a(Za,`struct tag는 메타데이터를 사용하여 프로그램의 행동을 제어할 수 있게 해준다.
Java와 같은 다른 언어에서는 개발자들이 프로그램 요소에 주석을 달아
프로그램이 `),cr=p(Za,"EM",{});var HM=l(cr);E7=a(HM,"어떤"),HM.forEach(t),v7=a(Za," 처리를 하는 것에 대해 기술하는 것보다는 "),rr=p(Za,"EM",{});var MM=l(rr);_7=a(MM,"어떻게"),MM.forEach(t),m7=a(Za," 처리되어야 할지 설명하도록 장려한다."),Za.forEach(t),P1=i(n),Da=p(n,"P",{});var NM=l(Da);C7=a(NM,`Java에서 주석을 달던 사람들은 무언가 잘못됐을 때, 특히 어떤 코드가 주석이 달려있음에도 어떤 역할을 하는지 이해하지 못할 때 당황하는 경향이 있다.
Go에서는 짧은 코드보단 명시적인 코드를 좋아한다.
struct tag는 자동으로 evaluate되지 않으며, 구조체 인스턴스가 함수로 전달될 때 처리된다.`),NM.forEach(t),w1=i(n),S1=p(n,"BR",{}),T1=p(n,"BR",{}),h1=i(n),vt=p(n,"H3",{id:!0});var gw=l(vt);_t=p(gw,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var xM=l(_t);ur=p(xM,"SPAN",{class:!0}),l(ur).forEach(t),xM.forEach(t),O7=a(gw,"Unmarshaling and Marshaling"),gw.forEach(t),H1=i(n),M1=p(n,"HR",{}),N1=i(n),P=p(n,"P",{});var F=l(P);ir=p(F,"CODE",{});var jM=l(ir);D7=a(jM,"encoding/json"),jM.forEach(t),b7=a(F," 패키지의 "),dr=p(F,"CODE",{});var LM=l(dr);R7=a(LM,"json.Unmarshal()"),LM.forEach(t),y7=a(F," 함수는 "),kr=p(F,"CODE",{});var AM=l(kr);P7=a(AM,"byte"),AM.forEach(t),w7=a(F,"의 "),fr=p(F,"CODE",{});var BM=l(fr);S7=a(BM,"slice"),BM.forEach(t),T7=a(F,"를 "),Er=p(F,"CODE",{});var WM=l(Er);h7=a(WM,"struct"),WM.forEach(t),H7=a(F,`로 변환해준다.
아래 예제는 `),vr=p(F,"CODE",{});var qM=l(vr);M7=a(qM,"data"),qM.forEach(t),N7=a(F,"라는 문자열 변수를 "),_r=p(F,"CODE",{});var FM=l(_r);x7=a(FM,"struct"),FM.forEach(t),j7=a(F,"를 위에서 확인한 "),mr=p(F,"CODE",{});var JM=l(mr);L7=a(JM,"Order"),JM.forEach(t),A7=a(F," 구조체 타입으로 변환하는 예제이다."),F.forEach(t),x1=i(n),Pe=p(n,"PRE",{class:!0});var zA=l(Pe);zA.forEach(t),j1=i(n),Ls=p(n,"P",{});var ek=l(Ls);Cr=p(ek,"CODE",{});var GM=l(Cr);B7=a(GM,"json.Unmarshal()"),GM.forEach(t),W7=a(ek," 함수는 "),Or=p(ek,"CODE",{});var IM=l(Or);q7=a(IM,"io.Reader"),IM.forEach(t),F7=a(ek,`처럼 데이터를 입력 파라미터에 생성한다.
이는 두 가지 이유가 있는데, 첫 번째는 쉽게 예상할 수 있듯 동일한 구조체를 재사용하여 효율적으로 메모리를 사용할 수 때문이다.
두 번째는 달리 다른 방법이 없기 때문이다.
Go에는 제네릭이 없기 때문에, 인스턴스로 만들 구조체의 타입을 지정할 방법이 달리 없다.
만약 Go에도 제네릭이 생긴다 해도, 메모리 사용의 이점때문에 이 방식이 그대로 사용되리라 예상된다.`),ek.forEach(t),L1=i(n),A1=p(n,"BR",{}),B1=i(n),un=p(n,"P",{});var Hs=l(un);Dr=p(Hs,"CODE",{});var UM=l(Dr);J7=a(UM,"encoding/json"),UM.forEach(t),G7=a(Hs," 패키지의 "),br=p(Hs,"CODE",{});var zM=l(br);I7=a(zM,"json.Marshal()"),zM.forEach(t),U7=a(Hs," 함수는 구조체 인스턴스를 다시 "),Rr=p(Hs,"CODE",{});var ZM=l(Rr);z7=a(ZM,"byte"),ZM.forEach(t),Z7=a(Hs,"의 "),yr=p(Hs,"CODE",{});var QM=l(yr);Q7=a(QM,"slice"),QM.forEach(t),$7=a(Hs,`인 JSON으로 변환해준다.
`),Pr=p(Hs,"CODE",{});var $M=l(Pr);K7=a($M,"json.Marshal()"),$M.forEach(t),Hs.forEach(t),W1=i(n),we=p(n,"PRE",{class:!0});var ZA=l(we);ZA.forEach(t),q1=i(n),F1=p(n,"BR",{}),J1=p(n,"BR",{}),G1=i(n),mt=p(n,"H3",{id:!0});var nS=l(mt);Ct=p(nS,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var KM=l(Ct);wr=p(KM,"SPAN",{class:!0}),l(wr).forEach(t),KM.forEach(t),V7=a(nS,"JSON, Readers, and Writers"),nS.forEach(t),I1=i(n),_=p(n,"P",{});var O=l(_);Sr=p(O,"CODE",{});var VM=l(Sr);X7=a(VM,"json.Marshal()"),VM.forEach(t),Y7=a(O,"와 "),Tr=p(O,"CODE",{});var XM=l(Tr);g7=a(XM,"json.Unmarshal()"),XM.forEach(t),nC=a(O," 함수는 "),hr=p(O,"CODE",{});var YM=l(hr);sC=a(YM,"[]byte"),YM.forEach(t),tC=a(O,`를 사용한다.
또한 대부분의 데이터 소스와 싱크가 `),Hr=p(O,"CODE",{});var gM=l(Hr);eC=a(gM,"io.Reader"),gM.forEach(t),aC=a(O,"와 "),Mr=p(O,"CODE",{});var nN=l(Mr);oC=a(nN,"io.Writer"),nN.forEach(t),pC=a(O,` 인터페이스를 충족시키는 것을 알고 있다.
그래서 `),Nr=p(O,"CODE",{});var sN=l(Nr);lC=a(sN,"ioutil.ReadAll()"),sN.forEach(t),cC=a(O,"을 통해 "),xr=p(O,"CODE",{});var tN=l(xr);rC=a(tN,"io.Reader"),tN.forEach(t),uC=a(O,"의 모든 내용을 "),jr=p(O,"CODE",{});var eN=l(jr);iC=a(eN,"[]byte"),eN.forEach(t),dC=a(O,"에 저장하여 "),Lr=p(O,"CODE",{});var aN=l(Lr);kC=a(aN,"json.Unmarshal()"),aN.forEach(t),fC=a(O,`을 사용할 수 있지만, 이 방식은 비효율적이다.
비슷하게 `),Ar=p(O,"CODE",{});var oN=l(Ar);EC=a(oN,"json.Marshal()"),oN.forEach(t),vC=a(O," 함수를 통해 인메모리 "),Br=p(O,"CODE",{});var pN=l(Br);_C=a(pN,"[]byte"),pN.forEach(t),mC=a(O,` 버퍼에 값을 쓰고, 해당 버퍼의 데이터를 네티워크나 디스크에 쓸 수 있다.
다만 그 경우 `),Wr=p(O,"CODE",{});var lN=l(Wr);CC=a(lN,"io.Writer"),lN.forEach(t),OC=a(O,"에 직접 데이터를 쓰는 편이 더 효율적일 것이다."),O.forEach(t),U1=i(n),Y=p(n,"P",{});var ss=l(Y);qr=p(ss,"CODE",{});var cN=l(qr);DC=a(cN,"encoding/json"),cN.forEach(t),bC=a(ss,` 이러한 상황을 다루기 위한 두 가지 타입을 포함하고 있다.
바로 `),Fr=p(ss,"CODE",{});var rN=l(Fr);RC=a(rN,"json.Decoder"),rN.forEach(t),yC=a(ss,"와 "),Jr=p(ss,"CODE",{});var uN=l(Jr);PC=a(uN,"json.Encoder"),uN.forEach(t),wC=a(ss," 타입이며, 이 타입들은 "),Gr=p(ss,"CODE",{});var iN=l(Gr);SC=a(iN,"io.Reader"),iN.forEach(t),TC=a(ss,", "),Ir=p(ss,"CODE",{});var dN=l(Ir);hC=a(dN,"io.Writer"),dN.forEach(t),HC=a(ss,` 인터페이스를 충족시키면서 읽기/쓰기를 할 수 있게 해준다.
간단한 예제를 확인해보자.`),ss.forEach(t),z1=i(n),Se=p(n,"PRE",{class:!0});var QA=l(Se);QA.forEach(t),Z1=i(n),Q1=p(n,"BR",{}),$1=i(n),D=p(n,"P",{});var M=l(D);Ur=p(M,"CODE",{});var kN=l(Ur);MC=a(kN,"os.File"),kN.forEach(t),NC=a(M," 타입은 "),zr=p(M,"CODE",{});var fN=l(zr);xC=a(fN,"io.Writer"),fN.forEach(t),jC=a(M,"와 "),Zr=p(M,"CODE",{});var EN=l(Zr);LC=a(EN,"io.Reader"),EN.forEach(t),AC=a(M," 인터페이스를 모두 충족시키기 때문에, "),Qr=p(M,"CODE",{});var vN=l(Qr);BC=a(vN,"json.Decoder"),vN.forEach(t),WC=a(M,"와 "),$r=p(M,"CODE",{});var _N=l($r);qC=a(_N,"json.Encodeer"),_N.forEach(t),FC=a(M,`를 시연하는 데 사용해보자.
먼저 임시 파일 인스턴스를 만들어 `),Kr=p(M,"CODE",{});var mN=l(Kr);JC=a(mN,"json.NewEncoder()"),mN.forEach(t),GC=a(M," 함수에 넘기면, 임시 파일에 대한 "),Vr=p(M,"CODE",{});var CN=l(Vr);IC=a(CN,"json.Encoder"),CN.forEach(t),UC=a(M,` 인스턴스를 생성한다.
그 후 `),Xr=p(M,"CODE",{});var ON=l(Xr);zC=a(ON,"Encode()"),ON.forEach(t),ZC=a(M," 메소드를 호출할 때 "),Yr=p(M,"CODE",{});var DN=l(Yr);QC=a(DN,"toFile"),DN.forEach(t),$C=a(M,"을 넘기면 된다."),M.forEach(t),K1=i(n),Te=p(n,"PRE",{class:!0});var $A=l(Te);$A.forEach(t),V1=i(n),X1=p(n,"BR",{}),Y1=i(n),dn=p(n,"P",{});var Ms=l(dn);KC=a(Ms,"이렇게 "),gr=p(Ms,"CODE",{});var bN=l(gr);VC=a(bN,"toFile"),bN.forEach(t),XC=a(Ms,"을 임시 파일에 쓴 후 임시 파일을 다시 읽어들여서 "),nu=p(Ms,"CODE",{});var RN=l(nu);YC=a(RN,"json.NewDecoder()"),RN.forEach(t),gC=a(Ms,`로 보내고,
`),su=p(Ms,"CODE",{});var yN=l(su);nO=a(yN,"Decode()"),yN.forEach(t),sO=a(Ms," 메소드를 호출하여 "),tu=p(Ms,"CODE",{});var PN=l(tu);tO=a(PN,"Person"),PN.forEach(t),eO=a(Ms," 타입의 변수로 불러올 것이다."),Ms.forEach(t),g1=i(n),he=p(n,"PRE",{class:!0});var KA=l(he);KA.forEach(t),n2=i(n),Ot=p(n,"P",{});var nv=l(Ot);aO=a(nv,"전체 예제는 "),He=p(nv,"A",{href:!0,rel:!0});var wN=l(He);oO=a(wN,"여기"),wN.forEach(t),pO=a(nv,"서 확인할 수 있다."),nv.forEach(t),s2=i(n),t2=p(n,"BR",{}),e2=p(n,"BR",{}),a2=i(n),Dt=p(n,"H3",{id:!0});var sS=l(Dt);bt=p(sS,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var SN=l(bt);eu=p(SN,"SPAN",{class:!0}),l(eu).forEach(t),SN.forEach(t),lO=a(sS,"Encoding and Decoding JSON Streams"),sS.forEach(t),o2=i(n),Ds=p(n,"P",{});var Qa=l(Ds);cO=a(Qa,`여러 개의 JSON 구조체를 한 번에 읽거나 쓰려면 어떻게 해야 할까?
이런 상황에서도 `),au=p(Qa,"CODE",{});var TN=l(au);rO=a(TN,"json.Decoder"),TN.forEach(t),uO=a(Qa,"와 "),ou=p(Qa,"CODE",{});var hN=l(ou);iO=a(hN,"json.Encoder"),hN.forEach(t),dO=a(Qa,"를 사용할 수 있다."),Qa.forEach(t),p2=i(n),ba=p(n,"P",{});var HN=l(ba);kO=a(HN,"아래와 같은 데이터가 있다고 해보자."),HN.forEach(t),l2=i(n),Me=p(n,"PRE",{class:!0});var VA=l(Me);VA.forEach(t),c2=i(n),Rt=p(n,"P",{});var sv=l(Rt);fO=a(sv,"우리의 예제에서 이 데이터는 "),pu=p(sv,"CODE",{});var MN=l(pu);EO=a(MN,"data"),MN.forEach(t),vO=a(sv,`라는 문자열로 저장되어 있다고 가정할 것이다.
다만 실제로 이 데이터는 파일이나 HTTP 요청의 데이터일 수도 있다.`),sv.forEach(t),r2=i(n),yt=p(n,"P",{});var tv=l(yt);_O=a(tv,"이 데이터를 "),lu=p(tv,"CODE",{});var NN=l(lu);mO=a(NN,"t"),NN.forEach(t),CO=a(tv,"라는 구조체의 타입의 인스턴스로 만들 것이다."),tv.forEach(t),u2=i(n),Ne=p(n,"PRE",{class:!0});var XA=l(Ne);XA.forEach(t),i2=i(n),d2=p(n,"BR",{}),k2=i(n),kn=p(n,"P",{});var Ns=l(kn);OO=a(Ns,"이전처럼 "),cu=p(Ns,"CODE",{});var xN=l(cu);DO=a(xN,"json.Decoder"),xN.forEach(t),bO=a(Ns,`를 데이터 소스로 초기화할 것이다.
다만 이번에는 `),ru=p(Ns,"CODE",{});var jN=l(ru);RO=a(jN,"json.Decoder"),jN.forEach(t),yO=a(Ns,"의 "),uu=p(Ns,"CODE",{});var LN=l(uu);PO=a(LN,"More()"),LN.forEach(t),wO=a(Ns," 메소드를 "),iu=p(Ns,"CODE",{});var AN=l(iu);SO=a(AN,"for"),AN.forEach(t),TO=a(Ns,` 루프 조건으로 사용할 것이다.
이렇게 하면 한 번에 한 개의 JSON 객체를 데이터로 읽어올 수 있게 된다.`),Ns.forEach(t),f2=i(n),xe=p(n,"PRE",{class:!0});var YA=l(xe);YA.forEach(t),E2=i(n),Pt=p(n,"P",{});var ev=l(Pt);hO=a(ev,`이 예제의 데이터 스트림에는 배열로 감싸지지 않은 여러 개의 JSON 객체들이 있다.
이들을 메모리에 한 번에 로드하지 않고, 위 예제처럼 `),du=p(ev,"CODE",{});var BN=l(du);HO=a(BN,"json.Decoder"),BN.forEach(t),MO=a(ev,`로 단일 객체를 한 개씩 읽으면
성능이 향상되고 메모리 사용량이 줄어든다는 장점이 있다.`),ev.forEach(t),v2=i(n),_2=p(n,"BR",{}),m2=i(n),Xn=p(n,"P",{});var la=l(Xn);ku=p(la,"CODE",{});var WN=l(ku);NO=a(WN,"json.Encoder"),WN.forEach(t),xO=a(la,`로 여러 개의 값을 쓰는 것은 한 개의 값을 쓰는 것과 유사하다.
예제에서는 `),fu=p(la,"CODE",{});var qN=l(fu);jO=a(qN,"bytes.Buffer"),qN.forEach(t),LO=a(la,"에 값을 쓸 것이지만, "),Eu=p(la,"CODE",{});var FN=l(Eu);AO=a(FN,"io.Writer"),FN.forEach(t),BO=a(la," 인터페이스를 충족시킨다면 어느 타입이든 사용할 수 있다."),la.forEach(t),C2=i(n),je=p(n,"PRE",{class:!0});var gA=l(je);gA.forEach(t),O2=i(n),D2=p(n,"BR",{}),b2=p(n,"BR",{}),R2=i(n),wt=p(n,"H3",{id:!0});var tS=l(wt);St=p(tS,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var JN=l(St);vu=p(JN,"SPAN",{class:!0}),l(vu).forEach(t),JN.forEach(t),WO=a(tS,"Custon JSON Parsing"),tS.forEach(t),y2=i(n),An=p(n,"P",{});var ne=l(An);qO=a(ne,`JSON 파싱 라이브러리의 기본적인 기능으로도 사용하는 데 문제는 없겠지만, 종종 오버라이드하여 사용해야할 때도 있을 것이다.
`),_u=p(ne,"CODE",{});var GN=l(_u);FO=a(GN,"time.Time"),GN.forEach(t),JO=a(ne,`은 RFC339 포맷은 기본적으로 JSON에서 RFC339 포맷을 사용하는데, 다른 시간 포맷을 사용해야 할 수도 있다.
그러한 경우 `),mu=p(ne,"CODE",{});var IN=l(mu);GO=a(IN,"json.Marshaler"),IN.forEach(t),IO=a(ne,"와 "),Cu=p(ne,"CODE",{});var UN=l(Cu);UO=a(UN,"json.Unmarshaler"),UN.forEach(t),zO=a(ne," 인터페이스를 충족시키는 새로운 타입을 생성하면 된다."),ne.forEach(t),P2=i(n),Le=p(n,"PRE",{class:!0});var nB=l(Le);nB.forEach(t),w2=i(n),g=p(n,"P",{});var ts=l(g);Ou=p(ts,"CODE",{});var zN=l(Ou);ZO=a(zN,"time.Time"),zN.forEach(t),QO=a(ts," 구조체 타입을 "),Du=p(ts,"CODE",{});var ZN=l(Du);$O=a(ZN,"RFC822ZTime"),ZN.forEach(t),KO=a(ts," 타입에 Embedding하였기 때문에 기존 "),bu=p(ts,"CODE",{});var QN=l(bu);VO=a(QN,"time.Time"),QN.forEach(t),XO=a(ts,`의 메소드에 접근할 수 있다.
또한 value receiver로 선언된 `),Ru=p(ts,"CODE",{});var $N=l(Ru);YO=a($N,"MarshalJSON()"),$N.forEach(t),gO=a(ts,` 메소드에서는 시간 값을 읽기만 하지만,
pointer receiver로 선언된 `),yu=p(ts,"CODE",{});var KN=l(yu);nD=a(KN,"UnmarshalJSON()"),KN.forEach(t),sD=a(ts," 메소드에서는 시간 값을 변경한다."),ts.forEach(t),S2=i(n),T2=p(n,"BR",{}),h2=i(n),bs=p(n,"P",{});var $a=l(bs);tD=a($a,"이렇게 하여, 앞선 예제의 "),Pu=p($a,"CODE",{});var VN=l(Pu);eD=a(VN,"Order"),VN.forEach(t),aD=a($a," 타입의 "),wu=p($a,"CODE",{});var XN=l(wu);oD=a(XN,"DateOrdered"),XN.forEach(t),pD=a($a," 필드를 RFC822 포맷으로 사용 가능하게끔 수정해주었다."),$a.forEach(t),H2=i(n),Ae=p(n,"PRE",{class:!0});var sB=l(Ae);sB.forEach(t),M2=i(n),Tt=p(n,"P",{});var av=l(Tt);lD=a(av,"전체 예제는 "),Be=p(av,"A",{href:!0,rel:!0});var YN=l(Be);cD=a(YN,"여기"),YN.forEach(t),rD=a(av,"서 확인할 수 있다."),av.forEach(t),N2=i(n),x2=p(n,"BR",{}),j2=i(n),I=p(n,"P",{});var Zn=l(I);uD=a(Zn,`사실 이러한 방식에는 원칙적으로는 문제가 있다.
우리는 JSON에 작성된 날짜 포맷을 날짜 자료구조 필드값으로 변환하는데, 이는 `),Su=p(Zn,"CODE",{});var gN=l(Su);iD=a(gN,"encoding/json"),gN.forEach(t),dD=a(Zn,` 방식의 단점이다.
`),Tu=p(Zn,"CODE",{});var nx=l(Tu);kD=a(nx,"RFC822ZTime"),nx.forEach(t),fD=a(Zn,"가 아닌 "),hu=p(Zn,"CODE",{});var sx=l(hu);ED=a(sx,"Order"),sx.forEach(t),vD=a(Zn,"타입이 "),Hu=p(Zn,"CODE",{});var tx=l(Hu);_D=a(tx,"json.Marshaler"),tx.forEach(t),mD=a(Zn,"나 "),Mu=p(Zn,"CODE",{});var ex=l(Mu);CD=a(ex,"json.Unmarshaler"),ex.forEach(t),OD=a(Zn,` 인터페이스를 충족시키게끔 할 수도 있었을 것이다.
다만 그렇게 하면 모든 필드를 직접 처리하도록 코드를 작성해주어야 한다. 직접 처리할 필요가 없는 필드에 대해서도 말이다.
struct tag는 함수가 특정 필드만 파싱하도록 명시할 수 없기 때문에, 필드에 대한 타입을 직접 생성해주어야 하는 것이다.`),Zn.forEach(t),L2=i(n),Ra=p(n,"P",{});var ax=l(Ra);DD=a(ax,`JSON을 파싱하는 코드의 양을 제한하려면 두 개의 각기 다른 구조체를 정의해야 한다.
하나는 JSON으로 변환하거나 변환되는 것이며, 다른 하나는 데이터 처리에 관련된 것이다.
읽기를 할 때는 JSON을 JSON 인식 유형으로 읽은 다음, 이를 다른 유형으로 복사한다.
반면 JSON으로 쓰기를 하려면 이를 반대로 해주면 된다.
이 방식은 코드에 중복성이 생기기는 하지만, 비즈니스 로직이 통신 프로토콜에 의존하는 것을 방지해준다.`),ax.forEach(t),A2=i(n),Yn=p(n,"P",{});var ca=l(Yn);Nu=p(ca,"CODE",{});var ox=l(Nu);bD=a(ox,"json.Marshal()"),ox.forEach(t),RD=a(ca,"이나 "),xu=p(ca,"CODE",{});var px=l(xu);yD=a(px,"json.Unmarshal()"),px.forEach(t),PD=a(ca," 함수에 "),ju=p(ca,"CODE",{});var lx=l(ju);wD=a(lx,"map[string]interface{}"),lx.forEach(t),SD=a(ca,` 타입을 파라미터로 보낼 수도 있다.
다만 이는 JSON에 무엇이 저장되어 있는지 확인하는 용도로만 쓰고, 확인한 이후에는 concrete type으로 변환해주는 것이 좋다.
Go에서 타입은 그 자체로 처리할 데이터에 대한 문서 역할도 하니 말이다.`),ca.forEach(t),B2=i(n),ht=p(n,"P",{});var ov=l(ht);TD=a(ov,`Go의 표준 라이브러리는 JSON뿐만 아니라 XML, Base64 등, 다양한 인코더와 디코더를 제공한다.
만약 인코딩해야 할 데이터 포맷이 있는데 이를 지원하는 표준 또는 서드 파티 라이브러리를 찾을 수 없다면, 직접 작성해주어야 한다.
직접 작성하는 법은 `),Lu=p(ov,"EM",{});var cx=l(Lu);hD=a(cx,"Reflection"),cx.forEach(t),HD=a(ov,"을 다루는 포스트에서 추후 다룰 예정이다."),ov.forEach(t),W2=i(n),ya=p(n,"BLOCKQUOTE",{});var rx=l(ya);nn=p(rx,"P",{});var Qn=l(nn);MD=a(Qn,"표준 라이브러리 중 "),Au=p(Qn,"CODE",{});var ux=l(Au);ND=a(ux,"encoding/gob"),ux.forEach(t),xD=a(Qn,` 패키지는 Go의 바이너리 데이터 인코딩으로, Java의 serialization이랑 비슷하다.
Java serialization을 Java RMI나 Enterprise Java Beans에서 사용하는 것처럼,
`),Bu=p(Qn,"CODE",{});var ix=l(Bu);jD=a(ix,"gob"),ix.forEach(t),LD=a(Qn," 프로토콜은 Go의 RPC("),Wu=p(Qn,"CODE",{});var dx=l(Wu);AD=a(dx,"net/rpc"),dx.forEach(t),BD=a(Qn,` 패키지)에서 사용하는 프로토콜이다.
다만 `),qu=p(Qn,"CODE",{});var kx=l(qu);WD=a(kx,"encoding/gob"),kx.forEach(t),qD=a(Qn,"나 "),Fu=p(Qn,"CODE",{});var fx=l(Fu);FD=a(fx,"net/rpc"),fx.forEach(t),JD=a(Qn,` 둘 다 사용하지 않는 것을 권장한다.
특정 언어에 구애되지 않는 gRPC라는 좋은 프로토콜이 있다.`),Qn.forEach(t),rx.forEach(t),q2=i(n),F2=p(n,"BR",{}),J2=p(n,"BR",{}),G2=i(n),Ht=p(n,"H2",{id:!0});var eS=l(Ht);Mt=p(eS,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Ex=l(Mt);Ju=p(Ex,"SPAN",{class:!0}),l(Ju).forEach(t),Ex.forEach(t),GD=a(eS,"net/http"),eS.forEach(t),I2=i(n),U2=p(n,"HR",{}),z2=i(n),Pa=p(n,"P",{});var vx=l(Pa);ID=a(vx,`Go에는 HTTP/2 클라이언트 및 서버를 작성하는 표준 라이브러리가 있다.
클라이언트 및 서버의 코드 작성 예를 알아보자.`),vx.forEach(t),Z2=i(n),Q2=p(n,"BR",{}),$2=p(n,"BR",{}),K2=i(n),Nt=p(n,"H3",{id:!0});var aS=l(Nt);xt=p(aS,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var _x=l(xt);Gu=p(_x,"SPAN",{class:!0}),l(Gu).forEach(t),_x.forEach(t),UD=a(aS,"The Client"),aS.forEach(t),V2=i(n),A=p(n,"P",{});var Tn=l(A);Iu=p(Tn,"CODE",{});var mx=l(Iu);zD=a(mx,"net/http"),mx.forEach(t),ZD=a(Tn," 패키지에는 http request를 생성하고 http response를 받는, "),Uu=p(Tn,"CODE",{});var Cx=l(Uu);QD=a(Cx,"Client"),Cx.forEach(t),$D=a(Tn,` 타입이 정의되어 있다.
`),zu=p(Tn,"CODE",{});var Ox=l(zu);KD=a(Ox,"net/http"),Ox.forEach(t),VD=a(Tn,"에 정의된 가장 기본적인 클라이언트 인스턴스("),Zu=p(Tn,"CODE",{});var Dx=l(Zu);XD=a(Dx,"DefaultClient"),Dx.forEach(t),YD=a(Tn,`)가 있지만, 릴리즈될 어플리케이션에서는 이를 사용하지 않는 것이 좋다.
기본적으로 `),Qu=p(Tn,"CODE",{});var bx=l(Qu);gD=a(bx,"DefaultClient"),bx.forEach(t),nb=a(Tn,`에는 타임아웃이 없다. 따라서 직접 인스턴스 하나를 생성해 주는 것이 좋다.
기억해야 할 점은 프로그램 전체에서 단 한 개의 `),$u=p(Tn,"CODE",{});var Rx=l($u);sb=a(Rx,"http.Client"),Rx.forEach(t),tb=a(Tn,` 인스턴스만 생성하면,
여러 개의 고루틴이 돌아간다고 해도 요청들을 충분히 처리할 수 있다는 것이다.`),Tn.forEach(t),X2=i(n),We=p(n,"PRE",{class:!0});var tB=l(We);tB.forEach(t),Y2=i(n),g2=p(n,"BR",{}),nE=i(n),T=p(n,"P",{});var $=l(T);eb=a($,"새로운 요청을 생성하려면 "),Ku=p($,"CODE",{});var yx=l(Ku);ab=a(yx,"http.NewRequsetWithContext()"),yx.forEach(t),ob=a($," 함수에 context, requset method, URL을 넘겨서 "),Vu=p($,"CODE",{});var Px=l(Vu);pb=a(Px,"*http.Requset"),Px.forEach(t),lb=a($,` 인스턴스를 생성해준다.
만약 request method가 `),Xu=p($,"CODE",{});var wx=l(Xu);cb=a(wx,"PUT"),wx.forEach(t),rb=a($,", "),Yu=p($,"CODE",{});var Sx=l(Yu);ub=a(Sx,"POST"),Sx.forEach(t),ib=a($,", "),gu=p($,"CODE",{});var Tx=l(gu);db=a(Tx,"PATCH"),Tx.forEach(t),kb=a($,"라면, 마지막 파라미터로 "),ni=p($,"CODE",{});var hx=l(ni);fb=a(hx,"io.Reader"),hx.forEach(t),Eb=a($,` 타입의 request body를 작성해줘야 한다.
만약 request body가 없다면, `),si=p($,"CODE",{});var Hx=l(si);vb=a(Hx,"nil"),Hx.forEach(t),_b=a($,"을 쓰면 된다."),$.forEach(t),sE=i(n),Bn=p(n,"P",{});var se=l(Bn);mb=a(se,"또한 이렇게 생성한 "),ti=p(se,"CODE",{});var Mx=l(ti);Cb=a(Mx,"*http.Requset"),Mx.forEach(t),Ob=a(se," 인스턴스의 "),ei=p(se,"CODE",{});var Nx=l(ei);Db=a(Nx,"Header"),Nx.forEach(t),bb=a(se,` 필드의 메소드들을 호출하여 request header를 설정할 수 있다.
아래 예제에서는 `),ai=p(se,"CODE",{});var xx=l(ai);Rb=a(xx,"Add()"),xx.forEach(t),yb=a(se," 메소드로 request header를 추가해주었다."),se.forEach(t),tE=i(n),qe=p(n,"PRE",{class:!0});var eB=l(qe);eB.forEach(t),eE=i(n),aE=p(n,"BR",{}),oE=i(n),bn=p(n,"P",{});var zs=l(bn);oi=p(zs,"CODE",{});var jx=l(oi);Pb=a(jx,"*http.Requset"),jx.forEach(t),wb=a(zs,` 인스턴스의 설정을 마쳤다면, 이제 요청을 전송해보자.
`),pi=p(zs,"CODE",{});var Lx=l(pi);Sb=a(Lx,"http.Client"),Lx.forEach(t),Tb=a(zs,"의 "),li=p(zs,"CODE",{});var Ax=l(li);hb=a(Ax,"Do()"),Ax.forEach(t),Hb=a(zs," 메소드를 호출하면 요청이 전송되고, 요청에 대한 응답에 해당하는 "),ci=p(zs,"CODE",{});var Bx=l(ci);Mb=a(Bx,"http.Response"),Bx.forEach(t),Nb=a(zs," 인스턴스를 리턴 값으로 받을 것이다."),zs.forEach(t),pE=i(n),Fe=p(n,"PRE",{class:!0});var aB=l(Fe);aB.forEach(t),lE=i(n),cE=p(n,"BR",{}),rE=i(n),h=p(n,"P",{});var K=l(h);xb=a(K,"이렇게 전송받은 "),ri=p(K,"CODE",{});var Wx=l(ri);jb=a(Wx,"http.Response"),Wx.forEach(t),Lb=a(K,` 인스턴스의 필드값들은 요청에 대한 정보를 담고 있다.
response status code는 `),ui=p(K,"CODE",{});var qx=l(ui);Ab=a(qx,"StatusCode"),qx.forEach(t),Bb=a(K," 필드에 저장되며, response status message는 "),ii=p(K,"CODE",{});var Fx=l(ii);Wb=a(Fx,"Status"),Fx.forEach(t),qb=a(K,` 필드에 저장된다.
또한 response header는 `),di=p(K,"CODE",{});var Jx=l(di);Fb=a(Jx,"Header"),Jx.forEach(t),Jb=a(K," 필드에, response body는 "),ki=p(K,"CODE",{});var Gx=l(ki);Gb=a(Gx,"Body"),Gx.forEach(t),Ib=a(K," 필드에 "),fi=p(K,"CODE",{});var Ix=l(fi);Ub=a(Ix,"io.ReadCloser"),Ix.forEach(t),zb=a(K,` 타입으로 저장된다.
따라서 `),Ei=p(K,"CODE",{});var Ux=l(Ei);Zb=a(Ux,"json.Decoder"),Ux.forEach(t),Qb=a(K,"를 이용해서 REST API 응답을 처리할 수 있다."),K.forEach(t),uE=i(n),Je=p(n,"PRE",{class:!0});var oB=l(Je);oB.forEach(t),iE=i(n),wa=p(n,"P",{});var zx=l(wa);$b=a(zx,"위 예제의 실행 결과는 다음과 같다."),zx.forEach(t),dE=i(n),Ge=p(n,"PRE",{class:!0});var pB=l(Ge);pB.forEach(t),kE=i(n),fE=p(n,"BR",{}),EE=i(n),Sa=p(n,"BLOCKQUOTE",{});var Zx=l(Sa);fn=p(Zx,"P",{});var es=l(fn);vi=p(es,"CODE",{});var Qx=l(vi);Kb=a(Qx,"net/http"),Qx.forEach(t),Vb=a(es," 패키지에는 "),_i=p(es,"CODE",{});var $x=l(_i);Xb=a($x,"http.Get()"),$x.forEach(t),Yb=a(es,", "),mi=p(es,"CODE",{});var Kx=l(mi);gb=a(Kx,"http.Head()"),Kx.forEach(t),nR=a(es,", "),Ci=p(es,"CODE",{});var Vx=l(Ci);sR=a(Vx,"http.Post()"),Vx.forEach(t),tR=a(es,`등 요청을 보내는 함수가 있다.
이 함수들은 `),Oi=p(es,"CODE",{});var Xx=l(Oi);eR=a(Xx,"DefaultClient"),Xx.forEach(t),aR=a(es,"로 요청을 보내기 때문에 사용하지 않는 것이 좋다(얘네 타임아웃이 없다)."),es.forEach(t),Zx.forEach(t),vE=i(n),_E=p(n,"BR",{}),mE=p(n,"BR",{}),CE=i(n),jt=p(n,"H3",{id:!0});var oS=l(jt);Lt=p(oS,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Yx=l(Lt);Di=p(Yx,"SPAN",{class:!0}),l(Di).forEach(t),Yx.forEach(t),oR=a(oS,"The Server"),oS.forEach(t),OE=i(n),En=p(n,"P",{});var xs=l(En);pR=a(xs,"HTTP 서버는 "),bi=p(xs,"CODE",{});var gx=l(bi);lR=a(gx,"http.Server"),gx.forEach(t),cR=a(xs,"와 "),Ri=p(xs,"CODE",{});var nj=l(Ri);rR=a(nj,"http.Handler"),nj.forEach(t),uR=a(xs,` 인터페이스의 개념에 기반하여 구축한다.
`),yi=p(xs,"CODE",{});var sj=l(yi);iR=a(sj,"http.Client"),sj.forEach(t),dR=a(xs,"는 http request를 전송하는 역할을 하듯, "),Pi=p(xs,"CODE",{});var tj=l(Pi);kR=a(tj,"http.Server"),tj.forEach(t),fR=a(xs,"는 TLS를 지원하며, http request를 핸들링하는 성능 좋은 HTTP/2 서버이다."),xs.forEach(t),DE=i(n),At=p(n,"P",{});var pv=l(At);ER=a(pv,"서버에 대한 요청은 "),wi=p(pv,"CODE",{});var ej=l(wi);vR=a(ej,"http.Handler"),ej.forEach(t),_R=a(pv,` 인터페이스를 충족시키는 타입에 의해 핸들링된다.
이 인터페이스는 단일 메소드를 정의한다.`),pv.forEach(t),bE=i(n),Ie=p(n,"PRE",{class:!0});var lB=l(Ie);lB.forEach(t),RE=i(n),yE=p(n,"BR",{}),PE=i(n),Rn=p(n,"P",{});var Zs=l(Rn);Si=p(Zs,"CODE",{});var aj=l(Si);mR=a(aj,"ServeHTTP()"),aj.forEach(t),CR=a(Zs,"의 파라미터 중 "),Ti=p(Zs,"CODE",{});var oj=l(Ti);OR=a(oj,"*http.Request"),oj.forEach(t),DR=a(Zs,"는 "),hi=p(Zs,"CODE",{});var pj=l(hi);bR=a(pj,"http.Client"),pj.forEach(t),RR=a(Zs,`로 요청을 보낼 때 사용했던 타입과 동일한 것이다.
`),Hi=p(Zs,"CODE",{});var lj=l(Hi);yR=a(lj,"http.ResponseWriter"),lj.forEach(t),PR=a(Zs," 인터페이스는 아래처럼 세 개의 메소드를 정의한다."),Zs.forEach(t),wE=i(n),Ue=p(n,"PRE",{class:!0});var cB=l(Ue);cB.forEach(t),SE=i(n),Ta=p(n,"P",{});var cj=l(Ta);wR=a(cj,"이 세 개의 메소드는 반드시 일정한 순서대로 호출된다."),cj.forEach(t),TE=i(n),Wn=p(n,"P",{});var te=l(Wn);SR=a(te,"가장 먼저 호출되는 것은 "),Mi=p(te,"CODE",{});var rj=l(Mi);TR=a(rj,"Header()"),rj.forEach(t),hR=a(te,"로, "),Ni=p(te,"CODE",{});var uj=l(Ni);HR=a(uj,"http.Header"),uj.forEach(t),MR=a(te,` 인스턴스를 리턴받아서 response header를 설정하기 위해 사용된다.
특별히 response header를 설정할 필요가 없다면 `),xi=p(te,"CODE",{});var ij=l(xi);NR=a(ij,"Header()"),ij.forEach(t),xR=a(te,"를 반드시 호출할 필요는 없다."),te.forEach(t),hE=i(n),qn=p(n,"P",{});var ee=l(qn);jR=a(ee,"그 다음으로는 response status code를 설정하기 위해 "),ji=p(ee,"CODE",{});var dj=l(ji);LR=a(dj,"WriteHeader()"),dj.forEach(t),AR=a(ee,`를 호출한다.
이때 모든 status code는 `),Li=p(ee,"CODE",{});var kj=l(Li);BR=a(kj,"net/http"),kj.forEach(t),WR=a(ee,`에 상수로 정의되어 있다.
(패키지 레벨에서 status code에 대한 특정한 타입이 정의되었으면 좋았을 텐데, 그렇지 않다.
실제로 status code들은 특별한 타입이 없는 그냥 정수형이다.)
만약 status code 200을 보내려고 한다면 `),Ai=p(ee,"CODE",{});var fj=l(Ai);qR=a(fj,"WriteHeader()"),fj.forEach(t),FR=a(ee,"를 굳이 호출해줄 필요는 없다."),ee.forEach(t),HE=i(n),Bt=p(n,"P",{});var lv=l(Bt);JR=a(lv,"마지막으로 "),Bi=p(lv,"CODE",{});var Ej=l(Bi);GR=a(Ej,"Write()"),Ej.forEach(t),IR=a(lv,"를 호출하여, response body를 설정해준다."),lv.forEach(t),ME=i(n),NE=p(n,"BR",{}),xE=i(n),ha=p(n,"P",{});var vj=l(ha);UR=a(vj,"가장 기본적인 형태의 handler를 작성해보자."),vj.forEach(t),jE=i(n),ze=p(n,"PRE",{class:!0});var rB=l(ze);rB.forEach(t),LE=i(n),Wt=p(n,"P",{});var cv=l(Wt);zR=a(cv,"어차피 구조체의 필드는 그렇게 중요하지 않으니 비워 두었고, 필요한 "),Wi=p(cv,"CODE",{});var _j=l(Wi);ZR=a(_j,"ServeHTTP()"),_j.forEach(t),QR=a(cv," 메소드만 정의해 주었다."),cv.forEach(t),AE=i(n),BE=p(n,"BR",{}),WE=i(n),qt=p(n,"P",{});var rv=l(qt);$R=a(rv,"새로운 "),qi=p(rv,"CODE",{});var mj=l(qi);KR=a(mj,"http.Server"),mj.forEach(t),VR=a(rv," 인스턴스를 생성하여, 서버를 열어보자."),rv.forEach(t),qE=i(n),Ze=p(n,"PRE",{class:!0});var uB=l(Ze);uB.forEach(t),FE=i(n),As=p(n,"P",{});var ak=l(As);Fi=p(ak,"CODE",{});var Cj=l(Fi);XR=a(Cj,"http.Server"),Cj.forEach(t),YR=a(ak,"의 "),Ji=p(ak,"CODE",{});var Oj=l(Ji);gR=a(Oj,"Addr"),Oj.forEach(t),ny=a(ak,` 필드는 서버가 열릴 호스트 주소와 포트를 지정한다.
따로 지정해주지 않으면 모든 호스트 주소에 대해 HTTP 표준 포트인 80으로 서버를 열 것이다.`),ak.forEach(t),JE=i(n),yn=p(n,"P",{});var Qs=l(yn);Gi=p(Qs,"CODE",{});var Dj=l(Gi);sy=a(Dj,"ReadTimeout"),Dj.forEach(t),ty=a(Qs,", "),Ii=p(Qs,"CODE",{});var bj=l(Ii);ey=a(bj,"WriteTimeout"),bj.forEach(t),ay=a(Qs,", "),Ui=p(Qs,"CODE",{});var Rj=l(Ui);oy=a(Rj,"IdleTimeout"),Rj.forEach(t),py=a(Qs," 필드는 서버의 읽기, 쓰기, 유휴 상태의 타임아웃을 "),zi=p(Qs,"CODE",{});var yj=l(zi);ly=a(yj,"time.Duration"),yj.forEach(t),cy=a(Qs,`값으로 명시할 수 있다.
기본적으로 타임아웃을 두지 않기 때문에, 이 필드를 지정해주지 않으면 잘못된 요청을 적절히 핸들링하지 못할 것이다.`),Qs.forEach(t),GE=i(n),Bs=p(n,"P",{});var ok=l(Bs);Zi=p(ok,"CODE",{});var Pj=l(Zi);ry=a(Pj,"Hander"),Pj.forEach(t),uy=a(ok," 필드에 "),Qi=p(ok,"CODE",{});var wj=l(Qi);iy=a(wj,"http.Handler"),wj.forEach(t),dy=a(ok,"를 충족시키는 타입을 지정해주면 된다."),ok.forEach(t),IE=i(n),UE=p(n,"BR",{}),zE=i(n),x=p(n,"P",{});var _n=l(x);ky=a(_n,`단일 종류의 요청만 받는 서버는 별로 쓸데가 없을 것이다.
Go 표준 라이브러리에는 요청 라우터인, `),$i=p(_n,"CODE",{});var Sj=l($i);fy=a(Sj,"*http.ServeMux"),Sj.forEach(t),Ey=a(_n,`를 포함하고 있다.
`),Ki=p(_n,"CODE",{});var Tj=l(Ki);vy=a(Tj,"http.NewServerMux()"),Tj.forEach(t),_y=a(_n," 함수로 새로운 "),Vi=p(_n,"CODE",{});var hj=l(Vi);my=a(hj,"*http.ServeMux"),hj.forEach(t),Cy=a(_n,` 인스턴스를 생성할 수 있으며,
이는 `),Xi=p(_n,"CODE",{});var Hj=l(Xi);Oy=a(Hj,"http.Handler"),Hj.forEach(t),Dy=a(_n," 인터페이스를 충족시키기 때문에 "),Yi=p(_n,"CODE",{});var Mj=l(Yi);by=a(Mj,"http.Server"),Mj.forEach(t),Ry=a(_n,"의 "),gi=p(_n,"CODE",{});var Nj=l(gi);yy=a(Nj,"Handler"),Nj.forEach(t),Py=a(_n," 필드에 할당될 수 있다."),_n.forEach(t),ZE=i(n),U=p(n,"P",{});var $n=l(U);wy=a($n,"또한, "),nd=p($n,"CODE",{});var xj=l(nd);Sy=a(xj,"*http.ServeMux"),xj.forEach(t),Ty=a($n,`는 요청을 분류할 수 있는 두 개의 메소드를 포함하고 있다.
첫 번째 메소드는 두 개의 파라미터를 받는 `),sd=p($n,"CODE",{});var jj=l(sd);hy=a(jj,"Handle()"),jj.forEach(t),Hy=a($n,"로, 두 개의 파라미터는 각각 주소 경로와 "),td=p($n,"CODE",{});var Lj=l(td);My=a(Lj,"http.Handler"),Lj.forEach(t),Ny=a($n,` 인스턴스이다.
만약 주소가 일치한다면 `),ed=p($n,"CODE",{});var Aj=l(ed);xy=a(Aj,"http.Handler"),Aj.forEach(t),jy=a($n,`가 호출될 것이다.
또 다른 방법은 더 일반적으로 사용하는 `),ad=p($n,"CODE",{});var Bj=l(ad);Ly=a(Bj,"HandleFunc()"),Bj.forEach(t),Ay=a($n," 메소드이다."),$n.forEach(t),QE=i(n),Qe=p(n,"PRE",{class:!0});var iB=l(Qe);iB.forEach(t),$E=i(n),Fn=p(n,"P",{});var ae=l(Fn);By=a(ae,"이 메소드에서 볼 수 있듯 파라미터로 주소 경로와, "),od=p(ae,"CODE",{});var Wj=l(od);Wy=a(Wj,"http.Handler"),Wj.forEach(t),qy=a(ae,"의 "),pd=p(ae,"CODE",{});var qj=l(pd);Fy=a(qj,"ServeHTTP()"),qj.forEach(t),Jy=a(ae,`를 만족시키는 closure를 작성해 주었다.
해당 패턴은 인터페이스 포스트의 `),$e=p(ae,"A",{href:!0,rel:!0});var Fj=l($e);Gy=a(Fj,"Function Types Are a Bridge to Interfaces"),Fj.forEach(t),Iy=a(ae,"에서 소개하였으니, 확인할 수 있다."),ae.forEach(t),KE=i(n),Ft=p(n,"P",{});var uv=l(Ft);Uy=a(uv,`다만 핸들러가 다른 비즈니스 로직을 사용하여 더 복잡해질 경우, 구조체 타입에 메소드를 정의하여 사용해주는 것이 좋다.
이에 관련된 내용도 인터페이스 포스트의 `),Ke=p(uv,"A",{href:!0,rel:!0});var Jj=l(Ke);zy=a(Jj,"Implicit Interfaces Make Dependency Injection Easier"),Jj.forEach(t),Zy=a(uv,"에서 소개하였다."),uv.forEach(t),VE=i(n),XE=p(n,"BR",{}),YE=i(n),Jt=p(n,"BLOCKQUOTE",{});var iv=l(Jt);j=p(iv,"P",{});var an=l(j);ld=p(an,"CODE",{});var Gj=l(ld);Qy=a(Gj,"net/http"),Gj.forEach(t),$y=a(an,"에는 패키지 레벨 함수인 "),cd=p(an,"CODE",{});var Ij=l(cd);Ky=a(Ij,"http.Handle"),Ij.forEach(t),Vy=a(an,", "),rd=p(an,"CODE",{});var Uj=l(rd);Xy=a(Uj,"http.HandleFunc"),Uj.forEach(t),Yy=a(an,", "),ud=p(an,"CODE",{});var zj=l(ud);gy=a(zj,"http.ListenAndServe"),zj.forEach(t),nP=a(an,", "),id=p(an,"CODE",{});var Zj=l(id);sP=a(Zj,"http.ListenAndServeTLS"),Zj.forEach(t),tP=a(an,` 함수가 있으며,
이들은 `),dd=p(an,"CODE",{});var Qj=l(dd);eP=a(Qj,"*http.ServeMux"),Qj.forEach(t),aP=a(an,"의 패키지 레벨 인스턴스인 "),kd=p(an,"CODE",{});var $j=l(kd);oP=a($j,"http.DefaultServeMux"),$j.forEach(t),pP=a(an,`를 기준으로 동작한다.
예상되겠지만, 이 함수들은 릴리즈될 어플리케이션에서는 사용이 권장되지 않는다.`),an.forEach(t),lP=i(iv),Jn=p(iv,"P",{});var $s=l(Jn);fd=p($s,"CODE",{});var Kj=l(fd);cP=a(Kj,"http.Server"),Kj.forEach(t),rP=a($s," 인스턴스가 "),Ed=p($s,"CODE",{});var Vj=l(Ed);uP=a(Vj,"http.ListenAndServe"),Vj.forEach(t),iP=a($s,"나 "),vd=p($s,"CODE",{});var Xj=l(vd);dP=a(Xj,"http.ListenAndServeTLS"),Xj.forEach(t),kP=a($s,`에서 생성되기 때문에, 타임아웃과 같은 설정을 지정해줄 수 없다.
뿐만 아니라 서드 파티 라이브러리가 `),_d=p($s,"CODE",{});var Yj=l(_d);fP=a(Yj,"http.DefaultServeMux"),Yj.forEach(t),EP=a($s,`에 자체 핸들러를 등록해버릴 수 있기 때문에,
모든 의존성들을 스캔하지 않고는 이를 알 수 없다.
어플리케이션이 shared state로 인해 통제되는 상황은 되도록 피해야 한다.`),$s.forEach(t),iv.forEach(t),gE=i(n),n3=p(n,"BR",{}),s3=i(n),sn=p(n,"P",{});var as=l(sn);md=p(as,"CODE",{});var gj=l(md);vP=a(gj,"*http.ServeMux"),gj.forEach(t),_P=a(as,"는 "),Cd=p(as,"CODE",{});var nL=l(Cd);mP=a(nL,"http.Handler"),nL.forEach(t),CP=a(as,"에 요청을 보내고 "),Od=p(as,"CODE",{});var sL=l(Od);OP=a(sL,"http.Handler"),sL.forEach(t),DP=a(as,` 인터페이스를 충족시키기 때문에,
여러 관련된 요청에 대한 `),Dd=p(as,"CODE",{});var tL=l(Dd);bP=a(tL,"*http.ServeMux"),tL.forEach(t),RP=a(as," 인스턴스를 생성하고, 부모 "),bd=p(as,"CODE",{});var eL=l(bd);yP=a(eL,"*http.ServeMux"),eL.forEach(t),PP=a(as,"에 등록할 수 있다."),as.forEach(t),t3=i(n),Ve=p(n,"PRE",{class:!0});var dB=l(Ve);dB.forEach(t),e3=i(n),Ha=p(n,"P",{});var aL=l(Ha);wP=a(aL,"위 예제의 구조를 이해하는 것이 그렇게 어렵진 않을 것이다."),aL.forEach(t),a3=i(n),Pn=p(n,"P",{});var Ks=l(Pn);Rd=p(Ks,"CODE",{});var oL=l(Rd);SP=a(oL,"/person/greet"),oL.forEach(t),TP=a(Ks,"로 요청을 보내면 "),yd=p(Ks,"CODE",{});var pL=l(yd);hP=a(pL,"person"),pL.forEach(t),HP=a(Ks,`에 붙어있는 핸들러로 처리되며,
`),Pd=p(Ks,"CODE",{});var lL=l(Pd);MP=a(lL,"/dog/greet"),lL.forEach(t),NP=a(Ks,"로 요청을 보내면 "),wd=p(Ks,"CODE",{});var cL=l(wd);xP=a(cL,"dog"),cL.forEach(t),jP=a(Ks,"에 붙어있는 핸들러로 처리가 된다."),Ks.forEach(t),o3=i(n),tn=p(n,"P",{});var os=l(tn);Sd=p(os,"CODE",{});var rL=l(Sd);LP=a(rL,"person"),rL.forEach(t),AP=a(os,"과 "),Td=p(os,"CODE",{});var uL=l(Td);BP=a(uL,"dog"),uL.forEach(t),WP=a(os,"를 "),hd=p(os,"CODE",{});var iL=l(hd);qP=a(iL,"mux"),iL.forEach(t),FP=a(os,"에 등록할 때 "),Hd=p(os,"CODE",{});var dL=l(Hd);JP=a(dL,"http.StripPrefix()"),dL.forEach(t),GP=a(os,` 함수를 사용하여,
주소에서 `),Md=p(os,"CODE",{});var kL=l(Md);IP=a(kL,"mux"),kL.forEach(t),UP=a(os,"에 의해 이미 처리된 부분을 제거해주었다."),os.forEach(t),p3=i(n),l3=p(n,"BR",{}),c3=p(n,"BR",{}),r3=i(n),Gt=p(n,"H3",{id:!0});var pS=l(Gt);It=p(pS,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var fL=l(It);Nd=p(fL,"SPAN",{class:!0}),l(Nd).forEach(t),fL.forEach(t),zP=a(pS,"Middleware"),pS.forEach(t),u3=i(n),z=p(n,"P",{});var Kn=l(z);ZP=a(Kn,`HTTP 서버의 또 다른 중요한 요소 중 하나는 로그인 여부 확인, 요청 시간 체크, 요청 헤더 체크 등 여러 동작을 수행하는 것이다.
Go에서는 이러한 연관된 기능들을 `),xd=p(Kn,"EM",{});var EL=l(xd);QP=a(EL,"미들웨어"),EL.forEach(t),$P=a(Kn,`를 사용하여 구현한다.
미들웨어는 특별한 타입을 사용하지 않고, `),jd=p(Kn,"CODE",{});var vL=l(jd);KP=a(vL,"http.Handler"),vL.forEach(t),VP=a(Kn,"를 파라미터로 받아 "),Ld=p(Kn,"CODE",{});var _L=l(Ld);XP=a(_L,"http.Handler"),_L.forEach(t),YP=a(Kn,`를 반환하는 함수를 작성하여 사용한다.
대개 반환된 `),Ad=p(Kn,"CODE",{});var mL=l(Ad);gP=a(mL,"http.Handler"),mL.forEach(t),nw=a(Kn,"는 "),Bd=p(Kn,"CODE",{});var CL=l(Bd);sw=a(CL,"http.HandlerFunc"),CL.forEach(t),tw=a(Kn,"로 반환될 수 있는 closure가 된다."),Kn.forEach(t),i3=i(n),d3=p(n,"BR",{}),k3=i(n),Ma=p(n,"P",{});var OL=l(Ma);ew=a(OL,`아래 예제에는 두 개의 미들웨어 생성기가 있다.
하나는 요청의 시간을 재는 것이고, 또 하나는 액세스 제어의 나쁜 예라고 할 수 있다.`),OL.forEach(t),f3=i(n),Xe=p(n,"PRE",{class:!0});var kB=l(Xe);kB.forEach(t),E3=i(n),Rs=p(n,"P",{});var Ka=l(Rs);aw=a(Ka,`이 두 개의 미들웨어 구현을 보면 미들웨어가 무슨 역할을 하는지 알 수 있을 것이다.
먼저 연산이나 조건 검사를 하기 위한 셋업을 한 후,
조건을 만족하지 않으면 보통 미들웨어에서 error status code와 함께 `),Wd=p(Ka,"CODE",{});var DL=l(Wd);ow=a(DL,"Write()"),DL.forEach(t),pw=a(Ka,`로 출력을 한 후 함수를 리턴한다.
만약 문제가 없다면, 다음 핸들러의 `),qd=p(Ka,"CODE",{});var bL=l(qd);lw=a(bL,"ServeHTTP()"),bL.forEach(t),cw=a(Ka,` 메소드를 호출한다.
그 후 정리 작업을 수행한다.`),Ka.forEach(t),v3=i(n),Ws=p(n,"P",{});var pk=l(Ws);Fd=p(pk,"CODE",{});var RL=l(Fd);rw=a(RL,"TerribleSecurityProvider()"),RL.forEach(t),uw=a(pk,`는 직접 설정 가능한 미들웨어를 생성하는 예제라고 할 수 있다.
설정 정보(예제에서는 비밀번호)를 `),Jd=p(pk,"CODE",{});var yL=l(Jd);iw=a(yL,"TerribleSecurityProvider()"),yL.forEach(t),dw=a(pk,`의 파라미터로 보내면, 해당 정보를 사용하는 미들웨어를 반환한다.
다만 closure를 반환하는 closure를 반환하기 때문에(쓰기도 어려움;), 살짝 마음에 걸리는 것이다.`),pk.forEach(t),_3=i(n),m3=p(n,"BR",{}),C3=i(n),Na=p(n,"BLOCKQUOTE",{});var PL=l(Na);Gd=p(PL,"P",{});var wL=l(Gd);kw=a(wL,"미들웨어 레이어에서의 값의 전달은 context를 통해 이루어진다."),wL.forEach(t),PL.forEach(t),O3=i(n),D3=p(n,"BR",{}),b3=i(n),xa=p(n,"P",{});var SL=l(xa);fw=a(SL,"미들웨어를 연결하여 request handler에 추가해보자."),SL.forEach(t),R3=i(n),Ye=p(n,"PRE",{class:!0});var fB=l(Ye);fB.forEach(t),y3=i(n),Gn=p(n,"P",{});var oe=l(Gn);Ew=a(oe,"위 예제에서 우리는 "),Id=p(oe,"CODE",{});var TL=l(Id);vw=a(TL,"TerribleSecurityProvider()"),TL.forEach(t),_w=a(oe,`로부터 미들웨어를 생성하고, 핸들러를 각각의 함수 호출로 감싸주었다.
구조적으로 `),Ud=p(oe,"CODE",{});var hL=l(Ud);mw=a(hL,"terribleSecurity()"),hL.forEach(t),Cw=a(oe," closure가 먼저 호출되고, 그 다음으로 "),zd=p(oe,"CODE",{});var HL=l(zd);Ow=a(HL,"RequestTimer"),HL.forEach(t),Dw=a(oe,", 그 다음으로 원래의 request handler가 호출된다."),oe.forEach(t),P3=i(n),qs=p(n,"P",{});var lk=l(qs);Zd=p(lk,"CODE",{});var ML=l(Zd);bw=a(ML,"*http.ServeMux"),ML.forEach(t),Rw=a(lk,"는 "),Qd=p(lk,"CODE",{});var NL=l(Qd);yw=a(NL,"http.Handler"),NL.forEach(t),Pw=a(lk,` 인터페이스를 충족시킨다.
아래처럼 적용하면 미들웨어들을 request router에 등록된 모든 핸들러에 적용할 수 있다.`),lk.forEach(t),w3=i(n),ge=p(n,"PRE",{class:!0});var EB=l(ge);EB.forEach(t),S3=i(n),T3=p(n,"BR",{}),h3=p(n,"BR",{}),H3=i(n),Ut=p(n,"H3",{id:!0});var lS=l(Ut);zt=p(lS,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var xL=l(zt);$d=p(xL,"SPAN",{class:!0}),l($d).forEach(t),xL.forEach(t),ww=a(lS,"Use idiomatic third-party modules to enhance the server"),lS.forEach(t),M3=i(n),ja=p(n,"P",{});var jL=l(ja);Sw=a(jL,`서버에 서드파티 라이브러리를 사용하여 기능을 개선할 수 있다.
위 예제에서 보았던 미들웨어의 chain이 마음에 들지 않는다면, alice라는 서드파티 라이브러리를 사용할 수 있다.`),jL.forEach(t),N3=i(n),na=p(n,"PRE",{class:!0});var vB=l(na);vB.forEach(t),x3=i(n),j3=p(n,"BR",{}),L3=i(n),ys=p(n,"P",{});var Va=l(ys);Tw=a(Va,"표준 라이브러리를 사용하여 HTTP 서버를 구축하는 것의 가장 큰 문제점은 "),Kd=p(Va,"CODE",{});var LL=l(Kd);hw=a(LL,"*http.ServeMux"),LL.forEach(t),Hw=a(Va,`를 request router로 사용한다는 점이다.
이 request router는 HTTP 메소드나 헤더를 기준으로 구분할 수 없으며, Query parameter도 처리할 수 없다.
게다가 `),Vd=p(Va,"CODE",{});var AL=l(Vd);Mw=a(AL,"*http.ServeMux"),AL.forEach(t),Nw=a(Va," 인스턴스가 중첩되면 너무 거대해지기도 한다."),Va.forEach(t),A3=i(n),In=p(n,"P",{});var pe=l(In);xw=a(pe,"이를 대체하기 위한 프로젝트는 되게 많은데, 대표적인 게 바로 "),sa=p(pe,"A",{href:!0,rel:!0});var BL=l(sa);jw=a(BL,"gorilla mux"),BL.forEach(t),Lw=a(pe,`와 [https://github.com/go-chi/chi]이다.
이 두 라이브러리가 이상적이라 여겨지는 이유는 `),Xd=p(pe,"CODE",{});var WL=l(Xd);Aw=a(WL,"http.Handler"),WL.forEach(t),Bw=a(pe,"나 "),Yd=p(pe,"CODE",{});var qL=l(Yd);Ww=a(qL,"http.HandlerFunc"),qL.forEach(t),qw=a(pe,` 인스턴스와 함께 사용할 수 있기 때문이며,
표준 라이브러리와 잘 어우러질 수 있는 라이브러리를 사용하는 Go의 철학을 보여준다.
또한 관용적인 미들웨어들을 사용할 수 있으며, 주로 사용되는 미들웨어의 구현체를 제공한다.`),pe.forEach(t),B3=i(n),W3=p(n,"BR",{}),q3=p(n,"BR",{}),F3=i(n),Zt=p(n,"H2",{id:!0});var cS=l(Zt);Qt=p(cS,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var FL=l(Qt);gd=p(FL,"SPAN",{class:!0}),l(gd).forEach(t),FL.forEach(t),Fw=a(cS,"References"),cS.forEach(t),J3=i(n),G3=p(n,"HR",{}),I3=i(n),gn=p(n,"CENTER",{});var ra=l(gn);nk=p(ra,"P",{});var JL=l(nk);Jw=a(JL,"["),JL.forEach(t),Gw=i(ra),DB(ta.$$.fragment,ra),Iw=a(ra,`
](https://learning.oreilly.com/library/view/learning-go/9781492077206/) `),Uw=p(ra,"BR",{}),zw=a(ra,`
[Jon Bodner, 『Learning Go』, O'Reilly Media, Inc.](https://learning.oreilly.com/library/view/learning-go/9781492077206/)`),ra.forEach(t),U3=i(n),z3=p(n,"BR",{}),Z3=p(n,"BR",{}),this.h()},h(){d(Xa,"class","icon icon-link"),d(Xs,"aria-hidden","true"),d(Xs,"tabindex","-1"),d(Xs,"href","#introduction"),d(Vs,"id","introduction"),d(le,"href","https://pkg.go.dev/std"),d(le,"rel","nofollow"),d(oo,"class","icon icon-link"),d(nt,"aria-hidden","true"),d(nt,"tabindex","-1"),d(nt,"href","#io-and-friends"),d(gs,"id","io-and-friends"),d(ce,"class","language-go"),d(re,"class","language-go"),d(ue,"class","language-go"),d(ie,"class","language-go"),d(de,"class","language-go"),d(ke,"class","language-go"),d(fe,"class","language-go"),d(Ee,"class","language-go"),d(ve,"class","language-go"),d(El,"class","icon icon-link"),d(ot,"aria-hidden","true"),d(ot,"tabindex","-1"),d(ot,"href","#time"),d(at,"id","time"),d(me,"class","language-go"),d(Ce,"href","https://pkg.go.dev/time#ParseDuration"),d(Ce,"rel","nofollow"),d(Oe,"class","language-go"),d(De,"class","language-bash"),d(Tc,"class","icon icon-link"),d(rt,"aria-hidden","true"),d(rt,"tabindex","-1"),d(rt,"href","#monotonic-time"),d(ct,"id","monotonic-time"),d(Wc,"class","icon icon-link"),d(it,"aria-hidden","true"),d(it,"tabindex","-1"),d(it,"href","#timers-and-timeout"),d(ut,"id","timers-and-timeout"),d(be,"class","language-go"),d(zc,"class","icon icon-link"),d(kt,"aria-hidden","true"),d(kt,"tabindex","-1"),d(kt,"href","#encodingjson"),d(dt,"id","encodingjson"),d($c,"class","icon icon-link"),d(Et,"aria-hidden","true"),d(Et,"tabindex","-1"),d(Et,"href","#use-struct-tags-to-add-metadata"),d(ft,"id","use-struct-tags-to-add-metadata"),d(Re,"class","language-json"),d(ye,"class","language-go"),d(ur,"class","icon icon-link"),d(_t,"aria-hidden","true"),d(_t,"tabindex","-1"),d(_t,"href","#unmarshaling-and-marshaling"),d(vt,"id","unmarshaling-and-marshaling"),d(Pe,"class","language-go"),d(we,"class","language-go"),d(wr,"class","icon icon-link"),d(Ct,"aria-hidden","true"),d(Ct,"tabindex","-1"),d(Ct,"href","#json-readers-and-writers"),d(mt,"id","json-readers-and-writers"),d(Se,"class","language-go"),d(Te,"class","language-go"),d(he,"class","language-go"),d(He,"href","https://github.com/jhseoeo/Learning-golang/blob/master/11-standard_library/json/writer_reader.go"),d(He,"rel","nofollow"),d(eu,"class","icon icon-link"),d(bt,"aria-hidden","true"),d(bt,"tabindex","-1"),d(bt,"href","#encoding-and-decoding-json-streams"),d(Dt,"id","encoding-and-decoding-json-streams"),d(Me,"class","language-json"),d(Ne,"class","language-go"),d(xe,"class","language-go"),d(je,"class","language-go"),d(vu,"class","icon icon-link"),d(St,"aria-hidden","true"),d(St,"tabindex","-1"),d(St,"href","#custon-json-parsing"),d(wt,"id","custon-json-parsing"),d(Le,"class","language-go"),d(Ae,"class","language-go"),d(Be,"href","https://github.com/jhseoeo/Learning-golang/blob/master/11-standard_library/json/custon_parsing.go"),d(Be,"rel","nofollow"),d(Ju,"class","icon icon-link"),d(Mt,"aria-hidden","true"),d(Mt,"tabindex","-1"),d(Mt,"href","#nethttp"),d(Ht,"id","nethttp"),d(Gu,"class","icon icon-link"),d(xt,"aria-hidden","true"),d(xt,"tabindex","-1"),d(xt,"href","#the-client"),d(Nt,"id","the-client"),d(We,"class","language-go"),d(qe,"class","language-go"),d(Fe,"class","language-go"),d(Je,"class","language-go"),d(Ge,"class","language-bash"),d(Di,"class","icon icon-link"),d(Lt,"aria-hidden","true"),d(Lt,"tabindex","-1"),d(Lt,"href","#the-server"),d(jt,"id","the-server"),d(Ie,"class","language-go"),d(Ue,"class","language-go"),d(ze,"class","language-go"),d(Ze,"class","language-go"),d(Qe,"class","language-go"),d($e,"href","https://learning.oreilly.com/library/view/learning-go/9781492077206/ch07.html#function_type_interface"),d($e,"rel","nofollow"),d(Ke,"href","https://learning.oreilly.com/library/view/learning-go/9781492077206/ch07.html#dependency_injection"),d(Ke,"rel","nofollow"),d(Ve,"class","language-go"),d(Nd,"class","icon icon-link"),d(It,"aria-hidden","true"),d(It,"tabindex","-1"),d(It,"href","#middleware"),d(Gt,"id","middleware"),d(Xe,"class","language-go"),d(Ye,"class","language-go"),d(ge,"class","language-go"),d($d,"class","icon icon-link"),d(zt,"aria-hidden","true"),d(zt,"tabindex","-1"),d(zt,"href","#use-idiomatic-third-party-modules-to-enhance-the-server"),d(Ut,"id","use-idiomatic-third-party-modules-to-enhance-the-server"),d(na,"class","language-go"),d(sa,"href","https://github.com/gorilla/mux"),d(sa,"rel","nofollow"),d(gd,"class","icon icon-link"),d(Qt,"aria-hidden","true"),d(Qt,"tabindex","-1"),d(Qt,"href","#references"),d(Zt,"id","references")},m(n,c){r(n,ua,c),r(n,ck,c),r(n,ia,c),s(ia,dv),r(n,rk,c),r(n,uk,c),r(n,ik,c),r(n,dk,c),r(n,Vs,c),s(Vs,Xs),s(Xs,Xa),s(Vs,kv),r(n,kk,c),r(n,fk,c),r(n,Ek,c),r(n,Ys,c),s(Ys,fv),s(Ys,Ya),s(Ya,Ev),s(Ys,vv),r(n,vk,c),r(n,w,c),s(w,_v),s(w,le),s(le,mv),s(w,Cv),s(w,ga),s(ga,Ov),s(w,Dv),s(w,no),s(no,bv),s(w,Rv),s(w,so),s(so,yv),s(w,Pv),s(w,to),s(to,wv),s(w,Sv),s(w,eo),s(eo,Tv),s(w,hv),s(w,ao),s(ao,Hv),s(w,Mv),r(n,_k,c),r(n,mk,c),r(n,Ck,c),r(n,Ok,c),r(n,gs,c),s(gs,nt),s(nt,oo),s(gs,Nv),r(n,Dk,c),r(n,bk,c),r(n,Rk,c),r(n,on,c),s(on,xv),s(on,po),s(po,jv),s(on,Lv),s(on,lo),s(lo,Av),s(on,Bv),s(on,co),s(co,Wv),s(on,qv),s(on,ro),s(ro,Fv),s(on,Jv),r(n,yk,c),r(n,Pk,c),r(n,wk,c),r(n,js,c),s(js,uo),s(uo,Gv),s(js,Iv),s(js,io),s(io,Uv),s(js,zv),r(n,Sk,c),r(n,ce,c),ce.innerHTML=IL,r(n,Tk,c),r(n,V,c),s(V,ko),s(ko,Zv),s(V,Qv),s(V,fo),s(fo,$v),s(V,Kv),s(V,Eo),s(Eo,Vv),s(V,Xv),s(V,vo),s(vo,Yv),s(V,gv),s(V,_o),s(_o,n5),s(V,s5),r(n,hk,c),r(n,Hk,c),r(n,Mk,c),r(n,ps,c),s(ps,t5),s(ps,mo),s(mo,e5),s(ps,a5),s(ps,Co),s(Co,o5),s(ps,p5),r(n,Nk,c),r(n,re,c),re.innerHTML=UL,r(n,xk,c),r(n,ls,c),s(ls,l5),s(ls,Oo),s(Oo,c5),s(ls,r5),s(ls,Do),s(Do,u5),s(ls,i5),r(n,jk,c),r(n,ue,c),ue.innerHTML=zL,r(n,Lk,c),r(n,da,c),s(da,d5),r(n,Ak,c),r(n,hn,c),s(hn,bo),s(bo,X),s(X,k5),s(X,Ro),s(Ro,f5),s(X,E5),s(X,yo),s(yo,v5),s(X,_5),s(X,Po),s(Po,m5),s(X,C5),s(X,O5),s(X,D5),s(X,wo),s(wo,b5),s(X,R5),s(hn,y5),s(hn,So),s(So,cs),s(cs,To),s(To,P5),s(cs,w5),s(cs,ho),s(ho,S5),s(cs,T5),s(cs,Ho),s(Ho,h5),s(cs,H5),s(hn,M5),s(hn,Mo),s(Mo,Hn),s(Hn,No),s(No,N5),s(Hn,x5),s(Hn,xo),s(xo,j5),s(Hn,L5),s(Hn,jo),s(jo,A5),s(Hn,B5),s(Hn,Lo),s(Lo,W5),s(Hn,q5),s(hn,F5),s(hn,Ao),s(Ao,J),s(J,Bo),s(Bo,J5),s(J,G5),s(J,Wo),s(Wo,I5),s(J,U5),s(J,z5),s(J,Z5),s(J,qo),s(qo,Q5),s(J,$5),s(J,Fo),s(Fo,K5),s(J,V5),s(J,Jo),s(Jo,X5),s(J,Y5),r(n,Bk,c),r(n,Wk,c),r(n,qk,c),r(n,pn,c),s(pn,g5),s(pn,Go),s(Go,n_),s(pn,s_),s(pn,Io),s(Io,t_),s(pn,e_),s(pn,Uo),s(Uo,a_),s(pn,o_),s(pn,zo),s(zo,p_),s(pn,l_),r(n,Fk,c),r(n,ie,c),ie.innerHTML=ZL,r(n,Jk,c),r(n,mn,c),s(mn,Zo),s(Zo,c_),s(mn,r_),s(mn,Qo),s(Qo,u_),s(mn,i_),s(mn,$o),s($o,d_),s(mn,k_),s(mn,Ko),s(Ko,f_),s(mn,E_),r(n,Gk,c),r(n,de,c),de.innerHTML=QL,r(n,Ik,c),r(n,G,c),s(G,v_),s(G,Vo),s(Vo,__),s(G,m_),s(G,Xo),s(Xo,C_),s(G,O_),s(G,Yo),s(Yo,D_),s(G,b_),s(G,go),s(go,R_),s(G,y_),s(G,np),s(np,P_),s(G,w_),r(n,Uk,c),r(n,Cn,c),s(Cn,sp),s(sp,S_),s(Cn,T_),s(Cn,tp),s(tp,h_),s(Cn,H_),s(Cn,ep),s(ep,M_),s(Cn,N_),s(Cn,ap),s(ap,x_),s(Cn,j_),r(n,zk,c),r(n,ke,c),ke.innerHTML=$L,r(n,Zk,c),r(n,Qk,c),r(n,$k,c),r(n,N,c),s(N,L_),s(N,op),s(op,A_),s(N,B_),s(N,pp),s(pp,W_),s(N,q_),s(N,lp),s(lp,F_),s(N,J_),s(N,cp),s(cp,G_),s(N,I_),s(N,rp),s(rp,U_),s(N,z_),s(N,up),s(up,Z_),s(N,Q_),r(n,Kk,c),r(n,rs,c),s(rs,us),s(us,ip),s(ip,$_),s(us,K_),s(us,dp),s(dp,V_),s(us,X_),s(us,kp),s(kp,Y_),s(us,g_),s(rs,n0),s(rs,st),s(st,fp),s(fp,s0),s(st,t0),s(st,Ep),s(Ep,e0),s(st,a0),s(rs,o0),s(rs,is),s(is,vp),s(vp,p0),s(is,l0),s(is,_p),s(_p,c0),s(is,r0),s(is,mp),s(mp,u0),s(is,i0),r(n,Vk,c),r(n,ds,c),s(ds,d0),s(ds,Cp),s(Cp,k0),s(ds,f0),s(ds,Op),s(Op,E0),s(ds,v0),r(n,Xk,c),r(n,Yk,c),r(n,gk,c),r(n,Vn,c),s(Vn,Dp),s(Dp,_0),s(Vn,m0),s(Vn,bp),s(bp,C0),s(Vn,O0),s(Vn,Rp),s(Rp,D0),s(Vn,b0),r(n,nf,c),r(n,fe,c),fe.innerHTML=KL,r(n,sf,c),r(n,On,c),s(On,yp),s(yp,R0),s(On,y0),s(On,Pp),s(Pp,P0),s(On,w0),s(On,wp),s(wp,S0),s(On,T0),s(On,Sp),s(Sp,h0),s(On,H0),r(n,tf,c),r(n,Ee,c),Ee.innerHTML=VL,r(n,ef,c),r(n,Mn,c),s(Mn,M0),s(Mn,Tp),s(Tp,N0),s(Mn,x0),s(Mn,hp),s(hp,j0),s(Mn,L0),s(Mn,Hp),s(Hp,A0),s(Mn,B0),r(n,af,c),r(n,H,c),s(H,Mp),s(Mp,W0),s(H,q0),s(H,Np),s(Np,F0),s(H,J0),s(H,xp),s(xp,G0),s(H,I0),s(H,jp),s(jp,U0),s(H,z0),s(H,Lp),s(Lp,Z0),s(H,Q0),s(H,Ap),s(Ap,$0),s(H,K0),s(H,Bp),s(Bp,V0),s(H,X0),r(n,of,c),r(n,pf,c),r(n,lf,c),r(n,v,c),s(v,Wp),s(Wp,Y0),s(v,g0),s(v,qp),s(qp,n6),s(v,s6),s(v,Fp),s(Fp,t6),s(v,e6),s(v,Jp),s(Jp,a6),s(v,o6),s(v,Gp),s(Gp,p6),s(v,l6),s(v,Ip),s(Ip,c6),s(v,r6),s(v,Up),s(Up,u6),s(v,i6),s(v,zp),s(zp,d6),s(v,k6),s(v,Zp),s(Zp,f6),s(v,E6),s(v,Qp),s(Qp,v6),s(v,_6),s(v,$p),s($p,m6),s(v,C6),s(v,Kp),s(Kp,O6),s(v,D6),r(n,cf,c),r(n,tt,c),s(tt,b6),s(tt,Vp),s(Vp,R6),s(tt,y6),r(n,rf,c),r(n,b,c),s(b,Xp),s(Xp,P6),s(b,w6),s(b,Yp),s(Yp,S6),s(b,T6),s(b,gp),s(gp,h6),s(b,H6),s(b,nl),s(nl,M6),s(b,N6),s(b,sl),s(sl,x6),s(b,j6),s(b,tl),s(tl,L6),s(b,A6),s(b,el),s(el,B6),s(b,W6),s(b,al),s(al,q6),s(b,F6),r(n,uf,c),r(n,R,c),s(R,ol),s(ol,J6),s(R,G6),s(R,pl),s(pl,I6),s(R,U6),s(R,ll),s(ll,z6),s(R,Z6),s(R,cl),s(cl,Q6),s(R,$6),s(R,rl),s(rl,K6),s(R,V6),s(R,ul),s(ul,X6),s(R,Y6),s(R,il),s(il,g6),s(R,n9),s(R,dl),s(dl,s9),s(R,t9),r(n,df,c),r(n,et,c),s(et,e9),s(et,kl),s(kl,a9),s(et,o9),r(n,kf,c),r(n,ve,c),ve.innerHTML=XL,r(n,ff,c),r(n,ka,c),s(ka,p9),r(n,Ef,c),r(n,fa,c),s(fa,_e),s(_e,l9),s(_e,fl),s(fl,c9),s(_e,r9),r(n,vf,c),r(n,_f,c),r(n,mf,c),r(n,Cf,c),r(n,at,c),s(at,ot),s(ot,El),s(at,u9),r(n,Of,c),r(n,Df,c),r(n,bf,c),r(n,Nn,c),s(Nn,i9),s(Nn,vl),s(vl,d9),s(Nn,k9),s(Nn,_l),s(_l,f9),s(Nn,E9),s(Nn,ml),s(ml,v9),s(Nn,_9),r(n,Rf,c),r(n,ln,c),s(ln,m9),s(ln,Cl),s(Cl,C9),s(ln,O9),s(ln,Ol),s(Ol,D9),s(ln,b9),s(ln,Dl),s(Dl,R9),s(ln,y9),s(ln,bl),s(bl,P9),s(ln,w9),r(n,yf,c),r(n,Ea,c),s(Ea,S9),r(n,Pf,c),r(n,me,c),me.innerHTML=YL,r(n,wf,c),r(n,pt,c),s(pt,T9),s(pt,Rl),s(Rl,h9),s(pt,H9),r(n,Sf,c),r(n,Tf,c),r(n,hf,c),r(n,xn,c),s(xn,M9),s(xn,yl),s(yl,N9),s(xn,x9),s(xn,Pl),s(Pl,j9),s(xn,L9),s(xn,Ce),s(Ce,A9),s(xn,B9),r(n,Hf,c),r(n,va,c),s(va,wl),s(wl,W9),r(n,Mf,c),r(n,y,c),s(y,Sl),s(Sl,q9),s(y,F9),s(y,Tl),s(Tl,J9),s(y,G9),s(y,hl),s(hl,I9),s(y,U9),s(y,Hl),s(Hl,z9),s(y,Z9),s(y,Ml),s(Ml,Q9),s(y,$9),s(y,Nl),s(Nl,K9),s(y,V9),s(y,xl),s(xl,X9),s(y,Y9),s(y,jl),s(jl,g9),s(y,n4),r(n,Nf,c),r(n,xf,c),r(n,jf,c),r(n,jn,c),s(jn,s4),s(jn,Ll),s(Ll,t4),s(jn,e4),s(jn,Al),s(Al,a4),s(jn,o4),s(jn,Bl),s(Bl,p4),s(jn,l4),r(n,Lf,c),r(n,Dn,c),s(Dn,Wl),s(Wl,c4),s(Dn,r4),s(Dn,ql),s(ql,u4),s(Dn,i4),s(Dn,Fl),s(Fl,d4),s(Dn,k4),s(Dn,Jl),s(Jl,f4),s(Dn,E4),r(n,Af,c),r(n,L,c),s(L,Gl),s(Gl,v4),s(L,_4),s(L,Il),s(Il,m4),s(L,C4),s(L,Ul),s(Ul,O4),s(L,D4),s(L,zl),s(zl,b4),s(L,R4),s(L,Zl),s(Zl,y4),s(L,P4),s(L,Ql),s(Ql,w4),s(L,S4),r(n,Bf,c),r(n,Oe,c),Oe.innerHTML=gL,r(n,Wf,c),r(n,_a,c),s(_a,T4),r(n,qf,c),r(n,De,c),De.innerHTML=nA,r(n,Ff,c),r(n,lt,c),s(lt,h4),s(lt,$l),s($l,H4),s(lt,M4),r(n,Jf,c),r(n,k,c),s(k,Kl),s(Kl,N4),s(k,x4),s(k,Vl),s(Vl,j4),s(k,L4),s(k,Xl),s(Xl,A4),s(k,B4),s(k,Yl),s(Yl,W4),s(k,q4),s(k,gl),s(gl,F4),s(k,J4),s(k,nc),s(nc,G4),s(k,I4),s(k,sc),s(sc,U4),s(k,z4),s(k,tc),s(tc,Z4),s(k,Q4),s(k,ec),s(ec,$4),s(k,K4),s(k,ac),s(ac,V4),s(k,X4),s(k,oc),s(oc,Y4),s(k,g4),s(k,pc),s(pc,n8),s(k,s8),s(k,lc),s(lc,t8),s(k,e8),s(k,cc),s(cc,a8),s(k,o8),s(k,rc),s(rc,p8),s(k,l8),s(k,uc),s(uc,c8),s(k,r8),s(k,ic),s(ic,u8),s(k,i8),s(k,dc),s(dc,d8),s(k,k8),r(n,Gf,c),r(n,E,c),s(E,kc),s(kc,f8),s(E,E8),s(E,fc),s(fc,v8),s(E,_8),s(E,Ec),s(Ec,m8),s(E,C8),s(E,vc),s(vc,O8),s(E,D8),s(E,_c),s(_c,b8),s(E,R8),s(E,mc),s(mc,y8),s(E,P8),s(E,Cc),s(Cc,w8),s(E,S8),s(E,Oc),s(Oc,T8),s(E,h8),s(E,Dc),s(Dc,H8),s(E,M8),s(E,bc),s(bc,N8),s(E,x8),s(E,Rc),s(Rc,j8),s(E,L8),s(E,yc),s(yc,A8),s(E,B8),s(E,Pc),s(Pc,W8),s(E,q8),r(n,If,c),r(n,ks,c),s(ks,F8),s(ks,wc),s(wc,J8),s(ks,G8),s(ks,Sc),s(Sc,I8),s(ks,U8),r(n,Uf,c),r(n,zf,c),r(n,Zf,c),r(n,Qf,c),r(n,ct,c),s(ct,rt),s(rt,Tc),s(ct,z8),r(n,$f,c),r(n,fs,c),s(fs,Z8),s(fs,hc),s(hc,Q8),s(fs,$8),s(fs,Hc),s(Hc,K8),s(fs,V8),r(n,Kf,c),r(n,S,c),s(S,X8),s(S,Mc),s(Mc,Y8),s(S,g8),s(S,Nc),s(Nc,nm),s(S,sm),s(S,xc),s(xc,tm),s(S,em),s(S,jc),s(jc,am),s(S,om),s(S,Lc),s(Lc,pm),s(S,lm),s(S,Ac),s(Ac,cm),s(S,rm),s(S,Bc),s(Bc,um),s(S,im),r(n,Vf,c),r(n,Xf,c),r(n,Yf,c),r(n,gf,c),r(n,ut,c),s(ut,it),s(it,Wc),s(ut,dm),r(n,n1,c),r(n,cn,c),s(cn,km),s(cn,qc),s(qc,fm),s(cn,Em),s(cn,Fc),s(Fc,vm),s(cn,_m),s(cn,Jc),s(Jc,mm),s(cn,Cm),s(cn,Gc),s(Gc,Om),s(cn,Dm),r(n,s1,c),r(n,Es,c),s(Es,bm),s(Es,Ic),s(Ic,Rm),s(Es,ym),s(Es,Uc),s(Uc,Pm),s(Es,wm),r(n,t1,c),r(n,ma,c),s(ma,Sm),r(n,e1,c),r(n,be,c),be.innerHTML=sA,r(n,a1,c),r(n,o1,c),r(n,p1,c),r(n,l1,c),r(n,dt,c),s(dt,kt),s(kt,zc),s(dt,Tm),r(n,c1,c),r(n,r1,c),r(n,u1,c),r(n,vs,c),s(vs,hm),s(vs,Zc),s(Zc,Hm),s(vs,Mm),s(vs,Qc),s(Qc,Nm),s(vs,xm),r(n,i1,c),r(n,d1,c),r(n,k1,c),r(n,f1,c),r(n,ft,c),s(ft,Et),s(Et,$c),s(ft,jm),r(n,E1,c),r(n,Ca,c),s(Ca,Lm),r(n,v1,c),r(n,Re,c),Re.innerHTML=tA,r(n,_1,c),r(n,Oa,c),s(Oa,Am),r(n,m1,c),r(n,ye,c),ye.innerHTML=eA,r(n,C1,c),r(n,_s,c),s(_s,Bm),s(_s,Kc),s(Kc,Wm),s(_s,qm),s(_s,Vc),s(Vc,Fm),s(_s,Jm),r(n,O1,c),r(n,ms,c),s(ms,Gm),s(ms,Xc),s(Xc,Im),s(ms,Um),s(ms,Yc),s(Yc,zm),s(ms,Zm),r(n,D1,c),r(n,Cs,c),s(Cs,Qm),s(Cs,gc),s(gc,$m),s(Cs,Km),s(Cs,nr),s(nr,Vm),s(Cs,Xm),r(n,b1,c),r(n,Ln,c),s(Ln,Ym),s(Ln,sr),s(sr,gm),s(Ln,n7),s(Ln,tr),s(tr,s7),s(Ln,t7),s(Ln,er),s(er,e7),s(Ln,a7),r(n,R1,c),r(n,rn,c),s(rn,o7),s(rn,ar),s(ar,p7),s(rn,l7),s(rn,or),s(or,c7),s(rn,r7),s(rn,pr),s(pr,u7),s(rn,i7),s(rn,lr),s(lr,d7),s(rn,k7),r(n,y1,c),r(n,Os,c),s(Os,f7),s(Os,cr),s(cr,E7),s(Os,v7),s(Os,rr),s(rr,_7),s(Os,m7),r(n,P1,c),r(n,Da,c),s(Da,C7),r(n,w1,c),r(n,S1,c),r(n,T1,c),r(n,h1,c),r(n,vt,c),s(vt,_t),s(_t,ur),s(vt,O7),r(n,H1,c),r(n,M1,c),r(n,N1,c),r(n,P,c),s(P,ir),s(ir,D7),s(P,b7),s(P,dr),s(dr,R7),s(P,y7),s(P,kr),s(kr,P7),s(P,w7),s(P,fr),s(fr,S7),s(P,T7),s(P,Er),s(Er,h7),s(P,H7),s(P,vr),s(vr,M7),s(P,N7),s(P,_r),s(_r,x7),s(P,j7),s(P,mr),s(mr,L7),s(P,A7),r(n,x1,c),r(n,Pe,c),Pe.innerHTML=aA,r(n,j1,c),r(n,Ls,c),s(Ls,Cr),s(Cr,B7),s(Ls,W7),s(Ls,Or),s(Or,q7),s(Ls,F7),r(n,L1,c),r(n,A1,c),r(n,B1,c),r(n,un,c),s(un,Dr),s(Dr,J7),s(un,G7),s(un,br),s(br,I7),s(un,U7),s(un,Rr),s(Rr,z7),s(un,Z7),s(un,yr),s(yr,Q7),s(un,$7),s(un,Pr),s(Pr,K7),r(n,W1,c),r(n,we,c),we.innerHTML=oA,r(n,q1,c),r(n,F1,c),r(n,J1,c),r(n,G1,c),r(n,mt,c),s(mt,Ct),s(Ct,wr),s(mt,V7),r(n,I1,c),r(n,_,c),s(_,Sr),s(Sr,X7),s(_,Y7),s(_,Tr),s(Tr,g7),s(_,nC),s(_,hr),s(hr,sC),s(_,tC),s(_,Hr),s(Hr,eC),s(_,aC),s(_,Mr),s(Mr,oC),s(_,pC),s(_,Nr),s(Nr,lC),s(_,cC),s(_,xr),s(xr,rC),s(_,uC),s(_,jr),s(jr,iC),s(_,dC),s(_,Lr),s(Lr,kC),s(_,fC),s(_,Ar),s(Ar,EC),s(_,vC),s(_,Br),s(Br,_C),s(_,mC),s(_,Wr),s(Wr,CC),s(_,OC),r(n,U1,c),r(n,Y,c),s(Y,qr),s(qr,DC),s(Y,bC),s(Y,Fr),s(Fr,RC),s(Y,yC),s(Y,Jr),s(Jr,PC),s(Y,wC),s(Y,Gr),s(Gr,SC),s(Y,TC),s(Y,Ir),s(Ir,hC),s(Y,HC),r(n,z1,c),r(n,Se,c),Se.innerHTML=pA,r(n,Z1,c),r(n,Q1,c),r(n,$1,c),r(n,D,c),s(D,Ur),s(Ur,MC),s(D,NC),s(D,zr),s(zr,xC),s(D,jC),s(D,Zr),s(Zr,LC),s(D,AC),s(D,Qr),s(Qr,BC),s(D,WC),s(D,$r),s($r,qC),s(D,FC),s(D,Kr),s(Kr,JC),s(D,GC),s(D,Vr),s(Vr,IC),s(D,UC),s(D,Xr),s(Xr,zC),s(D,ZC),s(D,Yr),s(Yr,QC),s(D,$C),r(n,K1,c),r(n,Te,c),Te.innerHTML=lA,r(n,V1,c),r(n,X1,c),r(n,Y1,c),r(n,dn,c),s(dn,KC),s(dn,gr),s(gr,VC),s(dn,XC),s(dn,nu),s(nu,YC),s(dn,gC),s(dn,su),s(su,nO),s(dn,sO),s(dn,tu),s(tu,tO),s(dn,eO),r(n,g1,c),r(n,he,c),he.innerHTML=cA,r(n,n2,c),r(n,Ot,c),s(Ot,aO),s(Ot,He),s(He,oO),s(Ot,pO),r(n,s2,c),r(n,t2,c),r(n,e2,c),r(n,a2,c),r(n,Dt,c),s(Dt,bt),s(bt,eu),s(Dt,lO),r(n,o2,c),r(n,Ds,c),s(Ds,cO),s(Ds,au),s(au,rO),s(Ds,uO),s(Ds,ou),s(ou,iO),s(Ds,dO),r(n,p2,c),r(n,ba,c),s(ba,kO),r(n,l2,c),r(n,Me,c),Me.innerHTML=rA,r(n,c2,c),r(n,Rt,c),s(Rt,fO),s(Rt,pu),s(pu,EO),s(Rt,vO),r(n,r2,c),r(n,yt,c),s(yt,_O),s(yt,lu),s(lu,mO),s(yt,CO),r(n,u2,c),r(n,Ne,c),Ne.innerHTML=uA,r(n,i2,c),r(n,d2,c),r(n,k2,c),r(n,kn,c),s(kn,OO),s(kn,cu),s(cu,DO),s(kn,bO),s(kn,ru),s(ru,RO),s(kn,yO),s(kn,uu),s(uu,PO),s(kn,wO),s(kn,iu),s(iu,SO),s(kn,TO),r(n,f2,c),r(n,xe,c),xe.innerHTML=iA,r(n,E2,c),r(n,Pt,c),s(Pt,hO),s(Pt,du),s(du,HO),s(Pt,MO),r(n,v2,c),r(n,_2,c),r(n,m2,c),r(n,Xn,c),s(Xn,ku),s(ku,NO),s(Xn,xO),s(Xn,fu),s(fu,jO),s(Xn,LO),s(Xn,Eu),s(Eu,AO),s(Xn,BO),r(n,C2,c),r(n,je,c),je.innerHTML=dA,r(n,O2,c),r(n,D2,c),r(n,b2,c),r(n,R2,c),r(n,wt,c),s(wt,St),s(St,vu),s(wt,WO),r(n,y2,c),r(n,An,c),s(An,qO),s(An,_u),s(_u,FO),s(An,JO),s(An,mu),s(mu,GO),s(An,IO),s(An,Cu),s(Cu,UO),s(An,zO),r(n,P2,c),r(n,Le,c),Le.innerHTML=kA,r(n,w2,c),r(n,g,c),s(g,Ou),s(Ou,ZO),s(g,QO),s(g,Du),s(Du,$O),s(g,KO),s(g,bu),s(bu,VO),s(g,XO),s(g,Ru),s(Ru,YO),s(g,gO),s(g,yu),s(yu,nD),s(g,sD),r(n,S2,c),r(n,T2,c),r(n,h2,c),r(n,bs,c),s(bs,tD),s(bs,Pu),s(Pu,eD),s(bs,aD),s(bs,wu),s(wu,oD),s(bs,pD),r(n,H2,c),r(n,Ae,c),Ae.innerHTML=fA,r(n,M2,c),r(n,Tt,c),s(Tt,lD),s(Tt,Be),s(Be,cD),s(Tt,rD),r(n,N2,c),r(n,x2,c),r(n,j2,c),r(n,I,c),s(I,uD),s(I,Su),s(Su,iD),s(I,dD),s(I,Tu),s(Tu,kD),s(I,fD),s(I,hu),s(hu,ED),s(I,vD),s(I,Hu),s(Hu,_D),s(I,mD),s(I,Mu),s(Mu,CD),s(I,OD),r(n,L2,c),r(n,Ra,c),s(Ra,DD),r(n,A2,c),r(n,Yn,c),s(Yn,Nu),s(Nu,bD),s(Yn,RD),s(Yn,xu),s(xu,yD),s(Yn,PD),s(Yn,ju),s(ju,wD),s(Yn,SD),r(n,B2,c),r(n,ht,c),s(ht,TD),s(ht,Lu),s(Lu,hD),s(ht,HD),r(n,W2,c),r(n,ya,c),s(ya,nn),s(nn,MD),s(nn,Au),s(Au,ND),s(nn,xD),s(nn,Bu),s(Bu,jD),s(nn,LD),s(nn,Wu),s(Wu,AD),s(nn,BD),s(nn,qu),s(qu,WD),s(nn,qD),s(nn,Fu),s(Fu,FD),s(nn,JD),r(n,q2,c),r(n,F2,c),r(n,J2,c),r(n,G2,c),r(n,Ht,c),s(Ht,Mt),s(Mt,Ju),s(Ht,GD),r(n,I2,c),r(n,U2,c),r(n,z2,c),r(n,Pa,c),s(Pa,ID),r(n,Z2,c),r(n,Q2,c),r(n,$2,c),r(n,K2,c),r(n,Nt,c),s(Nt,xt),s(xt,Gu),s(Nt,UD),r(n,V2,c),r(n,A,c),s(A,Iu),s(Iu,zD),s(A,ZD),s(A,Uu),s(Uu,QD),s(A,$D),s(A,zu),s(zu,KD),s(A,VD),s(A,Zu),s(Zu,XD),s(A,YD),s(A,Qu),s(Qu,gD),s(A,nb),s(A,$u),s($u,sb),s(A,tb),r(n,X2,c),r(n,We,c),We.innerHTML=EA,r(n,Y2,c),r(n,g2,c),r(n,nE,c),r(n,T,c),s(T,eb),s(T,Ku),s(Ku,ab),s(T,ob),s(T,Vu),s(Vu,pb),s(T,lb),s(T,Xu),s(Xu,cb),s(T,rb),s(T,Yu),s(Yu,ub),s(T,ib),s(T,gu),s(gu,db),s(T,kb),s(T,ni),s(ni,fb),s(T,Eb),s(T,si),s(si,vb),s(T,_b),r(n,sE,c),r(n,Bn,c),s(Bn,mb),s(Bn,ti),s(ti,Cb),s(Bn,Ob),s(Bn,ei),s(ei,Db),s(Bn,bb),s(Bn,ai),s(ai,Rb),s(Bn,yb),r(n,tE,c),r(n,qe,c),qe.innerHTML=vA,r(n,eE,c),r(n,aE,c),r(n,oE,c),r(n,bn,c),s(bn,oi),s(oi,Pb),s(bn,wb),s(bn,pi),s(pi,Sb),s(bn,Tb),s(bn,li),s(li,hb),s(bn,Hb),s(bn,ci),s(ci,Mb),s(bn,Nb),r(n,pE,c),r(n,Fe,c),Fe.innerHTML=_A,r(n,lE,c),r(n,cE,c),r(n,rE,c),r(n,h,c),s(h,xb),s(h,ri),s(ri,jb),s(h,Lb),s(h,ui),s(ui,Ab),s(h,Bb),s(h,ii),s(ii,Wb),s(h,qb),s(h,di),s(di,Fb),s(h,Jb),s(h,ki),s(ki,Gb),s(h,Ib),s(h,fi),s(fi,Ub),s(h,zb),s(h,Ei),s(Ei,Zb),s(h,Qb),r(n,uE,c),r(n,Je,c),Je.innerHTML=mA,r(n,iE,c),r(n,wa,c),s(wa,$b),r(n,dE,c),r(n,Ge,c),Ge.innerHTML=CA,r(n,kE,c),r(n,fE,c),r(n,EE,c),r(n,Sa,c),s(Sa,fn),s(fn,vi),s(vi,Kb),s(fn,Vb),s(fn,_i),s(_i,Xb),s(fn,Yb),s(fn,mi),s(mi,gb),s(fn,nR),s(fn,Ci),s(Ci,sR),s(fn,tR),s(fn,Oi),s(Oi,eR),s(fn,aR),r(n,vE,c),r(n,_E,c),r(n,mE,c),r(n,CE,c),r(n,jt,c),s(jt,Lt),s(Lt,Di),s(jt,oR),r(n,OE,c),r(n,En,c),s(En,pR),s(En,bi),s(bi,lR),s(En,cR),s(En,Ri),s(Ri,rR),s(En,uR),s(En,yi),s(yi,iR),s(En,dR),s(En,Pi),s(Pi,kR),s(En,fR),r(n,DE,c),r(n,At,c),s(At,ER),s(At,wi),s(wi,vR),s(At,_R),r(n,bE,c),r(n,Ie,c),Ie.innerHTML=OA,r(n,RE,c),r(n,yE,c),r(n,PE,c),r(n,Rn,c),s(Rn,Si),s(Si,mR),s(Rn,CR),s(Rn,Ti),s(Ti,OR),s(Rn,DR),s(Rn,hi),s(hi,bR),s(Rn,RR),s(Rn,Hi),s(Hi,yR),s(Rn,PR),r(n,wE,c),r(n,Ue,c),Ue.innerHTML=DA,r(n,SE,c),r(n,Ta,c),s(Ta,wR),r(n,TE,c),r(n,Wn,c),s(Wn,SR),s(Wn,Mi),s(Mi,TR),s(Wn,hR),s(Wn,Ni),s(Ni,HR),s(Wn,MR),s(Wn,xi),s(xi,NR),s(Wn,xR),r(n,hE,c),r(n,qn,c),s(qn,jR),s(qn,ji),s(ji,LR),s(qn,AR),s(qn,Li),s(Li,BR),s(qn,WR),s(qn,Ai),s(Ai,qR),s(qn,FR),r(n,HE,c),r(n,Bt,c),s(Bt,JR),s(Bt,Bi),s(Bi,GR),s(Bt,IR),r(n,ME,c),r(n,NE,c),r(n,xE,c),r(n,ha,c),s(ha,UR),r(n,jE,c),r(n,ze,c),ze.innerHTML=bA,r(n,LE,c),r(n,Wt,c),s(Wt,zR),s(Wt,Wi),s(Wi,ZR),s(Wt,QR),r(n,AE,c),r(n,BE,c),r(n,WE,c),r(n,qt,c),s(qt,$R),s(qt,qi),s(qi,KR),s(qt,VR),r(n,qE,c),r(n,Ze,c),Ze.innerHTML=RA,r(n,FE,c),r(n,As,c),s(As,Fi),s(Fi,XR),s(As,YR),s(As,Ji),s(Ji,gR),s(As,ny),r(n,JE,c),r(n,yn,c),s(yn,Gi),s(Gi,sy),s(yn,ty),s(yn,Ii),s(Ii,ey),s(yn,ay),s(yn,Ui),s(Ui,oy),s(yn,py),s(yn,zi),s(zi,ly),s(yn,cy),r(n,GE,c),r(n,Bs,c),s(Bs,Zi),s(Zi,ry),s(Bs,uy),s(Bs,Qi),s(Qi,iy),s(Bs,dy),r(n,IE,c),r(n,UE,c),r(n,zE,c),r(n,x,c),s(x,ky),s(x,$i),s($i,fy),s(x,Ey),s(x,Ki),s(Ki,vy),s(x,_y),s(x,Vi),s(Vi,my),s(x,Cy),s(x,Xi),s(Xi,Oy),s(x,Dy),s(x,Yi),s(Yi,by),s(x,Ry),s(x,gi),s(gi,yy),s(x,Py),r(n,ZE,c),r(n,U,c),s(U,wy),s(U,nd),s(nd,Sy),s(U,Ty),s(U,sd),s(sd,hy),s(U,Hy),s(U,td),s(td,My),s(U,Ny),s(U,ed),s(ed,xy),s(U,jy),s(U,ad),s(ad,Ly),s(U,Ay),r(n,QE,c),r(n,Qe,c),Qe.innerHTML=yA,r(n,$E,c),r(n,Fn,c),s(Fn,By),s(Fn,od),s(od,Wy),s(Fn,qy),s(Fn,pd),s(pd,Fy),s(Fn,Jy),s(Fn,$e),s($e,Gy),s(Fn,Iy),r(n,KE,c),r(n,Ft,c),s(Ft,Uy),s(Ft,Ke),s(Ke,zy),s(Ft,Zy),r(n,VE,c),r(n,XE,c),r(n,YE,c),r(n,Jt,c),s(Jt,j),s(j,ld),s(ld,Qy),s(j,$y),s(j,cd),s(cd,Ky),s(j,Vy),s(j,rd),s(rd,Xy),s(j,Yy),s(j,ud),s(ud,gy),s(j,nP),s(j,id),s(id,sP),s(j,tP),s(j,dd),s(dd,eP),s(j,aP),s(j,kd),s(kd,oP),s(j,pP),s(Jt,lP),s(Jt,Jn),s(Jn,fd),s(fd,cP),s(Jn,rP),s(Jn,Ed),s(Ed,uP),s(Jn,iP),s(Jn,vd),s(vd,dP),s(Jn,kP),s(Jn,_d),s(_d,fP),s(Jn,EP),r(n,gE,c),r(n,n3,c),r(n,s3,c),r(n,sn,c),s(sn,md),s(md,vP),s(sn,_P),s(sn,Cd),s(Cd,mP),s(sn,CP),s(sn,Od),s(Od,OP),s(sn,DP),s(sn,Dd),s(Dd,bP),s(sn,RP),s(sn,bd),s(bd,yP),s(sn,PP),r(n,t3,c),r(n,Ve,c),Ve.innerHTML=PA,r(n,e3,c),r(n,Ha,c),s(Ha,wP),r(n,a3,c),r(n,Pn,c),s(Pn,Rd),s(Rd,SP),s(Pn,TP),s(Pn,yd),s(yd,hP),s(Pn,HP),s(Pn,Pd),s(Pd,MP),s(Pn,NP),s(Pn,wd),s(wd,xP),s(Pn,jP),r(n,o3,c),r(n,tn,c),s(tn,Sd),s(Sd,LP),s(tn,AP),s(tn,Td),s(Td,BP),s(tn,WP),s(tn,hd),s(hd,qP),s(tn,FP),s(tn,Hd),s(Hd,JP),s(tn,GP),s(tn,Md),s(Md,IP),s(tn,UP),r(n,p3,c),r(n,l3,c),r(n,c3,c),r(n,r3,c),r(n,Gt,c),s(Gt,It),s(It,Nd),s(Gt,zP),r(n,u3,c),r(n,z,c),s(z,ZP),s(z,xd),s(xd,QP),s(z,$P),s(z,jd),s(jd,KP),s(z,VP),s(z,Ld),s(Ld,XP),s(z,YP),s(z,Ad),s(Ad,gP),s(z,nw),s(z,Bd),s(Bd,sw),s(z,tw),r(n,i3,c),r(n,d3,c),r(n,k3,c),r(n,Ma,c),s(Ma,ew),r(n,f3,c),r(n,Xe,c),Xe.innerHTML=wA,r(n,E3,c),r(n,Rs,c),s(Rs,aw),s(Rs,Wd),s(Wd,ow),s(Rs,pw),s(Rs,qd),s(qd,lw),s(Rs,cw),r(n,v3,c),r(n,Ws,c),s(Ws,Fd),s(Fd,rw),s(Ws,uw),s(Ws,Jd),s(Jd,iw),s(Ws,dw),r(n,_3,c),r(n,m3,c),r(n,C3,c),r(n,Na,c),s(Na,Gd),s(Gd,kw),r(n,O3,c),r(n,D3,c),r(n,b3,c),r(n,xa,c),s(xa,fw),r(n,R3,c),r(n,Ye,c),Ye.innerHTML=SA,r(n,y3,c),r(n,Gn,c),s(Gn,Ew),s(Gn,Id),s(Id,vw),s(Gn,_w),s(Gn,Ud),s(Ud,mw),s(Gn,Cw),s(Gn,zd),s(zd,Ow),s(Gn,Dw),r(n,P3,c),r(n,qs,c),s(qs,Zd),s(Zd,bw),s(qs,Rw),s(qs,Qd),s(Qd,yw),s(qs,Pw),r(n,w3,c),r(n,ge,c),ge.innerHTML=TA,r(n,S3,c),r(n,T3,c),r(n,h3,c),r(n,H3,c),r(n,Ut,c),s(Ut,zt),s(zt,$d),s(Ut,ww),r(n,M3,c),r(n,ja,c),s(ja,Sw),r(n,N3,c),r(n,na,c),na.innerHTML=hA,r(n,x3,c),r(n,j3,c),r(n,L3,c),r(n,ys,c),s(ys,Tw),s(ys,Kd),s(Kd,hw),s(ys,Hw),s(ys,Vd),s(Vd,Mw),s(ys,Nw),r(n,A3,c),r(n,In,c),s(In,xw),s(In,sa),s(sa,jw),s(In,Lw),s(In,Xd),s(Xd,Aw),s(In,Bw),s(In,Yd),s(Yd,Ww),s(In,qw),r(n,B3,c),r(n,W3,c),r(n,q3,c),r(n,F3,c),r(n,Zt,c),s(Zt,Qt),s(Qt,gd),s(Zt,Fw),r(n,J3,c),r(n,G3,c),r(n,I3,c),r(n,gn,c),s(gn,nk),s(nk,Jw),s(gn,Gw),bB(ta,gn,null),s(gn,Iw),s(gn,Uw),s(gn,zw),r(n,U3,c),r(n,z3,c),r(n,Z3,c),Q3=!0},p:RB,i(n){Q3||(yB(ta.$$.fragment,n),Q3=!0)},o(n){PB(ta.$$.fragment,n),Q3=!1},d(n){n&&t(ua),n&&t(ck),n&&t(ia),n&&t(rk),n&&t(uk),n&&t(ik),n&&t(dk),n&&t(Vs),n&&t(kk),n&&t(fk),n&&t(Ek),n&&t(Ys),n&&t(vk),n&&t(w),n&&t(_k),n&&t(mk),n&&t(Ck),n&&t(Ok),n&&t(gs),n&&t(Dk),n&&t(bk),n&&t(Rk),n&&t(on),n&&t(yk),n&&t(Pk),n&&t(wk),n&&t(js),n&&t(Sk),n&&t(ce),n&&t(Tk),n&&t(V),n&&t(hk),n&&t(Hk),n&&t(Mk),n&&t(ps),n&&t(Nk),n&&t(re),n&&t(xk),n&&t(ls),n&&t(jk),n&&t(ue),n&&t(Lk),n&&t(da),n&&t(Ak),n&&t(hn),n&&t(Bk),n&&t(Wk),n&&t(qk),n&&t(pn),n&&t(Fk),n&&t(ie),n&&t(Jk),n&&t(mn),n&&t(Gk),n&&t(de),n&&t(Ik),n&&t(G),n&&t(Uk),n&&t(Cn),n&&t(zk),n&&t(ke),n&&t(Zk),n&&t(Qk),n&&t($k),n&&t(N),n&&t(Kk),n&&t(rs),n&&t(Vk),n&&t(ds),n&&t(Xk),n&&t(Yk),n&&t(gk),n&&t(Vn),n&&t(nf),n&&t(fe),n&&t(sf),n&&t(On),n&&t(tf),n&&t(Ee),n&&t(ef),n&&t(Mn),n&&t(af),n&&t(H),n&&t(of),n&&t(pf),n&&t(lf),n&&t(v),n&&t(cf),n&&t(tt),n&&t(rf),n&&t(b),n&&t(uf),n&&t(R),n&&t(df),n&&t(et),n&&t(kf),n&&t(ve),n&&t(ff),n&&t(ka),n&&t(Ef),n&&t(fa),n&&t(vf),n&&t(_f),n&&t(mf),n&&t(Cf),n&&t(at),n&&t(Of),n&&t(Df),n&&t(bf),n&&t(Nn),n&&t(Rf),n&&t(ln),n&&t(yf),n&&t(Ea),n&&t(Pf),n&&t(me),n&&t(wf),n&&t(pt),n&&t(Sf),n&&t(Tf),n&&t(hf),n&&t(xn),n&&t(Hf),n&&t(va),n&&t(Mf),n&&t(y),n&&t(Nf),n&&t(xf),n&&t(jf),n&&t(jn),n&&t(Lf),n&&t(Dn),n&&t(Af),n&&t(L),n&&t(Bf),n&&t(Oe),n&&t(Wf),n&&t(_a),n&&t(qf),n&&t(De),n&&t(Ff),n&&t(lt),n&&t(Jf),n&&t(k),n&&t(Gf),n&&t(E),n&&t(If),n&&t(ks),n&&t(Uf),n&&t(zf),n&&t(Zf),n&&t(Qf),n&&t(ct),n&&t($f),n&&t(fs),n&&t(Kf),n&&t(S),n&&t(Vf),n&&t(Xf),n&&t(Yf),n&&t(gf),n&&t(ut),n&&t(n1),n&&t(cn),n&&t(s1),n&&t(Es),n&&t(t1),n&&t(ma),n&&t(e1),n&&t(be),n&&t(a1),n&&t(o1),n&&t(p1),n&&t(l1),n&&t(dt),n&&t(c1),n&&t(r1),n&&t(u1),n&&t(vs),n&&t(i1),n&&t(d1),n&&t(k1),n&&t(f1),n&&t(ft),n&&t(E1),n&&t(Ca),n&&t(v1),n&&t(Re),n&&t(_1),n&&t(Oa),n&&t(m1),n&&t(ye),n&&t(C1),n&&t(_s),n&&t(O1),n&&t(ms),n&&t(D1),n&&t(Cs),n&&t(b1),n&&t(Ln),n&&t(R1),n&&t(rn),n&&t(y1),n&&t(Os),n&&t(P1),n&&t(Da),n&&t(w1),n&&t(S1),n&&t(T1),n&&t(h1),n&&t(vt),n&&t(H1),n&&t(M1),n&&t(N1),n&&t(P),n&&t(x1),n&&t(Pe),n&&t(j1),n&&t(Ls),n&&t(L1),n&&t(A1),n&&t(B1),n&&t(un),n&&t(W1),n&&t(we),n&&t(q1),n&&t(F1),n&&t(J1),n&&t(G1),n&&t(mt),n&&t(I1),n&&t(_),n&&t(U1),n&&t(Y),n&&t(z1),n&&t(Se),n&&t(Z1),n&&t(Q1),n&&t($1),n&&t(D),n&&t(K1),n&&t(Te),n&&t(V1),n&&t(X1),n&&t(Y1),n&&t(dn),n&&t(g1),n&&t(he),n&&t(n2),n&&t(Ot),n&&t(s2),n&&t(t2),n&&t(e2),n&&t(a2),n&&t(Dt),n&&t(o2),n&&t(Ds),n&&t(p2),n&&t(ba),n&&t(l2),n&&t(Me),n&&t(c2),n&&t(Rt),n&&t(r2),n&&t(yt),n&&t(u2),n&&t(Ne),n&&t(i2),n&&t(d2),n&&t(k2),n&&t(kn),n&&t(f2),n&&t(xe),n&&t(E2),n&&t(Pt),n&&t(v2),n&&t(_2),n&&t(m2),n&&t(Xn),n&&t(C2),n&&t(je),n&&t(O2),n&&t(D2),n&&t(b2),n&&t(R2),n&&t(wt),n&&t(y2),n&&t(An),n&&t(P2),n&&t(Le),n&&t(w2),n&&t(g),n&&t(S2),n&&t(T2),n&&t(h2),n&&t(bs),n&&t(H2),n&&t(Ae),n&&t(M2),n&&t(Tt),n&&t(N2),n&&t(x2),n&&t(j2),n&&t(I),n&&t(L2),n&&t(Ra),n&&t(A2),n&&t(Yn),n&&t(B2),n&&t(ht),n&&t(W2),n&&t(ya),n&&t(q2),n&&t(F2),n&&t(J2),n&&t(G2),n&&t(Ht),n&&t(I2),n&&t(U2),n&&t(z2),n&&t(Pa),n&&t(Z2),n&&t(Q2),n&&t($2),n&&t(K2),n&&t(Nt),n&&t(V2),n&&t(A),n&&t(X2),n&&t(We),n&&t(Y2),n&&t(g2),n&&t(nE),n&&t(T),n&&t(sE),n&&t(Bn),n&&t(tE),n&&t(qe),n&&t(eE),n&&t(aE),n&&t(oE),n&&t(bn),n&&t(pE),n&&t(Fe),n&&t(lE),n&&t(cE),n&&t(rE),n&&t(h),n&&t(uE),n&&t(Je),n&&t(iE),n&&t(wa),n&&t(dE),n&&t(Ge),n&&t(kE),n&&t(fE),n&&t(EE),n&&t(Sa),n&&t(vE),n&&t(_E),n&&t(mE),n&&t(CE),n&&t(jt),n&&t(OE),n&&t(En),n&&t(DE),n&&t(At),n&&t(bE),n&&t(Ie),n&&t(RE),n&&t(yE),n&&t(PE),n&&t(Rn),n&&t(wE),n&&t(Ue),n&&t(SE),n&&t(Ta),n&&t(TE),n&&t(Wn),n&&t(hE),n&&t(qn),n&&t(HE),n&&t(Bt),n&&t(ME),n&&t(NE),n&&t(xE),n&&t(ha),n&&t(jE),n&&t(ze),n&&t(LE),n&&t(Wt),n&&t(AE),n&&t(BE),n&&t(WE),n&&t(qt),n&&t(qE),n&&t(Ze),n&&t(FE),n&&t(As),n&&t(JE),n&&t(yn),n&&t(GE),n&&t(Bs),n&&t(IE),n&&t(UE),n&&t(zE),n&&t(x),n&&t(ZE),n&&t(U),n&&t(QE),n&&t(Qe),n&&t($E),n&&t(Fn),n&&t(KE),n&&t(Ft),n&&t(VE),n&&t(XE),n&&t(YE),n&&t(Jt),n&&t(gE),n&&t(n3),n&&t(s3),n&&t(sn),n&&t(t3),n&&t(Ve),n&&t(e3),n&&t(Ha),n&&t(a3),n&&t(Pn),n&&t(o3),n&&t(tn),n&&t(p3),n&&t(l3),n&&t(c3),n&&t(r3),n&&t(Gt),n&&t(u3),n&&t(z),n&&t(i3),n&&t(d3),n&&t(k3),n&&t(Ma),n&&t(f3),n&&t(Xe),n&&t(E3),n&&t(Rs),n&&t(v3),n&&t(Ws),n&&t(_3),n&&t(m3),n&&t(C3),n&&t(Na),n&&t(O3),n&&t(D3),n&&t(b3),n&&t(xa),n&&t(R3),n&&t(Ye),n&&t(y3),n&&t(Gn),n&&t(P3),n&&t(qs),n&&t(w3),n&&t(ge),n&&t(S3),n&&t(T3),n&&t(h3),n&&t(H3),n&&t(Ut),n&&t(M3),n&&t(ja),n&&t(N3),n&&t(na),n&&t(x3),n&&t(j3),n&&t(L3),n&&t(ys),n&&t(A3),n&&t(In),n&&t(B3),n&&t(W3),n&&t(q3),n&&t(F3),n&&t(Zt),n&&t(J3),n&&t(G3),n&&t(I3),n&&t(gn),wB(ta),n&&t(U3),n&&t(z3),n&&t(Z3)}}}const MB={title:"표준 라이브러리",date:"2022-09-05T00:00:00.000Z",excerpt:"The Standard Library",categories:["Golang","Basic Golang"],coverImage:"/post_img/Go/Golang_basics/cover.png",coverWidth:16,coverHeight:9,indexed:!1,exposed:!0};class NB extends _B{constructor(ua){super(),mB(this,ua,null,TB,CB,{})}}export{NB as default,MB as metadata};
