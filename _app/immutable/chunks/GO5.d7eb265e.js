import{S as bc,i as vc,s as Ec,k as t,a as i,q as l,l as p,c as r,m as u,r as c,h as s,n as k,U as _c,b as o,E as a,M as xo}from"./index.5621e629.js";function yc(zl){let Cn,qs,Nn,Jt,Js,Us,Zs,Ks,T,S,Vn,Ut,Ws,$s,Qs,Xs,Ys,j,M,In,Zt,hs,On,Kt,gs,on,ql=`<code class="language-go"><span class="token keyword">func</span> <span class="token function">div</span><span class="token punctuation">(</span>numerator <span class="token builtin">int</span><span class="token punctuation">,</span> denominator <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span> <span class="token comment">// parameters and each type of this, and the return type specified here</span>
	<span class="token comment">// if there is no return type specified (as like main function), no return statement is needed in the function body.</span>
	<span class="token keyword">if</span> denominator <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token number">0</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">return</span> numerator <span class="token operator">/</span> denominator
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	res <span class="token operator">:=</span> <span class="token function">div</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code>`,na,H,Wt,zn,$t,Qt,sa,aa,ta,pa,G,L,qn,Xt,ea,Bn,Yt,oa,B,ht,Jn,gt,np,Un,sp,la,ln,Jl=`<code class="language-go"><span class="token keyword">type</span> MyFuncOpts <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
	FirstName <span class="token builtin">string</span>
	LastName  <span class="token builtin">string</span>
	Age       <span class="token builtin">int</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">MyFunc</span><span class="token punctuation">(</span>opts MyFuncOpts<span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">return</span> opts<span class="token punctuation">.</span>FirstName <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> opts<span class="token punctuation">.</span>LastName <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> strconv<span class="token punctuation">.</span><span class="token function">Itoa</span><span class="token punctuation">(</span>opts<span class="token punctuation">.</span>Age<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code>`,ca,ua,ia,ra,F,V,Zn,ap,ka,I,tp,Kn,pp,ep,fa,cn,Ul=`<code class="language-go"><span class="token keyword">func</span> <span class="token function">addTo</span><span class="token punctuation">(</span>base <span class="token builtin">int</span><span class="token punctuation">,</span> vals <span class="token operator">...</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span> <span class="token comment">// put three dots(...) before type to declare a parameter as variadic</span>
	<span class="token keyword">var</span> res <span class="token builtin">int</span>
	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> vals <span class="token punctuation">&#123;</span>
		res <span class="token operator">+=</span> v
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">return</span> res
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	addVal1 <span class="token operator">:=</span> <span class="token function">addTo</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>            <span class="token comment">// we can pass parameters as multiple parameters</span>
	addVal2 <span class="token operator">:=</span> <span class="token function">addTo</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">&#125;</span><span class="token operator">...</span><span class="token punctuation">)</span> <span class="token comment">// we can pass parameters as slice, but must put three dots(...) after slice.</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>addVal1<span class="token punctuation">,</span> addVal2<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code>`,da,z,op,Wn,lp,cp,ma,ba,va,Ea,q,J,$n,up,_a,R,ip,Qn,rp,kp,Xn,fp,dp,ya,U,mp,Yn,bp,vp,wa,un,Zl=`<code class="language-go"><span class="token keyword">func</span> <span class="token function">divAndRemainder</span><span class="token punctuation">(</span>numerator <span class="token builtin">int</span><span class="token punctuation">,</span> denomiator <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> denomiator <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"cannot divide by zero"</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> numerator <span class="token operator">/</span> denomiator<span class="token punctuation">,</span> numerator <span class="token operator">%</span> denomiator<span class="token punctuation">,</span> <span class="token boolean">nil</span> <span class="token comment">// must return all of return values, without parantheses</span>
		<span class="token comment">// if there is no error, just return nil for error.</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	result1<span class="token punctuation">,</span> remainder1<span class="token punctuation">,</span> err1 <span class="token operator">:=</span> <span class="token function">divAndRemainder</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// if we try assigning multiple return values into a single variable, there will be a compile-time error</span>
	result2<span class="token punctuation">,</span> <span class="token boolean">_</span><span class="token punctuation">,</span> err2 <span class="token operator">:=</span> <span class="token function">divAndRemainder_Named</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>    <span class="token comment">// if we don't need to get remainder as variable, just using _, we can ignore it</span>
<span class="token punctuation">&#125;</span></code>`,Ra,b,Ep,hn,_p,yp,gn,wp,Rp,Pp,Cp,ns,Np,Op,Pa,Ca,Na,Oa,Z,K,ss,Bp,Ba,W,xp,as,Dp,Ap,xa,m,Tp,Sp,jp,Mp,Hp,ts,Gp,Lp,ps,Fp,Vp,es,Ip,zp,Da,rn,Kl=`<code class="language-go"><span class="token keyword">func</span> <span class="token function">divAndRemainder_Named</span><span class="token punctuation">(</span>numerator <span class="token builtin">int</span><span class="token punctuation">,</span> denomiator <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>result <span class="token builtin">int</span><span class="token punctuation">,</span> remainder <span class="token builtin">int</span><span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> denomiator <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>
		err <span class="token operator">=</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"cannot divide by zero"</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span> result<span class="token punctuation">,</span> remainder<span class="token punctuation">,</span> err
		<span class="token comment">// return 0, 0, errors.New("cannot divide by zero") // this statement is also legal. it is not essential to use name of return value</span>
	<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
		result <span class="token operator">=</span> numerator <span class="token operator">/</span> denomiator
		remainder <span class="token operator">=</span> numerator <span class="token operator">%</span> denomiator
		<span class="token keyword">return</span> result<span class="token punctuation">,</span> remainder<span class="token punctuation">,</span> err
		<span class="token comment">// return // blank return can reduce amount of typing, but it is less readable.</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,Aa,v,qp,os,Jp,Up,ls,Zp,Kp,cs,Wp,$p,us,Qp,Xp,Ta,Sa,ja,Ma,$,Q,is,Yp,Ha,xn,hp,Ga,kn,Wl=`<code class="language-go"><span class="token keyword">func</span> <span class="token function">add</span><span class="token punctuation">(</span>i <span class="token builtin">int</span><span class="token punctuation">,</span> j <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> i <span class="token operator">+</span> j <span class="token punctuation">&#125;</span>
<span class="token keyword">func</span> <span class="token function">sub</span><span class="token punctuation">(</span>i <span class="token builtin">int</span><span class="token punctuation">,</span> j <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> i <span class="token operator">-</span> j <span class="token punctuation">&#125;</span>
<span class="token keyword">func</span> <span class="token function">mul</span><span class="token punctuation">(</span>i <span class="token builtin">int</span><span class="token punctuation">,</span> j <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> i <span class="token operator">*</span> j <span class="token punctuation">&#125;</span>
<span class="token keyword">func</span> <span class="token function">div</span><span class="token punctuation">(</span>i <span class="token builtin">int</span><span class="token punctuation">,</span> j <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> i <span class="token operator">/</span> j <span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">var</span> opMap <span class="token operator">=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">func</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span><span class="token punctuation">&#123;</span>
		<span class="token string">"+"</span><span class="token punctuation">:</span> add<span class="token punctuation">,</span>
		<span class="token string">"-"</span><span class="token punctuation">:</span> sub<span class="token punctuation">,</span>
		<span class="token string">"*"</span><span class="token punctuation">:</span> mul<span class="token punctuation">,</span>
		<span class="token string">"/"</span><span class="token punctuation">:</span> div<span class="token punctuation">,</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,La,P,gp,rs,ne,se,ks,ae,te,Fa,X,pe,fs,ee,oe,Va,fn,$l=`<code class="language-go"><span class="token keyword">func</span> <span class="token function">add</span><span class="token punctuation">(</span>i <span class="token builtin">int</span><span class="token punctuation">,</span> j <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> i <span class="token operator">+</span> j <span class="token punctuation">&#125;</span>
<span class="token keyword">func</span> <span class="token function">sub</span><span class="token punctuation">(</span>i <span class="token builtin">int</span><span class="token punctuation">,</span> j <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> i <span class="token operator">-</span> j <span class="token punctuation">&#125;</span>
<span class="token keyword">func</span> <span class="token function">mul</span><span class="token punctuation">(</span>i <span class="token builtin">int</span><span class="token punctuation">,</span> j <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> i <span class="token operator">*</span> j <span class="token punctuation">&#125;</span>
<span class="token keyword">func</span> <span class="token function">div</span><span class="token punctuation">(</span>i <span class="token builtin">int</span><span class="token punctuation">,</span> j <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> i <span class="token operator">/</span> j <span class="token punctuation">&#125;</span>

<span class="token keyword">type</span> opFuncType <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">var</span> opMap <span class="token operator">=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span>opFuncType<span class="token punctuation">&#123;</span>
		<span class="token string">"+"</span><span class="token punctuation">:</span> add<span class="token punctuation">,</span>
		<span class="token string">"-"</span><span class="token punctuation">:</span> sub<span class="token punctuation">,</span>
		<span class="token string">"*"</span><span class="token punctuation">:</span> mul<span class="token punctuation">,</span>
		<span class="token string">"/"</span><span class="token punctuation">:</span> div<span class="token punctuation">,</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,Ia,za,qa,Ja,Y,h,ds,le,Ua,Dn,ce,Za,dn,Ql=`<code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	pow <span class="token operator">:=</span> <span class="token keyword">func</span><span class="token punctuation">(</span>num <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span> <span class="token comment">// using keyword &#96;func&#96;, we can declare an anonyymous function</span>
		<span class="token comment">// if we put a function name on anonymous function, it will occur a compile-time error</span>
		<span class="token keyword">return</span> num <span class="token operator">*</span> num
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">func</span><span class="token punctuation">(</span>j <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Printing"</span><span class="token punctuation">,</span> <span class="token function">pow</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"from inside of an anonymous function"</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#125;</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token comment">// anonymous function are declared and called immediately</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,Ka,Wa,$a,Qa,g,nn,ms,ue,Xa,Ya,ha,x,bs,ie,re,vs,ke,fe,ga,nt,st,E,Es,de,me,_s,be,ve,ys,Ee,_e,ws,ye,we,at,mn,Xl=`<code class="language-go"><span class="token keyword">type</span> Person <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
	FirstName <span class="token builtin">string</span>
	LastName  <span class="token builtin">string</span>
	Age       <span class="token builtin">int</span>
<span class="token punctuation">&#125;</span>

people <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>Person<span class="token punctuation">&#123;</span>
	<span class="token punctuation">&#123;</span><span class="token string">"Kimkim"</span><span class="token punctuation">,</span> <span class="token string">"Kim"</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
	<span class="token punctuation">&#123;</span><span class="token string">"Junhyuk"</span><span class="token punctuation">,</span> <span class="token string">"Seo"</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
	<span class="token punctuation">&#123;</span><span class="token string">"Leelee"</span><span class="token punctuation">,</span> <span class="token string">"Lee"</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// we can pass functions as parameter in Go</span>
sort<span class="token punctuation">.</span><span class="token function">Slice</span><span class="token punctuation">(</span>people<span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>i <span class="token builtin">int</span><span class="token punctuation">,</span> j <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">&#123;</span> <span class="token comment">// sort.Slice sorts the slice using function that is passed in</span>
	<span class="token keyword">return</span> people<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Age <span class="token operator">&lt;</span> people<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>Age <span class="token comment">// sorting by Age field</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>people<span class="token punctuation">)</span>

sort<span class="token punctuation">.</span><span class="token function">Slice</span><span class="token punctuation">(</span>people<span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>i <span class="token builtin">int</span><span class="token punctuation">,</span> j <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">return</span> people<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>LastName <span class="token operator">&lt;</span> people<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>LastName
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>people<span class="token punctuation">)</span></code>`,tt,An,Re,pt,et,ot,bn,Yl=`<code class="language-go"><span class="token keyword">func</span> <span class="token function">makeMult</span><span class="token punctuation">(</span>base <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">return</span> <span class="token keyword">func</span><span class="token punctuation">(</span>factor <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> base <span class="token operator">*</span> factor
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	twoBase <span class="token operator">:=</span> <span class="token function">makeMult</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
	threeBase <span class="token operator">:=</span> <span class="token function">makeMult</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>

	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">twoBase</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">threeBase</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,lt,Tn,Pe,ct,ut,it,rt,sn,an,Rs,Ce,kt,ft,dt,C,Ne,Ps,Oe,Be,xe,De,mt,vn,hl=`<code class="language-go"><span class="token keyword">func</span> <span class="token function">getFile</span><span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>os<span class="token punctuation">.</span>File<span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	file<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err
	<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span> <span class="token comment">// it returns resource and a closure that cleans up the resource</span>
		<span class="token keyword">return</span> file<span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> file<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token boolean">_</span><span class="token punctuation">,</span> closer<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">getFile</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>Args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">defer</span> <span class="token function">closer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// releases the resource by using defer and closer function</span>
<span class="token punctuation">&#125;</span></code>`,bt,vt,Et,w,Cs,Ae,Te,Ns,Se,je,Os,Me,He,_t,En,gl=`<code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	j <span class="token operator">:=</span> <span class="token number">2</span>

	<span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span>i <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span>

	j<span class="token operator">++</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code>`,yt,Sn,Ge,wt,_n,nc=`<code class="language-go"><span class="token number">3</span>
<span class="token number">2</span></code>`,Rt,f,Le,Bs,Fe,Ve,xs,Ie,ze,Ds,qe,Je,As,Ue,Ze,Ts,Ke,We,$e,Qe,Ss,Xe,Ye,js,he,ge,Ms,no,so,Hs,ao,to,Pt,Ct,Nt,yn,sc=`<code class="language-go"><span class="token keyword">func</span> <span class="token function">DoSomeInserts</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> db <span class="token operator">*</span>sql<span class="token punctuation">.</span>DB<span class="token punctuation">,</span> value1<span class="token punctuation">,</span> value2 <span class="token builtin">string</span><span class="token punctuation">)</span>
                  <span class="token punctuation">(</span>err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    tx<span class="token punctuation">,</span> err <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">BeginTx</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> err
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
            err <span class="token operator">=</span> tx<span class="token punctuation">.</span><span class="token function">Commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
            tx<span class="token punctuation">.</span><span class="token function">Rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">=</span> tx<span class="token punctuation">.</span><span class="token function">ExecContext</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token string">"INSERT INTO FOO (val) values $1"</span><span class="token punctuation">,</span> value1<span class="token punctuation">)</span>
    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> err
    <span class="token punctuation">&#125;</span>
    <span class="token comment">// use tx to do more database inserts here</span>
    <span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">&#125;</span></code>`,Ot,_,po,Gs,eo,oo,Ls,lo,co,Fs,uo,io,Bt,xt,Dt,At,tn,pn,Vs,ro,Tt,St,jt,jn,D,wn,Mn,Do,ko,fo,mo,Rn,bo,Mt,Ht,Gt;return{c(){Cn=t("br"),qs=i(),Nn=t("p"),Jt=l("본 글은 Golang을 공부하며 주요 내용이라 생각되는 것들을 기록해둔 자료이며, Ubuntu 20.04 LTS 기준으로 작성되었습니다."),Js=i(),Us=t("br"),Zs=t("br"),Ks=i(),T=t("h2"),S=t("a"),Vn=t("span"),Ut=l("Functions"),Ws=i(),$s=t("hr"),Qs=i(),Xs=t("br"),Ys=i(),j=t("h3"),M=t("a"),In=t("span"),Zt=l("Declaration and Invocation"),hs=i(),On=t("p"),Kt=l(`함수에는 파라미터들과 그 타입, 반환형의 타입을 명시한다. 파라미터의 타입은 변수 선언처럼 타입이 뒤에 온다.
파라미터와 함수 body 사이에 반환형이 위치한다.`),gs=i(),on=t("pre"),na=i(),H=t("p"),Wt=l("파라미터들의 타입이 중복되면 생략할 수 있다. 위 함수의 선언 부분을 "),zn=t("code"),$t=l("func div(numerator denominator int) int {"),Qt=l("로 대체하여도 동일하게 동작한다."),sa=i(),aa=t("br"),ta=t("br"),pa=i(),G=t("h3"),L=t("a"),qn=t("span"),Xt=l("Emulating Named Parameters using Struct"),ea=i(),Bn=t("p"),Yt=l(`Go는 named parameter나, parameter의 default value를 지원하지 않는다(Optional parameter가 없다).
다시 말해, 함수가 있으면 그 함수의 모든 파라미터를 넘겨줘야 한다.`),oa=i(),B=t("p"),ht=l("named parameter는 함수의 파라미터가 많을 때 유용하기 때문에, "),Jn=t("code"),gt=l("struct"),np=l(`로 이를 대체할 수는 있다.
다만 애초에 함수의 파라미터가 많은 게 그리 이상적인 상황은 아니긴 하다.
아래의 코드는 `),Un=t("code"),sp=l("struct"),la=i(),ln=t("pre"),ca=i(),ua=t("br"),ia=t("br"),ra=i(),F=t("h3"),V=t("a"),Zn=t("span"),ap=l("Variadic Parameter"),ka=i(),I=t("p"),tp=l("파라미터의 타입 앞에 "),Kn=t("code"),pp=l("..."),ep=l("를 붙여 variadic parameter로 만들 수 있다. Python의 *args랑 비슷하다."),fa=i(),cn=t("pre"),da=i(),z=t("p"),op=l("Slice의 뒤에 "),Wn=t("code"),lp=l("..."),cp=l("를 붙여, variadic parameter와 대응시킬 수도 있다."),ma=i(),ba=t("br"),va=t("br"),Ea=i(),q=t("h3"),J=t("a"),$n=t("span"),up=l("Multiple Return Values"),_a=i(),R=t("p"),ip=l(`Go의 특이한 점은 함수가 반환할 수 있는 값이 여러 개 존재한다는 것이다.
`),Qn=t("code"),rp=l("Tuple"),kp=l("형으로 값을 반환하는 Python과 그나마 유사한데, 사실 이것도 "),Xn=t("code"),fp=l("Tuple"),dp=l("로 묶어서 보내는 거라 엄연히 다르다."),ya=i(),U=t("p"),mp=l(`반환 값을 여러개 설정하려면 반환형을 써야 할 위치에 반환형들을 순서대로 나열한 뒤 소괄호로 묶으면 된다.
`),Yn=t("code"),bp=l("return"),vp=l("할 때 괄호로 묶어줄 필요는 없다."),wa=i(),un=t("pre"),Ra=i(),b=t("p"),Ep=l("함수에서 반환된 값들을 변수에 저장할 때는 "),hn=t("code"),_p=l("range"),yp=l("를 쓸 때와 유사하게, 컴마("),gn=t("code"),wp=l(","),Rp=l(")로 구분하여 순서대로 변수을 나열하면 된다."),Pp=t("br"),Cp=l(`
언더바(`),ns=t("code"),Np=l("_"),Op=l(")를 사용하면 저장할 필요 없는 변수는 생략할 수 있다. 이 역시도 앞서 봤던 패턴이다."),Pa=i(),Ca=t("br"),Na=t("br"),Oa=i(),Z=t("h3"),K=t("a"),ss=t("span"),Bp=l("Named Return Values"),Ba=i(),W=t("p"),xp=l("반환할 값들을 변수로 지정할 수 있는데, 이를 "),as=t("strong"),Dp=l("Named return value"),Ap=l(`라 한다.
Named return value들은 기본적으로 Zero value로 초기화된다.
또한 Named return value를 사용할 경우 반환할 값이 하나여도 소괄호로 둘러싸줘야 한다.`),xa=i(),m=t("p"),Tp=l("단, Named Return Value를 사용하면 두 가지 잠재적 문제점이 생길 수 있다."),Sp=t("br"),jp=l(`
하나는 Named return value을 shadowing할 수도 있다는 문제이다.`),Mp=t("br"),Hp=l(`
또 하나는 `),ts=t("code"),Gp=l("return result, remainder, err"),Lp=l(" 대신에 "),ps=t("code"),Fp=l('return 0, 0, errors.New("cannot divide by zero")'),Vp=l(` 이런 식으로
Named return value를 사용하지 않고 `),es=t("code"),Ip=l("return"),zp=l(`하여도 문제가 없다.
이 때문에 코드가 일관적으로 작성되지 않을 수도 있다는 점이다.`),Da=i(),rn=t("pre"),Aa=i(),v=t("p"),qp=l("Named Return Value를 사용하면 "),os=t("strong"),Jp=l("Blank return"),Up=l(`이란 것이 가능한데,
`),ls=t("code"),Zp=l("return result, remainder, err"),Kp=l(" 대신 "),cs=t("code"),Wp=l("return"),$p=l("만 적어도 "),us=t("code"),Qp=l("result, remainder, err"),Xp=l(`가 반환된다.
Named return value가 명시된 순서대로 반환하는 것이다.`),Ta=i(),Sa=t("br"),ja=t("br"),Ma=i(),$=t("h3"),Q=t("a"),is=t("span"),Yp=l("Functions Are Value"),Ha=i(),xn=t("p"),hp=l("다른 많은 언어에서 그러하듯, Go에서 함수는 값으로 여겨진다. 다시 말해 변수에 집어넣거나 할 수 있다."),Ga=i(),kn=t("pre"),La=i(),P=t("p"),gp=l("예제는 4개의 함수를 "),rs=t("code"),ne=l("map"),se=l("의 값으로 집어넣은 예제이다. 이 때 map의 value 타입은 "),ks=t("code"),ae=l("func(int, int), int"),te=l("가 된다."),Fa=i(),X=t("p"),pe=l("아래 예제처럼 "),fs=t("code"),ee=l("type"),oe=l(" 키워드를 사용하여 타입을 간략화할 수도 있다."),Va=i(),fn=t("pre"),Ia=i(),za=t("br"),qa=t("br"),Ja=i(),Y=t("h3"),h=t("a"),ds=t("span"),le=l("Anonymous Function"),Ua=i(),Dn=t("p"),ce=l("함수를 선언할 때 함수명만 지우면 익명함수가 된다. 익명함수를 즉시 호출하려면 익명함수 뒤에 소괄호를 붙여 파라미터만 보내주면 된다."),Za=i(),dn=t("pre"),Ka=i(),Wa=t("br"),$a=t("br"),Qa=i(),g=t("h2"),nn=t("a"),ms=t("span"),ue=l("Closure"),Xa=i(),Ya=t("hr"),ha=i(),x=t("p"),bs=t("strong"),ie=l("Closure"),re=l("란 특정한 함수 안에서 선언된 함수를 의미한다. 대체로 파라미터로 넘겨지거나, "),vs=t("code"),ke=l("return"),fe=l("을 통해 반환된다."),ga=i(),nt=t("br"),st=i(),E=t("p"),Es=t("code"),de=l("sort.Slice()"),me=l("함수는 파라미터로 정렬할 데이터와 원소들의 대소를 비교하여 "),_s=t("code"),be=l("bool"),ve=l(`값을 반환하는 함수를 인자로 받는다.
이 함수의 `),ys=t("code"),Ee=l("true"),_e=l(" 및 "),ws=t("code"),ye=l("false"),we=l(" 여부에 따라 Slice가 정렬된다."),at=i(),mn=t("pre"),tt=i(),An=t("p"),Re=l("ㅇㅇ"),pt=i(),et=t("br"),ot=i(),bn=t("pre"),lt=i(),Tn=t("p"),Pe=l("위 예제는 함수의 반환형이 Closure인 예제이다. 익명 함수로 반환되었다."),ct=i(),ut=t("br"),it=t("br"),rt=i(),sn=t("h2"),an=t("a"),Rs=t("span"),Ce=l("defer"),kt=i(),ft=t("hr"),dt=i(),C=t("p"),Ne=l("Go에는 "),Ps=t("strong"),Oe=l("defer"),Be=l("라는 키워드가 존재한다. 다른 언어에는 없는데 Go에만 있는 것 같다."),xe=t("br"),De=l(`
일반적으로 파일이나 네트워크 연결 등, 임시적으로 쓰이는 자원들을 다시 반납하기 위해 사용되는 것 같다.`),mt=i(),vn=t("pre"),bt=i(),vt=t("br"),Et=i(),w=t("p"),Cs=t("code"),Ae=l("defer"),Te=l(" 키워드가 쓰인 "),Ns=t("em"),Se=l("Closure"),je=l("는 값을 "),Os=t("code"),Me=l("return"),He=l("한 후 해당 함수가 끝나기 직전 실행된다."),_t=i(),En=t("pre"),yt=i(),Sn=t("p"),Ge=l("위 코드의 실행 결과는 다음과 같다."),wt=i(),_n=t("pre"),Rt=i(),f=t("p"),Le=l("먼저 "),Bs=t("code"),Fe=l("defer"),Ve=l("에 의해 "),xs=t("code"),Ie=l("2"),ze=l("를 출력하도록 예약된다. 이후 "),Ds=t("code"),qe=l("j"),Je=l("가 "),As=t("code"),Ue=l("3"),Ze=l("이 되어 출력이 되고, "),Ts=t("code"),Ke=l("main"),We=l("함수가 끝나기 직전에 2가 출력되는 것이다."),$e=t("br"),Qe=i(),Ss=t("code"),Xe=l("j"),Ye=l("값이 "),js=t("code"),he=l("3"),ge=l("으로 변했다고 "),Ms=t("code"),no=l("defer"),so=l("에 의해 실행되는 "),Hs=t("em"),ao=l("Closure"),to=l("의 출력 결과가 3으로 바뀌지 않는다."),Pt=i(),Ct=t("br"),Nt=i(),yn=t("pre"),Ot=i(),_=t("p"),po=l("위 예제는 "),Gs=t("code"),eo=l("defer"),oo=l("가 DB write에 사용된 예제이다. db write 과정에서 에러가 발생하지 않았다면 "),Ls=t("em"),lo=l("commit"),co=l(", 에러가 발생하였다면 "),Fs=t("em"),uo=l("rollback"),io=l("한다."),Bt=i(),xt=t("br"),Dt=t("br"),At=i(),tn=t("h2"),pn=t("a"),Vs=t("span"),ro=l("References"),Tt=i(),St=t("hr"),jt=i(),jn=t("center"),D=t("p"),wn=t("a"),Mn=t("img"),ko=i(),fo=t("br"),mo=i(),Rn=t("a"),bo=l("Jon Bodner, 『Learning Go』, O’Reilly Media, Inc."),Mt=i(),Ht=t("br"),Gt=t("br"),this.h()},l(n){Cn=p(n,"BR",{}),qs=r(n),Nn=p(n,"P",{});var e=u(Nn);Jt=c(e,"본 글은 Golang을 공부하며 주요 내용이라 생각되는 것들을 기록해둔 자료이며, Ubuntu 20.04 LTS 기준으로 작성되었습니다."),e.forEach(s),Js=r(n),Us=p(n,"BR",{}),Zs=p(n,"BR",{}),Ks=r(n),T=p(n,"H2",{id:!0});var vo=u(T);S=p(vo,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Ao=u(S);Vn=p(Ao,"SPAN",{class:!0}),u(Vn).forEach(s),Ao.forEach(s),Ut=c(vo,"Functions"),vo.forEach(s),Ws=r(n),$s=p(n,"HR",{}),Qs=r(n),Xs=p(n,"BR",{}),Ys=r(n),j=p(n,"H3",{id:!0});var Eo=u(j);M=p(Eo,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var To=u(M);In=p(To,"SPAN",{class:!0}),u(In).forEach(s),To.forEach(s),Zt=c(Eo,"Declaration and Invocation"),Eo.forEach(s),hs=r(n),On=p(n,"P",{});var So=u(On);Kt=c(So,`함수에는 파라미터들과 그 타입, 반환형의 타입을 명시한다. 파라미터의 타입은 변수 선언처럼 타입이 뒤에 온다.
파라미터와 함수 body 사이에 반환형이 위치한다.`),So.forEach(s),gs=r(n),on=p(n,"PRE",{class:!0});var ac=u(on);ac.forEach(s),na=r(n),H=p(n,"P",{});var Lt=u(H);Wt=c(Lt,"파라미터들의 타입이 중복되면 생략할 수 있다. 위 함수의 선언 부분을 "),zn=p(Lt,"CODE",{});var jo=u(zn);$t=c(jo,"func div(numerator denominator int) int {"),jo.forEach(s),Qt=c(Lt,"로 대체하여도 동일하게 동작한다."),Lt.forEach(s),sa=r(n),aa=p(n,"BR",{}),ta=p(n,"BR",{}),pa=r(n),G=p(n,"H3",{id:!0});var _o=u(G);L=p(_o,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Mo=u(L);qn=p(Mo,"SPAN",{class:!0}),u(qn).forEach(s),Mo.forEach(s),Xt=c(_o,"Emulating Named Parameters using Struct"),_o.forEach(s),ea=r(n),Bn=p(n,"P",{});var Ho=u(Bn);Yt=c(Ho,`Go는 named parameter나, parameter의 default value를 지원하지 않는다(Optional parameter가 없다).
다시 말해, 함수가 있으면 그 함수의 모든 파라미터를 넘겨줘야 한다.`),Ho.forEach(s),oa=r(n),B=p(n,"P",{});var Is=u(B);ht=c(Is,"named parameter는 함수의 파라미터가 많을 때 유용하기 때문에, "),Jn=p(Is,"CODE",{});var Go=u(Jn);gt=c(Go,"struct"),Go.forEach(s),np=c(Is,`로 이를 대체할 수는 있다.
다만 애초에 함수의 파라미터가 많은 게 그리 이상적인 상황은 아니긴 하다.
아래의 코드는 `),Un=p(Is,"CODE",{});var Lo=u(Un);sp=c(Lo,"struct"),Lo.forEach(s),Is.forEach(s),la=r(n),ln=p(n,"PRE",{class:!0});var tc=u(ln);tc.forEach(s),ca=r(n),ua=p(n,"BR",{}),ia=p(n,"BR",{}),ra=r(n),F=p(n,"H3",{id:!0});var yo=u(F);V=p(yo,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Fo=u(V);Zn=p(Fo,"SPAN",{class:!0}),u(Zn).forEach(s),Fo.forEach(s),ap=c(yo,"Variadic Parameter"),yo.forEach(s),ka=r(n),I=p(n,"P",{});var Ft=u(I);tp=c(Ft,"파라미터의 타입 앞에 "),Kn=p(Ft,"CODE",{});var Vo=u(Kn);pp=c(Vo,"..."),Vo.forEach(s),ep=c(Ft,"를 붙여 variadic parameter로 만들 수 있다. Python의 *args랑 비슷하다."),Ft.forEach(s),fa=r(n),cn=p(n,"PRE",{class:!0});var pc=u(cn);pc.forEach(s),da=r(n),z=p(n,"P",{});var Vt=u(z);op=c(Vt,"Slice의 뒤에 "),Wn=p(Vt,"CODE",{});var Io=u(Wn);lp=c(Io,"..."),Io.forEach(s),cp=c(Vt,"를 붙여, variadic parameter와 대응시킬 수도 있다."),Vt.forEach(s),ma=r(n),ba=p(n,"BR",{}),va=p(n,"BR",{}),Ea=r(n),q=p(n,"H3",{id:!0});var wo=u(q);J=p(wo,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var zo=u(J);$n=p(zo,"SPAN",{class:!0}),u($n).forEach(s),zo.forEach(s),up=c(wo,"Multiple Return Values"),wo.forEach(s),_a=r(n),R=p(n,"P",{});var Hn=u(R);ip=c(Hn,`Go의 특이한 점은 함수가 반환할 수 있는 값이 여러 개 존재한다는 것이다.
`),Qn=p(Hn,"CODE",{});var qo=u(Qn);rp=c(qo,"Tuple"),qo.forEach(s),kp=c(Hn,"형으로 값을 반환하는 Python과 그나마 유사한데, 사실 이것도 "),Xn=p(Hn,"CODE",{});var Jo=u(Xn);fp=c(Jo,"Tuple"),Jo.forEach(s),dp=c(Hn,"로 묶어서 보내는 거라 엄연히 다르다."),Hn.forEach(s),ya=r(n),U=p(n,"P",{});var It=u(U);mp=c(It,`반환 값을 여러개 설정하려면 반환형을 써야 할 위치에 반환형들을 순서대로 나열한 뒤 소괄호로 묶으면 된다.
`),Yn=p(It,"CODE",{});var Uo=u(Yn);bp=c(Uo,"return"),Uo.forEach(s),vp=c(It,"할 때 괄호로 묶어줄 필요는 없다."),It.forEach(s),wa=r(n),un=p(n,"PRE",{class:!0});var ec=u(un);ec.forEach(s),Ra=r(n),b=p(n,"P",{});var N=u(b);Ep=c(N,"함수에서 반환된 값들을 변수에 저장할 때는 "),hn=p(N,"CODE",{});var Zo=u(hn);_p=c(Zo,"range"),Zo.forEach(s),yp=c(N,"를 쓸 때와 유사하게, 컴마("),gn=p(N,"CODE",{});var Ko=u(gn);wp=c(Ko,","),Ko.forEach(s),Rp=c(N,")로 구분하여 순서대로 변수을 나열하면 된다."),Pp=p(N,"BR",{}),Cp=c(N,`
언더바(`),ns=p(N,"CODE",{});var Wo=u(ns);Np=c(Wo,"_"),Wo.forEach(s),Op=c(N,")를 사용하면 저장할 필요 없는 변수는 생략할 수 있다. 이 역시도 앞서 봤던 패턴이다."),N.forEach(s),Pa=r(n),Ca=p(n,"BR",{}),Na=p(n,"BR",{}),Oa=r(n),Z=p(n,"H3",{id:!0});var Ro=u(Z);K=p(Ro,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var $o=u(K);ss=p($o,"SPAN",{class:!0}),u(ss).forEach(s),$o.forEach(s),Bp=c(Ro,"Named Return Values"),Ro.forEach(s),Ba=r(n),W=p(n,"P",{});var zt=u(W);xp=c(zt,"반환할 값들을 변수로 지정할 수 있는데, 이를 "),as=p(zt,"STRONG",{});var Qo=u(as);Dp=c(Qo,"Named return value"),Qo.forEach(s),Ap=c(zt,`라 한다.
Named return value들은 기본적으로 Zero value로 초기화된다.
또한 Named return value를 사용할 경우 반환할 값이 하나여도 소괄호로 둘러싸줘야 한다.`),zt.forEach(s),xa=r(n),m=p(n,"P",{});var y=u(m);Tp=c(y,"단, Named Return Value를 사용하면 두 가지 잠재적 문제점이 생길 수 있다."),Sp=p(y,"BR",{}),jp=c(y,`
하나는 Named return value을 shadowing할 수도 있다는 문제이다.`),Mp=p(y,"BR",{}),Hp=c(y,`
또 하나는 `),ts=p(y,"CODE",{});var Xo=u(ts);Gp=c(Xo,"return result, remainder, err"),Xo.forEach(s),Lp=c(y," 대신에 "),ps=p(y,"CODE",{});var Yo=u(ps);Fp=c(Yo,'return 0, 0, errors.New("cannot divide by zero")'),Yo.forEach(s),Vp=c(y,` 이런 식으로
Named return value를 사용하지 않고 `),es=p(y,"CODE",{});var ho=u(es);Ip=c(ho,"return"),ho.forEach(s),zp=c(y,`하여도 문제가 없다.
이 때문에 코드가 일관적으로 작성되지 않을 수도 있다는 점이다.`),y.forEach(s),Da=r(n),rn=p(n,"PRE",{class:!0});var oc=u(rn);oc.forEach(s),Aa=r(n),v=p(n,"P",{});var O=u(v);qp=c(O,"Named Return Value를 사용하면 "),os=p(O,"STRONG",{});var go=u(os);Jp=c(go,"Blank return"),go.forEach(s),Up=c(O,`이란 것이 가능한데,
`),ls=p(O,"CODE",{});var nl=u(ls);Zp=c(nl,"return result, remainder, err"),nl.forEach(s),Kp=c(O," 대신 "),cs=p(O,"CODE",{});var sl=u(cs);Wp=c(sl,"return"),sl.forEach(s),$p=c(O,"만 적어도 "),us=p(O,"CODE",{});var al=u(us);Qp=c(al,"result, remainder, err"),al.forEach(s),Xp=c(O,`가 반환된다.
Named return value가 명시된 순서대로 반환하는 것이다.`),O.forEach(s),Ta=r(n),Sa=p(n,"BR",{}),ja=p(n,"BR",{}),Ma=r(n),$=p(n,"H3",{id:!0});var Po=u($);Q=p(Po,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var tl=u(Q);is=p(tl,"SPAN",{class:!0}),u(is).forEach(s),tl.forEach(s),Yp=c(Po,"Functions Are Value"),Po.forEach(s),Ha=r(n),xn=p(n,"P",{});var pl=u(xn);hp=c(pl,"다른 많은 언어에서 그러하듯, Go에서 함수는 값으로 여겨진다. 다시 말해 변수에 집어넣거나 할 수 있다."),pl.forEach(s),Ga=r(n),kn=p(n,"PRE",{class:!0});var lc=u(kn);lc.forEach(s),La=r(n),P=p(n,"P",{});var Gn=u(P);gp=c(Gn,"예제는 4개의 함수를 "),rs=p(Gn,"CODE",{});var el=u(rs);ne=c(el,"map"),el.forEach(s),se=c(Gn,"의 값으로 집어넣은 예제이다. 이 때 map의 value 타입은 "),ks=p(Gn,"CODE",{});var ol=u(ks);ae=c(ol,"func(int, int), int"),ol.forEach(s),te=c(Gn,"가 된다."),Gn.forEach(s),Fa=r(n),X=p(n,"P",{});var qt=u(X);pe=c(qt,"아래 예제처럼 "),fs=p(qt,"CODE",{});var ll=u(fs);ee=c(ll,"type"),ll.forEach(s),oe=c(qt," 키워드를 사용하여 타입을 간략화할 수도 있다."),qt.forEach(s),Va=r(n),fn=p(n,"PRE",{class:!0});var cc=u(fn);cc.forEach(s),Ia=r(n),za=p(n,"BR",{}),qa=p(n,"BR",{}),Ja=r(n),Y=p(n,"H3",{id:!0});var Co=u(Y);h=p(Co,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var cl=u(h);ds=p(cl,"SPAN",{class:!0}),u(ds).forEach(s),cl.forEach(s),le=c(Co,"Anonymous Function"),Co.forEach(s),Ua=r(n),Dn=p(n,"P",{});var ul=u(Dn);ce=c(ul,"함수를 선언할 때 함수명만 지우면 익명함수가 된다. 익명함수를 즉시 호출하려면 익명함수 뒤에 소괄호를 붙여 파라미터만 보내주면 된다."),ul.forEach(s),Za=r(n),dn=p(n,"PRE",{class:!0});var uc=u(dn);uc.forEach(s),Ka=r(n),Wa=p(n,"BR",{}),$a=p(n,"BR",{}),Qa=r(n),g=p(n,"H2",{id:!0});var No=u(g);nn=p(No,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var il=u(nn);ms=p(il,"SPAN",{class:!0}),u(ms).forEach(s),il.forEach(s),ue=c(No,"Closure"),No.forEach(s),Xa=r(n),Ya=p(n,"HR",{}),ha=r(n),x=p(n,"P",{});var zs=u(x);bs=p(zs,"STRONG",{});var rl=u(bs);ie=c(rl,"Closure"),rl.forEach(s),re=c(zs,"란 특정한 함수 안에서 선언된 함수를 의미한다. 대체로 파라미터로 넘겨지거나, "),vs=p(zs,"CODE",{});var kl=u(vs);ke=c(kl,"return"),kl.forEach(s),fe=c(zs,"을 통해 반환된다."),zs.forEach(s),ga=r(n),nt=p(n,"BR",{}),st=r(n),E=p(n,"P",{});var A=u(E);Es=p(A,"CODE",{});var fl=u(Es);de=c(fl,"sort.Slice()"),fl.forEach(s),me=c(A,"함수는 파라미터로 정렬할 데이터와 원소들의 대소를 비교하여 "),_s=p(A,"CODE",{});var dl=u(_s);be=c(dl,"bool"),dl.forEach(s),ve=c(A,`값을 반환하는 함수를 인자로 받는다.
이 함수의 `),ys=p(A,"CODE",{});var ml=u(ys);Ee=c(ml,"true"),ml.forEach(s),_e=c(A," 및 "),ws=p(A,"CODE",{});var bl=u(ws);ye=c(bl,"false"),bl.forEach(s),we=c(A," 여부에 따라 Slice가 정렬된다."),A.forEach(s),at=r(n),mn=p(n,"PRE",{class:!0});var ic=u(mn);ic.forEach(s),tt=r(n),An=p(n,"P",{});var vl=u(An);Re=c(vl,"ㅇㅇ"),vl.forEach(s),pt=r(n),et=p(n,"BR",{}),ot=r(n),bn=p(n,"PRE",{class:!0});var rc=u(bn);rc.forEach(s),lt=r(n),Tn=p(n,"P",{});var El=u(Tn);Pe=c(El,"위 예제는 함수의 반환형이 Closure인 예제이다. 익명 함수로 반환되었다."),El.forEach(s),ct=r(n),ut=p(n,"BR",{}),it=p(n,"BR",{}),rt=r(n),sn=p(n,"H2",{id:!0});var Oo=u(sn);an=p(Oo,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var _l=u(an);Rs=p(_l,"SPAN",{class:!0}),u(Rs).forEach(s),_l.forEach(s),Ce=c(Oo,"defer"),Oo.forEach(s),kt=r(n),ft=p(n,"HR",{}),dt=r(n),C=p(n,"P",{});var Ln=u(C);Ne=c(Ln,"Go에는 "),Ps=p(Ln,"STRONG",{});var yl=u(Ps);Oe=c(yl,"defer"),yl.forEach(s),Be=c(Ln,"라는 키워드가 존재한다. 다른 언어에는 없는데 Go에만 있는 것 같다."),xe=p(Ln,"BR",{}),De=c(Ln,`
일반적으로 파일이나 네트워크 연결 등, 임시적으로 쓰이는 자원들을 다시 반납하기 위해 사용되는 것 같다.`),Ln.forEach(s),mt=r(n),vn=p(n,"PRE",{class:!0});var kc=u(vn);kc.forEach(s),bt=r(n),vt=p(n,"BR",{}),Et=r(n),w=p(n,"P",{});var Pn=u(w);Cs=p(Pn,"CODE",{});var wl=u(Cs);Ae=c(wl,"defer"),wl.forEach(s),Te=c(Pn," 키워드가 쓰인 "),Ns=p(Pn,"EM",{});var Rl=u(Ns);Se=c(Rl,"Closure"),Rl.forEach(s),je=c(Pn,"는 값을 "),Os=p(Pn,"CODE",{});var Pl=u(Os);Me=c(Pl,"return"),Pl.forEach(s),He=c(Pn,"한 후 해당 함수가 끝나기 직전 실행된다."),Pn.forEach(s),_t=r(n),En=p(n,"PRE",{class:!0});var fc=u(En);fc.forEach(s),yt=r(n),Sn=p(n,"P",{});var Cl=u(Sn);Ge=c(Cl,"위 코드의 실행 결과는 다음과 같다."),Cl.forEach(s),wt=r(n),_n=p(n,"PRE",{class:!0});var dc=u(_n);dc.forEach(s),Rt=r(n),f=p(n,"P",{});var d=u(f);Le=c(d,"먼저 "),Bs=p(d,"CODE",{});var Nl=u(Bs);Fe=c(Nl,"defer"),Nl.forEach(s),Ve=c(d,"에 의해 "),xs=p(d,"CODE",{});var Ol=u(xs);Ie=c(Ol,"2"),Ol.forEach(s),ze=c(d,"를 출력하도록 예약된다. 이후 "),Ds=p(d,"CODE",{});var Bl=u(Ds);qe=c(Bl,"j"),Bl.forEach(s),Je=c(d,"가 "),As=p(d,"CODE",{});var xl=u(As);Ue=c(xl,"3"),xl.forEach(s),Ze=c(d,"이 되어 출력이 되고, "),Ts=p(d,"CODE",{});var Dl=u(Ts);Ke=c(Dl,"main"),Dl.forEach(s),We=c(d,"함수가 끝나기 직전에 2가 출력되는 것이다."),$e=p(d,"BR",{}),Qe=r(d),Ss=p(d,"CODE",{});var Al=u(Ss);Xe=c(Al,"j"),Al.forEach(s),Ye=c(d,"값이 "),js=p(d,"CODE",{});var Tl=u(js);he=c(Tl,"3"),Tl.forEach(s),ge=c(d,"으로 변했다고 "),Ms=p(d,"CODE",{});var Sl=u(Ms);no=c(Sl,"defer"),Sl.forEach(s),so=c(d,"에 의해 실행되는 "),Hs=p(d,"EM",{});var jl=u(Hs);ao=c(jl,"Closure"),jl.forEach(s),to=c(d,"의 출력 결과가 3으로 바뀌지 않는다."),d.forEach(s),Pt=r(n),Ct=p(n,"BR",{}),Nt=r(n),yn=p(n,"PRE",{class:!0});var mc=u(yn);mc.forEach(s),Ot=r(n),_=p(n,"P",{});var en=u(_);po=c(en,"위 예제는 "),Gs=p(en,"CODE",{});var Ml=u(Gs);eo=c(Ml,"defer"),Ml.forEach(s),oo=c(en,"가 DB write에 사용된 예제이다. db write 과정에서 에러가 발생하지 않았다면 "),Ls=p(en,"EM",{});var Hl=u(Ls);lo=c(Hl,"commit"),Hl.forEach(s),co=c(en,", 에러가 발생하였다면 "),Fs=p(en,"EM",{});var Gl=u(Fs);uo=c(Gl,"rollback"),Gl.forEach(s),io=c(en,"한다."),en.forEach(s),Bt=r(n),xt=p(n,"BR",{}),Dt=p(n,"BR",{}),At=r(n),tn=p(n,"H2",{id:!0});var Bo=u(tn);pn=p(Bo,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Ll=u(pn);Vs=p(Ll,"SPAN",{class:!0}),u(Vs).forEach(s),Ll.forEach(s),ro=c(Bo,"References"),Bo.forEach(s),Tt=r(n),St=p(n,"HR",{}),jt=r(n),jn=p(n,"CENTER",{});var Fl=u(jn);D=p(Fl,"P",{});var Fn=u(D);wn=p(Fn,"A",{href:!0,rel:!0});var Vl=u(wn);Mn=p(Vl,"IMG",{src:!0,alt:!0}),Vl.forEach(s),ko=r(Fn),fo=p(Fn,"BR",{}),mo=r(Fn),Rn=p(Fn,"A",{href:!0,rel:!0});var Il=u(Rn);bo=c(Il,"Jon Bodner, 『Learning Go』, O’Reilly Media, Inc."),Il.forEach(s),Fn.forEach(s),Fl.forEach(s),Mt=r(n),Ht=p(n,"BR",{}),Gt=p(n,"BR",{}),this.h()},h(){k(Vn,"class","icon icon-link"),k(S,"aria-hidden","true"),k(S,"tabindex","-1"),k(S,"href","#functions"),k(T,"id","functions"),k(In,"class","icon icon-link"),k(M,"aria-hidden","true"),k(M,"tabindex","-1"),k(M,"href","#declaration-and-invocation"),k(j,"id","declaration-and-invocation"),k(on,"class","language-go"),k(qn,"class","icon icon-link"),k(L,"aria-hidden","true"),k(L,"tabindex","-1"),k(L,"href","#emulating-named-parameters-using-struct"),k(G,"id","emulating-named-parameters-using-struct"),k(ln,"class","language-go"),k(Zn,"class","icon icon-link"),k(V,"aria-hidden","true"),k(V,"tabindex","-1"),k(V,"href","#variadic-parameter"),k(F,"id","variadic-parameter"),k(cn,"class","language-go"),k($n,"class","icon icon-link"),k(J,"aria-hidden","true"),k(J,"tabindex","-1"),k(J,"href","#multiple-return-values"),k(q,"id","multiple-return-values"),k(un,"class","language-go"),k(ss,"class","icon icon-link"),k(K,"aria-hidden","true"),k(K,"tabindex","-1"),k(K,"href","#named-return-values"),k(Z,"id","named-return-values"),k(rn,"class","language-go"),k(is,"class","icon icon-link"),k(Q,"aria-hidden","true"),k(Q,"tabindex","-1"),k(Q,"href","#functions-are-value"),k($,"id","functions-are-value"),k(kn,"class","language-go"),k(fn,"class","language-go"),k(ds,"class","icon icon-link"),k(h,"aria-hidden","true"),k(h,"tabindex","-1"),k(h,"href","#anonymous-function"),k(Y,"id","anonymous-function"),k(dn,"class","language-go"),k(ms,"class","icon icon-link"),k(nn,"aria-hidden","true"),k(nn,"tabindex","-1"),k(nn,"href","#closure"),k(g,"id","closure"),k(mn,"class","language-go"),k(bn,"class","language-go"),k(Rs,"class","icon icon-link"),k(an,"aria-hidden","true"),k(an,"tabindex","-1"),k(an,"href","#defer"),k(sn,"id","defer"),k(vn,"class","language-go"),k(En,"class","language-go"),k(_n,"class","language-go"),k(yn,"class","language-go"),k(Vs,"class","icon icon-link"),k(pn,"aria-hidden","true"),k(pn,"tabindex","-1"),k(pn,"href","#references"),k(tn,"id","references"),_c(Mn.src,Do="https://learning.oreilly.com/covers/urn:orm:book:9781492077206/400w/")||k(Mn,"src",Do),k(Mn,"alt","Learning Go Book Cover"),k(wn,"href","https://learning.oreilly.com/library/view/learning-go/9781492077206/"),k(wn,"rel","nofollow"),k(Rn,"href","https://learning.oreilly.com/library/view/learning-go/9781492077206/"),k(Rn,"rel","nofollow")},m(n,e){o(n,Cn,e),o(n,qs,e),o(n,Nn,e),a(Nn,Jt),o(n,Js,e),o(n,Us,e),o(n,Zs,e),o(n,Ks,e),o(n,T,e),a(T,S),a(S,Vn),a(T,Ut),o(n,Ws,e),o(n,$s,e),o(n,Qs,e),o(n,Xs,e),o(n,Ys,e),o(n,j,e),a(j,M),a(M,In),a(j,Zt),o(n,hs,e),o(n,On,e),a(On,Kt),o(n,gs,e),o(n,on,e),on.innerHTML=ql,o(n,na,e),o(n,H,e),a(H,Wt),a(H,zn),a(zn,$t),a(H,Qt),o(n,sa,e),o(n,aa,e),o(n,ta,e),o(n,pa,e),o(n,G,e),a(G,L),a(L,qn),a(G,Xt),o(n,ea,e),o(n,Bn,e),a(Bn,Yt),o(n,oa,e),o(n,B,e),a(B,ht),a(B,Jn),a(Jn,gt),a(B,np),a(B,Un),a(Un,sp),o(n,la,e),o(n,ln,e),ln.innerHTML=Jl,o(n,ca,e),o(n,ua,e),o(n,ia,e),o(n,ra,e),o(n,F,e),a(F,V),a(V,Zn),a(F,ap),o(n,ka,e),o(n,I,e),a(I,tp),a(I,Kn),a(Kn,pp),a(I,ep),o(n,fa,e),o(n,cn,e),cn.innerHTML=Ul,o(n,da,e),o(n,z,e),a(z,op),a(z,Wn),a(Wn,lp),a(z,cp),o(n,ma,e),o(n,ba,e),o(n,va,e),o(n,Ea,e),o(n,q,e),a(q,J),a(J,$n),a(q,up),o(n,_a,e),o(n,R,e),a(R,ip),a(R,Qn),a(Qn,rp),a(R,kp),a(R,Xn),a(Xn,fp),a(R,dp),o(n,ya,e),o(n,U,e),a(U,mp),a(U,Yn),a(Yn,bp),a(U,vp),o(n,wa,e),o(n,un,e),un.innerHTML=Zl,o(n,Ra,e),o(n,b,e),a(b,Ep),a(b,hn),a(hn,_p),a(b,yp),a(b,gn),a(gn,wp),a(b,Rp),a(b,Pp),a(b,Cp),a(b,ns),a(ns,Np),a(b,Op),o(n,Pa,e),o(n,Ca,e),o(n,Na,e),o(n,Oa,e),o(n,Z,e),a(Z,K),a(K,ss),a(Z,Bp),o(n,Ba,e),o(n,W,e),a(W,xp),a(W,as),a(as,Dp),a(W,Ap),o(n,xa,e),o(n,m,e),a(m,Tp),a(m,Sp),a(m,jp),a(m,Mp),a(m,Hp),a(m,ts),a(ts,Gp),a(m,Lp),a(m,ps),a(ps,Fp),a(m,Vp),a(m,es),a(es,Ip),a(m,zp),o(n,Da,e),o(n,rn,e),rn.innerHTML=Kl,o(n,Aa,e),o(n,v,e),a(v,qp),a(v,os),a(os,Jp),a(v,Up),a(v,ls),a(ls,Zp),a(v,Kp),a(v,cs),a(cs,Wp),a(v,$p),a(v,us),a(us,Qp),a(v,Xp),o(n,Ta,e),o(n,Sa,e),o(n,ja,e),o(n,Ma,e),o(n,$,e),a($,Q),a(Q,is),a($,Yp),o(n,Ha,e),o(n,xn,e),a(xn,hp),o(n,Ga,e),o(n,kn,e),kn.innerHTML=Wl,o(n,La,e),o(n,P,e),a(P,gp),a(P,rs),a(rs,ne),a(P,se),a(P,ks),a(ks,ae),a(P,te),o(n,Fa,e),o(n,X,e),a(X,pe),a(X,fs),a(fs,ee),a(X,oe),o(n,Va,e),o(n,fn,e),fn.innerHTML=$l,o(n,Ia,e),o(n,za,e),o(n,qa,e),o(n,Ja,e),o(n,Y,e),a(Y,h),a(h,ds),a(Y,le),o(n,Ua,e),o(n,Dn,e),a(Dn,ce),o(n,Za,e),o(n,dn,e),dn.innerHTML=Ql,o(n,Ka,e),o(n,Wa,e),o(n,$a,e),o(n,Qa,e),o(n,g,e),a(g,nn),a(nn,ms),a(g,ue),o(n,Xa,e),o(n,Ya,e),o(n,ha,e),o(n,x,e),a(x,bs),a(bs,ie),a(x,re),a(x,vs),a(vs,ke),a(x,fe),o(n,ga,e),o(n,nt,e),o(n,st,e),o(n,E,e),a(E,Es),a(Es,de),a(E,me),a(E,_s),a(_s,be),a(E,ve),a(E,ys),a(ys,Ee),a(E,_e),a(E,ws),a(ws,ye),a(E,we),o(n,at,e),o(n,mn,e),mn.innerHTML=Xl,o(n,tt,e),o(n,An,e),a(An,Re),o(n,pt,e),o(n,et,e),o(n,ot,e),o(n,bn,e),bn.innerHTML=Yl,o(n,lt,e),o(n,Tn,e),a(Tn,Pe),o(n,ct,e),o(n,ut,e),o(n,it,e),o(n,rt,e),o(n,sn,e),a(sn,an),a(an,Rs),a(sn,Ce),o(n,kt,e),o(n,ft,e),o(n,dt,e),o(n,C,e),a(C,Ne),a(C,Ps),a(Ps,Oe),a(C,Be),a(C,xe),a(C,De),o(n,mt,e),o(n,vn,e),vn.innerHTML=hl,o(n,bt,e),o(n,vt,e),o(n,Et,e),o(n,w,e),a(w,Cs),a(Cs,Ae),a(w,Te),a(w,Ns),a(Ns,Se),a(w,je),a(w,Os),a(Os,Me),a(w,He),o(n,_t,e),o(n,En,e),En.innerHTML=gl,o(n,yt,e),o(n,Sn,e),a(Sn,Ge),o(n,wt,e),o(n,_n,e),_n.innerHTML=nc,o(n,Rt,e),o(n,f,e),a(f,Le),a(f,Bs),a(Bs,Fe),a(f,Ve),a(f,xs),a(xs,Ie),a(f,ze),a(f,Ds),a(Ds,qe),a(f,Je),a(f,As),a(As,Ue),a(f,Ze),a(f,Ts),a(Ts,Ke),a(f,We),a(f,$e),a(f,Qe),a(f,Ss),a(Ss,Xe),a(f,Ye),a(f,js),a(js,he),a(f,ge),a(f,Ms),a(Ms,no),a(f,so),a(f,Hs),a(Hs,ao),a(f,to),o(n,Pt,e),o(n,Ct,e),o(n,Nt,e),o(n,yn,e),yn.innerHTML=sc,o(n,Ot,e),o(n,_,e),a(_,po),a(_,Gs),a(Gs,eo),a(_,oo),a(_,Ls),a(Ls,lo),a(_,co),a(_,Fs),a(Fs,uo),a(_,io),o(n,Bt,e),o(n,xt,e),o(n,Dt,e),o(n,At,e),o(n,tn,e),a(tn,pn),a(pn,Vs),a(tn,ro),o(n,Tt,e),o(n,St,e),o(n,jt,e),o(n,jn,e),a(jn,D),a(D,wn),a(wn,Mn),a(D,ko),a(D,fo),a(D,mo),a(D,Rn),a(Rn,bo),o(n,Mt,e),o(n,Ht,e),o(n,Gt,e)},p:xo,i:xo,o:xo,d(n){n&&s(Cn),n&&s(qs),n&&s(Nn),n&&s(Js),n&&s(Us),n&&s(Zs),n&&s(Ks),n&&s(T),n&&s(Ws),n&&s($s),n&&s(Qs),n&&s(Xs),n&&s(Ys),n&&s(j),n&&s(hs),n&&s(On),n&&s(gs),n&&s(on),n&&s(na),n&&s(H),n&&s(sa),n&&s(aa),n&&s(ta),n&&s(pa),n&&s(G),n&&s(ea),n&&s(Bn),n&&s(oa),n&&s(B),n&&s(la),n&&s(ln),n&&s(ca),n&&s(ua),n&&s(ia),n&&s(ra),n&&s(F),n&&s(ka),n&&s(I),n&&s(fa),n&&s(cn),n&&s(da),n&&s(z),n&&s(ma),n&&s(ba),n&&s(va),n&&s(Ea),n&&s(q),n&&s(_a),n&&s(R),n&&s(ya),n&&s(U),n&&s(wa),n&&s(un),n&&s(Ra),n&&s(b),n&&s(Pa),n&&s(Ca),n&&s(Na),n&&s(Oa),n&&s(Z),n&&s(Ba),n&&s(W),n&&s(xa),n&&s(m),n&&s(Da),n&&s(rn),n&&s(Aa),n&&s(v),n&&s(Ta),n&&s(Sa),n&&s(ja),n&&s(Ma),n&&s($),n&&s(Ha),n&&s(xn),n&&s(Ga),n&&s(kn),n&&s(La),n&&s(P),n&&s(Fa),n&&s(X),n&&s(Va),n&&s(fn),n&&s(Ia),n&&s(za),n&&s(qa),n&&s(Ja),n&&s(Y),n&&s(Ua),n&&s(Dn),n&&s(Za),n&&s(dn),n&&s(Ka),n&&s(Wa),n&&s($a),n&&s(Qa),n&&s(g),n&&s(Xa),n&&s(Ya),n&&s(ha),n&&s(x),n&&s(ga),n&&s(nt),n&&s(st),n&&s(E),n&&s(at),n&&s(mn),n&&s(tt),n&&s(An),n&&s(pt),n&&s(et),n&&s(ot),n&&s(bn),n&&s(lt),n&&s(Tn),n&&s(ct),n&&s(ut),n&&s(it),n&&s(rt),n&&s(sn),n&&s(kt),n&&s(ft),n&&s(dt),n&&s(C),n&&s(mt),n&&s(vn),n&&s(bt),n&&s(vt),n&&s(Et),n&&s(w),n&&s(_t),n&&s(En),n&&s(yt),n&&s(Sn),n&&s(wt),n&&s(_n),n&&s(Rt),n&&s(f),n&&s(Pt),n&&s(Ct),n&&s(Nt),n&&s(yn),n&&s(Ot),n&&s(_),n&&s(Bt),n&&s(xt),n&&s(Dt),n&&s(At),n&&s(tn),n&&s(Tt),n&&s(St),n&&s(jt),n&&s(jn),n&&s(Mt),n&&s(Ht),n&&s(Gt)}}}const Rc={title:"함수",date:"2022-07-31T00:00:00.000Z",excerpt:"Functions",categories:["Golang","Basic Golang"],coverImage:"/post_img/Go/Golang_basics/cover.png",coverWidth:16,coverHeight:9,indexed:!1,exposed:!0};class Pc extends bc{constructor(Cn){super(),vc(this,Cn,null,yc,Ec,{})}}export{Pc as default,Rc as metadata};
