import{S as pd,i as ed,s as od,k as e,a as i,q as t,y as EE,l as o,c as k,m as u,r as p,h as s,z as vE,n as r,b as c,E as a,A as dE,M as ld,g as _E,d as yE,B as PE}from"./index.d78780bf.js";import{I as xE}from"./Image.605b14b5.js";function cd(CE){let Ks,te,Ns,iu,pe,ee,oe,le,ln,cn,ea,ku,ce,ue,ie,Zn,oa,ru,fu,ke,Vn,OE=`<code class="language-go"><span class="token keyword">var</span> arr <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token comment">// array declaration</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>
<span class="token comment">// var size int = 5	 // can not specify size of array with variables.</span>
<span class="token comment">// var arr [size]int // it occurs an error.</span></code>`,re,L,mu,la,bu,Eu,ca,vu,du,ua,_u,yu,ia,Pu,xu,fe,me,be,$s,Cu,Ee,Wn,DE=`<code class="language-go"><span class="token comment">// declare with literal</span>
<span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">&#125;</span>                  <span class="token comment">// [1, 2, 3]</span>
<span class="token keyword">var</span> y <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">&#125;</span> <span class="token comment">// [1, 0, 0, 0, 0, 4, 6, 0, 0, 0, 100, 15]</span>
<span class="token keyword">var</span> z <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">&#125;</span>          <span class="token comment">// [4, 5, 6, 7, 8]</span></code>`,ve,E,Ou,ka,Du,wu,ra,Ru,zu,fa,Su,Lu,ma,Hu,Bu,ba,Mu,Au,Tu,Gu,Ea,Ku,Nu,va,$u,Zu,da,Vu,Wu,_a,qu,Uu,de,_e,ye,un,ju,ya,Fu,Iu,Pe,qn,wE=`<code class="language-go">x<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">10</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// indexing by bracket</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span></code>`,xe,Ce,Oe,Zs,Ju,De,Un,RE=`<code class="language-go"><span class="token keyword">var</span> multidimentional <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token comment">// multidimetional array</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>multidimentional<span class="token punctuation">)</span></code>`,we,Re,ze,I,Qu,Pa,Xu,Yu,xa,gu,hu,Se,jn,zE=`<code class="language-go"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">&#125;</span>
<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">&#125;</span>
<span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">&#125;</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span> <span class="token comment">// prints true</span>
<span class="token comment">// fmt.Println(a == c) // occurs error</span></code>`,Le,He,Be,Me,kn,rn,Ca,ni,Ae,Te,Ge,sn,Oa,si,ai,ti,pi,Ke,Fn,SE=`<code class="language-go"><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">&#125;</span> <span class="token comment">// declaration + initialization</span>
<span class="token keyword">var</span> y <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">&#125;</span> <span class="token comment">// [1, 0, 0, 0, 0, 4, 6, 0, 0, 0, 100, 15]</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span>

x<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">10</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// indexing by bracket</span>

<span class="token keyword">var</span> multidimentional <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token comment">// multidimetional slice</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>multidimentional<span class="token punctuation">)</span>

fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// the number of current elements</span></code>`,Ne,$e,Ze,Vs,ei,Ve,D,oi,Da,li,ci,wa,ui,ii,Ra,ki,ri,za,fi,mi,Sa,bi,Ei,We,In,LE=`<code class="language-go"><span class="token keyword">var</span> slice1 <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span>            <span class="token comment">// slice declaration</span>
<span class="token keyword">var</span> slice2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>        <span class="token comment">// zero-length slice</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>slice1<span class="token punctuation">,</span> slice2<span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>slice1 <span class="token operator">==</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> slice2 <span class="token operator">==</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>
<span class="token comment">// comparation between two slices occurs error; only possible comparation is the one between slice and nil</span></code>`,qe,Ws,vi,Ue,je,Fe,Jn,La,di,_i,Ie,Qn,HE=`<code class="language-go">initialized_capacity <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token comment">// make(type, length, capacity)</span>
<span class="token comment">// initialized_capacity := make([]int, 6, 5) // it occurs an error (length > capacity)</span></code>`,Je,Qe,Xe,Ye,fn,mn,Ha,yi,ge,he,no,$,Pi,Ba,xi,Ci,Oi,Di,Ma,wi,Ri,so,bn,zi,Aa,Si,Li,ao,Xn,BE=`<code class="language-go"><span class="token comment">// capacity grows as it gets appended</span>
slice <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>slice<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>slice<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>slice<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>slice<span class="token punctuation">)</span><span class="token punctuation">)</span>
slice <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>slice<span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>slice<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>slice<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>slice<span class="token punctuation">)</span><span class="token punctuation">)</span>

tmp <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">&#125;</span>
slice <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>slice<span class="token punctuation">,</span> tmp<span class="token operator">...</span><span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>slice<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>slice<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>slice<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// append(slice, x...) => it occurs an error (append() returns an slice that the element is appended to.)</span></code>`,to,w,Hi,Ta,Bi,Mi,Ga,Ai,Ti,Ka,Gi,Ki,Na,Ni,$i,$a,Zi,Vi,po,eo,oo,lo,En,vn,Za,Wi,co,uo,io,J,qi,Va,Ui,ji,Wa,Fi,Ii,ko,Yn,ME=`<code class="language-go">x <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">&#125;</span>
y <span class="token operator">:=</span> x<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span>
z <span class="token operator">:=</span> x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
d <span class="token operator">:=</span> x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span>
e <span class="token operator">:=</span> x<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">,</span> d<span class="token punctuation">,</span> e<span class="token punctuation">)</span></code>`,ro,P,Ji,qa,Qi,Xi,Ua,Yi,gi,ja,hi,nk,Fa,sk,ak,Ia,tk,pk,Ja,ek,ok,Qa,lk,ck,fo,gn,AE=`<code class="language-go">e<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>                   <span class="token comment">// Slicing overwraps storage</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">,</span> d<span class="token punctuation">,</span> e<span class="token punctuation">)</span> <span class="token comment">// value of x, z, d, e is changed</span></code>`,mo,bo,Eo,qs,uk,vo,hn,TE=`<code class="language-go">fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">cap</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span>
y <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span> <span class="token comment">// appending an elements into y changes the mapped value of other slices, but not changes their length</span>

fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">,</span> d<span class="token punctuation">,</span> e<span class="token punctuation">)</span> <span class="token comment">// it's too confusing :(</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">cap</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span></code>`,_o,yo,Po,R,ik,Xa,kk,rk,Ya,fk,mk,ga,bk,Ek,ha,vk,dk,nt,_k,yk,xo,ns,GE='<code class="language-go"><span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">1</span> <span class="token number">4</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">2</span> <span class="token number">1</span> <span class="token number">4</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">2</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">1</span> <span class="token number">4</span><span class="token punctuation">]</span></code>',Co,Us,Pk,Oo,ss,KE='<code class="language-go"><span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">30</span> <span class="token number">4</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">30</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">2</span> <span class="token number">30</span> <span class="token number">4</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">2</span> <span class="token number">30</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">30</span> <span class="token number">4</span><span class="token punctuation">]</span></code>',Do,b,st,xk,Ck,at,Ok,Dk,tt,wk,Rk,pt,zk,Sk,et,Lk,Hk,ot,Bk,Mk,lt,Ak,Tk,ct,Gk,Kk,ut,Nk,$k,it,Zk,Vk,kt,Wk,qk,wo,Ro,zo,js,Uk,So,as,NE=`<code class="language-go">xx <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>
xx <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>xx<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>
yy <span class="token operator">:=</span> xx<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span>
zz <span class="token operator">:=</span> xx<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span>

fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">cap</span><span class="token punctuation">(</span>xx<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>yy<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>zz<span class="token punctuation">)</span><span class="token punctuation">)</span>
yy <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>yy<span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span>
xx <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>xx<span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">)</span>
zz <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>zz<span class="token punctuation">,</span> <span class="token number">70</span><span class="token punctuation">)</span>

fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"xx:"</span><span class="token punctuation">,</span> xx<span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"yy:"</span><span class="token punctuation">,</span> yy<span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"zz:"</span><span class="token punctuation">,</span> zz<span class="token punctuation">)</span></code>`,Lo,Fs,jk,Ho,ts,$E=`<code class="language-go"><span class="token number">5</span> <span class="token number">5</span> <span class="token number">3</span>
xx<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">30</span> <span class="token number">40</span> <span class="token number">70</span><span class="token punctuation">]</span>
yy<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">30</span> <span class="token number">40</span> <span class="token number">70</span><span class="token punctuation">]</span>
zz<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">30</span> <span class="token number">40</span> <span class="token number">70</span><span class="token punctuation">]</span></code>`,Bo,Mo,Ao,Is,ps,To,Go,Ko,Js,Fk,No,es,ZE=`<code class="language-go">xx <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>
xx <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>xx<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>
yy <span class="token operator">:=</span> xx<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span>
zz <span class="token operator">:=</span> xx<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span></code>`,$o,Z,Ik,rt,Jk,Qk,ft,Xk,Yk,mt,gk,hk,Zo,os,VE=`<code class="language-go">xx<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span><span class="token punctuation">]</span> <span class="token builtin">len</span><span class="token operator">=</span><span class="token number">4</span> <span class="token builtin">cap</span><span class="token operator">=</span><span class="token number">5</span>
yy<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token builtin">len</span><span class="token operator">=</span><span class="token number">2</span> <span class="token builtin">cap</span><span class="token operator">=</span><span class="token number">5</span>
zz<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">3</span> <span class="token number">4</span><span class="token punctuation">]</span> <span class="token builtin">len</span><span class="token operator">=</span><span class="token number">2</span> <span class="token builtin">cap</span><span class="token operator">=</span><span class="token number">3</span></code>`,Vo,H,nr,bt,sr,ar,Et,tr,pr,vt,er,or,dt,lr,cr,Wo,ls,WE=`<code class="language-go">xx<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">30</span> <span class="token number">40</span><span class="token punctuation">]</span> <span class="token builtin">len</span><span class="token operator">=</span><span class="token number">4</span> <span class="token builtin">cap</span><span class="token operator">=</span><span class="token number">5</span>
yy<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">30</span> <span class="token number">40</span> <span class="token number">50</span><span class="token punctuation">]</span> <span class="token builtin">len</span><span class="token operator">=</span><span class="token number">5</span> <span class="token builtin">cap</span><span class="token operator">=</span><span class="token number">5</span>
zz<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">30</span> <span class="token number">40</span><span class="token punctuation">]</span> <span class="token builtin">len</span><span class="token operator">=</span><span class="token number">2</span> <span class="token builtin">cap</span><span class="token operator">=</span><span class="token number">3</span></code>`,qo,Uo,jo,f,_t,ur,ir,yt,kr,rr,Pt,fr,mr,xt,br,Er,Ct,vr,dr,Ot,_r,yr,Dt,Pr,xr,wt,Cr,Or,Rt,Dr,wr,zt,Rr,zr,St,Sr,Lr,Lt,Hr,Br,Mr,Ar,Ht,Tr,Gr,Fo,cs,qE=`<code class="language-go">xx<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">30</span> <span class="token number">40</span> <span class="token number">60</span><span class="token punctuation">]</span> <span class="token builtin">len</span><span class="token operator">=</span><span class="token number">5</span> <span class="token builtin">cap</span><span class="token operator">=</span><span class="token number">5</span>
yy<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">30</span> <span class="token number">40</span> <span class="token number">60</span><span class="token punctuation">]</span> <span class="token builtin">len</span><span class="token operator">=</span><span class="token number">5</span> <span class="token builtin">cap</span><span class="token operator">=</span><span class="token number">5</span>
zz<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">30</span> <span class="token number">40</span><span class="token punctuation">]</span> <span class="token builtin">len</span><span class="token operator">=</span><span class="token number">2</span> <span class="token builtin">cap</span><span class="token operator">=</span><span class="token number">3</span></code>`,Io,T,Bt,Kr,Nr,Mt,$r,Zr,Vr,Wr,At,qr,Ur,Jo,us,UE=`<code class="language-go">xx<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">30</span> <span class="token number">40</span> <span class="token number">70</span><span class="token punctuation">]</span> <span class="token builtin">len</span><span class="token operator">=</span><span class="token number">5</span> <span class="token builtin">cap</span><span class="token operator">=</span><span class="token number">5</span>
yy<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">30</span> <span class="token number">40</span> <span class="token number">70</span><span class="token punctuation">]</span> <span class="token builtin">len</span><span class="token operator">=</span><span class="token number">5</span> <span class="token builtin">cap</span><span class="token operator">=</span><span class="token number">5</span>
zz<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">30</span> <span class="token number">40</span> <span class="token number">70</span><span class="token punctuation">]</span> <span class="token builtin">len</span><span class="token operator">=</span><span class="token number">3</span> <span class="token builtin">cap</span><span class="token operator">=</span><span class="token number">3</span></code>`,Qo,G,Tt,jr,Fr,Gt,Ir,Jr,Kt,Qr,Xr,Nt,Yr,gr,Xo,Yo,go,B,hr,$t,nf,sf,Zt,af,tf,Vt,pf,ef,Wt,of,lf,ho,is,jE=`<code class="language-go">xxx <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">&#125;</span>
yyy <span class="token operator">:=</span> xxx<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token comment">// limits capacity of slice, they not share additional capacity</span>
zzz <span class="token operator">:=</span> xxx<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span>

fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">cap</span><span class="token punctuation">(</span>xxx<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>yyy<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>zzz<span class="token punctuation">)</span><span class="token punctuation">)</span>
yyy <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>yyy<span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span> <span class="token comment">// this appending never interacts with other slices</span>
xxx <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>xxx<span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">)</span>
zzz <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>zzz<span class="token punctuation">,</span> <span class="token number">70</span><span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>xxx<span class="token punctuation">,</span> yyy<span class="token punctuation">,</span> zzz<span class="token punctuation">)</span></code>`,nl,Qs,cf,sl,ks,FE=`<code class="language-go"><span class="token number">5</span> <span class="token number">2</span> <span class="token number">2</span>
<span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span> <span class="token number">5</span> <span class="token number">60</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">30</span> <span class="token number">40</span> <span class="token number">50</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">3</span> <span class="token number">4</span> <span class="token number">70</span><span class="token punctuation">]</span></code>`,al,tl,pl,Xs,uf,el,rs,IE=`<code class="language-go">ax <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">&#125;</span>
ay <span class="token operator">:=</span> ax<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token comment">// slicing array</span>
az <span class="token operator">:=</span> ax<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
ax<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">10</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>ax<span class="token punctuation">,</span> ay<span class="token punctuation">,</span> az<span class="token punctuation">)</span></code>`,ol,ll,cl,ul,dn,_n,qt,kf,il,kl,rl,Q,rf,Ut,ff,mf,jt,bf,Ef,fl,fs,JE=`<code class="language-go">x <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">&#125;</span>
y <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>

num <span class="token operator">:=</span> <span class="token function">copy</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span> x<span class="token punctuation">)</span>   <span class="token comment">// copy(destination, source). x is copied into y</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span> num<span class="token punctuation">)</span> <span class="token comment">// num: the number of elements copied (decided by length of slices)</span>
y<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>            <span class="token comment">// if we change any value of y,</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span> x<span class="token punctuation">)</span>   <span class="token comment">// values of x still unchanged (doesn't share memory spaces)</span></code>`,ml,bl,El,ms,Ft,vf,df,vl,bs,QE=`<code class="language-go">z <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token comment">// because length of z is 2,</span>
num <span class="token operator">=</span> <span class="token function">copy</span><span class="token punctuation">(</span>z<span class="token punctuation">,</span> x<span class="token punctuation">)</span>       <span class="token comment">// when it is copied, only two of x are copied.</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>z<span class="token punctuation">,</span> num<span class="token punctuation">)</span>    <span class="token comment">// [1, 2] 2</span></code>`,dl,_l,yl,Es,It,_f,yf,Pl,vs,XE=`<code class="language-go">w <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token comment">//</span>
num <span class="token operator">=</span> <span class="token function">copy</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> x<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>   <span class="token comment">// because x[:2] has only two element (length is 2),</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> num<span class="token punctuation">)</span>    <span class="token comment">// x[:2] is copied into first two elements</span></code>`,xl,Ys,Pf,Cl,ds,YE=`<code class="language-go">q <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">&#125;</span>
num <span class="token operator">=</span> <span class="token function">copy</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> q<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// [2, 3, 4] is copied into [1, 2, 3]</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span> num<span class="token punctuation">)</span>      <span class="token comment">// [2, 3, 4, 4]</span></code>`,Ol,Dl,wl,Rl,yn,Pn,Jt,xf,zl,Sl,Ll,an,Qt,Cf,Of,Xt,Df,wf,Hl,_s,gE=`<code class="language-go"><span class="token keyword">var</span> s <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">"Hello there"</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment">// slicing string</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code>`,Bl,xn,Rf,Yt,zf,Sf,Ml,ys,hE=`<code class="language-go"><span class="token keyword">var</span> h <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">"한글조아"</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// each character of korean letter takes 3 bytes, slicing like below would not be done properly</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>h<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>h<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>h<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code>`,Al,C,gt,Lf,Hf,ht,Bf,Mf,np,Af,Tf,sp,Gf,Kf,ap,Nf,$f,tp,Zf,Vf,Tl,Ps,nv=`<code class="language-go"><span class="token comment">// difference of rune and byte</span>
<span class="token keyword">var</span> ss <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">"Hello 안녕"</span>
<span class="token keyword">var</span> bs <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>ss<span class="token punctuation">)</span> <span class="token comment">// []byte splits UTF-8 characters. usually use this.</span>
<span class="token keyword">var</span> rs <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">rune</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">rune</span><span class="token punctuation">(</span>ss<span class="token punctuation">)</span> <span class="token comment">// []rune doesn't split</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>bs<span class="token punctuation">,</span> rs<span class="token punctuation">)</span></code>`,Gl,V,Wf,pp,qf,Uf,ep,jf,Ff,op,If,Jf,Kl,Nl,$l,Zl,Cn,On,lp,Qf,Vl,Wl,ql,x,cp,Xf,Yf,up,gf,hf,nm,sm,ip,am,tm,kp,pm,em,rp,om,lm,fp,cm,um,Ul,xs,sv=`<code class="language-go"><span class="token keyword">var</span> nilMap <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span>
mamap <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>nilMap<span class="token punctuation">,</span> mamap<span class="token punctuation">,</span> nilMap <span class="token operator">==</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> mamap <span class="token operator">==</span> <span class="token boolean">nil</span><span class="token punctuation">)</span></code>`,jl,Fl,Il,M,im,mp,km,rm,bp,fm,mm,Ep,bm,Em,vp,vm,dm,Jl,Cs,av=`<code class="language-go"><span class="token keyword">var</span> teams <span class="token operator">=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">&#123;</span>
    <span class="token string">"Orcas"</span><span class="token punctuation">:</span>   <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">&#123;</span><span class="token string">"Fred"</span><span class="token punctuation">,</span> <span class="token string">"Ralph"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token string">"Lions"</span><span class="token punctuation">:</span>   <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">&#123;</span><span class="token string">"Sarah"</span><span class="token punctuation">,</span> <span class="token string">"Peter"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token string">"Kittens"</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token string">"Waldo"</span><span class="token punctuation">,</span> <span class="token string">"Raul"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token comment">// 이렇게 해도 됨</span>
<span class="token punctuation">&#125;</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>teams<span class="token punctuation">)</span></code>`,Ql,Xl,Yl,tn,dp,_m,ym,_p,Pm,xm,gl,Os,tv=`<code class="language-go">ages <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>ages<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>ages<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// len() returns the number of key-value pairs of map</span></code>`,hl,nc,sc,gs,Cm,ac,Ds,pv=`<code class="language-go">totalWins <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
totalWins<span class="token punctuation">[</span><span class="token string">"Orcas"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token comment">// assigning value into specific key with =, not :=</span>
totalWins<span class="token punctuation">[</span><span class="token string">"Lions"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>totalWins<span class="token punctuation">[</span><span class="token string">"Orcas"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>totalWins<span class="token punctuation">[</span><span class="token string">"Kittens"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// an initial value of int is zero.</span>
totalWins<span class="token punctuation">[</span><span class="token string">"Kittens"</span><span class="token punctuation">]</span><span class="token operator">++</span>            <span class="token comment">// value of "Kittens" would be 1</span>
totalWins<span class="token punctuation">[</span><span class="token string">"Lions"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>totalWins<span class="token punctuation">[</span><span class="token string">"Kittens"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>totalWins<span class="token punctuation">[</span><span class="token string">"Lions"</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code>`,tc,pc,ec,hs,Om,oc,ws,ev=`<code class="language-go">m <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span>
    <span class="token string">"Hello"</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span>
    <span class="token string">"world"</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span></code>`,lc,W,Dm,yp,wm,Rm,Pp,zm,Sm,xp,Lm,Hm,cc,Rs,ov=`<code class="language-go"><span class="token comment">// comma idiom</span>
v<span class="token punctuation">,</span> ok <span class="token operator">:=</span> m<span class="token punctuation">[</span><span class="token string">"Hello"</span><span class="token punctuation">]</span> <span class="token comment">// v gets value of the given key</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> ok<span class="token punctuation">)</span>  <span class="token comment">// ok gets if the key exists in map</span>

v<span class="token punctuation">,</span> ok <span class="token operator">=</span> m<span class="token punctuation">[</span><span class="token string">"world"</span><span class="token punctuation">]</span> <span class="token comment">// though v gets zero value,</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> ok<span class="token punctuation">)</span> <span class="token comment">// ok gets true because "world" exists in map</span>

v<span class="token punctuation">,</span> ok <span class="token operator">=</span> m<span class="token punctuation">[</span><span class="token string">"nono"</span><span class="token punctuation">]</span>  <span class="token comment">// "nono" doesn't exist in map, so ok gets false</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> ok<span class="token punctuation">)</span> <span class="token comment">// v gets zero value,</span>

<span class="token function">delete</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> <span class="token string">"Hello"</span><span class="token punctuation">)</span> <span class="token comment">// deletes key "Hello" from the map</span>
v<span class="token punctuation">,</span> ok <span class="token operator">=</span> m<span class="token punctuation">[</span><span class="token string">"Hello"</span><span class="token punctuation">]</span> <span class="token comment">// the key doesn't exist in map as it is deleted</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> ok<span class="token punctuation">)</span></code>`,uc,v,Bm,Cp,Mm,Am,Op,Tm,Gm,Dp,Km,Nm,wp,$m,Zm,Rp,Vm,Wm,zp,qm,Um,Sp,jm,Fm,Lp,Im,Jm,Hp,Qm,Xm,Bp,Ym,gm,ic,kc,rc,fc,Dn,wn,Mp,hm,mc,bc,Ec,A,n1,Ap,s1,a1,Tp,t1,p1,Gp,e1,o1,Kp,l1,c1,vc,zs,lv=`<code class="language-go"><span class="token keyword">type</span> person <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span> <span class="token comment">// define struct type</span>
    name <span class="token builtin">string</span>
    age  <span class="token builtin">int</span>
    pet  <span class="token builtin">string</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">var</span> john person <span class="token comment">// struct variable declaration</span>
<span class="token keyword">var</span> james <span class="token operator">=</span> person<span class="token punctuation">&#123;</span><span class="token string">"James"</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">,</span> <span class="token string">"cat"</span><span class="token punctuation">&#125;</span>
kim <span class="token operator">:=</span> person<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>                   <span class="token comment">// there is no difference on empty struct and zero value of struct</span>
fred <span class="token operator">:=</span> person<span class="token punctuation">&#123;</span><span class="token string">"Fred"</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token string">"dog"</span><span class="token punctuation">&#125;</span> <span class="token comment">// values are assigned to the fields in the order they were declared in struct definition</span>
beth <span class="token operator">:=</span> person<span class="token punctuation">&#123;</span>                   <span class="token comment">// using key names (recommended)</span>
    age<span class="token punctuation">:</span>  <span class="token number">20</span><span class="token punctuation">,</span>
    name<span class="token punctuation">:</span> <span class="token string">"Beth"</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span>
fred<span class="token punctuation">.</span>pet <span class="token operator">=</span> <span class="token string">"parrot"</span> <span class="token comment">// can use dotted notation</span>

fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>john<span class="token punctuation">,</span> kim<span class="token punctuation">,</span> james<span class="token punctuation">,</span> fred<span class="token punctuation">,</span> beth<span class="token punctuation">)</span></code>`,dc,O,Np,u1,i1,$p,k1,r1,Zp,f1,m1,Vp,b1,E1,Wp,v1,d1,qp,_1,y1,_c,yc,Pc,xc,Rn,zn,Up,P1,Cc,Ss,cv=`<code class="language-go"><span class="token keyword">var</span> human <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span> <span class="token comment">// anonymous structs</span>
    name <span class="token builtin">string</span>
    age  <span class="token builtin">int</span>
    pet  <span class="token builtin">string</span>
<span class="token punctuation">&#125;</span>
human<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"Bob"</span>
human<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">24</span>
human<span class="token punctuation">.</span>pet <span class="token operator">=</span> <span class="token string">"dog"</span>

pet <span class="token operator">:=</span> <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span> <span class="token comment">// directly initializing anonymous structs</span>
    name <span class="token builtin">string</span>
    kind <span class="token builtin">string</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>
    name<span class="token punctuation">:</span> <span class="token string">"choco"</span><span class="token punctuation">,</span>
    kind<span class="token punctuation">:</span> <span class="token string">"dog"</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span>

fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>human<span class="token punctuation">,</span> pet<span class="token punctuation">)</span></code>`,Oc,Sn,x1,jp,C1,O1,Dc,wc,Rc,zc,Ln,Hn,Fp,D1,Sc,Ls,uv=`<code class="language-go"><span class="token keyword">type</span> firstPerson <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
    name <span class="token builtin">string</span>
    age  <span class="token builtin">int</span>
<span class="token punctuation">&#125;</span>
f1 <span class="token operator">:=</span> firstPerson<span class="token punctuation">&#123;</span><span class="token string">"kim"</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">&#125;</span>
f2 <span class="token operator">:=</span> firstPerson<span class="token punctuation">&#123;</span><span class="token string">"lee"</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">&#125;</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>f1 <span class="token operator">==</span> f2<span class="token punctuation">)</span> <span class="token comment">// comparing two firstPerson instances is possible when they are composed of comparable types</span></code>`,Lc,pn,Ip,w1,R1,Jp,z1,S1,Hc,Bc,Mc,Hs,iv=`<code class="language-go"><span class="token keyword">type</span> secondPerson <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
    name <span class="token builtin">string</span>
    age <span class="token builtin">int</span>
<span class="token punctuation">&#125;</span>
s1 <span class="token operator">:=</span> secondPerson<span class="token punctuation">&#123;</span><span class="token string">"choi"</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">&#125;</span>
<span class="token comment">// fmt.Println(s1 == f1) // comparing(==, !=) secondPerson with firstPerson is impossible</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">firstPerson</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// convert secondPerson into firstPerson is possible because they have same fields</span></code>`,Ac,Bn,L1,Qp,H1,B1,Tc,Gc,Kc,Bs,kv=`<code class="language-go"><span class="token keyword">type</span> thirdPerson <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
    age <span class="token builtin">int</span>
    name <span class="token builtin">string</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// t1 := thirdPerson&#123;27, "Park"&#125;</span>
<span class="token comment">// fmt.Println(firstPerson(t1)) // convert thirdPerson into firstPerson is impossible because their fields have different order.</span></code>`,Nc,na,M1,$c,Zc,Vc,Ms,rv=`<code class="language-go"><span class="token keyword">type</span> fourthPerson <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
    firstName <span class="token builtin">string</span>
    age <span class="token builtin">int</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// f3 := fourthPerson&#123;"Kang", 28&#125;</span>
<span class="token comment">// fmt.Println(firstPerson(f3)) // convert fourthPerson into firstPerson is impossible because their fields have different name.</span>

<span class="token keyword">type</span> fifthPerson <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
    name <span class="token builtin">string</span>
    age <span class="token builtin">int</span>
    hobby <span class="token builtin">string</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// f4 := fifthPerson&#123;"Seo", 24, "Cooking"&#125;</span>
<span class="token comment">// fmt.Println(firstPerson(f4)) // convert fourthPerson into firstPerson is impossible because there is an additional field.</span></code>`,Wc,sa,A1,qc,Uc,jc,As,fv=`<code class="language-go"><span class="token keyword">var</span> g <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
    name <span class="token builtin">string</span>
    age  <span class="token builtin">int</span>
<span class="token punctuation">&#125;</span>
g <span class="token operator">=</span> f1 <span class="token comment">// =, == are possible when anonymous struct have same field</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>g <span class="token operator">==</span> f1<span class="token punctuation">)</span></code>`,Fc,Mn,T1,Xp,G1,K1,Ic,Jc,Qc,Xc,An,Tn,Yp,N1,Yc,gc,hc,F,gp,$1,Z1,Ts,V1,W1,q1,nu,su,au,tu;return ps=new xE({props:{alt:"pepe question",src:"/post_img/Go/Golang_basics/GO3/1.jpg"}}),Ts=new xE({props:{alt:"Learning Go Book Cover",src:"https://learning.oreilly.com/covers/urn:orm:book:9781492077206/400w/"}}),{c(){Ks=e("br"),te=i(),Ns=e("p"),iu=t("본 글은 Golang을 공부하며 주요 내용이라 생각되는 것들을 기록해둔 자료이며, Ubuntu 20.04 LTS 기준으로 작성되었습니다."),pe=i(),ee=e("br"),oe=e("br"),le=i(),ln=e("h2"),cn=e("a"),ea=e("span"),ku=t("Array"),ce=i(),ue=e("hr"),ie=i(),Zn=e("p"),oa=e("strong"),ru=t("Array"),fu=t("는 같은 타입의, 크기(개수)가 정해진 데이터들을 묶어서 처리하기 위해 사용된다."),ke=i(),Vn=e("pre"),re=i(),L=e("p"),mu=t("위 코드에서 "),la=e("code"),bu=t("[3]int"),Eu=t("은 크기가 "),ca=e("em"),vu=t("3"),du=t("인 "),ua=e("code"),_u=t("int"),yu=t("의 Array임을 나타낸다. Array의 값을 초기화하지 않았으므로, "),ia=e("code"),Pu=t("int"),xu=t(`의 Zero value인 0으로 채워진다.
그리고 Array는 크기가 정해진 데이터에 대해서만 지원한다. 주석 처리된 부분처럼 배열의 크기를 변수값으로 초기화하는 것은 불가능하다.`),fe=i(),me=e("br"),be=i(),$s=e("p"),Cu=t("C/C++에서 그렇듯, 중괄호를 이용하여 배열 내의 값을 초기화할 수 있다."),Ee=i(),Wn=e("pre"),ve=i(),E=e("p"),Ou=t("위 코드의 변수 "),ka=e("code"),Du=t("y"),wu=t("를 초기화하는 라인에서 "),ra=e("code"),Ru=t("n:m"),zu=t(" 형태의 표기법을 확인할 수 있다. "),fa=e("code"),Su=t("n"),Lu=t("번째 인덱스의 값을 "),ma=e("code"),Hu=t("m"),Bu=t(`으로 초기화한다는 의미이다.
지정되지 않은 다른 값들은 Zero value인 `),ba=e("em"),Mu=t("0"),Au=t("으로 초기화된다."),Tu=e("br"),Gu=t(`
변수 `),Ea=e("code"),Ku=t("z"),Nu=t("를 초기화하는 라인처럼 배열의 크기에 "),va=e("code"),$u=t("..."),Zu=t("가 입력되면 자동으로 배열의 크기를 결정한다. 위 코드에서 "),da=e("code"),Vu=t("z"),Wu=t("의 크기는 "),_a=e("em"),qu=t("5"),Uu=t("가 될 것이다."),de=i(),_e=e("br"),ye=i(),un=e("p"),ju=t(`여느 언어가 그렇듯, 대괄호를 통해 indexing한다. 인덱스에 음수나 배열 크기보다 큰 수 넣으면 런타임 에러가 발생한다.
또한 `),ya=e("code"),Fu=t("len()"),Iu=t(" 함수를 사용하여 Array의 크기를 확인할 수 있다."),Pe=i(),qn=e("pre"),xe=i(),Ce=e("br"),Oe=i(),Zs=e("p"),Ju=t("다차원 배열은 좀 난해하하다고 느꼈는데, 어떻게 사용하는지는 코드를 바로 보는 편이 이해가 빠를 것이다."),De=i(),Un=e("pre"),we=i(),Re=e("br"),ze=i(),I=e("p"),Qu=t("이건 좀 신기했던 부분인데, Go에서 Array는 크기와 element의 타입이 같다면 동일한 타입으로 여긴다. 그래서 "),Pa=e("code"),Xu=t("=="),Yu=t("와 "),xa=e("code"),gu=t("!="),hu=t(`의 두 가지의 비교 연산이 가능하다!
다만 element의 타입이 같아도 Array의 크기가 다르다면 서로 다른 타입으로 여기기 때문에, 비교 연산을 하면 에러가 발생한다.`),Se=i(),jn=e("pre"),Le=i(),He=e("br"),Be=e("br"),Me=i(),kn=e("h2"),rn=e("a"),Ca=e("span"),ni=t("Slice"),Ae=i(),Te=e("hr"),Ge=i(),sn=e("p"),Oa=e("strong"),si=t("Slice"),ai=t("는 동적으로 크기가 늘어났다 줄어들었다 하는 Array라고 볼 수 있다. 다른 언어에도 이와 유사한 타입들이 많이 존재하지만, Go의 Slice는 좀 유니크하다."),ti=e("br"),pi=t(`
먼저 Array와는 달리 대괄호 사이를 비워놓고 선언한다. Array와 유사한 부분들을 모아보았다.`),Ke=i(),Fn=e("pre"),Ne=i(),$e=e("br"),Ze=i(),Vs=e("p"),ei=t("이제 다른 부분들을 하나씩 알아보자."),Ve=i(),D=e("p"),oi=t("선언만 하고 초기화하지 않으면 해당 타입의 Zero value로 초기화하는 Array와는 달리, Slice는 비어 있는 객체라는 뜻인 Slice는 "),Da=e("code"),li=t("nil"),ci=t(`이 된다.
이때 `),wa=e("code"),ui=t("nil"),ii=t(`과 Length가 0인 Slice는 엄연히 서로 다르다.
`),Ra=e("code"),ki=t("nil"),ri=t("은 C/C++의 "),za=e("code"),fi=t("NULL"),mi=t("과 자바스크립트의 "),Sa=e("code"),bi=t("null"),Ei=t(" 사이 어딘가의 느낌인데, 추후 설명하겠다."),We=i(),In=e("pre"),qe=i(),Ws=e("p"),vi=t(`타입과 크기가 같다면 비교 연산을 할 수 있었던 Array와는 달리, slice끼리는 타입이 같아도 서로 비교 연산을 할 수 없다.
slice와 nil과의 비교 연산만 허용된다.`),Ue=i(),je=e("br"),Fe=i(),Jn=e("p"),La=e("code"),di=t("make()"),_i=t(" 함수를 이용하여 slice를 생성할 수도 있다. 타입, Length, Capacity를 인자로 설정한다."),Ie=i(),Qn=e("pre"),Je=i(),Qe=e("br"),Xe=e("br"),Ye=i(),fn=e("h3"),mn=e("a"),Ha=e("span"),yi=t("Appending Elements into Slices"),ge=i(),he=e("br"),no=i(),$=e("p"),Pi=t("Slice에 값을 추가하기 위해서는 "),Ba=e("code"),xi=t("append()"),Ci=t(" 함수를 사용한다. 값을 추가할 Slice와, 한 개 이상의 추가할 값들을 파라미터로 받는다."),Oi=e("br"),Di=i(),Ma=e("code"),wi=t("..."),Ri=t(" 연산자를 활용하여, 다른 Slice 변수의 값들을 추가할수도 있다."),so=i(),bn=e("p"),zi=t("특이사항은 "),Aa=e("code"),Si=t("append()"),Li=t("함수에 값을 추가할 Slice 변수를 넣고, 반환값을 다시 그 변수로 받아야 한다는 것이다."),ao=i(),Xn=e("pre"),to=i(),w=e("p"),Hi=t("이때 위 코드에서 "),Ta=e("code"),Bi=t("cap()"),Mi=t(`라는 함수가 사용되는 것을 확인할 수 있다.
Slice에는 요소들의 개수를 나타내는 `),Ga=e("em"),Ai=t("Length"),Ti=t("뿐 아니라, "),Ka=e("strong"),Gi=t("Capacity"),Ki=t(`라는 속성이 존재한다. 이는 요소들이 추가될 수 있는 전체 공간의 크기를 의미한다.
`),Na=e("code"),Ni=t("append()"),$i=t("로 변수 "),$a=e("code"),Zi=t("slice"),Vi=t("에 요소들을 추가할 때마다 Length가 증가하고, Length가 Capacity를 초과하려고 할 때마다 Capacity도 증가함을 확인할 수 있다."),po=i(),eo=e("br"),oo=e("br"),lo=i(),En=e("h3"),vn=e("a"),Za=e("span"),Wi=t("Slicing Slices"),co=i(),uo=e("br"),io=i(),J=e("p"),qi=t("Python의 "),Va=e("code"),Ui=t("List"),ji=t("처럼 대괄호에 콜론("),Wa=e("code"),Fi=t(":"),Ii=t(")과 인덱스를 붙여 Slicing할 수 있다."),ko=i(),Yn=e("pre"),ro=i(),P=e("p"),Ji=t("Python은 이렇게 Slicing 하면, Slicing된 새로운 "),qa=e("code"),Qi=t("List"),Xi=t("가 복사되어, 원본과 같은 공간을 가리키지 않는다. 반면 Go의 Slicing된 "),Ua=e("code"),Yi=t("Slice"),gi=t("는 원본을 가리킨다. "),ja=e("code"),hi=t("e"),nk=t("의 값 중 하나를 수정해보면, "),Fa=e("code"),sk=t("x"),ak=t(", "),Ia=e("code"),tk=t("z"),pk=t(", "),Ja=e("code"),ek=t("d"),ok=t("까지 해당 값을 포함했던 모든 "),Qa=e("code"),lk=t("Slice"),ck=t("의 값들도 변경됨을 확인할 수 있다."),fo=i(),gn=e("pre"),mo=i(),bo=e("br"),Eo=i(),qs=e("p"),uk=t("사실 여기까진 그냥 그런가보다 할텐데, 원소를 추가하기 시작하면 본격적으로 어지러워진다."),vo=i(),hn=e("pre"),_o=i(),yo=e("br"),Po=i(),R=e("p"),ik=t("추가 이전, "),Xa=e("code"),kk=t("x"),rk=t(", "),Ya=e("code"),fk=t("y"),mk=t(", "),ga=e("code"),bk=t("z"),Ek=t(", "),ha=e("code"),vk=t("d"),dk=t(", "),nt=e("code"),_k=t("e"),yk=t("는 아래와 같았는데,"),xo=i(),ns=e("pre"),Co=i(),Us=e("p"),Pk=t("이렇게 변했다."),Oo=i(),ss=e("pre"),Do=i(),b=e("p"),st=e("code"),xk=t("y"),Ck=t("에 "),at=e("code"),Ok=t("30"),Dk=t("을 추가했으니 "),tt=e("code"),wk=t("[1 2 30]"),Rk=t("이 된 건 그렇다 치고, "),pt=e("code"),zk=t("x"),Sk=t(", "),et=e("code"),Lk=t("z"),Hk=t(", "),ot=e("code"),Bk=t("d"),Mk=t(", "),lt=e("code"),Ak=t("e"),Tk=t("에서 대응되는 위치에 있었던 "),ct=e("code"),Gk=t("1"),Kk=t("도 모두 "),ut=e("code"),Nk=t("30"),$k=t(`으로 바뀌었음을 알 수 있다.
그리고 여기서 `),it=e("code"),Zk=t("y"),Vk=t("만 length가 바뀌었으므로, 나타나는 원소의 개수는 "),kt=e("code"),Wk=t("y"),qk=t("만 2개에서 3개로 늘었다."),wo=i(),Ro=e("br"),zo=i(),js=e("p"),Uk=t("다음의 예제를 보자."),So=i(),as=e("pre"),Lo=i(),Fs=e("p"),jk=t("해당 구문의 실행 결과는 …"),Ho=i(),ts=e("pre"),Bo=i(),Mo=e("br"),Ao=i(),Is=e("center"),EE(ps.$$.fragment),To=i(),Go=e("br"),Ko=i(),Js=e("p"),Fk=t("상당히 혼란스럽다. 하나씩 알아보자."),No=i(),es=e("pre"),$o=i(),Z=e("p"),Ik=t("여기까지 실행했을 때, "),rt=e("code"),Jk=t("xx"),Qk=t(", "),ft=e("code"),Xk=t("yy"),Yk=t(", "),mt=e("code"),gk=t("zz"),hk=t("의 값은"),Zo=i(),os=e("pre"),Vo=i(),H=e("p"),nr=t("이다. 이제, "),bt=e("code"),sr=t("yy"),ar=t("에 "),Et=e("code"),tr=t("30"),pr=t(", "),vt=e("code"),er=t("40"),or=t(", "),dt=e("code"),lr=t("50"),cr=t("을 추가해보자."),Wo=i(),ls=e("pre"),qo=i(),Uo=e("br"),jo=i(),f=e("p"),_t=e("code"),ur=t("xx"),ir=t("와 "),yt=e("code"),kr=t("zz"),rr=t("는 "),Pt=e("code"),fr=t("yy"),mr=t("와 같은 공간을 공유한다. 따라서 대응되는 위치의 값이었던 "),xt=e("code"),br=t("xx"),Er=t("와 "),Ct=e("code"),vr=t("zz"),dr=t("의 "),Ot=e("code"),_r=t("3"),yr=t(", "),Dt=e("code"),Pr=t("4"),xr=t("가 각각 "),wt=e("code"),Cr=t("30"),Or=t(", "),Rt=e("code"),Dr=t("40"),wr=t(`으로 바뀌었음을 확인할 수 있다.
반면 `),zt=e("code"),Rr=t("xx"),zr=t("와 "),St=e("code"),Sr=t("zz"),Lr=t("의 Length는 바뀌지 않고, "),Lt=e("code"),Hr=t("yy"),Br=t("의 Length만 5로 바뀌었다."),Mr=e("br"),Ar=t(`
여기서 `),Ht=e("code"),Tr=t("xx = append(xx, 60)"),Gr=t("가 실행되면,"),Fo=i(),cs=e("pre"),Io=i(),T=e("p"),Bt=e("code"),Kr=t("xx"),Nr=t("에 60이 추가되며, "),Mt=e("code"),$r=t("yy"),Zr=t("의 대응되는 위치의 값이었던 50의 값이 60으로 바뀌었다."),Vr=e("br"),Wr=t(`
여기서 `),At=e("code"),qr=t("zz = append(zz, 70)"),Ur=t("가 실행되면,"),Jo=i(),us=e("pre"),Qo=i(),G=e("p"),Tt=e("code"),jr=t("xx"),Fr=t("와 "),Gt=e("code"),Ir=t("yy"),Jr=t("의 대응되는 위치의 값이었던 "),Kt=e("code"),Qr=t("60"),Xr=t("이 "),Nt=e("code"),Yr=t("70"),gr=t("으로 바뀌었다."),Xo=i(),Yo=e("br"),go=i(),B=e("p"),hr=t("Slice에 값을 "),$t=e("code"),nf=t("append"),sf=t(`하였을 때 생기는 문제로 인해 직관적으로 이해하기 어려운 결과를 확인하였다.
`),Zt=e("code"),af=t("xx"),tf=t(", "),Vt=e("code"),pf=t("yy"),ef=t(", "),Wt=e("code"),of=t("zz"),lf=t(`가 같은 Capacity를 공유하기 때문에 생긴 문제이다.
Slice를 Slicing할 때, Capacity의 범위를 명시하는 표기법을 사용하면 이와 같은 문제를 어느 정도 해결할 수 있다.`),ho=i(),is=e("pre"),nl=i(),Qs=e("p"),cf=t("위 코드의 출력 결과는 아래와 같다."),sl=i(),ks=e("pre"),al=i(),tl=e("br"),pl=i(),Xs=e("p"),uf=t("한편 Array도 Slicing이 가능하며, Slicing된 값은 Slice 타입이다."),el=i(),rs=e("pre"),ol=i(),ll=e("br"),cl=e("br"),ul=i(),dn=e("h3"),_n=e("a"),qt=e("span"),kf=t("Copying Slices"),il=i(),kl=e("br"),rl=i(),Q=e("p"),rf=t("또다른 해결방법은 다른 언어의 "),Ut=e("em"),ff=t("deep copy"),mf=t("처럼, 새로운 공간에 값들을 복사하는 방법이다. "),jt=e("code"),bf=t("copy()"),Ef=t(" 함수를 통해 할 수 있다."),fl=i(),fs=e("pre"),ml=i(),bl=e("br"),El=i(),ms=e("p"),Ft=e("code"),vf=t("copy()"),df=t(" 함수는 두 번째 인수로 들어온 Array나 Slice를 첫 번째 인수로 들어온 Slice에 복사한다. 반환값은 복사된 원소의 수이다."),vl=i(),bs=e("pre"),dl=i(),_l=e("br"),yl=i(),Es=e("p"),It=e("code"),_f=t("copy()"),yf=t(` 함수의 인수로 들어오는 Slice나 Array들은 Length가 서로 다를 수 있다.
Destination Slice의 Length가 Source Slice보다 크다면, 앞쪽의 원소들부터 채워진다.`),Pl=i(),vs=e("pre"),xl=i(),Ys=e("p"),Pf=t("동일한 원리로 이런 것도 가능하다."),Cl=i(),ds=e("pre"),Ol=i(),Dl=e("br"),wl=e("br"),Rl=i(),yn=e("h2"),Pn=e("a"),Jt=e("span"),xf=t("string"),zl=i(),Sl=e("hr"),Ll=i(),an=e("p"),Qt=e("code"),Cf=t("string"),Of=t("은 Primitive Data Type이지만, 여러 문자들의 Slice처럼 생각할 수도 있다. Slice처럼 "),Xt=e("code"),Df=t("string"),wf=t("을 Slicing할 수도 있다."),Hl=i(),_s=e("pre"),Bl=i(),xn=e("p"),Rf=t("한편, 알파벳과 같은 일반적인 문자들을 "),Yt=e("code"),zf=t("string"),Sf=t(`으로 표현할 때는 문제를 느끼지 못할 수도 있다.
하지만 한글처럼 UTF-8에서 2바이트 이상의 크기로 표현되는 문자들은 Slicing시 문자가 제대로 나타나지 않을 때도 있다.`),Ml=i(),ys=e("pre"),Al=i(),C=e("p"),gt=e("code"),Lf=t("string"),Hf=t("을 구성하는 각 문자들은 "),ht=e("code"),Bf=t("rune"),Mf=t(" 타입이지만, 실제로 "),np=e("code"),Af=t("string"),Tf=t("은 "),sp=e("code"),Gf=t("byte"),Kf=t(`들의 배열이다.
`),ap=e("code"),Nf=t("rune"),$f=t(`은 문자가 1바이트든, 4바이트든 한 개의 문자를 온전히 나타낼 수 있고,
`),tp=e("code"),Zf=t("byte"),Vf=t("는 2바이트 이상의 문자를 나타내기 위해서는 2개 이상 모여야 한다는 것이다."),Tl=i(),Ps=e("pre"),Gl=i(),V=e("p"),Wf=t("위처럼 "),pp=e("code"),qf=t("string"),Uf=t("을 각각 "),ep=e("code"),jf=t("byte"),Ff=t("와 "),op=e("code"),If=t("rune"),Jf=t("의 Slice로 변환해보면 확인할 수 있다."),Kl=i(),Nl=e("br"),$l=e("br"),Zl=i(),Cn=e("h2"),On=e("a"),lp=e("span"),Qf=t("Map"),Vl=i(),Wl=e("hr"),ql=i(),x=e("p"),cp=e("strong"),Xf=t("Map"),Yf=t("은 전형적인 Key-Value 페어의 데이터타입으로, C++의 "),up=e("code"),gf=t("map"),hf=t("과 유사하다. 아래 코드처럼 선언하고, 초기화할 수 있다. "),nm=e("br"),sm=t(`
Slice와 마찬가지로 `),ip=e("code"),am=t("map"),tm=t("의 Zero value는 반드시 "),kp=e("code"),pm=t("nil"),em=t("이며, 크기가 0인 "),rp=e("code"),om=t("map"),lm=t("과 "),fp=e("code"),cm=t("nil"),um=t("은 서로 다르다."),Ul=i(),xs=e("pre"),jl=i(),Fl=e("br"),Il=i(),M=e("p"),im=t("초기화하는 방법도 다른 언어와 유사하다. 아래의 예제는 key는 "),mp=e("code"),km=t("string"),rm=t("이고, value는 "),bp=e("code"),fm=t("string"),mm=t("의 "),Ep=e("code"),bm=t("slice"),Em=t("인 "),vp=e("code"),vm=t("map"),dm=t("이다."),Jl=i(),Cs=e("pre"),Ql=i(),Xl=e("br"),Yl=i(),tn=e("p"),dp=e("code"),_m=t("make()"),ym=t("함수와 "),_p=e("code"),Pm=t("len()"),xm=t("함수는 map에서도 사용할 수 있다."),gl=i(),Os=e("pre"),hl=i(),nc=e("br"),sc=i(),gs=e("p"),Cm=t("사용 방법은 다른 언어의 일반적인 Key-Value 페어 데이터타입과 크게 다르지 않다. 이때 Value값이 존재하지 않는 Key에 접근하면 Zero value를 반환한다."),ac=i(),Ds=e("pre"),tc=i(),pc=e("br"),ec=i(),hs=e("p"),Om=t("이 때 Value값이 존재하지 않는 Key에 접근한 것인지, 아니면 그냥 Value값이 Zero value인지 알 수 없다."),oc=i(),ws=e("pre"),lc=i(),W=e("p"),Dm=t("이를테면 위와 같은 예제에서 Key가 "),yp=e("code"),wm=t('"world"'),Rm=t("일 때와, Key가 "),Pp=e("code"),zm=t('"Bye"'),Sm=t(`일 때 동일하게 0이라는 값을 얻게 될 것이다.
Go 개발자들은 당연히 이에 대한 해결책으로 `),xp=e("em"),Lm=t("comma ok idiom"),Hm=t("이란 것을 만들어 두었다."),cc=i(),Rs=e("pre"),uc=i(),v=e("p"),Bm=t("위 예제에서 "),Cp=e("code"),Mm=t("m"),Am=t("에서 반환받은 값을 계속 "),Op=e("code"),Tm=t("v"),Gm=t(", "),Dp=e("code"),Km=t("ok"),Nm=t(` 두 개의 변수에 할당하는 것을 확인할 수 있다.
이 때 첫 번째 변수인 `),wp=e("code"),$m=t("v"),Zm=t("에는 Key에 해당하는 Value가 들어가며, 두 번째 변수인 "),Rp=e("code"),Vm=t("ok"),Wm=t("에는 해당 Key가 "),zp=e("code"),qm=t("m"),Um=t("에 존재하는지 여부가 "),Sp=e("code"),jm=t("true"),Fm=t(" or "),Lp=e("code"),Im=t("false"),Jm=t(`로 들어간다.
또한 `),Hp=e("code"),Qm=t("map"),Xm=t("에서 Key-Value 페어를 지우려면 "),Bp=e("code"),Ym=t("delete()"),gm=t(" 함수를 사용한다."),ic=i(),kc=e("br"),rc=e("br"),fc=i(),Dn=e("h2"),wn=e("a"),Mp=e("span"),hm=t("struct"),mc=i(),bc=e("hr"),Ec=i(),A=e("p"),n1=t("C/C++의 "),Ap=e("code"),s1=t("struct"),a1=t(`와 유사하다. Go가 일반적으로 그런 것처럼, 필드들을 선언할 때 자료형이 필드명의 뒤에 온다.
C/C++의 `),Tp=e("code"),t1=t("typedef"),p1=t(" 키워드처럼, "),Gp=e("code"),e1=t("type"),o1=t(" 키워드를 통해 "),Kp=e("code"),l1=t("struct"),c1=t(" 타입을 정의할 수 있다."),vc=i(),zs=e("pre"),dc=i(),O=e("p"),Np=e("code"),u1=t("struct"),i1=t(" 인스턴스를 생성할 때는 "),$p=e("code"),k1=t("struct"),r1=t(`를 정의할 때 입력했던 순서대로 각 필드의 값을 중괄호 안에 입력해주면 된다.
특이사항으로는 `),Zp=e("code"),f1=t("map"),m1=t("이나 "),Vp=e("code"),b1=t("slice"),E1=t("와는 달리, "),Wp=e("code"),v1=t("struct"),d1=t("의 Zero value와 비어있는 "),qp=e("code"),_1=t("struct"),y1=t("가 동일하게 처리된다."),_c=i(),yc=e("br"),Pc=e("br"),xc=i(),Rn=e("h3"),zn=e("a"),Up=e("span"),P1=t("Anonymous Structs"),Cc=i(),Ss=e("pre"),Oc=i(),Sn=e("p"),x1=t("위 코드는 익명 "),jp=e("code"),C1=t("struct"),O1=t(` 변수를 선언하고, 또 선언과 동시에 초기화하는 예제이다.
타입 명시와 값 할당이 다른 중괄호 안에서 이루어져야 하는 것만 주의하면 큰 문제 없는 듯.`),Dc=i(),wc=e("br"),Rc=e("br"),zc=i(),Ln=e("h3"),Hn=e("a"),Fp=e("span"),D1=t("Comparing and Converting Structs"),Sc=i(),Ls=e("pre"),Lc=i(),pn=e("p"),Ip=e("code"),w1=t("struct"),R1=t("의 필드가 비교 가능한 타입들로 이루어져 있다면, 서로 같은 "),Jp=e("code"),z1=t("struct"),S1=t(" 타입끼리는 서로 비교할 수 있다."),Hc=i(),Bc=e("br"),Mc=i(),Hs=e("pre"),Ac=i(),Bn=e("p"),L1=t("서로 다른 "),Qp=e("code"),H1=t("struct"),B1=t(` 타입끼리는 서로 비교할 수 없다.
단, 필드의 타입과 필드명이 같다면 서로 변환할 수 있다.`),Tc=i(),Gc=e("br"),Kc=i(),Bs=e("pre"),Nc=i(),na=e("p"),M1=t("만약 필드의 타입과 필드명이 같아도 선언된 순서가 다르다면 비교 및 변환할 수 없다."),$c=i(),Zc=e("br"),Vc=i(),Ms=e("pre"),Wc=i(),sa=e("p"),A1=t("타입이 같아도 필드명이 다르다면 변환할 수 없으며, 다른 필드가 추가로 존재하면 비교 및 변환할 수 없다."),qc=i(),Uc=e("br"),jc=i(),As=e("pre"),Fc=i(),Mn=e("p"),T1=t("동일한 필드를 가지고 있는 익명 "),Xp=e("code"),G1=t("struct"),K1=t("에 대해서는 비교가 가능하다."),Ic=i(),Jc=e("br"),Qc=e("br"),Xc=i(),An=e("h2"),Tn=e("a"),Yp=e("span"),N1=t("References"),Yc=i(),gc=e("hr"),hc=i(),F=e("center"),gp=e("p"),$1=t("["),Z1=i(),EE(Ts.$$.fragment),V1=t(`
](https://learning.oreilly.com/library/view/learning-go/9781492077206/) `),W1=e("br"),q1=t(`
[Jon Bodner, 『Learning Go』, O'Reilly Media, Inc.](https://learning.oreilly.com/library/view/learning-go/9781492077206/)`),nu=i(),su=e("br"),au=e("br"),this.h()},l(n){Ks=o(n,"BR",{}),te=k(n),Ns=o(n,"P",{});var l=u(Ns);iu=p(l,"본 글은 Golang을 공부하며 주요 내용이라 생각되는 것들을 기록해둔 자료이며, Ubuntu 20.04 LTS 기준으로 작성되었습니다."),l.forEach(s),pe=k(n),ee=o(n,"BR",{}),oe=o(n,"BR",{}),le=k(n),ln=o(n,"H2",{id:!0});var U1=u(ln);cn=o(U1,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var e2=u(cn);ea=o(e2,"SPAN",{class:!0}),u(ea).forEach(s),e2.forEach(s),ku=p(U1,"Array"),U1.forEach(s),ce=k(n),ue=o(n,"HR",{}),ie=k(n),Zn=o(n,"P",{});var j1=u(Zn);oa=o(j1,"STRONG",{});var o2=u(oa);ru=p(o2,"Array"),o2.forEach(s),fu=p(j1,"는 같은 타입의, 크기(개수)가 정해진 데이터들을 묶어서 처리하기 위해 사용된다."),j1.forEach(s),ke=k(n),Vn=o(n,"PRE",{class:!0});var mv=u(Vn);mv.forEach(s),re=k(n),L=o(n,"P",{});var X=u(L);mu=p(X,"위 코드에서 "),la=o(X,"CODE",{});var l2=u(la);bu=p(l2,"[3]int"),l2.forEach(s),Eu=p(X,"은 크기가 "),ca=o(X,"EM",{});var c2=u(ca);vu=p(c2,"3"),c2.forEach(s),du=p(X,"인 "),ua=o(X,"CODE",{});var u2=u(ua);_u=p(u2,"int"),u2.forEach(s),yu=p(X,"의 Array임을 나타낸다. Array의 값을 초기화하지 않았으므로, "),ia=o(X,"CODE",{});var i2=u(ia);Pu=p(i2,"int"),i2.forEach(s),xu=p(X,`의 Zero value인 0으로 채워진다.
그리고 Array는 크기가 정해진 데이터에 대해서만 지원한다. 주석 처리된 부분처럼 배열의 크기를 변수값으로 초기화하는 것은 불가능하다.`),X.forEach(s),fe=k(n),me=o(n,"BR",{}),be=k(n),$s=o(n,"P",{});var k2=u($s);Cu=p(k2,"C/C++에서 그렇듯, 중괄호를 이용하여 배열 내의 값을 초기화할 수 있다."),k2.forEach(s),Ee=k(n),Wn=o(n,"PRE",{class:!0});var bv=u(Wn);bv.forEach(s),ve=k(n),E=o(n,"P",{});var _=u(E);Ou=p(_,"위 코드의 변수 "),ka=o(_,"CODE",{});var r2=u(ka);Du=p(r2,"y"),r2.forEach(s),wu=p(_,"를 초기화하는 라인에서 "),ra=o(_,"CODE",{});var f2=u(ra);Ru=p(f2,"n:m"),f2.forEach(s),zu=p(_," 형태의 표기법을 확인할 수 있다. "),fa=o(_,"CODE",{});var m2=u(fa);Su=p(m2,"n"),m2.forEach(s),Lu=p(_,"번째 인덱스의 값을 "),ma=o(_,"CODE",{});var b2=u(ma);Hu=p(b2,"m"),b2.forEach(s),Bu=p(_,`으로 초기화한다는 의미이다.
지정되지 않은 다른 값들은 Zero value인 `),ba=o(_,"EM",{});var E2=u(ba);Mu=p(E2,"0"),E2.forEach(s),Au=p(_,"으로 초기화된다."),Tu=o(_,"BR",{}),Gu=p(_,`
변수 `),Ea=o(_,"CODE",{});var v2=u(Ea);Ku=p(v2,"z"),v2.forEach(s),Nu=p(_,"를 초기화하는 라인처럼 배열의 크기에 "),va=o(_,"CODE",{});var d2=u(va);$u=p(d2,"..."),d2.forEach(s),Zu=p(_,"가 입력되면 자동으로 배열의 크기를 결정한다. 위 코드에서 "),da=o(_,"CODE",{});var _2=u(da);Vu=p(_2,"z"),_2.forEach(s),Wu=p(_,"의 크기는 "),_a=o(_,"EM",{});var y2=u(_a);qu=p(y2,"5"),y2.forEach(s),Uu=p(_,"가 될 것이다."),_.forEach(s),de=k(n),_e=o(n,"BR",{}),ye=k(n),un=o(n,"P",{});var pu=u(un);ju=p(pu,`여느 언어가 그렇듯, 대괄호를 통해 indexing한다. 인덱스에 음수나 배열 크기보다 큰 수 넣으면 런타임 에러가 발생한다.
또한 `),ya=o(pu,"CODE",{});var P2=u(ya);Fu=p(P2,"len()"),P2.forEach(s),Iu=p(pu," 함수를 사용하여 Array의 크기를 확인할 수 있다."),pu.forEach(s),Pe=k(n),qn=o(n,"PRE",{class:!0});var Ev=u(qn);Ev.forEach(s),xe=k(n),Ce=o(n,"BR",{}),Oe=k(n),Zs=o(n,"P",{});var x2=u(Zs);Ju=p(x2,"다차원 배열은 좀 난해하하다고 느꼈는데, 어떻게 사용하는지는 코드를 바로 보는 편이 이해가 빠를 것이다."),x2.forEach(s),De=k(n),Un=o(n,"PRE",{class:!0});var vv=u(Un);vv.forEach(s),we=k(n),Re=o(n,"BR",{}),ze=k(n),I=o(n,"P",{});var aa=u(I);Qu=p(aa,"이건 좀 신기했던 부분인데, Go에서 Array는 크기와 element의 타입이 같다면 동일한 타입으로 여긴다. 그래서 "),Pa=o(aa,"CODE",{});var C2=u(Pa);Xu=p(C2,"=="),C2.forEach(s),Yu=p(aa,"와 "),xa=o(aa,"CODE",{});var O2=u(xa);gu=p(O2,"!="),O2.forEach(s),hu=p(aa,`의 두 가지의 비교 연산이 가능하다!
다만 element의 타입이 같아도 Array의 크기가 다르다면 서로 다른 타입으로 여기기 때문에, 비교 연산을 하면 에러가 발생한다.`),aa.forEach(s),Se=k(n),jn=o(n,"PRE",{class:!0});var dv=u(jn);dv.forEach(s),Le=k(n),He=o(n,"BR",{}),Be=o(n,"BR",{}),Me=k(n),kn=o(n,"H2",{id:!0});var F1=u(kn);rn=o(F1,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var D2=u(rn);Ca=o(D2,"SPAN",{class:!0}),u(Ca).forEach(s),D2.forEach(s),ni=p(F1,"Slice"),F1.forEach(s),Ae=k(n),Te=o(n,"HR",{}),Ge=k(n),sn=o(n,"P",{});var hp=u(sn);Oa=o(hp,"STRONG",{});var w2=u(Oa);si=p(w2,"Slice"),w2.forEach(s),ai=p(hp,"는 동적으로 크기가 늘어났다 줄어들었다 하는 Array라고 볼 수 있다. 다른 언어에도 이와 유사한 타입들이 많이 존재하지만, Go의 Slice는 좀 유니크하다."),ti=o(hp,"BR",{}),pi=p(hp,`
먼저 Array와는 달리 대괄호 사이를 비워놓고 선언한다. Array와 유사한 부분들을 모아보았다.`),hp.forEach(s),Ke=k(n),Fn=o(n,"PRE",{class:!0});var _v=u(Fn);_v.forEach(s),Ne=k(n),$e=o(n,"BR",{}),Ze=k(n),Vs=o(n,"P",{});var R2=u(Vs);ei=p(R2,"이제 다른 부분들을 하나씩 알아보자."),R2.forEach(s),Ve=k(n),D=o(n,"P",{});var q=u(D);oi=p(q,"선언만 하고 초기화하지 않으면 해당 타입의 Zero value로 초기화하는 Array와는 달리, Slice는 비어 있는 객체라는 뜻인 Slice는 "),Da=o(q,"CODE",{});var z2=u(Da);li=p(z2,"nil"),z2.forEach(s),ci=p(q,`이 된다.
이때 `),wa=o(q,"CODE",{});var S2=u(wa);ui=p(S2,"nil"),S2.forEach(s),ii=p(q,`과 Length가 0인 Slice는 엄연히 서로 다르다.
`),Ra=o(q,"CODE",{});var L2=u(Ra);ki=p(L2,"nil"),L2.forEach(s),ri=p(q,"은 C/C++의 "),za=o(q,"CODE",{});var H2=u(za);fi=p(H2,"NULL"),H2.forEach(s),mi=p(q,"과 자바스크립트의 "),Sa=o(q,"CODE",{});var B2=u(Sa);bi=p(B2,"null"),B2.forEach(s),Ei=p(q," 사이 어딘가의 느낌인데, 추후 설명하겠다."),q.forEach(s),We=k(n),In=o(n,"PRE",{class:!0});var yv=u(In);yv.forEach(s),qe=k(n),Ws=o(n,"P",{});var M2=u(Ws);vi=p(M2,`타입과 크기가 같다면 비교 연산을 할 수 있었던 Array와는 달리, slice끼리는 타입이 같아도 서로 비교 연산을 할 수 없다.
slice와 nil과의 비교 연산만 허용된다.`),M2.forEach(s),Ue=k(n),je=o(n,"BR",{}),Fe=k(n),Jn=o(n,"P",{});var I1=u(Jn);La=o(I1,"CODE",{});var A2=u(La);di=p(A2,"make()"),A2.forEach(s),_i=p(I1," 함수를 이용하여 slice를 생성할 수도 있다. 타입, Length, Capacity를 인자로 설정한다."),I1.forEach(s),Ie=k(n),Qn=o(n,"PRE",{class:!0});var Pv=u(Qn);Pv.forEach(s),Je=k(n),Qe=o(n,"BR",{}),Xe=o(n,"BR",{}),Ye=k(n),fn=o(n,"H3",{id:!0});var J1=u(fn);mn=o(J1,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var T2=u(mn);Ha=o(T2,"SPAN",{class:!0}),u(Ha).forEach(s),T2.forEach(s),yi=p(J1,"Appending Elements into Slices"),J1.forEach(s),ge=k(n),he=o(n,"BR",{}),no=k(n),$=o(n,"P",{});var Gn=u($);Pi=p(Gn,"Slice에 값을 추가하기 위해서는 "),Ba=o(Gn,"CODE",{});var G2=u(Ba);xi=p(G2,"append()"),G2.forEach(s),Ci=p(Gn," 함수를 사용한다. 값을 추가할 Slice와, 한 개 이상의 추가할 값들을 파라미터로 받는다."),Oi=o(Gn,"BR",{}),Di=k(Gn),Ma=o(Gn,"CODE",{});var K2=u(Ma);wi=p(K2,"..."),K2.forEach(s),Ri=p(Gn," 연산자를 활용하여, 다른 Slice 변수의 값들을 추가할수도 있다."),Gn.forEach(s),so=k(n),bn=o(n,"P",{});var eu=u(bn);zi=p(eu,"특이사항은 "),Aa=o(eu,"CODE",{});var N2=u(Aa);Si=p(N2,"append()"),N2.forEach(s),Li=p(eu,"함수에 값을 추가할 Slice 변수를 넣고, 반환값을 다시 그 변수로 받아야 한다는 것이다."),eu.forEach(s),ao=k(n),Xn=o(n,"PRE",{class:!0});var xv=u(Xn);xv.forEach(s),to=k(n),w=o(n,"P",{});var U=u(w);Hi=p(U,"이때 위 코드에서 "),Ta=o(U,"CODE",{});var $2=u(Ta);Bi=p($2,"cap()"),$2.forEach(s),Mi=p(U,`라는 함수가 사용되는 것을 확인할 수 있다.
Slice에는 요소들의 개수를 나타내는 `),Ga=o(U,"EM",{});var Z2=u(Ga);Ai=p(Z2,"Length"),Z2.forEach(s),Ti=p(U,"뿐 아니라, "),Ka=o(U,"STRONG",{});var V2=u(Ka);Gi=p(V2,"Capacity"),V2.forEach(s),Ki=p(U,`라는 속성이 존재한다. 이는 요소들이 추가될 수 있는 전체 공간의 크기를 의미한다.
`),Na=o(U,"CODE",{});var W2=u(Na);Ni=p(W2,"append()"),W2.forEach(s),$i=p(U,"로 변수 "),$a=o(U,"CODE",{});var q2=u($a);Zi=p(q2,"slice"),q2.forEach(s),Vi=p(U,"에 요소들을 추가할 때마다 Length가 증가하고, Length가 Capacity를 초과하려고 할 때마다 Capacity도 증가함을 확인할 수 있다."),U.forEach(s),po=k(n),eo=o(n,"BR",{}),oo=o(n,"BR",{}),lo=k(n),En=o(n,"H3",{id:!0});var Q1=u(En);vn=o(Q1,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var U2=u(vn);Za=o(U2,"SPAN",{class:!0}),u(Za).forEach(s),U2.forEach(s),Wi=p(Q1,"Slicing Slices"),Q1.forEach(s),co=k(n),uo=o(n,"BR",{}),io=k(n),J=o(n,"P",{});var ta=u(J);qi=p(ta,"Python의 "),Va=o(ta,"CODE",{});var j2=u(Va);Ui=p(j2,"List"),j2.forEach(s),ji=p(ta,"처럼 대괄호에 콜론("),Wa=o(ta,"CODE",{});var F2=u(Wa);Fi=p(F2,":"),F2.forEach(s),Ii=p(ta,")과 인덱스를 붙여 Slicing할 수 있다."),ta.forEach(s),ko=k(n),Yn=o(n,"PRE",{class:!0});var Cv=u(Yn);Cv.forEach(s),ro=k(n),P=o(n,"P",{});var z=u(P);Ji=p(z,"Python은 이렇게 Slicing 하면, Slicing된 새로운 "),qa=o(z,"CODE",{});var I2=u(qa);Qi=p(I2,"List"),I2.forEach(s),Xi=p(z,"가 복사되어, 원본과 같은 공간을 가리키지 않는다. 반면 Go의 Slicing된 "),Ua=o(z,"CODE",{});var J2=u(Ua);Yi=p(J2,"Slice"),J2.forEach(s),gi=p(z,"는 원본을 가리킨다. "),ja=o(z,"CODE",{});var Q2=u(ja);hi=p(Q2,"e"),Q2.forEach(s),nk=p(z,"의 값 중 하나를 수정해보면, "),Fa=o(z,"CODE",{});var X2=u(Fa);sk=p(X2,"x"),X2.forEach(s),ak=p(z,", "),Ia=o(z,"CODE",{});var Y2=u(Ia);tk=p(Y2,"z"),Y2.forEach(s),pk=p(z,", "),Ja=o(z,"CODE",{});var g2=u(Ja);ek=p(g2,"d"),g2.forEach(s),ok=p(z,"까지 해당 값을 포함했던 모든 "),Qa=o(z,"CODE",{});var h2=u(Qa);lk=p(h2,"Slice"),h2.forEach(s),ck=p(z,"의 값들도 변경됨을 확인할 수 있다."),z.forEach(s),fo=k(n),gn=o(n,"PRE",{class:!0});var Ov=u(gn);Ov.forEach(s),mo=k(n),bo=o(n,"BR",{}),Eo=k(n),qs=o(n,"P",{});var nb=u(qs);uk=p(nb,"사실 여기까진 그냥 그런가보다 할텐데, 원소를 추가하기 시작하면 본격적으로 어지러워진다."),nb.forEach(s),vo=k(n),hn=o(n,"PRE",{class:!0});var Dv=u(hn);Dv.forEach(s),_o=k(n),yo=o(n,"BR",{}),Po=k(n),R=o(n,"P",{});var j=u(R);ik=p(j,"추가 이전, "),Xa=o(j,"CODE",{});var sb=u(Xa);kk=p(sb,"x"),sb.forEach(s),rk=p(j,", "),Ya=o(j,"CODE",{});var ab=u(Ya);fk=p(ab,"y"),ab.forEach(s),mk=p(j,", "),ga=o(j,"CODE",{});var tb=u(ga);bk=p(tb,"z"),tb.forEach(s),Ek=p(j,", "),ha=o(j,"CODE",{});var pb=u(ha);vk=p(pb,"d"),pb.forEach(s),dk=p(j,", "),nt=o(j,"CODE",{});var eb=u(nt);_k=p(eb,"e"),eb.forEach(s),yk=p(j,"는 아래와 같았는데,"),j.forEach(s),xo=k(n),ns=o(n,"PRE",{class:!0});var wv=u(ns);wv.forEach(s),Co=k(n),Us=o(n,"P",{});var ob=u(Us);Pk=p(ob,"이렇게 변했다."),ob.forEach(s),Oo=k(n),ss=o(n,"PRE",{class:!0});var Rv=u(ss);Rv.forEach(s),Do=k(n),b=o(n,"P",{});var d=u(b);st=o(d,"CODE",{});var lb=u(st);xk=p(lb,"y"),lb.forEach(s),Ck=p(d,"에 "),at=o(d,"CODE",{});var cb=u(at);Ok=p(cb,"30"),cb.forEach(s),Dk=p(d,"을 추가했으니 "),tt=o(d,"CODE",{});var ub=u(tt);wk=p(ub,"[1 2 30]"),ub.forEach(s),Rk=p(d,"이 된 건 그렇다 치고, "),pt=o(d,"CODE",{});var ib=u(pt);zk=p(ib,"x"),ib.forEach(s),Sk=p(d,", "),et=o(d,"CODE",{});var kb=u(et);Lk=p(kb,"z"),kb.forEach(s),Hk=p(d,", "),ot=o(d,"CODE",{});var rb=u(ot);Bk=p(rb,"d"),rb.forEach(s),Mk=p(d,", "),lt=o(d,"CODE",{});var fb=u(lt);Ak=p(fb,"e"),fb.forEach(s),Tk=p(d,"에서 대응되는 위치에 있었던 "),ct=o(d,"CODE",{});var mb=u(ct);Gk=p(mb,"1"),mb.forEach(s),Kk=p(d,"도 모두 "),ut=o(d,"CODE",{});var bb=u(ut);Nk=p(bb,"30"),bb.forEach(s),$k=p(d,`으로 바뀌었음을 알 수 있다.
그리고 여기서 `),it=o(d,"CODE",{});var Eb=u(it);Zk=p(Eb,"y"),Eb.forEach(s),Vk=p(d,"만 length가 바뀌었으므로, 나타나는 원소의 개수는 "),kt=o(d,"CODE",{});var vb=u(kt);Wk=p(vb,"y"),vb.forEach(s),qk=p(d,"만 2개에서 3개로 늘었다."),d.forEach(s),wo=k(n),Ro=o(n,"BR",{}),zo=k(n),js=o(n,"P",{});var db=u(js);Uk=p(db,"다음의 예제를 보자."),db.forEach(s),So=k(n),as=o(n,"PRE",{class:!0});var zv=u(as);zv.forEach(s),Lo=k(n),Fs=o(n,"P",{});var _b=u(Fs);jk=p(_b,"해당 구문의 실행 결과는 …"),_b.forEach(s),Ho=k(n),ts=o(n,"PRE",{class:!0});var Sv=u(ts);Sv.forEach(s),Bo=k(n),Mo=o(n,"BR",{}),Ao=k(n),Is=o(n,"CENTER",{});var yb=u(Is);vE(ps.$$.fragment,yb),yb.forEach(s),To=k(n),Go=o(n,"BR",{}),Ko=k(n),Js=o(n,"P",{});var Pb=u(Js);Fk=p(Pb,"상당히 혼란스럽다. 하나씩 알아보자."),Pb.forEach(s),No=k(n),es=o(n,"PRE",{class:!0});var Lv=u(es);Lv.forEach(s),$o=k(n),Z=o(n,"P",{});var Kn=u(Z);Ik=p(Kn,"여기까지 실행했을 때, "),rt=o(Kn,"CODE",{});var xb=u(rt);Jk=p(xb,"xx"),xb.forEach(s),Qk=p(Kn,", "),ft=o(Kn,"CODE",{});var Cb=u(ft);Xk=p(Cb,"yy"),Cb.forEach(s),Yk=p(Kn,", "),mt=o(Kn,"CODE",{});var Ob=u(mt);gk=p(Ob,"zz"),Ob.forEach(s),hk=p(Kn,"의 값은"),Kn.forEach(s),Zo=k(n),os=o(n,"PRE",{class:!0});var Hv=u(os);Hv.forEach(s),Vo=k(n),H=o(n,"P",{});var Y=u(H);nr=p(Y,"이다. 이제, "),bt=o(Y,"CODE",{});var Db=u(bt);sr=p(Db,"yy"),Db.forEach(s),ar=p(Y,"에 "),Et=o(Y,"CODE",{});var wb=u(Et);tr=p(wb,"30"),wb.forEach(s),pr=p(Y,", "),vt=o(Y,"CODE",{});var Rb=u(vt);er=p(Rb,"40"),Rb.forEach(s),or=p(Y,", "),dt=o(Y,"CODE",{});var zb=u(dt);lr=p(zb,"50"),zb.forEach(s),cr=p(Y,"을 추가해보자."),Y.forEach(s),Wo=k(n),ls=o(n,"PRE",{class:!0});var Bv=u(ls);Bv.forEach(s),qo=k(n),Uo=o(n,"BR",{}),jo=k(n),f=o(n,"P",{});var m=u(f);_t=o(m,"CODE",{});var Sb=u(_t);ur=p(Sb,"xx"),Sb.forEach(s),ir=p(m,"와 "),yt=o(m,"CODE",{});var Lb=u(yt);kr=p(Lb,"zz"),Lb.forEach(s),rr=p(m,"는 "),Pt=o(m,"CODE",{});var Hb=u(Pt);fr=p(Hb,"yy"),Hb.forEach(s),mr=p(m,"와 같은 공간을 공유한다. 따라서 대응되는 위치의 값이었던 "),xt=o(m,"CODE",{});var Bb=u(xt);br=p(Bb,"xx"),Bb.forEach(s),Er=p(m,"와 "),Ct=o(m,"CODE",{});var Mb=u(Ct);vr=p(Mb,"zz"),Mb.forEach(s),dr=p(m,"의 "),Ot=o(m,"CODE",{});var Ab=u(Ot);_r=p(Ab,"3"),Ab.forEach(s),yr=p(m,", "),Dt=o(m,"CODE",{});var Tb=u(Dt);Pr=p(Tb,"4"),Tb.forEach(s),xr=p(m,"가 각각 "),wt=o(m,"CODE",{});var Gb=u(wt);Cr=p(Gb,"30"),Gb.forEach(s),Or=p(m,", "),Rt=o(m,"CODE",{});var Kb=u(Rt);Dr=p(Kb,"40"),Kb.forEach(s),wr=p(m,`으로 바뀌었음을 확인할 수 있다.
반면 `),zt=o(m,"CODE",{});var Nb=u(zt);Rr=p(Nb,"xx"),Nb.forEach(s),zr=p(m,"와 "),St=o(m,"CODE",{});var $b=u(St);Sr=p($b,"zz"),$b.forEach(s),Lr=p(m,"의 Length는 바뀌지 않고, "),Lt=o(m,"CODE",{});var Zb=u(Lt);Hr=p(Zb,"yy"),Zb.forEach(s),Br=p(m,"의 Length만 5로 바뀌었다."),Mr=o(m,"BR",{}),Ar=p(m,`
여기서 `),Ht=o(m,"CODE",{});var Vb=u(Ht);Tr=p(Vb,"xx = append(xx, 60)"),Vb.forEach(s),Gr=p(m,"가 실행되면,"),m.forEach(s),Fo=k(n),cs=o(n,"PRE",{class:!0});var Mv=u(cs);Mv.forEach(s),Io=k(n),T=o(n,"P",{});var en=u(T);Bt=o(en,"CODE",{});var Wb=u(Bt);Kr=p(Wb,"xx"),Wb.forEach(s),Nr=p(en,"에 60이 추가되며, "),Mt=o(en,"CODE",{});var qb=u(Mt);$r=p(qb,"yy"),qb.forEach(s),Zr=p(en,"의 대응되는 위치의 값이었던 50의 값이 60으로 바뀌었다."),Vr=o(en,"BR",{}),Wr=p(en,`
여기서 `),At=o(en,"CODE",{});var Ub=u(At);qr=p(Ub,"zz = append(zz, 70)"),Ub.forEach(s),Ur=p(en,"가 실행되면,"),en.forEach(s),Jo=k(n),us=o(n,"PRE",{class:!0});var Av=u(us);Av.forEach(s),Qo=k(n),G=o(n,"P",{});var on=u(G);Tt=o(on,"CODE",{});var jb=u(Tt);jr=p(jb,"xx"),jb.forEach(s),Fr=p(on,"와 "),Gt=o(on,"CODE",{});var Fb=u(Gt);Ir=p(Fb,"yy"),Fb.forEach(s),Jr=p(on,"의 대응되는 위치의 값이었던 "),Kt=o(on,"CODE",{});var Ib=u(Kt);Qr=p(Ib,"60"),Ib.forEach(s),Xr=p(on,"이 "),Nt=o(on,"CODE",{});var Jb=u(Nt);Yr=p(Jb,"70"),Jb.forEach(s),gr=p(on,"으로 바뀌었다."),on.forEach(s),Xo=k(n),Yo=o(n,"BR",{}),go=k(n),B=o(n,"P",{});var g=u(B);hr=p(g,"Slice에 값을 "),$t=o(g,"CODE",{});var Qb=u($t);nf=p(Qb,"append"),Qb.forEach(s),sf=p(g,`하였을 때 생기는 문제로 인해 직관적으로 이해하기 어려운 결과를 확인하였다.
`),Zt=o(g,"CODE",{});var Xb=u(Zt);af=p(Xb,"xx"),Xb.forEach(s),tf=p(g,", "),Vt=o(g,"CODE",{});var Yb=u(Vt);pf=p(Yb,"yy"),Yb.forEach(s),ef=p(g,", "),Wt=o(g,"CODE",{});var gb=u(Wt);of=p(gb,"zz"),gb.forEach(s),lf=p(g,`가 같은 Capacity를 공유하기 때문에 생긴 문제이다.
Slice를 Slicing할 때, Capacity의 범위를 명시하는 표기법을 사용하면 이와 같은 문제를 어느 정도 해결할 수 있다.`),g.forEach(s),ho=k(n),is=o(n,"PRE",{class:!0});var Tv=u(is);Tv.forEach(s),nl=k(n),Qs=o(n,"P",{});var hb=u(Qs);cf=p(hb,"위 코드의 출력 결과는 아래와 같다."),hb.forEach(s),sl=k(n),ks=o(n,"PRE",{class:!0});var Gv=u(ks);Gv.forEach(s),al=k(n),tl=o(n,"BR",{}),pl=k(n),Xs=o(n,"P",{});var n3=u(Xs);uf=p(n3,"한편 Array도 Slicing이 가능하며, Slicing된 값은 Slice 타입이다."),n3.forEach(s),el=k(n),rs=o(n,"PRE",{class:!0});var Kv=u(rs);Kv.forEach(s),ol=k(n),ll=o(n,"BR",{}),cl=o(n,"BR",{}),ul=k(n),dn=o(n,"H3",{id:!0});var X1=u(dn);_n=o(X1,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var s3=u(_n);qt=o(s3,"SPAN",{class:!0}),u(qt).forEach(s),s3.forEach(s),kf=p(X1,"Copying Slices"),X1.forEach(s),il=k(n),kl=o(n,"BR",{}),rl=k(n),Q=o(n,"P",{});var pa=u(Q);rf=p(pa,"또다른 해결방법은 다른 언어의 "),Ut=o(pa,"EM",{});var a3=u(Ut);ff=p(a3,"deep copy"),a3.forEach(s),mf=p(pa,"처럼, 새로운 공간에 값들을 복사하는 방법이다. "),jt=o(pa,"CODE",{});var t3=u(jt);bf=p(t3,"copy()"),t3.forEach(s),Ef=p(pa," 함수를 통해 할 수 있다."),pa.forEach(s),fl=k(n),fs=o(n,"PRE",{class:!0});var Nv=u(fs);Nv.forEach(s),ml=k(n),bl=o(n,"BR",{}),El=k(n),ms=o(n,"P",{});var Y1=u(ms);Ft=o(Y1,"CODE",{});var p3=u(Ft);vf=p(p3,"copy()"),p3.forEach(s),df=p(Y1," 함수는 두 번째 인수로 들어온 Array나 Slice를 첫 번째 인수로 들어온 Slice에 복사한다. 반환값은 복사된 원소의 수이다."),Y1.forEach(s),vl=k(n),bs=o(n,"PRE",{class:!0});var $v=u(bs);$v.forEach(s),dl=k(n),_l=o(n,"BR",{}),yl=k(n),Es=o(n,"P",{});var g1=u(Es);It=o(g1,"CODE",{});var e3=u(It);_f=p(e3,"copy()"),e3.forEach(s),yf=p(g1,` 함수의 인수로 들어오는 Slice나 Array들은 Length가 서로 다를 수 있다.
Destination Slice의 Length가 Source Slice보다 크다면, 앞쪽의 원소들부터 채워진다.`),g1.forEach(s),Pl=k(n),vs=o(n,"PRE",{class:!0});var Zv=u(vs);Zv.forEach(s),xl=k(n),Ys=o(n,"P",{});var o3=u(Ys);Pf=p(o3,"동일한 원리로 이런 것도 가능하다."),o3.forEach(s),Cl=k(n),ds=o(n,"PRE",{class:!0});var Vv=u(ds);Vv.forEach(s),Ol=k(n),Dl=o(n,"BR",{}),wl=o(n,"BR",{}),Rl=k(n),yn=o(n,"H2",{id:!0});var h1=u(yn);Pn=o(h1,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var l3=u(Pn);Jt=o(l3,"SPAN",{class:!0}),u(Jt).forEach(s),l3.forEach(s),xf=p(h1,"string"),h1.forEach(s),zl=k(n),Sl=o(n,"HR",{}),Ll=k(n),an=o(n,"P",{});var ne=u(an);Qt=o(ne,"CODE",{});var c3=u(Qt);Cf=p(c3,"string"),c3.forEach(s),Of=p(ne,"은 Primitive Data Type이지만, 여러 문자들의 Slice처럼 생각할 수도 있다. Slice처럼 "),Xt=o(ne,"CODE",{});var u3=u(Xt);Df=p(u3,"string"),u3.forEach(s),wf=p(ne,"을 Slicing할 수도 있다."),ne.forEach(s),Hl=k(n),_s=o(n,"PRE",{class:!0});var Wv=u(_s);Wv.forEach(s),Bl=k(n),xn=o(n,"P",{});var ou=u(xn);Rf=p(ou,"한편, 알파벳과 같은 일반적인 문자들을 "),Yt=o(ou,"CODE",{});var i3=u(Yt);zf=p(i3,"string"),i3.forEach(s),Sf=p(ou,`으로 표현할 때는 문제를 느끼지 못할 수도 있다.
하지만 한글처럼 UTF-8에서 2바이트 이상의 크기로 표현되는 문자들은 Slicing시 문자가 제대로 나타나지 않을 때도 있다.`),ou.forEach(s),Ml=k(n),ys=o(n,"PRE",{class:!0});var qv=u(ys);qv.forEach(s),Al=k(n),C=o(n,"P",{});var K=u(C);gt=o(K,"CODE",{});var k3=u(gt);Lf=p(k3,"string"),k3.forEach(s),Hf=p(K,"을 구성하는 각 문자들은 "),ht=o(K,"CODE",{});var r3=u(ht);Bf=p(r3,"rune"),r3.forEach(s),Mf=p(K," 타입이지만, 실제로 "),np=o(K,"CODE",{});var f3=u(np);Af=p(f3,"string"),f3.forEach(s),Tf=p(K,"은 "),sp=o(K,"CODE",{});var m3=u(sp);Gf=p(m3,"byte"),m3.forEach(s),Kf=p(K,`들의 배열이다.
`),ap=o(K,"CODE",{});var b3=u(ap);Nf=p(b3,"rune"),b3.forEach(s),$f=p(K,`은 문자가 1바이트든, 4바이트든 한 개의 문자를 온전히 나타낼 수 있고,
`),tp=o(K,"CODE",{});var E3=u(tp);Zf=p(E3,"byte"),E3.forEach(s),Vf=p(K,"는 2바이트 이상의 문자를 나타내기 위해서는 2개 이상 모여야 한다는 것이다."),K.forEach(s),Tl=k(n),Ps=o(n,"PRE",{class:!0});var Uv=u(Ps);Uv.forEach(s),Gl=k(n),V=o(n,"P",{});var Nn=u(V);Wf=p(Nn,"위처럼 "),pp=o(Nn,"CODE",{});var v3=u(pp);qf=p(v3,"string"),v3.forEach(s),Uf=p(Nn,"을 각각 "),ep=o(Nn,"CODE",{});var d3=u(ep);jf=p(d3,"byte"),d3.forEach(s),Ff=p(Nn,"와 "),op=o(Nn,"CODE",{});var _3=u(op);If=p(_3,"rune"),_3.forEach(s),Jf=p(Nn,"의 Slice로 변환해보면 확인할 수 있다."),Nn.forEach(s),Kl=k(n),Nl=o(n,"BR",{}),$l=o(n,"BR",{}),Zl=k(n),Cn=o(n,"H2",{id:!0});var n2=u(Cn);On=o(n2,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var y3=u(On);lp=o(y3,"SPAN",{class:!0}),u(lp).forEach(s),y3.forEach(s),Qf=p(n2,"Map"),n2.forEach(s),Vl=k(n),Wl=o(n,"HR",{}),ql=k(n),x=o(n,"P",{});var S=u(x);cp=o(S,"STRONG",{});var P3=u(cp);Xf=p(P3,"Map"),P3.forEach(s),Yf=p(S,"은 전형적인 Key-Value 페어의 데이터타입으로, C++의 "),up=o(S,"CODE",{});var x3=u(up);gf=p(x3,"map"),x3.forEach(s),hf=p(S,"과 유사하다. 아래 코드처럼 선언하고, 초기화할 수 있다. "),nm=o(S,"BR",{}),sm=p(S,`
Slice와 마찬가지로 `),ip=o(S,"CODE",{});var C3=u(ip);am=p(C3,"map"),C3.forEach(s),tm=p(S,"의 Zero value는 반드시 "),kp=o(S,"CODE",{});var O3=u(kp);pm=p(O3,"nil"),O3.forEach(s),em=p(S,"이며, 크기가 0인 "),rp=o(S,"CODE",{});var D3=u(rp);om=p(D3,"map"),D3.forEach(s),lm=p(S,"과 "),fp=o(S,"CODE",{});var w3=u(fp);cm=p(w3,"nil"),w3.forEach(s),um=p(S,"은 서로 다르다."),S.forEach(s),Ul=k(n),xs=o(n,"PRE",{class:!0});var jv=u(xs);jv.forEach(s),jl=k(n),Fl=o(n,"BR",{}),Il=k(n),M=o(n,"P",{});var h=u(M);im=p(h,"초기화하는 방법도 다른 언어와 유사하다. 아래의 예제는 key는 "),mp=o(h,"CODE",{});var R3=u(mp);km=p(R3,"string"),R3.forEach(s),rm=p(h,"이고, value는 "),bp=o(h,"CODE",{});var z3=u(bp);fm=p(z3,"string"),z3.forEach(s),mm=p(h,"의 "),Ep=o(h,"CODE",{});var S3=u(Ep);bm=p(S3,"slice"),S3.forEach(s),Em=p(h,"인 "),vp=o(h,"CODE",{});var L3=u(vp);vm=p(L3,"map"),L3.forEach(s),dm=p(h,"이다."),h.forEach(s),Jl=k(n),Cs=o(n,"PRE",{class:!0});var Fv=u(Cs);Fv.forEach(s),Ql=k(n),Xl=o(n,"BR",{}),Yl=k(n),tn=o(n,"P",{});var se=u(tn);dp=o(se,"CODE",{});var H3=u(dp);_m=p(H3,"make()"),H3.forEach(s),ym=p(se,"함수와 "),_p=o(se,"CODE",{});var B3=u(_p);Pm=p(B3,"len()"),B3.forEach(s),xm=p(se,"함수는 map에서도 사용할 수 있다."),se.forEach(s),gl=k(n),Os=o(n,"PRE",{class:!0});var Iv=u(Os);Iv.forEach(s),hl=k(n),nc=o(n,"BR",{}),sc=k(n),gs=o(n,"P",{});var M3=u(gs);Cm=p(M3,"사용 방법은 다른 언어의 일반적인 Key-Value 페어 데이터타입과 크게 다르지 않다. 이때 Value값이 존재하지 않는 Key에 접근하면 Zero value를 반환한다."),M3.forEach(s),ac=k(n),Ds=o(n,"PRE",{class:!0});var Jv=u(Ds);Jv.forEach(s),tc=k(n),pc=o(n,"BR",{}),ec=k(n),hs=o(n,"P",{});var A3=u(hs);Om=p(A3,"이 때 Value값이 존재하지 않는 Key에 접근한 것인지, 아니면 그냥 Value값이 Zero value인지 알 수 없다."),A3.forEach(s),oc=k(n),ws=o(n,"PRE",{class:!0});var Qv=u(ws);Qv.forEach(s),lc=k(n),W=o(n,"P",{});var $n=u(W);Dm=p($n,"이를테면 위와 같은 예제에서 Key가 "),yp=o($n,"CODE",{});var T3=u(yp);wm=p(T3,'"world"'),T3.forEach(s),Rm=p($n,"일 때와, Key가 "),Pp=o($n,"CODE",{});var G3=u(Pp);zm=p(G3,'"Bye"'),G3.forEach(s),Sm=p($n,`일 때 동일하게 0이라는 값을 얻게 될 것이다.
Go 개발자들은 당연히 이에 대한 해결책으로 `),xp=o($n,"EM",{});var K3=u(xp);Lm=p(K3,"comma ok idiom"),K3.forEach(s),Hm=p($n,"이란 것을 만들어 두었다."),$n.forEach(s),cc=k(n),Rs=o(n,"PRE",{class:!0});var Xv=u(Rs);Xv.forEach(s),uc=k(n),v=o(n,"P",{});var y=u(v);Bm=p(y,"위 예제에서 "),Cp=o(y,"CODE",{});var N3=u(Cp);Mm=p(N3,"m"),N3.forEach(s),Am=p(y,"에서 반환받은 값을 계속 "),Op=o(y,"CODE",{});var $3=u(Op);Tm=p($3,"v"),$3.forEach(s),Gm=p(y,", "),Dp=o(y,"CODE",{});var Z3=u(Dp);Km=p(Z3,"ok"),Z3.forEach(s),Nm=p(y,` 두 개의 변수에 할당하는 것을 확인할 수 있다.
이 때 첫 번째 변수인 `),wp=o(y,"CODE",{});var V3=u(wp);$m=p(V3,"v"),V3.forEach(s),Zm=p(y,"에는 Key에 해당하는 Value가 들어가며, 두 번째 변수인 "),Rp=o(y,"CODE",{});var W3=u(Rp);Vm=p(W3,"ok"),W3.forEach(s),Wm=p(y,"에는 해당 Key가 "),zp=o(y,"CODE",{});var q3=u(zp);qm=p(q3,"m"),q3.forEach(s),Um=p(y,"에 존재하는지 여부가 "),Sp=o(y,"CODE",{});var U3=u(Sp);jm=p(U3,"true"),U3.forEach(s),Fm=p(y," or "),Lp=o(y,"CODE",{});var j3=u(Lp);Im=p(j3,"false"),j3.forEach(s),Jm=p(y,`로 들어간다.
또한 `),Hp=o(y,"CODE",{});var F3=u(Hp);Qm=p(F3,"map"),F3.forEach(s),Xm=p(y,"에서 Key-Value 페어를 지우려면 "),Bp=o(y,"CODE",{});var I3=u(Bp);Ym=p(I3,"delete()"),I3.forEach(s),gm=p(y," 함수를 사용한다."),y.forEach(s),ic=k(n),kc=o(n,"BR",{}),rc=o(n,"BR",{}),fc=k(n),Dn=o(n,"H2",{id:!0});var s2=u(Dn);wn=o(s2,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var J3=u(wn);Mp=o(J3,"SPAN",{class:!0}),u(Mp).forEach(s),J3.forEach(s),hm=p(s2,"struct"),s2.forEach(s),mc=k(n),bc=o(n,"HR",{}),Ec=k(n),A=o(n,"P",{});var nn=u(A);n1=p(nn,"C/C++의 "),Ap=o(nn,"CODE",{});var Q3=u(Ap);s1=p(Q3,"struct"),Q3.forEach(s),a1=p(nn,`와 유사하다. Go가 일반적으로 그런 것처럼, 필드들을 선언할 때 자료형이 필드명의 뒤에 온다.
C/C++의 `),Tp=o(nn,"CODE",{});var X3=u(Tp);t1=p(X3,"typedef"),X3.forEach(s),p1=p(nn," 키워드처럼, "),Gp=o(nn,"CODE",{});var Y3=u(Gp);e1=p(Y3,"type"),Y3.forEach(s),o1=p(nn," 키워드를 통해 "),Kp=o(nn,"CODE",{});var g3=u(Kp);l1=p(g3,"struct"),g3.forEach(s),c1=p(nn," 타입을 정의할 수 있다."),nn.forEach(s),vc=k(n),zs=o(n,"PRE",{class:!0});var Yv=u(zs);Yv.forEach(s),dc=k(n),O=o(n,"P",{});var N=u(O);Np=o(N,"CODE",{});var h3=u(Np);u1=p(h3,"struct"),h3.forEach(s),i1=p(N," 인스턴스를 생성할 때는 "),$p=o(N,"CODE",{});var nE=u($p);k1=p(nE,"struct"),nE.forEach(s),r1=p(N,`를 정의할 때 입력했던 순서대로 각 필드의 값을 중괄호 안에 입력해주면 된다.
특이사항으로는 `),Zp=o(N,"CODE",{});var sE=u(Zp);f1=p(sE,"map"),sE.forEach(s),m1=p(N,"이나 "),Vp=o(N,"CODE",{});var aE=u(Vp);b1=p(aE,"slice"),aE.forEach(s),E1=p(N,"와는 달리, "),Wp=o(N,"CODE",{});var tE=u(Wp);v1=p(tE,"struct"),tE.forEach(s),d1=p(N,"의 Zero value와 비어있는 "),qp=o(N,"CODE",{});var pE=u(qp);_1=p(pE,"struct"),pE.forEach(s),y1=p(N,"가 동일하게 처리된다."),N.forEach(s),_c=k(n),yc=o(n,"BR",{}),Pc=o(n,"BR",{}),xc=k(n),Rn=o(n,"H3",{id:!0});var a2=u(Rn);zn=o(a2,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var eE=u(zn);Up=o(eE,"SPAN",{class:!0}),u(Up).forEach(s),eE.forEach(s),P1=p(a2,"Anonymous Structs"),a2.forEach(s),Cc=k(n),Ss=o(n,"PRE",{class:!0});var gv=u(Ss);gv.forEach(s),Oc=k(n),Sn=o(n,"P",{});var lu=u(Sn);x1=p(lu,"위 코드는 익명 "),jp=o(lu,"CODE",{});var oE=u(jp);C1=p(oE,"struct"),oE.forEach(s),O1=p(lu,` 변수를 선언하고, 또 선언과 동시에 초기화하는 예제이다.
타입 명시와 값 할당이 다른 중괄호 안에서 이루어져야 하는 것만 주의하면 큰 문제 없는 듯.`),lu.forEach(s),Dc=k(n),wc=o(n,"BR",{}),Rc=o(n,"BR",{}),zc=k(n),Ln=o(n,"H3",{id:!0});var t2=u(Ln);Hn=o(t2,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var lE=u(Hn);Fp=o(lE,"SPAN",{class:!0}),u(Fp).forEach(s),lE.forEach(s),D1=p(t2,"Comparing and Converting Structs"),t2.forEach(s),Sc=k(n),Ls=o(n,"PRE",{class:!0});var hv=u(Ls);hv.forEach(s),Lc=k(n),pn=o(n,"P",{});var ae=u(pn);Ip=o(ae,"CODE",{});var cE=u(Ip);w1=p(cE,"struct"),cE.forEach(s),R1=p(ae,"의 필드가 비교 가능한 타입들로 이루어져 있다면, 서로 같은 "),Jp=o(ae,"CODE",{});var uE=u(Jp);z1=p(uE,"struct"),uE.forEach(s),S1=p(ae," 타입끼리는 서로 비교할 수 있다."),ae.forEach(s),Hc=k(n),Bc=o(n,"BR",{}),Mc=k(n),Hs=o(n,"PRE",{class:!0});var nd=u(Hs);nd.forEach(s),Ac=k(n),Bn=o(n,"P",{});var cu=u(Bn);L1=p(cu,"서로 다른 "),Qp=o(cu,"CODE",{});var iE=u(Qp);H1=p(iE,"struct"),iE.forEach(s),B1=p(cu,` 타입끼리는 서로 비교할 수 없다.
단, 필드의 타입과 필드명이 같다면 서로 변환할 수 있다.`),cu.forEach(s),Tc=k(n),Gc=o(n,"BR",{}),Kc=k(n),Bs=o(n,"PRE",{class:!0});var sd=u(Bs);sd.forEach(s),Nc=k(n),na=o(n,"P",{});var kE=u(na);M1=p(kE,"만약 필드의 타입과 필드명이 같아도 선언된 순서가 다르다면 비교 및 변환할 수 없다."),kE.forEach(s),$c=k(n),Zc=o(n,"BR",{}),Vc=k(n),Ms=o(n,"PRE",{class:!0});var ad=u(Ms);ad.forEach(s),Wc=k(n),sa=o(n,"P",{});var rE=u(sa);A1=p(rE,"타입이 같아도 필드명이 다르다면 변환할 수 없으며, 다른 필드가 추가로 존재하면 비교 및 변환할 수 없다."),rE.forEach(s),qc=k(n),Uc=o(n,"BR",{}),jc=k(n),As=o(n,"PRE",{class:!0});var td=u(As);td.forEach(s),Fc=k(n),Mn=o(n,"P",{});var uu=u(Mn);T1=p(uu,"동일한 필드를 가지고 있는 익명 "),Xp=o(uu,"CODE",{});var fE=u(Xp);G1=p(fE,"struct"),fE.forEach(s),K1=p(uu,"에 대해서는 비교가 가능하다."),uu.forEach(s),Ic=k(n),Jc=o(n,"BR",{}),Qc=o(n,"BR",{}),Xc=k(n),An=o(n,"H2",{id:!0});var p2=u(An);Tn=o(p2,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var mE=u(Tn);Yp=o(mE,"SPAN",{class:!0}),u(Yp).forEach(s),mE.forEach(s),N1=p(p2,"References"),p2.forEach(s),Yc=k(n),gc=o(n,"HR",{}),hc=k(n),F=o(n,"CENTER",{});var Gs=u(F);gp=o(Gs,"P",{});var bE=u(gp);$1=p(bE,"["),bE.forEach(s),Z1=k(Gs),vE(Ts.$$.fragment,Gs),V1=p(Gs,`
](https://learning.oreilly.com/library/view/learning-go/9781492077206/) `),W1=o(Gs,"BR",{}),q1=p(Gs,`
[Jon Bodner, 『Learning Go』, O'Reilly Media, Inc.](https://learning.oreilly.com/library/view/learning-go/9781492077206/)`),Gs.forEach(s),nu=k(n),su=o(n,"BR",{}),au=o(n,"BR",{}),this.h()},h(){r(ea,"class","icon icon-link"),r(cn,"aria-hidden","true"),r(cn,"tabindex","-1"),r(cn,"href","#array"),r(ln,"id","array"),r(Vn,"class","language-go"),r(Wn,"class","language-go"),r(qn,"class","language-go"),r(Un,"class","language-go"),r(jn,"class","language-go"),r(Ca,"class","icon icon-link"),r(rn,"aria-hidden","true"),r(rn,"tabindex","-1"),r(rn,"href","#slice"),r(kn,"id","slice"),r(Fn,"class","language-go"),r(In,"class","language-go"),r(Qn,"class","language-go"),r(Ha,"class","icon icon-link"),r(mn,"aria-hidden","true"),r(mn,"tabindex","-1"),r(mn,"href","#appending-elements-into-slices"),r(fn,"id","appending-elements-into-slices"),r(Xn,"class","language-go"),r(Za,"class","icon icon-link"),r(vn,"aria-hidden","true"),r(vn,"tabindex","-1"),r(vn,"href","#slicing-slices"),r(En,"id","slicing-slices"),r(Yn,"class","language-go"),r(gn,"class","language-go"),r(hn,"class","language-go"),r(ns,"class","language-go"),r(ss,"class","language-go"),r(as,"class","language-go"),r(ts,"class","language-go"),r(es,"class","language-go"),r(os,"class","language-go"),r(ls,"class","language-go"),r(cs,"class","language-go"),r(us,"class","language-go"),r(is,"class","language-go"),r(ks,"class","language-go"),r(rs,"class","language-go"),r(qt,"class","icon icon-link"),r(_n,"aria-hidden","true"),r(_n,"tabindex","-1"),r(_n,"href","#copying-slices"),r(dn,"id","copying-slices"),r(fs,"class","language-go"),r(bs,"class","language-go"),r(vs,"class","language-go"),r(ds,"class","language-go"),r(Jt,"class","icon icon-link"),r(Pn,"aria-hidden","true"),r(Pn,"tabindex","-1"),r(Pn,"href","#string"),r(yn,"id","string"),r(_s,"class","language-go"),r(ys,"class","language-go"),r(Ps,"class","language-go"),r(lp,"class","icon icon-link"),r(On,"aria-hidden","true"),r(On,"tabindex","-1"),r(On,"href","#map"),r(Cn,"id","map"),r(xs,"class","language-go"),r(Cs,"class","language-go"),r(Os,"class","language-go"),r(Ds,"class","language-go"),r(ws,"class","language-go"),r(Rs,"class","language-go"),r(Mp,"class","icon icon-link"),r(wn,"aria-hidden","true"),r(wn,"tabindex","-1"),r(wn,"href","#struct"),r(Dn,"id","struct"),r(zs,"class","language-go"),r(Up,"class","icon icon-link"),r(zn,"aria-hidden","true"),r(zn,"tabindex","-1"),r(zn,"href","#anonymous-structs"),r(Rn,"id","anonymous-structs"),r(Ss,"class","language-go"),r(Fp,"class","icon icon-link"),r(Hn,"aria-hidden","true"),r(Hn,"tabindex","-1"),r(Hn,"href","#comparing-and-converting-structs"),r(Ln,"id","comparing-and-converting-structs"),r(Ls,"class","language-go"),r(Hs,"class","language-go"),r(Bs,"class","language-go"),r(Ms,"class","language-go"),r(As,"class","language-go"),r(Yp,"class","icon icon-link"),r(Tn,"aria-hidden","true"),r(Tn,"tabindex","-1"),r(Tn,"href","#references"),r(An,"id","references")},m(n,l){c(n,Ks,l),c(n,te,l),c(n,Ns,l),a(Ns,iu),c(n,pe,l),c(n,ee,l),c(n,oe,l),c(n,le,l),c(n,ln,l),a(ln,cn),a(cn,ea),a(ln,ku),c(n,ce,l),c(n,ue,l),c(n,ie,l),c(n,Zn,l),a(Zn,oa),a(oa,ru),a(Zn,fu),c(n,ke,l),c(n,Vn,l),Vn.innerHTML=OE,c(n,re,l),c(n,L,l),a(L,mu),a(L,la),a(la,bu),a(L,Eu),a(L,ca),a(ca,vu),a(L,du),a(L,ua),a(ua,_u),a(L,yu),a(L,ia),a(ia,Pu),a(L,xu),c(n,fe,l),c(n,me,l),c(n,be,l),c(n,$s,l),a($s,Cu),c(n,Ee,l),c(n,Wn,l),Wn.innerHTML=DE,c(n,ve,l),c(n,E,l),a(E,Ou),a(E,ka),a(ka,Du),a(E,wu),a(E,ra),a(ra,Ru),a(E,zu),a(E,fa),a(fa,Su),a(E,Lu),a(E,ma),a(ma,Hu),a(E,Bu),a(E,ba),a(ba,Mu),a(E,Au),a(E,Tu),a(E,Gu),a(E,Ea),a(Ea,Ku),a(E,Nu),a(E,va),a(va,$u),a(E,Zu),a(E,da),a(da,Vu),a(E,Wu),a(E,_a),a(_a,qu),a(E,Uu),c(n,de,l),c(n,_e,l),c(n,ye,l),c(n,un,l),a(un,ju),a(un,ya),a(ya,Fu),a(un,Iu),c(n,Pe,l),c(n,qn,l),qn.innerHTML=wE,c(n,xe,l),c(n,Ce,l),c(n,Oe,l),c(n,Zs,l),a(Zs,Ju),c(n,De,l),c(n,Un,l),Un.innerHTML=RE,c(n,we,l),c(n,Re,l),c(n,ze,l),c(n,I,l),a(I,Qu),a(I,Pa),a(Pa,Xu),a(I,Yu),a(I,xa),a(xa,gu),a(I,hu),c(n,Se,l),c(n,jn,l),jn.innerHTML=zE,c(n,Le,l),c(n,He,l),c(n,Be,l),c(n,Me,l),c(n,kn,l),a(kn,rn),a(rn,Ca),a(kn,ni),c(n,Ae,l),c(n,Te,l),c(n,Ge,l),c(n,sn,l),a(sn,Oa),a(Oa,si),a(sn,ai),a(sn,ti),a(sn,pi),c(n,Ke,l),c(n,Fn,l),Fn.innerHTML=SE,c(n,Ne,l),c(n,$e,l),c(n,Ze,l),c(n,Vs,l),a(Vs,ei),c(n,Ve,l),c(n,D,l),a(D,oi),a(D,Da),a(Da,li),a(D,ci),a(D,wa),a(wa,ui),a(D,ii),a(D,Ra),a(Ra,ki),a(D,ri),a(D,za),a(za,fi),a(D,mi),a(D,Sa),a(Sa,bi),a(D,Ei),c(n,We,l),c(n,In,l),In.innerHTML=LE,c(n,qe,l),c(n,Ws,l),a(Ws,vi),c(n,Ue,l),c(n,je,l),c(n,Fe,l),c(n,Jn,l),a(Jn,La),a(La,di),a(Jn,_i),c(n,Ie,l),c(n,Qn,l),Qn.innerHTML=HE,c(n,Je,l),c(n,Qe,l),c(n,Xe,l),c(n,Ye,l),c(n,fn,l),a(fn,mn),a(mn,Ha),a(fn,yi),c(n,ge,l),c(n,he,l),c(n,no,l),c(n,$,l),a($,Pi),a($,Ba),a(Ba,xi),a($,Ci),a($,Oi),a($,Di),a($,Ma),a(Ma,wi),a($,Ri),c(n,so,l),c(n,bn,l),a(bn,zi),a(bn,Aa),a(Aa,Si),a(bn,Li),c(n,ao,l),c(n,Xn,l),Xn.innerHTML=BE,c(n,to,l),c(n,w,l),a(w,Hi),a(w,Ta),a(Ta,Bi),a(w,Mi),a(w,Ga),a(Ga,Ai),a(w,Ti),a(w,Ka),a(Ka,Gi),a(w,Ki),a(w,Na),a(Na,Ni),a(w,$i),a(w,$a),a($a,Zi),a(w,Vi),c(n,po,l),c(n,eo,l),c(n,oo,l),c(n,lo,l),c(n,En,l),a(En,vn),a(vn,Za),a(En,Wi),c(n,co,l),c(n,uo,l),c(n,io,l),c(n,J,l),a(J,qi),a(J,Va),a(Va,Ui),a(J,ji),a(J,Wa),a(Wa,Fi),a(J,Ii),c(n,ko,l),c(n,Yn,l),Yn.innerHTML=ME,c(n,ro,l),c(n,P,l),a(P,Ji),a(P,qa),a(qa,Qi),a(P,Xi),a(P,Ua),a(Ua,Yi),a(P,gi),a(P,ja),a(ja,hi),a(P,nk),a(P,Fa),a(Fa,sk),a(P,ak),a(P,Ia),a(Ia,tk),a(P,pk),a(P,Ja),a(Ja,ek),a(P,ok),a(P,Qa),a(Qa,lk),a(P,ck),c(n,fo,l),c(n,gn,l),gn.innerHTML=AE,c(n,mo,l),c(n,bo,l),c(n,Eo,l),c(n,qs,l),a(qs,uk),c(n,vo,l),c(n,hn,l),hn.innerHTML=TE,c(n,_o,l),c(n,yo,l),c(n,Po,l),c(n,R,l),a(R,ik),a(R,Xa),a(Xa,kk),a(R,rk),a(R,Ya),a(Ya,fk),a(R,mk),a(R,ga),a(ga,bk),a(R,Ek),a(R,ha),a(ha,vk),a(R,dk),a(R,nt),a(nt,_k),a(R,yk),c(n,xo,l),c(n,ns,l),ns.innerHTML=GE,c(n,Co,l),c(n,Us,l),a(Us,Pk),c(n,Oo,l),c(n,ss,l),ss.innerHTML=KE,c(n,Do,l),c(n,b,l),a(b,st),a(st,xk),a(b,Ck),a(b,at),a(at,Ok),a(b,Dk),a(b,tt),a(tt,wk),a(b,Rk),a(b,pt),a(pt,zk),a(b,Sk),a(b,et),a(et,Lk),a(b,Hk),a(b,ot),a(ot,Bk),a(b,Mk),a(b,lt),a(lt,Ak),a(b,Tk),a(b,ct),a(ct,Gk),a(b,Kk),a(b,ut),a(ut,Nk),a(b,$k),a(b,it),a(it,Zk),a(b,Vk),a(b,kt),a(kt,Wk),a(b,qk),c(n,wo,l),c(n,Ro,l),c(n,zo,l),c(n,js,l),a(js,Uk),c(n,So,l),c(n,as,l),as.innerHTML=NE,c(n,Lo,l),c(n,Fs,l),a(Fs,jk),c(n,Ho,l),c(n,ts,l),ts.innerHTML=$E,c(n,Bo,l),c(n,Mo,l),c(n,Ao,l),c(n,Is,l),dE(ps,Is,null),c(n,To,l),c(n,Go,l),c(n,Ko,l),c(n,Js,l),a(Js,Fk),c(n,No,l),c(n,es,l),es.innerHTML=ZE,c(n,$o,l),c(n,Z,l),a(Z,Ik),a(Z,rt),a(rt,Jk),a(Z,Qk),a(Z,ft),a(ft,Xk),a(Z,Yk),a(Z,mt),a(mt,gk),a(Z,hk),c(n,Zo,l),c(n,os,l),os.innerHTML=VE,c(n,Vo,l),c(n,H,l),a(H,nr),a(H,bt),a(bt,sr),a(H,ar),a(H,Et),a(Et,tr),a(H,pr),a(H,vt),a(vt,er),a(H,or),a(H,dt),a(dt,lr),a(H,cr),c(n,Wo,l),c(n,ls,l),ls.innerHTML=WE,c(n,qo,l),c(n,Uo,l),c(n,jo,l),c(n,f,l),a(f,_t),a(_t,ur),a(f,ir),a(f,yt),a(yt,kr),a(f,rr),a(f,Pt),a(Pt,fr),a(f,mr),a(f,xt),a(xt,br),a(f,Er),a(f,Ct),a(Ct,vr),a(f,dr),a(f,Ot),a(Ot,_r),a(f,yr),a(f,Dt),a(Dt,Pr),a(f,xr),a(f,wt),a(wt,Cr),a(f,Or),a(f,Rt),a(Rt,Dr),a(f,wr),a(f,zt),a(zt,Rr),a(f,zr),a(f,St),a(St,Sr),a(f,Lr),a(f,Lt),a(Lt,Hr),a(f,Br),a(f,Mr),a(f,Ar),a(f,Ht),a(Ht,Tr),a(f,Gr),c(n,Fo,l),c(n,cs,l),cs.innerHTML=qE,c(n,Io,l),c(n,T,l),a(T,Bt),a(Bt,Kr),a(T,Nr),a(T,Mt),a(Mt,$r),a(T,Zr),a(T,Vr),a(T,Wr),a(T,At),a(At,qr),a(T,Ur),c(n,Jo,l),c(n,us,l),us.innerHTML=UE,c(n,Qo,l),c(n,G,l),a(G,Tt),a(Tt,jr),a(G,Fr),a(G,Gt),a(Gt,Ir),a(G,Jr),a(G,Kt),a(Kt,Qr),a(G,Xr),a(G,Nt),a(Nt,Yr),a(G,gr),c(n,Xo,l),c(n,Yo,l),c(n,go,l),c(n,B,l),a(B,hr),a(B,$t),a($t,nf),a(B,sf),a(B,Zt),a(Zt,af),a(B,tf),a(B,Vt),a(Vt,pf),a(B,ef),a(B,Wt),a(Wt,of),a(B,lf),c(n,ho,l),c(n,is,l),is.innerHTML=jE,c(n,nl,l),c(n,Qs,l),a(Qs,cf),c(n,sl,l),c(n,ks,l),ks.innerHTML=FE,c(n,al,l),c(n,tl,l),c(n,pl,l),c(n,Xs,l),a(Xs,uf),c(n,el,l),c(n,rs,l),rs.innerHTML=IE,c(n,ol,l),c(n,ll,l),c(n,cl,l),c(n,ul,l),c(n,dn,l),a(dn,_n),a(_n,qt),a(dn,kf),c(n,il,l),c(n,kl,l),c(n,rl,l),c(n,Q,l),a(Q,rf),a(Q,Ut),a(Ut,ff),a(Q,mf),a(Q,jt),a(jt,bf),a(Q,Ef),c(n,fl,l),c(n,fs,l),fs.innerHTML=JE,c(n,ml,l),c(n,bl,l),c(n,El,l),c(n,ms,l),a(ms,Ft),a(Ft,vf),a(ms,df),c(n,vl,l),c(n,bs,l),bs.innerHTML=QE,c(n,dl,l),c(n,_l,l),c(n,yl,l),c(n,Es,l),a(Es,It),a(It,_f),a(Es,yf),c(n,Pl,l),c(n,vs,l),vs.innerHTML=XE,c(n,xl,l),c(n,Ys,l),a(Ys,Pf),c(n,Cl,l),c(n,ds,l),ds.innerHTML=YE,c(n,Ol,l),c(n,Dl,l),c(n,wl,l),c(n,Rl,l),c(n,yn,l),a(yn,Pn),a(Pn,Jt),a(yn,xf),c(n,zl,l),c(n,Sl,l),c(n,Ll,l),c(n,an,l),a(an,Qt),a(Qt,Cf),a(an,Of),a(an,Xt),a(Xt,Df),a(an,wf),c(n,Hl,l),c(n,_s,l),_s.innerHTML=gE,c(n,Bl,l),c(n,xn,l),a(xn,Rf),a(xn,Yt),a(Yt,zf),a(xn,Sf),c(n,Ml,l),c(n,ys,l),ys.innerHTML=hE,c(n,Al,l),c(n,C,l),a(C,gt),a(gt,Lf),a(C,Hf),a(C,ht),a(ht,Bf),a(C,Mf),a(C,np),a(np,Af),a(C,Tf),a(C,sp),a(sp,Gf),a(C,Kf),a(C,ap),a(ap,Nf),a(C,$f),a(C,tp),a(tp,Zf),a(C,Vf),c(n,Tl,l),c(n,Ps,l),Ps.innerHTML=nv,c(n,Gl,l),c(n,V,l),a(V,Wf),a(V,pp),a(pp,qf),a(V,Uf),a(V,ep),a(ep,jf),a(V,Ff),a(V,op),a(op,If),a(V,Jf),c(n,Kl,l),c(n,Nl,l),c(n,$l,l),c(n,Zl,l),c(n,Cn,l),a(Cn,On),a(On,lp),a(Cn,Qf),c(n,Vl,l),c(n,Wl,l),c(n,ql,l),c(n,x,l),a(x,cp),a(cp,Xf),a(x,Yf),a(x,up),a(up,gf),a(x,hf),a(x,nm),a(x,sm),a(x,ip),a(ip,am),a(x,tm),a(x,kp),a(kp,pm),a(x,em),a(x,rp),a(rp,om),a(x,lm),a(x,fp),a(fp,cm),a(x,um),c(n,Ul,l),c(n,xs,l),xs.innerHTML=sv,c(n,jl,l),c(n,Fl,l),c(n,Il,l),c(n,M,l),a(M,im),a(M,mp),a(mp,km),a(M,rm),a(M,bp),a(bp,fm),a(M,mm),a(M,Ep),a(Ep,bm),a(M,Em),a(M,vp),a(vp,vm),a(M,dm),c(n,Jl,l),c(n,Cs,l),Cs.innerHTML=av,c(n,Ql,l),c(n,Xl,l),c(n,Yl,l),c(n,tn,l),a(tn,dp),a(dp,_m),a(tn,ym),a(tn,_p),a(_p,Pm),a(tn,xm),c(n,gl,l),c(n,Os,l),Os.innerHTML=tv,c(n,hl,l),c(n,nc,l),c(n,sc,l),c(n,gs,l),a(gs,Cm),c(n,ac,l),c(n,Ds,l),Ds.innerHTML=pv,c(n,tc,l),c(n,pc,l),c(n,ec,l),c(n,hs,l),a(hs,Om),c(n,oc,l),c(n,ws,l),ws.innerHTML=ev,c(n,lc,l),c(n,W,l),a(W,Dm),a(W,yp),a(yp,wm),a(W,Rm),a(W,Pp),a(Pp,zm),a(W,Sm),a(W,xp),a(xp,Lm),a(W,Hm),c(n,cc,l),c(n,Rs,l),Rs.innerHTML=ov,c(n,uc,l),c(n,v,l),a(v,Bm),a(v,Cp),a(Cp,Mm),a(v,Am),a(v,Op),a(Op,Tm),a(v,Gm),a(v,Dp),a(Dp,Km),a(v,Nm),a(v,wp),a(wp,$m),a(v,Zm),a(v,Rp),a(Rp,Vm),a(v,Wm),a(v,zp),a(zp,qm),a(v,Um),a(v,Sp),a(Sp,jm),a(v,Fm),a(v,Lp),a(Lp,Im),a(v,Jm),a(v,Hp),a(Hp,Qm),a(v,Xm),a(v,Bp),a(Bp,Ym),a(v,gm),c(n,ic,l),c(n,kc,l),c(n,rc,l),c(n,fc,l),c(n,Dn,l),a(Dn,wn),a(wn,Mp),a(Dn,hm),c(n,mc,l),c(n,bc,l),c(n,Ec,l),c(n,A,l),a(A,n1),a(A,Ap),a(Ap,s1),a(A,a1),a(A,Tp),a(Tp,t1),a(A,p1),a(A,Gp),a(Gp,e1),a(A,o1),a(A,Kp),a(Kp,l1),a(A,c1),c(n,vc,l),c(n,zs,l),zs.innerHTML=lv,c(n,dc,l),c(n,O,l),a(O,Np),a(Np,u1),a(O,i1),a(O,$p),a($p,k1),a(O,r1),a(O,Zp),a(Zp,f1),a(O,m1),a(O,Vp),a(Vp,b1),a(O,E1),a(O,Wp),a(Wp,v1),a(O,d1),a(O,qp),a(qp,_1),a(O,y1),c(n,_c,l),c(n,yc,l),c(n,Pc,l),c(n,xc,l),c(n,Rn,l),a(Rn,zn),a(zn,Up),a(Rn,P1),c(n,Cc,l),c(n,Ss,l),Ss.innerHTML=cv,c(n,Oc,l),c(n,Sn,l),a(Sn,x1),a(Sn,jp),a(jp,C1),a(Sn,O1),c(n,Dc,l),c(n,wc,l),c(n,Rc,l),c(n,zc,l),c(n,Ln,l),a(Ln,Hn),a(Hn,Fp),a(Ln,D1),c(n,Sc,l),c(n,Ls,l),Ls.innerHTML=uv,c(n,Lc,l),c(n,pn,l),a(pn,Ip),a(Ip,w1),a(pn,R1),a(pn,Jp),a(Jp,z1),a(pn,S1),c(n,Hc,l),c(n,Bc,l),c(n,Mc,l),c(n,Hs,l),Hs.innerHTML=iv,c(n,Ac,l),c(n,Bn,l),a(Bn,L1),a(Bn,Qp),a(Qp,H1),a(Bn,B1),c(n,Tc,l),c(n,Gc,l),c(n,Kc,l),c(n,Bs,l),Bs.innerHTML=kv,c(n,Nc,l),c(n,na,l),a(na,M1),c(n,$c,l),c(n,Zc,l),c(n,Vc,l),c(n,Ms,l),Ms.innerHTML=rv,c(n,Wc,l),c(n,sa,l),a(sa,A1),c(n,qc,l),c(n,Uc,l),c(n,jc,l),c(n,As,l),As.innerHTML=fv,c(n,Fc,l),c(n,Mn,l),a(Mn,T1),a(Mn,Xp),a(Xp,G1),a(Mn,K1),c(n,Ic,l),c(n,Jc,l),c(n,Qc,l),c(n,Xc,l),c(n,An,l),a(An,Tn),a(Tn,Yp),a(An,N1),c(n,Yc,l),c(n,gc,l),c(n,hc,l),c(n,F,l),a(F,gp),a(gp,$1),a(F,Z1),dE(Ts,F,null),a(F,V1),a(F,W1),a(F,q1),c(n,nu,l),c(n,su,l),c(n,au,l),tu=!0},p:ld,i(n){tu||(_E(ps.$$.fragment,n),_E(Ts.$$.fragment,n),tu=!0)},o(n){yE(ps.$$.fragment,n),yE(Ts.$$.fragment,n),tu=!1},d(n){n&&s(Ks),n&&s(te),n&&s(Ns),n&&s(pe),n&&s(ee),n&&s(oe),n&&s(le),n&&s(ln),n&&s(ce),n&&s(ue),n&&s(ie),n&&s(Zn),n&&s(ke),n&&s(Vn),n&&s(re),n&&s(L),n&&s(fe),n&&s(me),n&&s(be),n&&s($s),n&&s(Ee),n&&s(Wn),n&&s(ve),n&&s(E),n&&s(de),n&&s(_e),n&&s(ye),n&&s(un),n&&s(Pe),n&&s(qn),n&&s(xe),n&&s(Ce),n&&s(Oe),n&&s(Zs),n&&s(De),n&&s(Un),n&&s(we),n&&s(Re),n&&s(ze),n&&s(I),n&&s(Se),n&&s(jn),n&&s(Le),n&&s(He),n&&s(Be),n&&s(Me),n&&s(kn),n&&s(Ae),n&&s(Te),n&&s(Ge),n&&s(sn),n&&s(Ke),n&&s(Fn),n&&s(Ne),n&&s($e),n&&s(Ze),n&&s(Vs),n&&s(Ve),n&&s(D),n&&s(We),n&&s(In),n&&s(qe),n&&s(Ws),n&&s(Ue),n&&s(je),n&&s(Fe),n&&s(Jn),n&&s(Ie),n&&s(Qn),n&&s(Je),n&&s(Qe),n&&s(Xe),n&&s(Ye),n&&s(fn),n&&s(ge),n&&s(he),n&&s(no),n&&s($),n&&s(so),n&&s(bn),n&&s(ao),n&&s(Xn),n&&s(to),n&&s(w),n&&s(po),n&&s(eo),n&&s(oo),n&&s(lo),n&&s(En),n&&s(co),n&&s(uo),n&&s(io),n&&s(J),n&&s(ko),n&&s(Yn),n&&s(ro),n&&s(P),n&&s(fo),n&&s(gn),n&&s(mo),n&&s(bo),n&&s(Eo),n&&s(qs),n&&s(vo),n&&s(hn),n&&s(_o),n&&s(yo),n&&s(Po),n&&s(R),n&&s(xo),n&&s(ns),n&&s(Co),n&&s(Us),n&&s(Oo),n&&s(ss),n&&s(Do),n&&s(b),n&&s(wo),n&&s(Ro),n&&s(zo),n&&s(js),n&&s(So),n&&s(as),n&&s(Lo),n&&s(Fs),n&&s(Ho),n&&s(ts),n&&s(Bo),n&&s(Mo),n&&s(Ao),n&&s(Is),PE(ps),n&&s(To),n&&s(Go),n&&s(Ko),n&&s(Js),n&&s(No),n&&s(es),n&&s($o),n&&s(Z),n&&s(Zo),n&&s(os),n&&s(Vo),n&&s(H),n&&s(Wo),n&&s(ls),n&&s(qo),n&&s(Uo),n&&s(jo),n&&s(f),n&&s(Fo),n&&s(cs),n&&s(Io),n&&s(T),n&&s(Jo),n&&s(us),n&&s(Qo),n&&s(G),n&&s(Xo),n&&s(Yo),n&&s(go),n&&s(B),n&&s(ho),n&&s(is),n&&s(nl),n&&s(Qs),n&&s(sl),n&&s(ks),n&&s(al),n&&s(tl),n&&s(pl),n&&s(Xs),n&&s(el),n&&s(rs),n&&s(ol),n&&s(ll),n&&s(cl),n&&s(ul),n&&s(dn),n&&s(il),n&&s(kl),n&&s(rl),n&&s(Q),n&&s(fl),n&&s(fs),n&&s(ml),n&&s(bl),n&&s(El),n&&s(ms),n&&s(vl),n&&s(bs),n&&s(dl),n&&s(_l),n&&s(yl),n&&s(Es),n&&s(Pl),n&&s(vs),n&&s(xl),n&&s(Ys),n&&s(Cl),n&&s(ds),n&&s(Ol),n&&s(Dl),n&&s(wl),n&&s(Rl),n&&s(yn),n&&s(zl),n&&s(Sl),n&&s(Ll),n&&s(an),n&&s(Hl),n&&s(_s),n&&s(Bl),n&&s(xn),n&&s(Ml),n&&s(ys),n&&s(Al),n&&s(C),n&&s(Tl),n&&s(Ps),n&&s(Gl),n&&s(V),n&&s(Kl),n&&s(Nl),n&&s($l),n&&s(Zl),n&&s(Cn),n&&s(Vl),n&&s(Wl),n&&s(ql),n&&s(x),n&&s(Ul),n&&s(xs),n&&s(jl),n&&s(Fl),n&&s(Il),n&&s(M),n&&s(Jl),n&&s(Cs),n&&s(Ql),n&&s(Xl),n&&s(Yl),n&&s(tn),n&&s(gl),n&&s(Os),n&&s(hl),n&&s(nc),n&&s(sc),n&&s(gs),n&&s(ac),n&&s(Ds),n&&s(tc),n&&s(pc),n&&s(ec),n&&s(hs),n&&s(oc),n&&s(ws),n&&s(lc),n&&s(W),n&&s(cc),n&&s(Rs),n&&s(uc),n&&s(v),n&&s(ic),n&&s(kc),n&&s(rc),n&&s(fc),n&&s(Dn),n&&s(mc),n&&s(bc),n&&s(Ec),n&&s(A),n&&s(vc),n&&s(zs),n&&s(dc),n&&s(O),n&&s(_c),n&&s(yc),n&&s(Pc),n&&s(xc),n&&s(Rn),n&&s(Cc),n&&s(Ss),n&&s(Oc),n&&s(Sn),n&&s(Dc),n&&s(wc),n&&s(Rc),n&&s(zc),n&&s(Ln),n&&s(Sc),n&&s(Ls),n&&s(Lc),n&&s(pn),n&&s(Hc),n&&s(Bc),n&&s(Mc),n&&s(Hs),n&&s(Ac),n&&s(Bn),n&&s(Tc),n&&s(Gc),n&&s(Kc),n&&s(Bs),n&&s(Nc),n&&s(na),n&&s($c),n&&s(Zc),n&&s(Vc),n&&s(Ms),n&&s(Wc),n&&s(sa),n&&s(qc),n&&s(Uc),n&&s(jc),n&&s(As),n&&s(Fc),n&&s(Mn),n&&s(Ic),n&&s(Jc),n&&s(Qc),n&&s(Xc),n&&s(An),n&&s(Yc),n&&s(gc),n&&s(hc),n&&s(F),PE(Ts),n&&s(nu),n&&s(su),n&&s(au)}}}const kd={title:"복합 타입",date:"2022-07-23T00:00:00.000Z",excerpt:"Composite Types",categories:["Golang","Basic Golang"],coverImage:"/post_img/Go/Golang_basics/cover.png",coverWidth:16,coverHeight:9,indexed:!1,exposed:!0};class rd extends pd{constructor(Ks){super(),ed(this,Ks,null,cd,od,{})}}export{rd as default,kd as metadata};
