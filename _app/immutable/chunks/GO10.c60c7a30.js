import{S as PM,i as RM,s as xM,k as o,a as r,q as t,y as GM,l as p,c as i,m as l,r as e,h as a,z as TM,n as k,b as u,E as s,A as BM,M as AM,g as MM,d as HM,B as LM}from"./index.d78780bf.js";import{I as SM}from"./Image.605b14b5.js";function hM(nA){let $t,Mi,Kt,b3,Hi,Li,Si,hi,ds,Es,ao,w3,Wi,Ii,Ui,Yt,y3,Ni,Jt,C3,qi,vs,m3,to,O3,D3,Fi,Zi,$i,Ki,_s,bs,eo,P3,Yi,Ji,Vi,ws,R3,oo,x3,G3,zi,Vt,T3,Qi,zt,B3,ji,Qt,A3,Xi,gi,nk,sk,ys,Cs,po,M3,ak,tk,ek,X,H3,lo,L3,S3,co,h3,W3,uo,I3,U3,ro,N3,q3,ok,jt,F3,pk,lk,ck,Ua,io,Z3,$3,uk,Xt,K3,rk,g,ko,Y3,J3,fo,V3,z3,Eo,Q3,j3,vo,X3,g3,_o,nv,ik,gt,sv,kk,fk,dk,ms,av,bo,tv,ev,Ek,Na,wo,ov,pv,vk,ne,lv,_k,qa,sA=`<code class="language-go"><span class="token keyword">func</span> <span class="token function">process</span><span class="token punctuation">(</span>val <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// do something with val</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">runThingConcurrently</span><span class="token punctuation">(</span>in <span class="token operator">&lt;-</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">,</span> out <span class="token keyword">chan</span><span class="token operator">&lt;-</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">for</span> val <span class="token operator">:=</span> <span class="token keyword">range</span> in <span class="token punctuation">&#123;</span>
            result <span class="token operator">:=</span> <span class="token function">process</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span>
            out <span class="token operator">&lt;-</span> result
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code>`,bk,wk,yk,Ck,Os,Ds,yo,cv,mk,Ok,Dk,Fn,uv,Co,rv,iv,mo,kv,fv,Pk,Fa,aA='<code class="language-go">ch <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span></code>',Rk,Ps,dv,Oo,Ev,vv,xk,Gk,Tk,Bk,Rs,xs,Do,_v,Ak,Sn,Po,bv,wv,Ro,yv,Cv,xo,mv,Ov,Mk,Za,tA=`<code class="language-go">a <span class="token operator">:=</span> <span class="token operator">&lt;-</span>ch
ch <span class="token operator">&lt;-</span> b</code>`,Hk,se,Dv,Lk,v,Pv,Go,Rv,xv,To,Gv,Tv,Bo,Bv,Av,Ao,Mv,Hv,Mo,Lv,Sv,Ho,hv,Wv,Lo,Iv,Uv,So,Nv,qv,Sk,hk,Wk,ae,Fv,Ik,te,Zv,Uk,ee,$v,Nk,$a,eA='<code class="language-go">ch <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span></code>',qk,nn,Kv,ho,Yv,Jv,Wo,Vv,zv,Io,Qv,jv,Uo,Xv,gv,Fk,oe,ps,n5,No,s5,a5,qo,t5,e5,Zk,pe,o5,$k,Kk,Yk,Jk,Gs,Ts,Fo,p5,Vk,Ka,Zo,l5,c5,zk,Ya,oA=`<code class="language-go"><span class="token keyword">for</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> ch <span class="token punctuation">&#123;</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code>`,Qk,sn,u5,$o,r5,i5,Ko,k5,f5,Yo,d5,E5,Jo,v5,_5,jk,Xk,gk,nf,Bs,As,Vo,b5,sf,Ms,w5,zo,y5,C5,af,Ja,pA='<code class="language-go"><span class="token function">close</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span></code>',tf,ef,of,pf,le,m5,lf,Hs,O5,Qo,D5,P5,cf,Va,lA='<code class="language-go">v<span class="token punctuation">,</span> ok <span class="token operator">:=</span> <span class="token operator">&lt;-</span>ch</code>',uf,un,R5,jo,x5,G5,Xo,T5,B5,go,A5,M5,rf,kf,ff,df,Ls,Ss,np,H5,Ef,ce,L5,vf,hs,sp,K,_f,S5,ap,h5,W5,tp,I5,U5,ep,N5,q5,op,F5,Z5,pp,$5,K5,ls,Y,lp,Y5,J5,za,V5,z5,Q5,j5,cp,X5,g5,up,n_,s_,Qa,a_,t_,e_,o_,rp,p_,l_,J,ip,c_,u_,ja,r_,i_,k_,f_,kp,fp,d_,E_,dp,v_,__,Ep,vp,b_,w_,_p,y_,C_,V,bp,m_,O_,wp,D_,P_,yp,Cp,R_,x_,mp,G_,T_,Op,Dp,B_,A_,Pp,Rp,M_,bf,Ws,H_,xp,L_,S_,wf,Xa,Gp,h_,W_,yf,Cf,mf,Of,Is,Us,Tp,I_,Df,Pf,Rf,rn,U_,Bp,N_,q_,Ap,F_,Z_,Mp,$_,K_,xf,cs,Hp,Y_,J_,Lp,V_,z_,Gf,ga,cA=`<code class="language-go"><span class="token keyword">select</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">case</span> v <span class="token operator">:=</span> <span class="token operator">&lt;-</span>ch<span class="token punctuation">:</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span>
<span class="token keyword">case</span> v <span class="token operator">:=</span> <span class="token operator">&lt;-</span>ch2<span class="token punctuation">:</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span>
<span class="token keyword">case</span> ch3 <span class="token operator">&lt;-</span> x<span class="token punctuation">:</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"wrote"</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span>
<span class="token keyword">case</span> <span class="token operator">&lt;-</span>ch4<span class="token punctuation">:</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"got value on ch4, but ignored it"</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code>`,Tf,hn,Sp,Q_,j_,hp,X_,g_,Wp,n4,s4,Bf,Af,Mf,f,a4,Ip,t4,e4,Up,o4,p4,Np,l4,c4,qp,u4,r4,Fp,i4,k4,Zp,f4,d4,$p,E4,v4,Kp,_4,b4,Yp,w4,y4,Jp,C4,m4,Vp,O4,D4,zp,P4,R4,Hf,Ns,x4,Qp,G4,T4,Lf,nt,uA=`<code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    ch1 <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span>
    ch2 <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span>
    <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        v <span class="token operator">:=</span> <span class="token number">1</span>
        ch1 <span class="token operator">&lt;-</span> v
        v2 <span class="token operator">:=</span> <span class="token operator">&lt;-</span>ch2
        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> v2<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    v <span class="token operator">:=</span> <span class="token number">2</span>
    ch2 <span class="token operator">&lt;-</span> v
    v2 <span class="token operator">:=</span> <span class="token operator">&lt;-</span>ch1
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> v2<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code>`,Sf,ue,B4,hf,st,rA='<code class="language-bash">fatal error: all goroutines are asleep - deadlock<span class="token operator">!</span></code>',Wf,Wn,jp,A4,M4,Xp,H4,L4,gp,S4,h4,If,Uf,Nf,qs,W4,nl,I4,U4,qf,at,iA=`<code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	ch1 <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span>
	ch2 <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span>

	<span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		v <span class="token operator">:=</span> <span class="token number">1</span>
		ch1 <span class="token operator">&lt;-</span> v
		v2 <span class="token operator">:=</span> <span class="token operator">&lt;-</span>ch2
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> v2<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	v <span class="token operator">:=</span> <span class="token number">2</span>
	<span class="token keyword">var</span> v2 <span class="token builtin">int</span>
	<span class="token keyword">select</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">case</span> ch2 <span class="token operator">&lt;-</span> v<span class="token punctuation">:</span>
	<span class="token keyword">case</span> v2 <span class="token operator">=</span> <span class="token operator">&lt;-</span>ch1<span class="token punctuation">:</span>
	<span class="token punctuation">&#125;</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> v2<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code>`,Ff,A,N4,sl,q4,F4,al,Z4,$4,tl,K4,Y4,el,J4,V4,ol,z4,Q4,Zf,$f,Kf,us,pl,j4,X4,ll,g4,n0,Yf,tt,kA=`<code class="language-go"><span class="token keyword">for</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">select</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">case</span> <span class="token operator">&lt;-</span>done<span class="token punctuation">:</span>
        <span class="token keyword">return</span>
        <span class="token keyword">case</span> v <span class="token operator">:=</span> <span class="token operator">&lt;-</span>ch<span class="token punctuation">:</span>
            fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,Jf,Zn,s0,cl,a0,t0,ul,e0,o0,Vf,zf,Qf,D,rl,p0,l0,il,c0,u0,kl,r0,i0,fl,k0,f0,dl,d0,E0,El,v0,_0,vl,b0,w0,jf,et,fA=`<code class="language-go">	<span class="token keyword">select</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">case</span> v <span class="token operator">:=</span> <span class="token operator">&lt;-</span>ch<span class="token punctuation">:</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"read from ch:"</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span>
	<span class="token keyword">default</span><span class="token punctuation">:</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"no value written to ch"</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span></code>`,Xf,$n,y0,_l,C0,m0,bl,O0,D0,gf,n1,s1,In,wl,P0,R0,yl,x0,G0,Cl,T0,B0,a1,t1,e1,o1,Fs,Zs,ml,A0,p1,l1,c1,$s,Ks,Ol,M0,u1,re,H0,r1,Ys,L0,Dl,S0,h0,i1,ie,W0,k1,ke,I0,f1,d1,E1,v1,Js,Vs,Pl,U0,_1,zs,N0,Rl,q0,F0,b1,ot,dA=`<code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	a <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">&#125;</span>
	ch <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> a <span class="token punctuation">&#123;</span>
		<span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			ch <span class="token operator">&lt;-</span> v <span class="token operator">*</span> <span class="token number">2</span>
		<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token operator">&lt;-</span>ch<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,w1,kn,Z0,xl,$0,K0,Gl,Y0,J0,Tl,V0,z0,y1,pt,EA=`<code class="language-bash"><span class="token number">20</span>
<span class="token number">20</span>
<span class="token number">20</span>
<span class="token number">20</span>
<span class="token number">20</span></code>`,C1,fn,Q0,Bl,j0,X0,Al,g0,n6,Ml,s6,a6,m1,Qs,t6,Hl,e6,o6,O1,lt,vA=`<code class="language-go">ch2 <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> a <span class="token punctuation">&#123;</span>
    v <span class="token operator">:=</span> v
    <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        ch2 <span class="token operator">&lt;-</span> v <span class="token operator">*</span> <span class="token number">2</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token operator">&lt;-</span>ch2<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code>`,D1,fe,p6,P1,ct,_A=`<code class="language-go">ch3 <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> a <span class="token punctuation">&#123;</span>
    <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span>val <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        ch3 <span class="token operator">&lt;-</span> val <span class="token operator">*</span> <span class="token number">2</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code>`,R1,de,l6,x1,ut,bA=`<code class="language-bash"><span class="token number">20</span>
<span class="token number">4</span>
<span class="token number">12</span>
<span class="token number">8</span>
<span class="token number">16</span></code>`,G1,T1,B1,A1,js,Xs,Ll,c6,M1,gs,u6,Sl,r6,i6,H1,Ee,k6,L1,rt,wA=`<code class="language-go"><span class="token keyword">func</span> <span class="token function">countTo</span><span class="token punctuation">(</span>max <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">&lt;-</span><span class="token keyword">chan</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span>
	ch <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span>
	<span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> max<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>
			ch <span class="token operator">&lt;-</span> i
		<span class="token punctuation">&#125;</span>
		<span class="token function">close</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span> ch
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token keyword">range</span> <span class="token function">countTo</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,S1,ve,f6,h1,_e,d6,W1,it,yA=`<code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token keyword">range</span> <span class="token function">countTo</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">if</span> i <span class="token operator">></span> <span class="token number">5</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">break</span>
		<span class="token punctuation">&#125;</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,I1,U1,N1,q1,na,sa,hl,E6,F1,kt,Wl,v6,_6,Z1,ft,CA=`<code class="language-go"><span class="token keyword">func</span> <span class="token function">searchData</span><span class="token punctuation">(</span>s <span class="token builtin">string</span><span class="token punctuation">,</span> searchers <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">func</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span> <span class="token punctuation">&#123;</span>
	done <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
	result <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span>

	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> searcher <span class="token operator">:=</span> <span class="token keyword">range</span> searchers <span class="token punctuation">&#123;</span>
		<span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span>searcher <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">select</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">case</span> result <span class="token operator">&lt;-</span> <span class="token function">searcher</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>
			<span class="token keyword">case</span> <span class="token operator">&lt;-</span>done<span class="token punctuation">:</span>
			<span class="token punctuation">&#125;</span>
		<span class="token punctuation">&#125;</span><span class="token punctuation">(</span>searcher<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>

	r <span class="token operator">:=</span> <span class="token operator">&lt;-</span>result
	<span class="token function">close</span><span class="token punctuation">(</span>done<span class="token punctuation">)</span>
	<span class="token keyword">return</span> r
<span class="token punctuation">&#125;</span></code>`,$1,C,b6,Il,w6,y6,Ul,C6,m6,Nl,O6,D6,ql,P6,R6,Fl,x6,G6,Zl,T6,B6,$l,A6,M6,K1,dn,H6,Kl,L6,S6,Yl,h6,W6,Jl,I6,U6,Y1,En,N6,Vl,q6,F6,zl,Z6,$6,Ql,K6,Y6,J1,V1,z1,Q1,aa,ta,jl,J6,j1,be,V6,X1,ea,z6,Xl,Q6,j6,g1,dt,mA=`<code class="language-go"><span class="token keyword">func</span> <span class="token function">countTo</span><span class="token punctuation">(</span>max <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">&lt;-</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	ch <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span>
	done <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
	cancel <span class="token operator">:=</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token function">close</span><span class="token punctuation">(</span>done<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> max<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">select</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">case</span> <span class="token operator">&lt;-</span>done<span class="token punctuation">:</span>
				<span class="token keyword">return</span>
			<span class="token keyword">case</span> ch <span class="token operator">&lt;-</span> i<span class="token punctuation">:</span>
			<span class="token punctuation">&#125;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token function">close</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span> ch<span class="token punctuation">,</span> cancel
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	ch<span class="token punctuation">,</span> cancel <span class="token operator">:=</span> <span class="token function">countTo</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token keyword">range</span> ch <span class="token punctuation">&#123;</span>
		<span class="token keyword">if</span> i <span class="token operator">></span> <span class="token number">5</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">break</span>
		<span class="token punctuation">&#125;</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
	<span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code>`,nd,pn,gl,X6,g6,nc,n7,s7,sc,a7,t7,ac,e7,o7,sd,ad,td,ed,oa,pa,tc,p7,od,we,l7,pd,ye,c7,ld,Ce,u7,cd,Et,OA=`<code class="language-go"><span class="token keyword">func</span> <span class="token function">processChannel</span><span class="token punctuation">(</span>ch <span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">const</span> conc <span class="token operator">=</span> <span class="token number">10</span>
	results <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">,</span> conc<span class="token punctuation">)</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> conc<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			v <span class="token operator">:=</span> <span class="token operator">&lt;-</span>ch
			results <span class="token operator">&lt;-</span> <span class="token function">process</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span>
		<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">var</span> out <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> conc<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>
		out <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>out<span class="token punctuation">,</span> <span class="token operator">&lt;-</span>results<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">return</span> out
<span class="token punctuation">&#125;</span></code>`,ud,me,r7,rd,id,kd,fd,la,ca,ec,i7,dd,Kn,k7,oc,f7,d7,pc,E7,v7,Ed,vt,DA=`<code class="language-go"><span class="token keyword">type</span> PressureGauge <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
	ch <span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">New</span><span class="token punctuation">(</span>limit <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">*</span>PressureGauge <span class="token punctuation">&#123;</span>
	ch <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> limit<span class="token punctuation">)</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> limit<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>
		ch <span class="token operator">&lt;-</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">return</span> <span class="token operator">&amp;</span>PressureGauge<span class="token punctuation">&#123;</span>
		ch<span class="token punctuation">:</span> ch<span class="token punctuation">,</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>pg <span class="token operator">*</span>PressureGauge<span class="token punctuation">)</span> <span class="token function">Process</span><span class="token punctuation">(</span>f <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">select</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">case</span> <span class="token operator">&lt;-</span>pg<span class="token punctuation">.</span>ch<span class="token punctuation">:</span>
		<span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		pg<span class="token punctuation">.</span>ch <span class="token operator">&lt;-</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span>
	<span class="token keyword">default</span><span class="token punctuation">:</span>
		<span class="token keyword">return</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"no more capacity"</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,vd,an,_7,lc,b7,w7,cc,y7,C7,uc,m7,O7,rc,D7,P7,_d,Oe,R7,bd,_t,PA=`<code class="language-go"><span class="token keyword">func</span> <span class="token function">toBeLimited</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">&#123;</span>
    time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token string">"done"</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    pg <span class="token operator">:=</span> <span class="token function">New</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>
    http<span class="token punctuation">.</span><span class="token function">HandleFunc</span><span class="token punctuation">(</span><span class="token string">"/request"</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        err <span class="token operator">:=</span> pg<span class="token punctuation">.</span><span class="token function">Process</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            w<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token function">toBeLimited</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
            w<span class="token punctuation">.</span><span class="token function">WriteHeader</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusToManyRequests<span class="token punctuation">)</span>
            w<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"Too many requests"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    http<span class="token punctuation">.</span><span class="token function">ListenAndServe</span><span class="token punctuation">(</span><span class="token string">":8080"</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code>`,wd,yd,Cd,md,ua,ra,ic,x7,Od,tn,G7,kc,T7,B7,fc,A7,M7,dc,H7,L7,Ec,S7,h7,Dd,M,W7,vc,I7,U7,_c,N7,q7,bc,F7,Z7,wc,$7,K7,yc,Y7,J7,Pd,bt,RA=`<code class="language-go"><span class="token keyword">for</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">select</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">case</span> v<span class="token punctuation">,</span> ok <span class="token operator">:=</span> <span class="token operator">&lt;-</span>in<span class="token punctuation">:</span>
        <span class="token keyword">if</span> <span class="token operator">!</span>ok <span class="token punctuation">&#123;</span>
            in <span class="token operator">=</span> <span class="token boolean">nil</span> <span class="token comment">// this case will never succeed again</span>
            <span class="token keyword">continue</span>
        <span class="token punctuation">&#125;</span>
        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span>

    <span class="token keyword">case</span> v<span class="token punctuation">,</span> ok <span class="token operator">:=</span> <span class="token operator">&lt;-</span>in2<span class="token punctuation">:</span>
        <span class="token keyword">if</span> <span class="token operator">!</span>ok <span class="token punctuation">&#123;</span>
            in2 <span class="token operator">=</span> <span class="token boolean">nil</span> <span class="token comment">// this case will never succeed again</span>
            <span class="token keyword">continue</span>
        <span class="token punctuation">&#125;</span>
        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span>

    <span class="token keyword">case</span> <span class="token operator">&lt;-</span>done<span class="token punctuation">:</span>
        <span class="token keyword">return</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,Rd,xd,Gd,Td,ia,ka,Cc,V7,Bd,De,z7,Ad,wt,xA=`<code class="language-go"><span class="token keyword">func</span> <span class="token function">timeLimit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">var</span> result <span class="token builtin">int</span>
	<span class="token keyword">var</span> err <span class="token builtin">error</span>
	done <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
	<span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		result<span class="token punctuation">,</span> err <span class="token operator">=</span> <span class="token function">doSomeWork</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token function">close</span><span class="token punctuation">(</span>done<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	<span class="token keyword">select</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">case</span> <span class="token operator">&lt;-</span>done<span class="token punctuation">:</span>
		<span class="token keyword">return</span> result<span class="token punctuation">,</span> err
	<span class="token keyword">case</span> <span class="token operator">&lt;-</span>time<span class="token punctuation">.</span><span class="token function">After</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span><span class="token punctuation">:</span>
		<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">,</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"the work timed out"</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,Md,Pe,Q7,Hd,H,j7,mc,X7,g7,Oc,n8,s8,Dc,a8,t8,Pc,e8,o8,Rc,p8,l8,Ld,Yn,c8,xc,u8,r8,Gc,i8,k8,Sd,hd,Wd,Id,fa,da,Tc,f8,Ud,Ea,d8,Bc,E8,v8,Nd,yt,GA=`<code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">var</span> wg sync<span class="token punctuation">.</span>WaitGroup
	wg<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
	<span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">defer</span> wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token function">doThing1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">defer</span> wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token function">doThing2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">defer</span> wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token function">doThing3</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	wg<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code>`,qd,b,Ac,_8,b8,Mc,w8,y8,Hc,C8,m8,Lc,O8,D8,Sc,P8,R8,hc,x8,G8,Wc,T8,B8,Ic,A8,M8,Fd,G,Uc,H8,L8,Nc,S8,h8,qc,W8,I8,Fc,U8,N8,Zc,q8,F8,$c,Z8,$8,Zd,Re,K8,$d,Kd,Yd,xe,Y8,Jd,Ct,TA=`<code class="language-go"><span class="token keyword">func</span> <span class="token function">processAndGather</span><span class="token punctuation">(</span>in <span class="token operator">&lt;-</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">,</span> processor <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span><span class="token punctuation">,</span> num <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token punctuation">&#123;</span>
	out <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span>
	<span class="token keyword">var</span> wg sync<span class="token punctuation">.</span>WaitGroup
	wg<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>

	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">defer</span> wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
			<span class="token keyword">for</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> in <span class="token punctuation">&#123;</span>
				out <span class="token operator">&lt;-</span> <span class="token function">processor</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span>
			<span class="token punctuation">&#125;</span>
		<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		wg<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token function">close</span><span class="token punctuation">(</span>out<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	<span class="token keyword">var</span> result <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span>
	<span class="token keyword">for</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> out <span class="token punctuation">&#123;</span>
		result <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> v<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">return</span> result
<span class="token punctuation">&#125;</span></code>`,Vd,en,J8,Kc,V8,z8,Yc,Q8,j8,Jc,X8,g8,Vc,nb,sb,zd,mt,zc,ab,tb,Qd,Ge,L,Qc,eb,ob,jc,pb,lb,Xc,cb,ub,gc,rb,ib,nu,kb,fb,Ot,db,Eb,jd,Xd,gd,n2,va,_a,su,vb,s2,S,_b,au,bb,wb,tu,yb,Cb,eu,mb,Ob,ou,Db,Pb,pu,Rb,xb,a2,Dt,BA=`<code class="language-go"><span class="token keyword">type</span> SlowComplicatedParser <span class="token keyword">interface</span> <span class="token punctuation">&#123;</span>
	<span class="token function">Parse</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">var</span> parser SlowComplicatedParser
<span class="token keyword">var</span> once sync<span class="token punctuation">.</span>Once

<span class="token keyword">func</span> <span class="token function">Parse</span><span class="token punctuation">(</span>dataToParse <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">&#123;</span>
	once<span class="token punctuation">.</span><span class="token function">Do</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		parser <span class="token operator">=</span> <span class="token function">initParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span> parser<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>dataToParse<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">initParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> SlowComplicatedParser <span class="token punctuation">&#123;</span>
	<span class="token comment">// do all sort of setup and loading here</span>
<span class="token punctuation">&#125;</span></code>`,t2,_,Gb,lu,Tb,Bb,cu,Ab,Mb,uu,Hb,Lb,ru,Sb,hb,iu,Wb,Ib,ku,Ub,Nb,fu,qb,Fb,du,Zb,$b,e2,h,Kb,Eu,Yb,Jb,vu,Vb,zb,_u,Qb,jb,bu,Xb,gb,wu,n9,s9,o2,p2,l2,c2,ba,wa,yu,a9,u2,Te,t9,r2,Be,e9,i2,Ae,o9,k2,Pt,AA=`<code class="language-go"><span class="token keyword">func</span> <span class="token function">GatherAndProcess</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> data Input<span class="token punctuation">)</span> <span class="token punctuation">(</span>COut<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	ctx<span class="token punctuation">,</span> cancel <span class="token operator">:=</span> context<span class="token punctuation">.</span><span class="token function">WithTimeout</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token number">50</span><span class="token operator">*</span>time<span class="token punctuation">.</span>Millisecond<span class="token punctuation">)</span>
	<span class="token keyword">defer</span> <span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	p <span class="token operator">:=</span> processor<span class="token punctuation">&#123;</span>
		outA<span class="token punctuation">:</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> AOut<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
		outB<span class="token punctuation">:</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> BOut<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
		inC<span class="token punctuation">:</span>  <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> CIn<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
		outC<span class="token punctuation">:</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> COut<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
		errs<span class="token punctuation">:</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">error</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
	<span class="token punctuation">&#125;</span>
	p<span class="token punctuation">.</span><span class="token function">launch</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> data<span class="token punctuation">)</span>

	inputC<span class="token punctuation">,</span> err <span class="token operator">:=</span> p<span class="token punctuation">.</span><span class="token function">waitForAB</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> COut<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> err
	<span class="token punctuation">&#125;</span>

	p<span class="token punctuation">.</span>inC <span class="token operator">&lt;-</span> inputC
	out<span class="token punctuation">,</span> err <span class="token operator">:=</span> p<span class="token punctuation">.</span><span class="token function">waitForC</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span>
	<span class="token keyword">return</span> out<span class="token punctuation">,</span> err
<span class="token punctuation">&#125;</span></code>`,f2,vn,p9,Cu,l9,c9,mu,u9,r9,Ou,i9,k9,d2,W,f9,Du,d9,E9,Pu,v9,_9,Ru,b9,w9,xu,y9,C9,Gu,m9,O9,E2,Jn,D9,Tu,P9,R9,Bu,x9,G9,v2,_2,b2,Rt,Au,T9,B9,w2,xt,MA=`<code class="language-go"><span class="token keyword">type</span> processor <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
	outA <span class="token keyword">chan</span> AOut
	outB <span class="token keyword">chan</span> BOut
	outC <span class="token keyword">chan</span> COut
	inC  <span class="token keyword">chan</span> CIn
	errs <span class="token keyword">chan</span> <span class="token builtin">error</span>
<span class="token punctuation">&#125;</span></code>`,y2,C2,m2,I,A9,Mu,M9,H9,Hu,L9,S9,Lu,h9,W9,Su,I9,U9,hu,N9,q9,O2,Gt,HA=`<code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>p <span class="token operator">*</span>processor<span class="token punctuation">)</span> <span class="token function">launch</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> data Input<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		aOut<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">getResultA</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> data<span class="token punctuation">.</span>A<span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
			p<span class="token punctuation">.</span>errs <span class="token operator">&lt;-</span> err
			<span class="token keyword">return</span>
		<span class="token punctuation">&#125;</span>
		p<span class="token punctuation">.</span>outA <span class="token operator">&lt;-</span> aOut
	<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	<span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		bOut<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">getResultB</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> data<span class="token punctuation">.</span>B<span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
			p<span class="token punctuation">.</span>errs <span class="token operator">&lt;-</span> err
			<span class="token keyword">return</span>
		<span class="token punctuation">&#125;</span>
		p<span class="token punctuation">.</span>outB <span class="token operator">&lt;-</span> bOut
	<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">select</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">case</span> <span class="token operator">&lt;-</span>ctx<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
			<span class="token keyword">return</span>
		<span class="token keyword">case</span> inputC <span class="token operator">:=</span> <span class="token operator">&lt;-</span>p<span class="token punctuation">.</span>inC<span class="token punctuation">:</span>
			cOut<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">getResultC</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> inputC<span class="token punctuation">)</span>
			<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
				p<span class="token punctuation">.</span>errs <span class="token operator">&lt;-</span> err
				<span class="token keyword">return</span>
			<span class="token punctuation">&#125;</span>
			p<span class="token punctuation">.</span>outC <span class="token operator">&lt;-</span> cOut
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code>`,D2,z,Wu,F9,Z9,Iu,$9,K9,Uu,Y9,J9,Nu,V9,z9,qu,Q9,j9,P2,E,Fu,X9,g9,Zu,nw,sw,$u,aw,tw,Ku,ew,ow,Yu,pw,lw,Ju,cw,uw,Vu,rw,iw,zu,kw,fw,Qu,dw,Ew,ju,vw,_w,R2,x2,G2,Vn,bw,Xu,ww,yw,gu,Cw,mw,T2,Tt,LA=`<code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>p <span class="token operator">*</span>processor<span class="token punctuation">)</span> <span class="token function">waitForAB</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">(</span>CIn<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">var</span> inputC CIn
	count <span class="token operator">:=</span> <span class="token number">0</span>
	<span class="token keyword">for</span> count <span class="token operator">&lt;</span> <span class="token number">2</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">select</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">case</span> a <span class="token operator">:=</span> <span class="token operator">&lt;-</span>p<span class="token punctuation">.</span>outA<span class="token punctuation">:</span>
			inputC<span class="token punctuation">.</span>A <span class="token operator">=</span> a
			count<span class="token operator">++</span>
		<span class="token keyword">case</span> b <span class="token operator">:=</span> <span class="token operator">&lt;-</span>p<span class="token punctuation">.</span>outB<span class="token punctuation">:</span>
			inputC<span class="token punctuation">.</span>B <span class="token operator">=</span> b
			count<span class="token operator">++</span>
		<span class="token keyword">case</span> err <span class="token operator">:=</span> <span class="token operator">&lt;-</span>p<span class="token punctuation">.</span>errs<span class="token punctuation">:</span>
			<span class="token keyword">return</span> CIn<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> err
		<span class="token keyword">case</span> <span class="token operator">&lt;-</span>ctx<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
			<span class="token keyword">return</span> CIn<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> ctx<span class="token punctuation">.</span><span class="token function">Err</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">return</span> inputC<span class="token punctuation">,</span> <span class="token boolean">nil</span>
<span class="token punctuation">&#125;</span></code>`,B2,m,Ow,nr,Dw,Pw,sr,Rw,xw,ar,Gw,Tw,tr,Bw,Aw,er,Mw,Hw,or,Lw,Sw,pr,hw,Ww,A2,zn,Iw,lr,Uw,Nw,cr,qw,Fw,M2,H2,L2,O,Zw,ur,$w,Kw,rr,Yw,Jw,ir,Vw,zw,kr,Qw,jw,fr,Xw,gw,dr,ny,sy,Er,ay,ty,S2,Bt,SA=`<code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>p <span class="token operator">*</span>processor<span class="token punctuation">)</span> <span class="token function">waitForC</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">(</span>COut<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">select</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">case</span> out <span class="token operator">:=</span> <span class="token operator">&lt;-</span>p<span class="token punctuation">.</span>outC<span class="token punctuation">:</span>
		<span class="token keyword">return</span> out<span class="token punctuation">,</span> <span class="token boolean">nil</span>
	<span class="token keyword">case</span> err <span class="token operator">:=</span> <span class="token operator">&lt;-</span>p<span class="token punctuation">.</span>errs<span class="token punctuation">:</span>
		<span class="token keyword">return</span> COut<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> err
	<span class="token keyword">case</span> <span class="token operator">&lt;-</span>ctx<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
		<span class="token keyword">return</span> COut<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> ctx<span class="token punctuation">.</span><span class="token function">Err</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,h2,U,ey,vr,oy,py,_r,ly,cy,br,uy,ry,wr,iy,ky,yr,fy,dy,W2,rs,Cr,Ey,vy,mr,_y,by,I2,U2,N2,w,Or,wy,yy,Dr,Cy,my,Pr,Oy,Dy,Rr,Py,Ry,xr,xy,Gy,Gr,Ty,By,Tr,Ay,My,Br,Hy,Ly,q2,ya,Sy,Ar,hy,Wy,F2,Z2,$2,K2,Ca,ma,Mr,Iy,Y2,J2,V2,_n,Uy,Hr,Ny,qy,Lr,Fy,Zy,Sr,$y,Ky,z2,Oa,Yy,hr,Jy,Vy,Q2,Me,zy,j2,X2,g2,He,Qy,nE,Le,jy,sE,At,hA=`<code class="language-go"><span class="token keyword">func</span> <span class="token function">scoreboardManager</span><span class="token punctuation">(</span>in <span class="token operator">&lt;-</span><span class="token keyword">chan</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">,</span> done <span class="token operator">&lt;-</span><span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	scoreboard <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
	<span class="token keyword">for</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">select</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">case</span> <span class="token operator">&lt;-</span>done<span class="token punctuation">:</span>
			<span class="token keyword">return</span>
		<span class="token keyword">case</span> f <span class="token operator">:=</span> <span class="token operator">&lt;-</span>in<span class="token punctuation">:</span>
			<span class="token function">f</span><span class="token punctuation">(</span>scoreboard<span class="token punctuation">)</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,aE,Da,Xy,Wr,gy,nC,tE,eE,oE,Se,sC,pE,Mt,WA=`<code class="language-go"><span class="token keyword">type</span> ChannelScoreboardManager <span class="token keyword">chan</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">NewChannelScoreboardManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>ChannelScoreboardManager<span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	ch <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span>ChannelScoreboardManager<span class="token punctuation">)</span>
	done <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
	<span class="token keyword">go</span> <span class="token function">scoreboardManager</span><span class="token punctuation">(</span>ch<span class="token punctuation">,</span> done<span class="token punctuation">)</span>
	<span class="token keyword">return</span> ch<span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token function">close</span><span class="token punctuation">(</span>done<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>csm ChannelScoreboardManager<span class="token punctuation">)</span> <span class="token function">Update</span><span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">,</span> val <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	csm <span class="token operator">&lt;-</span> <span class="token keyword">func</span><span class="token punctuation">(</span>m <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		m<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> val
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,lE,Un,Ir,aC,tC,Ur,eC,oC,Nr,pC,lC,cE,Ht,IA=`<code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>csm ChannelScoreboardManager<span class="token punctuation">)</span> <span class="token function">Read</span><span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">var</span> out <span class="token builtin">int</span>
	<span class="token keyword">var</span> ok <span class="token builtin">bool</span>
	done <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

	csm <span class="token operator">&lt;-</span> <span class="token keyword">func</span><span class="token punctuation">(</span>m <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		out<span class="token punctuation">,</span> ok <span class="token operator">=</span> m<span class="token punctuation">[</span>name<span class="token punctuation">]</span>
		<span class="token function">close</span><span class="token punctuation">(</span>done<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
	<span class="token operator">&lt;-</span>done
	<span class="token keyword">return</span> out<span class="token punctuation">,</span> ok
<span class="token punctuation">&#125;</span></code>`,uE,he,cC,rE,P,uC,qr,rC,iC,Fr,kC,fC,Zr,dC,EC,$r,vC,_C,Kr,bC,wC,Yr,yC,CC,iE,N,mC,Jr,OC,DC,Vr,PC,RC,zr,xC,GC,Qr,TC,BC,jr,AC,MC,kE,q,HC,Xr,LC,SC,gr,hC,WC,ni,IC,UC,si,NC,qC,ai,FC,ZC,fE,Lt,UA=`<code class="language-go"><span class="token keyword">type</span> MutexScoreboardManager <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
	l          sync<span class="token punctuation">.</span>RWMutex
	scoreboard <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">NewMutexScoreboardManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>MutexScoreboardManager <span class="token punctuation">&#123;</span>
	<span class="token keyword">return</span> <span class="token operator">&amp;</span>MutexScoreboardManager<span class="token punctuation">&#123;</span>
		scoreboard<span class="token punctuation">:</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>msm <span class="token operator">*</span>MutexScoreboardManager<span class="token punctuation">)</span> <span class="token function">Update</span><span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">,</span> val <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	msm<span class="token punctuation">.</span>l<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">defer</span> msm<span class="token punctuation">.</span>l<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	msm<span class="token punctuation">.</span>scoreboard<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> val
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>msm <span class="token operator">*</span>MutexScoreboardManager<span class="token punctuation">)</span> <span class="token function">Read</span><span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	msm<span class="token punctuation">.</span>l<span class="token punctuation">.</span><span class="token function">RLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">defer</span> msm<span class="token punctuation">.</span>l<span class="token punctuation">.</span><span class="token function">RUnlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	val<span class="token punctuation">,</span> ok <span class="token operator">:=</span> msm<span class="token punctuation">.</span>scoreboard<span class="token punctuation">[</span>name<span class="token punctuation">]</span>
	<span class="token keyword">return</span> val<span class="token punctuation">,</span> ok
<span class="token punctuation">&#125;</span></code>`,dE,We,$C,EE,vE,_E,Pa,KC,ti,YC,JC,bE,Qn,ei,VC,zC,oi,QC,jC,pi,XC,wE,Ie,gC,yE,CE,mE,Ue,nm,OE,bn,sm,li,am,tm,ci,em,om,ui,pm,lm,DE,Ne,cm,PE,is,ri,um,rm,ii,im,km,RE,qe,fm,xE,jn,wn,ki,dm,Em,fi,vm,_m,di,bm,wm,Ei,ym,Cm,mm,St,vi,Om,Dm,ht,Pm,_i,Rm,xm,Gm,Q,Tm,bi,Bm,Am,wi,Mm,Hm,yi,Lm,Sm,Ci,hm,Wm,mi,Im,Um,GE,TE,BE,AE,Ra,xa,Oi,Nm,ME,HE,LE,Xn,qm,Di,Fm,Zm,Pi,$m,Km,SE,Fe,Ym,hE,WE,IE,UE,Ga,Ta,Ri,Jm,NE,qE,FE,Nn,xi,Vm,zm,Wt,Qm,jm,Xm,ZE,$E,KE,YE;return Wt=new SM({props:{alt:"Learning Go Book Cover",src:"https://learning.oreilly.com/covers/urn:orm:book:9781492077206/400w/"}}),{c(){$t=o("br"),Mi=r(),Kt=o("p"),b3=t("본 글은 Golang을 공부하며 주요 내용이라 생각되는 것들을 기록해둔 자료이며, Ubuntu 22.04 LTS 기준으로 작성되었습니다."),Hi=r(),Li=o("br"),Si=o("br"),hi=r(),ds=o("h2"),Es=o("a"),ao=o("span"),w3=t("Introduction"),Wi=r(),Ii=o("hr"),Ui=r(),Yt=o("p"),y3=t(`CS에서 동시성이란 단일 프로세스를 독립적인 여러 개의 구성 요소로 분할하여,
각 구성 요소가 안전하게 데이터를 공유할 수 있을지 작성하는 것이다.`),Ni=r(),Jt=o("p"),C3=t(`대부분의 언어는 OS 레벨의 쓰레드 라이브러리를 사용하여 동시성을 제공하고, lock을 획득하는 방식을 통해 데이터를 공유한다.
반면 Go의 주요 동시성 모델은 CSP(Communicating Sequential Processes)에 기반한다.
이는 기존 방식만큼 강력하면서도, 이해하기는 훨씬 쉽다.`),qi=r(),vs=o("p"),m3=t("이 포스트에서는 Go의 동시성에 관련된 단어들인 gorountine, channel, 및 "),to=o("code"),O3=t("select"),D3=t(` 키워드에 대해 알아볼 것이다.
또한 Go의 일반적인 동시성 패턴들과 특정 상황에서 유용한 로우레벨의 접근방식에 대해 알아볼 것이다.`),Fi=r(),Zi=o("br"),$i=o("br"),Ki=r(),_s=o("h2"),bs=o("a"),eo=o("span"),P3=t("When to Use Concurrency"),Yi=r(),Ji=o("hr"),Vi=r(),ws=o("p"),R3=t(`먼저 주의해야 할 점이 있는데, 먼저 프로그램에 동시성이 잘 어울릴만 한지 봐야 한다. Go의 goroutine, channel 등은 만능이 아니다.
특히 이들을 적용한다고 해서 프로그램이 반드시 빠르게 돌아가는 것은 아니며, 오히려 코드가 더 복잡해질 수도 있다.
먼저, `),oo=o("em"),x3=t("동시성은 병렬성이 아니다(Concurrency is not parallelism)"),G3=t(`라는 것을 이해해야 한다.
concurrent하게 작성된 코드가 병렬적으로 실행될 지 여부는 하드웨어나 알고리즘에 따라 달라진다.
결론은 동시성이 높아진다고 해서 속도가 올라가는 것은 아니다.`),zi=r(),Vt=o("p"),T3=t(`모든 프로그램은 데이터의 수집, 가공, 출력, 이렇게 세 단계를 따른다고 할 수 있다.
동시성을 프로그램에 적용해야 할지 아닌지의 여부는, 이러한 데이터의 흐름이 어떻게 흘러가는지에 달려 있다.
예를 들면 한 단계의 데이터가 다른 단계를 진행할 때 필요하지 않으면 두 단계는 동시에 진행할 수 있을 것이다.
반면 한 단계의 데이터가 다음 단계를 진행할 때 필요한 경우, 이들은 순차적으로 진행되어야 할 것이다.
독립적으로 실행할 수 있는 여러 개의 연산으로 얻은 데이터를 합치는 경우, 동시성을 적용하면 매우 유용할 것이다.`),Qi=r(),zt=o("p"),B3=t(`또 중요한 점은, 실행 시간이 얼마 안 걸리는 프로세스에는 동시성을 적용할 필요가 없다는 점이다.
대부분의 인메모리 알고리즘은 매우 빠르기 때문에,
동시성으로 값을 전달하는 오버헤드가 병렬적으로 코드를 실행하여 얻을 수 있는 시간적 장점을 덮어버릴 정도로 매우 크다.
그래서 동시성을 사용하는 작업은 네트워크나 디스크 입출력 등, I/O 작업에 사용되는 경우가 많다.`),ji=r(),Qt=o("p"),A3=t(`가령 다른 세 개의 웹 서비스를 호출하는 웹 서비스를 작성한다고 하자.
그중 두 개의 서비스로 데이터를 보내고, 결과물을 다른 한 개로 보내어 반환할 것이다.
전체 프로세스는 50ms 이내에 이루어져야 하고, 에러가 발생하면 이도 리턴되어야 한다.
이런 경우에 동시성이 적용되면 좋은 게, 상효작용 없이 I/O 작업을 해야 하는 부분이 있고, 결과값을 합치는 부분이 있고, 코드의 실행 시간 제한이 있다.
이 포스트의 마지막 부분에서 이런 코드를 어떻게 작성하는지 확인할 것이다.`),Xi=r(),gi=o("br"),nk=o("br"),sk=r(),ys=o("h2"),Cs=o("a"),po=o("span"),M3=t("Goroutines"),ak=r(),tk=o("hr"),ek=r(),X=o("p"),H3=t(`고루틴을 정의하기에 앞서, 몇 가지 단어를 짚고 넘어가 보자.
먼저 `),lo=o("em"),L3=t("프로세스"),S3=t("("),co=o("em"),h3=t("process"),W3=t(`)는 OS에서 실행되는 프로그램의 인스턴스이다.
OS는 메모리 등의 리소스를 프로세스에 연결하고 다른 프로세스가 접근할 수 없도록 한다.
프로세스는 한 개 이상의 `),uo=o("em"),I3=t("쓰레드"),U3=t("("),ro=o("em"),N3=t("thread"),q3=t(")로 구성되어 있다."),ok=r(),jt=o("p"),F3=t(`쓰레드는 운영 체제에서 주어진 시간만큼만 실행되는 실행 단위이며, 프로세스에 할당된 리소스들을 공유할 수 있다.
CPU가 멀티코어라면 여러 개의 쓰레드를 동시에 실행할 수 있다.
OS는 모든 프로세스의 모든 쓰레드가 실행될 수 있도록 쓰레드를 스케쥴링한다.`),pk=r(),lk=o("br"),ck=r(),Ua=o("p"),io=o("strong"),Z3=t("goroutine"),$3=t(`은 Go의 동시성 모델으로, Go 런타임에 의해 관리되는 경량의 프로세스이다.
Go 프로그램이 시작되면 Go 런타임은 여러 개의 쓰레드를 만들고, 한 개의 고루틴을 생성되어 프로그램이 실행된다.
그 외 모든 고루틴은 우리가 작성한 프로그램에서 생성된다.`),uk=r(),Xt=o("p"),K3=t(`OS가 쓰레드를 코어에 할당하여 스케줄링하듯, 모든 고루틴은 Go 런타임에 의해 쓰레드에 할당되어 스케줄링된다.
OS는 이미 쓰레드와 프로세스에 대한 스케줄러가 있기 때문에, 이런 방식이 비효율적인 것처럼 보일 수 있지만 몇 가지 장점이 존재한다.`),rk=r(),g=o("ul"),ko=o("li"),Y3=t("고루틴은 쓰레드보다 생성 속도가 빠르다."),J3=r(),fo=o("li"),V3=t("고루틴은 쓰레드보다 기본 스택 사이즈가 작기 때문에, 메모리 관리 측면에서 효율적이다."),z3=r(),Eo=o("li"),Q3=t("고루틴의 스위칭은 시스템 콜을 가급적 지양하기 때문에 쓰레드의 context switching보다 빠르다."),j3=r(),vo=o("li"),X3=t(`스케줄러 또한 Go 프로세스의 일부이기 때문에 최적화가 가능하다.
스케줄러는 network poller와 같이 I/O blocking이 일어난 고루틴을 참지하여 unscheduling하는 작업을 할 수 있다.`),g3=r(),_o=o("li"),nv=t("가비지 컬렉터와 통합되어 Go 프로세스에 할당된 모든 쓰레드에서 작업이 적절히 분배되도록 한다."),ik=r(),gt=o("p"),sv=t(`이러한 장점 때문에 Go 프로그램은 100~10000개나 되는 고루틴을 돌릴 수 있다.
OS 기본 쓰레드를 사용하는 다른 언어에서 이렇게 쓰레드를 많이 돌리면 더럽게 느려질 것이다.`),kk=r(),fk=o("br"),dk=r(),ms=o("p"),av=t("고루틴을 생성하려면 함수 호출 앞에 "),bo=o("code"),tv=t("go"),ev=t(`라는 키워드를 붙이면 된다.
다른 함수처럼 파라미터를 보내서 고루틴의 상태를 설정할 수 있지만, 리턴값은 무시된다.`),Ek=r(),Na=o("p"),wo=o("code"),ov=t("async"),pv=t(` 키워드로 선언된 함수만 비동기적으로 실행할 수 있는 자바스크립트와는 달리, 어떤 함수든 고루틴으로 실행할 수 있다.
하지만 closure로 비즈니스 로직을 포함하여 고루틴을 생성하는 것이 Go에서는 국룰이라고 한다.`),vk=r(),ne=o("p"),lv=t(`closure는 동시성의 bookkeeping을 담당한다. (이거해석어케함)
예를 들면 closure는 channel에서 값을 읽어 비즈니스 로직으로 전달하는데, 이 로직은 고루틴으로 실행되고 있다는 것을 알 수 없고,
함수의 결과는 다른 channel에 쓰여진다.
이렇게 코드의 역할을 분리해두면 코드를 모듈화되고, 코드가 테스트하기 용이해지며, API에서 동시성을 유지한다.`),_k=r(),qa=o("pre"),bk=r(),wk=o("br"),yk=o("br"),Ck=r(),Os=o("h2"),Ds=o("a"),yo=o("span"),cv=t("Channels"),mk=r(),Ok=o("hr"),Dk=r(),Fn=o("p"),uv=t("고루틴은 "),Co=o("strong"),rv=t("channel"),iv=t(`을 통해 데이터를 주고받는다.
채널은 빌트인 타입으로, slice나 map처럼 `),mo=o("code"),kv=t("make()"),fv=t(" 함수를 사용하여 생성한다."),Pk=r(),Fa=o("pre"),Rk=r(),Ps=o("p"),dv=t(`채널은 map처럼 레퍼런스 타입이다.
따라서 채널의 Zero value는 `),Oo=o("code"),Ev=t("nil"),vv=t("이며, 함수의 파라미터로 채널을 보내면 실제로는 해당 채널의 포인터를 전달하게 된다."),xk=r(),Gk=o("br"),Tk=o("br"),Bk=r(),Rs=o("h3"),xs=o("a"),Do=o("span"),_v=t("Reading, Writing, and Buffering"),Ak=r(),Sn=o("p"),Po=o("code"),bv=t("<-"),wv=t(` 연산자를 사용하면 채널을 사용할 수 있다.
`),Ro=o("code"),yv=t("<-"),Cv=t(" 연산자가 채널 왼쪽에 있다면 채널로부터 값을 읽어오게 되며, "),xo=o("code"),mv=t("<-"),Ov=t(" 연산자가 채널 오른쪽에 있다면 채널에 값을 저장한다."),Mk=r(),Za=o("pre"),Hk=r(),se=o("p"),Dv=t(`채널에 저장된 각 값들은 한 번씩만 읽을수 있다.
만약 여러 개의 고루틴이 동일한 채널에서 값을 읽어오려고 한다면, 그 중 한 개의 고루틴만 채널에 저장된 값을 읽어오게 될 것이다.`),Lk=r(),v=o("p"),Pv=t(`고루틴이 동일한 채널에 읽기와 쓰기를 동시에 하는 경우는 드물다.
일반적으로 변수나 필드값, 혹은 파라미터로 채널을 선언할 때 보통 `),Go=o("code"),Rv=t("chan"),xv=t(" 키워드 앞뒤에 "),To=o("code"),Gv=t("<-"),Tv=t(` 연산자를 붙여서 읽기 전용/쓰기 전용을 명시한다.
이를테면 `),Bo=o("code"),Bv=t("ch <-chan int"),Av=t("와 같이, "),Ao=o("code"),Mv=t("chan"),Hv=t(" 키워드 앞에 "),Mo=o("code"),Lv=t("<-"),Sv=t(`가 붙으면, 해당 고루틴이 읽기 전용임을 의미한다.
반대로 `),Ho=o("code"),hv=t("ch chan<- int"),Wv=t("와 같이, "),Lo=o("code"),Iv=t("chan"),Uv=t(" 키워드 앞에 "),So=o("code"),Nv=t("<-"),qv=t(`가 붙으면, 해당 고루틴이 쓰기 전용임을 의미한다.
이렇게 하면 Go 컴파일러가 해당 채널이 함수에서 읽기/쓰기 중 어느 것에 사용되는지 알 수 있다.`),Sk=r(),hk=o("br"),Wk=r(),ae=o("p"),Fv=t(`기본적으로 채널은 버퍼링되지 않는다.
한 고루틴이 unbuffered channel에 값을 쓰면, 다른 고루틴에서 그 채널의 값을 읽을 때까지 멈춘다.
마찬가지로 한 고루틴이 unbuffered channel로부터 값을 읽으면, 다른 고루틴에서 그 채널에 값을 쓸 때까지 멈춘다.
즉 적어도 두 개의 고루틴을 동시에 돌리는 게 아니면, unbuffered channel에는 값을 읽거나 쓸 수 없다.`),Ik=r(),te=o("p"),Zv=t(`buffered channel도 있다. 이 채널들은 blocking이 되지 않는 대신 제한된 크기만큼만 읽기/쓰기가 가능하다.
만약 어느 고루틴에서 가득 찬 채널에 쓰기를 시도할 경우, 다른 고루틴에서 채널의 값이 읽을 때까지 멈춘다.
마찬가지로 비어 있는 채널에서 읽기를 시도할 경우, 다른 고루틴에서 그 채널에 값을 쓸 때까지 멈춘다.`),Uk=r(),ee=o("p"),$v=t("buffered channel은 아래와 같이 선언한다."),Nk=r(),$a=o("pre"),qk=r(),nn=o("p"),Kv=t("buffered channel에는 빌트인 함수인 "),ho=o("code"),Yv=t("len()"),Jv=t("과 "),Wo=o("code"),Vv=t("cap()"),zv=t(`을 사용할 수 있다.
`),Io=o("code"),Qv=t("len()"),jv=t("은 현재 버퍼에 몇 개의 값들이 저장되어 있는지를 반환하며, "),Uo=o("code"),Xv=t("cap()"),gv=t(`은은 버퍼의 최대 크기를 반환한다.
버퍼의 최대 크기는 변경할 수 없다.`),Fk=r(),oe=o("blockquote"),ps=o("p"),n5=t("unbuffered channel은 값들을 저장할 버퍼가 없기 때문에 "),No=o("code"),s5=t("len()"),a5=t("이나 "),qo=o("code"),t5=t("cap()"),e5=t("에 넘기면 0을 반환한다."),Zk=r(),pe=o("p"),o5=t(`대부분의 경우 unbuffered channel을 사용할텐데, 특정한 경우에는 buffered channel을 사용할 것이다.
이에 대해서는 이후 알아볼 것이다.`),$k=r(),Kk=o("br"),Yk=o("br"),Jk=r(),Gs=o("h3"),Ts=o("a"),Fo=o("span"),p5=t("for-range and Channels"),Vk=r(),Ka=o("p"),Zo=o("code"),l5=t("for-range"),c5=t(" 루프를 사용하여 channel의 값을 읽을 수 있다."),zk=r(),Ya=o("pre"),Qk=r(),sn=o("p"),u5=t("다른 일반적인 "),$o=o("code"),r5=t("for-range"),i5=t(` 루프와는 달리, 이터레이션을 돌며 값을 저장하는 변수가 단 한 개만 사용된다.
해당 루프는 `),Ko=o("code"),k5=t("break"),f5=t("나 "),Yo=o("code"),d5=t("return"),E5=t("문을 만나거나, "),Jo=o("code"),v5=t("close()"),_5=t(" 함수로 채널이 닫힐 때까지 계속된다."),jk=r(),Xk=o("br"),gk=o("br"),nf=r(),Bs=o("h3"),As=o("a"),Vo=o("span"),b5=t("Closing a Channel"),sf=r(),Ms=o("p"),w5=t("채널에 대한 읽기/쓰기가 끝났다면 빌트인 함수 "),zo=o("code"),y5=t("close()"),C5=t("를 사용하여 채널을 닫아준다."),af=r(),Ja=o("pre"),tf=r(),ef=o("br"),of=o("br"),pf=r(),le=o("p"),m5=t(`채널이 닫힌 상태로 채널에 값을 쓰려고 하면 panic이 발생한다. 반면, 놀랍게도 닫힌 채널에서 값을 읽으려는 시도는 반드시 성공한다.
만약 채널이 버퍼링을 사용하고 아직 읽지 않은 값이 존재한다면 그 순서대로 반환될 것이다.
만약 채널이 버퍼링을 사용하지 않거나, 버퍼링을 사용하지만 더 이상 값이 없다면, 그 채널 타입의 Zero value가 반환된다.`),lf=r(),Hs=o("p"),O5=t(`자 그렇다면 이 때 반환된 Zero value가 채널에서 읽어온 값인지, 아니면 채널이 닫히고 읽어올 값이 없어서 반환된 것인지 어떻게 구분해야 할까?
이렇게 map을 사용할 때와 유사한 의문이 생길 수 있다. 해결책도 map과 유사한데, 바로 `),Qo=o("em"),D5=t("comma ok idiom"),P5=t("을 사용하는 것이다."),cf=r(),Va=o("pre"),uf=r(),un=o("p"),R5=t("만약 "),jo=o("code"),x5=t("ok"),G5=t("의 값이 "),Xo=o("code"),T5=t("true"),B5=t("라면 채널이 열려 있는 것이며, "),go=o("code"),A5=t("false"),M5=t(`라면 닫혀 있는 것이다.
언제 닫힐지 모르는 채널로부터 값을 읽어오는 경우, 이렇게 comma ok idiom을 사용해주는 것이 좋을 것이다.`),rf=r(),kf=o("br"),ff=o("br"),df=r(),Ls=o("h3"),Ss=o("a"),np=o("span"),H5=t("How Channels Behave"),Ef=r(),ce=o("p"),L5=t(`채널은 여러 종류와 state가 존재하기 때문에, read, write, close를 시도할 때마다 행동 양상이 달라진다.
아래 표를 확인해보자.`),vf=r(),hs=o("table"),sp=o("thead"),K=o("tr"),_f=o("th"),S5=r(),ap=o("th"),h5=t("Unbuffered, Open"),W5=r(),tp=o("th"),I5=t("Unbuffered, Closed"),U5=r(),ep=o("th"),N5=t("Buffered, Open"),q5=r(),op=o("th"),F5=t("Buffered, Closed"),Z5=r(),pp=o("th"),$5=t("Nil"),K5=r(),ls=o("tbody"),Y=o("tr"),lp=o("td"),Y5=t("Read"),J5=r(),za=o("td"),V5=t("다른 고루틴이"),z5=o("br"),Q5=t("값을 읽을 때까지 멈춤"),j5=r(),cp=o("td"),X5=t("해당 타입의 Zero value를 반환"),g5=r(),up=o("td"),n_=t("버퍼가 비어 있다면 멈춤"),s_=r(),Qa=o("td"),a_=t("버퍼의 남은 값을 반환"),t_=o("br"),e_=t(" 만약 버퍼가 비었다면 Zero value 반환"),o_=r(),rp=o("td"),p_=t("영원히 멈춤"),l_=r(),J=o("tr"),ip=o("td"),c_=t("Write"),u_=r(),ja=o("td"),r_=t("다른 고루틴이"),i_=o("br"),k_=t("값을 쓸 때까지 멈춤"),f_=r(),kp=o("td"),fp=o("strong"),d_=t("Panic"),E_=r(),dp=o("td"),v_=t("버퍼가 가득 차있다면 멈춤"),__=r(),Ep=o("td"),vp=o("strong"),b_=t("Panic"),w_=r(),_p=o("td"),y_=t("영원히 멈춤"),C_=r(),V=o("tr"),bp=o("td"),m_=t("Close"),O_=r(),wp=o("td"),D_=t("성공"),P_=r(),yp=o("td"),Cp=o("strong"),R_=t("Panic"),x_=r(),mp=o("td"),G_=t("성공"),T_=r(),Op=o("td"),Dp=o("strong"),B_=t("Panic"),A_=r(),Pp=o("td"),Rp=o("strong"),M_=t("Panic"),bf=r(),Ws=o("p"),H_=t(`일반적인 패턴은, 채널에 값을 쓰는 고루틴이 더 이상 쓸 값이 없다면 채널을 닫게끔 코드를 작성하는 것이다.
이 때 여러 개의 고루틴이 동일한 채널에 값을 쓴다고 하면 문제가 더 복잡해진다.
동일한 채널에 대해 `),xp=o("code"),L_=t("close()"),S_=t(`를 여러번 호출하거나, 한 고루틴에서 닫은 채널에 다른 고루틴이 쓰기를 시도하면 panic이 발생한다.
관련 내용은 이후 포스트에서 다룰 것이다.`),wf=r(),Xa=o("p"),Gp=o("code"),h_=t("nil"),W_=t(" 채널도 상당히 위험하지만, 일종의 쓰임새가 있다. 마찬가지로 이후 포스트에서 다룰 예정이다."),yf=r(),Cf=o("br"),mf=o("br"),Of=r(),Is=o("h2"),Us=o("a"),Tp=o("span"),I_=t("select"),Df=r(),Pf=o("hr"),Rf=r(),rn=o("p"),U_=t("Go만의 독자적인 동시성 모델을 형성하는 것 중 하나가 바로 "),Bp=o("code"),N_=t("select"),q_=t(`문이다.
`),Ap=o("code"),F_=t("select"),Z_=t(`문은 Go의 동시성을 제어하는 제어문이며, 동시성의 유서깊은 문제를 해결할 수 있다.
바로, 두 개의 작업을 동시에 수행해야 한다면 어떤 작업을 먼저 수행할 것인지에 대한 것이다.
만일 한 작업만 중점적으로 수행한다면 다른 작업들은 수행할 수 없게 되며, 이를 `),Mp=o("em"),$_=t("starvation"),K_=t("이라고 한다."),xf=r(),cs=o("p"),Hp=o("code"),Y_=t("select"),J_=t(` 키워드는 고루틴이 여러 개의 채널 중 하나로부터 값을 읽거나 쓰게 해준다.
겉보기에는 `),Lp=o("code"),V_=t("switch"),z_=t("문과 굉장히 유사하게 생겼다!"),Gf=r(),ga=o("pre"),Tf=r(),hn=o("p"),Sp=o("code"),Q_=t("switch"),j_=t("문 내의 각 "),hp=o("code"),X_=t("case"),g_=t(` 키워드 뒤에 각 채널에 대한 읽기/쓰기가 온다.
만약 해당 읽기/쓰기가 가능한 경우 이를 수행하고 `),Wp=o("code"),n4=t("case"),s4=t(" 블록을 실행한다."),Bf=r(),Af=o("br"),Mf=r(),f=o("p"),a4=t("중요한 점으로, "),Ip=o("code"),t4=t("select"),e4=t("문과 "),Up=o("code"),o4=t("switch"),p4=t(`문은 아주 큰 차이점이 존재한다.
`),Np=o("code"),l4=t("switch"),c4=t("문의 경우 여러 "),qp=o("code"),u4=t("case"),r4=t(" 블록의 조건이 부합하더라도, 그중 가장 위의 "),Fp=o("code"),i4=t("case"),k4=t(` 블록을 실행한다.
반면 `),Zp=o("code"),f4=t("select"),d4=t("문의 경우, 만약 "),$p=o("code"),E4=t("case"),v4=t(" 블록에 쓰인 채널 중 읽기/쓰기가 가능한 채널이 여러 개라면 그중 무작위로 하나를 골라 "),Kp=o("code"),_4=t("case"),b4=t(` 블록을 실행한다.
다시 말해 `),Yp=o("code"),w4=t("select"),y4=t("문에서 "),Jp=o("code"),C4=t("case"),m4=t(` 블록의 순서는 중요치 않은 것이다.
이렇게 무작위적으로 `),Vp=o("code"),O4=t("case"),D4=t(" 블록을 채택하는 방식 때문에 "),zp=o("em"),P4=t("starvation"),R4=t("이 발생하지 않게 된다."),Hf=r(),Ns=o("p"),x4=t("일관성 없는 순서로 lock을 획득하는 것은 데드락을 발생시키는 가장 흔한 원인 중 하나인데, "),Qp=o("code"),G4=t("select"),T4=t(`문의 무작위성은 이를 방지한다.
가령, 두 채널에 동시에 액세스하는 두 개의 고루틴이 있다고 하자.
이들은 정해진 순서로 채널에 액세스해야만 하고, 그렇지 않으면 데드락이 발생한다.
만약 Go 프로세스에 데드락이 발생하면, Go 런타임은 프로그램을 강제로 종료할 것이다.`),Lf=r(),nt=o("pre"),Sf=r(),ue=o("p"),B4=t("이렇게 작성된 코드를 실행하면 아래처럼 에러가 발생한다."),hf=r(),st=o("pre"),Wf=r(),Wn=o("p"),jp=o("code"),A4=t("main()"),M4=t(` 함수가 돌아가는 함수도 고루틴이므로, 위 예제에선 총 두 개의 고루틴이 돌아간다.
생성된 고루틴의 경우 `),Xp=o("code"),H4=t("ch1"),L4=t("이 읽히기 전까지, main 고루틴의 경우 "),gp=o("code"),S4=t("ch2"),h4=t(`가 읽히기 전까지 멈춘다.
이 때 모든 고루틴이 멈춘 상태가 되어 데드락이 발생하게 되고, Go 런타임은 이를 감지한 것이다.`),If=r(),Uf=o("br"),Nf=r(),qs=o("p"),W4=t("위 예제에 "),nl=o("code"),I4=t("select"),U4=t("문을 적절히 사용해보자."),qf=r(),at=o("pre"),Ff=r(),A=o("p"),N4=t("위 예제처럼 "),sl=o("code"),q4=t("select"),F4=t("문은 내의 수행 가능한 "),al=o("code"),Z4=t("case"),$4=t(` 블록만 골라서 실행하기 때문에 데드락을 회피할 수 있다.
생성된 고루틴에서 `),tl=o("code"),K4=t("ch1"),Y4=t("에 1을 집어넣었기 때문에 main 고루틴에서는 "),el=o("code"),J4=t("ch1"),V4=t("에서 "),ol=o("code"),z4=t("v2"),Q4=t("로 값을 읽어올 수 있었고, main 고루틴이 성공적으로 실행된 것이다."),Zf=r(),$f=o("br"),Kf=r(),us=o("p"),pl=o("code"),j4=t("select"),X4=t("는 여러 개의 채널에서 사용될 수 있기 때문에, "),ll=o("code"),g4=t("for"),n0=t(" 루프와 같이 종종 사용된다."),Yf=r(),tt=o("pre"),Jf=r(),Zn=o("p"),s0=t("매우 자주 사용되는 조합인지라 "),cl=o("code"),a0=t("for-select"),t0=t(` 루프라고도 한다.
`),ul=o("code"),e0=t("for-select"),o0=t(" 루프를 사용할 때는 반드시 루프에서 빠져나갈 수 있게끔 해주어야 한다."),Vf=r(),zf=o("br"),Qf=r(),D=o("p"),rl=o("code"),p0=t("switch"),l0=t("문처럼 "),il=o("code"),c0=t("select"),u0=t("문도 "),kl=o("code"),r0=t("default"),i0=t("절을 넣을 수 있으며, "),fl=o("code"),k0=t("case"),f0=t(" 블록 중 읽기/쓰기가 가능한 채널이 없는 경우 "),dl=o("code"),d0=t("default"),E0=t(`절이 실행된다.
따라서 채널의 읽기/쓰기를 nonblocking으로 만들고자 하는 경우, `),El=o("code"),v0=t("select"),_0=t("문에 "),vl=o("code"),b0=t("default"),w0=t("절을 포함하면 된다."),jf=r(),et=o("pre"),Xf=r(),$n=o("p"),y0=t("위 예제의 경우 "),_l=o("code"),C0=t("ch"),m0=t("에 읽어올 값이 없다면, 기다리지 않고 바로 "),bl=o("code"),O0=t("default"),D0=t("절을 실행한다."),gf=r(),n1=o("br"),s1=r(),In=o("p"),wl=o("code"),P0=t("for-select"),R0=t(" 루프에 "),yl=o("code"),x0=t("default"),G0=t(` 절을 사용하면 읽거나 쓸 채널이 없으면 루프를 통해 매번 트리거된다.
따라서 `),Cl=o("code"),T0=t("for"),B0=t(" 루프가 지속적으로 돌기 때문에, 프로세싱 파워를 상당히 많이 잡아먹게 된다."),a1=r(),t1=o("br"),e1=o("br"),o1=r(),Fs=o("h2"),Zs=o("a"),ml=o("span"),A0=t("Concurrency Practices and Patterns"),p1=r(),l1=o("hr"),c1=r(),$s=o("h3"),Ks=o("a"),Ol=o("span"),M0=t("Keep Your APIs Concurrency-Free"),u1=r(),re=o("p"),H0=t(`API에는 구체적인 설계 내용을 가능한 한 숨겨야 하며, 동시성은 설계 단계에서 적용되는 것이기에 API에는 동시성에 관한 내용이 생략된다.
따라서 코드가 호출되는 방식을 변경하지 않고 코드를 변경할 수 있다.`),r1=r(),Ys=o("p"),L0=t(`API의 타입, 함수, 메소드에 채널이나 뮤텍스를 노출시키지 않아야 함을 의미한다.
만약 채널을 노출하게 되면 API 사용자에게 채널에 대한 관리의 책임을 맡기게 되는 것이다.
그렇게 되면 사용자 입장에서 채널이 열려 있는지, 닫혀 있는지, 혹은 `),Dl=o("code"),S0=t("nil"),h0=t(`인지 고민할 필요가 생긴다.
또한 사용자가 뮤텍스나 채널에 잘못된 순서로 접근하여 데드락을 일으킬 수도 있다.`),i1=r(),ie=o("p"),W0=t(`채널을 함수의 매개 변수나 구조체의 필드 타입으로 사용해서는 안되는 것은 아니다.
이렇게 설정된 함수나 구조체를 export하면 안된다는 의미이다.`),k1=r(),ke=o("p"),I0=t(`다만 이러한 규칙의 예외가 몇 개 존재한다.
우리가 만든 API가 동시성에 관련된 라이브러리라면, 채널이 API의 일부가 될 수 있다.`),f1=r(),d1=o("br"),E1=o("br"),v1=r(),Js=o("h3"),Vs=o("a"),Pl=o("span"),U0=t("Goroutines, for Loops, and Varying Variables"),_1=r(),zs=o("p"),N0=t(`고루틴을 생성하기 위해 사용된 closure는 대부분 파라미터를 가지지 않고, 해당 환경에서 선언된 변수들을 캡쳐하여 사용한다.
하지만 `),Rl=o("code"),q0=t("for"),F0=t("문의 인덱스나 값을 저장하는 변수를 캡쳐하려고 하면 문제가 발생한다."),b1=r(),ot=o("pre"),w1=r(),kn=o("p"),Z0=t("위 예제에서 "),xl=o("code"),$0=t("a"),K0=t("에 저장된 값들로 "),Gl=o("code"),Y0=t("v"),J0=t(" 이터레이션을 돌기 때문에, "),Tl=o("code"),V0=t("ch"),z0=t(`에는 각각 4, 8, 12, 16, 20이 저장되어야 할 것이다.
위와 같은 함수를 실행하면 아래와 같은 결과를 출력한다.`),y1=r(),pt=o("pre"),C1=r(),fn=o("p"),Q0=t("이와 같은 출력은 모든 고루틴이 "),Bl=o("code"),j0=t("ch"),X0=t(`에 20을 썼기 때문에 발생한 결과인데, closure가 동일한 변수를 캡쳐하였기 때문이다.
`),Al=o("code"),g0=t("for"),n6=t(` 루프의 인덱스나 값을 저장하는 변수는 매 이터레이션마다 재사용된다.
이 때 마지막으로 `),Ml=o("code"),s6=t("v"),a6=t("에 할당된 값은 10이며, 이 값이 고루틴에서 보게 되는 값이다."),m1=r(),Qs=o("p"),t6=t("사실 이는 "),Hl=o("code"),e6=t("for"),o6=t(`문만의 문제는 아니며, 값이 변경될 수 있는 변수들은 값이 달라질 때마다 고루틴에 값을 전달해야 한다.
두 가지 방법이 있는데, 첫 번째 방법은 loop에서 값을 shadowing하는 것이다.`),O1=r(),lt=o("pre"),D1=r(),fe=o("p"),p6=t("만약 shadowing보다 데이터의 흐름을 명확하게 보고 싶다면, 고루틴의 파라미터로 값을 넘기는 방법도 있다."),P1=r(),ct=o("pre"),R1=r(),de=o("p"),l6=t("위 예제를 실행하면 아래와 같은 결과를 확인할 수 있다. 다만 동시성의 특성상 일정한 순서대로 출력되지는 않는다."),x1=r(),ut=o("pre"),G1=r(),T1=o("br"),B1=o("br"),A1=r(),js=o("h3"),Xs=o("a"),Ll=o("span"),c6=t("Always Clean Up Your Goroutines"),M1=r(),gs=o("p"),u6=t(`새로 생성된 고루틴은 반드시 끝나야 한다.
사용되지 않는 변수 가비지 콜렉터에 의해 정리가 되지만, 다시 사용되지 않는 고루틴은 Go runtime이 탐지할 수 없다.
끝나지 않는 고루틴에도 스케줄러는 해당 고루틴이 실행될(실제로는 아무것도 하지 않는) 시간을 할당하기 때문에 프로그램이 느려질 수 있다.
이를 `),Sl=o("em"),r6=t("goroutine leak"),i6=t("라고 한다."),H1=r(),Ee=o("p"),k6=t("아래 예제를 확인해 보자."),L1=r(),rt=o("pre"),S1=r(),ve=o("p"),f6=t("먼저, 얘는 그냥 단순한 예제일 뿐이니까 이렇게 하지 말자. 이렇게 숫자들 리스트 만드는 간단한 작업에 고루틴을 쓰면 안된다."),h1=r(),_e=o("p"),d6=t(`위 예제의 대부분 경우에서는 모든 값을 사용하면 고루틴이 끝난다.
다만 만약 반복문이 일찍 끝난다면, 해당 고루틴은 값이 읽힐 때까지 영원히 기다리게 된다.`),W1=r(),it=o("pre"),I1=r(),U1=o("br"),N1=o("br"),q1=r(),na=o("h3"),sa=o("a"),hl=o("span"),E6=t("The Done Channel Pattern"),F1=r(),kt=o("p"),Wl=o("em"),v6=t("done channel pattern"),_6=t(`은 채널을 사용하여 고루틴에게 프로세싱을 멈추라는 신호를 보내는 방법을 제공한다.
아래 예제에서는 여러 개의 동일한 함수에 동일한 데이터를 보내고, 가장 먼저 결과를 낸 함수의 값을 사용한다.`),Z1=r(),ft=o("pre"),$1=r(),C=o("p"),b6=t("위 예제에서 "),Il=o("code"),w6=t("done"),y6=t("이라는 채널을 선언했고, 해당 채널의 타입은 "),Ul=o("code"),C6=t("struct{}"),m6=t(`이다.
이때 타입의 종류는 상관없기 때문에 가장 용량이 작은 `),Nl=o("code"),O6=t("struct{}"),D6=t(`를 사용하며, 이 채널에는 쓰기를 하지 않고, 오직 닫기만 한다.
함수의 파라미터로 넘어온 각 `),ql=o("code"),P6=t("searcher"),R6=t(`마다 worker 고루틴을 생성한다.
worker 고루틴은 `),Fl=o("code"),x6=t("select"),G6=t("문으로 "),Zl=o("code"),T6=t("searcher"),B6=t("가 반환한 채널에서 읽기가 가능해지거나, "),$l=o("code"),A6=t("done"),M6=t(" 채널에서 읽기가 가능해질 때까지 기다린다."),K1=r(),dn=o("p"),H6=t(`이때 열려있는 채널에서 값을 읽어오려면 읽어올 데이터가 존재할 때까지 기다리게 되며,
닫혀 있는 채널이라면 항상 해당 타입의 Zero value를 반환한다.
따라서 위 예제의 `),Kl=o("code"),L6=t("select"),S6=t("문에서는 "),Yl=o("code"),h6=t("searcher"),W6=t("가 값을 읽어오거나 "),Jl=o("code"),I6=t("done"),U6=t(" 채널이 닫힐 때까지 대기하게 된다."),Y1=r(),En=o("p"),N6=t("예제의 "),Vl=o("code"),q6=t("searchData"),F6=t(" 함수에서 데이터를 읽어오면 "),zl=o("code"),Z6=t("result"),$6=t(" 채널에 값을 쓸 것이고, 그러면 "),Ql=o("code"),K6=t("done"),Y6=t(`을 닫을 것이다.
따라서 아직 실행중인 고루틴들이 닫힐 것이고 goroutine leaking이 발생하지 않을 것이다.`),J1=r(),V1=o("br"),z1=o("br"),Q1=r(),aa=o("h3"),ta=o("a"),jl=o("span"),J6=t("Using a Cancel Function to Terminate a Goroutine"),j1=r(),be=o("p"),V6=t("done channel 패턴을 사용하여 고루틴을 중지시키는 함수를 작성할 수 있다."),X1=r(),ea=o("p"),z6=t("앞선 "),Xl=o("code"),Q6=t("countTo"),j6=t(" 예제로 돌아가보자."),g1=r(),dt=o("pre"),nd=r(),pn=o("p"),gl=o("code"),X6=t("countTo"),g6=t(" 두 개의 채널을 생성한다. 한 개는 데이터를를 반환하기 위한 것이고, 하나는 "),nc=o("code"),n7=t("done"),s7=t(` 신호를 위함이다.
이 때 `),sc=o("code"),a7=t("done"),t7=t(" 채널을 직접 반환하기보단, "),ac=o("code"),e7=t("done"),o7=t(` 채널을 닫는 closure를 생성하여 반환하는 편이 좋다.
이렇게 closure를 반환하면 추가적인 작업이 필요한 경우 구현하기 용이하다.`),sd=r(),ad=o("br"),td=o("br"),ed=r(),oa=o("h3"),pa=o("a"),tc=o("span"),p7=t("When to Use Buffered and Unbuffered Channels"),od=r(),we=o("p"),l7=t(`Go에서 숙달해야 할 동시성 문제중 가장 복잡한 문제는 언제 buffered channel을 사용해야할지 결정하는 것이다.
기본적으로 채널은 버퍼링이 되지 않으며, 복잡하지 않기 때문에 이해하기 쉽다.
한 고루틴이 값을 읽거나 쓰면 다른 고루틴이 값을 쓰거나 읽을 때까지 대기하는 구조이며, 일종의 계주 경기의 바톤같은 느낌이다.`),pd=r(),ye=o("p"),c7=t(`반면 buffered channel은 더 복잡하다.
buffered channel의 크기는 무한하지 않기 때문에 버퍼의 크기를 결정해야 한다.
buffered channel을 적절하게 사용한다는 것은 버퍼가 가득 차있고, 값을 읽는 고루틴이 값을 읽기까지 기다리는 값을 쓰는 고루틴이 존재함을 의미한다.
보다 구체적으로, 실행할 고루틴 수를 알고 있거나, 실행할 고루틴 수를 제한하고 싶거나, 큐에서 대기 중인 작업의 양을 제한하고 싶을 때 유용하다.`),ld=r(),Ce=o("p"),u7=t(`채널에서 10개의 결과물을 처리하는 예제가 있다.
이 예제에서는 10개의 고루틴을 생성하여 buffered channel에 값을 쓸 것이다.`),cd=r(),Et=o("pre"),ud=r(),me=o("p"),r7=t(`위 예제에서는 우리는 정확히 10개의 고루틴이 생성된다는 것을 알고 있고, 또한 각 고루틴은 작업이 끝나면 사라지기를 원한다.
이런 경우 우리는 생성할 고루틴의 개수만큼의 크기를 갖는 buffered channel을 생성할 수 있고, 각 고루틴은 blocking 없이 데이터를 write할 수 있다.
또한 buffered channel을 통해 루프를 돌 수 있고, 채널에 값이 쓰일 때마다 읽어올 수 있다.
만약 모든 값이 읽혔다면 결과값을 반환하여 goroutine leaking을 방지할 수 있다.`),rd=r(),id=o("br"),kd=o("br"),fd=r(),la=o("h3"),ca=o("a"),ec=o("span"),i7=t("Backpressure"),dd=r(),Kn=o("p"),k7=t("buffered channel을 통해 구현할 수 있는 또다른 기술은 "),oc=o("strong"),f7=t("Backpressure"),d7=t(`이다.
이는 직관적이지는 않지만, 각 구성 요소가 수행하는 작업의 양을 제한할 때 시스템이 전반적으로 잘 돌아가게 된다.
우리는 buffered channel과 `),pc=o("code"),E7=t("select"),v7=t("문을 통해 시스템에서 동시 요청을 제한할 수 있다."),Ed=r(),vt=o("pre"),vd=r(),an=o("p"),_7=t("이 코드에는 여러 개의 "),lc=o("em"),b7=t("토큰"),w7=t(`과 버퍼링된 채널이 포함된 만든다.
기능을 사용하기 위해 고루틴이 생성될 때마다 `),cc=o("code"),y7=t("Process()"),C7=t(` 함수를 생성한다.
`),uc=o("code"),m7=t("select"),O7=t(`문에서는 채널으로부터 토큰을 읽으려고 시도하며, 가능하다면 함수가 실행되고 토큰이 bufferec channel에 write된다.
만약 읽을 수 없다면 `),rc=o("code"),D7=t("default"),P7=t(" 블록이 실행되고 에러가 반환된다."),_d=r(),Oe=o("p"),R7=t("아래 예제는 빌트인 HTTP 함수의 사용 예제이다."),bd=r(),_t=o("pre"),wd=r(),yd=o("br"),Cd=o("br"),md=r(),ua=o("h3"),ra=o("a"),ic=o("span"),x7=t("Turning Off a case in a select"),Od=r(),tn=o("p"),G7=t("여러 가지 데이터 근원에서 동시에 데이터를 받아 합치고 싶은 경우, "),kc=o("code"),T7=t("select"),B7=t(` 키워드를 사용하면 좋다.
하지만 닫혀 있는 채널의 경우 적절하게 다루어 주어야 한다.
만약 `),fc=o("code"),A7=t("select"),M7=t("문 내의 "),dc=o("code"),H7=t("case"),L7=t(`중에서 한 개라도 닫혀 있는 채널로부터 읽기를 시도한다면, 성공적으로 읽겠지만 반드시 Zero value를 얻게 된다.
따라서 해당 `),Ec=o("code"),S7=t("case"),h7=t(` 블록이 선택될 때마다 해당 값이 유효한지 검사하여, 유효하지 않다면 건너뛰어야 한다.
읽기에 공백이 있으면 프로그램은 쓰레기 값을 읽느라 많은 시간을 사용하게 된다.`),Dd=r(),M=o("p"),W7=t("앞서 보았듯 "),vc=o("code"),I7=t("nil"),U7=t(` 채널로부터 읽기를 시도하면 코드가 여전히 멈추게 된다.
만약 버그 때문에 그렇게 된거라면 상당히 마음아픈 일이지만, `),_c=o("code"),N7=t("select"),q7=t("문의 "),bc=o("code"),F7=t("case"),Z7=t(` 블록을 비활성화하기 위해 사용할 수도 있다.
만약 닫혀 있는 채널을 탐지하여 `),wc=o("code"),$7=t("nil"),K7=t("로 설정한다면 연관된 "),yc=o("code"),Y7=t("case"),J7=t(" 블록은 값을 더이상 읽거나 쓸 수 없기 때문에 비활성화된다."),Pd=r(),bt=o("pre"),Rd=r(),xd=o("br"),Gd=o("br"),Td=r(),ia=o("h3"),ka=o("a"),Cc=o("span"),V7=t("Timeout"),Bd=r(),De=o("p"),z7=t(`웹 서비스 등, 인터랙티브한 프로그램들은 일정 시간이 지나기 전에 결과를 리턴해야 한다.
이를 위해 Go에서는 요청이 들어왔을 때 얼마만큼의 시간을 부여할 것인지 설정할 수 있다.
다른 언어는 이 기능을 구현하기 위해 특수한 문법을 사용하지만, Go의 타임아웃 처리는 비교적 간단하다.`),Ad=r(),wt=o("pre"),Md=r(),Pe=o("p"),Q7=t("수행 시간에 제한을 두려고 하는 경우, 위와 같은 패턴을 자주 접하게 될 것이다."),Hd=r(),H=o("p"),j7=t("위 예제에서는 "),mc=o("code"),X7=t("select"),g7=t("문을 사용하여 두 가지 "),Oc=o("code"),n8=t("case"),s8=t(` 블록으로 구분하였다.
첫 번째 `),Dc=o("code"),a8=t("case"),t8=t(`는 done channel을 사용하여 일정 시간 내에 결과를 받아올 경우, 결과를 리턴한다.
두 번째 `),Pc=o("code"),e8=t("case"),o8=t("에서는 "),Rc=o("code"),p8=t("time.After()"),l8=t(" 함수를 이용하여 시간 제한을 카운팅하고, 일정 시간이 지나면 타임아웃 에러를 리턴한다."),Ld=r(),Yn=o("p"),c8=t("만약 위 예제에서 고루틴을 마치기 전에 "),xc=o("code"),u8=t("timeLimit()"),r8=t(` 함수를 끝낼 경우,
고루틴은 계속 돌아가다가 결국 어떤 값을 반환하겠지만 그 값에 대해 아무것도 하지 않는다.
만약 고루틴이 계속 돌아가는 것을 원치 않고 고루틴을 종료하고 싶다면 나중에 나올 `),Gc=o("em"),i8=t("context cancellation"),k8=t("을 확인하자."),Sd=r(),hd=o("br"),Wd=o("br"),Id=r(),fa=o("h3"),da=o("a"),Tc=o("span"),f8=t("Using WaitGroups"),Ud=r(),Ea=o("p"),d8=t(`여러 개의 고루틴이 끝날 때까지 한 고루틴이 이들을 기다려야 하는 경우가 있다.
단 한 개의 고루틴을 기다려야 하는 경우라면, 단순히 이전에 봤던 done channel pattern을 사용하면 된다.
하지만 여러 개의 고루틴을 기다려야 한다면 표준 라이브러리의 `),Bc=o("code"),E8=t("sync.waitGroup"),v8=t("을 사용하는 게 좋다."),Nd=r(),yt=o("pre"),qd=r(),b=o("p"),Ac=o("code"),_8=t("sync.WaitGroup"),b8=t(`은 초기화할 필요가 없고, Zero value인 상태로 사용해도 무방하다.
`),Mc=o("code"),w8=t("sync.WaitGroup"),y8=t("의 메소드 "),Hc=o("code"),C8=t("Add()"),m8=t("를 통해 기다려야 할 고루틴의 개수를 명시하고, 고루틴이 끝날때마다 "),Lc=o("code"),O8=t("Done()"),D8=t(` 메소드로 카운터를 감소시켜준다.
`),Sc=o("code"),P8=t("Wait()"),R8=t(" 메소드는 고루틴들이 끝날 때까지 기다리게 되며, 모든 고루틴이 끝나서 카운터가 0이 되면 "),hc=o("code"),x8=t("Wait()"),G8=t(` 메소드 이하의 코드가 다시 실행된다.
만약 고루틴에서 panic이 발생하더라도 `),Wc=o("code"),T8=t("Done()"),B8=t(" 메소드가 실행됨을 보장하기 위해 "),Ic=o("code"),A8=t("defer"),M8=t("를 사용한다."),Fd=r(),G=o("p"),Uc=o("code"),H8=t("sync.WaitGroup"),L8=t(` 자체를 파라미터로 넘겨선 안되는데, 여기에는 두 가지 이유가 있다.
먼저 `),Nc=o("code"),S8=t("sync.WaitGroup"),h8=t(`을 사용하려면 동일한 인스턴스를 사용해야 한다는 것이다.
만약 `),qc=o("code"),W8=t("sync.WaitGroup"),I8=t("를 고루틴에 파라미터로 통과시키는데 포인터를 사용하지 않으면, 함수에서는 "),Fc=o("code"),U8=t("sync.WaitGroup"),N8=t(` 인스턴스를 복사하게 된다.
따라서 `),Zc=o("code"),q8=t("Done()"),F8=t(` 함수가 본래 인스턴스의 카운터를 감소시키지 않는다.
이와 같은 이유로 예제에서는 closure를 통해 캡쳐하여 `),$c=o("code"),Z8=t("sync.WaitGroup"),$8=t("의 동일한 인스턴스를 레퍼런스하게 했다."),Zd=r(),Re=o("p"),K8=t(`두 번째 이유는 디자인 측면이다. 동시성은 API 내부에서 유지되어야 하기 떄문이다.
채널을 다룰 때 보았듯, 고루틴을 사용하는 일반적인 패턴은 비즈니스 로직을 closure로 감싸서 고루틴을 생성하는 것이다.
closure는 동시성과 관련된 문제를 담당하며, 함수는 알고리즘을 제공한다.`),$d=r(),Kd=o("br"),Yd=r(),xe=o("p"),Y8=t(`보다 현실적인 예제를 확인해보자.
앞서 언급했듯 여러 고루틴이 동일한 채널에 값을 써야 하는 경우, 그 채널이 한 번만 닫혔는지 확인해야 한다.
아래 예제의 함수는 채널의 값을 동시에 처리하여, 결과물들을 슬라이스로 모아 반환한다.`),Jd=r(),Ct=o("pre"),Vd=r(),en=o("p"),J8=t(`위 예제에서는 worker 고루틴 외에도, worker 고루틴들을 모니터링하는 고루틴을 생성한다.
worker 고루틴들의 `),Kc=o("code"),V8=t("Done()"),z8=t(" 메소드가 호출되면 모니터링 고루틴은 "),Yc=o("code"),Q8=t("close()"),j8=t(`로 출력 채널을 닫는다.
버퍼가 비게 되거나 `),Jc=o("code"),X8=t("out"),g8=t("이 닫히면 "),Vc=o("code"),nb=t("for-range"),sb=t(" 루프도 멈추게 되고, 함수는 연산된 값을 반환한다."),zd=r(),mt=o("p"),zc=o("code"),ab=t("sync.WaitGroup"),tb=t(`는 참 편리하지만, 고루틴들을 관리할 때 최우선적으로 고려되어선 안된다.
고루틴들이 끝나면 결과를 기록하는 채널을 닫아야 하는 경우 등, 프로세스 이후 무언가를 청소해주어야 하는 때에 사용해주는 것이 좋다.`),Qd=r(),Ge=o("blockquote"),L=o("p"),Qc=o("code"),eb=t("gorang.org/x"),ob=t("라는 라이브러리가 있는데, 이 라이브러리는 "),jc=o("code"),pb=t("ErrGroup"),lb=t(`라는 타입을 포함한다
`),Xc=o("code"),cb=t("ErrGroup"),ub=t("는 "),gc=o("code"),rb=t("WaitGroup"),ib=t(`을 기반으로 만들어져 있으며, 고루틴들 중 한 개라도 에러를 반환했을 때 처리를 중지한다.
`),nu=o("code"),kb=t("ErrGroup"),fb=t("에 대해 알아보려면 "),Ot=o("a"),db=t("여기"),Eb=t("를 참조하자"),jd=r(),Xd=o("br"),gd=o("br"),n2=r(),va=o("h3"),_a=o("a"),su=o("span"),vb=t("Running Code Exactly Once"),s2=r(),S=o("p"),_b=t("앞선 포스트에서 보았던 "),au=o("code"),bb=t("init"),wb=t(` 함수에 대해 기억할 것이다.
`),tu=o("code"),yb=t("init"),Cb=t(` 함수는 실질적으로 불변상태인 패키지 레벨의 변수를 초기화 할 때 유용하지만, 그 때를 제외하면 되도록이면 사용하지 않는 게 좋다.
한편 `),eu=o("em"),mb=t("lazy loading"),Ob=t(`이 필요하거나, 초기화 코드를 프로그램 후 정확히 한 번만 실행해야 하는 경우가 있을 수 있다.
보통 초기화가 비교적 느리거나, 프로그램을 실행할 때마다 필요한 것이 아니기 때문에 그러하다.
`),ou=o("code"),Db=t("sync"),Pb=t(" 패키지의 "),pu=o("code"),Rb=t("Once"),xb=t(` 타입으로 이러한 기능을 구현할 수 있다.
아래 예제를 살펴보자.`),a2=r(),Dt=o("pre"),t2=r(),_=o("p"),Gb=t("위 예제의 패키지 레벨 변수는 "),lu=o("code"),Tb=t("SlowComplicatedParser"),Bb=t(" 타입인 "),cu=o("code"),Ab=t("parser"),Mb=t("와, "),uu=o("code"),Hb=t("sync.Once"),Lb=t("타입인 "),ru=o("code"),Sb=t("once"),hb=t(`이다.
`),iu=o("code"),Wb=t("sync.WaitGroup"),Ib=t("처럼 "),ku=o("code"),Ub=t("sync.Once"),Nb=t("의 인스턴스는 초기화할 필요가 없으며, "),fu=o("code"),qb=t("sync.Once"),Fb=t(`의 인스턴스는 복사되지 않아야 한다.
함수 내부에서 `),du=o("code"),Zb=t("sync.Once"),$b=t(` 인스턴스를 새로 선언하는 것은 일반적으로 잘못된 일인데,
매 함수 호출마다 새로운 인스턴스가 생성되고 해당 인스턴스에는 이전 호출에 대한 정보가 없기 때문이다.`),e2=r(),h=o("p"),Kb=t("위 예제에서는 "),Eu=o("code"),Yb=t("Parse()"),Jb=t(" 함수가 호출될 때 "),vu=o("code"),Vb=t("parser"),zb=t(`가 단 한번만 초기화되어야 한다.
따라서 `),_u=o("code"),Qb=t("parser"),jb=t("의 값은 "),bu=o("code"),Xb=t("once.Do()"),gb=t("의 파라미터로 보낸 closure에서 초기화되며, "),wu=o("code"),n9=t("once.Do()"),s9=t(" 로 보낸 closure는 다시 실행되지 않는다."),o2=r(),p2=o("br"),l2=o("br"),c2=r(),ba=o("h3"),wa=o("a"),yu=o("span"),a9=t("Putting Our Concurrent Tools Together"),u2=r(),Te=o("p"),t9=t("앞에서 배운 것들을 하나씩 복습해볼 시간이다."),r2=r(),Be=o("p"),e9=t(`세 개의 웹 서비스를 호출하는 함수가 있다고 하자.
우리는 그 중 두 개의 서비스에 값을 보내고, 이 둘로부터 결과값을 받아 나머지 한 개의 서비스로 값을 보내고 값을 리턴할 것이다.
모든 프로세스는 50ms 이내에 이루어져야 하며, 넘어가면 에러를 반환한다.`),i2=r(),Ae=o("p"),o9=t("우리가 호출할 함수는 아래와 같이 시작한다."),k2=r(),Pt=o("pre"),f2=r(),vn=o("p"),p9=t(`함수 내부를 들여다보면 가장 먼저 타임아웃을 설정해준다.
context를 사용 가능한 경우 `),Cu=o("code"),l9=t("time.After()"),c9=t("를 사용하여 타임아웃을 설정하기보단, "),mu=o("code"),u9=t("context.WithTimeout()"),r9=t(`을 사용해주는 것이 좋다.
`),Ou=o("code"),i9=t("context.WithTimeout()"),k9=t("의 장점은 이 함수를 호출하는 함수에 의해 설정된 타임아웃을 준수할 수 있다는 점이다. 자세한 건 12장에서 context에 대해 다룰 때 알아보자."),d2=r(),W=o("p"),f9=t("타임아웃 시간에 도달하면 "),Du=o("code"),d9=t("context.WithTimeout()"),E9=t("로 반환받은 "),Pu=o("code"),v9=t("cancel()"),_9=t(` 함수로, 실행중인 프로세스를 끝낸다.
`),Ru=o("code"),b9=t("defer"),w9=t(" 문을 이용하여 "),xu=o("code"),y9=t("context"),C9=t("의 "),Gu=o("code"),m9=t("cancel()"),O9=t("을 반드시 호출하게끔 한다."),E2=r(),Jn=o("p"),D9=t("또한 이후 생성할 고루틴과 커뮤니케이션하기 위해 사용할 각종 채널들을 모아놓은, "),Tu=o("code"),P9=t("processor"),R9=t(` 인스턴스를 생성한다.
모든 채널은 buffered channel이므로 고루틴들은 값을 쓴 이후, 누군가 값을 읽어갈 때까지 기다릴 필요가 없다.
이 때 `),Bu=o("code"),x9=t("errs"),G9=t(" 필드의 크기는 2인데, 최대 두 개의 에러가 발생할 수 있기 때문이다."),v2=r(),_2=o("br"),b2=r(),Rt=o("p"),Au=o("code"),T9=t("processor"),B9=t(" 타입의 구조체는 이렇게 생겼다."),w2=r(),xt=o("pre"),y2=r(),C2=o("br"),m2=r(),I=o("p"),A9=t("이제 "),Mu=o("code"),M9=t("processor"),H9=t(" 타입의 "),Hu=o("code"),L9=t("launch()"),S9=t(` 메소드에 대해 살펴보자.
이 메소드에서는 세 개의 고루틴을 생성하는데, 각각 `),Lu=o("code"),h9=t("getResultA()"),W9=t(", "),Su=o("code"),I9=t("getResultB()"),U9=t(", "),hu=o("code"),N9=t("getResultC()"),q9=t("를 실행한다."),O2=r(),Gt=o("pre"),D2=r(),z=o("p"),Wu=o("code"),F9=t("getResultA()"),Z9=t("와 "),Iu=o("code"),$9=t("getResultB()"),K9=t(`를 실행하는 고루틴은 매우 비슷하다.
만약 호출시 에러가 리턴되었으면 `),Uu=o("code"),Y9=t("p.errs"),J9=t(" 채널에 에러를 쓰고, 유효한 값이 리턴되었으면 각각 "),Nu=o("code"),V9=t("p.outA"),z9=t(", "),qu=o("code"),Q9=t("p.outB"),j9=t("에 값을 쓴다."),P2=r(),E=o("p"),Fu=o("code"),X9=t("getResultC()"),g9=t("를 호출하는 고루틴은 살짝 더 복잡하다. "),Zu=o("code"),nw=t("getResultA()"),sw=t("와 "),$u=o("code"),aw=t("getResultB()"),tw=t("가 50ms 안에 성공해야만 "),Ku=o("code"),ew=t("getResultC()"),ow=t(`를 호출할 수 있기 때문이다.
이 고루틴은 `),Yu=o("code"),pw=t("select"),lw=t("문과 두 개의 "),Ju=o("code"),cw=t("case"),uw=t(` 블록을 포함한다.
첫 번째 `),Vu=o("code"),rw=t("case"),iw=t(" 블록의 "),zu=o("code"),kw=t("ctx.Done()"),fw=t(` 메소드는 시간이 초과하거나 또는 컨텍스트가 명시적으로 취소될 시 값을 리턴하는 채널을 반환한다. 따라서 context가 취소될 때 트리거된다.
그리고 두 번째 `),Qu=o("code"),dw=t("case"),Ew=t(" 블록은 "),ju=o("code"),vw=t("getResultC()"),_w=t("를 호출하기 위한 데이터가 준비되면 트리거된다. 이 블록 내의 구조는 앞선 두 고루틴과 비슷하다."),R2=r(),x2=o("br"),G2=r(),Vn=o("p"),bw=t("위 고루틴들이 생성되고 실행될, "),Xu=o("code"),ww=t("processor"),yw=t("의 "),gu=o("code"),Cw=t("waitForAB()"),mw=t(" 메소드에 대해 살펴보자."),T2=r(),Tt=o("pre"),B2=r(),m=o("p"),Ow=t("위 함수에서는 이후 "),nr=o("code"),Dw=t("getResultC()"),Pw=t("의 파라미터로 사용할 "),sr=o("code"),Rw=t("inputC"),xw=t("의 값을 설정하기 위해 "),ar=o("code"),Gw=t("for-select"),Tw=t(` 루프를 사용한다.
상단 두 개의 `),tr=o("code"),Bw=t("case"),Aw=t(" 블록은 "),er=o("code"),Mw=t("getResultA()"),Hw=t("와 "),or=o("code"),Lw=t("getResultB()"),Sw=t("를 실행하는 고루틴들이 채널에 값을 보내면 활성화되고, "),pr=o("code"),hw=t("inputC"),Ww=t(`의 값이 설정된다.
이 두 개의 블록이 실행되면 루프를 빠져나오고 유효한 값이 리턴된다.`),A2=r(),zn=o("p"),Iw=t("하단 두 개의 "),lr=o("code"),Uw=t("case"),Nw=t(" 블록은 에러 조건을 담당한다. 만약 "),cr=o("code"),qw=t("p.errs"),Fw=t(`에 쓰인 에러가 있다면, 에러를 리턴한다.
또는 context가 취소되었다면 요청이 취소되었음을 나타내는 에러를 리턴한다.`),M2=r(),H2=o("br"),L2=r(),O=o("p"),Zw=t("다시 "),ur=o("code"),$w=t("GatherAndProcess()"),Kw=t("로 돌아와서, "),rr=o("code"),Yw=t("p.waitForAB()"),Jw=t(" 호출 이후에는 전형적인 에러에 대한 "),ir=o("code"),Vw=t("nil"),zw=t(` 체크를 한다.
에러가 없다면 `),kr=o("code"),Qw=t("p.inC"),jw=t(" 채널에 "),fr=o("code"),Xw=t("inputC"),gw=t(" 값을 쓰고, "),dr=o("code"),ny=t("processor"),sy=t("의 "),Er=o("code"),ay=t("waitForC"),ty=t(" 메소드를 호출한다."),S2=r(),Bt=o("pre"),h2=r(),U=o("p"),ey=t("이 메소드는 한 개의 "),vr=o("code"),oy=t("select"),py=t(`문으로 구성되어 있다.
`),_r=o("code"),ly=t("getResultC()"),cy=t("가 성공적으로 호출되었다면 "),br=o("code"),uy=t("p.outC"),ry=t(` 채널에 값을 썼을 것이고, 이로부터 값을 읽어 리턴한다.
또는 `),wr=o("code"),iy=t("getResultC()"),ky=t("가 에러를 반환하였다면, "),yr=o("code"),fy=t("p.errs"),dy=t(` 채널에서 에러를 읽어 이를 반환한다.
또는 context가 취소되었다면 이를 나타내는 에러를 반환한다.`),W2=r(),rs=o("p"),Cr=o("code"),Ey=t("waitForC()"),vy=t("가 끝났다면, "),mr=o("code"),_y=t("GatherAndProcess()"),by=t("는 비로소 결과를 반환하게 된다."),I2=r(),U2=o("br"),N2=r(),w=o("p"),Or=o("code"),wy=t("getResultC()"),yy=t(`가 제대로 동작한다고 믿는다면 이 코드는 간단하게 작성될 수 있다.
context가 `),Dr=o("code"),Cy=t("getResultC()"),my=t(`로도 전달되었기 때문에, 이 함수는 타임아웃을 준수하고 에러가 발생하면 이를 반환하게끔 작성될 수 있다.
그러한 경우 `),Pr=o("code"),Oy=t("GatherAndProcess()"),Dy=t(" 내부에서 직접 "),Rr=o("code"),Py=t("getResultC()"),Ry=t(`를 호출하도록 할 수 있다.
그렇게 하면 `),xr=o("code"),xy=t("processor"),Gy=t("의 "),Gr=o("code"),Ty=t("inC"),By=t("나 "),Tr=o("code"),Ay=t("outC"),My=t(" 필드나 "),Br=o("code"),Hy=t("waitForC()"),Ly=t(` 메소드 등 상당히 많은 부분들을 생략할 수 있다.
프로그램이 정확하게 동작하길 원한다면, 되도록 동시성을 최대한 지양하여 사용하는 것이 좋다.`),q2=r(),ya=o("p"),Sy=t("이렇게 고루틴, 채널, "),Ar=o("code"),hy=t("select"),Wy=t(`문으로 코드를 구조화함으로써 얻을 수 있는 장점이 있다.
개별 단계를 분리하고, 독립적인 부분들이 임의의 순서로도 실행 및 완료될 수 있도록 하며, 종속적인 부분들끼리 데이터를 확실하게 교환할 수 있게 된다.
또한 프로그램의 어떠한 부분도 중단되지 않도록 보장하고, 이 함수나 앞서 호출된 함수에서 설정된 타임아웃을 적절히 처리한다.
Go가 아닌 다른 언어로 이러한 구조를 작성하는 것은 상당히 어렵다.`),F2=r(),Z2=o("br"),$2=o("br"),K2=r(),Ca=o("h2"),ma=o("a"),Mr=o("span"),Iy=t("When to Use Mutexes Instead of Channels"),Y2=r(),J2=o("hr"),V2=r(),_n=o("p"),Uy=t("다른 프로그래밍 언어에서는, 쓰레드끼리 주고받는 데이터에 대한 접근을 조율해야 하는 경우 "),Hr=o("strong"),Ny=t("뮤텍스"),qy=t("("),Lr=o("strong"),Fy=t("mutex"),Zy=t(`)를 사용한다.
뮤텍스는 동시에 실행되었거나 공유된 데이터에 대해 접근을 제한하는 역할을 한다.
이렇게 보호된 부분은 `),Sr=o("em"),$y=t("critical section"),Ky=t("이라고 한다."),z2=r(),Oa=o("p"),Yy=t("Go의 개발자들이 동시성을 관리하기 위해 채널과 "),hr=o("code"),Jy=t("select"),Vy=t(`문을 디자인한 데는 이유가 있다.
뮤텍스의 문제점은 프로그램의 데이터 흐름이 모호해진다는 것이다.
반면 값이 각종 채널을 통해 고루틴에서 또 다른 고루틴으로 넘어갈 때, 데이터 흐름은 분명하다.`),Q2=r(),Me=o("p"),zy=t(`값에 대한 액세스는 한 번에 단일 고루틴으로 국한된다.
한편 뮤텍스가 사용될 때는 값에 대한 액세스가 모든 프로세스에서 공유된다.
따라서 어떤 고루틴이 값을 소유하고 있는지 특정하기 어렵고, 이 때문에 프로세스 순서를 이해하기 어렵다.`),j2=r(),X2=o("br"),g2=r(),He=o("p"),Qy=t(`Go의 표준 라이브러리에도 뮤텍스가 포함되어 있고, 특정 상황에서는 유횽하게 사용할 수 있다.
그중 한 가지 경우는 고루틴이 공유되는 값을 읽거나 쓰기는 하지만, 프로세싱하지는 않을 때이다.`),nE=r(),Le=o("p"),jy=t(`아래 예제는 멀티플레이어 게임의 인메모리 스코어보드를 관리하는 함수이다.
채널을 통해 이를 어떻게 구현했는지 살펴보고, 고루틴으로 함수를 실행할 것이다.`),sE=r(),At=o("pre"),aE=r(),Da=o("p"),Xy=t(`이 함수는 map 타입의 변수를 선언한다.
그리고 그 map을 읽고 수정하는 함수의 채널과 done 채널을 `),Wr=o("code"),gy=t("select"),nC=t("문으로 묶는다."),tE=r(),eE=o("br"),oE=r(),Se=o("p"),sC=t("타입 하나를 정의하고, 맵에 값을 쓰는 메소드를 만들어보자."),pE=r(),Mt=o("pre"),lE=r(),Un=o("p"),Ir=o("code"),aC=t("Update"),tC=t(` 메소드는 값을 map에 집어넣는 함수를 리턴하는, 매우 간단한 메소드이다.
근데 스코어보드에서 값을 읽으려면 어떻게 해야 할까?
`),Ur=o("code"),eC=t("done"),oC=t(" 패턴을 사용하여, "),Nr=o("code"),pC=t("ScoreboardManager"),lC=t("에 전달된 함수가 완료될 떄까지 기다림으로써, 값을 다시 반환하면 된다."),cE=r(),Ht=o("pre"),uE=r(),he=o("p"),cC=t(`이 코드는 동작하기는 하지만 다소 번거롭고 한 번에 한 개의 reqder만 접근할 수 있다.
이런 상황에서는 뮤텍스를 사용하는 것이 낫다.`),rE=r(),P=o("p"),uC=t("표준 라이브러리의 "),qr=o("code"),rC=t("sync"),iC=t(` 패키지에는 두 개의 뮤텍스가 있다.
첫 번째 것은 `),Fr=o("code"),kC=t("Mutex"),fC=t(" 타입으로, "),Zr=o("code"),dC=t("Lock()"),EC=t("과 "),$r=o("code"),vC=t("Unlock()"),_C=t(`이라는 메소드를 가지고 있다.
`),Kr=o("code"),bC=t("Lock()"),wC=t(`을 호출하면 다른 고루틴이 critical section에 있는 동안 현재 고루틴이 멈춘다.
다른 고루틴이 critical section을 벗어나면 현재 고루틴은 Lock을 얻고, critical section을 실행한다.
`),Yr=o("code"),yC=t("Unlock()"),CC=t("으로 critical section의 끝을 표시한다."),iE=r(),N=o("p"),mC=t("두 번째 뮤텍스 타입은 "),Jr=o("code"),OC=t("RWMutex"),DC=t(` 타입인데, 이 타입은 reader lock과 writer lock을 구분지어서 관리할 수 있게 해준다.
writer lock은 critical section에 단 한 개만 존재할 수 있지만, reader lock은 공유가 가능하여 여러 개가 있을 수 있다.
writer lock은 `),Vr=o("code"),PC=t("Lock()"),RC=t("과 "),zr=o("code"),xC=t("Unlock()"),GC=t("으로, reader lock은 "),Qr=o("code"),TC=t("RLock()"),BC=t("과 "),jr=o("code"),AC=t("RUnlock()"),MC=t("으로 관리된다."),kE=r(),q=o("p"),HC=t(`주의점이 있는데, 뮤텍스를 사용하면 반드시 Lock을 반환해주어야 한다는 것이다.
일반적인 패턴은 `),Xr=o("code"),LC=t("Lock()"),SC=t("이나 "),gr=o("code"),hC=t("RLock()"),WC=t("을 호출한 후, 바로 "),ni=o("code"),IC=t("defer"),UC=t("문을 통해 "),si=o("code"),NC=t("Unlock()"),qC=t("이나 "),ai=o("code"),FC=t("RUnlock()"),ZC=t("이 호출되도록 하는 것이다."),fE=r(),Lt=o("pre"),dE=r(),We=o("p"),$C=t("이렇게 뮤텍스를 사용하니 코드의 길이도 더 짧아지고 더 직관적으로 작성된 것을 확인할 수 있다."),EE=r(),vE=o("br"),_E=r(),Pa=o("p"),KC=t("뮤텍스를 사용하는 방식과, "),ti=o("code"),YC=t("select"),JC=t("문 등 Go에서 사용하는 방식 중 어느 것을 선택할 것인지는 아래 내용을 참조하여 결정할 수 있다."),bE=r(),Qn=o("ul"),ei=o("li"),VC=t("고루틴들을 조정하거나, 고루틴들에 의해 변경되는 값들을 추적해야 한다면 채널을 사용한다."),zC=r(),oi=o("li"),QC=t("구조체의 필드값에 대한 액세스 권한을 공유해야 하는 경우, 뮤텍스를 사용한다."),jC=r(),pi=o("li"),XC=t("채널을 사용할 때 중대한 성능 이슈가 발생하는 경우, 그리고 이 이슈를 해결할 다른 방법을 찾지 못했을 경우, 뮤텍스를 사용하도록 수정해본다."),wE=r(),Ie=o("p"),gC=t(`위 예제에서 스코어보드는 구조체의 필드이고 스코어보드를 다른 고루틴으로 전달하지는 않기 때문에, 뮤텍스를 사용하는 편이 낫다.
또한 데이터가 인메모리로 저장되기 때문에 뮤텍스가 적합한 점도 있다.
반면 데이터가 HHTP 서버나 데이터베이스 등 외부 서비스에 저장될 때는, 시스템에 대한 액세스를 보호하기 위해 뮤텍스를 사용하지 않는 것이 좋다.`),yE=r(),CE=o("br"),mE=r(),Ue=o("p"),nm=t(`뮤텍스를 사용할 때는 코드를 조금 더 면밀하게 검토해야 할 필요가 있다.
lock과 unlock을 반드시 짝지어주어야 하며, 그렇지 않으면 데드락에 걸릴 것이다.
위 예제의 경우 lock의 획득과 해제가 동일한 메소드 안에서 일어났기 때문에 문제가 없었다.`),OE=r(),bn=o("p"),sm=t("그리고 Go의 뮤텍스는 "),li=o("em"),am=t("reentrancy"),tm=t("("),ci=o("em"),em=t("재진입성"),om=t(`)이 없다는 문제가 있다.
만약 고루틴이 lock을 이미 얻은 상태로 동일한 lock을 얻기 위해 다시 접근한다면, 그 고루틴이 lock을 해제할 때까지 기다리는 데드락이 발생한다.
뮤텍스에 `),ui=o("em"),pm=t("reentrancy"),lm=t("가 존재하는 Java같은 언어와의 차이점이라고 볼 수 있다."),DE=r(),Ne=o("p"),cm=t(`lock에 reentrancy가 없기 때문에 재귀함수의 뮤텍스 사용이 어려워진다.
따라서 재귀적인 함수 호출 이전에 락을 해제해주어야 한다.
웬만하면 lock을 얻은 상태로 함수를 호출할 때는, 호출 중에 어떤 lock을 획득할 지 모르기 때문에 주의해주어야 한다.
함수 호출 중 현재 들고있는 것과 동일한 lock을 획득하려고 하면 데드락에 걸릴 것이다.`),PE=r(),is=o("p"),ri=o("code"),um=t("sync.WaitGroup"),rm=t("이나 "),ii=o("code"),im=t("sync.Once"),km=t(`와 마찬가지로 뮤텍스는 복사되어져서는 안된다.
만약 함수의 파라미터로 보내지거나 구조체의 필드로 액세스되는 경우, 반드시 포인터로 이루어져야 한다.
만약 뮤텍스가 복사되면 lock은 공유되지 않을 것이다.`),RE=r(),qe=o("p"),fm=t(`또한 여러 고루틴에서 뮤텍스를 획득하지 않고 한 변수에 접근하려고 시도하지 않는 것이 좋다.
Race condition으로 인해, 상당히 정신나갈거같은 다양한 에러가 발생할 것이다.`),xE=r(),jn=o("blockquote"),wn=o("p"),ki=o("code"),dm=t("sync"),Em=t(" 패키지에는 "),fi=o("code"),vm=t("Map"),_m=t("이라는 타입이 있는데, 이는 빌트인 "),di=o("code"),bm=t("map"),wm=t(` 타입의 concurrency-safe 버전이다.
tradeoff가 있어 `),Ei=o("code"),ym=t("sync.Map"),Cm=t(" 타입은 특정한 상황에만 적합하다."),mm=r(),St=o("ul"),vi=o("li"),Om=t("값이 쓰이는 횟수는 한 번이고, 읽히는 횟수가 상당히 많은 key-value 페어를 공유하는 경우"),Dm=r(),ht=o("li"),Pm=t("고루틴이 "),_i=o("code"),Rm=t("map"),xm=t(" 자체는 공유하지만, 다른 key나 value에 접근하지 않는 경우"),Gm=r(),Q=o("p"),Tm=t("게다가 Go에는 제네릭이 부족하기 때문에, "),bi=o("code"),Bm=t("sync.Map"),Am=t("은 각각의 key와 value에 "),wi=o("code"),Mm=t("interfaece{}"),Hm=t(`를 타입으로 사용한다.
따라서 컴파일러는 제대로 된 타입이 사용되었는지 확인해줄 수 없다.
이러한 한계 때문에, 여러 고루틴이 `),yi=o("code"),Lm=t("map"),Sm=t(" 타입을 공유해야하는 상황에는 "),Ci=o("code"),hm=t("sync.RWMutex"),Wm=t("로 빌트인 "),mi=o("code"),Im=t("map"),Um=t("을 보호하는 것이 낫다."),GE=r(),TE=o("br"),BE=o("br"),AE=r(),Ra=o("h2"),xa=o("a"),Oi=o("span"),Nm=t("Atomics"),ME=r(),HE=o("hr"),LE=r(),Xn=o("p"),qm=t(`Go에는 뮤텍스뿐만 아니라, 여러 쓰레드에서 데이터를 일정하게 보존할 수 있는 또다른 방법을 제공한다.
`),Di=o("code"),Fm=t("sync/atomic"),Zm=t(" 패키지는 최신 CPU에 내장되어 있는 "),Pi=o("em"),$m=t("atomic variable"),Km=t(` 연산에 액세스할 수 있게 해주어,
단일 레지스터에 맞게 값을 add, swap, load, store, compare and swap(CAS)할 수 있게 해준다.`),SE=r(),Fe=o("p"),Ym=t(`만약 비트 단위까지 최적화해서 성능을 쥐어짜서 동시성 코드를 작성하는 코딩의 빡고수라면 유용할 것이다.
그런 사람이 아니라면 그냥 얌전히 goroutine과 mutex를 쓰는 게 좋을것 같다.`),hE=r(),WE=o("br"),IE=o("br"),UE=r(),Ga=o("h2"),Ta=o("a"),Ri=o("span"),Jm=t("References"),NE=r(),qE=o("hr"),FE=r(),Nn=o("center"),xi=o("p"),Vm=t("["),zm=r(),GM(Wt.$$.fragment),Qm=t(`
](https://learning.oreilly.com/library/view/learning-go/9781492077206/) `),jm=o("br"),Xm=t(`
[Jon Bodner, 『Learning Go』, O'Reilly Media, Inc.](https://learning.oreilly.com/library/view/learning-go/9781492077206/)`),ZE=r(),$E=o("br"),KE=o("br"),this.h()},l(n){$t=p(n,"BR",{}),Mi=i(n),Kt=p(n,"P",{});var c=l(Kt);b3=e(c,"본 글은 Golang을 공부하며 주요 내용이라 생각되는 것들을 기록해둔 자료이며, Ubuntu 22.04 LTS 기준으로 작성되었습니다."),c.forEach(a),Hi=i(n),Li=p(n,"BR",{}),Si=p(n,"BR",{}),hi=i(n),ds=p(n,"H2",{id:!0});var gm=l(ds);Es=p(gm,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var AO=l(Es);ao=p(AO,"SPAN",{class:!0}),l(ao).forEach(a),AO.forEach(a),w3=e(gm,"Introduction"),gm.forEach(a),Wi=i(n),Ii=p(n,"HR",{}),Ui=i(n),Yt=p(n,"P",{});var MO=l(Yt);y3=e(MO,`CS에서 동시성이란 단일 프로세스를 독립적인 여러 개의 구성 요소로 분할하여,
각 구성 요소가 안전하게 데이터를 공유할 수 있을지 작성하는 것이다.`),MO.forEach(a),Ni=i(n),Jt=p(n,"P",{});var HO=l(Jt);C3=e(HO,`대부분의 언어는 OS 레벨의 쓰레드 라이브러리를 사용하여 동시성을 제공하고, lock을 획득하는 방식을 통해 데이터를 공유한다.
반면 Go의 주요 동시성 모델은 CSP(Communicating Sequential Processes)에 기반한다.
이는 기존 방식만큼 강력하면서도, 이해하기는 훨씬 쉽다.`),HO.forEach(a),qi=i(n),vs=p(n,"P",{});var JE=l(vs);m3=e(JE,"이 포스트에서는 Go의 동시성에 관련된 단어들인 gorountine, channel, 및 "),to=p(JE,"CODE",{});var LO=l(to);O3=e(LO,"select"),LO.forEach(a),D3=e(JE,` 키워드에 대해 알아볼 것이다.
또한 Go의 일반적인 동시성 패턴들과 특정 상황에서 유용한 로우레벨의 접근방식에 대해 알아볼 것이다.`),JE.forEach(a),Fi=i(n),Zi=p(n,"BR",{}),$i=p(n,"BR",{}),Ki=i(n),_s=p(n,"H2",{id:!0});var nO=l(_s);bs=p(nO,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var SO=l(bs);eo=p(SO,"SPAN",{class:!0}),l(eo).forEach(a),SO.forEach(a),P3=e(nO,"When to Use Concurrency"),nO.forEach(a),Yi=i(n),Ji=p(n,"HR",{}),Vi=i(n),ws=p(n,"P",{});var VE=l(ws);R3=e(VE,`먼저 주의해야 할 점이 있는데, 먼저 프로그램에 동시성이 잘 어울릴만 한지 봐야 한다. Go의 goroutine, channel 등은 만능이 아니다.
특히 이들을 적용한다고 해서 프로그램이 반드시 빠르게 돌아가는 것은 아니며, 오히려 코드가 더 복잡해질 수도 있다.
먼저, `),oo=p(VE,"EM",{});var hO=l(oo);x3=e(hO,"동시성은 병렬성이 아니다(Concurrency is not parallelism)"),hO.forEach(a),G3=e(VE,`라는 것을 이해해야 한다.
concurrent하게 작성된 코드가 병렬적으로 실행될 지 여부는 하드웨어나 알고리즘에 따라 달라진다.
결론은 동시성이 높아진다고 해서 속도가 올라가는 것은 아니다.`),VE.forEach(a),zi=i(n),Vt=p(n,"P",{});var WO=l(Vt);T3=e(WO,`모든 프로그램은 데이터의 수집, 가공, 출력, 이렇게 세 단계를 따른다고 할 수 있다.
동시성을 프로그램에 적용해야 할지 아닌지의 여부는, 이러한 데이터의 흐름이 어떻게 흘러가는지에 달려 있다.
예를 들면 한 단계의 데이터가 다른 단계를 진행할 때 필요하지 않으면 두 단계는 동시에 진행할 수 있을 것이다.
반면 한 단계의 데이터가 다음 단계를 진행할 때 필요한 경우, 이들은 순차적으로 진행되어야 할 것이다.
독립적으로 실행할 수 있는 여러 개의 연산으로 얻은 데이터를 합치는 경우, 동시성을 적용하면 매우 유용할 것이다.`),WO.forEach(a),Qi=i(n),zt=p(n,"P",{});var IO=l(zt);B3=e(IO,`또 중요한 점은, 실행 시간이 얼마 안 걸리는 프로세스에는 동시성을 적용할 필요가 없다는 점이다.
대부분의 인메모리 알고리즘은 매우 빠르기 때문에,
동시성으로 값을 전달하는 오버헤드가 병렬적으로 코드를 실행하여 얻을 수 있는 시간적 장점을 덮어버릴 정도로 매우 크다.
그래서 동시성을 사용하는 작업은 네트워크나 디스크 입출력 등, I/O 작업에 사용되는 경우가 많다.`),IO.forEach(a),ji=i(n),Qt=p(n,"P",{});var UO=l(Qt);A3=e(UO,`가령 다른 세 개의 웹 서비스를 호출하는 웹 서비스를 작성한다고 하자.
그중 두 개의 서비스로 데이터를 보내고, 결과물을 다른 한 개로 보내어 반환할 것이다.
전체 프로세스는 50ms 이내에 이루어져야 하고, 에러가 발생하면 이도 리턴되어야 한다.
이런 경우에 동시성이 적용되면 좋은 게, 상효작용 없이 I/O 작업을 해야 하는 부분이 있고, 결과값을 합치는 부분이 있고, 코드의 실행 시간 제한이 있다.
이 포스트의 마지막 부분에서 이런 코드를 어떻게 작성하는지 확인할 것이다.`),UO.forEach(a),Xi=i(n),gi=p(n,"BR",{}),nk=p(n,"BR",{}),sk=i(n),ys=p(n,"H2",{id:!0});var sO=l(ys);Cs=p(sO,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var NO=l(Cs);po=p(NO,"SPAN",{class:!0}),l(po).forEach(a),NO.forEach(a),M3=e(sO,"Goroutines"),sO.forEach(a),ak=i(n),tk=p(n,"HR",{}),ek=i(n),X=p(n,"P",{});var gn=l(X);H3=e(gn,`고루틴을 정의하기에 앞서, 몇 가지 단어를 짚고 넘어가 보자.
먼저 `),lo=p(gn,"EM",{});var qO=l(lo);L3=e(qO,"프로세스"),qO.forEach(a),S3=e(gn,"("),co=p(gn,"EM",{});var FO=l(co);h3=e(FO,"process"),FO.forEach(a),W3=e(gn,`)는 OS에서 실행되는 프로그램의 인스턴스이다.
OS는 메모리 등의 리소스를 프로세스에 연결하고 다른 프로세스가 접근할 수 없도록 한다.
프로세스는 한 개 이상의 `),uo=p(gn,"EM",{});var ZO=l(uo);I3=e(ZO,"쓰레드"),ZO.forEach(a),U3=e(gn,"("),ro=p(gn,"EM",{});var $O=l(ro);N3=e($O,"thread"),$O.forEach(a),q3=e(gn,")로 구성되어 있다."),gn.forEach(a),ok=i(n),jt=p(n,"P",{});var KO=l(jt);F3=e(KO,`쓰레드는 운영 체제에서 주어진 시간만큼만 실행되는 실행 단위이며, 프로세스에 할당된 리소스들을 공유할 수 있다.
CPU가 멀티코어라면 여러 개의 쓰레드를 동시에 실행할 수 있다.
OS는 모든 프로세스의 모든 쓰레드가 실행될 수 있도록 쓰레드를 스케쥴링한다.`),KO.forEach(a),pk=i(n),lk=p(n,"BR",{}),ck=i(n),Ua=p(n,"P",{});var aO=l(Ua);io=p(aO,"STRONG",{});var YO=l(io);Z3=e(YO,"goroutine"),YO.forEach(a),$3=e(aO,`은 Go의 동시성 모델으로, Go 런타임에 의해 관리되는 경량의 프로세스이다.
Go 프로그램이 시작되면 Go 런타임은 여러 개의 쓰레드를 만들고, 한 개의 고루틴을 생성되어 프로그램이 실행된다.
그 외 모든 고루틴은 우리가 작성한 프로그램에서 생성된다.`),aO.forEach(a),uk=i(n),Xt=p(n,"P",{});var JO=l(Xt);K3=e(JO,`OS가 쓰레드를 코어에 할당하여 스케줄링하듯, 모든 고루틴은 Go 런타임에 의해 쓰레드에 할당되어 스케줄링된다.
OS는 이미 쓰레드와 프로세스에 대한 스케줄러가 있기 때문에, 이런 방식이 비효율적인 것처럼 보일 수 있지만 몇 가지 장점이 존재한다.`),JO.forEach(a),rk=i(n),g=p(n,"UL",{});var ns=l(g);ko=p(ns,"LI",{});var VO=l(ko);Y3=e(VO,"고루틴은 쓰레드보다 생성 속도가 빠르다."),VO.forEach(a),J3=i(ns),fo=p(ns,"LI",{});var zO=l(fo);V3=e(zO,"고루틴은 쓰레드보다 기본 스택 사이즈가 작기 때문에, 메모리 관리 측면에서 효율적이다."),zO.forEach(a),z3=i(ns),Eo=p(ns,"LI",{});var QO=l(Eo);Q3=e(QO,"고루틴의 스위칭은 시스템 콜을 가급적 지양하기 때문에 쓰레드의 context switching보다 빠르다."),QO.forEach(a),j3=i(ns),vo=p(ns,"LI",{});var jO=l(vo);X3=e(jO,`스케줄러 또한 Go 프로세스의 일부이기 때문에 최적화가 가능하다.
스케줄러는 network poller와 같이 I/O blocking이 일어난 고루틴을 참지하여 unscheduling하는 작업을 할 수 있다.`),jO.forEach(a),g3=i(ns),_o=p(ns,"LI",{});var XO=l(_o);nv=e(XO,"가비지 컬렉터와 통합되어 Go 프로세스에 할당된 모든 쓰레드에서 작업이 적절히 분배되도록 한다."),XO.forEach(a),ns.forEach(a),ik=i(n),gt=p(n,"P",{});var gO=l(gt);sv=e(gO,`이러한 장점 때문에 Go 프로그램은 100~10000개나 되는 고루틴을 돌릴 수 있다.
OS 기본 쓰레드를 사용하는 다른 언어에서 이렇게 쓰레드를 많이 돌리면 더럽게 느려질 것이다.`),gO.forEach(a),kk=i(n),fk=p(n,"BR",{}),dk=i(n),ms=p(n,"P",{});var zE=l(ms);av=e(zE,"고루틴을 생성하려면 함수 호출 앞에 "),bo=p(zE,"CODE",{});var nD=l(bo);tv=e(nD,"go"),nD.forEach(a),ev=e(zE,`라는 키워드를 붙이면 된다.
다른 함수처럼 파라미터를 보내서 고루틴의 상태를 설정할 수 있지만, 리턴값은 무시된다.`),zE.forEach(a),Ek=i(n),Na=p(n,"P",{});var tO=l(Na);wo=p(tO,"CODE",{});var sD=l(wo);ov=e(sD,"async"),sD.forEach(a),pv=e(tO,` 키워드로 선언된 함수만 비동기적으로 실행할 수 있는 자바스크립트와는 달리, 어떤 함수든 고루틴으로 실행할 수 있다.
하지만 closure로 비즈니스 로직을 포함하여 고루틴을 생성하는 것이 Go에서는 국룰이라고 한다.`),tO.forEach(a),vk=i(n),ne=p(n,"P",{});var aD=l(ne);lv=e(aD,`closure는 동시성의 bookkeeping을 담당한다. (이거해석어케함)
예를 들면 closure는 channel에서 값을 읽어 비즈니스 로직으로 전달하는데, 이 로직은 고루틴으로 실행되고 있다는 것을 알 수 없고,
함수의 결과는 다른 channel에 쓰여진다.
이렇게 코드의 역할을 분리해두면 코드를 모듈화되고, 코드가 테스트하기 용이해지며, API에서 동시성을 유지한다.`),aD.forEach(a),_k=i(n),qa=p(n,"PRE",{class:!0});var NA=l(qa);NA.forEach(a),bk=i(n),wk=p(n,"BR",{}),yk=p(n,"BR",{}),Ck=i(n),Os=p(n,"H2",{id:!0});var eO=l(Os);Ds=p(eO,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var tD=l(Ds);yo=p(tD,"SPAN",{class:!0}),l(yo).forEach(a),tD.forEach(a),cv=e(eO,"Channels"),eO.forEach(a),mk=i(n),Ok=p(n,"HR",{}),Dk=i(n),Fn=p(n,"P",{});var Ze=l(Fn);uv=e(Ze,"고루틴은 "),Co=p(Ze,"STRONG",{});var eD=l(Co);rv=e(eD,"channel"),eD.forEach(a),iv=e(Ze,`을 통해 데이터를 주고받는다.
채널은 빌트인 타입으로, slice나 map처럼 `),mo=p(Ze,"CODE",{});var oD=l(mo);kv=e(oD,"make()"),oD.forEach(a),fv=e(Ze," 함수를 사용하여 생성한다."),Ze.forEach(a),Pk=i(n),Fa=p(n,"PRE",{class:!0});var qA=l(Fa);qA.forEach(a),Rk=i(n),Ps=p(n,"P",{});var QE=l(Ps);dv=e(QE,`채널은 map처럼 레퍼런스 타입이다.
따라서 채널의 Zero value는 `),Oo=p(QE,"CODE",{});var pD=l(Oo);Ev=e(pD,"nil"),pD.forEach(a),vv=e(QE,"이며, 함수의 파라미터로 채널을 보내면 실제로는 해당 채널의 포인터를 전달하게 된다."),QE.forEach(a),xk=i(n),Gk=p(n,"BR",{}),Tk=p(n,"BR",{}),Bk=i(n),Rs=p(n,"H3",{id:!0});var oO=l(Rs);xs=p(oO,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var lD=l(xs);Do=p(lD,"SPAN",{class:!0}),l(Do).forEach(a),lD.forEach(a),_v=e(oO,"Reading, Writing, and Buffering"),oO.forEach(a),Ak=i(n),Sn=p(n,"P",{});var It=l(Sn);Po=p(It,"CODE",{});var cD=l(Po);bv=e(cD,"<-"),cD.forEach(a),wv=e(It,` 연산자를 사용하면 채널을 사용할 수 있다.
`),Ro=p(It,"CODE",{});var uD=l(Ro);yv=e(uD,"<-"),uD.forEach(a),Cv=e(It," 연산자가 채널 왼쪽에 있다면 채널로부터 값을 읽어오게 되며, "),xo=p(It,"CODE",{});var rD=l(xo);mv=e(rD,"<-"),rD.forEach(a),Ov=e(It," 연산자가 채널 오른쪽에 있다면 채널에 값을 저장한다."),It.forEach(a),Mk=i(n),Za=p(n,"PRE",{class:!0});var FA=l(Za);FA.forEach(a),Hk=i(n),se=p(n,"P",{});var iD=l(se);Dv=e(iD,`채널에 저장된 각 값들은 한 번씩만 읽을수 있다.
만약 여러 개의 고루틴이 동일한 채널에서 값을 읽어오려고 한다면, 그 중 한 개의 고루틴만 채널에 저장된 값을 읽어오게 될 것이다.`),iD.forEach(a),Lk=i(n),v=p(n,"P",{});var R=l(v);Pv=e(R,`고루틴이 동일한 채널에 읽기와 쓰기를 동시에 하는 경우는 드물다.
일반적으로 변수나 필드값, 혹은 파라미터로 채널을 선언할 때 보통 `),Go=p(R,"CODE",{});var kD=l(Go);Rv=e(kD,"chan"),kD.forEach(a),xv=e(R," 키워드 앞뒤에 "),To=p(R,"CODE",{});var fD=l(To);Gv=e(fD,"<-"),fD.forEach(a),Tv=e(R,` 연산자를 붙여서 읽기 전용/쓰기 전용을 명시한다.
이를테면 `),Bo=p(R,"CODE",{});var dD=l(Bo);Bv=e(dD,"ch <-chan int"),dD.forEach(a),Av=e(R,"와 같이, "),Ao=p(R,"CODE",{});var ED=l(Ao);Mv=e(ED,"chan"),ED.forEach(a),Hv=e(R," 키워드 앞에 "),Mo=p(R,"CODE",{});var vD=l(Mo);Lv=e(vD,"<-"),vD.forEach(a),Sv=e(R,`가 붙으면, 해당 고루틴이 읽기 전용임을 의미한다.
반대로 `),Ho=p(R,"CODE",{});var _D=l(Ho);hv=e(_D,"ch chan<- int"),_D.forEach(a),Wv=e(R,"와 같이, "),Lo=p(R,"CODE",{});var bD=l(Lo);Iv=e(bD,"chan"),bD.forEach(a),Uv=e(R," 키워드 앞에 "),So=p(R,"CODE",{});var wD=l(So);Nv=e(wD,"<-"),wD.forEach(a),qv=e(R,`가 붙으면, 해당 고루틴이 쓰기 전용임을 의미한다.
이렇게 하면 Go 컴파일러가 해당 채널이 함수에서 읽기/쓰기 중 어느 것에 사용되는지 알 수 있다.`),R.forEach(a),Sk=i(n),hk=p(n,"BR",{}),Wk=i(n),ae=p(n,"P",{});var yD=l(ae);Fv=e(yD,`기본적으로 채널은 버퍼링되지 않는다.
한 고루틴이 unbuffered channel에 값을 쓰면, 다른 고루틴에서 그 채널의 값을 읽을 때까지 멈춘다.
마찬가지로 한 고루틴이 unbuffered channel로부터 값을 읽으면, 다른 고루틴에서 그 채널에 값을 쓸 때까지 멈춘다.
즉 적어도 두 개의 고루틴을 동시에 돌리는 게 아니면, unbuffered channel에는 값을 읽거나 쓸 수 없다.`),yD.forEach(a),Ik=i(n),te=p(n,"P",{});var CD=l(te);Zv=e(CD,`buffered channel도 있다. 이 채널들은 blocking이 되지 않는 대신 제한된 크기만큼만 읽기/쓰기가 가능하다.
만약 어느 고루틴에서 가득 찬 채널에 쓰기를 시도할 경우, 다른 고루틴에서 채널의 값이 읽을 때까지 멈춘다.
마찬가지로 비어 있는 채널에서 읽기를 시도할 경우, 다른 고루틴에서 그 채널에 값을 쓸 때까지 멈춘다.`),CD.forEach(a),Uk=i(n),ee=p(n,"P",{});var mD=l(ee);$v=e(mD,"buffered channel은 아래와 같이 선언한다."),mD.forEach(a),Nk=i(n),$a=p(n,"PRE",{class:!0});var ZA=l($a);ZA.forEach(a),qk=i(n),nn=p(n,"P",{});var ss=l(nn);Kv=e(ss,"buffered channel에는 빌트인 함수인 "),ho=p(ss,"CODE",{});var OD=l(ho);Yv=e(OD,"len()"),OD.forEach(a),Jv=e(ss,"과 "),Wo=p(ss,"CODE",{});var DD=l(Wo);Vv=e(DD,"cap()"),DD.forEach(a),zv=e(ss,`을 사용할 수 있다.
`),Io=p(ss,"CODE",{});var PD=l(Io);Qv=e(PD,"len()"),PD.forEach(a),jv=e(ss,"은 현재 버퍼에 몇 개의 값들이 저장되어 있는지를 반환하며, "),Uo=p(ss,"CODE",{});var RD=l(Uo);Xv=e(RD,"cap()"),RD.forEach(a),gv=e(ss,`은은 버퍼의 최대 크기를 반환한다.
버퍼의 최대 크기는 변경할 수 없다.`),ss.forEach(a),Fk=i(n),oe=p(n,"BLOCKQUOTE",{});var xD=l(oe);ps=p(xD,"P",{});var $e=l(ps);n5=e($e,"unbuffered channel은 값들을 저장할 버퍼가 없기 때문에 "),No=p($e,"CODE",{});var GD=l(No);s5=e(GD,"len()"),GD.forEach(a),a5=e($e,"이나 "),qo=p($e,"CODE",{});var TD=l(qo);t5=e(TD,"cap()"),TD.forEach(a),e5=e($e,"에 넘기면 0을 반환한다."),$e.forEach(a),xD.forEach(a),Zk=i(n),pe=p(n,"P",{});var BD=l(pe);o5=e(BD,`대부분의 경우 unbuffered channel을 사용할텐데, 특정한 경우에는 buffered channel을 사용할 것이다.
이에 대해서는 이후 알아볼 것이다.`),BD.forEach(a),$k=i(n),Kk=p(n,"BR",{}),Yk=p(n,"BR",{}),Jk=i(n),Gs=p(n,"H3",{id:!0});var pO=l(Gs);Ts=p(pO,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var AD=l(Ts);Fo=p(AD,"SPAN",{class:!0}),l(Fo).forEach(a),AD.forEach(a),p5=e(pO,"for-range and Channels"),pO.forEach(a),Vk=i(n),Ka=p(n,"P",{});var lO=l(Ka);Zo=p(lO,"CODE",{});var MD=l(Zo);l5=e(MD,"for-range"),MD.forEach(a),c5=e(lO," 루프를 사용하여 channel의 값을 읽을 수 있다."),lO.forEach(a),zk=i(n),Ya=p(n,"PRE",{class:!0});var $A=l(Ya);$A.forEach(a),Qk=i(n),sn=p(n,"P",{});var as=l(sn);u5=e(as,"다른 일반적인 "),$o=p(as,"CODE",{});var HD=l($o);r5=e(HD,"for-range"),HD.forEach(a),i5=e(as,` 루프와는 달리, 이터레이션을 돌며 값을 저장하는 변수가 단 한 개만 사용된다.
해당 루프는 `),Ko=p(as,"CODE",{});var LD=l(Ko);k5=e(LD,"break"),LD.forEach(a),f5=e(as,"나 "),Yo=p(as,"CODE",{});var SD=l(Yo);d5=e(SD,"return"),SD.forEach(a),E5=e(as,"문을 만나거나, "),Jo=p(as,"CODE",{});var hD=l(Jo);v5=e(hD,"close()"),hD.forEach(a),_5=e(as," 함수로 채널이 닫힐 때까지 계속된다."),as.forEach(a),jk=i(n),Xk=p(n,"BR",{}),gk=p(n,"BR",{}),nf=i(n),Bs=p(n,"H3",{id:!0});var cO=l(Bs);As=p(cO,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var WD=l(As);Vo=p(WD,"SPAN",{class:!0}),l(Vo).forEach(a),WD.forEach(a),b5=e(cO,"Closing a Channel"),cO.forEach(a),sf=i(n),Ms=p(n,"P",{});var jE=l(Ms);w5=e(jE,"채널에 대한 읽기/쓰기가 끝났다면 빌트인 함수 "),zo=p(jE,"CODE",{});var ID=l(zo);y5=e(ID,"close()"),ID.forEach(a),C5=e(jE,"를 사용하여 채널을 닫아준다."),jE.forEach(a),af=i(n),Ja=p(n,"PRE",{class:!0});var KA=l(Ja);KA.forEach(a),tf=i(n),ef=p(n,"BR",{}),of=p(n,"BR",{}),pf=i(n),le=p(n,"P",{});var UD=l(le);m5=e(UD,`채널이 닫힌 상태로 채널에 값을 쓰려고 하면 panic이 발생한다. 반면, 놀랍게도 닫힌 채널에서 값을 읽으려는 시도는 반드시 성공한다.
만약 채널이 버퍼링을 사용하고 아직 읽지 않은 값이 존재한다면 그 순서대로 반환될 것이다.
만약 채널이 버퍼링을 사용하지 않거나, 버퍼링을 사용하지만 더 이상 값이 없다면, 그 채널 타입의 Zero value가 반환된다.`),UD.forEach(a),lf=i(n),Hs=p(n,"P",{});var XE=l(Hs);O5=e(XE,`자 그렇다면 이 때 반환된 Zero value가 채널에서 읽어온 값인지, 아니면 채널이 닫히고 읽어올 값이 없어서 반환된 것인지 어떻게 구분해야 할까?
이렇게 map을 사용할 때와 유사한 의문이 생길 수 있다. 해결책도 map과 유사한데, 바로 `),Qo=p(XE,"EM",{});var ND=l(Qo);D5=e(ND,"comma ok idiom"),ND.forEach(a),P5=e(XE,"을 사용하는 것이다."),XE.forEach(a),cf=i(n),Va=p(n,"PRE",{class:!0});var YA=l(Va);YA.forEach(a),uf=i(n),un=p(n,"P",{});var Ba=l(un);R5=e(Ba,"만약 "),jo=p(Ba,"CODE",{});var qD=l(jo);x5=e(qD,"ok"),qD.forEach(a),G5=e(Ba,"의 값이 "),Xo=p(Ba,"CODE",{});var FD=l(Xo);T5=e(FD,"true"),FD.forEach(a),B5=e(Ba,"라면 채널이 열려 있는 것이며, "),go=p(Ba,"CODE",{});var ZD=l(go);A5=e(ZD,"false"),ZD.forEach(a),M5=e(Ba,`라면 닫혀 있는 것이다.
언제 닫힐지 모르는 채널로부터 값을 읽어오는 경우, 이렇게 comma ok idiom을 사용해주는 것이 좋을 것이다.`),Ba.forEach(a),rf=i(n),kf=p(n,"BR",{}),ff=p(n,"BR",{}),df=i(n),Ls=p(n,"H3",{id:!0});var uO=l(Ls);Ss=p(uO,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var $D=l(Ss);np=p($D,"SPAN",{class:!0}),l(np).forEach(a),$D.forEach(a),H5=e(uO,"How Channels Behave"),uO.forEach(a),Ef=i(n),ce=p(n,"P",{});var KD=l(ce);L5=e(KD,`채널은 여러 종류와 state가 존재하기 때문에, read, write, close를 시도할 때마다 행동 양상이 달라진다.
아래 표를 확인해보자.`),KD.forEach(a),vf=i(n),hs=p(n,"TABLE",{});var gE=l(hs);sp=p(gE,"THEAD",{});var YD=l(sp);K=p(YD,"TR",{});var yn=l(K);_f=p(yn,"TH",{}),l(_f).forEach(a),S5=i(yn),ap=p(yn,"TH",{});var JD=l(ap);h5=e(JD,"Unbuffered, Open"),JD.forEach(a),W5=i(yn),tp=p(yn,"TH",{});var VD=l(tp);I5=e(VD,"Unbuffered, Closed"),VD.forEach(a),U5=i(yn),ep=p(yn,"TH",{});var zD=l(ep);N5=e(zD,"Buffered, Open"),zD.forEach(a),q5=i(yn),op=p(yn,"TH",{});var QD=l(op);F5=e(QD,"Buffered, Closed"),QD.forEach(a),Z5=i(yn),pp=p(yn,"TH",{});var jD=l(pp);$5=e(jD,"Nil"),jD.forEach(a),yn.forEach(a),YD.forEach(a),K5=i(gE),ls=p(gE,"TBODY",{});var Ke=l(ls);Y=p(Ke,"TR",{});var Cn=l(Y);lp=p(Cn,"TD",{});var XD=l(lp);Y5=e(XD,"Read"),XD.forEach(a),J5=i(Cn),za=p(Cn,"TD",{});var n3=l(za);V5=e(n3,"다른 고루틴이"),z5=p(n3,"BR",{}),Q5=e(n3,"값을 읽을 때까지 멈춤"),n3.forEach(a),j5=i(Cn),cp=p(Cn,"TD",{});var gD=l(cp);X5=e(gD,"해당 타입의 Zero value를 반환"),gD.forEach(a),g5=i(Cn),up=p(Cn,"TD",{});var nP=l(up);n_=e(nP,"버퍼가 비어 있다면 멈춤"),nP.forEach(a),s_=i(Cn),Qa=p(Cn,"TD",{});var s3=l(Qa);a_=e(s3,"버퍼의 남은 값을 반환"),t_=p(s3,"BR",{}),e_=e(s3," 만약 버퍼가 비었다면 Zero value 반환"),s3.forEach(a),o_=i(Cn),rp=p(Cn,"TD",{});var sP=l(rp);p_=e(sP,"영원히 멈춤"),sP.forEach(a),Cn.forEach(a),l_=i(Ke),J=p(Ke,"TR",{});var mn=l(J);ip=p(mn,"TD",{});var aP=l(ip);c_=e(aP,"Write"),aP.forEach(a),u_=i(mn),ja=p(mn,"TD",{});var a3=l(ja);r_=e(a3,"다른 고루틴이"),i_=p(a3,"BR",{}),k_=e(a3,"값을 쓸 때까지 멈춤"),a3.forEach(a),f_=i(mn),kp=p(mn,"TD",{});var tP=l(kp);fp=p(tP,"STRONG",{});var eP=l(fp);d_=e(eP,"Panic"),eP.forEach(a),tP.forEach(a),E_=i(mn),dp=p(mn,"TD",{});var oP=l(dp);v_=e(oP,"버퍼가 가득 차있다면 멈춤"),oP.forEach(a),__=i(mn),Ep=p(mn,"TD",{});var pP=l(Ep);vp=p(pP,"STRONG",{});var lP=l(vp);b_=e(lP,"Panic"),lP.forEach(a),pP.forEach(a),w_=i(mn),_p=p(mn,"TD",{});var cP=l(_p);y_=e(cP,"영원히 멈춤"),cP.forEach(a),mn.forEach(a),C_=i(Ke),V=p(Ke,"TR",{});var On=l(V);bp=p(On,"TD",{});var uP=l(bp);m_=e(uP,"Close"),uP.forEach(a),O_=i(On),wp=p(On,"TD",{});var rP=l(wp);D_=e(rP,"성공"),rP.forEach(a),P_=i(On),yp=p(On,"TD",{});var iP=l(yp);Cp=p(iP,"STRONG",{});var kP=l(Cp);R_=e(kP,"Panic"),kP.forEach(a),iP.forEach(a),x_=i(On),mp=p(On,"TD",{});var fP=l(mp);G_=e(fP,"성공"),fP.forEach(a),T_=i(On),Op=p(On,"TD",{});var dP=l(Op);Dp=p(dP,"STRONG",{});var EP=l(Dp);B_=e(EP,"Panic"),EP.forEach(a),dP.forEach(a),A_=i(On),Pp=p(On,"TD",{});var vP=l(Pp);Rp=p(vP,"STRONG",{});var _P=l(Rp);M_=e(_P,"Panic"),_P.forEach(a),vP.forEach(a),On.forEach(a),Ke.forEach(a),gE.forEach(a),bf=i(n),Ws=p(n,"P",{});var t3=l(Ws);H_=e(t3,`일반적인 패턴은, 채널에 값을 쓰는 고루틴이 더 이상 쓸 값이 없다면 채널을 닫게끔 코드를 작성하는 것이다.
이 때 여러 개의 고루틴이 동일한 채널에 값을 쓴다고 하면 문제가 더 복잡해진다.
동일한 채널에 대해 `),xp=p(t3,"CODE",{});var bP=l(xp);L_=e(bP,"close()"),bP.forEach(a),S_=e(t3,`를 여러번 호출하거나, 한 고루틴에서 닫은 채널에 다른 고루틴이 쓰기를 시도하면 panic이 발생한다.
관련 내용은 이후 포스트에서 다룰 것이다.`),t3.forEach(a),wf=i(n),Xa=p(n,"P",{});var rO=l(Xa);Gp=p(rO,"CODE",{});var wP=l(Gp);h_=e(wP,"nil"),wP.forEach(a),W_=e(rO," 채널도 상당히 위험하지만, 일종의 쓰임새가 있다. 마찬가지로 이후 포스트에서 다룰 예정이다."),rO.forEach(a),yf=i(n),Cf=p(n,"BR",{}),mf=p(n,"BR",{}),Of=i(n),Is=p(n,"H2",{id:!0});var iO=l(Is);Us=p(iO,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var yP=l(Us);Tp=p(yP,"SPAN",{class:!0}),l(Tp).forEach(a),yP.forEach(a),I_=e(iO,"select"),iO.forEach(a),Df=i(n),Pf=p(n,"HR",{}),Rf=i(n),rn=p(n,"P",{});var Aa=l(rn);U_=e(Aa,"Go만의 독자적인 동시성 모델을 형성하는 것 중 하나가 바로 "),Bp=p(Aa,"CODE",{});var CP=l(Bp);N_=e(CP,"select"),CP.forEach(a),q_=e(Aa,`문이다.
`),Ap=p(Aa,"CODE",{});var mP=l(Ap);F_=e(mP,"select"),mP.forEach(a),Z_=e(Aa,`문은 Go의 동시성을 제어하는 제어문이며, 동시성의 유서깊은 문제를 해결할 수 있다.
바로, 두 개의 작업을 동시에 수행해야 한다면 어떤 작업을 먼저 수행할 것인지에 대한 것이다.
만일 한 작업만 중점적으로 수행한다면 다른 작업들은 수행할 수 없게 되며, 이를 `),Mp=p(Aa,"EM",{});var OP=l(Mp);$_=e(OP,"starvation"),OP.forEach(a),K_=e(Aa,"이라고 한다."),Aa.forEach(a),xf=i(n),cs=p(n,"P",{});var Gi=l(cs);Hp=p(Gi,"CODE",{});var DP=l(Hp);Y_=e(DP,"select"),DP.forEach(a),J_=e(Gi,` 키워드는 고루틴이 여러 개의 채널 중 하나로부터 값을 읽거나 쓰게 해준다.
겉보기에는 `),Lp=p(Gi,"CODE",{});var PP=l(Lp);V_=e(PP,"switch"),PP.forEach(a),z_=e(Gi,"문과 굉장히 유사하게 생겼다!"),Gi.forEach(a),Gf=i(n),ga=p(n,"PRE",{class:!0});var JA=l(ga);JA.forEach(a),Tf=i(n),hn=p(n,"P",{});var Ut=l(hn);Sp=p(Ut,"CODE",{});var RP=l(Sp);Q_=e(RP,"switch"),RP.forEach(a),j_=e(Ut,"문 내의 각 "),hp=p(Ut,"CODE",{});var xP=l(hp);X_=e(xP,"case"),xP.forEach(a),g_=e(Ut,` 키워드 뒤에 각 채널에 대한 읽기/쓰기가 온다.
만약 해당 읽기/쓰기가 가능한 경우 이를 수행하고 `),Wp=p(Ut,"CODE",{});var GP=l(Wp);n4=e(GP,"case"),GP.forEach(a),s4=e(Ut," 블록을 실행한다."),Ut.forEach(a),Bf=i(n),Af=p(n,"BR",{}),Mf=i(n),f=p(n,"P",{});var d=l(f);a4=e(d,"중요한 점으로, "),Ip=p(d,"CODE",{});var TP=l(Ip);t4=e(TP,"select"),TP.forEach(a),e4=e(d,"문과 "),Up=p(d,"CODE",{});var BP=l(Up);o4=e(BP,"switch"),BP.forEach(a),p4=e(d,`문은 아주 큰 차이점이 존재한다.
`),Np=p(d,"CODE",{});var AP=l(Np);l4=e(AP,"switch"),AP.forEach(a),c4=e(d,"문의 경우 여러 "),qp=p(d,"CODE",{});var MP=l(qp);u4=e(MP,"case"),MP.forEach(a),r4=e(d," 블록의 조건이 부합하더라도, 그중 가장 위의 "),Fp=p(d,"CODE",{});var HP=l(Fp);i4=e(HP,"case"),HP.forEach(a),k4=e(d,` 블록을 실행한다.
반면 `),Zp=p(d,"CODE",{});var LP=l(Zp);f4=e(LP,"select"),LP.forEach(a),d4=e(d,"문의 경우, 만약 "),$p=p(d,"CODE",{});var SP=l($p);E4=e(SP,"case"),SP.forEach(a),v4=e(d," 블록에 쓰인 채널 중 읽기/쓰기가 가능한 채널이 여러 개라면 그중 무작위로 하나를 골라 "),Kp=p(d,"CODE",{});var hP=l(Kp);_4=e(hP,"case"),hP.forEach(a),b4=e(d,` 블록을 실행한다.
다시 말해 `),Yp=p(d,"CODE",{});var WP=l(Yp);w4=e(WP,"select"),WP.forEach(a),y4=e(d,"문에서 "),Jp=p(d,"CODE",{});var IP=l(Jp);C4=e(IP,"case"),IP.forEach(a),m4=e(d,` 블록의 순서는 중요치 않은 것이다.
이렇게 무작위적으로 `),Vp=p(d,"CODE",{});var UP=l(Vp);O4=e(UP,"case"),UP.forEach(a),D4=e(d," 블록을 채택하는 방식 때문에 "),zp=p(d,"EM",{});var NP=l(zp);P4=e(NP,"starvation"),NP.forEach(a),R4=e(d,"이 발생하지 않게 된다."),d.forEach(a),Hf=i(n),Ns=p(n,"P",{});var e3=l(Ns);x4=e(e3,"일관성 없는 순서로 lock을 획득하는 것은 데드락을 발생시키는 가장 흔한 원인 중 하나인데, "),Qp=p(e3,"CODE",{});var qP=l(Qp);G4=e(qP,"select"),qP.forEach(a),T4=e(e3,`문의 무작위성은 이를 방지한다.
가령, 두 채널에 동시에 액세스하는 두 개의 고루틴이 있다고 하자.
이들은 정해진 순서로 채널에 액세스해야만 하고, 그렇지 않으면 데드락이 발생한다.
만약 Go 프로세스에 데드락이 발생하면, Go 런타임은 프로그램을 강제로 종료할 것이다.`),e3.forEach(a),Lf=i(n),nt=p(n,"PRE",{class:!0});var VA=l(nt);VA.forEach(a),Sf=i(n),ue=p(n,"P",{});var FP=l(ue);B4=e(FP,"이렇게 작성된 코드를 실행하면 아래처럼 에러가 발생한다."),FP.forEach(a),hf=i(n),st=p(n,"PRE",{class:!0});var zA=l(st);zA.forEach(a),Wf=i(n),Wn=p(n,"P",{});var Nt=l(Wn);jp=p(Nt,"CODE",{});var ZP=l(jp);A4=e(ZP,"main()"),ZP.forEach(a),M4=e(Nt,` 함수가 돌아가는 함수도 고루틴이므로, 위 예제에선 총 두 개의 고루틴이 돌아간다.
생성된 고루틴의 경우 `),Xp=p(Nt,"CODE",{});var $P=l(Xp);H4=e($P,"ch1"),$P.forEach(a),L4=e(Nt,"이 읽히기 전까지, main 고루틴의 경우 "),gp=p(Nt,"CODE",{});var KP=l(gp);S4=e(KP,"ch2"),KP.forEach(a),h4=e(Nt,`가 읽히기 전까지 멈춘다.
이 때 모든 고루틴이 멈춘 상태가 되어 데드락이 발생하게 되고, Go 런타임은 이를 감지한 것이다.`),Nt.forEach(a),If=i(n),Uf=p(n,"BR",{}),Nf=i(n),qs=p(n,"P",{});var o3=l(qs);W4=e(o3,"위 예제에 "),nl=p(o3,"CODE",{});var YP=l(nl);I4=e(YP,"select"),YP.forEach(a),U4=e(o3,"문을 적절히 사용해보자."),o3.forEach(a),qf=i(n),at=p(n,"PRE",{class:!0});var QA=l(at);QA.forEach(a),Ff=i(n),A=p(n,"P",{});var Dn=l(A);N4=e(Dn,"위 예제처럼 "),sl=p(Dn,"CODE",{});var JP=l(sl);q4=e(JP,"select"),JP.forEach(a),F4=e(Dn,"문은 내의 수행 가능한 "),al=p(Dn,"CODE",{});var VP=l(al);Z4=e(VP,"case"),VP.forEach(a),$4=e(Dn,` 블록만 골라서 실행하기 때문에 데드락을 회피할 수 있다.
생성된 고루틴에서 `),tl=p(Dn,"CODE",{});var zP=l(tl);K4=e(zP,"ch1"),zP.forEach(a),Y4=e(Dn,"에 1을 집어넣었기 때문에 main 고루틴에서는 "),el=p(Dn,"CODE",{});var QP=l(el);J4=e(QP,"ch1"),QP.forEach(a),V4=e(Dn,"에서 "),ol=p(Dn,"CODE",{});var jP=l(ol);z4=e(jP,"v2"),jP.forEach(a),Q4=e(Dn,"로 값을 읽어올 수 있었고, main 고루틴이 성공적으로 실행된 것이다."),Dn.forEach(a),Zf=i(n),$f=p(n,"BR",{}),Kf=i(n),us=p(n,"P",{});var Ti=l(us);pl=p(Ti,"CODE",{});var XP=l(pl);j4=e(XP,"select"),XP.forEach(a),X4=e(Ti,"는 여러 개의 채널에서 사용될 수 있기 때문에, "),ll=p(Ti,"CODE",{});var gP=l(ll);g4=e(gP,"for"),gP.forEach(a),n0=e(Ti," 루프와 같이 종종 사용된다."),Ti.forEach(a),Yf=i(n),tt=p(n,"PRE",{class:!0});var jA=l(tt);jA.forEach(a),Jf=i(n),Zn=p(n,"P",{});var Ye=l(Zn);s0=e(Ye,"매우 자주 사용되는 조합인지라 "),cl=p(Ye,"CODE",{});var nR=l(cl);a0=e(nR,"for-select"),nR.forEach(a),t0=e(Ye,` 루프라고도 한다.
`),ul=p(Ye,"CODE",{});var sR=l(ul);e0=e(sR,"for-select"),sR.forEach(a),o0=e(Ye," 루프를 사용할 때는 반드시 루프에서 빠져나갈 수 있게끔 해주어야 한다."),Ye.forEach(a),Vf=i(n),zf=p(n,"BR",{}),Qf=i(n),D=p(n,"P",{});var j=l(D);rl=p(j,"CODE",{});var aR=l(rl);p0=e(aR,"switch"),aR.forEach(a),l0=e(j,"문처럼 "),il=p(j,"CODE",{});var tR=l(il);c0=e(tR,"select"),tR.forEach(a),u0=e(j,"문도 "),kl=p(j,"CODE",{});var eR=l(kl);r0=e(eR,"default"),eR.forEach(a),i0=e(j,"절을 넣을 수 있으며, "),fl=p(j,"CODE",{});var oR=l(fl);k0=e(oR,"case"),oR.forEach(a),f0=e(j," 블록 중 읽기/쓰기가 가능한 채널이 없는 경우 "),dl=p(j,"CODE",{});var pR=l(dl);d0=e(pR,"default"),pR.forEach(a),E0=e(j,`절이 실행된다.
따라서 채널의 읽기/쓰기를 nonblocking으로 만들고자 하는 경우, `),El=p(j,"CODE",{});var lR=l(El);v0=e(lR,"select"),lR.forEach(a),_0=e(j,"문에 "),vl=p(j,"CODE",{});var cR=l(vl);b0=e(cR,"default"),cR.forEach(a),w0=e(j,"절을 포함하면 된다."),j.forEach(a),jf=i(n),et=p(n,"PRE",{class:!0});var XA=l(et);XA.forEach(a),Xf=i(n),$n=p(n,"P",{});var Je=l($n);y0=e(Je,"위 예제의 경우 "),_l=p(Je,"CODE",{});var uR=l(_l);C0=e(uR,"ch"),uR.forEach(a),m0=e(Je,"에 읽어올 값이 없다면, 기다리지 않고 바로 "),bl=p(Je,"CODE",{});var rR=l(bl);O0=e(rR,"default"),rR.forEach(a),D0=e(Je,"절을 실행한다."),Je.forEach(a),gf=i(n),n1=p(n,"BR",{}),s1=i(n),In=p(n,"P",{});var qt=l(In);wl=p(qt,"CODE",{});var iR=l(wl);P0=e(iR,"for-select"),iR.forEach(a),R0=e(qt," 루프에 "),yl=p(qt,"CODE",{});var kR=l(yl);x0=e(kR,"default"),kR.forEach(a),G0=e(qt,` 절을 사용하면 읽거나 쓸 채널이 없으면 루프를 통해 매번 트리거된다.
따라서 `),Cl=p(qt,"CODE",{});var fR=l(Cl);T0=e(fR,"for"),fR.forEach(a),B0=e(qt," 루프가 지속적으로 돌기 때문에, 프로세싱 파워를 상당히 많이 잡아먹게 된다."),qt.forEach(a),a1=i(n),t1=p(n,"BR",{}),e1=p(n,"BR",{}),o1=i(n),Fs=p(n,"H2",{id:!0});var kO=l(Fs);Zs=p(kO,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var dR=l(Zs);ml=p(dR,"SPAN",{class:!0}),l(ml).forEach(a),dR.forEach(a),A0=e(kO,"Concurrency Practices and Patterns"),kO.forEach(a),p1=i(n),l1=p(n,"HR",{}),c1=i(n),$s=p(n,"H3",{id:!0});var fO=l($s);Ks=p(fO,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var ER=l(Ks);Ol=p(ER,"SPAN",{class:!0}),l(Ol).forEach(a),ER.forEach(a),M0=e(fO,"Keep Your APIs Concurrency-Free"),fO.forEach(a),u1=i(n),re=p(n,"P",{});var vR=l(re);H0=e(vR,`API에는 구체적인 설계 내용을 가능한 한 숨겨야 하며, 동시성은 설계 단계에서 적용되는 것이기에 API에는 동시성에 관한 내용이 생략된다.
따라서 코드가 호출되는 방식을 변경하지 않고 코드를 변경할 수 있다.`),vR.forEach(a),r1=i(n),Ys=p(n,"P",{});var p3=l(Ys);L0=e(p3,`API의 타입, 함수, 메소드에 채널이나 뮤텍스를 노출시키지 않아야 함을 의미한다.
만약 채널을 노출하게 되면 API 사용자에게 채널에 대한 관리의 책임을 맡기게 되는 것이다.
그렇게 되면 사용자 입장에서 채널이 열려 있는지, 닫혀 있는지, 혹은 `),Dl=p(p3,"CODE",{});var _R=l(Dl);S0=e(_R,"nil"),_R.forEach(a),h0=e(p3,`인지 고민할 필요가 생긴다.
또한 사용자가 뮤텍스나 채널에 잘못된 순서로 접근하여 데드락을 일으킬 수도 있다.`),p3.forEach(a),i1=i(n),ie=p(n,"P",{});var bR=l(ie);W0=e(bR,`채널을 함수의 매개 변수나 구조체의 필드 타입으로 사용해서는 안되는 것은 아니다.
이렇게 설정된 함수나 구조체를 export하면 안된다는 의미이다.`),bR.forEach(a),k1=i(n),ke=p(n,"P",{});var wR=l(ke);I0=e(wR,`다만 이러한 규칙의 예외가 몇 개 존재한다.
우리가 만든 API가 동시성에 관련된 라이브러리라면, 채널이 API의 일부가 될 수 있다.`),wR.forEach(a),f1=i(n),d1=p(n,"BR",{}),E1=p(n,"BR",{}),v1=i(n),Js=p(n,"H3",{id:!0});var dO=l(Js);Vs=p(dO,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var yR=l(Vs);Pl=p(yR,"SPAN",{class:!0}),l(Pl).forEach(a),yR.forEach(a),U0=e(dO,"Goroutines, for Loops, and Varying Variables"),dO.forEach(a),_1=i(n),zs=p(n,"P",{});var l3=l(zs);N0=e(l3,`고루틴을 생성하기 위해 사용된 closure는 대부분 파라미터를 가지지 않고, 해당 환경에서 선언된 변수들을 캡쳐하여 사용한다.
하지만 `),Rl=p(l3,"CODE",{});var CR=l(Rl);q0=e(CR,"for"),CR.forEach(a),F0=e(l3,"문의 인덱스나 값을 저장하는 변수를 캡쳐하려고 하면 문제가 발생한다."),l3.forEach(a),b1=i(n),ot=p(n,"PRE",{class:!0});var gA=l(ot);gA.forEach(a),w1=i(n),kn=p(n,"P",{});var Ma=l(kn);Z0=e(Ma,"위 예제에서 "),xl=p(Ma,"CODE",{});var mR=l(xl);$0=e(mR,"a"),mR.forEach(a),K0=e(Ma,"에 저장된 값들로 "),Gl=p(Ma,"CODE",{});var OR=l(Gl);Y0=e(OR,"v"),OR.forEach(a),J0=e(Ma," 이터레이션을 돌기 때문에, "),Tl=p(Ma,"CODE",{});var DR=l(Tl);V0=e(DR,"ch"),DR.forEach(a),z0=e(Ma,`에는 각각 4, 8, 12, 16, 20이 저장되어야 할 것이다.
위와 같은 함수를 실행하면 아래와 같은 결과를 출력한다.`),Ma.forEach(a),y1=i(n),pt=p(n,"PRE",{class:!0});var nM=l(pt);nM.forEach(a),C1=i(n),fn=p(n,"P",{});var Ha=l(fn);Q0=e(Ha,"이와 같은 출력은 모든 고루틴이 "),Bl=p(Ha,"CODE",{});var PR=l(Bl);j0=e(PR,"ch"),PR.forEach(a),X0=e(Ha,`에 20을 썼기 때문에 발생한 결과인데, closure가 동일한 변수를 캡쳐하였기 때문이다.
`),Al=p(Ha,"CODE",{});var RR=l(Al);g0=e(RR,"for"),RR.forEach(a),n6=e(Ha,` 루프의 인덱스나 값을 저장하는 변수는 매 이터레이션마다 재사용된다.
이 때 마지막으로 `),Ml=p(Ha,"CODE",{});var xR=l(Ml);s6=e(xR,"v"),xR.forEach(a),a6=e(Ha,"에 할당된 값은 10이며, 이 값이 고루틴에서 보게 되는 값이다."),Ha.forEach(a),m1=i(n),Qs=p(n,"P",{});var c3=l(Qs);t6=e(c3,"사실 이는 "),Hl=p(c3,"CODE",{});var GR=l(Hl);e6=e(GR,"for"),GR.forEach(a),o6=e(c3,`문만의 문제는 아니며, 값이 변경될 수 있는 변수들은 값이 달라질 때마다 고루틴에 값을 전달해야 한다.
두 가지 방법이 있는데, 첫 번째 방법은 loop에서 값을 shadowing하는 것이다.`),c3.forEach(a),O1=i(n),lt=p(n,"PRE",{class:!0});var sM=l(lt);sM.forEach(a),D1=i(n),fe=p(n,"P",{});var TR=l(fe);p6=e(TR,"만약 shadowing보다 데이터의 흐름을 명확하게 보고 싶다면, 고루틴의 파라미터로 값을 넘기는 방법도 있다."),TR.forEach(a),P1=i(n),ct=p(n,"PRE",{class:!0});var aM=l(ct);aM.forEach(a),R1=i(n),de=p(n,"P",{});var BR=l(de);l6=e(BR,"위 예제를 실행하면 아래와 같은 결과를 확인할 수 있다. 다만 동시성의 특성상 일정한 순서대로 출력되지는 않는다."),BR.forEach(a),x1=i(n),ut=p(n,"PRE",{class:!0});var tM=l(ut);tM.forEach(a),G1=i(n),T1=p(n,"BR",{}),B1=p(n,"BR",{}),A1=i(n),js=p(n,"H3",{id:!0});var EO=l(js);Xs=p(EO,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var AR=l(Xs);Ll=p(AR,"SPAN",{class:!0}),l(Ll).forEach(a),AR.forEach(a),c6=e(EO,"Always Clean Up Your Goroutines"),EO.forEach(a),M1=i(n),gs=p(n,"P",{});var u3=l(gs);u6=e(u3,`새로 생성된 고루틴은 반드시 끝나야 한다.
사용되지 않는 변수 가비지 콜렉터에 의해 정리가 되지만, 다시 사용되지 않는 고루틴은 Go runtime이 탐지할 수 없다.
끝나지 않는 고루틴에도 스케줄러는 해당 고루틴이 실행될(실제로는 아무것도 하지 않는) 시간을 할당하기 때문에 프로그램이 느려질 수 있다.
이를 `),Sl=p(u3,"EM",{});var MR=l(Sl);r6=e(MR,"goroutine leak"),MR.forEach(a),i6=e(u3,"라고 한다."),u3.forEach(a),H1=i(n),Ee=p(n,"P",{});var HR=l(Ee);k6=e(HR,"아래 예제를 확인해 보자."),HR.forEach(a),L1=i(n),rt=p(n,"PRE",{class:!0});var eM=l(rt);eM.forEach(a),S1=i(n),ve=p(n,"P",{});var LR=l(ve);f6=e(LR,"먼저, 얘는 그냥 단순한 예제일 뿐이니까 이렇게 하지 말자. 이렇게 숫자들 리스트 만드는 간단한 작업에 고루틴을 쓰면 안된다."),LR.forEach(a),h1=i(n),_e=p(n,"P",{});var SR=l(_e);d6=e(SR,`위 예제의 대부분 경우에서는 모든 값을 사용하면 고루틴이 끝난다.
다만 만약 반복문이 일찍 끝난다면, 해당 고루틴은 값이 읽힐 때까지 영원히 기다리게 된다.`),SR.forEach(a),W1=i(n),it=p(n,"PRE",{class:!0});var oM=l(it);oM.forEach(a),I1=i(n),U1=p(n,"BR",{}),N1=p(n,"BR",{}),q1=i(n),na=p(n,"H3",{id:!0});var vO=l(na);sa=p(vO,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var hR=l(sa);hl=p(hR,"SPAN",{class:!0}),l(hl).forEach(a),hR.forEach(a),E6=e(vO,"The Done Channel Pattern"),vO.forEach(a),F1=i(n),kt=p(n,"P",{});var _O=l(kt);Wl=p(_O,"EM",{});var WR=l(Wl);v6=e(WR,"done channel pattern"),WR.forEach(a),_6=e(_O,`은 채널을 사용하여 고루틴에게 프로세싱을 멈추라는 신호를 보내는 방법을 제공한다.
아래 예제에서는 여러 개의 동일한 함수에 동일한 데이터를 보내고, 가장 먼저 결과를 낸 함수의 값을 사용한다.`),_O.forEach(a),Z1=i(n),ft=p(n,"PRE",{class:!0});var pM=l(ft);pM.forEach(a),$1=i(n),C=p(n,"P",{});var F=l(C);b6=e(F,"위 예제에서 "),Il=p(F,"CODE",{});var IR=l(Il);w6=e(IR,"done"),IR.forEach(a),y6=e(F,"이라는 채널을 선언했고, 해당 채널의 타입은 "),Ul=p(F,"CODE",{});var UR=l(Ul);C6=e(UR,"struct{}"),UR.forEach(a),m6=e(F,`이다.
이때 타입의 종류는 상관없기 때문에 가장 용량이 작은 `),Nl=p(F,"CODE",{});var NR=l(Nl);O6=e(NR,"struct{}"),NR.forEach(a),D6=e(F,`를 사용하며, 이 채널에는 쓰기를 하지 않고, 오직 닫기만 한다.
함수의 파라미터로 넘어온 각 `),ql=p(F,"CODE",{});var qR=l(ql);P6=e(qR,"searcher"),qR.forEach(a),R6=e(F,`마다 worker 고루틴을 생성한다.
worker 고루틴은 `),Fl=p(F,"CODE",{});var FR=l(Fl);x6=e(FR,"select"),FR.forEach(a),G6=e(F,"문으로 "),Zl=p(F,"CODE",{});var ZR=l(Zl);T6=e(ZR,"searcher"),ZR.forEach(a),B6=e(F,"가 반환한 채널에서 읽기가 가능해지거나, "),$l=p(F,"CODE",{});var $R=l($l);A6=e($R,"done"),$R.forEach(a),M6=e(F," 채널에서 읽기가 가능해질 때까지 기다린다."),F.forEach(a),K1=i(n),dn=p(n,"P",{});var La=l(dn);H6=e(La,`이때 열려있는 채널에서 값을 읽어오려면 읽어올 데이터가 존재할 때까지 기다리게 되며,
닫혀 있는 채널이라면 항상 해당 타입의 Zero value를 반환한다.
따라서 위 예제의 `),Kl=p(La,"CODE",{});var KR=l(Kl);L6=e(KR,"select"),KR.forEach(a),S6=e(La,"문에서는 "),Yl=p(La,"CODE",{});var YR=l(Yl);h6=e(YR,"searcher"),YR.forEach(a),W6=e(La,"가 값을 읽어오거나 "),Jl=p(La,"CODE",{});var JR=l(Jl);I6=e(JR,"done"),JR.forEach(a),U6=e(La," 채널이 닫힐 때까지 대기하게 된다."),La.forEach(a),Y1=i(n),En=p(n,"P",{});var Sa=l(En);N6=e(Sa,"예제의 "),Vl=p(Sa,"CODE",{});var VR=l(Vl);q6=e(VR,"searchData"),VR.forEach(a),F6=e(Sa," 함수에서 데이터를 읽어오면 "),zl=p(Sa,"CODE",{});var zR=l(zl);Z6=e(zR,"result"),zR.forEach(a),$6=e(Sa," 채널에 값을 쓸 것이고, 그러면 "),Ql=p(Sa,"CODE",{});var QR=l(Ql);K6=e(QR,"done"),QR.forEach(a),Y6=e(Sa,`을 닫을 것이다.
따라서 아직 실행중인 고루틴들이 닫힐 것이고 goroutine leaking이 발생하지 않을 것이다.`),Sa.forEach(a),J1=i(n),V1=p(n,"BR",{}),z1=p(n,"BR",{}),Q1=i(n),aa=p(n,"H3",{id:!0});var bO=l(aa);ta=p(bO,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var jR=l(ta);jl=p(jR,"SPAN",{class:!0}),l(jl).forEach(a),jR.forEach(a),J6=e(bO,"Using a Cancel Function to Terminate a Goroutine"),bO.forEach(a),j1=i(n),be=p(n,"P",{});var XR=l(be);V6=e(XR,"done channel 패턴을 사용하여 고루틴을 중지시키는 함수를 작성할 수 있다."),XR.forEach(a),X1=i(n),ea=p(n,"P",{});var r3=l(ea);z6=e(r3,"앞선 "),Xl=p(r3,"CODE",{});var gR=l(Xl);Q6=e(gR,"countTo"),gR.forEach(a),j6=e(r3," 예제로 돌아가보자."),r3.forEach(a),g1=i(n),dt=p(n,"PRE",{class:!0});var lM=l(dt);lM.forEach(a),nd=i(n),pn=p(n,"P",{});var ks=l(pn);gl=p(ks,"CODE",{});var nx=l(gl);X6=e(nx,"countTo"),nx.forEach(a),g6=e(ks," 두 개의 채널을 생성한다. 한 개는 데이터를를 반환하기 위한 것이고, 하나는 "),nc=p(ks,"CODE",{});var sx=l(nc);n7=e(sx,"done"),sx.forEach(a),s7=e(ks,` 신호를 위함이다.
이 때 `),sc=p(ks,"CODE",{});var ax=l(sc);a7=e(ax,"done"),ax.forEach(a),t7=e(ks," 채널을 직접 반환하기보단, "),ac=p(ks,"CODE",{});var tx=l(ac);e7=e(tx,"done"),tx.forEach(a),o7=e(ks,` 채널을 닫는 closure를 생성하여 반환하는 편이 좋다.
이렇게 closure를 반환하면 추가적인 작업이 필요한 경우 구현하기 용이하다.`),ks.forEach(a),sd=i(n),ad=p(n,"BR",{}),td=p(n,"BR",{}),ed=i(n),oa=p(n,"H3",{id:!0});var wO=l(oa);pa=p(wO,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var ex=l(pa);tc=p(ex,"SPAN",{class:!0}),l(tc).forEach(a),ex.forEach(a),p7=e(wO,"When to Use Buffered and Unbuffered Channels"),wO.forEach(a),od=i(n),we=p(n,"P",{});var ox=l(we);l7=e(ox,`Go에서 숙달해야 할 동시성 문제중 가장 복잡한 문제는 언제 buffered channel을 사용해야할지 결정하는 것이다.
기본적으로 채널은 버퍼링이 되지 않으며, 복잡하지 않기 때문에 이해하기 쉽다.
한 고루틴이 값을 읽거나 쓰면 다른 고루틴이 값을 쓰거나 읽을 때까지 대기하는 구조이며, 일종의 계주 경기의 바톤같은 느낌이다.`),ox.forEach(a),pd=i(n),ye=p(n,"P",{});var px=l(ye);c7=e(px,`반면 buffered channel은 더 복잡하다.
buffered channel의 크기는 무한하지 않기 때문에 버퍼의 크기를 결정해야 한다.
buffered channel을 적절하게 사용한다는 것은 버퍼가 가득 차있고, 값을 읽는 고루틴이 값을 읽기까지 기다리는 값을 쓰는 고루틴이 존재함을 의미한다.
보다 구체적으로, 실행할 고루틴 수를 알고 있거나, 실행할 고루틴 수를 제한하고 싶거나, 큐에서 대기 중인 작업의 양을 제한하고 싶을 때 유용하다.`),px.forEach(a),ld=i(n),Ce=p(n,"P",{});var lx=l(Ce);u7=e(lx,`채널에서 10개의 결과물을 처리하는 예제가 있다.
이 예제에서는 10개의 고루틴을 생성하여 buffered channel에 값을 쓸 것이다.`),lx.forEach(a),cd=i(n),Et=p(n,"PRE",{class:!0});var cM=l(Et);cM.forEach(a),ud=i(n),me=p(n,"P",{});var cx=l(me);r7=e(cx,`위 예제에서는 우리는 정확히 10개의 고루틴이 생성된다는 것을 알고 있고, 또한 각 고루틴은 작업이 끝나면 사라지기를 원한다.
이런 경우 우리는 생성할 고루틴의 개수만큼의 크기를 갖는 buffered channel을 생성할 수 있고, 각 고루틴은 blocking 없이 데이터를 write할 수 있다.
또한 buffered channel을 통해 루프를 돌 수 있고, 채널에 값이 쓰일 때마다 읽어올 수 있다.
만약 모든 값이 읽혔다면 결과값을 반환하여 goroutine leaking을 방지할 수 있다.`),cx.forEach(a),rd=i(n),id=p(n,"BR",{}),kd=p(n,"BR",{}),fd=i(n),la=p(n,"H3",{id:!0});var yO=l(la);ca=p(yO,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var ux=l(ca);ec=p(ux,"SPAN",{class:!0}),l(ec).forEach(a),ux.forEach(a),i7=e(yO,"Backpressure"),yO.forEach(a),dd=i(n),Kn=p(n,"P",{});var Ve=l(Kn);k7=e(Ve,"buffered channel을 통해 구현할 수 있는 또다른 기술은 "),oc=p(Ve,"STRONG",{});var rx=l(oc);f7=e(rx,"Backpressure"),rx.forEach(a),d7=e(Ve,`이다.
이는 직관적이지는 않지만, 각 구성 요소가 수행하는 작업의 양을 제한할 때 시스템이 전반적으로 잘 돌아가게 된다.
우리는 buffered channel과 `),pc=p(Ve,"CODE",{});var ix=l(pc);E7=e(ix,"select"),ix.forEach(a),v7=e(Ve,"문을 통해 시스템에서 동시 요청을 제한할 수 있다."),Ve.forEach(a),Ed=i(n),vt=p(n,"PRE",{class:!0});var uM=l(vt);uM.forEach(a),vd=i(n),an=p(n,"P",{});var ts=l(an);_7=e(ts,"이 코드에는 여러 개의 "),lc=p(ts,"EM",{});var kx=l(lc);b7=e(kx,"토큰"),kx.forEach(a),w7=e(ts,`과 버퍼링된 채널이 포함된 만든다.
기능을 사용하기 위해 고루틴이 생성될 때마다 `),cc=p(ts,"CODE",{});var fx=l(cc);y7=e(fx,"Process()"),fx.forEach(a),C7=e(ts,` 함수를 생성한다.
`),uc=p(ts,"CODE",{});var dx=l(uc);m7=e(dx,"select"),dx.forEach(a),O7=e(ts,`문에서는 채널으로부터 토큰을 읽으려고 시도하며, 가능하다면 함수가 실행되고 토큰이 bufferec channel에 write된다.
만약 읽을 수 없다면 `),rc=p(ts,"CODE",{});var Ex=l(rc);D7=e(Ex,"default"),Ex.forEach(a),P7=e(ts," 블록이 실행되고 에러가 반환된다."),ts.forEach(a),_d=i(n),Oe=p(n,"P",{});var vx=l(Oe);R7=e(vx,"아래 예제는 빌트인 HTTP 함수의 사용 예제이다."),vx.forEach(a),bd=i(n),_t=p(n,"PRE",{class:!0});var rM=l(_t);rM.forEach(a),wd=i(n),yd=p(n,"BR",{}),Cd=p(n,"BR",{}),md=i(n),ua=p(n,"H3",{id:!0});var CO=l(ua);ra=p(CO,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var _x=l(ra);ic=p(_x,"SPAN",{class:!0}),l(ic).forEach(a),_x.forEach(a),x7=e(CO,"Turning Off a case in a select"),CO.forEach(a),Od=i(n),tn=p(n,"P",{});var es=l(tn);G7=e(es,"여러 가지 데이터 근원에서 동시에 데이터를 받아 합치고 싶은 경우, "),kc=p(es,"CODE",{});var bx=l(kc);T7=e(bx,"select"),bx.forEach(a),B7=e(es,` 키워드를 사용하면 좋다.
하지만 닫혀 있는 채널의 경우 적절하게 다루어 주어야 한다.
만약 `),fc=p(es,"CODE",{});var wx=l(fc);A7=e(wx,"select"),wx.forEach(a),M7=e(es,"문 내의 "),dc=p(es,"CODE",{});var yx=l(dc);H7=e(yx,"case"),yx.forEach(a),L7=e(es,`중에서 한 개라도 닫혀 있는 채널로부터 읽기를 시도한다면, 성공적으로 읽겠지만 반드시 Zero value를 얻게 된다.
따라서 해당 `),Ec=p(es,"CODE",{});var Cx=l(Ec);S7=e(Cx,"case"),Cx.forEach(a),h7=e(es,` 블록이 선택될 때마다 해당 값이 유효한지 검사하여, 유효하지 않다면 건너뛰어야 한다.
읽기에 공백이 있으면 프로그램은 쓰레기 값을 읽느라 많은 시간을 사용하게 된다.`),es.forEach(a),Dd=i(n),M=p(n,"P",{});var Pn=l(M);W7=e(Pn,"앞서 보았듯 "),vc=p(Pn,"CODE",{});var mx=l(vc);I7=e(mx,"nil"),mx.forEach(a),U7=e(Pn,` 채널로부터 읽기를 시도하면 코드가 여전히 멈추게 된다.
만약 버그 때문에 그렇게 된거라면 상당히 마음아픈 일이지만, `),_c=p(Pn,"CODE",{});var Ox=l(_c);N7=e(Ox,"select"),Ox.forEach(a),q7=e(Pn,"문의 "),bc=p(Pn,"CODE",{});var Dx=l(bc);F7=e(Dx,"case"),Dx.forEach(a),Z7=e(Pn,` 블록을 비활성화하기 위해 사용할 수도 있다.
만약 닫혀 있는 채널을 탐지하여 `),wc=p(Pn,"CODE",{});var Px=l(wc);$7=e(Px,"nil"),Px.forEach(a),K7=e(Pn,"로 설정한다면 연관된 "),yc=p(Pn,"CODE",{});var Rx=l(yc);Y7=e(Rx,"case"),Rx.forEach(a),J7=e(Pn," 블록은 값을 더이상 읽거나 쓸 수 없기 때문에 비활성화된다."),Pn.forEach(a),Pd=i(n),bt=p(n,"PRE",{class:!0});var iM=l(bt);iM.forEach(a),Rd=i(n),xd=p(n,"BR",{}),Gd=p(n,"BR",{}),Td=i(n),ia=p(n,"H3",{id:!0});var mO=l(ia);ka=p(mO,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var xx=l(ka);Cc=p(xx,"SPAN",{class:!0}),l(Cc).forEach(a),xx.forEach(a),V7=e(mO,"Timeout"),mO.forEach(a),Bd=i(n),De=p(n,"P",{});var Gx=l(De);z7=e(Gx,`웹 서비스 등, 인터랙티브한 프로그램들은 일정 시간이 지나기 전에 결과를 리턴해야 한다.
이를 위해 Go에서는 요청이 들어왔을 때 얼마만큼의 시간을 부여할 것인지 설정할 수 있다.
다른 언어는 이 기능을 구현하기 위해 특수한 문법을 사용하지만, Go의 타임아웃 처리는 비교적 간단하다.`),Gx.forEach(a),Ad=i(n),wt=p(n,"PRE",{class:!0});var kM=l(wt);kM.forEach(a),Md=i(n),Pe=p(n,"P",{});var Tx=l(Pe);Q7=e(Tx,"수행 시간에 제한을 두려고 하는 경우, 위와 같은 패턴을 자주 접하게 될 것이다."),Tx.forEach(a),Hd=i(n),H=p(n,"P",{});var Rn=l(H);j7=e(Rn,"위 예제에서는 "),mc=p(Rn,"CODE",{});var Bx=l(mc);X7=e(Bx,"select"),Bx.forEach(a),g7=e(Rn,"문을 사용하여 두 가지 "),Oc=p(Rn,"CODE",{});var Ax=l(Oc);n8=e(Ax,"case"),Ax.forEach(a),s8=e(Rn,` 블록으로 구분하였다.
첫 번째 `),Dc=p(Rn,"CODE",{});var Mx=l(Dc);a8=e(Mx,"case"),Mx.forEach(a),t8=e(Rn,`는 done channel을 사용하여 일정 시간 내에 결과를 받아올 경우, 결과를 리턴한다.
두 번째 `),Pc=p(Rn,"CODE",{});var Hx=l(Pc);e8=e(Hx,"case"),Hx.forEach(a),o8=e(Rn,"에서는 "),Rc=p(Rn,"CODE",{});var Lx=l(Rc);p8=e(Lx,"time.After()"),Lx.forEach(a),l8=e(Rn," 함수를 이용하여 시간 제한을 카운팅하고, 일정 시간이 지나면 타임아웃 에러를 리턴한다."),Rn.forEach(a),Ld=i(n),Yn=p(n,"P",{});var ze=l(Yn);c8=e(ze,"만약 위 예제에서 고루틴을 마치기 전에 "),xc=p(ze,"CODE",{});var Sx=l(xc);u8=e(Sx,"timeLimit()"),Sx.forEach(a),r8=e(ze,` 함수를 끝낼 경우,
고루틴은 계속 돌아가다가 결국 어떤 값을 반환하겠지만 그 값에 대해 아무것도 하지 않는다.
만약 고루틴이 계속 돌아가는 것을 원치 않고 고루틴을 종료하고 싶다면 나중에 나올 `),Gc=p(ze,"EM",{});var hx=l(Gc);i8=e(hx,"context cancellation"),hx.forEach(a),k8=e(ze,"을 확인하자."),ze.forEach(a),Sd=i(n),hd=p(n,"BR",{}),Wd=p(n,"BR",{}),Id=i(n),fa=p(n,"H3",{id:!0});var OO=l(fa);da=p(OO,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Wx=l(da);Tc=p(Wx,"SPAN",{class:!0}),l(Tc).forEach(a),Wx.forEach(a),f8=e(OO,"Using WaitGroups"),OO.forEach(a),Ud=i(n),Ea=p(n,"P",{});var i3=l(Ea);d8=e(i3,`여러 개의 고루틴이 끝날 때까지 한 고루틴이 이들을 기다려야 하는 경우가 있다.
단 한 개의 고루틴을 기다려야 하는 경우라면, 단순히 이전에 봤던 done channel pattern을 사용하면 된다.
하지만 여러 개의 고루틴을 기다려야 한다면 표준 라이브러리의 `),Bc=p(i3,"CODE",{});var Ix=l(Bc);E8=e(Ix,"sync.waitGroup"),Ix.forEach(a),v8=e(i3,"을 사용하는 게 좋다."),i3.forEach(a),Nd=i(n),yt=p(n,"PRE",{class:!0});var fM=l(yt);fM.forEach(a),qd=i(n),b=p(n,"P",{});var T=l(b);Ac=p(T,"CODE",{});var Ux=l(Ac);_8=e(Ux,"sync.WaitGroup"),Ux.forEach(a),b8=e(T,`은 초기화할 필요가 없고, Zero value인 상태로 사용해도 무방하다.
`),Mc=p(T,"CODE",{});var Nx=l(Mc);w8=e(Nx,"sync.WaitGroup"),Nx.forEach(a),y8=e(T,"의 메소드 "),Hc=p(T,"CODE",{});var qx=l(Hc);C8=e(qx,"Add()"),qx.forEach(a),m8=e(T,"를 통해 기다려야 할 고루틴의 개수를 명시하고, 고루틴이 끝날때마다 "),Lc=p(T,"CODE",{});var Fx=l(Lc);O8=e(Fx,"Done()"),Fx.forEach(a),D8=e(T,` 메소드로 카운터를 감소시켜준다.
`),Sc=p(T,"CODE",{});var Zx=l(Sc);P8=e(Zx,"Wait()"),Zx.forEach(a),R8=e(T," 메소드는 고루틴들이 끝날 때까지 기다리게 되며, 모든 고루틴이 끝나서 카운터가 0이 되면 "),hc=p(T,"CODE",{});var $x=l(hc);x8=e($x,"Wait()"),$x.forEach(a),G8=e(T,` 메소드 이하의 코드가 다시 실행된다.
만약 고루틴에서 panic이 발생하더라도 `),Wc=p(T,"CODE",{});var Kx=l(Wc);T8=e(Kx,"Done()"),Kx.forEach(a),B8=e(T," 메소드가 실행됨을 보장하기 위해 "),Ic=p(T,"CODE",{});var Yx=l(Ic);A8=e(Yx,"defer"),Yx.forEach(a),M8=e(T,"를 사용한다."),T.forEach(a),Fd=i(n),G=p(n,"P",{});var ln=l(G);Uc=p(ln,"CODE",{});var Jx=l(Uc);H8=e(Jx,"sync.WaitGroup"),Jx.forEach(a),L8=e(ln,` 자체를 파라미터로 넘겨선 안되는데, 여기에는 두 가지 이유가 있다.
먼저 `),Nc=p(ln,"CODE",{});var Vx=l(Nc);S8=e(Vx,"sync.WaitGroup"),Vx.forEach(a),h8=e(ln,`을 사용하려면 동일한 인스턴스를 사용해야 한다는 것이다.
만약 `),qc=p(ln,"CODE",{});var zx=l(qc);W8=e(zx,"sync.WaitGroup"),zx.forEach(a),I8=e(ln,"를 고루틴에 파라미터로 통과시키는데 포인터를 사용하지 않으면, 함수에서는 "),Fc=p(ln,"CODE",{});var Qx=l(Fc);U8=e(Qx,"sync.WaitGroup"),Qx.forEach(a),N8=e(ln,` 인스턴스를 복사하게 된다.
따라서 `),Zc=p(ln,"CODE",{});var jx=l(Zc);q8=e(jx,"Done()"),jx.forEach(a),F8=e(ln,` 함수가 본래 인스턴스의 카운터를 감소시키지 않는다.
이와 같은 이유로 예제에서는 closure를 통해 캡쳐하여 `),$c=p(ln,"CODE",{});var Xx=l($c);Z8=e(Xx,"sync.WaitGroup"),Xx.forEach(a),$8=e(ln,"의 동일한 인스턴스를 레퍼런스하게 했다."),ln.forEach(a),Zd=i(n),Re=p(n,"P",{});var gx=l(Re);K8=e(gx,`두 번째 이유는 디자인 측면이다. 동시성은 API 내부에서 유지되어야 하기 떄문이다.
채널을 다룰 때 보았듯, 고루틴을 사용하는 일반적인 패턴은 비즈니스 로직을 closure로 감싸서 고루틴을 생성하는 것이다.
closure는 동시성과 관련된 문제를 담당하며, 함수는 알고리즘을 제공한다.`),gx.forEach(a),$d=i(n),Kd=p(n,"BR",{}),Yd=i(n),xe=p(n,"P",{});var nG=l(xe);Y8=e(nG,`보다 현실적인 예제를 확인해보자.
앞서 언급했듯 여러 고루틴이 동일한 채널에 값을 써야 하는 경우, 그 채널이 한 번만 닫혔는지 확인해야 한다.
아래 예제의 함수는 채널의 값을 동시에 처리하여, 결과물들을 슬라이스로 모아 반환한다.`),nG.forEach(a),Jd=i(n),Ct=p(n,"PRE",{class:!0});var dM=l(Ct);dM.forEach(a),Vd=i(n),en=p(n,"P",{});var os=l(en);J8=e(os,`위 예제에서는 worker 고루틴 외에도, worker 고루틴들을 모니터링하는 고루틴을 생성한다.
worker 고루틴들의 `),Kc=p(os,"CODE",{});var sG=l(Kc);V8=e(sG,"Done()"),sG.forEach(a),z8=e(os," 메소드가 호출되면 모니터링 고루틴은 "),Yc=p(os,"CODE",{});var aG=l(Yc);Q8=e(aG,"close()"),aG.forEach(a),j8=e(os,`로 출력 채널을 닫는다.
버퍼가 비게 되거나 `),Jc=p(os,"CODE",{});var tG=l(Jc);X8=e(tG,"out"),tG.forEach(a),g8=e(os,"이 닫히면 "),Vc=p(os,"CODE",{});var eG=l(Vc);nb=e(eG,"for-range"),eG.forEach(a),sb=e(os," 루프도 멈추게 되고, 함수는 연산된 값을 반환한다."),os.forEach(a),zd=i(n),mt=p(n,"P",{});var DO=l(mt);zc=p(DO,"CODE",{});var oG=l(zc);ab=e(oG,"sync.WaitGroup"),oG.forEach(a),tb=e(DO,`는 참 편리하지만, 고루틴들을 관리할 때 최우선적으로 고려되어선 안된다.
고루틴들이 끝나면 결과를 기록하는 채널을 닫아야 하는 경우 등, 프로세스 이후 무언가를 청소해주어야 하는 때에 사용해주는 것이 좋다.`),DO.forEach(a),Qd=i(n),Ge=p(n,"BLOCKQUOTE",{});var pG=l(Ge);L=p(pG,"P",{});var cn=l(L);Qc=p(cn,"CODE",{});var lG=l(Qc);eb=e(lG,"gorang.org/x"),lG.forEach(a),ob=e(cn,"라는 라이브러리가 있는데, 이 라이브러리는 "),jc=p(cn,"CODE",{});var cG=l(jc);pb=e(cG,"ErrGroup"),cG.forEach(a),lb=e(cn,`라는 타입을 포함한다
`),Xc=p(cn,"CODE",{});var uG=l(Xc);cb=e(uG,"ErrGroup"),uG.forEach(a),ub=e(cn,"는 "),gc=p(cn,"CODE",{});var rG=l(gc);rb=e(rG,"WaitGroup"),rG.forEach(a),ib=e(cn,`을 기반으로 만들어져 있으며, 고루틴들 중 한 개라도 에러를 반환했을 때 처리를 중지한다.
`),nu=p(cn,"CODE",{});var iG=l(nu);kb=e(iG,"ErrGroup"),iG.forEach(a),fb=e(cn,"에 대해 알아보려면 "),Ot=p(cn,"A",{href:!0,rel:!0});var kG=l(Ot);db=e(kG,"여기"),kG.forEach(a),Eb=e(cn,"를 참조하자"),cn.forEach(a),pG.forEach(a),jd=i(n),Xd=p(n,"BR",{}),gd=p(n,"BR",{}),n2=i(n),va=p(n,"H3",{id:!0});var PO=l(va);_a=p(PO,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var fG=l(_a);su=p(fG,"SPAN",{class:!0}),l(su).forEach(a),fG.forEach(a),vb=e(PO,"Running Code Exactly Once"),PO.forEach(a),s2=i(n),S=p(n,"P",{});var xn=l(S);_b=e(xn,"앞선 포스트에서 보았던 "),au=p(xn,"CODE",{});var dG=l(au);bb=e(dG,"init"),dG.forEach(a),wb=e(xn,` 함수에 대해 기억할 것이다.
`),tu=p(xn,"CODE",{});var EG=l(tu);yb=e(EG,"init"),EG.forEach(a),Cb=e(xn,` 함수는 실질적으로 불변상태인 패키지 레벨의 변수를 초기화 할 때 유용하지만, 그 때를 제외하면 되도록이면 사용하지 않는 게 좋다.
한편 `),eu=p(xn,"EM",{});var vG=l(eu);mb=e(vG,"lazy loading"),vG.forEach(a),Ob=e(xn,`이 필요하거나, 초기화 코드를 프로그램 후 정확히 한 번만 실행해야 하는 경우가 있을 수 있다.
보통 초기화가 비교적 느리거나, 프로그램을 실행할 때마다 필요한 것이 아니기 때문에 그러하다.
`),ou=p(xn,"CODE",{});var _G=l(ou);Db=e(_G,"sync"),_G.forEach(a),Pb=e(xn," 패키지의 "),pu=p(xn,"CODE",{});var bG=l(pu);Rb=e(bG,"Once"),bG.forEach(a),xb=e(xn,` 타입으로 이러한 기능을 구현할 수 있다.
아래 예제를 살펴보자.`),xn.forEach(a),a2=i(n),Dt=p(n,"PRE",{class:!0});var EM=l(Dt);EM.forEach(a),t2=i(n),_=p(n,"P",{});var x=l(_);Gb=e(x,"위 예제의 패키지 레벨 변수는 "),lu=p(x,"CODE",{});var wG=l(lu);Tb=e(wG,"SlowComplicatedParser"),wG.forEach(a),Bb=e(x," 타입인 "),cu=p(x,"CODE",{});var yG=l(cu);Ab=e(yG,"parser"),yG.forEach(a),Mb=e(x,"와, "),uu=p(x,"CODE",{});var CG=l(uu);Hb=e(CG,"sync.Once"),CG.forEach(a),Lb=e(x,"타입인 "),ru=p(x,"CODE",{});var mG=l(ru);Sb=e(mG,"once"),mG.forEach(a),hb=e(x,`이다.
`),iu=p(x,"CODE",{});var OG=l(iu);Wb=e(OG,"sync.WaitGroup"),OG.forEach(a),Ib=e(x,"처럼 "),ku=p(x,"CODE",{});var DG=l(ku);Ub=e(DG,"sync.Once"),DG.forEach(a),Nb=e(x,"의 인스턴스는 초기화할 필요가 없으며, "),fu=p(x,"CODE",{});var PG=l(fu);qb=e(PG,"sync.Once"),PG.forEach(a),Fb=e(x,`의 인스턴스는 복사되지 않아야 한다.
함수 내부에서 `),du=p(x,"CODE",{});var RG=l(du);Zb=e(RG,"sync.Once"),RG.forEach(a),$b=e(x,` 인스턴스를 새로 선언하는 것은 일반적으로 잘못된 일인데,
매 함수 호출마다 새로운 인스턴스가 생성되고 해당 인스턴스에는 이전 호출에 대한 정보가 없기 때문이다.`),x.forEach(a),e2=i(n),h=p(n,"P",{});var Gn=l(h);Kb=e(Gn,"위 예제에서는 "),Eu=p(Gn,"CODE",{});var xG=l(Eu);Yb=e(xG,"Parse()"),xG.forEach(a),Jb=e(Gn," 함수가 호출될 때 "),vu=p(Gn,"CODE",{});var GG=l(vu);Vb=e(GG,"parser"),GG.forEach(a),zb=e(Gn,`가 단 한번만 초기화되어야 한다.
따라서 `),_u=p(Gn,"CODE",{});var TG=l(_u);Qb=e(TG,"parser"),TG.forEach(a),jb=e(Gn,"의 값은 "),bu=p(Gn,"CODE",{});var BG=l(bu);Xb=e(BG,"once.Do()"),BG.forEach(a),gb=e(Gn,"의 파라미터로 보낸 closure에서 초기화되며, "),wu=p(Gn,"CODE",{});var AG=l(wu);n9=e(AG,"once.Do()"),AG.forEach(a),s9=e(Gn," 로 보낸 closure는 다시 실행되지 않는다."),Gn.forEach(a),o2=i(n),p2=p(n,"BR",{}),l2=p(n,"BR",{}),c2=i(n),ba=p(n,"H3",{id:!0});var RO=l(ba);wa=p(RO,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var MG=l(wa);yu=p(MG,"SPAN",{class:!0}),l(yu).forEach(a),MG.forEach(a),a9=e(RO,"Putting Our Concurrent Tools Together"),RO.forEach(a),u2=i(n),Te=p(n,"P",{});var HG=l(Te);t9=e(HG,"앞에서 배운 것들을 하나씩 복습해볼 시간이다."),HG.forEach(a),r2=i(n),Be=p(n,"P",{});var LG=l(Be);e9=e(LG,`세 개의 웹 서비스를 호출하는 함수가 있다고 하자.
우리는 그 중 두 개의 서비스에 값을 보내고, 이 둘로부터 결과값을 받아 나머지 한 개의 서비스로 값을 보내고 값을 리턴할 것이다.
모든 프로세스는 50ms 이내에 이루어져야 하며, 넘어가면 에러를 반환한다.`),LG.forEach(a),i2=i(n),Ae=p(n,"P",{});var SG=l(Ae);o9=e(SG,"우리가 호출할 함수는 아래와 같이 시작한다."),SG.forEach(a),k2=i(n),Pt=p(n,"PRE",{class:!0});var vM=l(Pt);vM.forEach(a),f2=i(n),vn=p(n,"P",{});var ha=l(vn);p9=e(ha,`함수 내부를 들여다보면 가장 먼저 타임아웃을 설정해준다.
context를 사용 가능한 경우 `),Cu=p(ha,"CODE",{});var hG=l(Cu);l9=e(hG,"time.After()"),hG.forEach(a),c9=e(ha,"를 사용하여 타임아웃을 설정하기보단, "),mu=p(ha,"CODE",{});var WG=l(mu);u9=e(WG,"context.WithTimeout()"),WG.forEach(a),r9=e(ha,`을 사용해주는 것이 좋다.
`),Ou=p(ha,"CODE",{});var IG=l(Ou);i9=e(IG,"context.WithTimeout()"),IG.forEach(a),k9=e(ha,"의 장점은 이 함수를 호출하는 함수에 의해 설정된 타임아웃을 준수할 수 있다는 점이다. 자세한 건 12장에서 context에 대해 다룰 때 알아보자."),ha.forEach(a),d2=i(n),W=p(n,"P",{});var Tn=l(W);f9=e(Tn,"타임아웃 시간에 도달하면 "),Du=p(Tn,"CODE",{});var UG=l(Du);d9=e(UG,"context.WithTimeout()"),UG.forEach(a),E9=e(Tn,"로 반환받은 "),Pu=p(Tn,"CODE",{});var NG=l(Pu);v9=e(NG,"cancel()"),NG.forEach(a),_9=e(Tn,` 함수로, 실행중인 프로세스를 끝낸다.
`),Ru=p(Tn,"CODE",{});var qG=l(Ru);b9=e(qG,"defer"),qG.forEach(a),w9=e(Tn," 문을 이용하여 "),xu=p(Tn,"CODE",{});var FG=l(xu);y9=e(FG,"context"),FG.forEach(a),C9=e(Tn,"의 "),Gu=p(Tn,"CODE",{});var ZG=l(Gu);m9=e(ZG,"cancel()"),ZG.forEach(a),O9=e(Tn,"을 반드시 호출하게끔 한다."),Tn.forEach(a),E2=i(n),Jn=p(n,"P",{});var Qe=l(Jn);D9=e(Qe,"또한 이후 생성할 고루틴과 커뮤니케이션하기 위해 사용할 각종 채널들을 모아놓은, "),Tu=p(Qe,"CODE",{});var $G=l(Tu);P9=e($G,"processor"),$G.forEach(a),R9=e(Qe,` 인스턴스를 생성한다.
모든 채널은 buffered channel이므로 고루틴들은 값을 쓴 이후, 누군가 값을 읽어갈 때까지 기다릴 필요가 없다.
이 때 `),Bu=p(Qe,"CODE",{});var KG=l(Bu);x9=e(KG,"errs"),KG.forEach(a),G9=e(Qe," 필드의 크기는 2인데, 최대 두 개의 에러가 발생할 수 있기 때문이다."),Qe.forEach(a),v2=i(n),_2=p(n,"BR",{}),b2=i(n),Rt=p(n,"P",{});var xO=l(Rt);Au=p(xO,"CODE",{});var YG=l(Au);T9=e(YG,"processor"),YG.forEach(a),B9=e(xO," 타입의 구조체는 이렇게 생겼다."),xO.forEach(a),w2=i(n),xt=p(n,"PRE",{class:!0});var _M=l(xt);_M.forEach(a),y2=i(n),C2=p(n,"BR",{}),m2=i(n),I=p(n,"P",{});var Bn=l(I);A9=e(Bn,"이제 "),Mu=p(Bn,"CODE",{});var JG=l(Mu);M9=e(JG,"processor"),JG.forEach(a),H9=e(Bn," 타입의 "),Hu=p(Bn,"CODE",{});var VG=l(Hu);L9=e(VG,"launch()"),VG.forEach(a),S9=e(Bn,` 메소드에 대해 살펴보자.
이 메소드에서는 세 개의 고루틴을 생성하는데, 각각 `),Lu=p(Bn,"CODE",{});var zG=l(Lu);h9=e(zG,"getResultA()"),zG.forEach(a),W9=e(Bn,", "),Su=p(Bn,"CODE",{});var QG=l(Su);I9=e(QG,"getResultB()"),QG.forEach(a),U9=e(Bn,", "),hu=p(Bn,"CODE",{});var jG=l(hu);N9=e(jG,"getResultC()"),jG.forEach(a),q9=e(Bn,"를 실행한다."),Bn.forEach(a),O2=i(n),Gt=p(n,"PRE",{class:!0});var bM=l(Gt);bM.forEach(a),D2=i(n),z=p(n,"P",{});var qn=l(z);Wu=p(qn,"CODE",{});var XG=l(Wu);F9=e(XG,"getResultA()"),XG.forEach(a),Z9=e(qn,"와 "),Iu=p(qn,"CODE",{});var gG=l(Iu);$9=e(gG,"getResultB()"),gG.forEach(a),K9=e(qn,`를 실행하는 고루틴은 매우 비슷하다.
만약 호출시 에러가 리턴되었으면 `),Uu=p(qn,"CODE",{});var nT=l(Uu);Y9=e(nT,"p.errs"),nT.forEach(a),J9=e(qn," 채널에 에러를 쓰고, 유효한 값이 리턴되었으면 각각 "),Nu=p(qn,"CODE",{});var sT=l(Nu);V9=e(sT,"p.outA"),sT.forEach(a),z9=e(qn,", "),qu=p(qn,"CODE",{});var aT=l(qu);Q9=e(aT,"p.outB"),aT.forEach(a),j9=e(qn,"에 값을 쓴다."),qn.forEach(a),P2=i(n),E=p(n,"P",{});var y=l(E);Fu=p(y,"CODE",{});var tT=l(Fu);X9=e(tT,"getResultC()"),tT.forEach(a),g9=e(y,"를 호출하는 고루틴은 살짝 더 복잡하다. "),Zu=p(y,"CODE",{});var eT=l(Zu);nw=e(eT,"getResultA()"),eT.forEach(a),sw=e(y,"와 "),$u=p(y,"CODE",{});var oT=l($u);aw=e(oT,"getResultB()"),oT.forEach(a),tw=e(y,"가 50ms 안에 성공해야만 "),Ku=p(y,"CODE",{});var pT=l(Ku);ew=e(pT,"getResultC()"),pT.forEach(a),ow=e(y,`를 호출할 수 있기 때문이다.
이 고루틴은 `),Yu=p(y,"CODE",{});var lT=l(Yu);pw=e(lT,"select"),lT.forEach(a),lw=e(y,"문과 두 개의 "),Ju=p(y,"CODE",{});var cT=l(Ju);cw=e(cT,"case"),cT.forEach(a),uw=e(y,` 블록을 포함한다.
첫 번째 `),Vu=p(y,"CODE",{});var uT=l(Vu);rw=e(uT,"case"),uT.forEach(a),iw=e(y," 블록의 "),zu=p(y,"CODE",{});var rT=l(zu);kw=e(rT,"ctx.Done()"),rT.forEach(a),fw=e(y,` 메소드는 시간이 초과하거나 또는 컨텍스트가 명시적으로 취소될 시 값을 리턴하는 채널을 반환한다. 따라서 context가 취소될 때 트리거된다.
그리고 두 번째 `),Qu=p(y,"CODE",{});var iT=l(Qu);dw=e(iT,"case"),iT.forEach(a),Ew=e(y," 블록은 "),ju=p(y,"CODE",{});var kT=l(ju);vw=e(kT,"getResultC()"),kT.forEach(a),_w=e(y,"를 호출하기 위한 데이터가 준비되면 트리거된다. 이 블록 내의 구조는 앞선 두 고루틴과 비슷하다."),y.forEach(a),R2=i(n),x2=p(n,"BR",{}),G2=i(n),Vn=p(n,"P",{});var je=l(Vn);bw=e(je,"위 고루틴들이 생성되고 실행될, "),Xu=p(je,"CODE",{});var fT=l(Xu);ww=e(fT,"processor"),fT.forEach(a),yw=e(je,"의 "),gu=p(je,"CODE",{});var dT=l(gu);Cw=e(dT,"waitForAB()"),dT.forEach(a),mw=e(je," 메소드에 대해 살펴보자."),je.forEach(a),T2=i(n),Tt=p(n,"PRE",{class:!0});var wM=l(Tt);wM.forEach(a),B2=i(n),m=p(n,"P",{});var Z=l(m);Ow=e(Z,"위 함수에서는 이후 "),nr=p(Z,"CODE",{});var ET=l(nr);Dw=e(ET,"getResultC()"),ET.forEach(a),Pw=e(Z,"의 파라미터로 사용할 "),sr=p(Z,"CODE",{});var vT=l(sr);Rw=e(vT,"inputC"),vT.forEach(a),xw=e(Z,"의 값을 설정하기 위해 "),ar=p(Z,"CODE",{});var _T=l(ar);Gw=e(_T,"for-select"),_T.forEach(a),Tw=e(Z,` 루프를 사용한다.
상단 두 개의 `),tr=p(Z,"CODE",{});var bT=l(tr);Bw=e(bT,"case"),bT.forEach(a),Aw=e(Z," 블록은 "),er=p(Z,"CODE",{});var wT=l(er);Mw=e(wT,"getResultA()"),wT.forEach(a),Hw=e(Z,"와 "),or=p(Z,"CODE",{});var yT=l(or);Lw=e(yT,"getResultB()"),yT.forEach(a),Sw=e(Z,"를 실행하는 고루틴들이 채널에 값을 보내면 활성화되고, "),pr=p(Z,"CODE",{});var CT=l(pr);hw=e(CT,"inputC"),CT.forEach(a),Ww=e(Z,`의 값이 설정된다.
이 두 개의 블록이 실행되면 루프를 빠져나오고 유효한 값이 리턴된다.`),Z.forEach(a),A2=i(n),zn=p(n,"P",{});var Xe=l(zn);Iw=e(Xe,"하단 두 개의 "),lr=p(Xe,"CODE",{});var mT=l(lr);Uw=e(mT,"case"),mT.forEach(a),Nw=e(Xe," 블록은 에러 조건을 담당한다. 만약 "),cr=p(Xe,"CODE",{});var OT=l(cr);qw=e(OT,"p.errs"),OT.forEach(a),Fw=e(Xe,`에 쓰인 에러가 있다면, 에러를 리턴한다.
또는 context가 취소되었다면 요청이 취소되었음을 나타내는 에러를 리턴한다.`),Xe.forEach(a),M2=i(n),H2=p(n,"BR",{}),L2=i(n),O=p(n,"P",{});var $=l(O);Zw=e($,"다시 "),ur=p($,"CODE",{});var DT=l(ur);$w=e(DT,"GatherAndProcess()"),DT.forEach(a),Kw=e($,"로 돌아와서, "),rr=p($,"CODE",{});var PT=l(rr);Yw=e(PT,"p.waitForAB()"),PT.forEach(a),Jw=e($," 호출 이후에는 전형적인 에러에 대한 "),ir=p($,"CODE",{});var RT=l(ir);Vw=e(RT,"nil"),RT.forEach(a),zw=e($,` 체크를 한다.
에러가 없다면 `),kr=p($,"CODE",{});var xT=l(kr);Qw=e(xT,"p.inC"),xT.forEach(a),jw=e($," 채널에 "),fr=p($,"CODE",{});var GT=l(fr);Xw=e(GT,"inputC"),GT.forEach(a),gw=e($," 값을 쓰고, "),dr=p($,"CODE",{});var TT=l(dr);ny=e(TT,"processor"),TT.forEach(a),sy=e($,"의 "),Er=p($,"CODE",{});var BT=l(Er);ay=e(BT,"waitForC"),BT.forEach(a),ty=e($," 메소드를 호출한다."),$.forEach(a),S2=i(n),Bt=p(n,"PRE",{class:!0});var yM=l(Bt);yM.forEach(a),h2=i(n),U=p(n,"P",{});var An=l(U);ey=e(An,"이 메소드는 한 개의 "),vr=p(An,"CODE",{});var AT=l(vr);oy=e(AT,"select"),AT.forEach(a),py=e(An,`문으로 구성되어 있다.
`),_r=p(An,"CODE",{});var MT=l(_r);ly=e(MT,"getResultC()"),MT.forEach(a),cy=e(An,"가 성공적으로 호출되었다면 "),br=p(An,"CODE",{});var HT=l(br);uy=e(HT,"p.outC"),HT.forEach(a),ry=e(An,` 채널에 값을 썼을 것이고, 이로부터 값을 읽어 리턴한다.
또는 `),wr=p(An,"CODE",{});var LT=l(wr);iy=e(LT,"getResultC()"),LT.forEach(a),ky=e(An,"가 에러를 반환하였다면, "),yr=p(An,"CODE",{});var ST=l(yr);fy=e(ST,"p.errs"),ST.forEach(a),dy=e(An,` 채널에서 에러를 읽어 이를 반환한다.
또는 context가 취소되었다면 이를 나타내는 에러를 반환한다.`),An.forEach(a),W2=i(n),rs=p(n,"P",{});var Bi=l(rs);Cr=p(Bi,"CODE",{});var hT=l(Cr);Ey=e(hT,"waitForC()"),hT.forEach(a),vy=e(Bi,"가 끝났다면, "),mr=p(Bi,"CODE",{});var WT=l(mr);_y=e(WT,"GatherAndProcess()"),WT.forEach(a),by=e(Bi,"는 비로소 결과를 반환하게 된다."),Bi.forEach(a),I2=i(n),U2=p(n,"BR",{}),N2=i(n),w=p(n,"P",{});var B=l(w);Or=p(B,"CODE",{});var IT=l(Or);wy=e(IT,"getResultC()"),IT.forEach(a),yy=e(B,`가 제대로 동작한다고 믿는다면 이 코드는 간단하게 작성될 수 있다.
context가 `),Dr=p(B,"CODE",{});var UT=l(Dr);Cy=e(UT,"getResultC()"),UT.forEach(a),my=e(B,`로도 전달되었기 때문에, 이 함수는 타임아웃을 준수하고 에러가 발생하면 이를 반환하게끔 작성될 수 있다.
그러한 경우 `),Pr=p(B,"CODE",{});var NT=l(Pr);Oy=e(NT,"GatherAndProcess()"),NT.forEach(a),Dy=e(B," 내부에서 직접 "),Rr=p(B,"CODE",{});var qT=l(Rr);Py=e(qT,"getResultC()"),qT.forEach(a),Ry=e(B,`를 호출하도록 할 수 있다.
그렇게 하면 `),xr=p(B,"CODE",{});var FT=l(xr);xy=e(FT,"processor"),FT.forEach(a),Gy=e(B,"의 "),Gr=p(B,"CODE",{});var ZT=l(Gr);Ty=e(ZT,"inC"),ZT.forEach(a),By=e(B,"나 "),Tr=p(B,"CODE",{});var $T=l(Tr);Ay=e($T,"outC"),$T.forEach(a),My=e(B," 필드나 "),Br=p(B,"CODE",{});var KT=l(Br);Hy=e(KT,"waitForC()"),KT.forEach(a),Ly=e(B,` 메소드 등 상당히 많은 부분들을 생략할 수 있다.
프로그램이 정확하게 동작하길 원한다면, 되도록 동시성을 최대한 지양하여 사용하는 것이 좋다.`),B.forEach(a),q2=i(n),ya=p(n,"P",{});var k3=l(ya);Sy=e(k3,"이렇게 고루틴, 채널, "),Ar=p(k3,"CODE",{});var YT=l(Ar);hy=e(YT,"select"),YT.forEach(a),Wy=e(k3,`문으로 코드를 구조화함으로써 얻을 수 있는 장점이 있다.
개별 단계를 분리하고, 독립적인 부분들이 임의의 순서로도 실행 및 완료될 수 있도록 하며, 종속적인 부분들끼리 데이터를 확실하게 교환할 수 있게 된다.
또한 프로그램의 어떠한 부분도 중단되지 않도록 보장하고, 이 함수나 앞서 호출된 함수에서 설정된 타임아웃을 적절히 처리한다.
Go가 아닌 다른 언어로 이러한 구조를 작성하는 것은 상당히 어렵다.`),k3.forEach(a),F2=i(n),Z2=p(n,"BR",{}),$2=p(n,"BR",{}),K2=i(n),Ca=p(n,"H2",{id:!0});var GO=l(Ca);ma=p(GO,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var JT=l(ma);Mr=p(JT,"SPAN",{class:!0}),l(Mr).forEach(a),JT.forEach(a),Iy=e(GO,"When to Use Mutexes Instead of Channels"),GO.forEach(a),Y2=i(n),J2=p(n,"HR",{}),V2=i(n),_n=p(n,"P",{});var Wa=l(_n);Uy=e(Wa,"다른 프로그래밍 언어에서는, 쓰레드끼리 주고받는 데이터에 대한 접근을 조율해야 하는 경우 "),Hr=p(Wa,"STRONG",{});var VT=l(Hr);Ny=e(VT,"뮤텍스"),VT.forEach(a),qy=e(Wa,"("),Lr=p(Wa,"STRONG",{});var zT=l(Lr);Fy=e(zT,"mutex"),zT.forEach(a),Zy=e(Wa,`)를 사용한다.
뮤텍스는 동시에 실행되었거나 공유된 데이터에 대해 접근을 제한하는 역할을 한다.
이렇게 보호된 부분은 `),Sr=p(Wa,"EM",{});var QT=l(Sr);$y=e(QT,"critical section"),QT.forEach(a),Ky=e(Wa,"이라고 한다."),Wa.forEach(a),z2=i(n),Oa=p(n,"P",{});var f3=l(Oa);Yy=e(f3,"Go의 개발자들이 동시성을 관리하기 위해 채널과 "),hr=p(f3,"CODE",{});var jT=l(hr);Jy=e(jT,"select"),jT.forEach(a),Vy=e(f3,`문을 디자인한 데는 이유가 있다.
뮤텍스의 문제점은 프로그램의 데이터 흐름이 모호해진다는 것이다.
반면 값이 각종 채널을 통해 고루틴에서 또 다른 고루틴으로 넘어갈 때, 데이터 흐름은 분명하다.`),f3.forEach(a),Q2=i(n),Me=p(n,"P",{});var XT=l(Me);zy=e(XT,`값에 대한 액세스는 한 번에 단일 고루틴으로 국한된다.
한편 뮤텍스가 사용될 때는 값에 대한 액세스가 모든 프로세스에서 공유된다.
따라서 어떤 고루틴이 값을 소유하고 있는지 특정하기 어렵고, 이 때문에 프로세스 순서를 이해하기 어렵다.`),XT.forEach(a),j2=i(n),X2=p(n,"BR",{}),g2=i(n),He=p(n,"P",{});var gT=l(He);Qy=e(gT,`Go의 표준 라이브러리에도 뮤텍스가 포함되어 있고, 특정 상황에서는 유횽하게 사용할 수 있다.
그중 한 가지 경우는 고루틴이 공유되는 값을 읽거나 쓰기는 하지만, 프로세싱하지는 않을 때이다.`),gT.forEach(a),nE=i(n),Le=p(n,"P",{});var nB=l(Le);jy=e(nB,`아래 예제는 멀티플레이어 게임의 인메모리 스코어보드를 관리하는 함수이다.
채널을 통해 이를 어떻게 구현했는지 살펴보고, 고루틴으로 함수를 실행할 것이다.`),nB.forEach(a),sE=i(n),At=p(n,"PRE",{class:!0});var CM=l(At);CM.forEach(a),aE=i(n),Da=p(n,"P",{});var d3=l(Da);Xy=e(d3,`이 함수는 map 타입의 변수를 선언한다.
그리고 그 map을 읽고 수정하는 함수의 채널과 done 채널을 `),Wr=p(d3,"CODE",{});var sB=l(Wr);gy=e(sB,"select"),sB.forEach(a),nC=e(d3,"문으로 묶는다."),d3.forEach(a),tE=i(n),eE=p(n,"BR",{}),oE=i(n),Se=p(n,"P",{});var aB=l(Se);sC=e(aB,"타입 하나를 정의하고, 맵에 값을 쓰는 메소드를 만들어보자."),aB.forEach(a),pE=i(n),Mt=p(n,"PRE",{class:!0});var mM=l(Mt);mM.forEach(a),lE=i(n),Un=p(n,"P",{});var Ft=l(Un);Ir=p(Ft,"CODE",{});var tB=l(Ir);aC=e(tB,"Update"),tB.forEach(a),tC=e(Ft,` 메소드는 값을 map에 집어넣는 함수를 리턴하는, 매우 간단한 메소드이다.
근데 스코어보드에서 값을 읽으려면 어떻게 해야 할까?
`),Ur=p(Ft,"CODE",{});var eB=l(Ur);eC=e(eB,"done"),eB.forEach(a),oC=e(Ft," 패턴을 사용하여, "),Nr=p(Ft,"CODE",{});var oB=l(Nr);pC=e(oB,"ScoreboardManager"),oB.forEach(a),lC=e(Ft,"에 전달된 함수가 완료될 떄까지 기다림으로써, 값을 다시 반환하면 된다."),Ft.forEach(a),cE=i(n),Ht=p(n,"PRE",{class:!0});var OM=l(Ht);OM.forEach(a),uE=i(n),he=p(n,"P",{});var pB=l(he);cC=e(pB,`이 코드는 동작하기는 하지만 다소 번거롭고 한 번에 한 개의 reqder만 접근할 수 있다.
이런 상황에서는 뮤텍스를 사용하는 것이 낫다.`),pB.forEach(a),rE=i(n),P=p(n,"P",{});var on=l(P);uC=e(on,"표준 라이브러리의 "),qr=p(on,"CODE",{});var lB=l(qr);rC=e(lB,"sync"),lB.forEach(a),iC=e(on,` 패키지에는 두 개의 뮤텍스가 있다.
첫 번째 것은 `),Fr=p(on,"CODE",{});var cB=l(Fr);kC=e(cB,"Mutex"),cB.forEach(a),fC=e(on," 타입으로, "),Zr=p(on,"CODE",{});var uB=l(Zr);dC=e(uB,"Lock()"),uB.forEach(a),EC=e(on,"과 "),$r=p(on,"CODE",{});var rB=l($r);vC=e(rB,"Unlock()"),rB.forEach(a),_C=e(on,`이라는 메소드를 가지고 있다.
`),Kr=p(on,"CODE",{});var iB=l(Kr);bC=e(iB,"Lock()"),iB.forEach(a),wC=e(on,`을 호출하면 다른 고루틴이 critical section에 있는 동안 현재 고루틴이 멈춘다.
다른 고루틴이 critical section을 벗어나면 현재 고루틴은 Lock을 얻고, critical section을 실행한다.
`),Yr=p(on,"CODE",{});var kB=l(Yr);yC=e(kB,"Unlock()"),kB.forEach(a),CC=e(on,"으로 critical section의 끝을 표시한다."),on.forEach(a),iE=i(n),N=p(n,"P",{});var Mn=l(N);mC=e(Mn,"두 번째 뮤텍스 타입은 "),Jr=p(Mn,"CODE",{});var fB=l(Jr);OC=e(fB,"RWMutex"),fB.forEach(a),DC=e(Mn,` 타입인데, 이 타입은 reader lock과 writer lock을 구분지어서 관리할 수 있게 해준다.
writer lock은 critical section에 단 한 개만 존재할 수 있지만, reader lock은 공유가 가능하여 여러 개가 있을 수 있다.
writer lock은 `),Vr=p(Mn,"CODE",{});var dB=l(Vr);PC=e(dB,"Lock()"),dB.forEach(a),RC=e(Mn,"과 "),zr=p(Mn,"CODE",{});var EB=l(zr);xC=e(EB,"Unlock()"),EB.forEach(a),GC=e(Mn,"으로, reader lock은 "),Qr=p(Mn,"CODE",{});var vB=l(Qr);TC=e(vB,"RLock()"),vB.forEach(a),BC=e(Mn,"과 "),jr=p(Mn,"CODE",{});var _B=l(jr);AC=e(_B,"RUnlock()"),_B.forEach(a),MC=e(Mn,"으로 관리된다."),Mn.forEach(a),kE=i(n),q=p(n,"P",{});var Hn=l(q);HC=e(Hn,`주의점이 있는데, 뮤텍스를 사용하면 반드시 Lock을 반환해주어야 한다는 것이다.
일반적인 패턴은 `),Xr=p(Hn,"CODE",{});var bB=l(Xr);LC=e(bB,"Lock()"),bB.forEach(a),SC=e(Hn,"이나 "),gr=p(Hn,"CODE",{});var wB=l(gr);hC=e(wB,"RLock()"),wB.forEach(a),WC=e(Hn,"을 호출한 후, 바로 "),ni=p(Hn,"CODE",{});var yB=l(ni);IC=e(yB,"defer"),yB.forEach(a),UC=e(Hn,"문을 통해 "),si=p(Hn,"CODE",{});var CB=l(si);NC=e(CB,"Unlock()"),CB.forEach(a),qC=e(Hn,"이나 "),ai=p(Hn,"CODE",{});var mB=l(ai);FC=e(mB,"RUnlock()"),mB.forEach(a),ZC=e(Hn,"이 호출되도록 하는 것이다."),Hn.forEach(a),fE=i(n),Lt=p(n,"PRE",{class:!0});var DM=l(Lt);DM.forEach(a),dE=i(n),We=p(n,"P",{});var OB=l(We);$C=e(OB,"이렇게 뮤텍스를 사용하니 코드의 길이도 더 짧아지고 더 직관적으로 작성된 것을 확인할 수 있다."),OB.forEach(a),EE=i(n),vE=p(n,"BR",{}),_E=i(n),Pa=p(n,"P",{});var E3=l(Pa);KC=e(E3,"뮤텍스를 사용하는 방식과, "),ti=p(E3,"CODE",{});var DB=l(ti);YC=e(DB,"select"),DB.forEach(a),JC=e(E3,"문 등 Go에서 사용하는 방식 중 어느 것을 선택할 것인지는 아래 내용을 참조하여 결정할 수 있다."),E3.forEach(a),bE=i(n),Qn=p(n,"UL",{});var ge=l(Qn);ei=p(ge,"LI",{});var PB=l(ei);VC=e(PB,"고루틴들을 조정하거나, 고루틴들에 의해 변경되는 값들을 추적해야 한다면 채널을 사용한다."),PB.forEach(a),zC=i(ge),oi=p(ge,"LI",{});var RB=l(oi);QC=e(RB,"구조체의 필드값에 대한 액세스 권한을 공유해야 하는 경우, 뮤텍스를 사용한다."),RB.forEach(a),jC=i(ge),pi=p(ge,"LI",{});var xB=l(pi);XC=e(xB,"채널을 사용할 때 중대한 성능 이슈가 발생하는 경우, 그리고 이 이슈를 해결할 다른 방법을 찾지 못했을 경우, 뮤텍스를 사용하도록 수정해본다."),xB.forEach(a),ge.forEach(a),wE=i(n),Ie=p(n,"P",{});var GB=l(Ie);gC=e(GB,`위 예제에서 스코어보드는 구조체의 필드이고 스코어보드를 다른 고루틴으로 전달하지는 않기 때문에, 뮤텍스를 사용하는 편이 낫다.
또한 데이터가 인메모리로 저장되기 때문에 뮤텍스가 적합한 점도 있다.
반면 데이터가 HHTP 서버나 데이터베이스 등 외부 서비스에 저장될 때는, 시스템에 대한 액세스를 보호하기 위해 뮤텍스를 사용하지 않는 것이 좋다.`),GB.forEach(a),yE=i(n),CE=p(n,"BR",{}),mE=i(n),Ue=p(n,"P",{});var TB=l(Ue);nm=e(TB,`뮤텍스를 사용할 때는 코드를 조금 더 면밀하게 검토해야 할 필요가 있다.
lock과 unlock을 반드시 짝지어주어야 하며, 그렇지 않으면 데드락에 걸릴 것이다.
위 예제의 경우 lock의 획득과 해제가 동일한 메소드 안에서 일어났기 때문에 문제가 없었다.`),TB.forEach(a),OE=i(n),bn=p(n,"P",{});var Ia=l(bn);sm=e(Ia,"그리고 Go의 뮤텍스는 "),li=p(Ia,"EM",{});var BB=l(li);am=e(BB,"reentrancy"),BB.forEach(a),tm=e(Ia,"("),ci=p(Ia,"EM",{});var AB=l(ci);em=e(AB,"재진입성"),AB.forEach(a),om=e(Ia,`)이 없다는 문제가 있다.
만약 고루틴이 lock을 이미 얻은 상태로 동일한 lock을 얻기 위해 다시 접근한다면, 그 고루틴이 lock을 해제할 때까지 기다리는 데드락이 발생한다.
뮤텍스에 `),ui=p(Ia,"EM",{});var MB=l(ui);pm=e(MB,"reentrancy"),MB.forEach(a),lm=e(Ia,"가 존재하는 Java같은 언어와의 차이점이라고 볼 수 있다."),Ia.forEach(a),DE=i(n),Ne=p(n,"P",{});var HB=l(Ne);cm=e(HB,`lock에 reentrancy가 없기 때문에 재귀함수의 뮤텍스 사용이 어려워진다.
따라서 재귀적인 함수 호출 이전에 락을 해제해주어야 한다.
웬만하면 lock을 얻은 상태로 함수를 호출할 때는, 호출 중에 어떤 lock을 획득할 지 모르기 때문에 주의해주어야 한다.
함수 호출 중 현재 들고있는 것과 동일한 lock을 획득하려고 하면 데드락에 걸릴 것이다.`),HB.forEach(a),PE=i(n),is=p(n,"P",{});var Ai=l(is);ri=p(Ai,"CODE",{});var LB=l(ri);um=e(LB,"sync.WaitGroup"),LB.forEach(a),rm=e(Ai,"이나 "),ii=p(Ai,"CODE",{});var SB=l(ii);im=e(SB,"sync.Once"),SB.forEach(a),km=e(Ai,`와 마찬가지로 뮤텍스는 복사되어져서는 안된다.
만약 함수의 파라미터로 보내지거나 구조체의 필드로 액세스되는 경우, 반드시 포인터로 이루어져야 한다.
만약 뮤텍스가 복사되면 lock은 공유되지 않을 것이다.`),Ai.forEach(a),RE=i(n),qe=p(n,"P",{});var hB=l(qe);fm=e(hB,`또한 여러 고루틴에서 뮤텍스를 획득하지 않고 한 변수에 접근하려고 시도하지 않는 것이 좋다.
Race condition으로 인해, 상당히 정신나갈거같은 다양한 에러가 발생할 것이다.`),hB.forEach(a),xE=i(n),jn=p(n,"BLOCKQUOTE",{});var no=l(jn);wn=p(no,"P",{});var fs=l(wn);ki=p(fs,"CODE",{});var WB=l(ki);dm=e(WB,"sync"),WB.forEach(a),Em=e(fs," 패키지에는 "),fi=p(fs,"CODE",{});var IB=l(fi);vm=e(IB,"Map"),IB.forEach(a),_m=e(fs,"이라는 타입이 있는데, 이는 빌트인 "),di=p(fs,"CODE",{});var UB=l(di);bm=e(UB,"map"),UB.forEach(a),wm=e(fs,` 타입의 concurrency-safe 버전이다.
tradeoff가 있어 `),Ei=p(fs,"CODE",{});var NB=l(Ei);ym=e(NB,"sync.Map"),NB.forEach(a),Cm=e(fs," 타입은 특정한 상황에만 적합하다."),fs.forEach(a),mm=i(no),St=p(no,"UL",{});var v3=l(St);vi=p(v3,"LI",{});var qB=l(vi);Om=e(qB,"값이 쓰이는 횟수는 한 번이고, 읽히는 횟수가 상당히 많은 key-value 페어를 공유하는 경우"),qB.forEach(a),Dm=i(v3),ht=p(v3,"LI",{});var _3=l(ht);Pm=e(_3,"고루틴이 "),_i=p(_3,"CODE",{});var FB=l(_i);Rm=e(FB,"map"),FB.forEach(a),xm=e(_3," 자체는 공유하지만, 다른 key나 value에 접근하지 않는 경우"),_3.forEach(a),v3.forEach(a),Gm=i(no),Q=p(no,"P",{});var Ln=l(Q);Tm=e(Ln,"게다가 Go에는 제네릭이 부족하기 때문에, "),bi=p(Ln,"CODE",{});var ZB=l(bi);Bm=e(ZB,"sync.Map"),ZB.forEach(a),Am=e(Ln,"은 각각의 key와 value에 "),wi=p(Ln,"CODE",{});var $B=l(wi);Mm=e($B,"interfaece{}"),$B.forEach(a),Hm=e(Ln,`를 타입으로 사용한다.
따라서 컴파일러는 제대로 된 타입이 사용되었는지 확인해줄 수 없다.
이러한 한계 때문에, 여러 고루틴이 `),yi=p(Ln,"CODE",{});var KB=l(yi);Lm=e(KB,"map"),KB.forEach(a),Sm=e(Ln," 타입을 공유해야하는 상황에는 "),Ci=p(Ln,"CODE",{});var YB=l(Ci);hm=e(YB,"sync.RWMutex"),YB.forEach(a),Wm=e(Ln,"로 빌트인 "),mi=p(Ln,"CODE",{});var JB=l(mi);Im=e(JB,"map"),JB.forEach(a),Um=e(Ln,"을 보호하는 것이 낫다."),Ln.forEach(a),no.forEach(a),GE=i(n),TE=p(n,"BR",{}),BE=p(n,"BR",{}),AE=i(n),Ra=p(n,"H2",{id:!0});var TO=l(Ra);xa=p(TO,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var VB=l(xa);Oi=p(VB,"SPAN",{class:!0}),l(Oi).forEach(a),VB.forEach(a),Nm=e(TO,"Atomics"),TO.forEach(a),ME=i(n),HE=p(n,"HR",{}),LE=i(n),Xn=p(n,"P",{});var so=l(Xn);qm=e(so,`Go에는 뮤텍스뿐만 아니라, 여러 쓰레드에서 데이터를 일정하게 보존할 수 있는 또다른 방법을 제공한다.
`),Di=p(so,"CODE",{});var zB=l(Di);Fm=e(zB,"sync/atomic"),zB.forEach(a),Zm=e(so," 패키지는 최신 CPU에 내장되어 있는 "),Pi=p(so,"EM",{});var QB=l(Pi);$m=e(QB,"atomic variable"),QB.forEach(a),Km=e(so,` 연산에 액세스할 수 있게 해주어,
단일 레지스터에 맞게 값을 add, swap, load, store, compare and swap(CAS)할 수 있게 해준다.`),so.forEach(a),SE=i(n),Fe=p(n,"P",{});var jB=l(Fe);Ym=e(jB,`만약 비트 단위까지 최적화해서 성능을 쥐어짜서 동시성 코드를 작성하는 코딩의 빡고수라면 유용할 것이다.
그런 사람이 아니라면 그냥 얌전히 goroutine과 mutex를 쓰는 게 좋을것 같다.`),jB.forEach(a),hE=i(n),WE=p(n,"BR",{}),IE=p(n,"BR",{}),UE=i(n),Ga=p(n,"H2",{id:!0});var BO=l(Ga);Ta=p(BO,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var XB=l(Ta);Ri=p(XB,"SPAN",{class:!0}),l(Ri).forEach(a),XB.forEach(a),Jm=e(BO,"References"),BO.forEach(a),NE=i(n),qE=p(n,"HR",{}),FE=i(n),Nn=p(n,"CENTER",{});var Zt=l(Nn);xi=p(Zt,"P",{});var gB=l(xi);Vm=e(gB,"["),gB.forEach(a),zm=i(Zt),TM(Wt.$$.fragment,Zt),Qm=e(Zt,`
](https://learning.oreilly.com/library/view/learning-go/9781492077206/) `),jm=p(Zt,"BR",{}),Xm=e(Zt,`
[Jon Bodner, 『Learning Go』, O'Reilly Media, Inc.](https://learning.oreilly.com/library/view/learning-go/9781492077206/)`),Zt.forEach(a),ZE=i(n),$E=p(n,"BR",{}),KE=p(n,"BR",{}),this.h()},h(){k(ao,"class","icon icon-link"),k(Es,"aria-hidden","true"),k(Es,"tabindex","-1"),k(Es,"href","#introduction"),k(ds,"id","introduction"),k(eo,"class","icon icon-link"),k(bs,"aria-hidden","true"),k(bs,"tabindex","-1"),k(bs,"href","#when-to-use-concurrency"),k(_s,"id","when-to-use-concurrency"),k(po,"class","icon icon-link"),k(Cs,"aria-hidden","true"),k(Cs,"tabindex","-1"),k(Cs,"href","#goroutines"),k(ys,"id","goroutines"),k(qa,"class","language-go"),k(yo,"class","icon icon-link"),k(Ds,"aria-hidden","true"),k(Ds,"tabindex","-1"),k(Ds,"href","#channels"),k(Os,"id","channels"),k(Fa,"class","language-go"),k(Do,"class","icon icon-link"),k(xs,"aria-hidden","true"),k(xs,"tabindex","-1"),k(xs,"href","#reading-writing-and-buffering"),k(Rs,"id","reading-writing-and-buffering"),k(Za,"class","language-go"),k($a,"class","language-go"),k(Fo,"class","icon icon-link"),k(Ts,"aria-hidden","true"),k(Ts,"tabindex","-1"),k(Ts,"href","#for-range-and-channels"),k(Gs,"id","for-range-and-channels"),k(Ya,"class","language-go"),k(Vo,"class","icon icon-link"),k(As,"aria-hidden","true"),k(As,"tabindex","-1"),k(As,"href","#closing-a-channel"),k(Bs,"id","closing-a-channel"),k(Ja,"class","language-go"),k(Va,"class","language-go"),k(np,"class","icon icon-link"),k(Ss,"aria-hidden","true"),k(Ss,"tabindex","-1"),k(Ss,"href","#how-channels-behave"),k(Ls,"id","how-channels-behave"),k(Tp,"class","icon icon-link"),k(Us,"aria-hidden","true"),k(Us,"tabindex","-1"),k(Us,"href","#select"),k(Is,"id","select"),k(ga,"class","language-go"),k(nt,"class","language-go"),k(st,"class","language-bash"),k(at,"class","language-go"),k(tt,"class","language-go"),k(et,"class","language-go"),k(ml,"class","icon icon-link"),k(Zs,"aria-hidden","true"),k(Zs,"tabindex","-1"),k(Zs,"href","#concurrency-practices-and-patterns"),k(Fs,"id","concurrency-practices-and-patterns"),k(Ol,"class","icon icon-link"),k(Ks,"aria-hidden","true"),k(Ks,"tabindex","-1"),k(Ks,"href","#keep-your-apis-concurrency-free"),k($s,"id","keep-your-apis-concurrency-free"),k(Pl,"class","icon icon-link"),k(Vs,"aria-hidden","true"),k(Vs,"tabindex","-1"),k(Vs,"href","#goroutines-for-loops-and-varying-variables"),k(Js,"id","goroutines-for-loops-and-varying-variables"),k(ot,"class","language-go"),k(pt,"class","language-bash"),k(lt,"class","language-go"),k(ct,"class","language-go"),k(ut,"class","language-bash"),k(Ll,"class","icon icon-link"),k(Xs,"aria-hidden","true"),k(Xs,"tabindex","-1"),k(Xs,"href","#always-clean-up-your-goroutines"),k(js,"id","always-clean-up-your-goroutines"),k(rt,"class","language-go"),k(it,"class","language-go"),k(hl,"class","icon icon-link"),k(sa,"aria-hidden","true"),k(sa,"tabindex","-1"),k(sa,"href","#the-done-channel-pattern"),k(na,"id","the-done-channel-pattern"),k(ft,"class","language-go"),k(jl,"class","icon icon-link"),k(ta,"aria-hidden","true"),k(ta,"tabindex","-1"),k(ta,"href","#using-a-cancel-function-to-terminate-a-goroutine"),k(aa,"id","using-a-cancel-function-to-terminate-a-goroutine"),k(dt,"class","language-go"),k(tc,"class","icon icon-link"),k(pa,"aria-hidden","true"),k(pa,"tabindex","-1"),k(pa,"href","#when-to-use-buffered-and-unbuffered-channels"),k(oa,"id","when-to-use-buffered-and-unbuffered-channels"),k(Et,"class","language-go"),k(ec,"class","icon icon-link"),k(ca,"aria-hidden","true"),k(ca,"tabindex","-1"),k(ca,"href","#backpressure"),k(la,"id","backpressure"),k(vt,"class","language-go"),k(_t,"class","language-go"),k(ic,"class","icon icon-link"),k(ra,"aria-hidden","true"),k(ra,"tabindex","-1"),k(ra,"href","#turning-off-a-case-in-a-select"),k(ua,"id","turning-off-a-case-in-a-select"),k(bt,"class","language-go"),k(Cc,"class","icon icon-link"),k(ka,"aria-hidden","true"),k(ka,"tabindex","-1"),k(ka,"href","#timeout"),k(ia,"id","timeout"),k(wt,"class","language-go"),k(Tc,"class","icon icon-link"),k(da,"aria-hidden","true"),k(da,"tabindex","-1"),k(da,"href","#using-waitgroups"),k(fa,"id","using-waitgroups"),k(yt,"class","language-go"),k(Ct,"class","language-go"),k(Ot,"href","https://pkg.go.dev/golang.org/x/sync/errgroup"),k(Ot,"rel","nofollow"),k(su,"class","icon icon-link"),k(_a,"aria-hidden","true"),k(_a,"tabindex","-1"),k(_a,"href","#running-code-exactly-once"),k(va,"id","running-code-exactly-once"),k(Dt,"class","language-go"),k(yu,"class","icon icon-link"),k(wa,"aria-hidden","true"),k(wa,"tabindex","-1"),k(wa,"href","#putting-our-concurrent-tools-together"),k(ba,"id","putting-our-concurrent-tools-together"),k(Pt,"class","language-go"),k(xt,"class","language-go"),k(Gt,"class","language-go"),k(Tt,"class","language-go"),k(Bt,"class","language-go"),k(Mr,"class","icon icon-link"),k(ma,"aria-hidden","true"),k(ma,"tabindex","-1"),k(ma,"href","#when-to-use-mutexes-instead-of-channels"),k(Ca,"id","when-to-use-mutexes-instead-of-channels"),k(At,"class","language-go"),k(Mt,"class","language-go"),k(Ht,"class","language-go"),k(Lt,"class","language-go"),k(Oi,"class","icon icon-link"),k(xa,"aria-hidden","true"),k(xa,"tabindex","-1"),k(xa,"href","#atomics"),k(Ra,"id","atomics"),k(Ri,"class","icon icon-link"),k(Ta,"aria-hidden","true"),k(Ta,"tabindex","-1"),k(Ta,"href","#references"),k(Ga,"id","references")},m(n,c){u(n,$t,c),u(n,Mi,c),u(n,Kt,c),s(Kt,b3),u(n,Hi,c),u(n,Li,c),u(n,Si,c),u(n,hi,c),u(n,ds,c),s(ds,Es),s(Es,ao),s(ds,w3),u(n,Wi,c),u(n,Ii,c),u(n,Ui,c),u(n,Yt,c),s(Yt,y3),u(n,Ni,c),u(n,Jt,c),s(Jt,C3),u(n,qi,c),u(n,vs,c),s(vs,m3),s(vs,to),s(to,O3),s(vs,D3),u(n,Fi,c),u(n,Zi,c),u(n,$i,c),u(n,Ki,c),u(n,_s,c),s(_s,bs),s(bs,eo),s(_s,P3),u(n,Yi,c),u(n,Ji,c),u(n,Vi,c),u(n,ws,c),s(ws,R3),s(ws,oo),s(oo,x3),s(ws,G3),u(n,zi,c),u(n,Vt,c),s(Vt,T3),u(n,Qi,c),u(n,zt,c),s(zt,B3),u(n,ji,c),u(n,Qt,c),s(Qt,A3),u(n,Xi,c),u(n,gi,c),u(n,nk,c),u(n,sk,c),u(n,ys,c),s(ys,Cs),s(Cs,po),s(ys,M3),u(n,ak,c),u(n,tk,c),u(n,ek,c),u(n,X,c),s(X,H3),s(X,lo),s(lo,L3),s(X,S3),s(X,co),s(co,h3),s(X,W3),s(X,uo),s(uo,I3),s(X,U3),s(X,ro),s(ro,N3),s(X,q3),u(n,ok,c),u(n,jt,c),s(jt,F3),u(n,pk,c),u(n,lk,c),u(n,ck,c),u(n,Ua,c),s(Ua,io),s(io,Z3),s(Ua,$3),u(n,uk,c),u(n,Xt,c),s(Xt,K3),u(n,rk,c),u(n,g,c),s(g,ko),s(ko,Y3),s(g,J3),s(g,fo),s(fo,V3),s(g,z3),s(g,Eo),s(Eo,Q3),s(g,j3),s(g,vo),s(vo,X3),s(g,g3),s(g,_o),s(_o,nv),u(n,ik,c),u(n,gt,c),s(gt,sv),u(n,kk,c),u(n,fk,c),u(n,dk,c),u(n,ms,c),s(ms,av),s(ms,bo),s(bo,tv),s(ms,ev),u(n,Ek,c),u(n,Na,c),s(Na,wo),s(wo,ov),s(Na,pv),u(n,vk,c),u(n,ne,c),s(ne,lv),u(n,_k,c),u(n,qa,c),qa.innerHTML=sA,u(n,bk,c),u(n,wk,c),u(n,yk,c),u(n,Ck,c),u(n,Os,c),s(Os,Ds),s(Ds,yo),s(Os,cv),u(n,mk,c),u(n,Ok,c),u(n,Dk,c),u(n,Fn,c),s(Fn,uv),s(Fn,Co),s(Co,rv),s(Fn,iv),s(Fn,mo),s(mo,kv),s(Fn,fv),u(n,Pk,c),u(n,Fa,c),Fa.innerHTML=aA,u(n,Rk,c),u(n,Ps,c),s(Ps,dv),s(Ps,Oo),s(Oo,Ev),s(Ps,vv),u(n,xk,c),u(n,Gk,c),u(n,Tk,c),u(n,Bk,c),u(n,Rs,c),s(Rs,xs),s(xs,Do),s(Rs,_v),u(n,Ak,c),u(n,Sn,c),s(Sn,Po),s(Po,bv),s(Sn,wv),s(Sn,Ro),s(Ro,yv),s(Sn,Cv),s(Sn,xo),s(xo,mv),s(Sn,Ov),u(n,Mk,c),u(n,Za,c),Za.innerHTML=tA,u(n,Hk,c),u(n,se,c),s(se,Dv),u(n,Lk,c),u(n,v,c),s(v,Pv),s(v,Go),s(Go,Rv),s(v,xv),s(v,To),s(To,Gv),s(v,Tv),s(v,Bo),s(Bo,Bv),s(v,Av),s(v,Ao),s(Ao,Mv),s(v,Hv),s(v,Mo),s(Mo,Lv),s(v,Sv),s(v,Ho),s(Ho,hv),s(v,Wv),s(v,Lo),s(Lo,Iv),s(v,Uv),s(v,So),s(So,Nv),s(v,qv),u(n,Sk,c),u(n,hk,c),u(n,Wk,c),u(n,ae,c),s(ae,Fv),u(n,Ik,c),u(n,te,c),s(te,Zv),u(n,Uk,c),u(n,ee,c),s(ee,$v),u(n,Nk,c),u(n,$a,c),$a.innerHTML=eA,u(n,qk,c),u(n,nn,c),s(nn,Kv),s(nn,ho),s(ho,Yv),s(nn,Jv),s(nn,Wo),s(Wo,Vv),s(nn,zv),s(nn,Io),s(Io,Qv),s(nn,jv),s(nn,Uo),s(Uo,Xv),s(nn,gv),u(n,Fk,c),u(n,oe,c),s(oe,ps),s(ps,n5),s(ps,No),s(No,s5),s(ps,a5),s(ps,qo),s(qo,t5),s(ps,e5),u(n,Zk,c),u(n,pe,c),s(pe,o5),u(n,$k,c),u(n,Kk,c),u(n,Yk,c),u(n,Jk,c),u(n,Gs,c),s(Gs,Ts),s(Ts,Fo),s(Gs,p5),u(n,Vk,c),u(n,Ka,c),s(Ka,Zo),s(Zo,l5),s(Ka,c5),u(n,zk,c),u(n,Ya,c),Ya.innerHTML=oA,u(n,Qk,c),u(n,sn,c),s(sn,u5),s(sn,$o),s($o,r5),s(sn,i5),s(sn,Ko),s(Ko,k5),s(sn,f5),s(sn,Yo),s(Yo,d5),s(sn,E5),s(sn,Jo),s(Jo,v5),s(sn,_5),u(n,jk,c),u(n,Xk,c),u(n,gk,c),u(n,nf,c),u(n,Bs,c),s(Bs,As),s(As,Vo),s(Bs,b5),u(n,sf,c),u(n,Ms,c),s(Ms,w5),s(Ms,zo),s(zo,y5),s(Ms,C5),u(n,af,c),u(n,Ja,c),Ja.innerHTML=pA,u(n,tf,c),u(n,ef,c),u(n,of,c),u(n,pf,c),u(n,le,c),s(le,m5),u(n,lf,c),u(n,Hs,c),s(Hs,O5),s(Hs,Qo),s(Qo,D5),s(Hs,P5),u(n,cf,c),u(n,Va,c),Va.innerHTML=lA,u(n,uf,c),u(n,un,c),s(un,R5),s(un,jo),s(jo,x5),s(un,G5),s(un,Xo),s(Xo,T5),s(un,B5),s(un,go),s(go,A5),s(un,M5),u(n,rf,c),u(n,kf,c),u(n,ff,c),u(n,df,c),u(n,Ls,c),s(Ls,Ss),s(Ss,np),s(Ls,H5),u(n,Ef,c),u(n,ce,c),s(ce,L5),u(n,vf,c),u(n,hs,c),s(hs,sp),s(sp,K),s(K,_f),s(K,S5),s(K,ap),s(ap,h5),s(K,W5),s(K,tp),s(tp,I5),s(K,U5),s(K,ep),s(ep,N5),s(K,q5),s(K,op),s(op,F5),s(K,Z5),s(K,pp),s(pp,$5),s(hs,K5),s(hs,ls),s(ls,Y),s(Y,lp),s(lp,Y5),s(Y,J5),s(Y,za),s(za,V5),s(za,z5),s(za,Q5),s(Y,j5),s(Y,cp),s(cp,X5),s(Y,g5),s(Y,up),s(up,n_),s(Y,s_),s(Y,Qa),s(Qa,a_),s(Qa,t_),s(Qa,e_),s(Y,o_),s(Y,rp),s(rp,p_),s(ls,l_),s(ls,J),s(J,ip),s(ip,c_),s(J,u_),s(J,ja),s(ja,r_),s(ja,i_),s(ja,k_),s(J,f_),s(J,kp),s(kp,fp),s(fp,d_),s(J,E_),s(J,dp),s(dp,v_),s(J,__),s(J,Ep),s(Ep,vp),s(vp,b_),s(J,w_),s(J,_p),s(_p,y_),s(ls,C_),s(ls,V),s(V,bp),s(bp,m_),s(V,O_),s(V,wp),s(wp,D_),s(V,P_),s(V,yp),s(yp,Cp),s(Cp,R_),s(V,x_),s(V,mp),s(mp,G_),s(V,T_),s(V,Op),s(Op,Dp),s(Dp,B_),s(V,A_),s(V,Pp),s(Pp,Rp),s(Rp,M_),u(n,bf,c),u(n,Ws,c),s(Ws,H_),s(Ws,xp),s(xp,L_),s(Ws,S_),u(n,wf,c),u(n,Xa,c),s(Xa,Gp),s(Gp,h_),s(Xa,W_),u(n,yf,c),u(n,Cf,c),u(n,mf,c),u(n,Of,c),u(n,Is,c),s(Is,Us),s(Us,Tp),s(Is,I_),u(n,Df,c),u(n,Pf,c),u(n,Rf,c),u(n,rn,c),s(rn,U_),s(rn,Bp),s(Bp,N_),s(rn,q_),s(rn,Ap),s(Ap,F_),s(rn,Z_),s(rn,Mp),s(Mp,$_),s(rn,K_),u(n,xf,c),u(n,cs,c),s(cs,Hp),s(Hp,Y_),s(cs,J_),s(cs,Lp),s(Lp,V_),s(cs,z_),u(n,Gf,c),u(n,ga,c),ga.innerHTML=cA,u(n,Tf,c),u(n,hn,c),s(hn,Sp),s(Sp,Q_),s(hn,j_),s(hn,hp),s(hp,X_),s(hn,g_),s(hn,Wp),s(Wp,n4),s(hn,s4),u(n,Bf,c),u(n,Af,c),u(n,Mf,c),u(n,f,c),s(f,a4),s(f,Ip),s(Ip,t4),s(f,e4),s(f,Up),s(Up,o4),s(f,p4),s(f,Np),s(Np,l4),s(f,c4),s(f,qp),s(qp,u4),s(f,r4),s(f,Fp),s(Fp,i4),s(f,k4),s(f,Zp),s(Zp,f4),s(f,d4),s(f,$p),s($p,E4),s(f,v4),s(f,Kp),s(Kp,_4),s(f,b4),s(f,Yp),s(Yp,w4),s(f,y4),s(f,Jp),s(Jp,C4),s(f,m4),s(f,Vp),s(Vp,O4),s(f,D4),s(f,zp),s(zp,P4),s(f,R4),u(n,Hf,c),u(n,Ns,c),s(Ns,x4),s(Ns,Qp),s(Qp,G4),s(Ns,T4),u(n,Lf,c),u(n,nt,c),nt.innerHTML=uA,u(n,Sf,c),u(n,ue,c),s(ue,B4),u(n,hf,c),u(n,st,c),st.innerHTML=rA,u(n,Wf,c),u(n,Wn,c),s(Wn,jp),s(jp,A4),s(Wn,M4),s(Wn,Xp),s(Xp,H4),s(Wn,L4),s(Wn,gp),s(gp,S4),s(Wn,h4),u(n,If,c),u(n,Uf,c),u(n,Nf,c),u(n,qs,c),s(qs,W4),s(qs,nl),s(nl,I4),s(qs,U4),u(n,qf,c),u(n,at,c),at.innerHTML=iA,u(n,Ff,c),u(n,A,c),s(A,N4),s(A,sl),s(sl,q4),s(A,F4),s(A,al),s(al,Z4),s(A,$4),s(A,tl),s(tl,K4),s(A,Y4),s(A,el),s(el,J4),s(A,V4),s(A,ol),s(ol,z4),s(A,Q4),u(n,Zf,c),u(n,$f,c),u(n,Kf,c),u(n,us,c),s(us,pl),s(pl,j4),s(us,X4),s(us,ll),s(ll,g4),s(us,n0),u(n,Yf,c),u(n,tt,c),tt.innerHTML=kA,u(n,Jf,c),u(n,Zn,c),s(Zn,s0),s(Zn,cl),s(cl,a0),s(Zn,t0),s(Zn,ul),s(ul,e0),s(Zn,o0),u(n,Vf,c),u(n,zf,c),u(n,Qf,c),u(n,D,c),s(D,rl),s(rl,p0),s(D,l0),s(D,il),s(il,c0),s(D,u0),s(D,kl),s(kl,r0),s(D,i0),s(D,fl),s(fl,k0),s(D,f0),s(D,dl),s(dl,d0),s(D,E0),s(D,El),s(El,v0),s(D,_0),s(D,vl),s(vl,b0),s(D,w0),u(n,jf,c),u(n,et,c),et.innerHTML=fA,u(n,Xf,c),u(n,$n,c),s($n,y0),s($n,_l),s(_l,C0),s($n,m0),s($n,bl),s(bl,O0),s($n,D0),u(n,gf,c),u(n,n1,c),u(n,s1,c),u(n,In,c),s(In,wl),s(wl,P0),s(In,R0),s(In,yl),s(yl,x0),s(In,G0),s(In,Cl),s(Cl,T0),s(In,B0),u(n,a1,c),u(n,t1,c),u(n,e1,c),u(n,o1,c),u(n,Fs,c),s(Fs,Zs),s(Zs,ml),s(Fs,A0),u(n,p1,c),u(n,l1,c),u(n,c1,c),u(n,$s,c),s($s,Ks),s(Ks,Ol),s($s,M0),u(n,u1,c),u(n,re,c),s(re,H0),u(n,r1,c),u(n,Ys,c),s(Ys,L0),s(Ys,Dl),s(Dl,S0),s(Ys,h0),u(n,i1,c),u(n,ie,c),s(ie,W0),u(n,k1,c),u(n,ke,c),s(ke,I0),u(n,f1,c),u(n,d1,c),u(n,E1,c),u(n,v1,c),u(n,Js,c),s(Js,Vs),s(Vs,Pl),s(Js,U0),u(n,_1,c),u(n,zs,c),s(zs,N0),s(zs,Rl),s(Rl,q0),s(zs,F0),u(n,b1,c),u(n,ot,c),ot.innerHTML=dA,u(n,w1,c),u(n,kn,c),s(kn,Z0),s(kn,xl),s(xl,$0),s(kn,K0),s(kn,Gl),s(Gl,Y0),s(kn,J0),s(kn,Tl),s(Tl,V0),s(kn,z0),u(n,y1,c),u(n,pt,c),pt.innerHTML=EA,u(n,C1,c),u(n,fn,c),s(fn,Q0),s(fn,Bl),s(Bl,j0),s(fn,X0),s(fn,Al),s(Al,g0),s(fn,n6),s(fn,Ml),s(Ml,s6),s(fn,a6),u(n,m1,c),u(n,Qs,c),s(Qs,t6),s(Qs,Hl),s(Hl,e6),s(Qs,o6),u(n,O1,c),u(n,lt,c),lt.innerHTML=vA,u(n,D1,c),u(n,fe,c),s(fe,p6),u(n,P1,c),u(n,ct,c),ct.innerHTML=_A,u(n,R1,c),u(n,de,c),s(de,l6),u(n,x1,c),u(n,ut,c),ut.innerHTML=bA,u(n,G1,c),u(n,T1,c),u(n,B1,c),u(n,A1,c),u(n,js,c),s(js,Xs),s(Xs,Ll),s(js,c6),u(n,M1,c),u(n,gs,c),s(gs,u6),s(gs,Sl),s(Sl,r6),s(gs,i6),u(n,H1,c),u(n,Ee,c),s(Ee,k6),u(n,L1,c),u(n,rt,c),rt.innerHTML=wA,u(n,S1,c),u(n,ve,c),s(ve,f6),u(n,h1,c),u(n,_e,c),s(_e,d6),u(n,W1,c),u(n,it,c),it.innerHTML=yA,u(n,I1,c),u(n,U1,c),u(n,N1,c),u(n,q1,c),u(n,na,c),s(na,sa),s(sa,hl),s(na,E6),u(n,F1,c),u(n,kt,c),s(kt,Wl),s(Wl,v6),s(kt,_6),u(n,Z1,c),u(n,ft,c),ft.innerHTML=CA,u(n,$1,c),u(n,C,c),s(C,b6),s(C,Il),s(Il,w6),s(C,y6),s(C,Ul),s(Ul,C6),s(C,m6),s(C,Nl),s(Nl,O6),s(C,D6),s(C,ql),s(ql,P6),s(C,R6),s(C,Fl),s(Fl,x6),s(C,G6),s(C,Zl),s(Zl,T6),s(C,B6),s(C,$l),s($l,A6),s(C,M6),u(n,K1,c),u(n,dn,c),s(dn,H6),s(dn,Kl),s(Kl,L6),s(dn,S6),s(dn,Yl),s(Yl,h6),s(dn,W6),s(dn,Jl),s(Jl,I6),s(dn,U6),u(n,Y1,c),u(n,En,c),s(En,N6),s(En,Vl),s(Vl,q6),s(En,F6),s(En,zl),s(zl,Z6),s(En,$6),s(En,Ql),s(Ql,K6),s(En,Y6),u(n,J1,c),u(n,V1,c),u(n,z1,c),u(n,Q1,c),u(n,aa,c),s(aa,ta),s(ta,jl),s(aa,J6),u(n,j1,c),u(n,be,c),s(be,V6),u(n,X1,c),u(n,ea,c),s(ea,z6),s(ea,Xl),s(Xl,Q6),s(ea,j6),u(n,g1,c),u(n,dt,c),dt.innerHTML=mA,u(n,nd,c),u(n,pn,c),s(pn,gl),s(gl,X6),s(pn,g6),s(pn,nc),s(nc,n7),s(pn,s7),s(pn,sc),s(sc,a7),s(pn,t7),s(pn,ac),s(ac,e7),s(pn,o7),u(n,sd,c),u(n,ad,c),u(n,td,c),u(n,ed,c),u(n,oa,c),s(oa,pa),s(pa,tc),s(oa,p7),u(n,od,c),u(n,we,c),s(we,l7),u(n,pd,c),u(n,ye,c),s(ye,c7),u(n,ld,c),u(n,Ce,c),s(Ce,u7),u(n,cd,c),u(n,Et,c),Et.innerHTML=OA,u(n,ud,c),u(n,me,c),s(me,r7),u(n,rd,c),u(n,id,c),u(n,kd,c),u(n,fd,c),u(n,la,c),s(la,ca),s(ca,ec),s(la,i7),u(n,dd,c),u(n,Kn,c),s(Kn,k7),s(Kn,oc),s(oc,f7),s(Kn,d7),s(Kn,pc),s(pc,E7),s(Kn,v7),u(n,Ed,c),u(n,vt,c),vt.innerHTML=DA,u(n,vd,c),u(n,an,c),s(an,_7),s(an,lc),s(lc,b7),s(an,w7),s(an,cc),s(cc,y7),s(an,C7),s(an,uc),s(uc,m7),s(an,O7),s(an,rc),s(rc,D7),s(an,P7),u(n,_d,c),u(n,Oe,c),s(Oe,R7),u(n,bd,c),u(n,_t,c),_t.innerHTML=PA,u(n,wd,c),u(n,yd,c),u(n,Cd,c),u(n,md,c),u(n,ua,c),s(ua,ra),s(ra,ic),s(ua,x7),u(n,Od,c),u(n,tn,c),s(tn,G7),s(tn,kc),s(kc,T7),s(tn,B7),s(tn,fc),s(fc,A7),s(tn,M7),s(tn,dc),s(dc,H7),s(tn,L7),s(tn,Ec),s(Ec,S7),s(tn,h7),u(n,Dd,c),u(n,M,c),s(M,W7),s(M,vc),s(vc,I7),s(M,U7),s(M,_c),s(_c,N7),s(M,q7),s(M,bc),s(bc,F7),s(M,Z7),s(M,wc),s(wc,$7),s(M,K7),s(M,yc),s(yc,Y7),s(M,J7),u(n,Pd,c),u(n,bt,c),bt.innerHTML=RA,u(n,Rd,c),u(n,xd,c),u(n,Gd,c),u(n,Td,c),u(n,ia,c),s(ia,ka),s(ka,Cc),s(ia,V7),u(n,Bd,c),u(n,De,c),s(De,z7),u(n,Ad,c),u(n,wt,c),wt.innerHTML=xA,u(n,Md,c),u(n,Pe,c),s(Pe,Q7),u(n,Hd,c),u(n,H,c),s(H,j7),s(H,mc),s(mc,X7),s(H,g7),s(H,Oc),s(Oc,n8),s(H,s8),s(H,Dc),s(Dc,a8),s(H,t8),s(H,Pc),s(Pc,e8),s(H,o8),s(H,Rc),s(Rc,p8),s(H,l8),u(n,Ld,c),u(n,Yn,c),s(Yn,c8),s(Yn,xc),s(xc,u8),s(Yn,r8),s(Yn,Gc),s(Gc,i8),s(Yn,k8),u(n,Sd,c),u(n,hd,c),u(n,Wd,c),u(n,Id,c),u(n,fa,c),s(fa,da),s(da,Tc),s(fa,f8),u(n,Ud,c),u(n,Ea,c),s(Ea,d8),s(Ea,Bc),s(Bc,E8),s(Ea,v8),u(n,Nd,c),u(n,yt,c),yt.innerHTML=GA,u(n,qd,c),u(n,b,c),s(b,Ac),s(Ac,_8),s(b,b8),s(b,Mc),s(Mc,w8),s(b,y8),s(b,Hc),s(Hc,C8),s(b,m8),s(b,Lc),s(Lc,O8),s(b,D8),s(b,Sc),s(Sc,P8),s(b,R8),s(b,hc),s(hc,x8),s(b,G8),s(b,Wc),s(Wc,T8),s(b,B8),s(b,Ic),s(Ic,A8),s(b,M8),u(n,Fd,c),u(n,G,c),s(G,Uc),s(Uc,H8),s(G,L8),s(G,Nc),s(Nc,S8),s(G,h8),s(G,qc),s(qc,W8),s(G,I8),s(G,Fc),s(Fc,U8),s(G,N8),s(G,Zc),s(Zc,q8),s(G,F8),s(G,$c),s($c,Z8),s(G,$8),u(n,Zd,c),u(n,Re,c),s(Re,K8),u(n,$d,c),u(n,Kd,c),u(n,Yd,c),u(n,xe,c),s(xe,Y8),u(n,Jd,c),u(n,Ct,c),Ct.innerHTML=TA,u(n,Vd,c),u(n,en,c),s(en,J8),s(en,Kc),s(Kc,V8),s(en,z8),s(en,Yc),s(Yc,Q8),s(en,j8),s(en,Jc),s(Jc,X8),s(en,g8),s(en,Vc),s(Vc,nb),s(en,sb),u(n,zd,c),u(n,mt,c),s(mt,zc),s(zc,ab),s(mt,tb),u(n,Qd,c),u(n,Ge,c),s(Ge,L),s(L,Qc),s(Qc,eb),s(L,ob),s(L,jc),s(jc,pb),s(L,lb),s(L,Xc),s(Xc,cb),s(L,ub),s(L,gc),s(gc,rb),s(L,ib),s(L,nu),s(nu,kb),s(L,fb),s(L,Ot),s(Ot,db),s(L,Eb),u(n,jd,c),u(n,Xd,c),u(n,gd,c),u(n,n2,c),u(n,va,c),s(va,_a),s(_a,su),s(va,vb),u(n,s2,c),u(n,S,c),s(S,_b),s(S,au),s(au,bb),s(S,wb),s(S,tu),s(tu,yb),s(S,Cb),s(S,eu),s(eu,mb),s(S,Ob),s(S,ou),s(ou,Db),s(S,Pb),s(S,pu),s(pu,Rb),s(S,xb),u(n,a2,c),u(n,Dt,c),Dt.innerHTML=BA,u(n,t2,c),u(n,_,c),s(_,Gb),s(_,lu),s(lu,Tb),s(_,Bb),s(_,cu),s(cu,Ab),s(_,Mb),s(_,uu),s(uu,Hb),s(_,Lb),s(_,ru),s(ru,Sb),s(_,hb),s(_,iu),s(iu,Wb),s(_,Ib),s(_,ku),s(ku,Ub),s(_,Nb),s(_,fu),s(fu,qb),s(_,Fb),s(_,du),s(du,Zb),s(_,$b),u(n,e2,c),u(n,h,c),s(h,Kb),s(h,Eu),s(Eu,Yb),s(h,Jb),s(h,vu),s(vu,Vb),s(h,zb),s(h,_u),s(_u,Qb),s(h,jb),s(h,bu),s(bu,Xb),s(h,gb),s(h,wu),s(wu,n9),s(h,s9),u(n,o2,c),u(n,p2,c),u(n,l2,c),u(n,c2,c),u(n,ba,c),s(ba,wa),s(wa,yu),s(ba,a9),u(n,u2,c),u(n,Te,c),s(Te,t9),u(n,r2,c),u(n,Be,c),s(Be,e9),u(n,i2,c),u(n,Ae,c),s(Ae,o9),u(n,k2,c),u(n,Pt,c),Pt.innerHTML=AA,u(n,f2,c),u(n,vn,c),s(vn,p9),s(vn,Cu),s(Cu,l9),s(vn,c9),s(vn,mu),s(mu,u9),s(vn,r9),s(vn,Ou),s(Ou,i9),s(vn,k9),u(n,d2,c),u(n,W,c),s(W,f9),s(W,Du),s(Du,d9),s(W,E9),s(W,Pu),s(Pu,v9),s(W,_9),s(W,Ru),s(Ru,b9),s(W,w9),s(W,xu),s(xu,y9),s(W,C9),s(W,Gu),s(Gu,m9),s(W,O9),u(n,E2,c),u(n,Jn,c),s(Jn,D9),s(Jn,Tu),s(Tu,P9),s(Jn,R9),s(Jn,Bu),s(Bu,x9),s(Jn,G9),u(n,v2,c),u(n,_2,c),u(n,b2,c),u(n,Rt,c),s(Rt,Au),s(Au,T9),s(Rt,B9),u(n,w2,c),u(n,xt,c),xt.innerHTML=MA,u(n,y2,c),u(n,C2,c),u(n,m2,c),u(n,I,c),s(I,A9),s(I,Mu),s(Mu,M9),s(I,H9),s(I,Hu),s(Hu,L9),s(I,S9),s(I,Lu),s(Lu,h9),s(I,W9),s(I,Su),s(Su,I9),s(I,U9),s(I,hu),s(hu,N9),s(I,q9),u(n,O2,c),u(n,Gt,c),Gt.innerHTML=HA,u(n,D2,c),u(n,z,c),s(z,Wu),s(Wu,F9),s(z,Z9),s(z,Iu),s(Iu,$9),s(z,K9),s(z,Uu),s(Uu,Y9),s(z,J9),s(z,Nu),s(Nu,V9),s(z,z9),s(z,qu),s(qu,Q9),s(z,j9),u(n,P2,c),u(n,E,c),s(E,Fu),s(Fu,X9),s(E,g9),s(E,Zu),s(Zu,nw),s(E,sw),s(E,$u),s($u,aw),s(E,tw),s(E,Ku),s(Ku,ew),s(E,ow),s(E,Yu),s(Yu,pw),s(E,lw),s(E,Ju),s(Ju,cw),s(E,uw),s(E,Vu),s(Vu,rw),s(E,iw),s(E,zu),s(zu,kw),s(E,fw),s(E,Qu),s(Qu,dw),s(E,Ew),s(E,ju),s(ju,vw),s(E,_w),u(n,R2,c),u(n,x2,c),u(n,G2,c),u(n,Vn,c),s(Vn,bw),s(Vn,Xu),s(Xu,ww),s(Vn,yw),s(Vn,gu),s(gu,Cw),s(Vn,mw),u(n,T2,c),u(n,Tt,c),Tt.innerHTML=LA,u(n,B2,c),u(n,m,c),s(m,Ow),s(m,nr),s(nr,Dw),s(m,Pw),s(m,sr),s(sr,Rw),s(m,xw),s(m,ar),s(ar,Gw),s(m,Tw),s(m,tr),s(tr,Bw),s(m,Aw),s(m,er),s(er,Mw),s(m,Hw),s(m,or),s(or,Lw),s(m,Sw),s(m,pr),s(pr,hw),s(m,Ww),u(n,A2,c),u(n,zn,c),s(zn,Iw),s(zn,lr),s(lr,Uw),s(zn,Nw),s(zn,cr),s(cr,qw),s(zn,Fw),u(n,M2,c),u(n,H2,c),u(n,L2,c),u(n,O,c),s(O,Zw),s(O,ur),s(ur,$w),s(O,Kw),s(O,rr),s(rr,Yw),s(O,Jw),s(O,ir),s(ir,Vw),s(O,zw),s(O,kr),s(kr,Qw),s(O,jw),s(O,fr),s(fr,Xw),s(O,gw),s(O,dr),s(dr,ny),s(O,sy),s(O,Er),s(Er,ay),s(O,ty),u(n,S2,c),u(n,Bt,c),Bt.innerHTML=SA,u(n,h2,c),u(n,U,c),s(U,ey),s(U,vr),s(vr,oy),s(U,py),s(U,_r),s(_r,ly),s(U,cy),s(U,br),s(br,uy),s(U,ry),s(U,wr),s(wr,iy),s(U,ky),s(U,yr),s(yr,fy),s(U,dy),u(n,W2,c),u(n,rs,c),s(rs,Cr),s(Cr,Ey),s(rs,vy),s(rs,mr),s(mr,_y),s(rs,by),u(n,I2,c),u(n,U2,c),u(n,N2,c),u(n,w,c),s(w,Or),s(Or,wy),s(w,yy),s(w,Dr),s(Dr,Cy),s(w,my),s(w,Pr),s(Pr,Oy),s(w,Dy),s(w,Rr),s(Rr,Py),s(w,Ry),s(w,xr),s(xr,xy),s(w,Gy),s(w,Gr),s(Gr,Ty),s(w,By),s(w,Tr),s(Tr,Ay),s(w,My),s(w,Br),s(Br,Hy),s(w,Ly),u(n,q2,c),u(n,ya,c),s(ya,Sy),s(ya,Ar),s(Ar,hy),s(ya,Wy),u(n,F2,c),u(n,Z2,c),u(n,$2,c),u(n,K2,c),u(n,Ca,c),s(Ca,ma),s(ma,Mr),s(Ca,Iy),u(n,Y2,c),u(n,J2,c),u(n,V2,c),u(n,_n,c),s(_n,Uy),s(_n,Hr),s(Hr,Ny),s(_n,qy),s(_n,Lr),s(Lr,Fy),s(_n,Zy),s(_n,Sr),s(Sr,$y),s(_n,Ky),u(n,z2,c),u(n,Oa,c),s(Oa,Yy),s(Oa,hr),s(hr,Jy),s(Oa,Vy),u(n,Q2,c),u(n,Me,c),s(Me,zy),u(n,j2,c),u(n,X2,c),u(n,g2,c),u(n,He,c),s(He,Qy),u(n,nE,c),u(n,Le,c),s(Le,jy),u(n,sE,c),u(n,At,c),At.innerHTML=hA,u(n,aE,c),u(n,Da,c),s(Da,Xy),s(Da,Wr),s(Wr,gy),s(Da,nC),u(n,tE,c),u(n,eE,c),u(n,oE,c),u(n,Se,c),s(Se,sC),u(n,pE,c),u(n,Mt,c),Mt.innerHTML=WA,u(n,lE,c),u(n,Un,c),s(Un,Ir),s(Ir,aC),s(Un,tC),s(Un,Ur),s(Ur,eC),s(Un,oC),s(Un,Nr),s(Nr,pC),s(Un,lC),u(n,cE,c),u(n,Ht,c),Ht.innerHTML=IA,u(n,uE,c),u(n,he,c),s(he,cC),u(n,rE,c),u(n,P,c),s(P,uC),s(P,qr),s(qr,rC),s(P,iC),s(P,Fr),s(Fr,kC),s(P,fC),s(P,Zr),s(Zr,dC),s(P,EC),s(P,$r),s($r,vC),s(P,_C),s(P,Kr),s(Kr,bC),s(P,wC),s(P,Yr),s(Yr,yC),s(P,CC),u(n,iE,c),u(n,N,c),s(N,mC),s(N,Jr),s(Jr,OC),s(N,DC),s(N,Vr),s(Vr,PC),s(N,RC),s(N,zr),s(zr,xC),s(N,GC),s(N,Qr),s(Qr,TC),s(N,BC),s(N,jr),s(jr,AC),s(N,MC),u(n,kE,c),u(n,q,c),s(q,HC),s(q,Xr),s(Xr,LC),s(q,SC),s(q,gr),s(gr,hC),s(q,WC),s(q,ni),s(ni,IC),s(q,UC),s(q,si),s(si,NC),s(q,qC),s(q,ai),s(ai,FC),s(q,ZC),u(n,fE,c),u(n,Lt,c),Lt.innerHTML=UA,u(n,dE,c),u(n,We,c),s(We,$C),u(n,EE,c),u(n,vE,c),u(n,_E,c),u(n,Pa,c),s(Pa,KC),s(Pa,ti),s(ti,YC),s(Pa,JC),u(n,bE,c),u(n,Qn,c),s(Qn,ei),s(ei,VC),s(Qn,zC),s(Qn,oi),s(oi,QC),s(Qn,jC),s(Qn,pi),s(pi,XC),u(n,wE,c),u(n,Ie,c),s(Ie,gC),u(n,yE,c),u(n,CE,c),u(n,mE,c),u(n,Ue,c),s(Ue,nm),u(n,OE,c),u(n,bn,c),s(bn,sm),s(bn,li),s(li,am),s(bn,tm),s(bn,ci),s(ci,em),s(bn,om),s(bn,ui),s(ui,pm),s(bn,lm),u(n,DE,c),u(n,Ne,c),s(Ne,cm),u(n,PE,c),u(n,is,c),s(is,ri),s(ri,um),s(is,rm),s(is,ii),s(ii,im),s(is,km),u(n,RE,c),u(n,qe,c),s(qe,fm),u(n,xE,c),u(n,jn,c),s(jn,wn),s(wn,ki),s(ki,dm),s(wn,Em),s(wn,fi),s(fi,vm),s(wn,_m),s(wn,di),s(di,bm),s(wn,wm),s(wn,Ei),s(Ei,ym),s(wn,Cm),s(jn,mm),s(jn,St),s(St,vi),s(vi,Om),s(St,Dm),s(St,ht),s(ht,Pm),s(ht,_i),s(_i,Rm),s(ht,xm),s(jn,Gm),s(jn,Q),s(Q,Tm),s(Q,bi),s(bi,Bm),s(Q,Am),s(Q,wi),s(wi,Mm),s(Q,Hm),s(Q,yi),s(yi,Lm),s(Q,Sm),s(Q,Ci),s(Ci,hm),s(Q,Wm),s(Q,mi),s(mi,Im),s(Q,Um),u(n,GE,c),u(n,TE,c),u(n,BE,c),u(n,AE,c),u(n,Ra,c),s(Ra,xa),s(xa,Oi),s(Ra,Nm),u(n,ME,c),u(n,HE,c),u(n,LE,c),u(n,Xn,c),s(Xn,qm),s(Xn,Di),s(Di,Fm),s(Xn,Zm),s(Xn,Pi),s(Pi,$m),s(Xn,Km),u(n,SE,c),u(n,Fe,c),s(Fe,Ym),u(n,hE,c),u(n,WE,c),u(n,IE,c),u(n,UE,c),u(n,Ga,c),s(Ga,Ta),s(Ta,Ri),s(Ga,Jm),u(n,NE,c),u(n,qE,c),u(n,FE,c),u(n,Nn,c),s(Nn,xi),s(xi,Vm),s(Nn,zm),BM(Wt,Nn,null),s(Nn,Qm),s(Nn,jm),s(Nn,Xm),u(n,ZE,c),u(n,$E,c),u(n,KE,c),YE=!0},p:AM,i(n){YE||(MM(Wt.$$.fragment,n),YE=!0)},o(n){HM(Wt.$$.fragment,n),YE=!1},d(n){n&&a($t),n&&a(Mi),n&&a(Kt),n&&a(Hi),n&&a(Li),n&&a(Si),n&&a(hi),n&&a(ds),n&&a(Wi),n&&a(Ii),n&&a(Ui),n&&a(Yt),n&&a(Ni),n&&a(Jt),n&&a(qi),n&&a(vs),n&&a(Fi),n&&a(Zi),n&&a($i),n&&a(Ki),n&&a(_s),n&&a(Yi),n&&a(Ji),n&&a(Vi),n&&a(ws),n&&a(zi),n&&a(Vt),n&&a(Qi),n&&a(zt),n&&a(ji),n&&a(Qt),n&&a(Xi),n&&a(gi),n&&a(nk),n&&a(sk),n&&a(ys),n&&a(ak),n&&a(tk),n&&a(ek),n&&a(X),n&&a(ok),n&&a(jt),n&&a(pk),n&&a(lk),n&&a(ck),n&&a(Ua),n&&a(uk),n&&a(Xt),n&&a(rk),n&&a(g),n&&a(ik),n&&a(gt),n&&a(kk),n&&a(fk),n&&a(dk),n&&a(ms),n&&a(Ek),n&&a(Na),n&&a(vk),n&&a(ne),n&&a(_k),n&&a(qa),n&&a(bk),n&&a(wk),n&&a(yk),n&&a(Ck),n&&a(Os),n&&a(mk),n&&a(Ok),n&&a(Dk),n&&a(Fn),n&&a(Pk),n&&a(Fa),n&&a(Rk),n&&a(Ps),n&&a(xk),n&&a(Gk),n&&a(Tk),n&&a(Bk),n&&a(Rs),n&&a(Ak),n&&a(Sn),n&&a(Mk),n&&a(Za),n&&a(Hk),n&&a(se),n&&a(Lk),n&&a(v),n&&a(Sk),n&&a(hk),n&&a(Wk),n&&a(ae),n&&a(Ik),n&&a(te),n&&a(Uk),n&&a(ee),n&&a(Nk),n&&a($a),n&&a(qk),n&&a(nn),n&&a(Fk),n&&a(oe),n&&a(Zk),n&&a(pe),n&&a($k),n&&a(Kk),n&&a(Yk),n&&a(Jk),n&&a(Gs),n&&a(Vk),n&&a(Ka),n&&a(zk),n&&a(Ya),n&&a(Qk),n&&a(sn),n&&a(jk),n&&a(Xk),n&&a(gk),n&&a(nf),n&&a(Bs),n&&a(sf),n&&a(Ms),n&&a(af),n&&a(Ja),n&&a(tf),n&&a(ef),n&&a(of),n&&a(pf),n&&a(le),n&&a(lf),n&&a(Hs),n&&a(cf),n&&a(Va),n&&a(uf),n&&a(un),n&&a(rf),n&&a(kf),n&&a(ff),n&&a(df),n&&a(Ls),n&&a(Ef),n&&a(ce),n&&a(vf),n&&a(hs),n&&a(bf),n&&a(Ws),n&&a(wf),n&&a(Xa),n&&a(yf),n&&a(Cf),n&&a(mf),n&&a(Of),n&&a(Is),n&&a(Df),n&&a(Pf),n&&a(Rf),n&&a(rn),n&&a(xf),n&&a(cs),n&&a(Gf),n&&a(ga),n&&a(Tf),n&&a(hn),n&&a(Bf),n&&a(Af),n&&a(Mf),n&&a(f),n&&a(Hf),n&&a(Ns),n&&a(Lf),n&&a(nt),n&&a(Sf),n&&a(ue),n&&a(hf),n&&a(st),n&&a(Wf),n&&a(Wn),n&&a(If),n&&a(Uf),n&&a(Nf),n&&a(qs),n&&a(qf),n&&a(at),n&&a(Ff),n&&a(A),n&&a(Zf),n&&a($f),n&&a(Kf),n&&a(us),n&&a(Yf),n&&a(tt),n&&a(Jf),n&&a(Zn),n&&a(Vf),n&&a(zf),n&&a(Qf),n&&a(D),n&&a(jf),n&&a(et),n&&a(Xf),n&&a($n),n&&a(gf),n&&a(n1),n&&a(s1),n&&a(In),n&&a(a1),n&&a(t1),n&&a(e1),n&&a(o1),n&&a(Fs),n&&a(p1),n&&a(l1),n&&a(c1),n&&a($s),n&&a(u1),n&&a(re),n&&a(r1),n&&a(Ys),n&&a(i1),n&&a(ie),n&&a(k1),n&&a(ke),n&&a(f1),n&&a(d1),n&&a(E1),n&&a(v1),n&&a(Js),n&&a(_1),n&&a(zs),n&&a(b1),n&&a(ot),n&&a(w1),n&&a(kn),n&&a(y1),n&&a(pt),n&&a(C1),n&&a(fn),n&&a(m1),n&&a(Qs),n&&a(O1),n&&a(lt),n&&a(D1),n&&a(fe),n&&a(P1),n&&a(ct),n&&a(R1),n&&a(de),n&&a(x1),n&&a(ut),n&&a(G1),n&&a(T1),n&&a(B1),n&&a(A1),n&&a(js),n&&a(M1),n&&a(gs),n&&a(H1),n&&a(Ee),n&&a(L1),n&&a(rt),n&&a(S1),n&&a(ve),n&&a(h1),n&&a(_e),n&&a(W1),n&&a(it),n&&a(I1),n&&a(U1),n&&a(N1),n&&a(q1),n&&a(na),n&&a(F1),n&&a(kt),n&&a(Z1),n&&a(ft),n&&a($1),n&&a(C),n&&a(K1),n&&a(dn),n&&a(Y1),n&&a(En),n&&a(J1),n&&a(V1),n&&a(z1),n&&a(Q1),n&&a(aa),n&&a(j1),n&&a(be),n&&a(X1),n&&a(ea),n&&a(g1),n&&a(dt),n&&a(nd),n&&a(pn),n&&a(sd),n&&a(ad),n&&a(td),n&&a(ed),n&&a(oa),n&&a(od),n&&a(we),n&&a(pd),n&&a(ye),n&&a(ld),n&&a(Ce),n&&a(cd),n&&a(Et),n&&a(ud),n&&a(me),n&&a(rd),n&&a(id),n&&a(kd),n&&a(fd),n&&a(la),n&&a(dd),n&&a(Kn),n&&a(Ed),n&&a(vt),n&&a(vd),n&&a(an),n&&a(_d),n&&a(Oe),n&&a(bd),n&&a(_t),n&&a(wd),n&&a(yd),n&&a(Cd),n&&a(md),n&&a(ua),n&&a(Od),n&&a(tn),n&&a(Dd),n&&a(M),n&&a(Pd),n&&a(bt),n&&a(Rd),n&&a(xd),n&&a(Gd),n&&a(Td),n&&a(ia),n&&a(Bd),n&&a(De),n&&a(Ad),n&&a(wt),n&&a(Md),n&&a(Pe),n&&a(Hd),n&&a(H),n&&a(Ld),n&&a(Yn),n&&a(Sd),n&&a(hd),n&&a(Wd),n&&a(Id),n&&a(fa),n&&a(Ud),n&&a(Ea),n&&a(Nd),n&&a(yt),n&&a(qd),n&&a(b),n&&a(Fd),n&&a(G),n&&a(Zd),n&&a(Re),n&&a($d),n&&a(Kd),n&&a(Yd),n&&a(xe),n&&a(Jd),n&&a(Ct),n&&a(Vd),n&&a(en),n&&a(zd),n&&a(mt),n&&a(Qd),n&&a(Ge),n&&a(jd),n&&a(Xd),n&&a(gd),n&&a(n2),n&&a(va),n&&a(s2),n&&a(S),n&&a(a2),n&&a(Dt),n&&a(t2),n&&a(_),n&&a(e2),n&&a(h),n&&a(o2),n&&a(p2),n&&a(l2),n&&a(c2),n&&a(ba),n&&a(u2),n&&a(Te),n&&a(r2),n&&a(Be),n&&a(i2),n&&a(Ae),n&&a(k2),n&&a(Pt),n&&a(f2),n&&a(vn),n&&a(d2),n&&a(W),n&&a(E2),n&&a(Jn),n&&a(v2),n&&a(_2),n&&a(b2),n&&a(Rt),n&&a(w2),n&&a(xt),n&&a(y2),n&&a(C2),n&&a(m2),n&&a(I),n&&a(O2),n&&a(Gt),n&&a(D2),n&&a(z),n&&a(P2),n&&a(E),n&&a(R2),n&&a(x2),n&&a(G2),n&&a(Vn),n&&a(T2),n&&a(Tt),n&&a(B2),n&&a(m),n&&a(A2),n&&a(zn),n&&a(M2),n&&a(H2),n&&a(L2),n&&a(O),n&&a(S2),n&&a(Bt),n&&a(h2),n&&a(U),n&&a(W2),n&&a(rs),n&&a(I2),n&&a(U2),n&&a(N2),n&&a(w),n&&a(q2),n&&a(ya),n&&a(F2),n&&a(Z2),n&&a($2),n&&a(K2),n&&a(Ca),n&&a(Y2),n&&a(J2),n&&a(V2),n&&a(_n),n&&a(z2),n&&a(Oa),n&&a(Q2),n&&a(Me),n&&a(j2),n&&a(X2),n&&a(g2),n&&a(He),n&&a(nE),n&&a(Le),n&&a(sE),n&&a(At),n&&a(aE),n&&a(Da),n&&a(tE),n&&a(eE),n&&a(oE),n&&a(Se),n&&a(pE),n&&a(Mt),n&&a(lE),n&&a(Un),n&&a(cE),n&&a(Ht),n&&a(uE),n&&a(he),n&&a(rE),n&&a(P),n&&a(iE),n&&a(N),n&&a(kE),n&&a(q),n&&a(fE),n&&a(Lt),n&&a(dE),n&&a(We),n&&a(EE),n&&a(vE),n&&a(_E),n&&a(Pa),n&&a(bE),n&&a(Qn),n&&a(wE),n&&a(Ie),n&&a(yE),n&&a(CE),n&&a(mE),n&&a(Ue),n&&a(OE),n&&a(bn),n&&a(DE),n&&a(Ne),n&&a(PE),n&&a(is),n&&a(RE),n&&a(qe),n&&a(xE),n&&a(jn),n&&a(GE),n&&a(TE),n&&a(BE),n&&a(AE),n&&a(Ra),n&&a(ME),n&&a(HE),n&&a(LE),n&&a(Xn),n&&a(SE),n&&a(Fe),n&&a(hE),n&&a(WE),n&&a(IE),n&&a(UE),n&&a(Ga),n&&a(NE),n&&a(qE),n&&a(FE),n&&a(Nn),LM(Wt),n&&a(ZE),n&&a($E),n&&a(KE)}}}const UM={title:"Go의 동시성",date:"2022-08-30T00:00:00.000Z",excerpt:"Concurrency in Go",categories:["Golang","Basic Golang"],coverImage:"/post_img/Go/Golang_basics/cover.png",coverWidth:16,coverHeight:9,indexed:!1,exposed:!0};class NM extends PM{constructor($t){super(),RM(this,$t,null,hM,xM,{})}}export{NM as default,UM as metadata};
