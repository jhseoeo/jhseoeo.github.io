import{S as ue,i as ie,s as re,k as p,q as e,a as i,y as ke,l as o,m as u,h as s,r as c,c as r,z as fe,n as k,U as de,b as l,E as a,A as me,g as Ee,d as ve,B as we,M as _e}from"./index.d78780bf.js";import{C as ye}from"./CodeBlockWrapper.eeb7c0c0.js";function be(Sa){let m,x=`<code class="language-go"><span class="token keyword">func</span> <span class="token function">observer</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> cancel <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> progress <span class="token operator">*</span>ProgressMeter<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	tick <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">NewTicker</span><span class="token punctuation">(</span><span class="token number">100</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Millisecond<span class="token punctuation">)</span>
	<span class="token keyword">defer</span> tick<span class="token punctuation">.</span><span class="token function">Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">var</span> lastProgress <span class="token builtin">int64</span>
	<span class="token keyword">for</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">select</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">case</span> <span class="token operator">&lt;-</span>ctx<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
			<span class="token keyword">return</span>
		<span class="token keyword">case</span> <span class="token operator">&lt;-</span>tick<span class="token punctuation">.</span>C<span class="token punctuation">:</span>
			p<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> progress<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
			<span class="token keyword">if</span> p <span class="token operator">==</span> lastProgress <span class="token punctuation">&#123;</span>
				fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"No progress in the last 100ms"</span><span class="token punctuation">)</span>
				<span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
				<span class="token keyword">return</span>
			<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
				lastProgress <span class="token operator">=</span> p
				fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Progress:"</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span>
			<span class="token punctuation">&#125;</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`;return{c(){m=p("pre"),this.h()},l(C){m=o(C,"PRE",{class:!0});var Q=u(m);Q.forEach(s),this.h()},h(){k(m,"class","language-go")},m(C,Q){l(C,m,Q),m.innerHTML=x},p:_e,d(C){C&&s(m)}}}function Pe(Sa){let m,x,C,Q,ms,Es,vs,cn,Aa,ws,ln,Ha,_s,un,La,ys,rn,Ba,bs,V,Jo=`<code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">var</span> str <span class="token builtin">string</span>
	<span class="token keyword">var</span> done <span class="token builtin">bool</span>
	<span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		str <span class="token operator">=</span> <span class="token string">"Done!"</span>
		done <span class="token operator">=</span> <span class="token boolean">true</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">for</span> <span class="token operator">!</span>done <span class="token punctuation">&#123;</span>
	<span class="token punctuation">&#125;</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code>`,Ps,D,Ta,xn,$a,Ia,Dn,Na,Wa,Cs,R,za,On,Ua,qa,xs,X,Fo=`<code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">var</span> done atomic<span class="token punctuation">.</span>Bool
	<span class="token keyword">var</span> a <span class="token builtin">int</span>
	<span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		a <span class="token operator">=</span> <span class="token number">5</span>
		done<span class="token punctuation">.</span><span class="token function">Store</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> done<span class="token punctuation">.</span><span class="token function">Load</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,Ds,kn,Ja,Os,O,Fa,Gn,Za,ja,Mn,Ka,Qa,Gs,Ms,Rs,Ss,S,A,Rn,Va,As,Hs,Ls,fn,Xa,Bs,Y,Zo=`<code class="language-go"><span class="token keyword">var</span> locked sync<span class="token punctuation">.</span>Bool
<span class="token keyword">func</span> <span class="token function">wrongCriticalSectionExample</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token operator">!</span>locked<span class="token punctuation">.</span><span class="token function">Load</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    locked<span class="token punctuation">.</span><span class="token function">Store</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
    <span class="token keyword">defer</span> locked<span class="token punctuation">.</span><span class="token function">Store</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>
    <span class="token comment">// do something</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,Ts,d,Ya,Sn,ha,ga,An,nt,st,Hn,at,tt,Ln,pt,ot,Bn,et,ct,Tn,lt,ut,$n,it,rt,$s,dn,kt,Is,h,jo=`<code class="language-go"><span class="token keyword">func</span> <span class="token function">criticalSection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> locked<span class="token punctuation">.</span><span class="token function">CompareAndSwap</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">defer</span> locked<span class="token punctuation">.</span><span class="token function">Store</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>
    <span class="token comment">// do something</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,Ns,f,ft,In,dt,mt,Nn,Et,vt,Wn,wt,_t,zn,yt,bt,Un,Pt,Ct,qn,xt,Dt,Jn,Ot,Gt,Fn,Mt,Rt,Ws,mn,St,zs,Us,qs,Js,H,L,Zn,At,Fs,Zs,js,En,Ht,Ks,B,T,jn,Lt,Qs,g,Ko=`<code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">var</span> count <span class="token builtin">int64</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10000</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			atomic<span class="token punctuation">.</span><span class="token function">AddInt64</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>count<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">for</span> <span class="token punctuation">&#123;</span>
		v <span class="token operator">:=</span> atomic<span class="token punctuation">.</span><span class="token function">LoadInt64</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>count<span class="token punctuation">)</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span>
		<span class="token keyword">if</span> v <span class="token operator">==</span> <span class="token number">10000</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">break</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,Vs,$,Bt,Kn,Tt,$t,Xs,Ys,hs,I,N,Qn,It,gs,vn,Nt,na,nn,Qo=`<code class="language-go"><span class="token keyword">type</span> ProgressMeter <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
	progress  <span class="token builtin">int64</span>
	timestamp <span class="token builtin">int64</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>pm <span class="token operator">*</span>ProgressMeter<span class="token punctuation">)</span> <span class="token function">Progress</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	atomic<span class="token punctuation">.</span><span class="token function">AddInt64</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pm<span class="token punctuation">.</span>progress<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
	atomic<span class="token punctuation">.</span><span class="token function">StoreInt64</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pm<span class="token punctuation">.</span>timestamp<span class="token punctuation">,</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">UnixNano</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>pm <span class="token operator">*</span>ProgressMeter<span class="token punctuation">)</span> <span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">int64</span><span class="token punctuation">,</span> <span class="token builtin">int64</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">return</span> atomic<span class="token punctuation">.</span><span class="token function">LoadInt64</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pm<span class="token punctuation">.</span>progress<span class="token punctuation">)</span><span class="token punctuation">,</span> atomic<span class="token punctuation">.</span><span class="token function">LoadInt64</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pm<span class="token punctuation">.</span>timestamp<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code>`,sa,y,Wt,Vn,zt,Ut,Xn,qt,Jt,Yn,Ft,Zt,aa,ta,pa,W,jt,hn,Kt,Qt,oa,sn,Vo=`<code class="language-go"><span class="token keyword">func</span> <span class="token function">longGoroutine</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> pm <span class="token operator">*</span>ProgressMeter<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">for</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">select</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">case</span> <span class="token operator">&lt;-</span>ctx<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
			fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Context cancelled"</span><span class="token punctuation">)</span>
			<span class="token keyword">return</span>
		<span class="token keyword">default</span><span class="token punctuation">:</span>
		<span class="token punctuation">&#125;</span>
		time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">Duration</span><span class="token punctuation">(</span>rand<span class="token punctuation">.</span><span class="token function">Intn</span><span class="token punctuation">(</span><span class="token number">120</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Millisecond<span class="token punctuation">)</span>
		pm<span class="token punctuation">.</span><span class="token function">Progress</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,ea,z,Vt,gn,Xt,Yt,ca,U,la,_,ns,ht,gt,ss,np,sp,as,ap,tp,ts,pp,op,ua,an,Xo=`<code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">var</span> progress ProgressMeter
	ctx<span class="token punctuation">,</span> cancel <span class="token operator">:=</span> context<span class="token punctuation">.</span><span class="token function">WithCancel</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token keyword">defer</span> <span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	wg <span class="token operator">:=</span> sync<span class="token punctuation">.</span>WaitGroup<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
	wg<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
	<span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">defer</span> wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token function">longGoroutine</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token operator">&amp;</span>progress<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">go</span> <span class="token function">observer</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> cancel<span class="token punctuation">,</span> <span class="token operator">&amp;</span>progress<span class="token punctuation">)</span>
	wg<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code>`,ia,v,ep,ps,cp,lp,os,up,ip,es,rp,kp,cs,fp,dp,ls,mp,Ep,ra,ka,fa,q,J,us,vp,da,wn,wp,ma,tn,Yo=`<code class="language-go"><span class="token keyword">func</span> <span class="token function">CancelSupport</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>cancel <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> isCancelled <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	v <span class="token operator">:=</span> atomic<span class="token punctuation">.</span>Bool<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
	cancel <span class="token operator">=</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		v<span class="token punctuation">.</span><span class="token function">Store</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
	isCancelled <span class="token operator">=</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> v<span class="token punctuation">.</span><span class="token function">Load</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">return</span>
<span class="token punctuation">&#125;</span></code>`,Ea,b,_p,is,yp,bp,rs,Pp,Cp,ks,xp,Dp,va,pn,ho=`<code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	cancel<span class="token punctuation">,</span> isCancelled <span class="token operator">:=</span> <span class="token function">CancelSupport</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	wg <span class="token operator">:=</span> sync<span class="token punctuation">.</span>WaitGroup<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
	wg<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
	<span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">defer</span> wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token keyword">for</span> <span class="token punctuation">&#123;</span>
			time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">100</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Millisecond<span class="token punctuation">)</span>
			<span class="token keyword">if</span> <span class="token function">isCancelled</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
				fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Cancelled"</span><span class="token punctuation">)</span>
				<span class="token keyword">return</span>
			<span class="token punctuation">&#125;</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	time<span class="token punctuation">.</span><span class="token function">AfterFunc</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">,</span> cancel<span class="token punctuation">)</span>
	wg<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code>`,wa,_a,ya,ba,F,Z,fs,Op,Pa,Ca,xa,_n,G,on,yn,Ip,Gp,Mp,Rp,en,Sp,Da;return U=new ye({props:{$$slots:{default:[be]},$$scope:{ctx:Sa}}}),{c(){m=p("h2"),x=p("a"),C=p("span"),Q=e("Memory Guarantees"),ms=i(),Es=p("hr"),vs=i(),cn=p("p"),Aa=e("Go에서 mutex등을 사용했을 때 병목 현상이 일어나는 경우, 이를 atomic 연산으로 대체하여 일부 해결할 수 있다."),ws=i(),ln=p("p"),Ha=e(`Go의 메모리 모델은 word size보다 작은 변수의 write 연산에 대해 원자성을 보장하지만, 해당 연산의 효과를 다른 고루틴에서 볼 수 있는지에 대한 보장은 하지 않는다.
이전에도 언급했듯 컴파일러와 CPU는 코드의 실행순서를 최적화하거나 메모리 연산을 재배치할 수 있기 때문이다.`),_s=i(),un=p("p"),La=e(`하지만 다른 고루틴에서 해당 변수의 값을 읽을 때, 해당 고루틴이 write한 값을 읽을 수도 있고, 이전에 write한 값을 읽을 수도 있지만, 무작위한 값을 읽지 않도록 보장해준다.
한편, word size보다 큰 변수의 write 연산에 대해서는 원자성을 보장하지 않는다. 이로 인해 예상치 못한 결과가 발생할 수 있다.`),ys=i(),rn=p("p"),Ba=e("다음 예제를 보자."),bs=i(),V=p("pre"),Ps=i(),D=p("p"),Ta=e(`위 코드에는 memory race가 존재한다.
이를 실행하면 `),xn=p("em"),$a=e("Done!"),Ia=e("이 출력되는 것을 기대하지만, 빈 문자열이 출력되거나, 어쩌면 프로그램이 중단될 수도 있다("),Dn=p("code"),Na=e("done"),Wa=e("에 대한 memory write가 메인 고루틴에서 관측되지 않기 때문)."),Cs=i(),R=p("p"),za=e("이를 해결하기 위해 Go는 "),On=p("code"),Ua=e("sync/atomic"),qa=e(" 패키지를 제공한다."),xs=i(),X=p("pre"),Ds=i(),kn=p("p"),Ja=e(`메모리는 atomic 연산에 대한 원자성을 보장한다.
만약 atomic write의 결과가 atomic read에 의해 관측되면, 해당 write 연산은 read 연산 이후에 일어난(atomic write happened before atomic read) 것으로 간주된다.
위 코드는 5를 출력하거나, 아무것도 출력하지 않는다. 하지만 0을 출력하는 경우는 없다.`),Os=i(),O=p("p"),Fa=e(`주의할 점은 memory race와 data race는 다르다는 것이다.
위 프로그램의 경우 `),Gn=p("code"),Za=e("atomic"),ja=e(` 패키지를 사용하여 memory race는 해결했지만, 여전히 data race를 가지고 있다.
이러한 점 때문에 `),Mn=p("code"),Ka=e("atomic"),Qa=e(" 패키지를 사용할 때는 주의해야 한다."),Gs=i(),Ms=p("br"),Rs=p("br"),Ss=i(),S=p("h2"),A=p("a"),Rn=p("span"),Va=e("Compare and Swap"),As=i(),Hs=p("hr"),Ls=i(),fn=p("p"),Xa=e(`조건을 검사하고 결과에 따라 동작하는 코드는 race condition을 만들 수 있다.
예를 들면 다음의 코드는 atomic을 사용함에도 mutual exclusion을 보장하지 않는다.`),Bs=i(),Y=p("pre"),Ts=i(),d=p("p"),Ya=e("이 함수는 "),Sn=p("code"),ha=e("locked"),ga=e("가 "),An=p("code"),nt=e("false"),st=e("일 때만 critical section에 들어가고, critical section을 빠져나올 때 "),Hn=p("code"),at=e("locked"),tt=e("를 "),Ln=p("code"),pt=e("false"),ot=e(`로 바꾼다.
하지만 두 고루틴이 동시에 `),Bn=p("code"),et=e("locked.Load()"),ct=e("를 호출하고, 두 고루틴이 "),Tn=p("code"),lt=e("false"),ut=e("를 읽은 후에 "),$n=p("code"),it=e("true"),rt=e("를 쓰면, 두 고루틴 모두 critical section에 들어가게 된다."),$s=i(),dn=p("p"),kt=e(`따라서 비교 및 저장 작업을 하나의 atomic 연산으로 수행해야 하며, 이를 compare-and-swap(CAS)이라고 한다.
예제를 통해 사용 방법을 살펴보자.`),Is=i(),h=p("pre"),Ns=i(),f=p("p"),ft=e("위 예제에서 "),In=p("code"),dt=e("locked"),mt=e("가 "),Nn=p("code"),Et=e("false"),vt=e("일 때만 critical section에 들어가고, "),Wn=p("code"),wt=e("locked"),_t=e("의 값을 "),zn=p("code"),yt=e("true"),bt=e("로 바꾼다. 그리고 critical section을 빠져나올 때 "),Un=p("code"),Pt=e("locked"),Ct=e("를 "),qn=p("code"),xt=e("false"),Dt=e(`로 바꾼다.
또한 `),Jn=p("code"),Ot=e("locked"),Gt=e("가 "),Fn=p("code"),Mt=e("true"),Rt=e("일 때는 critical section에 들어가지 않는다."),Ws=i(),mn=p("p"),St=e("CAS를 통해 Mutex의 TryLock을 대체할 수 있다."),zs=i(),Us=p("br"),qs=p("br"),Js=i(),H=p("h2"),L=p("a"),Zn=p("span"),At=e("Atomic의 실제 사용"),Fs=i(),Zs=p("hr"),js=i(),En=p("p"),Ht=e("atomic operation이 사용된 몇 가지 예제를 살펴보자."),Ks=i(),B=p("h3"),T=p("a"),jn=p("span"),Lt=e("카운터"),Qs=i(),g=p("pre"),Vs=i(),$=p("p"),Bt=e("위 코드에서 write 연산에 대한 memory race가 존재하지 않기 때문에 "),Kn=p("code"),Tt=e("count"),$t=e(`의 값은 반드시 10000이 된다.
따라서 실행 결과는 (race condition은 존재하기 때문에) 매번 달라지지만, 가장 마지막에는 반드시 10000이 출력되고 프로그램이 종료될 것이다.`),Xs=i(),Ys=p("br"),hs=i(),I=p("h3"),N=p("a"),Qn=p("span"),It=e("Heartbeat 및 Progress Indicator"),gs=i(),vn=p("p"),Nt=e(`고루틴의 Heartbeat 및 진행 상황을 표시하는 데에도 atomic을 사용할 수 있다.
이 때 shared variable 및 mutex를 사용하지 않기 때문에 추가적인 동기화 없이 여러 고루틴에서 사용할 수 있다는 장점이 있다.`),na=i(),nn=p("pre"),sa=i(),y=p("p"),Wt=e("위 예제의 "),Vn=p("code"),zt=e("ProgressMeter"),Ut=e("는 "),Xn=p("code"),qt=e("Progress()"),Jt=e(" 메서드를 통해 진행 상황을 업데이트하고, "),Yn=p("code"),Ft=e("Get()"),Zt=e(` 메서드를 통해 진행 상황을 가져온다.
이 때 메서드 안의 atomic 연산의 원자성이 보장되는 것이지, 메서드 자체의 원자성은 보장되지 않기 때문에 올바르게 구현하려면 뮤텍스 등을 사용하는 것이 좋다.`),aa=i(),ta=p("br"),pa=i(),W=p("p"),jt=e("해당 "),hn=p("code"),Kt=e("ProgressMeter"),Qt=e("를 사용하는 예제는 다음과 같다."),oa=i(),sn=p("pre"),ea=i(),z=p("p"),Vt=e("위 고루틴은 0~120ms 사이의 랜덤한 시간 동안 대기한 후 "),gn=p("code"),Xt=e("Progress()"),Yt=e("를 호출하여 진행 상황을 업데이트한다."),ca=i(),ke(U.$$.fragment),la=i(),_=p("p"),ns=p("code"),ht=e("observer"),gt=e(" 고루틴은 100밀리초마다 "),ss=p("code"),np=e("ProgressMeter"),sp=e(`의 진행 상황을 가져와서 이전 진행 상황과 비교한다.
만약 진행 상황이 업데이트되지 않았다면, `),as=p("code"),ap=e("cancel()"),tp=e("을 호출하여 "),ts=p("code"),pp=e("longGoroutine"),op=e("을 종료시킨다."),ua=i(),an=p("pre"),ia=i(),v=p("p"),ep=e("위 코드를 실행하면 "),ps=p("code"),cp=e("longGoroutine"),lp=e("이 진행 상황을 업데이트하고, "),os=p("code"),up=e("observer"),ip=e(`가 진행 상황을 확인한다.
만약 `),es=p("code"),rp=e("longGoroutine"),kp=e("이 100밀리초마다 진행 상황을 업데이트하지 않으면 "),cs=p("code"),fp=e("observer"),dp=e("가 "),ls=p("code"),mp=e("longGoroutine"),Ep=e("을 종료시킨다."),ra=i(),ka=p("br"),fa=i(),q=p("h3"),J=p("a"),us=p("span"),vp=e("취소"),da=i(),wn=p("p"),wp=e("채널을 통해 취소시키는 건 이미 알고 있지만, atomic을 사용하여 취소시키는 방법도 있다."),ma=i(),tn=p("pre"),Ea=i(),b=p("p"),_p=e("위 코드는 "),is=p("code"),yp=e("cancel"),bp=e(" 함수를 호출하면 "),rs=p("code"),Pp=e("isCancelled"),Cp=e(" 함수가 "),ks=p("code"),xp=e("true"),Dp=e(`를 반환하도록 한다. 이를 통해 다음과 같이 취소 여부를 확인할 수 있다.
Go가 아닌 다른 언어에서는 이런 식으로 취소 여부를 확인하는 경우가 많은데, Go에서는 채널을 통해 취소하는 것이 더 좋은 방법인 것 같다.`),va=i(),pn=p("pre"),wa=i(),_a=p("br"),ya=p("br"),ba=i(),F=p("h2"),Z=p("a"),fs=p("span"),Op=e("References"),Pa=i(),Ca=p("hr"),xa=i(),_n=p("center"),G=p("p"),on=p("a"),yn=p("img"),Gp=i(),Mp=p("br"),Rp=i(),en=p("a"),Sp=e("Jon Bodner, 『Learning Go』, O’Reilly Media, Inc."),this.h()},l(n){m=o(n,"H2",{id:!0});var t=u(m);x=o(t,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var ds=u(x);C=o(ds,"SPAN",{class:!0}),u(C).forEach(s),ds.forEach(s),Q=c(t,"Memory Guarantees"),t.forEach(s),ms=r(n),Es=o(n,"HR",{}),vs=r(n),cn=o(n,"P",{});var Np=u(cn);Aa=c(Np,"Go에서 mutex등을 사용했을 때 병목 현상이 일어나는 경우, 이를 atomic 연산으로 대체하여 일부 해결할 수 있다."),Np.forEach(s),ws=r(n),ln=o(n,"P",{});var Wp=u(ln);Ha=c(Wp,`Go의 메모리 모델은 word size보다 작은 변수의 write 연산에 대해 원자성을 보장하지만, 해당 연산의 효과를 다른 고루틴에서 볼 수 있는지에 대한 보장은 하지 않는다.
이전에도 언급했듯 컴파일러와 CPU는 코드의 실행순서를 최적화하거나 메모리 연산을 재배치할 수 있기 때문이다.`),Wp.forEach(s),_s=r(n),un=o(n,"P",{});var zp=u(un);La=c(zp,`하지만 다른 고루틴에서 해당 변수의 값을 읽을 때, 해당 고루틴이 write한 값을 읽을 수도 있고, 이전에 write한 값을 읽을 수도 있지만, 무작위한 값을 읽지 않도록 보장해준다.
한편, word size보다 큰 변수의 write 연산에 대해서는 원자성을 보장하지 않는다. 이로 인해 예상치 못한 결과가 발생할 수 있다.`),zp.forEach(s),ys=r(n),rn=o(n,"P",{});var Up=u(rn);Ba=c(Up,"다음 예제를 보자."),Up.forEach(s),bs=r(n),V=o(n,"PRE",{class:!0});var go=u(V);go.forEach(s),Ps=r(n),D=o(n,"P",{});var bn=u(D);Ta=c(bn,`위 코드에는 memory race가 존재한다.
이를 실행하면 `),xn=o(bn,"EM",{});var qp=u(xn);$a=c(qp,"Done!"),qp.forEach(s),Ia=c(bn,"이 출력되는 것을 기대하지만, 빈 문자열이 출력되거나, 어쩌면 프로그램이 중단될 수도 있다("),Dn=o(bn,"CODE",{});var Jp=u(Dn);Na=c(Jp,"done"),Jp.forEach(s),Wa=c(bn,"에 대한 memory write가 메인 고루틴에서 관측되지 않기 때문)."),bn.forEach(s),Cs=r(n),R=o(n,"P",{});var Oa=u(R);za=c(Oa,"이를 해결하기 위해 Go는 "),On=o(Oa,"CODE",{});var Fp=u(On);Ua=c(Fp,"sync/atomic"),Fp.forEach(s),qa=c(Oa," 패키지를 제공한다."),Oa.forEach(s),xs=r(n),X=o(n,"PRE",{class:!0});var ne=u(X);ne.forEach(s),Ds=r(n),kn=o(n,"P",{});var Zp=u(kn);Ja=c(Zp,`메모리는 atomic 연산에 대한 원자성을 보장한다.
만약 atomic write의 결과가 atomic read에 의해 관측되면, 해당 write 연산은 read 연산 이후에 일어난(atomic write happened before atomic read) 것으로 간주된다.
위 코드는 5를 출력하거나, 아무것도 출력하지 않는다. 하지만 0을 출력하는 경우는 없다.`),Zp.forEach(s),Os=r(n),O=o(n,"P",{});var Pn=u(O);Fa=c(Pn,`주의할 점은 memory race와 data race는 다르다는 것이다.
위 프로그램의 경우 `),Gn=o(Pn,"CODE",{});var jp=u(Gn);Za=c(jp,"atomic"),jp.forEach(s),ja=c(Pn,` 패키지를 사용하여 memory race는 해결했지만, 여전히 data race를 가지고 있다.
이러한 점 때문에 `),Mn=o(Pn,"CODE",{});var Kp=u(Mn);Ka=c(Kp,"atomic"),Kp.forEach(s),Qa=c(Pn," 패키지를 사용할 때는 주의해야 한다."),Pn.forEach(s),Gs=r(n),Ms=o(n,"BR",{}),Rs=o(n,"BR",{}),Ss=r(n),S=o(n,"H2",{id:!0});var Ap=u(S);A=o(Ap,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Qp=u(A);Rn=o(Qp,"SPAN",{class:!0}),u(Rn).forEach(s),Qp.forEach(s),Va=c(Ap,"Compare and Swap"),Ap.forEach(s),As=r(n),Hs=o(n,"HR",{}),Ls=r(n),fn=o(n,"P",{});var Vp=u(fn);Xa=c(Vp,`조건을 검사하고 결과에 따라 동작하는 코드는 race condition을 만들 수 있다.
예를 들면 다음의 코드는 atomic을 사용함에도 mutual exclusion을 보장하지 않는다.`),Vp.forEach(s),Bs=r(n),Y=o(n,"PRE",{class:!0});var se=u(Y);se.forEach(s),Ts=r(n),d=o(n,"P",{});var w=u(d);Ya=c(w,"이 함수는 "),Sn=o(w,"CODE",{});var Xp=u(Sn);ha=c(Xp,"locked"),Xp.forEach(s),ga=c(w,"가 "),An=o(w,"CODE",{});var Yp=u(An);nt=c(Yp,"false"),Yp.forEach(s),st=c(w,"일 때만 critical section에 들어가고, critical section을 빠져나올 때 "),Hn=o(w,"CODE",{});var hp=u(Hn);at=c(hp,"locked"),hp.forEach(s),tt=c(w,"를 "),Ln=o(w,"CODE",{});var gp=u(Ln);pt=c(gp,"false"),gp.forEach(s),ot=c(w,`로 바꾼다.
하지만 두 고루틴이 동시에 `),Bn=o(w,"CODE",{});var no=u(Bn);et=c(no,"locked.Load()"),no.forEach(s),ct=c(w,"를 호출하고, 두 고루틴이 "),Tn=o(w,"CODE",{});var so=u(Tn);lt=c(so,"false"),so.forEach(s),ut=c(w,"를 읽은 후에 "),$n=o(w,"CODE",{});var ao=u($n);it=c(ao,"true"),ao.forEach(s),rt=c(w,"를 쓰면, 두 고루틴 모두 critical section에 들어가게 된다."),w.forEach(s),$s=r(n),dn=o(n,"P",{});var to=u(dn);kt=c(to,`따라서 비교 및 저장 작업을 하나의 atomic 연산으로 수행해야 하며, 이를 compare-and-swap(CAS)이라고 한다.
예제를 통해 사용 방법을 살펴보자.`),to.forEach(s),Is=r(n),h=o(n,"PRE",{class:!0});var ae=u(h);ae.forEach(s),Ns=r(n),f=o(n,"P",{});var E=u(f);ft=c(E,"위 예제에서 "),In=o(E,"CODE",{});var po=u(In);dt=c(po,"locked"),po.forEach(s),mt=c(E,"가 "),Nn=o(E,"CODE",{});var oo=u(Nn);Et=c(oo,"false"),oo.forEach(s),vt=c(E,"일 때만 critical section에 들어가고, "),Wn=o(E,"CODE",{});var eo=u(Wn);wt=c(eo,"locked"),eo.forEach(s),_t=c(E,"의 값을 "),zn=o(E,"CODE",{});var co=u(zn);yt=c(co,"true"),co.forEach(s),bt=c(E,"로 바꾼다. 그리고 critical section을 빠져나올 때 "),Un=o(E,"CODE",{});var lo=u(Un);Pt=c(lo,"locked"),lo.forEach(s),Ct=c(E,"를 "),qn=o(E,"CODE",{});var uo=u(qn);xt=c(uo,"false"),uo.forEach(s),Dt=c(E,`로 바꾼다.
또한 `),Jn=o(E,"CODE",{});var io=u(Jn);Ot=c(io,"locked"),io.forEach(s),Gt=c(E,"가 "),Fn=o(E,"CODE",{});var ro=u(Fn);Mt=c(ro,"true"),ro.forEach(s),Rt=c(E,"일 때는 critical section에 들어가지 않는다."),E.forEach(s),Ws=r(n),mn=o(n,"P",{});var ko=u(mn);St=c(ko,"CAS를 통해 Mutex의 TryLock을 대체할 수 있다."),ko.forEach(s),zs=r(n),Us=o(n,"BR",{}),qs=o(n,"BR",{}),Js=r(n),H=o(n,"H2",{id:!0});var Hp=u(H);L=o(Hp,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var fo=u(L);Zn=o(fo,"SPAN",{class:!0}),u(Zn).forEach(s),fo.forEach(s),At=c(Hp,"Atomic의 실제 사용"),Hp.forEach(s),Fs=r(n),Zs=o(n,"HR",{}),js=r(n),En=o(n,"P",{});var mo=u(En);Ht=c(mo,"atomic operation이 사용된 몇 가지 예제를 살펴보자."),mo.forEach(s),Ks=r(n),B=o(n,"H3",{id:!0});var Lp=u(B);T=o(Lp,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Eo=u(T);jn=o(Eo,"SPAN",{class:!0}),u(jn).forEach(s),Eo.forEach(s),Lt=c(Lp,"카운터"),Lp.forEach(s),Qs=r(n),g=o(n,"PRE",{class:!0});var te=u(g);te.forEach(s),Vs=r(n),$=o(n,"P",{});var Ga=u($);Bt=c(Ga,"위 코드에서 write 연산에 대한 memory race가 존재하지 않기 때문에 "),Kn=o(Ga,"CODE",{});var vo=u(Kn);Tt=c(vo,"count"),vo.forEach(s),$t=c(Ga,`의 값은 반드시 10000이 된다.
따라서 실행 결과는 (race condition은 존재하기 때문에) 매번 달라지지만, 가장 마지막에는 반드시 10000이 출력되고 프로그램이 종료될 것이다.`),Ga.forEach(s),Xs=r(n),Ys=o(n,"BR",{}),hs=r(n),I=o(n,"H3",{id:!0});var Bp=u(I);N=o(Bp,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var wo=u(N);Qn=o(wo,"SPAN",{class:!0}),u(Qn).forEach(s),wo.forEach(s),It=c(Bp,"Heartbeat 및 Progress Indicator"),Bp.forEach(s),gs=r(n),vn=o(n,"P",{});var _o=u(vn);Nt=c(_o,`고루틴의 Heartbeat 및 진행 상황을 표시하는 데에도 atomic을 사용할 수 있다.
이 때 shared variable 및 mutex를 사용하지 않기 때문에 추가적인 동기화 없이 여러 고루틴에서 사용할 수 있다는 장점이 있다.`),_o.forEach(s),na=r(n),nn=o(n,"PRE",{class:!0});var pe=u(nn);pe.forEach(s),sa=r(n),y=o(n,"P",{});var j=u(y);Wt=c(j,"위 예제의 "),Vn=o(j,"CODE",{});var yo=u(Vn);zt=c(yo,"ProgressMeter"),yo.forEach(s),Ut=c(j,"는 "),Xn=o(j,"CODE",{});var bo=u(Xn);qt=c(bo,"Progress()"),bo.forEach(s),Jt=c(j," 메서드를 통해 진행 상황을 업데이트하고, "),Yn=o(j,"CODE",{});var Po=u(Yn);Ft=c(Po,"Get()"),Po.forEach(s),Zt=c(j,` 메서드를 통해 진행 상황을 가져온다.
이 때 메서드 안의 atomic 연산의 원자성이 보장되는 것이지, 메서드 자체의 원자성은 보장되지 않기 때문에 올바르게 구현하려면 뮤텍스 등을 사용하는 것이 좋다.`),j.forEach(s),aa=r(n),ta=o(n,"BR",{}),pa=r(n),W=o(n,"P",{});var Ma=u(W);jt=c(Ma,"해당 "),hn=o(Ma,"CODE",{});var Co=u(hn);Kt=c(Co,"ProgressMeter"),Co.forEach(s),Qt=c(Ma,"를 사용하는 예제는 다음과 같다."),Ma.forEach(s),oa=r(n),sn=o(n,"PRE",{class:!0});var oe=u(sn);oe.forEach(s),ea=r(n),z=o(n,"P",{});var Ra=u(z);Vt=c(Ra,"위 고루틴은 0~120ms 사이의 랜덤한 시간 동안 대기한 후 "),gn=o(Ra,"CODE",{});var xo=u(gn);Xt=c(xo,"Progress()"),xo.forEach(s),Yt=c(Ra,"를 호출하여 진행 상황을 업데이트한다."),Ra.forEach(s),ca=r(n),fe(U.$$.fragment,n),la=r(n),_=o(n,"P",{});var M=u(_);ns=o(M,"CODE",{});var Do=u(ns);ht=c(Do,"observer"),Do.forEach(s),gt=c(M," 고루틴은 100밀리초마다 "),ss=o(M,"CODE",{});var Oo=u(ss);np=c(Oo,"ProgressMeter"),Oo.forEach(s),sp=c(M,`의 진행 상황을 가져와서 이전 진행 상황과 비교한다.
만약 진행 상황이 업데이트되지 않았다면, `),as=o(M,"CODE",{});var Go=u(as);ap=c(Go,"cancel()"),Go.forEach(s),tp=c(M,"을 호출하여 "),ts=o(M,"CODE",{});var Mo=u(ts);pp=c(Mo,"longGoroutine"),Mo.forEach(s),op=c(M,"을 종료시킨다."),M.forEach(s),ua=r(n),an=o(n,"PRE",{class:!0});var ee=u(an);ee.forEach(s),ia=r(n),v=o(n,"P",{});var P=u(v);ep=c(P,"위 코드를 실행하면 "),ps=o(P,"CODE",{});var Ro=u(ps);cp=c(Ro,"longGoroutine"),Ro.forEach(s),lp=c(P,"이 진행 상황을 업데이트하고, "),os=o(P,"CODE",{});var So=u(os);up=c(So,"observer"),So.forEach(s),ip=c(P,`가 진행 상황을 확인한다.
만약 `),es=o(P,"CODE",{});var Ao=u(es);rp=c(Ao,"longGoroutine"),Ao.forEach(s),kp=c(P,"이 100밀리초마다 진행 상황을 업데이트하지 않으면 "),cs=o(P,"CODE",{});var Ho=u(cs);fp=c(Ho,"observer"),Ho.forEach(s),dp=c(P,"가 "),ls=o(P,"CODE",{});var Lo=u(ls);mp=c(Lo,"longGoroutine"),Lo.forEach(s),Ep=c(P,"을 종료시킨다."),P.forEach(s),ra=r(n),ka=o(n,"BR",{}),fa=r(n),q=o(n,"H3",{id:!0});var Tp=u(q);J=o(Tp,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Bo=u(J);us=o(Bo,"SPAN",{class:!0}),u(us).forEach(s),Bo.forEach(s),vp=c(Tp,"취소"),Tp.forEach(s),da=r(n),wn=o(n,"P",{});var To=u(wn);wp=c(To,"채널을 통해 취소시키는 건 이미 알고 있지만, atomic을 사용하여 취소시키는 방법도 있다."),To.forEach(s),ma=r(n),tn=o(n,"PRE",{class:!0});var ce=u(tn);ce.forEach(s),Ea=r(n),b=o(n,"P",{});var K=u(b);_p=c(K,"위 코드는 "),is=o(K,"CODE",{});var $o=u(is);yp=c($o,"cancel"),$o.forEach(s),bp=c(K," 함수를 호출하면 "),rs=o(K,"CODE",{});var Io=u(rs);Pp=c(Io,"isCancelled"),Io.forEach(s),Cp=c(K," 함수가 "),ks=o(K,"CODE",{});var No=u(ks);xp=c(No,"true"),No.forEach(s),Dp=c(K,`를 반환하도록 한다. 이를 통해 다음과 같이 취소 여부를 확인할 수 있다.
Go가 아닌 다른 언어에서는 이런 식으로 취소 여부를 확인하는 경우가 많은데, Go에서는 채널을 통해 취소하는 것이 더 좋은 방법인 것 같다.`),K.forEach(s),va=r(n),pn=o(n,"PRE",{class:!0});var le=u(pn);le.forEach(s),wa=r(n),_a=o(n,"BR",{}),ya=o(n,"BR",{}),ba=r(n),F=o(n,"H2",{id:!0});var $p=u(F);Z=o($p,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Wo=u(Z);fs=o(Wo,"SPAN",{class:!0}),u(fs).forEach(s),Wo.forEach(s),Op=c($p,"References"),$p.forEach(s),Pa=r(n),Ca=o(n,"HR",{}),xa=r(n),_n=o(n,"CENTER",{});var zo=u(_n);G=o(zo,"P",{});var Cn=u(G);on=o(Cn,"A",{href:!0,rel:!0});var Uo=u(on);yn=o(Uo,"IMG",{src:!0,alt:!0}),Uo.forEach(s),Gp=r(Cn),Mp=o(Cn,"BR",{}),Rp=r(Cn),en=o(Cn,"A",{href:!0,rel:!0});var qo=u(en);Sp=c(qo,"Jon Bodner, 『Learning Go』, O’Reilly Media, Inc."),qo.forEach(s),Cn.forEach(s),zo.forEach(s),this.h()},h(){k(C,"class","icon icon-link"),k(x,"aria-hidden","true"),k(x,"tabindex","-1"),k(x,"href","#memory-guarantees"),k(m,"id","memory-guarantees"),k(V,"class","language-go"),k(X,"class","language-go"),k(Rn,"class","icon icon-link"),k(A,"aria-hidden","true"),k(A,"tabindex","-1"),k(A,"href","#compare-and-swap"),k(S,"id","compare-and-swap"),k(Y,"class","language-go"),k(h,"class","language-go"),k(Zn,"class","icon icon-link"),k(L,"aria-hidden","true"),k(L,"tabindex","-1"),k(L,"href","#atomic의-실제-사용"),k(H,"id","atomic의-실제-사용"),k(jn,"class","icon icon-link"),k(T,"aria-hidden","true"),k(T,"tabindex","-1"),k(T,"href","#카운터"),k(B,"id","카운터"),k(g,"class","language-go"),k(Qn,"class","icon icon-link"),k(N,"aria-hidden","true"),k(N,"tabindex","-1"),k(N,"href","#heartbeat-및-progress-indicator"),k(I,"id","heartbeat-및-progress-indicator"),k(nn,"class","language-go"),k(sn,"class","language-go"),k(an,"class","language-go"),k(us,"class","icon icon-link"),k(J,"aria-hidden","true"),k(J,"tabindex","-1"),k(J,"href","#취소"),k(q,"id","취소"),k(tn,"class","language-go"),k(pn,"class","language-go"),k(fs,"class","icon icon-link"),k(Z,"aria-hidden","true"),k(Z,"tabindex","-1"),k(Z,"href","#references"),k(F,"id","references"),de(yn.src,Ip="https://learning.oreilly.com/covers/urn:orm:book:9781804619070/400w/")||k(yn,"src",Ip),k(yn,"alt","Effective Concurrency in Go"),k(on,"href","https://learning.oreilly.com/library/view/effective-concurrency-in/9781804619070/"),k(on,"rel","nofollow"),k(en,"href","https://learning.oreilly.com/library/view/effective-concurrency-in/9781804619070/"),k(en,"rel","nofollow")},m(n,t){l(n,m,t),a(m,x),a(x,C),a(m,Q),l(n,ms,t),l(n,Es,t),l(n,vs,t),l(n,cn,t),a(cn,Aa),l(n,ws,t),l(n,ln,t),a(ln,Ha),l(n,_s,t),l(n,un,t),a(un,La),l(n,ys,t),l(n,rn,t),a(rn,Ba),l(n,bs,t),l(n,V,t),V.innerHTML=Jo,l(n,Ps,t),l(n,D,t),a(D,Ta),a(D,xn),a(xn,$a),a(D,Ia),a(D,Dn),a(Dn,Na),a(D,Wa),l(n,Cs,t),l(n,R,t),a(R,za),a(R,On),a(On,Ua),a(R,qa),l(n,xs,t),l(n,X,t),X.innerHTML=Fo,l(n,Ds,t),l(n,kn,t),a(kn,Ja),l(n,Os,t),l(n,O,t),a(O,Fa),a(O,Gn),a(Gn,Za),a(O,ja),a(O,Mn),a(Mn,Ka),a(O,Qa),l(n,Gs,t),l(n,Ms,t),l(n,Rs,t),l(n,Ss,t),l(n,S,t),a(S,A),a(A,Rn),a(S,Va),l(n,As,t),l(n,Hs,t),l(n,Ls,t),l(n,fn,t),a(fn,Xa),l(n,Bs,t),l(n,Y,t),Y.innerHTML=Zo,l(n,Ts,t),l(n,d,t),a(d,Ya),a(d,Sn),a(Sn,ha),a(d,ga),a(d,An),a(An,nt),a(d,st),a(d,Hn),a(Hn,at),a(d,tt),a(d,Ln),a(Ln,pt),a(d,ot),a(d,Bn),a(Bn,et),a(d,ct),a(d,Tn),a(Tn,lt),a(d,ut),a(d,$n),a($n,it),a(d,rt),l(n,$s,t),l(n,dn,t),a(dn,kt),l(n,Is,t),l(n,h,t),h.innerHTML=jo,l(n,Ns,t),l(n,f,t),a(f,ft),a(f,In),a(In,dt),a(f,mt),a(f,Nn),a(Nn,Et),a(f,vt),a(f,Wn),a(Wn,wt),a(f,_t),a(f,zn),a(zn,yt),a(f,bt),a(f,Un),a(Un,Pt),a(f,Ct),a(f,qn),a(qn,xt),a(f,Dt),a(f,Jn),a(Jn,Ot),a(f,Gt),a(f,Fn),a(Fn,Mt),a(f,Rt),l(n,Ws,t),l(n,mn,t),a(mn,St),l(n,zs,t),l(n,Us,t),l(n,qs,t),l(n,Js,t),l(n,H,t),a(H,L),a(L,Zn),a(H,At),l(n,Fs,t),l(n,Zs,t),l(n,js,t),l(n,En,t),a(En,Ht),l(n,Ks,t),l(n,B,t),a(B,T),a(T,jn),a(B,Lt),l(n,Qs,t),l(n,g,t),g.innerHTML=Ko,l(n,Vs,t),l(n,$,t),a($,Bt),a($,Kn),a(Kn,Tt),a($,$t),l(n,Xs,t),l(n,Ys,t),l(n,hs,t),l(n,I,t),a(I,N),a(N,Qn),a(I,It),l(n,gs,t),l(n,vn,t),a(vn,Nt),l(n,na,t),l(n,nn,t),nn.innerHTML=Qo,l(n,sa,t),l(n,y,t),a(y,Wt),a(y,Vn),a(Vn,zt),a(y,Ut),a(y,Xn),a(Xn,qt),a(y,Jt),a(y,Yn),a(Yn,Ft),a(y,Zt),l(n,aa,t),l(n,ta,t),l(n,pa,t),l(n,W,t),a(W,jt),a(W,hn),a(hn,Kt),a(W,Qt),l(n,oa,t),l(n,sn,t),sn.innerHTML=Vo,l(n,ea,t),l(n,z,t),a(z,Vt),a(z,gn),a(gn,Xt),a(z,Yt),l(n,ca,t),me(U,n,t),l(n,la,t),l(n,_,t),a(_,ns),a(ns,ht),a(_,gt),a(_,ss),a(ss,np),a(_,sp),a(_,as),a(as,ap),a(_,tp),a(_,ts),a(ts,pp),a(_,op),l(n,ua,t),l(n,an,t),an.innerHTML=Xo,l(n,ia,t),l(n,v,t),a(v,ep),a(v,ps),a(ps,cp),a(v,lp),a(v,os),a(os,up),a(v,ip),a(v,es),a(es,rp),a(v,kp),a(v,cs),a(cs,fp),a(v,dp),a(v,ls),a(ls,mp),a(v,Ep),l(n,ra,t),l(n,ka,t),l(n,fa,t),l(n,q,t),a(q,J),a(J,us),a(q,vp),l(n,da,t),l(n,wn,t),a(wn,wp),l(n,ma,t),l(n,tn,t),tn.innerHTML=Yo,l(n,Ea,t),l(n,b,t),a(b,_p),a(b,is),a(is,yp),a(b,bp),a(b,rs),a(rs,Pp),a(b,Cp),a(b,ks),a(ks,xp),a(b,Dp),l(n,va,t),l(n,pn,t),pn.innerHTML=ho,l(n,wa,t),l(n,_a,t),l(n,ya,t),l(n,ba,t),l(n,F,t),a(F,Z),a(Z,fs),a(F,Op),l(n,Pa,t),l(n,Ca,t),l(n,xa,t),l(n,_n,t),a(_n,G),a(G,on),a(on,yn),a(G,Gp),a(G,Mp),a(G,Rp),a(G,en),a(en,Sp),Da=!0},p(n,[t]){const ds={};t&1&&(ds.$$scope={dirty:t,ctx:n}),U.$set(ds)},i(n){Da||(Ee(U.$$.fragment,n),Da=!0)},o(n){ve(U.$$.fragment,n),Da=!1},d(n){n&&s(m),n&&s(ms),n&&s(Es),n&&s(vs),n&&s(cn),n&&s(ws),n&&s(ln),n&&s(_s),n&&s(un),n&&s(ys),n&&s(rn),n&&s(bs),n&&s(V),n&&s(Ps),n&&s(D),n&&s(Cs),n&&s(R),n&&s(xs),n&&s(X),n&&s(Ds),n&&s(kn),n&&s(Os),n&&s(O),n&&s(Gs),n&&s(Ms),n&&s(Rs),n&&s(Ss),n&&s(S),n&&s(As),n&&s(Hs),n&&s(Ls),n&&s(fn),n&&s(Bs),n&&s(Y),n&&s(Ts),n&&s(d),n&&s($s),n&&s(dn),n&&s(Is),n&&s(h),n&&s(Ns),n&&s(f),n&&s(Ws),n&&s(mn),n&&s(zs),n&&s(Us),n&&s(qs),n&&s(Js),n&&s(H),n&&s(Fs),n&&s(Zs),n&&s(js),n&&s(En),n&&s(Ks),n&&s(B),n&&s(Qs),n&&s(g),n&&s(Vs),n&&s($),n&&s(Xs),n&&s(Ys),n&&s(hs),n&&s(I),n&&s(gs),n&&s(vn),n&&s(na),n&&s(nn),n&&s(sa),n&&s(y),n&&s(aa),n&&s(ta),n&&s(pa),n&&s(W),n&&s(oa),n&&s(sn),n&&s(ea),n&&s(z),n&&s(ca),we(U,n),n&&s(la),n&&s(_),n&&s(ua),n&&s(an),n&&s(ia),n&&s(v),n&&s(ra),n&&s(ka),n&&s(fa),n&&s(q),n&&s(da),n&&s(wn),n&&s(ma),n&&s(tn),n&&s(Ea),n&&s(b),n&&s(va),n&&s(pn),n&&s(wa),n&&s(_a),n&&s(ya),n&&s(ba),n&&s(F),n&&s(Pa),n&&s(Ca),n&&s(xa),n&&s(_n)}}}const De={title:"아토믹 메모리 오퍼레이션",date:"2023-10-01T00:00:00.000Z",excerpt:"아토믹 메모리 오퍼레이션에 대해 알아보자",categories:["Golang","Concurrency in Go"],coverImage:"/post_img/Go/Concurrency in Go/cover.png",coverWidth:16,coverHeight:9,indexed:!1,exposed:!0};class Oe extends ue{constructor(m){super(),ie(this,m,null,Pe,re,{})}}export{Oe as default,De as metadata};
