import{S as PE,i as IE,s as pE,k as i,q as s,a as f,l as r,m as a,r as u,h as t,c as o,n as _,U as ir,b as E,E as l,M as D2}from"./index.d78780bf.js";function hE(nE){let F,lf,rr,ar,fr,or,G,q,ye,ef,sr,ur,vr,Q,j,Be,tf,Er,c,Me,Oe,rf,af,xl,Wl,ff,Fe,of,sf,uf,Ge,qe,vf,Ef,Qe,je,_f,cf,Ze,ze,df,nf,Je,Ke,Pf,If,kl,Ve,pf,hf,w,le,Xe,bf,Lf,Tf,ee,Ye,Cf,Nf,Uf,te,$e,Sf,Rf,_r,cr,dr,Z,z,ge,mf,nr,d,wl,lt,Af,xf,Dl,et,Wf,kf,tt,wf,Df,Hl,it,Hf,yf,rt,at,Bf,Mf,yl,ft,Of,Ff,ot,st,Gf,qf,Bl,ut,Qf,jf,D,vt,Zf,zf,Et,Jf,Kf,ie,Vf,Ml,_t,Xf,Yf,ct,$f,gf,Ol,dt,lo,eo,Fl,nt,to,io,Pt,ro,Pr,Ir,pr,J,K,It,ao,hr,U,Gl,pt,fo,oo,H,ht,so,uo,re,vo,bt,Lt,Eo,_o,ae,co,Tt,Ct,no,Po,ql,Nt,Io,po,Ut,St,ho,bo,Ql,Rt,Lo,To,y,mt,Co,No,At,Uo,So,xt,Ro,br,Lr,Tr,V,X,Wt,mo,Cr,fe,oe,H2,Nr,S,kt,Ao,xo,wt,Wo,ko,Dt,wo,Ur,se,Do,Sr,Rr,mr,Ar,Y,$,Ht,Ho,xr,Wr,kr,g,ll,yt,yo,wr,ue,ve,y2,Dr,p,Bt,Bo,Mo,Mt,Oo,Fo,Ot,Go,qo,Ee,Qo,Ft,Gt,jo,Hr,yr,Br,Mr,el,tl,qt,Zo,Or,Fr,Gr,il,rl,Qt,zo,qr,n,jt,Zt,Jo,Ko,zt,Jt,Vo,Xo,Kt,jl,Yo,Vt,$o,go,ls,Zl,Xt,es,ts,B,Yt,is,rs,$t,as,fs,gt,os,ss,zl,li,us,vs,ei,_e,Es,M,ti,_s,cs,ii,ds,ns,ri,Ps,Qr,jr,Zr,al,fl,ai,Is,zr,h,fi,ps,hs,Jl,bs,oi,Ls,Ts,Cs,si,Ns,Us,ui,Ss,Jr,Kr,Vr,ol,sl,vi,Rs,Xr,ul,ce,ms,Ei,_i,As,xs,de,Ws,ci,di,ks,Yr,$r,gr,la,vl,El,ni,ws,ea,ta,ia,_l,cl,Pi,Ds,ra,ne,Pe,B2,aa,R,Ii,Hs,ys,Ie,Bs,pi,hi,Ms,Os,pe,Fs,O,bi,Gs,qs,Li,Qs,js,Ti,Zs,fa,oa,sa,dl,nl,Ci,zs,ua,b,Ni,Js,Ks,Ui,Vs,Xs,he,Ys,Si,be,Kl,$s,gs,l1,Ri,e1,va,Ea,_a,Pl,Il,mi,t1,ca,P,Ai,i1,r1,xi,a1,f1,Wi,o1,s1,ki,u1,v1,wi,E1,da,na,Pa,pl,hl,Di,_1,Ia,Le,Te,M2,pa,m,Vl,Hi,c1,d1,C,yi,n1,P1,Bi,I1,p1,Mi,h1,b1,Oi,L1,T1,Xl,Fi,C1,N1,I,Gi,U1,S1,qi,R1,m1,Qi,A1,x1,ji,W1,k1,Zi,w1,D1,Yl,zi,H1,y1,N,Ji,B1,M1,Ki,O1,F1,Vi,G1,q1,Xi,Q1,ha,ba,La,bl,Ll,Yi,j1,Ta,Ce,Ne,O2,Ca,L,$i,Z1,z1,gi,J1,K1,lr,V1,X1,er,Y1,Na,Ua,Sa,Ra,Tl,Cl,tr,$1,ma,$l,g1,gl,l2,Aa,xa,Wa;return{c(){F=i("p"),lf=s("교내 프로젝트, 교과목, 스터디를 통해 정리한 WebRTC 관련 내용을 기록해보았습니다"),rr=f(),ar=i("br"),fr=i("br"),or=f(),G=i("h2"),q=i("a"),ye=i("span"),ef=s("WebRTC"),sr=f(),ur=i("hr"),vr=f(),Q=i("h3"),j=i("a"),Be=i("span"),tf=s("WebRTC란?"),Er=f(),c=i("ul"),Me=i("li"),Oe=i("p"),rf=s("Web Real-Time Communication의 약자"),af=f(),xl=i("li"),Wl=i("p"),ff=s("별도의 소프트웨어나 플러그인 없이 ("),Fe=i("strong"),of=s("웹 브라우저 만으로도"),sf=s(") 오디오 및 비디오 데이터를 주고받을 수 있음"),uf=f(),Ge=i("ul"),qe=i("li"),vf=s("화상 통화, 실시간 회의 등 구현 가능"),Ef=f(),Qe=i("li"),je=i("p"),_f=s("웹 브라우저 뿐 아니라 IOS, Android Native App 위에서도 동작함"),cf=f(),Ze=i("li"),ze=i("p"),df=s("구글이 표준화를 주도하고 있어, Chrome 호환성이 제일 좋음"),nf=f(),Je=i("li"),Ke=i("p"),Pf=s("UDP, 피어-to-피어로 통신함"),If=f(),kl=i("li"),Ve=i("p"),pf=s("브라우저 API 제공"),hf=f(),w=i("ul"),le=i("li"),Xe=i("code"),bf=s("RTC피어Connection()"),Lf=s(" : signal 처리, 코덱 처리, p2p 통신, 보안, bandwidth 관리 등, 다양한 역할을 하는 WebRTC 통신 주요 class"),Tf=f(),ee=i("li"),Ye=i("code"),Cf=s("getUserMedia()"),Nf=s(" : 카메라나 마이크 등 장치에 접근하여 유저 데이터를 capture"),Uf=f(),te=i("li"),$e=i("code"),Sf=s("RTCDataChannel()"),Rf=s(" : 오디오, 비디오 외의 비정형 데이터를 주고받기 위함. WebSocket과 거의 유사한 api"),_r=f(),cr=i("br"),dr=f(),Z=i("h3"),z=i("a"),ge=i("span"),mf=s("WebRTC 장점"),nr=f(),d=i("ol"),wl=i("li"),lt=i("p"),Af=s("UDP를 사용하여 지연시간이 매우 짧다"),xf=f(),Dl=i("ul"),et=i("li"),Wf=s("카메라로 찍은 화면이 상대에게 도달하기까지 걸리는 시간이 500ms 이하"),kf=f(),tt=i("li"),wf=s("다른 HTTP Live Stream 기술들의 경우, 주로 영상을 사람들에게 뿌리는(1:N) 용도라서 지연 시간이 존재"),Df=f(),Hl=i("li"),it=i("p"),Hf=s("Platform and Device Independent"),yf=f(),rt=i("ul"),at=i("li"),Bf=s("웹브라우저 위에서 돌아가도록 설계되었기 때문에, 브라우저만 돌아가면 OS, 장치가 무엇이든 상관없음"),Mf=f(),yl=i("li"),ft=i("p"),Of=s("Open-source 및 표준화되어있음"),Ff=f(),ot=i("ul"),st=i("li"),Gf=s("언어별로 표준 문서가 존재하며, 표준대로 진행하면 모두 연결 가능함"),qf=f(),Bl=i("li"),ut=i("p"),Qf=s("네트워크 성능에 따라 품질 조정"),jf=f(),D=i("ul"),vt=i("li"),Zf=s("네트워크 성능에 따라 전송받는 (영상)데이터의 품질(화질)이 달라질 수 있음"),zf=f(),Et=i("li"),Jf=s("하지만 한 순간에는 특정 해상도의 영상 하나만 받을 수 있음"),Kf=f(),ie=i("li"),Vf=s("Simulcasting"),Ml=i("ul"),_t=i("li"),Xf=s("동시의 여러 해상도의 영상을 보냄"),Yf=f(),ct=i("li"),$f=s("bandwidth를 낭비하지만, 수신 장치가 알아서 적합한 품질의 영상 선택"),gf=f(),Ol=i("li"),dt=i("p"),lo=s("P2P의 장점"),eo=f(),Fl=i("ul"),nt=i("li"),to=s("주요 데이터가 서버를 경유하지 않기 때문에, 서버 입장에선 부담이 적음"),io=f(),Pt=i("li"),ro=s("유저 입장에선 내 데이터를 서버가 볼 수 없기 때문에, 안심하고 이용 가능"),Pr=f(),Ir=i("br"),pr=f(),J=i("h3"),K=i("a"),It=i("span"),ao=s("WebRTC 단점"),hr=f(),U=i("ol"),Gl=i("li"),pt=i("p"),fo=s("Scalability"),oo=f(),H=i("ul"),ht=i("li"),so=s("하나의 세션에 참가하는 통신 대상이 일정 이상 늘어나기 어려움"),uo=f(),re=i("li"),vo=s("통신하는 대상의 수가 제한됨"),bt=i("ul"),Lt=i("li"),Eo=s("권고에 따르면 최대 50개 (WebRTC expert Tsahi LeventLevi recommends staying shy of any more than 50 concurrent 피어 connections.)"),_o=f(),ae=i("li"),co=s("몇 천 명의 유저가 통신하는 경우, live streaming server를 두어 데이터를 분산시킴"),Tt=i("ul"),Ct=i("li"),no=s("SFU, MCU 등이 대표적"),Po=f(),ql=i("li"),Nt=i("p"),Io=s("Broadcast Quality"),po=f(),Ut=i("ul"),St=i("li"),ho=s("WebRTC 자체에 퀄리티 문제는 없지만, Broadcast를 함으로써 발생하는 영상 품질의 하락 문제"),bo=f(),Ql=i("li"),Rt=i("p"),Lo=s("그래도 서버가 필요함"),To=f(),y=i("ul"),mt=i("li"),Co=s("두 피어끼리의 connection 생성 및 해제 -> Signaling Server"),No=f(),At=i("li"),Uo=s("피어간 통신이 가능한지 여부 또는 Public IP를 확인해야 하는 경우 -> STUN 서버"),So=f(),xt=i("li"),Ro=s("다양한 네트워크 상의 이슈(방화벽, 공유기나 라우터의 보안 정책 등) 때문에 피어간 직접 통신이 되지 않을 경우 -> TURN 서버를 통해 데이터를 Relay"),br=f(),Lr=i("br"),Tr=f(),V=i("h3"),X=i("a"),Wt=i("span"),mo=s("WebRTC 동작 흐름"),Cr=f(),fe=i("p"),oe=i("img"),Nr=f(),S=i("ol"),kt=i("li"),Ao=s("Signaling Server : 기기 사이에서 커넥션을 생성 및 해제해주고, 통신할 대상을 찾아줌"),xo=f(),wt=i("li"),Wo=s("STUN Server : 요청자의 Public IP를 확인"),ko=f(),Dt=i("li"),wo=s("TURN Server : P2P로 데이터를 직접 전송할 수 없다면, 데이터를 Relay"),Ur=f(),se=i("p"),Do=s("자세한 내용은 아래에서 다룰 예정"),Sr=f(),Rr=i("br"),mr=i("br"),Ar=f(),Y=i("h2"),$=i("a"),Ht=i("span"),Ho=s("SDP"),xr=f(),Wr=i("hr"),kr=f(),g=i("h3"),ll=i("a"),yt=i("span"),yo=s("SDP란?"),wr=f(),ue=i("p"),ve=i("img"),Dr=f(),p=i("ul"),Bt=i("li"),Bo=s("Session Description Protocol의 약자 (실질적으로는 프로토콜이 아니긴 함)"),Mo=f(),Mt=i("li"),Oo=s("해상도, 형식, 코덱, 암호화 등, 컨텐츠에 대한 메타데이터 정보"),Fo=f(),Ot=i("li"),Go=s("누구와 어떻게 대화할지에 대한 정보를 포함함"),qo=f(),Ee=i("li"),Qo=s("SIP(Session Initiation Protocol)를 통해 SDP를 전송"),Ft=i("ul"),Gt=i("li"),jo=s("SIP는 WebRTC 이전에도 존재하던 사용자/참가자 그룹 간의 연결 설정 프로토콜이며, WebRTC는 SIP를 사용하여 Session 설정"),Hr=f(),yr=i("br"),Br=i("br"),Mr=f(),el=i("h2"),tl=i("a"),qt=i("span"),Zo=s("ICE"),Or=f(),Fr=i("hr"),Gr=f(),il=i("h3"),rl=i("a"),Qt=i("span"),zo=s("ICE란?"),qr=f(),n=i("ul"),jt=i("li"),Zt=i("p"),Jo=s("Interactive Connectivity Establishment"),Ko=f(),zt=i("li"),Jt=i("p"),Vo=s("브라우저가 피어를 통한 연결이 가능하게 해주는 프레임워크"),Xo=f(),Kt=i("li"),jl=i("p"),Yo=s("두 피어간 "),Vt=i("strong"),$o=s("최적의 경로"),go=s("를 찾아줌 (NAT Traversal)"),ls=f(),Zl=i("li"),Xt=i("p"),es=s("피어끼리 연결이 쉽지 않은 이유"),ts=f(),B=i("ul"),Yt=i("li"),is=s("방화벽에 걸리는 경우"),rs=f(),$t=i("li"),as=s("장치에 Public IP가 없는 경우"),fs=f(),gt=i("li"),os=s("라우터의 보안 정책이 피어간 직접 연결을 막는 경우"),ss=f(),zl=i("li"),li=i("p"),us=s("ICE는 STUN서버와 TURN서버를 사용하여 이러한 작업 수행"),vs=f(),ei=i("ul"),_e=i("li"),Es=s("일반적으로, STUN, TURN 서버까지 거치고 나면 다음과 같은 주소를 얻음"),M=i("ul"),ti=i("li"),_s=s("Private IP, Port"),cs=f(),ii=i("li"),ds=s("Public IP, Port (through STUN)"),ns=f(),ri=i("li"),Ps=s("TURN 서버의 IP, Port(through TURN)"),Qr=f(),jr=i("br"),Zr=f(),al=i("h3"),fl=i("a"),ai=i("span"),Is=s("ICE Candidates"),zr=f(),h=i("ul"),fi=i("li"),ps=s("WebRTC 피어 연결을 시작하면, 일반적으로 여러개의 candiate들이 각 피어에 의해 만들어짐"),hs=f(),Jl=i("li"),bs=s("구분자("),oi=i("code"),Ls=s("foundation"),Ts=s("), IP, 포트, 우선순위, 프로토콜 등으로 구성"),Cs=f(),si=i("li"),Ns=s("UDP가 기본이지만 UDP가 안되면 TCP도 허용함"),Us=f(),ui=i("li"),Ss=s("각 피어가 수집한 ICE Candidates로 패킷을 보내 본 뒤, 가장 latency가 낮고 안정적인 ICE Candidates를 사용"),Jr=f(),Kr=i("br"),Vr=f(),ol=i("h3"),sl=i("a"),vi=i("span"),Rs=s("Trickle ICE"),Xr=f(),ul=i("ul"),ce=i("li"),ms=s("일반적으로 피어는 ICE Candidates를 수집하여 목록을 완성한 후 한꺼번에 교환함"),Ei=i("ul"),_i=i("li"),As=s("이 방식은 네트워크 지연 등 이유로 ICE Candidates를 수집하는 데 오래 걸릴 수 있음"),xs=f(),de=i("li"),Ws=s("비효율적인 ICE Candidates 교환 작업을 비동기 처리"),ci=i("ul"),di=i("li"),ks=s("ICE Candidates를 찾은 즉시 피어에게 전송"),Yr=f(),$r=i("br"),gr=i("br"),la=f(),vl=i("h2"),El=i("a"),ni=i("span"),ws=s("Signaling"),ea=f(),ta=i("hr"),ia=f(),_l=i("h3"),cl=i("a"),Pi=i("span"),Ds=s("NAT?"),ra=f(),ne=i("p"),Pe=i("img"),aa=f(),R=i("ul"),Ii=i("li"),Hs=s("Network Address Translation"),ys=f(),Ie=i("li"),Bs=s("일반적인 사용자의 네트워크 환경에서는 대부분 공유기를 두기 때문에 Private IP, Public IP가 각각 존재함"),pi=i("ul"),hi=i("li"),Ms=s("(일반적인 경우) 한 대의 공유기에 여러 대의 장치가 연결되고, 따라서 한 개의 Public IP와 여러 개의 Private IP가 존재함"),Os=f(),pe=i("li"),Fs=s("이 때 NAT는 Public IP를 특정 Private IP로 매핑시킴"),O=i("ul"),bi=i("li"),Gs=s("다만 연결된 장치 개수만큼 여러 대의 Private IP가 Public IP에 매핑될 필요가 있기에, PAT도 함께 적용"),qs=f(),Li=i("li"),Qs=s("NAT + PAT(포트포워딩이라고도 함)는 Public IP:특정 포트를, 특정 Private IP:특정 포트로 매핑시킴"),js=f(),Ti=i("li"),Zs=s("위 그림에서 Public IP:80으로 요청을 보내면, 192.168.0.37을 가진 장치가 80번 포트로 요청을 받을 것"),fa=f(),oa=i("br"),sa=f(),dl=i("h3"),nl=i("a"),Ci=i("span"),zs=s("STUN"),ua=f(),b=i("ul"),Ni=i("li"),Js=s("Session Traversal Utilities for NAT"),Ks=f(),Ui=i("li"),Vs=s("기본적으로, NAT 환경에서 사용자 장치는 자신의 Public IP를 알 수 없음"),Xs=f(),he=i("li"),Ys=s("STUN 서버는 사용자의 Public IP를 알려주는 역할"),Si=i("ul"),be=i("li"),Kl=i("a"),$s=s("https://ipip.kr"),gs=s("에 접속하면 Public IP를 알 수 있음. 이와 유사한 역할"),l1=f(),Ri=i("li"),e1=s("STUN을 통해 사용자가 P2P UDP 통신을 위해 사용할 수 있는 IP주소와 포트번호를 찾아냄"),va=f(),Ea=i("br"),_a=f(),Pl=i("h3"),Il=i("a"),mi=i("span"),t1=s("TURN"),ca=f(),P=i("ul"),Ai=i("li"),i1=s("Traversal Using Relays around NAT"),r1=f(),xi=i("li"),a1=s("상대 Peer에게 보낼 정보를 TURN 서버에 전달하고, TURN이 상대 Peer에게 전달해줌"),f1=f(),Wi=i("li"),o1=s("Symmetric NAT 등, Router의 NAT으로 생기는 제약 조건 등을 우회함"),s1=f(),ki=i("li"),u1=s("오버헤드가 발생하지만 대안이 없는 경우 사용"),v1=f(),wi=i("li"),E1=s("SFU, MCU도 TURN 서버의 일종이라고 볼 수 있음"),da=f(),na=i("br"),Pa=f(),pl=i("h3"),hl=i("a"),Di=i("span"),_1=s("P2P vs SFU vs MCU"),Ia=f(),Le=i("p"),Te=i("img"),pa=f(),m=i("ul"),Vl=i("li"),Hi=i("p"),c1=s("P2P"),d1=f(),C=i("ul"),yi=i("li"),n1=s("각 사용자는 (전체 사용자-1) 만큼의 업로드/다운로드 연결을 가짐"),P1=f(),Bi=i("li"),I1=s("서버의 부담이 덜하며 지연시간이 가장 짧음"),p1=f(),Mi=i("li"),h1=s("통신에 참여하는 사용자가 많아질수록 클라이언트의 워크로드가 급격히 증가함"),b1=f(),Oi=i("li"),L1=s("1:1 통신 및 소규모의 1:N, N:N 통신에 적합"),T1=f(),Xl=i("li"),Fi=i("p"),C1=s("SFU"),N1=f(),I=i("ul"),Gi=i("li"),U1=s("각 사용자는 한 개의 중앙 서버와의 업로드 연결, 그리고 (전체 사용자-1) 만큼의 다운로드 연결을 가짐"),S1=f(),qi=i("li"),R1=s("지연 시간이 P2P보다는 길지만 MCU보다는 빠름"),m1=f(),Qi=i("li"),A1=s("데이터가 서버를 거치기 때문에 서버 부담이 존재"),x1=f(),ji=i("li"),W1=s("클라이언트의 워크로드를 줄일 수 있지만, 대규모의 N:N 통신에서는 여전히 부하가 심함"),k1=f(),Zi=i("li"),w1=s("1:N 및 대규모가 아닌 N:N 통신에 적합"),D1=f(),Yl=i("li"),zi=i("p"),H1=s("MCU"),y1=f(),N=i("ul"),Ji=i("li"),B1=s("각 사용자는 한 개의 중앙 서버와의 업로드/다운로드 연결을 가짐"),M1=f(),Ki=i("li"),O1=s("클라이언트 부담 최소화"),F1=f(),Vi=i("li"),G1=s("데이터가 서버를 거쳐, 각 클라이언트들에게 데이터를 처리하여 분배해야 하기 때문에 서버 부담이 매우 크며 지연 시간이 길어짐"),q1=f(),Xi=i("li"),Q1=s("대규모 N:N 통신에 적합"),ha=f(),ba=i("br"),La=f(),bl=i("h3"),Ll=i("a"),Yi=i("span"),j1=s("Signaling Server"),Ta=f(),Ce=i("p"),Ne=i("img"),Ca=f(),L=i("ul"),$i=i("li"),Z1=s("기기 사이에서 연결 생성 및 해제"),z1=f(),gi=i("li"),J1=s("통신할 대상을 찾아주는 역할"),K1=f(),lr=i("li"),V1=s("SDP나 ICE Candidates 등 연결 생성을 위한 데이터가 각 피어에게 전달됨"),X1=f(),er=i("li"),Y1=s("Websocket, HTTPS 등 서로 다른 통신 프로토콜로 설계 가능"),Na=f(),Ua=i("br"),Sa=i("br"),Ra=f(),Tl=i("h2"),Cl=i("a"),tr=i("span"),$1=s("출처"),ma=f(),$l=i("p"),g1=s("WebRTC : "),gl=i("a"),l2=s("https://wormwlrm.github.io/2021/01/24/Introducing-WebRTC.html"),Aa=f(),xa=i("br"),Wa=i("br"),this.h()},l(e){F=r(e,"P",{});var v=a(F);lf=u(v,"교내 프로젝트, 교과목, 스터디를 통해 정리한 WebRTC 관련 내용을 기록해보았습니다"),v.forEach(t),rr=o(e),ar=r(e,"BR",{}),fr=r(e,"BR",{}),or=o(e),G=r(e,"H2",{id:!0});var e2=a(G);q=r(e2,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var F2=a(q);ye=r(F2,"SPAN",{class:!0}),a(ye).forEach(t),F2.forEach(t),ef=u(e2,"WebRTC"),e2.forEach(t),sr=o(e),ur=r(e,"HR",{}),vr=o(e),Q=r(e,"H3",{id:!0});var t2=a(Q);j=r(t2,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var G2=a(j);Be=r(G2,"SPAN",{class:!0}),a(Be).forEach(t),G2.forEach(t),tf=u(t2,"WebRTC란?"),t2.forEach(t),Er=o(e),c=r(e,"UL",{});var T=a(c);Me=r(T,"LI",{});var q2=a(Me);Oe=r(q2,"P",{});var Q2=a(Oe);rf=u(Q2,"Web Real-Time Communication의 약자"),Q2.forEach(t),q2.forEach(t),af=o(T),xl=r(T,"LI",{});var ka=a(xl);Wl=r(ka,"P",{});var wa=a(Wl);ff=u(wa,"별도의 소프트웨어나 플러그인 없이 ("),Fe=r(wa,"STRONG",{});var j2=a(Fe);of=u(j2,"웹 브라우저 만으로도"),j2.forEach(t),sf=u(wa,") 오디오 및 비디오 데이터를 주고받을 수 있음"),wa.forEach(t),uf=o(ka),Ge=r(ka,"UL",{});var Z2=a(Ge);qe=r(Z2,"LI",{});var z2=a(qe);vf=u(z2,"화상 통화, 실시간 회의 등 구현 가능"),z2.forEach(t),Z2.forEach(t),ka.forEach(t),Ef=o(T),Qe=r(T,"LI",{});var J2=a(Qe);je=r(J2,"P",{});var K2=a(je);_f=u(K2,"웹 브라우저 뿐 아니라 IOS, Android Native App 위에서도 동작함"),K2.forEach(t),J2.forEach(t),cf=o(T),Ze=r(T,"LI",{});var V2=a(Ze);ze=r(V2,"P",{});var X2=a(ze);df=u(X2,"구글이 표준화를 주도하고 있어, Chrome 호환성이 제일 좋음"),X2.forEach(t),V2.forEach(t),nf=o(T),Je=r(T,"LI",{});var Y2=a(Je);Ke=r(Y2,"P",{});var $2=a(Ke);Pf=u($2,"UDP, 피어-to-피어로 통신함"),$2.forEach(t),Y2.forEach(t),If=o(T),kl=r(T,"LI",{});var Da=a(kl);Ve=r(Da,"P",{});var g2=a(Ve);pf=u(g2,"브라우저 API 제공"),g2.forEach(t),hf=o(Da),w=r(Da,"UL",{});var Ue=a(w);le=r(Ue,"LI",{});var i2=a(le);Xe=r(i2,"CODE",{});var lu=a(Xe);bf=u(lu,"RTC피어Connection()"),lu.forEach(t),Lf=u(i2," : signal 처리, 코덱 처리, p2p 통신, 보안, bandwidth 관리 등, 다양한 역할을 하는 WebRTC 통신 주요 class"),i2.forEach(t),Tf=o(Ue),ee=r(Ue,"LI",{});var r2=a(ee);Ye=r(r2,"CODE",{});var eu=a(Ye);Cf=u(eu,"getUserMedia()"),eu.forEach(t),Nf=u(r2," : 카메라나 마이크 등 장치에 접근하여 유저 데이터를 capture"),r2.forEach(t),Uf=o(Ue),te=r(Ue,"LI",{});var a2=a(te);$e=r(a2,"CODE",{});var tu=a($e);Sf=u(tu,"RTCDataChannel()"),tu.forEach(t),Rf=u(a2," : 오디오, 비디오 외의 비정형 데이터를 주고받기 위함. WebSocket과 거의 유사한 api"),a2.forEach(t),Ue.forEach(t),Da.forEach(t),T.forEach(t),_r=o(e),cr=r(e,"BR",{}),dr=o(e),Z=r(e,"H3",{id:!0});var f2=a(Z);z=r(f2,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var iu=a(z);ge=r(iu,"SPAN",{class:!0}),a(ge).forEach(t),iu.forEach(t),mf=u(f2,"WebRTC 장점"),f2.forEach(t),nr=o(e),d=r(e,"OL",{});var A=a(d);wl=r(A,"LI",{});var Ha=a(wl);lt=r(Ha,"P",{});var ru=a(lt);Af=u(ru,"UDP를 사용하여 지연시간이 매우 짧다"),ru.forEach(t),xf=o(Ha),Dl=r(Ha,"UL",{});var ya=a(Dl);et=r(ya,"LI",{});var au=a(et);Wf=u(au,"카메라로 찍은 화면이 상대에게 도달하기까지 걸리는 시간이 500ms 이하"),au.forEach(t),kf=o(ya),tt=r(ya,"LI",{});var fu=a(tt);wf=u(fu,"다른 HTTP Live Stream 기술들의 경우, 주로 영상을 사람들에게 뿌리는(1:N) 용도라서 지연 시간이 존재"),fu.forEach(t),ya.forEach(t),Ha.forEach(t),Df=o(A),Hl=r(A,"LI",{});var Ba=a(Hl);it=r(Ba,"P",{});var ou=a(it);Hf=u(ou,"Platform and Device Independent"),ou.forEach(t),yf=o(Ba),rt=r(Ba,"UL",{});var su=a(rt);at=r(su,"LI",{});var uu=a(at);Bf=u(uu,"웹브라우저 위에서 돌아가도록 설계되었기 때문에, 브라우저만 돌아가면 OS, 장치가 무엇이든 상관없음"),uu.forEach(t),su.forEach(t),Ba.forEach(t),Mf=o(A),yl=r(A,"LI",{});var Ma=a(yl);ft=r(Ma,"P",{});var vu=a(ft);Of=u(vu,"Open-source 및 표준화되어있음"),vu.forEach(t),Ff=o(Ma),ot=r(Ma,"UL",{});var Eu=a(ot);st=r(Eu,"LI",{});var _u=a(st);Gf=u(_u,"언어별로 표준 문서가 존재하며, 표준대로 진행하면 모두 연결 가능함"),_u.forEach(t),Eu.forEach(t),Ma.forEach(t),qf=o(A),Bl=r(A,"LI",{});var Oa=a(Bl);ut=r(Oa,"P",{});var cu=a(ut);Qf=u(cu,"네트워크 성능에 따라 품질 조정"),cu.forEach(t),jf=o(Oa),D=r(Oa,"UL",{});var Se=a(D);vt=r(Se,"LI",{});var du=a(vt);Zf=u(du,"네트워크 성능에 따라 전송받는 (영상)데이터의 품질(화질)이 달라질 수 있음"),du.forEach(t),zf=o(Se),Et=r(Se,"LI",{});var nu=a(Et);Jf=u(nu,"하지만 한 순간에는 특정 해상도의 영상 하나만 받을 수 있음"),nu.forEach(t),Kf=o(Se),ie=r(Se,"LI",{});var o2=a(ie);Vf=u(o2,"Simulcasting"),Ml=r(o2,"UL",{});var Fa=a(Ml);_t=r(Fa,"LI",{});var Pu=a(_t);Xf=u(Pu,"동시의 여러 해상도의 영상을 보냄"),Pu.forEach(t),Yf=o(Fa),ct=r(Fa,"LI",{});var Iu=a(ct);$f=u(Iu,"bandwidth를 낭비하지만, 수신 장치가 알아서 적합한 품질의 영상 선택"),Iu.forEach(t),Fa.forEach(t),o2.forEach(t),Se.forEach(t),Oa.forEach(t),gf=o(A),Ol=r(A,"LI",{});var Ga=a(Ol);dt=r(Ga,"P",{});var pu=a(dt);lo=u(pu,"P2P의 장점"),pu.forEach(t),eo=o(Ga),Fl=r(Ga,"UL",{});var qa=a(Fl);nt=r(qa,"LI",{});var hu=a(nt);to=u(hu,"주요 데이터가 서버를 경유하지 않기 때문에, 서버 입장에선 부담이 적음"),hu.forEach(t),io=o(qa),Pt=r(qa,"LI",{});var bu=a(Pt);ro=u(bu,"유저 입장에선 내 데이터를 서버가 볼 수 없기 때문에, 안심하고 이용 가능"),bu.forEach(t),qa.forEach(t),Ga.forEach(t),A.forEach(t),Pr=o(e),Ir=r(e,"BR",{}),pr=o(e),J=r(e,"H3",{id:!0});var s2=a(J);K=r(s2,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Lu=a(K);It=r(Lu,"SPAN",{class:!0}),a(It).forEach(t),Lu.forEach(t),ao=u(s2,"WebRTC 단점"),s2.forEach(t),hr=o(e),U=r(e,"OL",{});var Re=a(U);Gl=r(Re,"LI",{});var Qa=a(Gl);pt=r(Qa,"P",{});var Tu=a(pt);fo=u(Tu,"Scalability"),Tu.forEach(t),oo=o(Qa),H=r(Qa,"UL",{});var me=a(H);ht=r(me,"LI",{});var Cu=a(ht);so=u(Cu,"하나의 세션에 참가하는 통신 대상이 일정 이상 늘어나기 어려움"),Cu.forEach(t),uo=o(me),re=r(me,"LI",{});var u2=a(re);vo=u(u2,"통신하는 대상의 수가 제한됨"),bt=r(u2,"UL",{});var Nu=a(bt);Lt=r(Nu,"LI",{});var Uu=a(Lt);Eo=u(Uu,"권고에 따르면 최대 50개 (WebRTC expert Tsahi LeventLevi recommends staying shy of any more than 50 concurrent 피어 connections.)"),Uu.forEach(t),Nu.forEach(t),u2.forEach(t),_o=o(me),ae=r(me,"LI",{});var v2=a(ae);co=u(v2,"몇 천 명의 유저가 통신하는 경우, live streaming server를 두어 데이터를 분산시킴"),Tt=r(v2,"UL",{});var Su=a(Tt);Ct=r(Su,"LI",{});var Ru=a(Ct);no=u(Ru,"SFU, MCU 등이 대표적"),Ru.forEach(t),Su.forEach(t),v2.forEach(t),me.forEach(t),Qa.forEach(t),Po=o(Re),ql=r(Re,"LI",{});var ja=a(ql);Nt=r(ja,"P",{});var mu=a(Nt);Io=u(mu,"Broadcast Quality"),mu.forEach(t),po=o(ja),Ut=r(ja,"UL",{});var Au=a(Ut);St=r(Au,"LI",{});var xu=a(St);ho=u(xu,"WebRTC 자체에 퀄리티 문제는 없지만, Broadcast를 함으로써 발생하는 영상 품질의 하락 문제"),xu.forEach(t),Au.forEach(t),ja.forEach(t),bo=o(Re),Ql=r(Re,"LI",{});var Za=a(Ql);Rt=r(Za,"P",{});var Wu=a(Rt);Lo=u(Wu,"그래도 서버가 필요함"),Wu.forEach(t),To=o(Za),y=r(Za,"UL",{});var Ae=a(y);mt=r(Ae,"LI",{});var ku=a(mt);Co=u(ku,"두 피어끼리의 connection 생성 및 해제 -> Signaling Server"),ku.forEach(t),No=o(Ae),At=r(Ae,"LI",{});var wu=a(At);Uo=u(wu,"피어간 통신이 가능한지 여부 또는 Public IP를 확인해야 하는 경우 -> STUN 서버"),wu.forEach(t),So=o(Ae),xt=r(Ae,"LI",{});var Du=a(xt);Ro=u(Du,"다양한 네트워크 상의 이슈(방화벽, 공유기나 라우터의 보안 정책 등) 때문에 피어간 직접 통신이 되지 않을 경우 -> TURN 서버를 통해 데이터를 Relay"),Du.forEach(t),Ae.forEach(t),Za.forEach(t),Re.forEach(t),br=o(e),Lr=r(e,"BR",{}),Tr=o(e),V=r(e,"H3",{id:!0});var E2=a(V);X=r(E2,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Hu=a(X);Wt=r(Hu,"SPAN",{class:!0}),a(Wt).forEach(t),Hu.forEach(t),mo=u(E2,"WebRTC 동작 흐름"),E2.forEach(t),Cr=o(e),fe=r(e,"P",{});var yu=a(fe);oe=r(yu,"IMG",{src:!0,alt:!0}),yu.forEach(t),Nr=o(e),S=r(e,"OL",{});var xe=a(S);kt=r(xe,"LI",{});var Bu=a(kt);Ao=u(Bu,"Signaling Server : 기기 사이에서 커넥션을 생성 및 해제해주고, 통신할 대상을 찾아줌"),Bu.forEach(t),xo=o(xe),wt=r(xe,"LI",{});var Mu=a(wt);Wo=u(Mu,"STUN Server : 요청자의 Public IP를 확인"),Mu.forEach(t),ko=o(xe),Dt=r(xe,"LI",{});var Ou=a(Dt);wo=u(Ou,"TURN Server : P2P로 데이터를 직접 전송할 수 없다면, 데이터를 Relay"),Ou.forEach(t),xe.forEach(t),Ur=o(e),se=r(e,"P",{});var Fu=a(se);Do=u(Fu,"자세한 내용은 아래에서 다룰 예정"),Fu.forEach(t),Sr=o(e),Rr=r(e,"BR",{}),mr=r(e,"BR",{}),Ar=o(e),Y=r(e,"H2",{id:!0});var _2=a(Y);$=r(_2,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Gu=a($);Ht=r(Gu,"SPAN",{class:!0}),a(Ht).forEach(t),Gu.forEach(t),Ho=u(_2,"SDP"),_2.forEach(t),xr=o(e),Wr=r(e,"HR",{}),kr=o(e),g=r(e,"H3",{id:!0});var c2=a(g);ll=r(c2,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var qu=a(ll);yt=r(qu,"SPAN",{class:!0}),a(yt).forEach(t),qu.forEach(t),yo=u(c2,"SDP란?"),c2.forEach(t),wr=o(e),ue=r(e,"P",{});var Qu=a(ue);ve=r(Qu,"IMG",{src:!0,alt:!0}),Qu.forEach(t),Dr=o(e),p=r(e,"UL",{});var Nl=a(p);Bt=r(Nl,"LI",{});var ju=a(Bt);Bo=u(ju,"Session Description Protocol의 약자 (실질적으로는 프로토콜이 아니긴 함)"),ju.forEach(t),Mo=o(Nl),Mt=r(Nl,"LI",{});var Zu=a(Mt);Oo=u(Zu,"해상도, 형식, 코덱, 암호화 등, 컨텐츠에 대한 메타데이터 정보"),Zu.forEach(t),Fo=o(Nl),Ot=r(Nl,"LI",{});var zu=a(Ot);Go=u(zu,"누구와 어떻게 대화할지에 대한 정보를 포함함"),zu.forEach(t),qo=o(Nl),Ee=r(Nl,"LI",{});var d2=a(Ee);Qo=u(d2,"SIP(Session Initiation Protocol)를 통해 SDP를 전송"),Ft=r(d2,"UL",{});var Ju=a(Ft);Gt=r(Ju,"LI",{});var Ku=a(Gt);jo=u(Ku,"SIP는 WebRTC 이전에도 존재하던 사용자/참가자 그룹 간의 연결 설정 프로토콜이며, WebRTC는 SIP를 사용하여 Session 설정"),Ku.forEach(t),Ju.forEach(t),d2.forEach(t),Nl.forEach(t),Hr=o(e),yr=r(e,"BR",{}),Br=r(e,"BR",{}),Mr=o(e),el=r(e,"H2",{id:!0});var n2=a(el);tl=r(n2,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Vu=a(tl);qt=r(Vu,"SPAN",{class:!0}),a(qt).forEach(t),Vu.forEach(t),Zo=u(n2,"ICE"),n2.forEach(t),Or=o(e),Fr=r(e,"HR",{}),Gr=o(e),il=r(e,"H3",{id:!0});var P2=a(il);rl=r(P2,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Xu=a(rl);Qt=r(Xu,"SPAN",{class:!0}),a(Qt).forEach(t),Xu.forEach(t),zo=u(P2,"ICE란?"),P2.forEach(t),qr=o(e),n=r(e,"UL",{});var x=a(n);jt=r(x,"LI",{});var Yu=a(jt);Zt=r(Yu,"P",{});var $u=a(Zt);Jo=u($u,"Interactive Connectivity Establishment"),$u.forEach(t),Yu.forEach(t),Ko=o(x),zt=r(x,"LI",{});var gu=a(zt);Jt=r(gu,"P",{});var lv=a(Jt);Vo=u(lv,"브라우저가 피어를 통한 연결이 가능하게 해주는 프레임워크"),lv.forEach(t),gu.forEach(t),Xo=o(x),Kt=r(x,"LI",{});var ev=a(Kt);jl=r(ev,"P",{});var za=a(jl);Yo=u(za,"두 피어간 "),Vt=r(za,"STRONG",{});var tv=a(Vt);$o=u(tv,"최적의 경로"),tv.forEach(t),go=u(za,"를 찾아줌 (NAT Traversal)"),za.forEach(t),ev.forEach(t),ls=o(x),Zl=r(x,"LI",{});var Ja=a(Zl);Xt=r(Ja,"P",{});var iv=a(Xt);es=u(iv,"피어끼리 연결이 쉽지 않은 이유"),iv.forEach(t),ts=o(Ja),B=r(Ja,"UL",{});var We=a(B);Yt=r(We,"LI",{});var rv=a(Yt);is=u(rv,"방화벽에 걸리는 경우"),rv.forEach(t),rs=o(We),$t=r(We,"LI",{});var av=a($t);as=u(av,"장치에 Public IP가 없는 경우"),av.forEach(t),fs=o(We),gt=r(We,"LI",{});var fv=a(gt);os=u(fv,"라우터의 보안 정책이 피어간 직접 연결을 막는 경우"),fv.forEach(t),We.forEach(t),Ja.forEach(t),ss=o(x),zl=r(x,"LI",{});var Ka=a(zl);li=r(Ka,"P",{});var ov=a(li);us=u(ov,"ICE는 STUN서버와 TURN서버를 사용하여 이러한 작업 수행"),ov.forEach(t),vs=o(Ka),ei=r(Ka,"UL",{});var sv=a(ei);_e=r(sv,"LI",{});var I2=a(_e);Es=u(I2,"일반적으로, STUN, TURN 서버까지 거치고 나면 다음과 같은 주소를 얻음"),M=r(I2,"UL",{});var ke=a(M);ti=r(ke,"LI",{});var uv=a(ti);_s=u(uv,"Private IP, Port"),uv.forEach(t),cs=o(ke),ii=r(ke,"LI",{});var vv=a(ii);ds=u(vv,"Public IP, Port (through STUN)"),vv.forEach(t),ns=o(ke),ri=r(ke,"LI",{});var Ev=a(ri);Ps=u(Ev,"TURN 서버의 IP, Port(through TURN)"),Ev.forEach(t),ke.forEach(t),I2.forEach(t),sv.forEach(t),Ka.forEach(t),x.forEach(t),Qr=o(e),jr=r(e,"BR",{}),Zr=o(e),al=r(e,"H3",{id:!0});var p2=a(al);fl=r(p2,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var _v=a(fl);ai=r(_v,"SPAN",{class:!0}),a(ai).forEach(t),_v.forEach(t),Is=u(p2,"ICE Candidates"),p2.forEach(t),zr=o(e),h=r(e,"UL",{});var Ul=a(h);fi=r(Ul,"LI",{});var cv=a(fi);ps=u(cv,"WebRTC 피어 연결을 시작하면, 일반적으로 여러개의 candiate들이 각 피어에 의해 만들어짐"),cv.forEach(t),hs=o(Ul),Jl=r(Ul,"LI",{});var Va=a(Jl);bs=u(Va,"구분자("),oi=r(Va,"CODE",{});var dv=a(oi);Ls=u(dv,"foundation"),dv.forEach(t),Ts=u(Va,"), IP, 포트, 우선순위, 프로토콜 등으로 구성"),Va.forEach(t),Cs=o(Ul),si=r(Ul,"LI",{});var nv=a(si);Ns=u(nv,"UDP가 기본이지만 UDP가 안되면 TCP도 허용함"),nv.forEach(t),Us=o(Ul),ui=r(Ul,"LI",{});var Pv=a(ui);Ss=u(Pv,"각 피어가 수집한 ICE Candidates로 패킷을 보내 본 뒤, 가장 latency가 낮고 안정적인 ICE Candidates를 사용"),Pv.forEach(t),Ul.forEach(t),Jr=o(e),Kr=r(e,"BR",{}),Vr=o(e),ol=r(e,"H3",{id:!0});var h2=a(ol);sl=r(h2,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Iv=a(sl);vi=r(Iv,"SPAN",{class:!0}),a(vi).forEach(t),Iv.forEach(t),Rs=u(h2,"Trickle ICE"),h2.forEach(t),Xr=o(e),ul=r(e,"UL",{});var Xa=a(ul);ce=r(Xa,"LI",{});var b2=a(ce);ms=u(b2,"일반적으로 피어는 ICE Candidates를 수집하여 목록을 완성한 후 한꺼번에 교환함"),Ei=r(b2,"UL",{});var pv=a(Ei);_i=r(pv,"LI",{});var hv=a(_i);As=u(hv,"이 방식은 네트워크 지연 등 이유로 ICE Candidates를 수집하는 데 오래 걸릴 수 있음"),hv.forEach(t),pv.forEach(t),b2.forEach(t),xs=o(Xa),de=r(Xa,"LI",{});var L2=a(de);Ws=u(L2,"비효율적인 ICE Candidates 교환 작업을 비동기 처리"),ci=r(L2,"UL",{});var bv=a(ci);di=r(bv,"LI",{});var Lv=a(di);ks=u(Lv,"ICE Candidates를 찾은 즉시 피어에게 전송"),Lv.forEach(t),bv.forEach(t),L2.forEach(t),Xa.forEach(t),Yr=o(e),$r=r(e,"BR",{}),gr=r(e,"BR",{}),la=o(e),vl=r(e,"H2",{id:!0});var T2=a(vl);El=r(T2,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Tv=a(El);ni=r(Tv,"SPAN",{class:!0}),a(ni).forEach(t),Tv.forEach(t),ws=u(T2,"Signaling"),T2.forEach(t),ea=o(e),ta=r(e,"HR",{}),ia=o(e),_l=r(e,"H3",{id:!0});var C2=a(_l);cl=r(C2,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Cv=a(cl);Pi=r(Cv,"SPAN",{class:!0}),a(Pi).forEach(t),Cv.forEach(t),Ds=u(C2,"NAT?"),C2.forEach(t),ra=o(e),ne=r(e,"P",{});var Nv=a(ne);Pe=r(Nv,"IMG",{src:!0,alt:!0}),Nv.forEach(t),aa=o(e),R=r(e,"UL",{});var we=a(R);Ii=r(we,"LI",{});var Uv=a(Ii);Hs=u(Uv,"Network Address Translation"),Uv.forEach(t),ys=o(we),Ie=r(we,"LI",{});var N2=a(Ie);Bs=u(N2,"일반적인 사용자의 네트워크 환경에서는 대부분 공유기를 두기 때문에 Private IP, Public IP가 각각 존재함"),pi=r(N2,"UL",{});var Sv=a(pi);hi=r(Sv,"LI",{});var Rv=a(hi);Ms=u(Rv,"(일반적인 경우) 한 대의 공유기에 여러 대의 장치가 연결되고, 따라서 한 개의 Public IP와 여러 개의 Private IP가 존재함"),Rv.forEach(t),Sv.forEach(t),N2.forEach(t),Os=o(we),pe=r(we,"LI",{});var U2=a(pe);Fs=u(U2,"이 때 NAT는 Public IP를 특정 Private IP로 매핑시킴"),O=r(U2,"UL",{});var De=a(O);bi=r(De,"LI",{});var mv=a(bi);Gs=u(mv,"다만 연결된 장치 개수만큼 여러 대의 Private IP가 Public IP에 매핑될 필요가 있기에, PAT도 함께 적용"),mv.forEach(t),qs=o(De),Li=r(De,"LI",{});var Av=a(Li);Qs=u(Av,"NAT + PAT(포트포워딩이라고도 함)는 Public IP:특정 포트를, 특정 Private IP:특정 포트로 매핑시킴"),Av.forEach(t),js=o(De),Ti=r(De,"LI",{});var xv=a(Ti);Zs=u(xv,"위 그림에서 Public IP:80으로 요청을 보내면, 192.168.0.37을 가진 장치가 80번 포트로 요청을 받을 것"),xv.forEach(t),De.forEach(t),U2.forEach(t),we.forEach(t),fa=o(e),oa=r(e,"BR",{}),sa=o(e),dl=r(e,"H3",{id:!0});var S2=a(dl);nl=r(S2,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Wv=a(nl);Ci=r(Wv,"SPAN",{class:!0}),a(Ci).forEach(t),Wv.forEach(t),zs=u(S2,"STUN"),S2.forEach(t),ua=o(e),b=r(e,"UL",{});var Sl=a(b);Ni=r(Sl,"LI",{});var kv=a(Ni);Js=u(kv,"Session Traversal Utilities for NAT"),kv.forEach(t),Ks=o(Sl),Ui=r(Sl,"LI",{});var wv=a(Ui);Vs=u(wv,"기본적으로, NAT 환경에서 사용자 장치는 자신의 Public IP를 알 수 없음"),wv.forEach(t),Xs=o(Sl),he=r(Sl,"LI",{});var R2=a(he);Ys=u(R2,"STUN 서버는 사용자의 Public IP를 알려주는 역할"),Si=r(R2,"UL",{});var Dv=a(Si);be=r(Dv,"LI",{});var m2=a(be);Kl=r(m2,"A",{href:!0,rel:!0});var Hv=a(Kl);$s=u(Hv,"https://ipip.kr"),Hv.forEach(t),gs=u(m2,"에 접속하면 Public IP를 알 수 있음. 이와 유사한 역할"),m2.forEach(t),Dv.forEach(t),R2.forEach(t),l1=o(Sl),Ri=r(Sl,"LI",{});var yv=a(Ri);e1=u(yv,"STUN을 통해 사용자가 P2P UDP 통신을 위해 사용할 수 있는 IP주소와 포트번호를 찾아냄"),yv.forEach(t),Sl.forEach(t),va=o(e),Ea=r(e,"BR",{}),_a=o(e),Pl=r(e,"H3",{id:!0});var A2=a(Pl);Il=r(A2,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Bv=a(Il);mi=r(Bv,"SPAN",{class:!0}),a(mi).forEach(t),Bv.forEach(t),t1=u(A2,"TURN"),A2.forEach(t),ca=o(e),P=r(e,"UL",{});var W=a(P);Ai=r(W,"LI",{});var Mv=a(Ai);i1=u(Mv,"Traversal Using Relays around NAT"),Mv.forEach(t),r1=o(W),xi=r(W,"LI",{});var Ov=a(xi);a1=u(Ov,"상대 Peer에게 보낼 정보를 TURN 서버에 전달하고, TURN이 상대 Peer에게 전달해줌"),Ov.forEach(t),f1=o(W),Wi=r(W,"LI",{});var Fv=a(Wi);o1=u(Fv,"Symmetric NAT 등, Router의 NAT으로 생기는 제약 조건 등을 우회함"),Fv.forEach(t),s1=o(W),ki=r(W,"LI",{});var Gv=a(ki);u1=u(Gv,"오버헤드가 발생하지만 대안이 없는 경우 사용"),Gv.forEach(t),v1=o(W),wi=r(W,"LI",{});var qv=a(wi);E1=u(qv,"SFU, MCU도 TURN 서버의 일종이라고 볼 수 있음"),qv.forEach(t),W.forEach(t),da=o(e),na=r(e,"BR",{}),Pa=o(e),pl=r(e,"H3",{id:!0});var x2=a(pl);hl=r(x2,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Qv=a(hl);Di=r(Qv,"SPAN",{class:!0}),a(Di).forEach(t),Qv.forEach(t),_1=u(x2,"P2P vs SFU vs MCU"),x2.forEach(t),Ia=o(e),Le=r(e,"P",{});var jv=a(Le);Te=r(jv,"IMG",{src:!0,alt:!0}),jv.forEach(t),pa=o(e),m=r(e,"UL",{});var He=a(m);Vl=r(He,"LI",{});var Ya=a(Vl);Hi=r(Ya,"P",{});var Zv=a(Hi);c1=u(Zv,"P2P"),Zv.forEach(t),d1=o(Ya),C=r(Ya,"UL",{});var Rl=a(C);yi=r(Rl,"LI",{});var zv=a(yi);n1=u(zv,"각 사용자는 (전체 사용자-1) 만큼의 업로드/다운로드 연결을 가짐"),zv.forEach(t),P1=o(Rl),Bi=r(Rl,"LI",{});var Jv=a(Bi);I1=u(Jv,"서버의 부담이 덜하며 지연시간이 가장 짧음"),Jv.forEach(t),p1=o(Rl),Mi=r(Rl,"LI",{});var Kv=a(Mi);h1=u(Kv,"통신에 참여하는 사용자가 많아질수록 클라이언트의 워크로드가 급격히 증가함"),Kv.forEach(t),b1=o(Rl),Oi=r(Rl,"LI",{});var Vv=a(Oi);L1=u(Vv,"1:1 통신 및 소규모의 1:N, N:N 통신에 적합"),Vv.forEach(t),Rl.forEach(t),Ya.forEach(t),T1=o(He),Xl=r(He,"LI",{});var $a=a(Xl);Fi=r($a,"P",{});var Xv=a(Fi);C1=u(Xv,"SFU"),Xv.forEach(t),N1=o($a),I=r($a,"UL",{});var k=a(I);Gi=r(k,"LI",{});var Yv=a(Gi);U1=u(Yv,"각 사용자는 한 개의 중앙 서버와의 업로드 연결, 그리고 (전체 사용자-1) 만큼의 다운로드 연결을 가짐"),Yv.forEach(t),S1=o(k),qi=r(k,"LI",{});var $v=a(qi);R1=u($v,"지연 시간이 P2P보다는 길지만 MCU보다는 빠름"),$v.forEach(t),m1=o(k),Qi=r(k,"LI",{});var gv=a(Qi);A1=u(gv,"데이터가 서버를 거치기 때문에 서버 부담이 존재"),gv.forEach(t),x1=o(k),ji=r(k,"LI",{});var lE=a(ji);W1=u(lE,"클라이언트의 워크로드를 줄일 수 있지만, 대규모의 N:N 통신에서는 여전히 부하가 심함"),lE.forEach(t),k1=o(k),Zi=r(k,"LI",{});var eE=a(Zi);w1=u(eE,"1:N 및 대규모가 아닌 N:N 통신에 적합"),eE.forEach(t),k.forEach(t),$a.forEach(t),D1=o(He),Yl=r(He,"LI",{});var ga=a(Yl);zi=r(ga,"P",{});var tE=a(zi);H1=u(tE,"MCU"),tE.forEach(t),y1=o(ga),N=r(ga,"UL",{});var ml=a(N);Ji=r(ml,"LI",{});var iE=a(Ji);B1=u(iE,"각 사용자는 한 개의 중앙 서버와의 업로드/다운로드 연결을 가짐"),iE.forEach(t),M1=o(ml),Ki=r(ml,"LI",{});var rE=a(Ki);O1=u(rE,"클라이언트 부담 최소화"),rE.forEach(t),F1=o(ml),Vi=r(ml,"LI",{});var aE=a(Vi);G1=u(aE,"데이터가 서버를 거쳐, 각 클라이언트들에게 데이터를 처리하여 분배해야 하기 때문에 서버 부담이 매우 크며 지연 시간이 길어짐"),aE.forEach(t),q1=o(ml),Xi=r(ml,"LI",{});var fE=a(Xi);Q1=u(fE,"대규모 N:N 통신에 적합"),fE.forEach(t),ml.forEach(t),ga.forEach(t),He.forEach(t),ha=o(e),ba=r(e,"BR",{}),La=o(e),bl=r(e,"H3",{id:!0});var W2=a(bl);Ll=r(W2,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var oE=a(Ll);Yi=r(oE,"SPAN",{class:!0}),a(Yi).forEach(t),oE.forEach(t),j1=u(W2,"Signaling Server"),W2.forEach(t),Ta=o(e),Ce=r(e,"P",{});var sE=a(Ce);Ne=r(sE,"IMG",{src:!0,alt:!0}),sE.forEach(t),Ca=o(e),L=r(e,"UL",{});var Al=a(L);$i=r(Al,"LI",{});var uE=a($i);Z1=u(uE,"기기 사이에서 연결 생성 및 해제"),uE.forEach(t),z1=o(Al),gi=r(Al,"LI",{});var vE=a(gi);J1=u(vE,"통신할 대상을 찾아주는 역할"),vE.forEach(t),K1=o(Al),lr=r(Al,"LI",{});var EE=a(lr);V1=u(EE,"SDP나 ICE Candidates 등 연결 생성을 위한 데이터가 각 피어에게 전달됨"),EE.forEach(t),X1=o(Al),er=r(Al,"LI",{});var _E=a(er);Y1=u(_E,"Websocket, HTTPS 등 서로 다른 통신 프로토콜로 설계 가능"),_E.forEach(t),Al.forEach(t),Na=o(e),Ua=r(e,"BR",{}),Sa=r(e,"BR",{}),Ra=o(e),Tl=r(e,"H2",{id:!0});var k2=a(Tl);Cl=r(k2,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var cE=a(Cl);tr=r(cE,"SPAN",{class:!0}),a(tr).forEach(t),cE.forEach(t),$1=u(k2,"출처"),k2.forEach(t),ma=o(e),$l=r(e,"P",{});var w2=a($l);g1=u(w2,"WebRTC : "),gl=r(w2,"A",{href:!0,rel:!0});var dE=a(gl);l2=u(dE,"https://wormwlrm.github.io/2021/01/24/Introducing-WebRTC.html"),dE.forEach(t),w2.forEach(t),Aa=o(e),xa=r(e,"BR",{}),Wa=r(e,"BR",{}),this.h()},h(){_(ye,"class","icon icon-link"),_(q,"aria-hidden","true"),_(q,"tabindex","-1"),_(q,"href","#webrtc"),_(G,"id","webrtc"),_(Be,"class","icon icon-link"),_(j,"aria-hidden","true"),_(j,"tabindex","-1"),_(j,"href","#webrtc란"),_(Q,"id","webrtc란"),_(ge,"class","icon icon-link"),_(z,"aria-hidden","true"),_(z,"tabindex","-1"),_(z,"href","#webrtc-장점"),_(Z,"id","webrtc-장점"),_(It,"class","icon icon-link"),_(K,"aria-hidden","true"),_(K,"tabindex","-1"),_(K,"href","#webrtc-단점"),_(J,"id","webrtc-단점"),_(Wt,"class","icon icon-link"),_(X,"aria-hidden","true"),_(X,"tabindex","-1"),_(X,"href","#webrtc-동작-흐름"),_(V,"id","webrtc-동작-흐름"),ir(oe.src,H2="/post_img/Networking/WebRTC/2023-01-16-22-07-55.png")||_(oe,"src",H2),_(oe,"alt","webrtc signaling architecture"),_(Ht,"class","icon icon-link"),_($,"aria-hidden","true"),_($,"tabindex","-1"),_($,"href","#sdp"),_(Y,"id","sdp"),_(yt,"class","icon icon-link"),_(ll,"aria-hidden","true"),_(ll,"tabindex","-1"),_(ll,"href","#sdp란"),_(g,"id","sdp란"),ir(ve.src,y2="/post_img/Networking/WebRTC/2023-01-29-22-15-14.PNG")||_(ve,"src",y2),_(ve,"alt","js sdp example"),_(qt,"class","icon icon-link"),_(tl,"aria-hidden","true"),_(tl,"tabindex","-1"),_(tl,"href","#ice"),_(el,"id","ice"),_(Qt,"class","icon icon-link"),_(rl,"aria-hidden","true"),_(rl,"tabindex","-1"),_(rl,"href","#ice란"),_(il,"id","ice란"),_(ai,"class","icon icon-link"),_(fl,"aria-hidden","true"),_(fl,"tabindex","-1"),_(fl,"href","#ice-candidates"),_(al,"id","ice-candidates"),_(vi,"class","icon icon-link"),_(sl,"aria-hidden","true"),_(sl,"tabindex","-1"),_(sl,"href","#trickle-ice"),_(ol,"id","trickle-ice"),_(ni,"class","icon icon-link"),_(El,"aria-hidden","true"),_(El,"tabindex","-1"),_(El,"href","#signaling"),_(vl,"id","signaling"),_(Pi,"class","icon icon-link"),_(cl,"aria-hidden","true"),_(cl,"tabindex","-1"),_(cl,"href","#nat"),_(_l,"id","nat"),ir(Pe.src,B2="/post_img/Networking/WebRTC/2023-01-17-00-20-14.png")||_(Pe,"src",B2),_(Pe,"alt","port forwarding"),_(Ci,"class","icon icon-link"),_(nl,"aria-hidden","true"),_(nl,"tabindex","-1"),_(nl,"href","#stun"),_(dl,"id","stun"),_(Kl,"href","https://ipip.kr"),_(Kl,"rel","nofollow"),_(mi,"class","icon icon-link"),_(Il,"aria-hidden","true"),_(Il,"tabindex","-1"),_(Il,"href","#turn"),_(Pl,"id","turn"),_(Di,"class","icon icon-link"),_(hl,"aria-hidden","true"),_(hl,"tabindex","-1"),_(hl,"href","#p2p-vs-sfu-vs-mcu"),_(pl,"id","p2p-vs-sfu-vs-mcu"),ir(Te.src,M2="/post_img/Networking/WebRTC/2023-01-29-23-58-14.png")||_(Te,"src",M2),_(Te,"alt","data flow diagram of each realy server"),_(Yi,"class","icon icon-link"),_(Ll,"aria-hidden","true"),_(Ll,"tabindex","-1"),_(Ll,"href","#signaling-server"),_(bl,"id","signaling-server"),ir(Ne.src,O2="/post_img/Networking/WebRTC/2023-01-30-01-11-14.png")||_(Ne,"src",O2),_(Ne,"alt","webrtc signaling process"),_(tr,"class","icon icon-link"),_(Cl,"aria-hidden","true"),_(Cl,"tabindex","-1"),_(Cl,"href","#출처"),_(Tl,"id","출처"),_(gl,"href","https://wormwlrm.github.io/2021/01/24/Introducing-WebRTC.html"),_(gl,"rel","nofollow")},m(e,v){E(e,F,v),l(F,lf),E(e,rr,v),E(e,ar,v),E(e,fr,v),E(e,or,v),E(e,G,v),l(G,q),l(q,ye),l(G,ef),E(e,sr,v),E(e,ur,v),E(e,vr,v),E(e,Q,v),l(Q,j),l(j,Be),l(Q,tf),E(e,Er,v),E(e,c,v),l(c,Me),l(Me,Oe),l(Oe,rf),l(c,af),l(c,xl),l(xl,Wl),l(Wl,ff),l(Wl,Fe),l(Fe,of),l(Wl,sf),l(xl,uf),l(xl,Ge),l(Ge,qe),l(qe,vf),l(c,Ef),l(c,Qe),l(Qe,je),l(je,_f),l(c,cf),l(c,Ze),l(Ze,ze),l(ze,df),l(c,nf),l(c,Je),l(Je,Ke),l(Ke,Pf),l(c,If),l(c,kl),l(kl,Ve),l(Ve,pf),l(kl,hf),l(kl,w),l(w,le),l(le,Xe),l(Xe,bf),l(le,Lf),l(w,Tf),l(w,ee),l(ee,Ye),l(Ye,Cf),l(ee,Nf),l(w,Uf),l(w,te),l(te,$e),l($e,Sf),l(te,Rf),E(e,_r,v),E(e,cr,v),E(e,dr,v),E(e,Z,v),l(Z,z),l(z,ge),l(Z,mf),E(e,nr,v),E(e,d,v),l(d,wl),l(wl,lt),l(lt,Af),l(wl,xf),l(wl,Dl),l(Dl,et),l(et,Wf),l(Dl,kf),l(Dl,tt),l(tt,wf),l(d,Df),l(d,Hl),l(Hl,it),l(it,Hf),l(Hl,yf),l(Hl,rt),l(rt,at),l(at,Bf),l(d,Mf),l(d,yl),l(yl,ft),l(ft,Of),l(yl,Ff),l(yl,ot),l(ot,st),l(st,Gf),l(d,qf),l(d,Bl),l(Bl,ut),l(ut,Qf),l(Bl,jf),l(Bl,D),l(D,vt),l(vt,Zf),l(D,zf),l(D,Et),l(Et,Jf),l(D,Kf),l(D,ie),l(ie,Vf),l(ie,Ml),l(Ml,_t),l(_t,Xf),l(Ml,Yf),l(Ml,ct),l(ct,$f),l(d,gf),l(d,Ol),l(Ol,dt),l(dt,lo),l(Ol,eo),l(Ol,Fl),l(Fl,nt),l(nt,to),l(Fl,io),l(Fl,Pt),l(Pt,ro),E(e,Pr,v),E(e,Ir,v),E(e,pr,v),E(e,J,v),l(J,K),l(K,It),l(J,ao),E(e,hr,v),E(e,U,v),l(U,Gl),l(Gl,pt),l(pt,fo),l(Gl,oo),l(Gl,H),l(H,ht),l(ht,so),l(H,uo),l(H,re),l(re,vo),l(re,bt),l(bt,Lt),l(Lt,Eo),l(H,_o),l(H,ae),l(ae,co),l(ae,Tt),l(Tt,Ct),l(Ct,no),l(U,Po),l(U,ql),l(ql,Nt),l(Nt,Io),l(ql,po),l(ql,Ut),l(Ut,St),l(St,ho),l(U,bo),l(U,Ql),l(Ql,Rt),l(Rt,Lo),l(Ql,To),l(Ql,y),l(y,mt),l(mt,Co),l(y,No),l(y,At),l(At,Uo),l(y,So),l(y,xt),l(xt,Ro),E(e,br,v),E(e,Lr,v),E(e,Tr,v),E(e,V,v),l(V,X),l(X,Wt),l(V,mo),E(e,Cr,v),E(e,fe,v),l(fe,oe),E(e,Nr,v),E(e,S,v),l(S,kt),l(kt,Ao),l(S,xo),l(S,wt),l(wt,Wo),l(S,ko),l(S,Dt),l(Dt,wo),E(e,Ur,v),E(e,se,v),l(se,Do),E(e,Sr,v),E(e,Rr,v),E(e,mr,v),E(e,Ar,v),E(e,Y,v),l(Y,$),l($,Ht),l(Y,Ho),E(e,xr,v),E(e,Wr,v),E(e,kr,v),E(e,g,v),l(g,ll),l(ll,yt),l(g,yo),E(e,wr,v),E(e,ue,v),l(ue,ve),E(e,Dr,v),E(e,p,v),l(p,Bt),l(Bt,Bo),l(p,Mo),l(p,Mt),l(Mt,Oo),l(p,Fo),l(p,Ot),l(Ot,Go),l(p,qo),l(p,Ee),l(Ee,Qo),l(Ee,Ft),l(Ft,Gt),l(Gt,jo),E(e,Hr,v),E(e,yr,v),E(e,Br,v),E(e,Mr,v),E(e,el,v),l(el,tl),l(tl,qt),l(el,Zo),E(e,Or,v),E(e,Fr,v),E(e,Gr,v),E(e,il,v),l(il,rl),l(rl,Qt),l(il,zo),E(e,qr,v),E(e,n,v),l(n,jt),l(jt,Zt),l(Zt,Jo),l(n,Ko),l(n,zt),l(zt,Jt),l(Jt,Vo),l(n,Xo),l(n,Kt),l(Kt,jl),l(jl,Yo),l(jl,Vt),l(Vt,$o),l(jl,go),l(n,ls),l(n,Zl),l(Zl,Xt),l(Xt,es),l(Zl,ts),l(Zl,B),l(B,Yt),l(Yt,is),l(B,rs),l(B,$t),l($t,as),l(B,fs),l(B,gt),l(gt,os),l(n,ss),l(n,zl),l(zl,li),l(li,us),l(zl,vs),l(zl,ei),l(ei,_e),l(_e,Es),l(_e,M),l(M,ti),l(ti,_s),l(M,cs),l(M,ii),l(ii,ds),l(M,ns),l(M,ri),l(ri,Ps),E(e,Qr,v),E(e,jr,v),E(e,Zr,v),E(e,al,v),l(al,fl),l(fl,ai),l(al,Is),E(e,zr,v),E(e,h,v),l(h,fi),l(fi,ps),l(h,hs),l(h,Jl),l(Jl,bs),l(Jl,oi),l(oi,Ls),l(Jl,Ts),l(h,Cs),l(h,si),l(si,Ns),l(h,Us),l(h,ui),l(ui,Ss),E(e,Jr,v),E(e,Kr,v),E(e,Vr,v),E(e,ol,v),l(ol,sl),l(sl,vi),l(ol,Rs),E(e,Xr,v),E(e,ul,v),l(ul,ce),l(ce,ms),l(ce,Ei),l(Ei,_i),l(_i,As),l(ul,xs),l(ul,de),l(de,Ws),l(de,ci),l(ci,di),l(di,ks),E(e,Yr,v),E(e,$r,v),E(e,gr,v),E(e,la,v),E(e,vl,v),l(vl,El),l(El,ni),l(vl,ws),E(e,ea,v),E(e,ta,v),E(e,ia,v),E(e,_l,v),l(_l,cl),l(cl,Pi),l(_l,Ds),E(e,ra,v),E(e,ne,v),l(ne,Pe),E(e,aa,v),E(e,R,v),l(R,Ii),l(Ii,Hs),l(R,ys),l(R,Ie),l(Ie,Bs),l(Ie,pi),l(pi,hi),l(hi,Ms),l(R,Os),l(R,pe),l(pe,Fs),l(pe,O),l(O,bi),l(bi,Gs),l(O,qs),l(O,Li),l(Li,Qs),l(O,js),l(O,Ti),l(Ti,Zs),E(e,fa,v),E(e,oa,v),E(e,sa,v),E(e,dl,v),l(dl,nl),l(nl,Ci),l(dl,zs),E(e,ua,v),E(e,b,v),l(b,Ni),l(Ni,Js),l(b,Ks),l(b,Ui),l(Ui,Vs),l(b,Xs),l(b,he),l(he,Ys),l(he,Si),l(Si,be),l(be,Kl),l(Kl,$s),l(be,gs),l(b,l1),l(b,Ri),l(Ri,e1),E(e,va,v),E(e,Ea,v),E(e,_a,v),E(e,Pl,v),l(Pl,Il),l(Il,mi),l(Pl,t1),E(e,ca,v),E(e,P,v),l(P,Ai),l(Ai,i1),l(P,r1),l(P,xi),l(xi,a1),l(P,f1),l(P,Wi),l(Wi,o1),l(P,s1),l(P,ki),l(ki,u1),l(P,v1),l(P,wi),l(wi,E1),E(e,da,v),E(e,na,v),E(e,Pa,v),E(e,pl,v),l(pl,hl),l(hl,Di),l(pl,_1),E(e,Ia,v),E(e,Le,v),l(Le,Te),E(e,pa,v),E(e,m,v),l(m,Vl),l(Vl,Hi),l(Hi,c1),l(Vl,d1),l(Vl,C),l(C,yi),l(yi,n1),l(C,P1),l(C,Bi),l(Bi,I1),l(C,p1),l(C,Mi),l(Mi,h1),l(C,b1),l(C,Oi),l(Oi,L1),l(m,T1),l(m,Xl),l(Xl,Fi),l(Fi,C1),l(Xl,N1),l(Xl,I),l(I,Gi),l(Gi,U1),l(I,S1),l(I,qi),l(qi,R1),l(I,m1),l(I,Qi),l(Qi,A1),l(I,x1),l(I,ji),l(ji,W1),l(I,k1),l(I,Zi),l(Zi,w1),l(m,D1),l(m,Yl),l(Yl,zi),l(zi,H1),l(Yl,y1),l(Yl,N),l(N,Ji),l(Ji,B1),l(N,M1),l(N,Ki),l(Ki,O1),l(N,F1),l(N,Vi),l(Vi,G1),l(N,q1),l(N,Xi),l(Xi,Q1),E(e,ha,v),E(e,ba,v),E(e,La,v),E(e,bl,v),l(bl,Ll),l(Ll,Yi),l(bl,j1),E(e,Ta,v),E(e,Ce,v),l(Ce,Ne),E(e,Ca,v),E(e,L,v),l(L,$i),l($i,Z1),l(L,z1),l(L,gi),l(gi,J1),l(L,K1),l(L,lr),l(lr,V1),l(L,X1),l(L,er),l(er,Y1),E(e,Na,v),E(e,Ua,v),E(e,Sa,v),E(e,Ra,v),E(e,Tl,v),l(Tl,Cl),l(Cl,tr),l(Tl,$1),E(e,ma,v),E(e,$l,v),l($l,g1),l($l,gl),l(gl,l2),E(e,Aa,v),E(e,xa,v),E(e,Wa,v)},p:D2,i:D2,o:D2,d(e){e&&t(F),e&&t(rr),e&&t(ar),e&&t(fr),e&&t(or),e&&t(G),e&&t(sr),e&&t(ur),e&&t(vr),e&&t(Q),e&&t(Er),e&&t(c),e&&t(_r),e&&t(cr),e&&t(dr),e&&t(Z),e&&t(nr),e&&t(d),e&&t(Pr),e&&t(Ir),e&&t(pr),e&&t(J),e&&t(hr),e&&t(U),e&&t(br),e&&t(Lr),e&&t(Tr),e&&t(V),e&&t(Cr),e&&t(fe),e&&t(Nr),e&&t(S),e&&t(Ur),e&&t(se),e&&t(Sr),e&&t(Rr),e&&t(mr),e&&t(Ar),e&&t(Y),e&&t(xr),e&&t(Wr),e&&t(kr),e&&t(g),e&&t(wr),e&&t(ue),e&&t(Dr),e&&t(p),e&&t(Hr),e&&t(yr),e&&t(Br),e&&t(Mr),e&&t(el),e&&t(Or),e&&t(Fr),e&&t(Gr),e&&t(il),e&&t(qr),e&&t(n),e&&t(Qr),e&&t(jr),e&&t(Zr),e&&t(al),e&&t(zr),e&&t(h),e&&t(Jr),e&&t(Kr),e&&t(Vr),e&&t(ol),e&&t(Xr),e&&t(ul),e&&t(Yr),e&&t($r),e&&t(gr),e&&t(la),e&&t(vl),e&&t(ea),e&&t(ta),e&&t(ia),e&&t(_l),e&&t(ra),e&&t(ne),e&&t(aa),e&&t(R),e&&t(fa),e&&t(oa),e&&t(sa),e&&t(dl),e&&t(ua),e&&t(b),e&&t(va),e&&t(Ea),e&&t(_a),e&&t(Pl),e&&t(ca),e&&t(P),e&&t(da),e&&t(na),e&&t(Pa),e&&t(pl),e&&t(Ia),e&&t(Le),e&&t(pa),e&&t(m),e&&t(ha),e&&t(ba),e&&t(La),e&&t(bl),e&&t(Ta),e&&t(Ce),e&&t(Ca),e&&t(L),e&&t(Na),e&&t(Ua),e&&t(Sa),e&&t(Ra),e&&t(Tl),e&&t(ma),e&&t($l),e&&t(Aa),e&&t(xa),e&&t(Wa)}}}const LE={title:"WebRTC에 관하여 정리해보았다",date:"2023-01-22T00:00:00.000Z",excerpt:"교내 프로젝트, 교과목, 스터디를 하며 정리한 WebRTC 관련 내용을 기록해보았습니다",categories:["WebRTC"],coverImage:"/post_img/Networking/WebRTC/cover.png",coverWidth:16,coverHeight:9,indexed:!0,exposed:!0};class TE extends PE{constructor(F){super(),IE(this,F,null,hE,pE,{})}}export{TE as default,LE as metadata};
