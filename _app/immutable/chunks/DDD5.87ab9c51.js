import{S as z3,i as Z3,s as J3,k as e,q as c,a as r,y as T,l as o,m as u,r as l,h as n,c as i,z as H,n as f,b as p,E as a,A as U,g as G,d as F,B as j,M as Z}from"./index.d78780bf.js";import{C as z}from"./CodeBlockWrapper.eeb7c0c0.js";import{I as Q3}from"./Image.605b14b5.js";function Y3(m){let k,v=`<code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>p <span class="token operator">*</span>Purchase<span class="token punctuation">)</span> <span class="token function">validateAndEnrich</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>ProductsToPurchase<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"puchase must have at least one product"</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>

    p<span class="token punctuation">.</span>total <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> p<span class="token punctuation">.</span>ProductsToPurchase <span class="token punctuation">&#123;</span>
    	p<span class="token punctuation">.</span>total <span class="token operator">+=</span> v<span class="token punctuation">.</span>BasePrice
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">if</span> p<span class="token punctuation">.</span>total <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>
    	<span class="token keyword">return</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"total price must be greater than 0"</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>

    p<span class="token punctuation">.</span>id <span class="token operator">=</span> uuid<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    p<span class="token punctuation">.</span>timeOfPurchase <span class="token operator">=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token boolean">nil</span>

<span class="token punctuation">&#125;</span></code>`;return{c(){k=e("pre"),this.h()},l(d){k=o(d,"PRE",{class:!0});var E=u(k);E.forEach(n),this.h()},h(){f(k,"class","language-go")},m(d,E){p(d,k,E),k.innerHTML=v},p:Z,d(d){d&&n(k)}}}function g3(m){let k,v=`<code class="language-go"><span class="token keyword">type</span> CardChargeService <span class="token keyword">interface</span> <span class="token punctuation">&#123;</span>
	<span class="token function">ChargeCard</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> amount coffeeco<span class="token punctuation">.</span>Money<span class="token punctuation">,</span> cardToken <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">type</span> Service <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
	cardService  CardChargeService
	purchaseRepo Repository
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>s Service<span class="token punctuation">)</span> <span class="token function">CompletePurchase</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> purchase <span class="token operator">*</span>Purchase<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">&#123;</span>
	err <span class="token operator">:=</span> purchase<span class="token punctuation">.</span><span class="token function">validateAndEnrich</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> err
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">switch</span> purchase<span class="token punctuation">.</span>PaymentMeans <span class="token punctuation">&#123;</span>
	<span class="token keyword">case</span> payment<span class="token punctuation">.</span>MEANS_CARD<span class="token punctuation">:</span>
		err <span class="token operator">:=</span> s<span class="token punctuation">.</span>cardService<span class="token punctuation">.</span><span class="token function">ChargeCard</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> purchase<span class="token punctuation">.</span>total<span class="token punctuation">,</span> <span class="token operator">*</span>purchase<span class="token punctuation">.</span>cardToken<span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">return</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"card charge is failed"</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#125;</span>

	<span class="token keyword">case</span> payment<span class="token punctuation">.</span>MEANS_CASH<span class="token punctuation">:</span>
		<span class="token comment">// do nothing</span>

	<span class="token keyword">default</span><span class="token punctuation">:</span>
		<span class="token keyword">return</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"unknown payment means"</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>

	err <span class="token operator">=</span> s<span class="token punctuation">.</span>purchaseRepo<span class="token punctuation">.</span><span class="token function">Store</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token operator">*</span>purchase<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"failed to store purchase"</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">&#125;</span></code>`;return{c(){k=e("pre"),this.h()},l(d){k=o(d,"PRE",{class:!0});var E=u(k);E.forEach(n),this.h()},h(){f(k,"class","language-go")},m(d,E){p(d,k,E),k.innerHTML=v},p:Z,d(d){d&&n(k)}}}function sv(m){let k,v=`<code class="language-go"><span class="token keyword">type</span> MongoRepository <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
	purchases <span class="token operator">*</span>mongo<span class="token punctuation">.</span>Collection
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">NewMongoRepo</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> connectionString <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>MongoRepository<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	client<span class="token punctuation">,</span> err <span class="token operator">:=</span> mongo<span class="token punctuation">.</span><span class="token function">Connect</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> options<span class="token punctuation">.</span><span class="token function">Client</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ApplyURI</span><span class="token punctuation">(</span>connectionString<span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"failed to create a mongo client: %w"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>

	purchases <span class="token operator">:=</span> client<span class="token punctuation">.</span><span class="token function">Database</span><span class="token punctuation">(</span><span class="token string">"coffeeco"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Collection</span><span class="token punctuation">(</span><span class="token string">"purchases"</span><span class="token punctuation">)</span>

	<span class="token keyword">return</span> <span class="token operator">&amp;</span>MongoRepository<span class="token punctuation">&#123;</span>
		purchases<span class="token punctuation">:</span> purchases<span class="token punctuation">,</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>
<span class="token punctuation">&#125;</span></code>`;return{c(){k=e("pre"),this.h()},l(d){k=o(d,"PRE",{class:!0});var E=u(k);E.forEach(n),this.h()},h(){f(k,"class","language-go")},m(d,E){p(d,k,E),k.innerHTML=v},p:Z,d(d){d&&n(k)}}}function nv(m){let k,v=`<code class="language-go"><span class="token keyword">type</span> mongoPurchase <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
	id                 uuid<span class="token punctuation">.</span>UUID          <span class="token string">&#96;bson:"ID"&#96;</span>
	store              store<span class="token punctuation">.</span>Store        <span class="token string">&#96;bson:"Store"&#96;</span>
	productsToPurchase <span class="token punctuation">[</span><span class="token punctuation">]</span>coffeeco<span class="token punctuation">.</span>Product <span class="token string">&#96;bson:"product_purchased"&#96;</span>
	total              <span class="token builtin">int64</span>              <span class="token string">&#96;bson:"purchase_total"&#96;</span>
	paymentMeans       payment<span class="token punctuation">.</span>Means      <span class="token string">&#96;bson:"payment_means"&#96;</span>
	timeOfPurchase     time<span class="token punctuation">.</span>Time          <span class="token string">&#96;bson:"created_at"&#96;</span>
	cardToken          <span class="token operator">*</span><span class="token builtin">string</span>            <span class="token string">&#96;bson:"card_token"&#96;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">toMongoPurchase</span><span class="token punctuation">(</span>p Purchase<span class="token punctuation">)</span> mongoPurchase <span class="token punctuation">&#123;</span>
	<span class="token keyword">return</span> mongoPurchase<span class="token punctuation">&#123;</span>
		id<span class="token punctuation">:</span>                 p<span class="token punctuation">.</span>id<span class="token punctuation">,</span>
		store<span class="token punctuation">:</span>              p<span class="token punctuation">.</span>Store<span class="token punctuation">,</span>
		productsToPurchase<span class="token punctuation">:</span> p<span class="token punctuation">.</span>ProductsToPurchase<span class="token punctuation">,</span>
		total<span class="token punctuation">:</span>              <span class="token function">int64</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>total<span class="token punctuation">)</span><span class="token punctuation">,</span>
		paymentMeans<span class="token punctuation">:</span>       p<span class="token punctuation">.</span>PaymentMeans<span class="token punctuation">,</span>
		timeOfPurchase<span class="token punctuation">:</span>     p<span class="token punctuation">.</span>timeOfPurchase<span class="token punctuation">,</span>
		cardToken<span class="token punctuation">:</span>          p<span class="token punctuation">.</span>cardToken<span class="token punctuation">,</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`;return{c(){k=e("pre"),this.h()},l(d){k=o(d,"PRE",{class:!0});var E=u(k);E.forEach(n),this.h()},h(){f(k,"class","language-go")},m(d,E){p(d,k,E),k.innerHTML=v},p:Z,d(d){d&&n(k)}}}function av(m){let k,v=`<code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>s StripeService<span class="token punctuation">)</span> <span class="token function">ChargeCard</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> amount coffeeco<span class="token punctuation">.</span>Money<span class="token punctuation">,</span> cardToken <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">&#123;</span>
	params <span class="token operator">:=</span> <span class="token operator">&amp;</span>stripe<span class="token punctuation">.</span>ChargeParams<span class="token punctuation">&#123;</span>
		Amount<span class="token punctuation">:</span>   stripe<span class="token punctuation">.</span><span class="token function">Int64</span><span class="token punctuation">(</span><span class="token function">int64</span><span class="token punctuation">(</span>amount<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
		Currency<span class="token punctuation">:</span> stripe<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token function">string</span><span class="token punctuation">(</span>stripe<span class="token punctuation">.</span>CurrencyKRW<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
		Source<span class="token punctuation">:</span>   <span class="token operator">&amp;</span>stripe<span class="token punctuation">.</span>PaymentSourceSourceParams<span class="token punctuation">&#123;</span>Token<span class="token punctuation">:</span> stripe<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span>cardToken<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
	<span class="token punctuation">&#125;</span>

	<span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> charge<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"failed to create a charge: %w"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">&#125;</span></code>`;return{c(){k=e("pre"),this.h()},l(d){k=o(d,"PRE",{class:!0});var E=u(k);E.forEach(n),this.h()},h(){f(k,"class","language-go")},m(d,E){p(d,k,E),k.innerHTML=v},p:Z,d(d){d&&n(k)}}}function tv(m){let k,v=`<code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>s Service<span class="token punctuation">)</span> <span class="token function">CompletePurchase</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> purchase <span class="token operator">*</span>Purchase<span class="token punctuation">,</span> coffeeBuxCard <span class="token operator">*</span>membership<span class="token punctuation">.</span>CoffeeBux<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">&#123;</span>
	err <span class="token operator">:=</span> purchase<span class="token punctuation">.</span><span class="token function">validateAndEnrich</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> err
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">switch</span> purchase<span class="token punctuation">.</span>PaymentMeans <span class="token punctuation">&#123;</span>
	<span class="token keyword">case</span> payment<span class="token punctuation">.</span>MEANS_CARD<span class="token punctuation">:</span>
		err <span class="token operator">:=</span> s<span class="token punctuation">.</span>cardService<span class="token punctuation">.</span><span class="token function">ChargeCard</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> purchase<span class="token punctuation">.</span>total<span class="token punctuation">,</span> <span class="token operator">*</span>purchase<span class="token punctuation">.</span>cardToken<span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">return</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"card charge is failed"</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#125;</span>

	<span class="token keyword">case</span> payment<span class="token punctuation">.</span>MEANS_CASH<span class="token punctuation">:</span>
		<span class="token comment">// do nothing</span>

	<span class="token keyword">default</span><span class="token punctuation">:</span>
		<span class="token keyword">return</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"unknown payment means"</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>

	err <span class="token operator">=</span> s<span class="token punctuation">.</span>purchaseRepo<span class="token punctuation">.</span><span class="token function">Store</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token operator">*</span>purchase<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"failed to store purchase"</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">if</span> coffeeBuxCard <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		coffeeBuxCard<span class="token punctuation">.</span><span class="token function">AddStamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">&#125;</span></code>`;return{c(){k=e("pre"),this.h()},l(d){k=o(d,"PRE",{class:!0});var E=u(k);E.forEach(n),this.h()},h(){f(k,"class","language-go")},m(d,E){p(d,k,E),k.innerHTML=v},p:Z,d(d){d&&n(k)}}}function pv(m){let k,v=`<code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>CoffeeBux<span class="token punctuation">)</span> <span class="token function">Pay</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> purchases <span class="token punctuation">[</span><span class="token punctuation">]</span>purchase<span class="token punctuation">.</span>Purchase<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">&#123;</span>
	lp <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>purchases<span class="token punctuation">)</span>
	<span class="token keyword">if</span> lp <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"nothing to buy"</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">if</span> c<span class="token punctuation">.</span>FreeDrinksAvailable <span class="token operator">&lt;</span> lp <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"not enough free drinks available, %d requestsed, %d available"</span><span class="token punctuation">,</span> lp<span class="token punctuation">,</span> c<span class="token punctuation">.</span>FreeDrinksAvailable<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>

	c<span class="token punctuation">.</span>FreeDrinksAvailable <span class="token operator">-=</span> lp
	<span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">&#125;</span></code>`;return{c(){k=e("pre"),this.h()},l(d){k=o(d,"PRE",{class:!0});var E=u(k);E.forEach(n),this.h()},h(){f(k,"class","language-go")},m(d,E){p(d,k,E),k.innerHTML=v},p:Z,d(d){d&&n(k)}}}function ev(m){let k,v=`<code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>s Service<span class="token punctuation">)</span> <span class="token function">CompletePurchase</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> purchase <span class="token operator">*</span>Purchase<span class="token punctuation">,</span> coffeeBuxCard <span class="token operator">*</span>membership<span class="token punctuation">.</span>CoffeeBux<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">&#123;</span>
	err <span class="token operator">:=</span> purchase<span class="token punctuation">.</span><span class="token function">validateAndEnrich</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> err
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">switch</span> purchase<span class="token punctuation">.</span>PaymentMeans <span class="token punctuation">&#123;</span>
	<span class="token keyword">case</span> payment<span class="token punctuation">.</span>MEANS_CARD<span class="token punctuation">:</span>
		err <span class="token operator">:=</span> s<span class="token punctuation">.</span>cardService<span class="token punctuation">.</span><span class="token function">ChargeCard</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> purchase<span class="token punctuation">.</span>total<span class="token punctuation">,</span> <span class="token operator">*</span>purchase<span class="token punctuation">.</span>cardToken<span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">return</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"card charge is failed"</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#125;</span>

	<span class="token keyword">case</span> payment<span class="token punctuation">.</span>MEANS_CASH<span class="token punctuation">:</span>
	<span class="token comment">// do nothing</span>

	<span class="token keyword">case</span> payment<span class="token punctuation">.</span>MEANS_COFFEEBUX<span class="token punctuation">:</span>
		err <span class="token operator">:=</span> coffeeBuxCard<span class="token punctuation">.</span><span class="token function">Pay</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> purchase<span class="token punctuation">.</span>ProductsToPurchase<span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"failed to charge membership card: %w"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
		<span class="token punctuation">&#125;</span>

	<span class="token keyword">default</span><span class="token punctuation">:</span>
		<span class="token keyword">return</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"unknown payment means"</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>

	err <span class="token operator">=</span> s<span class="token punctuation">.</span>purchaseRepo<span class="token punctuation">.</span><span class="token function">Store</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token operator">*</span>purchase<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"failed to store purchase"</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">if</span> coffeeBuxCard <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		coffeeBuxCard<span class="token punctuation">.</span><span class="token function">AddStamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">&#125;</span></code>`;return{c(){k=e("pre"),this.h()},l(d){k=o(d,"PRE",{class:!0});var E=u(k);E.forEach(n),this.h()},h(){f(k,"class","language-go")},m(d,E){p(d,k,E),k.innerHTML=v},p:Z,d(d){d&&n(k)}}}function ov(m){let k,v=`<code class="language-go"><span class="token keyword">package</span> store

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">"context"</span>
	<span class="token string">"errors"</span>
	<span class="token string">"fmt"</span>
	<span class="token string">"github.com/google/uuid"</span>
	<span class="token string">"go.mongodb.org/mongo-driver/bson"</span>
	<span class="token string">"go.mongodb.org/mongo-driver/mongo"</span>
	<span class="token string">"go.mongodb.org/mongo-driver/mongo/options"</span>
<span class="token punctuation">)</span>

<span class="token keyword">var</span> ErrNoDiscount <span class="token operator">=</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"no discount for store"</span><span class="token punctuation">)</span>

<span class="token keyword">type</span> Repository <span class="token keyword">interface</span> <span class="token punctuation">&#123;</span>
	<span class="token function">GetStoreDiscount</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> storeId uuid<span class="token punctuation">.</span>UUID<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">type</span> MongoRepository <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
	storeDiscounts <span class="token operator">*</span>mongo<span class="token punctuation">.</span>Collection
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">NewMongoRepo</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> connectionString <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>MongoRepository<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	client<span class="token punctuation">,</span> err <span class="token operator">:=</span> mongo<span class="token punctuation">.</span><span class="token function">Connect</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> options<span class="token punctuation">.</span><span class="token function">Client</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ApplyURI</span><span class="token punctuation">(</span>connectionString<span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"failed to create a mongo client: %w"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>

	discounts <span class="token operator">:=</span> client<span class="token punctuation">.</span><span class="token function">Database</span><span class="token punctuation">(</span><span class="token string">"coffeeco"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Collection</span><span class="token punctuation">(</span><span class="token string">"store_discounts"</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span> <span class="token operator">&amp;</span>MongoRepository<span class="token punctuation">&#123;</span>
		storeDiscounts<span class="token punctuation">:</span> discounts<span class="token punctuation">,</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>m MongoRepository<span class="token punctuation">)</span> <span class="token function">GetStoreDiscount</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> storeId uuid<span class="token punctuation">.</span>UUID<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">float32</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">var</span> discountRate <span class="token builtin">float32</span>
	err <span class="token operator">:=</span> m<span class="token punctuation">.</span>storeDiscounts<span class="token punctuation">.</span><span class="token function">FindOne</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> bson<span class="token punctuation">.</span>D<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token string">"store_id"</span><span class="token punctuation">,</span> storeId<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Decode</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>discountRate<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">if</span> errors<span class="token punctuation">.</span><span class="token function">Is</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> mongo<span class="token punctuation">.</span>ErrNoDocuments<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">,</span> ErrNoDiscount
		<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"failed to get store discount: %w"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">return</span> discountRate<span class="token punctuation">,</span> <span class="token boolean">nil</span>
<span class="token punctuation">&#125;</span></code>`;return{c(){k=e("pre"),this.h()},l(d){k=o(d,"PRE",{class:!0});var E=u(k);E.forEach(n),this.h()},h(){f(k,"class","language-go")},m(d,E){p(d,k,E),k.innerHTML=v},p:Z,d(d){d&&n(k)}}}function cv(m){let k,v=`<code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>s Service<span class="token punctuation">)</span> <span class="token function">CompletePurchase</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> storeId uuid<span class="token punctuation">.</span>UUID<span class="token punctuation">,</span> purchase <span class="token operator">*</span>Purchase<span class="token punctuation">,</span> coffeeBuxCard <span class="token operator">*</span>membership<span class="token punctuation">.</span>CoffeeBux<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">&#123;</span>
	err <span class="token operator">:=</span> purchase<span class="token punctuation">.</span><span class="token function">validateAndEnrich</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> err
	<span class="token punctuation">&#125;</span>

	discount<span class="token punctuation">,</span> err <span class="token operator">:=</span> s<span class="token punctuation">.</span>storeService<span class="token punctuation">.</span><span class="token function">GetStoreSpecificDiscount</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> storeId<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>errors<span class="token punctuation">.</span><span class="token function">Is</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> store<span class="token punctuation">.</span>ErrNoDiscount<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"failed to get discount: %w"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>

	purchasePrice <span class="token operator">:=</span> purchase<span class="token punctuation">.</span>total
	<span class="token keyword">if</span> discount <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>
		purchasePrice <span class="token operator">*=</span> coffeeco<span class="token punctuation">.</span><span class="token function">Money</span><span class="token punctuation">(</span><span class="token number">100</span> <span class="token operator">-</span> discount<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">switch</span> purchase<span class="token punctuation">.</span>PaymentMeans <span class="token punctuation">&#123;</span>
	<span class="token keyword">case</span> payment<span class="token punctuation">.</span>MEANS_CARD<span class="token punctuation">:</span>
		err <span class="token operator">:=</span> s<span class="token punctuation">.</span>cardService<span class="token punctuation">.</span><span class="token function">ChargeCard</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> purchase<span class="token punctuation">.</span>total<span class="token punctuation">,</span> <span class="token operator">*</span>purchase<span class="token punctuation">.</span>cardToken<span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">return</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"card charge is failed"</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#125;</span>

	<span class="token keyword">case</span> payment<span class="token punctuation">.</span>MEANS_CASH<span class="token punctuation">:</span>
	<span class="token comment">// do nothing</span>

	<span class="token keyword">case</span> payment<span class="token punctuation">.</span>MEANS_COFFEEBUX<span class="token punctuation">:</span>
		err <span class="token operator">:=</span> coffeeBuxCard<span class="token punctuation">.</span><span class="token function">Pay</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> purchase<span class="token punctuation">.</span>ProductsToPurchase<span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"failed to charge membership card: %w"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
		<span class="token punctuation">&#125;</span>

	<span class="token keyword">default</span><span class="token punctuation">:</span>
		<span class="token keyword">return</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"unknown payment means"</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>

	err <span class="token operator">=</span> s<span class="token punctuation">.</span>purchaseRepo<span class="token punctuation">.</span><span class="token function">Store</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token operator">*</span>purchase<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"failed to store purchase"</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">if</span> coffeeBuxCard <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		coffeeBuxCard<span class="token punctuation">.</span><span class="token function">AddStamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">&#125;</span></code>`;return{c(){k=e("pre"),this.h()},l(d){k=o(d,"PRE",{class:!0});var E=u(k);E.forEach(n),this.h()},h(){f(k,"class","language-go")},m(d,E){p(d,k,E),k.innerHTML=v},p:Z,d(d){d&&n(k)}}}function lv(m){let k,v=`<code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>s Service<span class="token punctuation">)</span> <span class="token function">CompletePurchase</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> storeId uuid<span class="token punctuation">.</span>UUID<span class="token punctuation">,</span> purchase <span class="token operator">*</span>Purchase<span class="token punctuation">,</span> coffeeBuxCard <span class="token operator">*</span>membership<span class="token punctuation">.</span>CoffeeBux<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">&#123;</span>
	err <span class="token operator">:=</span> purchase<span class="token punctuation">.</span><span class="token function">validateAndEnrich</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> err
	<span class="token punctuation">&#125;</span>

	err <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">calculateStoreSpecificDiscount</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> storeId<span class="token punctuation">,</span> purchase<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> err
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">switch</span> purchase<span class="token punctuation">.</span>PaymentMeans <span class="token punctuation">&#123;</span>
	<span class="token keyword">case</span> payment<span class="token punctuation">.</span>MEANS_CARD<span class="token punctuation">:</span>
		err <span class="token operator">:=</span> s<span class="token punctuation">.</span>cardService<span class="token punctuation">.</span><span class="token function">ChargeCard</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> purchase<span class="token punctuation">.</span>total<span class="token punctuation">,</span> <span class="token operator">*</span>purchase<span class="token punctuation">.</span>cardToken<span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">return</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"card charge is failed"</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#125;</span>

	<span class="token keyword">case</span> payment<span class="token punctuation">.</span>MEANS_CASH<span class="token punctuation">:</span>
	<span class="token comment">// do nothing</span>

	<span class="token keyword">case</span> payment<span class="token punctuation">.</span>MEANS_COFFEEBUX<span class="token punctuation">:</span>
		err <span class="token operator">:=</span> coffeeBuxCard<span class="token punctuation">.</span><span class="token function">Pay</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> purchase<span class="token punctuation">.</span>ProductsToPurchase<span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"failed to charge membership card: %w"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
		<span class="token punctuation">&#125;</span>

	<span class="token keyword">default</span><span class="token punctuation">:</span>
		<span class="token keyword">return</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"unknown payment type"</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>

	err <span class="token operator">=</span> s<span class="token punctuation">.</span>purchaseRepo<span class="token punctuation">.</span><span class="token function">Store</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token operator">*</span>purchase<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"failed to store purchase"</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">if</span> coffeeBuxCard <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		coffeeBuxCard<span class="token punctuation">.</span><span class="token function">AddStamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>Service<span class="token punctuation">)</span> <span class="token function">calculateStoreSpecificDiscount</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> storeId uuid<span class="token punctuation">.</span>UUID<span class="token punctuation">,</span> purchase <span class="token operator">*</span>Purchase<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">&#123;</span>
	discount<span class="token punctuation">,</span> err <span class="token operator">:=</span> s<span class="token punctuation">.</span>storeService<span class="token punctuation">.</span><span class="token function">GetStoreSpecificDiscount</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> storeId<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>errors<span class="token punctuation">.</span><span class="token function">Is</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> store<span class="token punctuation">.</span>ErrNoDiscount<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"failed to get discount: %w"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>

	purchasePrice <span class="token operator">:=</span> purchase<span class="token punctuation">.</span>total
	<span class="token keyword">if</span> discount <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>
		purchase<span class="token punctuation">.</span>total <span class="token operator">=</span> purchasePrice <span class="token operator">*</span> coffeeco<span class="token punctuation">.</span><span class="token function">Money</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token operator">-</span>discount<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">&#125;</span></code>`;return{c(){k=e("pre"),this.h()},l(d){k=o(d,"PRE",{class:!0});var E=u(k);E.forEach(n),this.h()},h(){f(k,"class","language-go")},m(d,E){p(d,k,E),k.innerHTML=v},p:Z,d(d){d&&n(k)}}}function uv(m){let k,v,d,E,we,ye,_s,bs,Ua,ou,Ce,De,Pe,Vn,cu,$e,Xn,lu,Se,J,Ga,uu,ru,Fa,iu,ku,ja,fu,xe,qn,du,he,y,Ka,Eu,vu,Va,mu,_u,Xa,bu,wu,qa,yu,Cu,Wa,Du,Re,Wn,Pu,Me,Oe,Be,Ae,ws,ys,za,$u,Ie,Q,Su,Za,xu,hu,Ja,Ru,Mu,Le,zn,Ou,Ne,Cs,Bu,Qa,Au,Iu,Te,Zn,Lu,He,Ue,Ge,Jn,Nu,Fe,Y,Qn,Ya,Tu,Hu,Uu,Yn,ga,Gu,Fu,ju,gn,st,Ku,Vu,je,sa,Xu,Ke,h,nt,qu,Wu,at,zu,Zu,tt,Ju,Qu,pt,Yu,Ve,na,gu,Xe,_,et,sr,nr,ot,ar,tr,ct,pr,er,lt,or,cr,ut,lr,ur,rt,rr,qe,aa,ir,We,ze,Ze,Je,Ds,Ps,it,kr,Qe,Ye,ge,ta,fr,so,_n,l3=`<code class="language-bash">$ tree
<span class="token builtin class-name">.</span>
├── go.mod
└── internal</code>`,no,g,dr,kt,Er,vr,ft,mr,_r,ao,$s,Ss,dt,br,to,ss,wr,Et,yr,Cr,vt,Dr,Pr,po,ks,mt,$r,Sr,_t,xr,hr,eo,bn,u3=`<code class="language-go"><span class="token keyword">package</span> coffeeco

<span class="token keyword">import</span> <span class="token string">"github.com/google/uuid"</span>

<span class="token keyword">type</span> CoffeeLover <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
	ID           uuid<span class="token punctuation">.</span>UUID
	FirstName    <span class="token builtin">string</span>
	LastName     <span class="token builtin">string</span>
	EmailAddress <span class="token builtin">string</span>
<span class="token punctuation">&#125;</span></code>`,oo,K,bt,Rr,Mr,wt,Or,Br,yt,Ar,Ir,co,lo,uo,C,Lr,Ct,Nr,Tr,Dt,Hr,Ur,Pt,Gr,Fr,$t,jr,Kr,ro,wn,r3=`<code class="language-go"><span class="token keyword">package</span> store

<span class="token keyword">import</span> <span class="token string">"github.com/google/uuid"</span>

<span class="token keyword">type</span> Store <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
	ID       uuid<span class="token punctuation">.</span>UUID
	Location <span class="token builtin">string</span>
<span class="token punctuation">&#125;</span></code>`,io,pa,Vr,ko,fo,Eo,ea,Xr,vo,oa,qr,mo,R,St,Wr,zr,xt,Zr,Jr,ht,Qr,Yr,Rt,gr,_o,fs,Mt,si,ni,Ot,ai,ti,bo,yn,i3=`<code class="language-go"><span class="token keyword">package</span> coffeeco

<span class="token keyword">type</span> Money <span class="token operator">=</span> <span class="token builtin">int</span>

<span class="token keyword">type</span> Product <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
	ItemName  <span class="token builtin">string</span>
	BasePrice Money
<span class="token punctuation">&#125;</span></code>`,wo,yo,Co,xs,pi,Bt,ei,oi,Do,Cn,k3=`<code class="language-go"><span class="token keyword">package</span> store

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">"github.com/google/uuid"</span>
	coffeeco <span class="token string">"github.com/jhseoeo/Golang-DDD/chapter5/internal"</span>
<span class="token punctuation">)</span>

<span class="token keyword">type</span> Store <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
	ID             uuid<span class="token punctuation">.</span>UUID
	Location       <span class="token builtin">string</span>
	ProductForSale coffeeco<span class="token punctuation">.</span>Product
<span class="token punctuation">&#125;</span></code>`,Po,$o,So,ca,ci,xo,w,At,li,ui,It,ri,ii,Lt,ki,fi,Nt,di,Ei,Tt,vi,mi,ho,Dn,f3=`<code class="language-go"><span class="token keyword">package</span> payment

<span class="token keyword">type</span> Means <span class="token builtin">string</span>

<span class="token keyword">const</span> <span class="token punctuation">(</span>
	MEANS_CARD      <span class="token operator">=</span> <span class="token string">"card"</span>
	MEANS_CASH      <span class="token operator">=</span> <span class="token string">"cash"</span>
	MEANS_COFFEEBUX <span class="token operator">=</span> <span class="token string">"coffeebux"</span>
<span class="token punctuation">)</span>

<span class="token keyword">type</span> CardDetails <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
	cardToken <span class="token builtin">string</span>
<span class="token punctuation">&#125;</span></code>`,Ro,M,_i,Ht,bi,wi,Ut,yi,Ci,Gt,Di,Pi,Mo,hs,$i,Ft,Si,xi,Oo,Bo,Ao,la,hi,Io,P,jt,Ri,Mi,Kt,Oi,Bi,Vt,Ai,Ii,Xt,Li,Ni,Lo,Pn,d3=`<code class="language-go"><span class="token keyword">package</span> purchase

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">"github.com/google/uuid"</span>
	coffeeco <span class="token string">"github.com/jhseoeo/Golang-DDD/chapter5/internal"</span>
	<span class="token string">"github.com/jhseoeo/Golang-DDD/chapter5/internal/payment"</span>
	<span class="token string">"github.com/jhseoeo/Golang-DDD/chapter5/internal/store"</span>
	<span class="token string">"time"</span>
<span class="token punctuation">)</span>

<span class="token keyword">type</span> Purchase <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
	id                 uuid<span class="token punctuation">.</span>UUID
	Store              store<span class="token punctuation">.</span>Store
	ProductsToPurchase <span class="token punctuation">[</span><span class="token punctuation">]</span>coffeeco<span class="token punctuation">.</span>Product
	total              coffeeco<span class="token punctuation">.</span>Money
	PaymentMeans       payment<span class="token punctuation">.</span>Means
	timeOfPurchase     time<span class="token punctuation">.</span>Time
	cardToken          <span class="token operator">*</span><span class="token builtin">string</span>
<span class="token punctuation">&#125;</span></code>`,No,$n,qt,Ti,Hi,To,Ho,Uo,D,Ui,Wt,Gi,Fi,zt,ji,Ki,Zt,Vi,Xi,Jt,qi,Wi,Go,Sn,E3=`<code class="language-go"><span class="token keyword">package</span> membership

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">"github.com/google/uuid"</span>
	coffeeco <span class="token string">"github.com/jhseoeo/Golang-DDD/chapter5/internal"</span>
	<span class="token string">"github.com/jhseoeo/Golang-DDD/chapter5/internal/store"</span>
<span class="token punctuation">)</span>

<span class="token keyword">type</span> CoffeeBux <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
	ID                                    uuid<span class="token punctuation">.</span>UUID
	store                                 store<span class="token punctuation">.</span>Store
	coffeeLover                           coffeeco<span class="token punctuation">.</span>CoffeeLover
	FreeDrinksAvailable                   <span class="token builtin">int</span>
	RemainingDrinkPurchasesUntilFreeDrink <span class="token builtin">int</span>
<span class="token punctuation">&#125;</span></code>`,Fo,jo,Ko,ua,zi,Vo,xn,v3=`<code class="language-bash"><span class="token builtin class-name">.</span>
├── go.mod
├── go.sum
└── internal
    ├── coffeelover.go
    ├── membership
    │   └── coffeebux.go
    ├── payment
    │   └── means.go
    ├── product.go
    ├── purchase
    │   └── purchase.go
    └── store
        └── store.go</code>`,Xo,qo,Wo,zo,Rs,Ms,Qt,Zi,Zo,Os,Ji,Yt,Qi,Yi,Jo,ns,gt,gi,sk,sp,nk,ak,np,tk,Qo,Bs,pk,ap,ek,ok,Yo,As,go,Is,ck,tp,lk,uk,sc,Ls,nc,O,rk,pp,ik,kk,ep,fk,dk,op,Ek,vk,ac,tc,pc,V,cp,mk,_k,lp,bk,wk,up,yk,Ck,ec,as,Dk,rp,Pk,$k,ip,Sk,xk,oc,hn,m3=`<code class="language-go"><span class="token keyword">package</span> purchase

<span class="token keyword">import</span> <span class="token string">"context"</span>

<span class="token keyword">type</span> Repository <span class="token keyword">interface</span> <span class="token punctuation">&#123;</span>
	<span class="token function">Store</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> purchase Purchase<span class="token punctuation">)</span> <span class="token builtin">error</span>
<span class="token punctuation">&#125;</span></code>`,cc,ra,hk,lc,ia,Rk,uc,Rn,_3=`<code class="language-bash"><span class="token builtin class-name">.</span>
├── go.mod
├── go.sum
└── internal
    ├── coffeelover.go
    ├── membership
    │   └── coffeebux.go
    ├── payment
    │   └── means.go
    ├── product.go
    ├── purchase
    │   ├── purchase.go
    │   └── repository.go
    └── store
        └── store.go</code>`,rc,ic,kc,fc,Ns,Ts,kp,Mk,dc,ka,Ok,Ec,Mn,b3='<code class="language-bash">go get go.mongodb.org/mongo-driver/mongo</code>',vc,ts,Bk,fp,Ak,Ik,dp,Lk,Nk,mc,Hs,_c,ps,Tk,Ep,Hk,Uk,vp,Gk,Fk,bc,On,w3=`<code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>mr <span class="token operator">*</span>MongoRepository<span class="token punctuation">)</span> <span class="token function">Store</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> purchase Purchase<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">&#123;</span>
	mongoP <span class="token operator">:=</span> <span class="token function">toMongoPurchase</span><span class="token punctuation">(</span>purchase<span class="token punctuation">)</span>
	<span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> mr<span class="token punctuation">.</span>purchases<span class="token punctuation">.</span><span class="token function">InsertOne</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> mongoP<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"failed to persist purchase: %w"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">&#125;</span></code>`,wc,b,jk,mp,Kk,Vk,_p,Xk,qk,bp,Wk,zk,wp,Zk,Jk,yp,Qk,Yk,yc,B,gk,Cp,sf,nf,Dp,af,tf,Pp,pf,ef,Cc,Us,Dc,fa,of,Pc,da,cf,$c,Bn,y3=`<code class="language-bash"><span class="token builtin class-name">.</span>
├── go.mod
├── go.sum
└── internal
    ├── coffeelover.go
    ├── membership
    │   └── coffeebux.go
    ├── payment
    │   └── means.go
    ├── product.go
    ├── purchase
    │   ├── purchase.go
    │   └── repository.go
    └── store
        └── store.go</code>`,Sc,xc,hc,Rc,Gs,Fs,$p,lf,Mc,js,uf,Sp,rf,kf,Oc,Ea,ff,Bc,An,C3='<code class="language-bash">go get github.com/stripe/stripe-go/v73</code>',Ac,va,df,Ic,es,Ef,xp,vf,mf,hp,_f,bf,Lc,In,D3=`<code class="language-go"><span class="token keyword">package</span> payment

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">"errors"</span>
	<span class="token string">"github.com/stripe/stripe-go/v73/client"</span>
<span class="token punctuation">)</span>

<span class="token keyword">type</span> StripeService <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
	stripeClient <span class="token operator">*</span>client<span class="token punctuation">.</span>API
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">NewStripeService</span><span class="token punctuation">(</span>apiKey <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>StripeService<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> apiKey <span class="token operator">==</span> <span class="token string">""</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"API key cannot be nil"</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>

	sc <span class="token operator">:=</span> <span class="token operator">&amp;</span>client<span class="token punctuation">.</span>API<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
	sc<span class="token punctuation">.</span><span class="token function">Init</span><span class="token punctuation">(</span>apiKey<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span> <span class="token operator">&amp;</span>StripeService<span class="token punctuation">&#123;</span>stripeClient<span class="token punctuation">:</span> sc<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>
<span class="token punctuation">&#125;</span></code>`,Nc,os,wf,Rp,yf,Cf,Mp,Df,Pf,Tc,Ks,Hc,ma,$f,Uc,Gc,Fc,jc,Vs,Xs,Op,Sf,Kc,Vc,Xc,_a,xf,qc,qs,Ws,Bp,hf,Wc,zs,Rf,Ap,Mf,Of,zc,Ln,P3=`<code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>CoffeeBux<span class="token punctuation">)</span> <span class="token function">AddStamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> c<span class="token punctuation">.</span>RemainingDrinkPurchasesUntilFreeDrink <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">&#123;</span>
		c<span class="token punctuation">.</span>RemainingDrinkPurchasesUntilFreeDrink <span class="token operator">=</span> <span class="token number">10</span>
		c<span class="token punctuation">.</span>FreeDrinksAvailable <span class="token operator">+=</span> <span class="token number">1</span>
	<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
		c<span class="token punctuation">.</span>RemainingDrinkPurchasesUntilFreeDrink<span class="token operator">--</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,Zc,$,Ip,Bf,Af,Lp,If,Lf,Np,Nf,Tf,Tp,Hf,Uf,Jc,Zs,Qc,S,Hp,Gf,Ff,Up,jf,Kf,Gp,Vf,Xf,Fp,qf,Wf,Yc,gc,sl,cs,zf,jp,Zf,Jf,Kp,Qf,Yf,nl,Js,al,ba,gf,tl,pl,el,A,s1,Vp,n1,a1,Xp,t1,p1,qp,e1,o1,ol,Qs,cl,Ys,c1,Wp,l1,u1,ll,ul,rl,il,gs,sn,zp,r1,kl,ls,i1,Zp,k1,f1,Jp,d1,E1,fl,nn,dl,wa,v1,El,X,Qp,m1,_1,Yp,b1,w1,gp,y1,C1,vl,ml,_l,us,D1,se,P1,$1,ne,S1,x1,bl,Nn,$3=`<code class="language-go"><span class="token keyword">type</span> StoreService <span class="token keyword">interface</span> <span class="token punctuation">&#123;</span>
	<span class="token function">GetStoreSpecificDiscount</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> storeId uuid<span class="token punctuation">.</span>UUID<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">float32</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">type</span> Service <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
	cardService  CardChargeService
	purchaseRepo Repository
	storeService StoreService
<span class="token punctuation">&#125;</span></code>`,wl,an,h1,ae,R1,M1,yl,tn,Cl,ya,O1,Dl,pn,Pl,en,B1,te,A1,I1,$l,Sl,xl,I,L1,pe,N1,T1,ee,H1,U1,oe,G1,F1,hl,Tn,S3=`<code class="language-go"><span class="token keyword">type</span> Service <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
	repo Repository
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>s Service<span class="token punctuation">)</span> <span class="token function">GetStoreSpecificDiscount</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> storeId uuid<span class="token punctuation">.</span>UUID<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">float32</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	dis<span class="token punctuation">,</span> err <span class="token operator">:=</span> s<span class="token punctuation">.</span>repo<span class="token punctuation">.</span><span class="token function">GetStoreDiscount</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> storeId<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">,</span> err
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">return</span> <span class="token function">float32</span><span class="token punctuation">(</span>dis<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>
<span class="token punctuation">&#125;</span></code>`,Rl,Ml,Ol,Ca,j1,Bl,Hn,x3=`<code class="language-bash"><span class="token builtin class-name">.</span>
├── go.mod
├── go.sum
└── internal
    ├── coffeelover.go
    ├── membership
    │   └── coffeebux.go
    ├── payment
    │   ├── means.go
    │   └── stripe.go
    ├── product.go
    ├── purchase
    │   ├── purchase.go
    │   └── repository.go
    └── store
        ├── repository.go
        └── store.go</code>`,Al,Il,Ll,Nl,on,cn,ce,K1,Tl,Hl,Ul,Da,V1,Gl,Pa,X1,Fl,jl,Kl,Vl,ln,un,le,q1,Xl,ql,Wl,q,ue,W1,z1,Un,Z1,J1,Q1,zl;return As=new z({props:{$$slots:{default:[Y3]},$$scope:{ctx:m}}}),Ls=new z({props:{$$slots:{default:[g3]},$$scope:{ctx:m}}}),Hs=new z({props:{$$slots:{default:[sv]},$$scope:{ctx:m}}}),Us=new z({props:{$$slots:{default:[nv]},$$scope:{ctx:m}}}),Ks=new z({props:{$$slots:{default:[av]},$$scope:{ctx:m}}}),Zs=new z({props:{$$slots:{default:[tv]},$$scope:{ctx:m}}}),Js=new z({props:{$$slots:{default:[pv]},$$scope:{ctx:m}}}),Qs=new z({props:{$$slots:{default:[ev]},$$scope:{ctx:m}}}),nn=new z({props:{$$slots:{default:[ov]},$$scope:{ctx:m}}}),tn=new z({props:{$$slots:{default:[cv]},$$scope:{ctx:m}}}),pn=new z({props:{$$slots:{default:[lv]},$$scope:{ctx:m}}}),Un=new Q3({props:{alt:"Domain-Driven Design with Golang Cover",src:"https://learning.oreilly.com/covers/urn:orm:book:9781804613450/400w/"}}),{c(){k=e("p"),v=c("이전 포스트까지는 주로 DDD의 이론적인 부분에 대해 다루었다면, 이번 포스트부터는 실제 애플리케이션에 DDD를 적용하는 방법에 대해 다룰 것이다."),d=r(),E=e("br"),we=e("br"),ye=r(),_s=e("h2"),bs=e("a"),Ua=e("span"),ou=c("모놀리식 애플리케이션이란?"),Ce=r(),De=e("hr"),Pe=r(),Vn=e("p"),cu=c(`모놀리식 애플리케이션(Monolithic Application)은 시스템의 모든 컴포넌츠가 하나의 단위로 묶여있는 애플리케이션을 말한다.
가령 UI, 도메인, 인프라스트럭처 서비스가 동일한 배포 단위에 합쳐져 있다면, 그 애플리케이션은 모놀리식 애플리케이션이라 할 수 있다.`),$e=r(),Xn=e("p"),lu=c("모놀리식 애플리케이션은 몇 가지 이유에서 인기가 높다."),Se=r(),J=e("ul"),Ga=e("li"),uu=c("모든 코드와 우려 사항이 한 곳에 존재하므로 개발이 쉽다. 분산 시스템에서 RPC를 사용할 때 고려해야 하는 사항이 없다."),ru=r(),Fa=e("li"),iu=c("배포할 항목이 하나이기 때문에 배포가 간단하다."),ku=r(),ja=e("li"),fu=c("서비스 간 통신이 인메모리에서 이루어지기 때문에 성능이 좋다."),xe=r(),qn=e("p"),du=c("하지만, 모놀리식 애플리케이션의 복잡도가 증가하면서, 다음과 같은 단점들이 드러나기 시작했다."),he=r(),y=e("ul"),Ka=e("li"),Eu=c("애플리케이션의 스타트업 시간이 길어진다."),vu=r(),Va=e("li"),mu=c("애플리케이션의 확장(스케일링)이 어렵다. 위의 스타트업 시간이 길어진다는 점과 더해져, 애플리케이션의 인스턴스를 늘리는 것이 어렵다. 따라서 수직적 확장은 가능하지만, 수평적 확장에는 실질적 어려움이 있다."),_u=r(),Xa=e("li"),bu=c("지속적 배포(Continious Deployment, CD)가 느려진다. 애플리케이션의 일부분만 수정하더라도 전체 애플리케이션을 모두 배포해야 하며, 이는 애플리케이션이 복잡해질수록 더욱 느려진다."),wu=r(),qa=e("li"),yu=c("특정 기술 스택에 귀속된다. 더 적합한 기술 스택이 나오거나 다른 기술 스택의 전문가이더라도 사용하던 기술 스택을 사용해야 한다. 만약 새로운 언어로 애플리케이션을 작성하고 싶다면, 애플리케이션 전체를 다시 작성해야 한다."),Cu=r(),Wa=e("li"),Du=c("변경 사항을 적용하기가 어렵고 모듈성이 떨어진다. 이는 DDD를 적용함으로써 해결할 수 있다."),Re=r(),Wn=e("p"),Pu=c("본 포스트에서는 DDD를 통해 간단한 모놀리식 애플리케이션을 작성해볼 것이다."),Me=r(),Oe=e("br"),Be=e("br"),Ae=r(),ws=e("h2"),ys=e("a"),za=e("span"),$u=c("애플리케이션의 요구사항"),Ie=r(),Q=e("p"),Su=c("가상의 회사인 "),Za=e("em"),xu=c("CoffeeCo"),hu=c("는 국제 커피 체인점이다. "),Ja=e("em"),Ru=c("CoffeeCo"),Mu=c("에 대한 비즈니스 도메인은 다음과 같다."),Le=r(),zn=e("p"),Ou=c(`이 회사는 작년에만 50개의 매장을 새로 내는 등 급속한 성장을 이루었다.
각 매장은 커피 및 커피 관련 액세서리와 매장별 음료를 판매한다.
매장은 개별적인 가격을 가지고 있지만, 국가적인 마케팅 캠페인이 종종 운영되기도 하며, 이는 품목의 가격에 영향을 미친다.`),Ne=r(),Cs=e("p"),Bu=c("CoffeeCo는 음료를 10회 구매할 때마다 1회의 무료 음료를 제공하는 "),Qa=e("em"),Au=c("CoffeeBux"),Iu=c(`라는 로열티 프로그램을 시작하였다.
모든 매장에서 음료를 구매하거나 교환할 수 있다.`),Te=r(),Zn=e("p"),Lu=c("CoffeeCo는 온라인 매장을 출시하는 것을 고려하고 있으며, 구매자가 매월 무제한 커피를 받을 수 있는 월간 구독과 다른 음료에 대한 할인을 고려하고 있다."),He=r(),Ue=e("br"),Ge=r(),Jn=e("p"),Nu=c("시스템을 개발할 때 다음과 같은 유비쿼터스 언어와 정의를 따라야 한다."),Fe=r(),Y=e("ul"),Qn=e("li"),Ya=e("strong"),Tu=c("Coffee Lovers"),Hu=c(": CoffeeCo의 고객"),Uu=r(),Yn=e("li"),ga=e("strong"),Gu=c("CoffeeBux"),Fu=c(": CoffeeCo의 멤버십 프로그램으로, Coffee Lovers가 음료 또는 악세서리를 구매할 때마다 CoffeeBux 포인트가 1점씩 쌓임."),ju=r(),gn=e("li"),st=e("strong"),Ku=c("Tiny, medium, and massive"),Vu=c(": 음료의 크기를 오름차순으로 나타냄. 일부 음료는 사이즈가 하나로 고정되어 있음."),je=r(),sa=e("p"),Xu=c("도메인 모델링 과정에서, 다음과 같은 도메인 객체를 식별할 수 있다."),Ke=r(),h=e("ul"),nt=e("li"),qu=c("Store"),Wu=r(),at=e("li"),zu=c("Products"),Zu=r(),tt=e("li"),Ju=c("Membership(원문에서는 Loyalty)"),Qu=r(),pt=e("li"),Yu=c("Subscription"),Ve=r(),na=e("p"),gu=c("또한, 시스템의 MVP(Minimum Viable Product)는 다음과 같은 기능을 갖추어야 한다."),Xe=r(),_=e("ul"),et=e("li"),sr=c("CoffeeBux를 이용해서 음료 또는 악세서리를 구매할 수 있어야 한다."),nr=r(),ot=e("li"),ar=c("신용카드 및 체크카드를 이용해서 음료 또는 악세서리를 구매할 수 있어야 한다."),tr=r(),ct=e("li"),pr=c("현금을 이용해서 음료 또는 악세서리를 구매할 수 있어야 한다."),er=r(),lt=e("li"),or=c("구매시마다 CoffeeBux 포인트가 쌓인다."),cr=r(),ut=e("li"),lr=c("매장별 할인 캠페인"),ur=r(),rt=e("li"),rr=c("현재는 음료는 한 사이즈만 존재"),qe=r(),aa=e("p"),ir=c("비즈니스 도메인에 대한 사항을 모두 파악했으므로, 이제 DDD를 통해 애플리케이션을 작성해보자."),We=r(),ze=e("br"),Ze=e("br"),Je=r(),Ds=e("h2"),Ps=e("a"),it=e("span"),kr=c("프로젝트 시작"),Qe=r(),Ye=e("hr"),ge=r(),ta=e("p"),fr=c("먼저, 다음과 같은 패키지 구조를 갖는 프로젝트를 생성한다."),so=r(),_n=e("pre"),no=r(),g=e("p"),dr=c("Golang에서 "),kt=e("code"),Er=c("internal"),vr=c(` 폴더는 특수한 의미를 가지며, 다른 프로젝트에서 임포트할 수 없다.
따라서 공개 API에 노출되지 않아야 하는 도메인 코드를 작성하기에 적합하며, 모든 도메인 코드는 `),ft=e("code"),mr=c("internal"),_r=c(" 폴더에 작성할 것이다."),ao=r(),$s=e("h3"),Ss=e("a"),dt=e("span"),br=c("도메인 모델 작성"),to=r(),ss=e("p"),wr=c("가장 먼저 작성해야 할 것은 "),Et=e("strong"),yr=c("Coffee Lover"),Cr=c(" 모델이다. Coffee Lover는 가장 확실한 "),vt=e("strong"),Dr=c("엔티티"),Pr=c("이며, 다른 도메인 객체와의 상호작용에서 중심적인 역할을 수행하기 때문이다."),po=r(),ks=e("p"),mt=e("code"),$r=c("internal"),Sr=c(" 폴더에 "),_t=e("code"),xr=c("coffeelover.go"),hr=c("파일을 생성하여, Coffee Lover 모델을 작성한다."),eo=r(),bn=e("pre"),oo=r(),K=e("p"),bt=e("code"),Rr=c("CoffeeLover"),Mr=c(" 구조체에 "),wt=e("code"),Or=c("FirstName"),Br=c("이나 "),yt=e("code"),Ar=c("EmailAddress"),Ir=c("와 같은 필드가 일부 추가되었는데, 이는 Coffee Lover에 대해 저장할 필요가 있는 추가적인 정보이다. 가령 도메인 전문가나 관계자와의 주기적인 회의를 통해 이러한 정보를 파악할 수 있다."),co=r(),lo=e("br"),uo=r(),C=e("p"),Lr=c("이번에는 매장 도메인을 작성해볼 것이다. "),Ct=e("code"),Nr=c("internal"),Tr=c(" 폴더 안에 "),Dt=e("code"),Hr=c("store"),Ur=c(" 폴더를 만들고, 그 아래 "),Pt=e("code"),Gr=c("store.go"),Fr=c(" 파일을 생성한다. "),$t=e("code"),jr=c("store/store.go"),Kr=c(" 파일에는 다음과 같은 코드를 작성한다."),ro=r(),wn=e("pre"),io=r(),pa=e("p"),Vr=c("이와 같이 매장은 ID를 가지는 엔티티가 된다."),ko=r(),fo=e("br"),Eo=r(),ea=e("p"),Xr=c("각 매장에서는 커피, 커피에 관련된 악세사리, 매장별 음료를 팔고, 따라서 우리는 상품을 정의해야 한다."),vo=r(),oa=e("p"),qr=c(`여기까지는 비교적 간단한 모델링이었지만, 상품을 정의하는 것은 꽤 까다롭다. 상품은 엔티티일까, 아니면 밸류 오브젝트일까?
결론만 말하자면 상품은 밸류 오브젝트로 두는 것이 좋다. 왜냐하면,`),mo=r(),R=e("ul"),St=e("li"),Wr=c("각 상품은 불변성을 가진다고 볼 수 있으며"),zr=r(),xt=e("li"),Zr=c("상품은 도매인 개념을 측정, 설명, 수량화하며,"),Jr=r(),ht=e("li"),Qr=c("값만으로 동일한 타입의 다른 객체와 구분할 수 있으며,"),Yr=r(),Rt=e("li"),gr=c("엔티티인지 밸류 오브젝트인지 애매한 것들은 일단 밸류 오브젝트로 처리하고 나중에 엔티티로 변경하는 것이 더 안전한 선택이기 때문이다."),_o=r(),fs=e("p"),Mt=e("code"),si=c("internal"),ni=c(" 폴더 안에 "),Ot=e("code"),ai=c("product.go"),ti=c(" 파일을 생성하고, 다음과 같이 작성한다."),bo=r(),yn=e("pre"),wo=r(),yo=e("br"),Co=r(),xs=e("p"),pi=c(`이제 매장 도메인으로 다시 돌아가서, 매장에서 판매하는 상품을 정의해야 한다.
`),Bt=e("code"),ei=c("store/store.go"),oi=c(" 파일을 다음과 같이 수정한다."),Do=r(),Cn=e("pre"),Po=r(),$o=e("br"),So=r(),ca=e("p"),ci=c("사용자가 상품을 구매할 때 카드를 사용하는지 혹은 현금을 사용하는지, 카드를 사용했다면 어떤 카드인지에 대한 정보를 표현할 수 있어야 한다."),xo=r(),w=e("p"),At=e("code"),li=c("payment"),ui=c(" 도메인을 정의할 것이다. "),It=e("code"),ri=c("internal"),ii=c(" 폴더 안에 "),Lt=e("code"),ki=c("payment"),fi=c(" 폴더를 만들고, 그 아래 "),Nt=e("code"),di=c("means.go"),Ei=c(" 파일을 생성한다. "),Tt=e("code"),vi=c("payment/means.go"),mi=c(" 파일에는 다음과 같은 코드를 작성한다."),ho=r(),Dn=e("pre"),Ro=r(),M=e("p"),_i=c("지불 수단을 나타내기 위한 타입인 "),Ht=e("code"),bi=c("Means"),wi=c(`는 string에 대한 alias이다.
또한 카드에 대한 정보를 나타내는 `),Ut=e("code"),yi=c("CardDetails"),Ci=c(" 타입을 정의하였다. 실제 카드 결제가 동작하는 방식과는 다소 거리가 있으나, 본 예제에서는 "),Gt=e("code"),Di=c("cardToken"),Pi=c("을 사용하여 결제를 처리한다고 가정한다."),Mo=r(),hs=e("p"),$i=c("또한 현금 및 CoffeeBux 결제에 관련된 상수를 정의하였는데, 이는 결제 수단을 나타내는 "),Ft=e("code"),Si=c("Means"),xi=c(" 타입의 값으로 사용된다."),Oo=r(),Bo=e("br"),Ao=r(),la=e("p"),hi=c(`다음으로는 상품의 구매에 관련된 도메인을 작성해야 한다.
coffee lover가 상품을 구매할 때 필요한 정보에 대해 잘 이해하고 있는지, 그리고 알아야 할 추가적인 도메인 정보는 없는지에 대해 도메인 전문가와 대화해야 할 타이밍이 아마 이쯤이 될 것이다.`),Io=r(),P=e("p"),jt=e("code"),Ri=c("internal"),Mi=c(" 폴더 안에 "),Kt=e("code"),Oi=c("purchase"),Bi=c(" 폴더를 만들고, 그 아래 "),Vt=e("code"),Ai=c("purchase.go"),Ii=c(" 파일을 생성한다. "),Xt=e("code"),Li=c("purchase/purchase.go"),Ni=c(" 파일에는 다음과 같은 코드를 작성한다."),Lo=r(),Pn=e("pre"),No=r(),$n=e("p"),qt=e("code"),Ti=c("Purchase"),Hi=c("는 ID를 가지는 엔티티여야 한다. 만약 사용자가 구매를 취소하고 싶을 때, ID를 통해 구매를 취소할 수 있어야 하기 때문이다."),To=r(),Ho=e("br"),Uo=r(),D=e("p"),Ui=c("이제 멤버십에 관한 도메인을 정의할 차례이다. "),Wt=e("code"),Gi=c("internal"),Fi=c(" 폴더 안에 "),zt=e("code"),ji=c("membership"),Ki=c(" 폴더를 만들고, 그 아래 "),Zt=e("code"),Vi=c("coffeebux.go"),Xi=c(" 파일을 생성한다. "),Jt=e("code"),qi=c("membership/coffeebux.go"),Wi=c(" 파일에는 다음과 같은 코드를 작성한다."),Go=r(),Sn=e("pre"),Fo=r(),jo=e("br"),Ko=r(),ua=e("p"),zi=c("여기까지, 모든 도메인 모델이 정의되었다. 지금까지의 작업이 반영된 패키지 구조는 다음과 같다."),Vo=r(),xn=e("pre"),Xo=r(),qo=e("br"),Wo=e("br"),zo=r(),Rs=e("h3"),Ms=e("a"),Qt=e("span"),Zi=c("도메인 서비스 작성"),Zo=r(),Os=e("p"),Ji=c("이제 도메인 서비스를 작성할 차례이다. "),Yt=e("code"),Qi=c("Purchase"),Yi=c("가 서비스 로직이 작성되기에 가장 적절하다고 볼 수 있는데, 이유는 다음과 같다."),Jo=r(),ns=e("ul"),gt=e("li"),gi=c("도매인 내의 중요한 비즈니스 로직이 수행될 것이며,"),sk=r(),sp=e("li"),nk=c("일부 값을 계산해야 하며,"),ak=r(),np=e("li"),tk=c("레포지토리 레이어에 접근해야 하기 때문이다."),Qo=r(),Bs=e("p"),pk=c("프로그램을 방어적으로 작성하려면 서비스를 얇게 유지하는 것이 좋고, 따라서 로직 코드를 최대한 도메인 객체에까지 내리는게 좋다. "),ap=e("code"),ek=c("purchase/purchase.go"),ok=c("를 열어, 다음과 같이 각 상품의 가격을 합하여 총 가격을 계산하고, 구매건에 대한 ID를 생성하는 메소드를 추가한다."),Yo=r(),T(As.$$.fragment),go=r(),Is=e("p"),ck=c("이어서, "),tp=e("code"),lk=c("purchase/purchase.go"),uk=c("에 서비스를 계속 작성한다."),sc=r(),T(Ls.$$.fragment),nc=r(),O=e("p"),rk=c("이 서비스는 "),pp=e("code"),ik=c("Purchase"),kk=c(" 객체에 필요한 값을 추가하기 위해 "),ep=e("code"),fk=c("validateAndEnrich"),dk=c(" 메소드를 호출한다. 이후, 결제 수단에 따라 결제를 처리하고, 결제가 성공적으로 이루어지면 "),op=e("code"),Ek=c("Purchase"),vk=c(" 객체를 저장한다."),ac=r(),tc=e("br"),pc=r(),V=e("p"),cp=e("code"),mk=c("purchase.validateAndEnrich()"),_k=c(`를 호출하고 나서 결제 수단에 따라 처리해야 할 몇 가지 로직이 있다.
카드 결제의 경우 `),lp=e("code"),bk=c("CardService"),wk=c("를 통해 카드 결제를 처리하므로, "),up=e("code"),yk=c("CardService"),Ck=c(` 인터페이스를 정의할 것이다.
이렇게 인터페이스로 정의하면 개발자 혹은 개발팀이 나뉘어져 있을 때, 정해진 인터페이스를 통해 서로간의 의존성을 줄이면서도 개발 속도를 높이며 원활한 협업이 가능해진다.`),ec=r(),as=e("p"),Dk=c("다음으로, 레포지토리 인터페이스를 정의할 것이다. "),rp=e("code"),Pk=c("purchase"),$k=c(" 디렉토리에 "),ip=e("code"),Sk=c("repository.go"),xk=c(" 파일을 생성하고, 다음과 같이 작성한다."),oc=r(),hn=e("pre"),cc=r(),ra=e("p"),hk=c("이렇게 인터페이스를 정의하여 사용하는 것은 좋은 방법이다. 레포지토리의 구현체가 어떤 데이터베이스에 의존하든, 인터페이스만 충족시키면 되기 때문이다."),lc=r(),ia=e("p"),Rk=c("지금까지의 작업이 반영된 패키지 구조는 다음과 같다. 프로젝트의 대략적인 윤곽이 잡히고 있다!"),uc=r(),Rn=e("pre"),rc=r(),ic=e("br"),kc=e("br"),fc=r(),Ns=e("h3"),Ts=e("a"),kp=e("span"),Mk=c("레포지토리 작성"),dc=r(),ka=e("p"),Ok=c("MongoDB를 사용하여 레포지토리 계층을 구현할 것이다. 먼저, MongoDB Golang Driver를 설치한다."),Ec=r(),Mn=e("pre"),vc=r(),ts=e("p"),Bk=c("그리고 "),fp=e("code"),Ak=c("Purchase"),Ik=c(" 모델을 저장하기 위한 레포지토리를 작성할 것이므로, "),dp=e("code"),Lk=c("purchase/repository.go"),Nk=c(" 파일에 다음과 같이 이어서 작성한다."),mc=r(),T(Hs.$$.fragment),_c=r(),ps=e("p"),Tk=c("다음으로 이전에 선언한 "),Ep=e("code"),Hk=c("Repository"),Uk=c(" 인터페이스를 충족시키기 위해 "),vp=e("code"),Gk=c("Store"),Fk=c(" 메소드를 작성한다."),bc=r(),On=e("pre"),wc=r(),b=e("p"),jk=c("여기에서 "),mp=e("code"),Kk=c("toMongoPurchase"),Vk=c(" 함수는 "),_p=e("code"),Xk=c("Purchase"),qk=c(" 객체를 "),bp=e("code"),Wk=c("MongoPurchase"),zk=c(` 객체로 변환하는 어댑터 함수이며,
`),wp=e("code"),Zk=c("MongoPurchase"),Jk=c("는 "),yp=e("code"),Qk=c("Purchase"),Yk=c(" 객체를 저장하기 위해 MongoDB에 저장되는 도큐먼트의 구조체 타입이다."),yc=r(),B=e("p"),gk=c("계속해서 "),Cp=e("code"),sf=c("purchase/repository.go"),nf=c("에 "),Dp=e("code"),af=c("mongoPurchase"),tf=c("와 "),Pp=e("code"),pf=c("toMongoPurchase"),ef=c("를 구현한다."),Cc=r(),T(Us.$$.fragment),Dc=r(),fa=e("p"),of=c("이와 같이 MongoDB에 대한 의존성과 Purchase 애그리거트를 디커플링할 수 있다. 다른 도메인 모델도 마찬가지로 데이터베이스 모델과 디커플링해야 한다."),Pc=r(),da=e("p"),cf=c("지금까지의 작업이 반영된 패키지 구조는 다음과 같다."),$c=r(),Bn=e("pre"),Sc=r(),xc=e("br"),hc=e("br"),Rc=r(),Gs=e("h3"),Fs=e("a"),$p=e("span"),lf=c("인프라스트럭처 서비스 작성"),Mc=r(),js=e("p"),uf=c("결제 서비스를 위해 "),Sp=e("em"),rf=c("Stripe"),kf=c(`라는 것을 써볼 것이다.
Mongo 레포지토리처럼 Stripe에 대한 의존성을 디커플링하기 위해 인터페이스를 정의할 것이다.`),Oc=r(),Ea=e("p"),ff=c("먼저, 다음 명령어로 Stripe Golang SDK를 설치한다."),Bc=r(),An=e("pre"),Ac=r(),va=e("p"),df=c("이거 뭔데 73버전까지 있는거지..?"),Ic=r(),es=e("p"),Ef=c("아무튼 "),xp=e("code"),vf=c("payment"),mf=c(" 폴더에 "),hp=e("code"),_f=c("stripe.go"),bf=c(" 파일을 생성하고, 다음과 같이 작성한다."),Lc=r(),In=e("pre"),Nc=r(),os=e("p"),wf=c("그리고 "),Rp=e("code"),yf=c("CardChargeService"),Cf=c(" 인터페이스를 충족시키기 위해 "),Mp=e("code"),Df=c("ChargeCard"),Pf=c(" 메소드를 작성한다."),Tc=r(),T(Ks.$$.fragment),Hc=r(),ma=e("p"),$f=c("이와 같이 외부 리소스인 Stripe를 사용하는 코드를 인프라스트럭처 레이어에 작성하였다."),Uc=r(),Gc=e("br"),Fc=e("br"),jc=r(),Vs=e("h2"),Xs=e("a"),Op=e("span"),Sf=c("기능 추가 구현하기"),Kc=r(),Vc=e("hr"),Xc=r(),_a=e("p"),xf=c("DDD의 장점 중 하나는 모듈성 덕분에 새로운 기능을 추가하기가 쉽다는 것이다. 아직 비즈니스 요구사항을 모두 충족시킨 것은 아니기 떄문에, 남은 요구사항을 충족시키기 위해 기능을 추가해보자."),qc=r(),qs=e("h3"),Ws=e("a"),Bp=e("span"),hf=c("멤버십 프로그램 구현"),Wc=r(),zs=e("p"),Rf=c("요구사항 중 10회 구매시 1회 무료 음료를 제공하는 멤버십 프로그램이 있다. 이를 구현하기 위해 "),Ap=e("code"),Mf=c("membership/coffeebux.go"),Of=c(" 파일에 다음과 같은 메소드를 추가한다."),zc=r(),Ln=e("pre"),Zc=r(),$=e("p"),Ip=e("code"),Bf=c("AddStamp"),Af=c(" 무료 음료를 제공하는 로직을 구현한 메소드이다. 이제 "),Lp=e("code"),If=c("purchase/purchase.go"),Lf=c(" 파일의 "),Np=e("code"),Nf=c("CompletePurchase"),Tf=c(" 메소드에서 "),Tp=e("em"),Hf=c("coffeebux"),Uf=c(" 스탬프를 쌓는 로직을 추가한다."),Jc=r(),T(Zs.$$.fragment),Qc=r(),S=e("p"),Hp=e("code"),Gf=c("CompletePurchase"),Ff=c("의 파라미터로 "),Up=e("code"),jf=c("coffeeBuxCard"),Kf=c("를 추가하였는데, 고객이 멤버십을 가지고 있지 않을 수 있기 때문에 "),Gp=e("code"),Vf=c("nil"),Xf=c(" 여부를 검사해야 한다. 검사 이후에는 단지 "),Fp=e("code"),qf=c("AddStamp"),Wf=c(" 메소드를 호출함으로써, 아주 쉽게 멤버십 프로그램을 구현할 수 있다."),Yc=r(),gc=e("br"),sl=r(),cs=e("p"),zf=c("이제 결제 수단으로 CoffeeBux를 사용할 수 있도록 구현해야 하는데, 이는 결제 도메인과 멤버십 도메인에 모두 속하기 때문에 어디에 구현해야 할지 고민이 될 수 있다. 이를 구현하는 데는 여러 가지 방법이 있을 수 있으며, 정답은 없다. 이번 예제에서는 결제 도메인에 구현할 것이다. "),jp=e("code"),Zf=c("purchase/purchase.go"),Jf=c(" 파일을 열어 다음과 같이 "),Kp=e("code"),Qf=c("Pay"),Yf=c(" 메소드를 추가한다."),nl=r(),T(Js.$$.fragment),al=r(),ba=e("p"),gf=c("이와 같이 사용할 수 있는 무료 음료의 수를 확인하고, 충분한 음료가 있다면 무료 음료의 수를 차감한다."),tl=r(),pl=e("br"),el=r(),A=e("p"),s1=c("남은 것은 구매 서비스의 "),Vp=e("code"),n1=c("CompletePurchase"),a1=c(" 메소드에서 결제 수단으로 CoffeeBux를 사용할 수 있도록 구현하는 것이다. "),Xp=e("code"),t1=c("purchase/purchase.go"),p1=c(" 파일을 열어 다음과 같이 "),qp=e("code"),e1=c("CompletePurchase"),o1=c(" 메소드를 수정한다."),ol=r(),T(Qs.$$.fragment),cl=r(),Ys=e("p"),c1=c(`이와 같이 결제 수단으로 CoffeeBux를 사용할 수 있도록 구현하였다.
이 때 CoffeeBux를 사용하여도 `),Wp=e("code"),l1=c("AddStamp"),u1=c(" 메소드를 호출하여 멤버십 포인트가 쌓이도록 구현하였는데, 이러한 비즈니스 불변성은 도메인 전문가와의 대화를 통해 확인할 수 있다."),ll=r(),ul=e("br"),rl=e("br"),il=r(),gs=e("h3"),sn=e("a"),zp=e("span"),r1=c("매장별 할인 캠페인 구현"),kl=r(),ls=e("p"),i1=c("매장별 할인 정보를 저장하기 위해서는 레포지토리 계층이 필요하다. "),Zp=e("code"),k1=c("store"),f1=c(" 폴더에 "),Jp=e("code"),d1=c("repository.go"),E1=c(" 파일을 생성하고, 다음과 같이 작성한다."),fl=r(),T(nn.$$.fragment),dl=r(),wa=e("p"),v1=c("이 코드는 이전의 레포지토리 레이어와 비슷하다. 다만 현재 각각의 레포지토리 레이어에서 Mongo 연결 풀을 중복으로 생성하고 있는데, 이를 다른 패키지로 분리하여 공유하는 것이 향후 개선사항이 될 수 있다."),El=r(),X=e("p"),Qp=e("code"),m1=c("GetStoreDiscount"),_1=c(" 메소드를 사용할 때 에러 체크를 하는 것을 알 수있는데, 만약 "),Yp=e("code"),b1=c("ErrNoDocuments"),w1=c(" 에러가 발생하면 할인이 적용되지 않은 것이므로 "),gp=e("code"),y1=c("ErrNoDiscount"),C1=c(" 에러를 반환하며, 이는 실제 에러라기보다는 할인이 적용되지 않았음을 명시적으로 알리는 것이다."),vl=r(),ml=e("br"),_l=r(),us=e("p"),D1=c("이렇게 구현된 매장별 할인을 구매 서비스에 추가할 것이다. "),se=e("code"),P1=c("purchase/purchase.go"),$1=c(" 파일을 열어 "),ne=e("code"),S1=c("StoreService"),x1=c(" 인터페이스를 정의하고, 이를 구매 서비스 구조체에 추가한다."),bl=r(),Nn=e("pre"),wl=r(),an=e("p"),h1=c("이후 "),ae=e("code"),R1=c("CompletePurchase"),M1=c(" 메소드에서 매장별 할인을 적용하는 로직을 추가한다."),yl=r(),T(tn.$$.fragment),Cl=r(),ya=e("p"),O1=c("이렇게 이것저것 추가하고 나니 가독성도 떨어지고 도메인이 복잡해졌다. 리팩토링이 필요해 보인다."),Dl=r(),T(pn.$$.fragment),Pl=r(),en=e("p"),B1=c("이와 같이 "),te=e("code"),A1=c("calculateStoreSpecificDiscount"),I1=c("함수로 따로 분리하였고, 훨씬 더 보기 깔끔해진 만큼 도메인 전문가와 이야기하기 더 쉬울 것이다."),$l=r(),Sl=e("br"),xl=r(),I=e("p"),L1=c("마지막으로 "),pe=e("code"),N1=c("store/store.go"),T1=c("를 열어 "),ee=e("code"),H1=c("StoreService"),U1=c("를 충족시키는 "),oe=e("code"),G1=c("Service"),F1=c(" 구조체를 작성한다."),hl=r(),Tn=e("pre"),Rl=r(),Ml=e("br"),Ol=r(),Ca=e("p"),j1=c("이로써 Domain Driven Design 기반의 전체 서비스가 완성되었다. 지금까지의 작업이 반영된 패키지 구조는 다음과 같다."),Bl=r(),Hn=e("pre"),Al=r(),Il=e("br"),Ll=e("br"),Nl=r(),on=e("h2"),cn=e("a"),ce=e("span"),K1=c("마치며"),Tl=r(),Hl=e("hr"),Ul=r(),Da=e("p"),V1=c(`이렇게 모놀리식 아키텍처에 DDD를 적용해보았다.
현재로서는 서비스만 구현되어 있지만 REST API 등 인터페이스가 정의된다면 어떻게 구현해야 할지 고민해보는 것도 좋을 것 같다.
또한 유닛 테스트 또는 통합 테스트를 작성해보는 것도 좋을 것 같다.`),Gl=r(),Pa=e("p"),X1=c(`DDD가 적용되지 않은 기존 코드에서, 이 포스트에서와 같이 레포지토리 패턴을 사용하고 도메인 객체를 사용하도록 리팩토링하는 것은 꽤 노력이 요구되는 일일 수 있다.
하지만 인프라스트럭처 레이어를 적용하는 것은 꽤 권장되는 방법이다.
비즈니스 로직과 인프라스트럭처를 분리함으로써, 비즈니스 로직을 테스트하기가 훨씬 쉬워지기 때문이다.`),Fl=r(),jl=e("br"),Kl=e("br"),Vl=r(),ln=e("h2"),un=e("a"),le=e("span"),q1=c("References"),Xl=r(),ql=e("hr"),Wl=r(),q=e("center"),ue=e("p"),W1=c("["),z1=r(),T(Un.$$.fragment),Z1=c(`
](https://learning.oreilly.com/library/view/domain-driven-design-with/9781804613450/) `),J1=e("br"),Q1=c(`
[Matthew Boyle, Domain-Driven Design with Golang』, O'Reilly Media, Inc.](https://learning.oreilly.com/library/view/domain-driven-design-with/9781804613450/)`),this.h()},l(s){k=o(s,"P",{});var t=u(k);v=l(t,"이전 포스트까지는 주로 DDD의 이론적인 부분에 대해 다루었다면, 이번 포스트부터는 실제 애플리케이션에 DDD를 적용하는 방법에 대해 다룰 것이다."),t.forEach(n),d=i(s),E=o(s,"BR",{}),we=o(s,"BR",{}),ye=i(s),_s=o(s,"H2",{id:!0});var $a=u(_s);bs=o($a,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var re=u(bs);Ua=o(re,"SPAN",{class:!0}),u(Ua).forEach(n),re.forEach(n),ou=l($a,"모놀리식 애플리케이션이란?"),$a.forEach(n),Ce=i(s),De=o(s,"HR",{}),Pe=i(s),Vn=o(s,"P",{});var ie=u(Vn);cu=l(ie,`모놀리식 애플리케이션(Monolithic Application)은 시스템의 모든 컴포넌츠가 하나의 단위로 묶여있는 애플리케이션을 말한다.
가령 UI, 도메인, 인프라스트럭처 서비스가 동일한 배포 단위에 합쳐져 있다면, 그 애플리케이션은 모놀리식 애플리케이션이라 할 수 있다.`),ie.forEach(n),$e=i(s),Xn=o(s,"P",{});var ke=u(Xn);lu=l(ke,"모놀리식 애플리케이션은 몇 가지 이유에서 인기가 높다."),ke.forEach(n),Se=i(s),J=o(s,"UL",{});var ds=u(J);Ga=o(ds,"LI",{});var fe=u(Ga);uu=l(fe,"모든 코드와 우려 사항이 한 곳에 존재하므로 개발이 쉽다. 분산 시스템에서 RPC를 사용할 때 고려해야 하는 사항이 없다."),fe.forEach(n),ru=i(ds),Fa=o(ds,"LI",{});var de=u(Fa);iu=l(de,"배포할 항목이 하나이기 때문에 배포가 간단하다."),de.forEach(n),ku=i(ds),ja=o(ds,"LI",{});var Ee=u(ja);fu=l(Ee,"서비스 간 통신이 인메모리에서 이루어지기 때문에 성능이 좋다."),Ee.forEach(n),ds.forEach(n),xe=i(s),qn=o(s,"P",{});var ve=u(qn);du=l(ve,"하지만, 모놀리식 애플리케이션의 복잡도가 증가하면서, 다음과 같은 단점들이 드러나기 시작했다."),ve.forEach(n),he=i(s),y=o(s,"UL",{});var x=u(y);Ka=o(x,"LI",{});var me=u(Ka);Eu=l(me,"애플리케이션의 스타트업 시간이 길어진다."),me.forEach(n),vu=i(x),Va=o(x,"LI",{});var fd=u(Va);mu=l(fd,"애플리케이션의 확장(스케일링)이 어렵다. 위의 스타트업 시간이 길어진다는 점과 더해져, 애플리케이션의 인스턴스를 늘리는 것이 어렵다. 따라서 수직적 확장은 가능하지만, 수평적 확장에는 실질적 어려움이 있다."),fd.forEach(n),_u=i(x),Xa=o(x,"LI",{});var dd=u(Xa);bu=l(dd,"지속적 배포(Continious Deployment, CD)가 느려진다. 애플리케이션의 일부분만 수정하더라도 전체 애플리케이션을 모두 배포해야 하며, 이는 애플리케이션이 복잡해질수록 더욱 느려진다."),dd.forEach(n),wu=i(x),qa=o(x,"LI",{});var Ed=u(qa);yu=l(Ed,"특정 기술 스택에 귀속된다. 더 적합한 기술 스택이 나오거나 다른 기술 스택의 전문가이더라도 사용하던 기술 스택을 사용해야 한다. 만약 새로운 언어로 애플리케이션을 작성하고 싶다면, 애플리케이션 전체를 다시 작성해야 한다."),Ed.forEach(n),Cu=i(x),Wa=o(x,"LI",{});var vd=u(Wa);Du=l(vd,"변경 사항을 적용하기가 어렵고 모듈성이 떨어진다. 이는 DDD를 적용함으로써 해결할 수 있다."),vd.forEach(n),x.forEach(n),Re=i(s),Wn=o(s,"P",{});var md=u(Wn);Pu=l(md,"본 포스트에서는 DDD를 통해 간단한 모놀리식 애플리케이션을 작성해볼 것이다."),md.forEach(n),Me=i(s),Oe=o(s,"BR",{}),Be=o(s,"BR",{}),Ae=i(s),ws=o(s,"H2",{id:!0});var Y1=u(ws);ys=o(Y1,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var _d=u(ys);za=o(_d,"SPAN",{class:!0}),u(za).forEach(n),_d.forEach(n),$u=l(Y1,"애플리케이션의 요구사항"),Y1.forEach(n),Ie=i(s),Q=o(s,"P",{});var Sa=u(Q);Su=l(Sa,"가상의 회사인 "),Za=o(Sa,"EM",{});var bd=u(Za);xu=l(bd,"CoffeeCo"),bd.forEach(n),hu=l(Sa,"는 국제 커피 체인점이다. "),Ja=o(Sa,"EM",{});var wd=u(Ja);Ru=l(wd,"CoffeeCo"),wd.forEach(n),Mu=l(Sa,"에 대한 비즈니스 도메인은 다음과 같다."),Sa.forEach(n),Le=i(s),zn=o(s,"P",{});var yd=u(zn);Ou=l(yd,`이 회사는 작년에만 50개의 매장을 새로 내는 등 급속한 성장을 이루었다.
각 매장은 커피 및 커피 관련 액세서리와 매장별 음료를 판매한다.
매장은 개별적인 가격을 가지고 있지만, 국가적인 마케팅 캠페인이 종종 운영되기도 하며, 이는 품목의 가격에 영향을 미친다.`),yd.forEach(n),Ne=i(s),Cs=o(s,"P",{});var Zl=u(Cs);Bu=l(Zl,"CoffeeCo는 음료를 10회 구매할 때마다 1회의 무료 음료를 제공하는 "),Qa=o(Zl,"EM",{});var Cd=u(Qa);Au=l(Cd,"CoffeeBux"),Cd.forEach(n),Iu=l(Zl,`라는 로열티 프로그램을 시작하였다.
모든 매장에서 음료를 구매하거나 교환할 수 있다.`),Zl.forEach(n),Te=i(s),Zn=o(s,"P",{});var Dd=u(Zn);Lu=l(Dd,"CoffeeCo는 온라인 매장을 출시하는 것을 고려하고 있으며, 구매자가 매월 무제한 커피를 받을 수 있는 월간 구독과 다른 음료에 대한 할인을 고려하고 있다."),Dd.forEach(n),He=i(s),Ue=o(s,"BR",{}),Ge=i(s),Jn=o(s,"P",{});var Pd=u(Jn);Nu=l(Pd,"시스템을 개발할 때 다음과 같은 유비쿼터스 언어와 정의를 따라야 한다."),Pd.forEach(n),Fe=i(s),Y=o(s,"UL",{});var xa=u(Y);Qn=o(xa,"LI",{});var g1=u(Qn);Ya=o(g1,"STRONG",{});var $d=u(Ya);Tu=l($d,"Coffee Lovers"),$d.forEach(n),Hu=l(g1,": CoffeeCo의 고객"),g1.forEach(n),Uu=i(xa),Yn=o(xa,"LI",{});var sd=u(Yn);ga=o(sd,"STRONG",{});var Sd=u(ga);Gu=l(Sd,"CoffeeBux"),Sd.forEach(n),Fu=l(sd,": CoffeeCo의 멤버십 프로그램으로, Coffee Lovers가 음료 또는 악세서리를 구매할 때마다 CoffeeBux 포인트가 1점씩 쌓임."),sd.forEach(n),ju=i(xa),gn=o(xa,"LI",{});var nd=u(gn);st=o(nd,"STRONG",{});var xd=u(st);Ku=l(xd,"Tiny, medium, and massive"),xd.forEach(n),Vu=l(nd,": 음료의 크기를 오름차순으로 나타냄. 일부 음료는 사이즈가 하나로 고정되어 있음."),nd.forEach(n),xa.forEach(n),je=i(s),sa=o(s,"P",{});var hd=u(sa);Xu=l(hd,"도메인 모델링 과정에서, 다음과 같은 도메인 객체를 식별할 수 있다."),hd.forEach(n),Ke=i(s),h=o(s,"UL",{});var rn=u(h);nt=o(rn,"LI",{});var Rd=u(nt);qu=l(Rd,"Store"),Rd.forEach(n),Wu=i(rn),at=o(rn,"LI",{});var Md=u(at);zu=l(Md,"Products"),Md.forEach(n),Zu=i(rn),tt=o(rn,"LI",{});var Od=u(tt);Ju=l(Od,"Membership(원문에서는 Loyalty)"),Od.forEach(n),Qu=i(rn),pt=o(rn,"LI",{});var Bd=u(pt);Yu=l(Bd,"Subscription"),Bd.forEach(n),rn.forEach(n),Ve=i(s),na=o(s,"P",{});var Ad=u(na);gu=l(Ad,"또한, 시스템의 MVP(Minimum Viable Product)는 다음과 같은 기능을 갖추어야 한다."),Ad.forEach(n),Xe=i(s),_=o(s,"UL",{});var L=u(_);et=o(L,"LI",{});var Id=u(et);sr=l(Id,"CoffeeBux를 이용해서 음료 또는 악세서리를 구매할 수 있어야 한다."),Id.forEach(n),nr=i(L),ot=o(L,"LI",{});var Ld=u(ot);ar=l(Ld,"신용카드 및 체크카드를 이용해서 음료 또는 악세서리를 구매할 수 있어야 한다."),Ld.forEach(n),tr=i(L),ct=o(L,"LI",{});var Nd=u(ct);pr=l(Nd,"현금을 이용해서 음료 또는 악세서리를 구매할 수 있어야 한다."),Nd.forEach(n),er=i(L),lt=o(L,"LI",{});var Td=u(lt);or=l(Td,"구매시마다 CoffeeBux 포인트가 쌓인다."),Td.forEach(n),cr=i(L),ut=o(L,"LI",{});var Hd=u(ut);lr=l(Hd,"매장별 할인 캠페인"),Hd.forEach(n),ur=i(L),rt=o(L,"LI",{});var Ud=u(rt);rr=l(Ud,"현재는 음료는 한 사이즈만 존재"),Ud.forEach(n),L.forEach(n),qe=i(s),aa=o(s,"P",{});var Gd=u(aa);ir=l(Gd,"비즈니스 도메인에 대한 사항을 모두 파악했으므로, 이제 DDD를 통해 애플리케이션을 작성해보자."),Gd.forEach(n),We=i(s),ze=o(s,"BR",{}),Ze=o(s,"BR",{}),Je=i(s),Ds=o(s,"H2",{id:!0});var ad=u(Ds);Ps=o(ad,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Fd=u(Ps);it=o(Fd,"SPAN",{class:!0}),u(it).forEach(n),Fd.forEach(n),kr=l(ad,"프로젝트 시작"),ad.forEach(n),Qe=i(s),Ye=o(s,"HR",{}),ge=i(s),ta=o(s,"P",{});var jd=u(ta);fr=l(jd,"먼저, 다음과 같은 패키지 구조를 갖는 프로젝트를 생성한다."),jd.forEach(n),so=i(s),_n=o(s,"PRE",{class:!0});var h3=u(_n);h3.forEach(n),no=i(s),g=o(s,"P",{});var ha=u(g);dr=l(ha,"Golang에서 "),kt=o(ha,"CODE",{});var Kd=u(kt);Er=l(Kd,"internal"),Kd.forEach(n),vr=l(ha,` 폴더는 특수한 의미를 가지며, 다른 프로젝트에서 임포트할 수 없다.
따라서 공개 API에 노출되지 않아야 하는 도메인 코드를 작성하기에 적합하며, 모든 도메인 코드는 `),ft=o(ha,"CODE",{});var Vd=u(ft);mr=l(Vd,"internal"),Vd.forEach(n),_r=l(ha," 폴더에 작성할 것이다."),ha.forEach(n),ao=i(s),$s=o(s,"H3",{id:!0});var td=u($s);Ss=o(td,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Xd=u(Ss);dt=o(Xd,"SPAN",{class:!0}),u(dt).forEach(n),Xd.forEach(n),br=l(td,"도메인 모델 작성"),td.forEach(n),to=i(s),ss=o(s,"P",{});var Ra=u(ss);wr=l(Ra,"가장 먼저 작성해야 할 것은 "),Et=o(Ra,"STRONG",{});var qd=u(Et);yr=l(qd,"Coffee Lover"),qd.forEach(n),Cr=l(Ra," 모델이다. Coffee Lover는 가장 확실한 "),vt=o(Ra,"STRONG",{});var Wd=u(vt);Dr=l(Wd,"엔티티"),Wd.forEach(n),Pr=l(Ra,"이며, 다른 도메인 객체와의 상호작용에서 중심적인 역할을 수행하기 때문이다."),Ra.forEach(n),po=i(s),ks=o(s,"P",{});var _e=u(ks);mt=o(_e,"CODE",{});var zd=u(mt);$r=l(zd,"internal"),zd.forEach(n),Sr=l(_e," 폴더에 "),_t=o(_e,"CODE",{});var Zd=u(_t);xr=l(Zd,"coffeelover.go"),Zd.forEach(n),hr=l(_e,"파일을 생성하여, Coffee Lover 모델을 작성한다."),_e.forEach(n),eo=i(s),bn=o(s,"PRE",{class:!0});var R3=u(bn);R3.forEach(n),oo=i(s),K=o(s,"P",{});var Gn=u(K);bt=o(Gn,"CODE",{});var Jd=u(bt);Rr=l(Jd,"CoffeeLover"),Jd.forEach(n),Mr=l(Gn," 구조체에 "),wt=o(Gn,"CODE",{});var Qd=u(wt);Or=l(Qd,"FirstName"),Qd.forEach(n),Br=l(Gn,"이나 "),yt=o(Gn,"CODE",{});var Yd=u(yt);Ar=l(Yd,"EmailAddress"),Yd.forEach(n),Ir=l(Gn,"와 같은 필드가 일부 추가되었는데, 이는 Coffee Lover에 대해 저장할 필요가 있는 추가적인 정보이다. 가령 도메인 전문가나 관계자와의 주기적인 회의를 통해 이러한 정보를 파악할 수 있다."),Gn.forEach(n),co=i(s),lo=o(s,"BR",{}),uo=i(s),C=o(s,"P",{});var rs=u(C);Lr=l(rs,"이번에는 매장 도메인을 작성해볼 것이다. "),Ct=o(rs,"CODE",{});var gd=u(Ct);Nr=l(gd,"internal"),gd.forEach(n),Tr=l(rs," 폴더 안에 "),Dt=o(rs,"CODE",{});var s2=u(Dt);Hr=l(s2,"store"),s2.forEach(n),Ur=l(rs," 폴더를 만들고, 그 아래 "),Pt=o(rs,"CODE",{});var n2=u(Pt);Gr=l(n2,"store.go"),n2.forEach(n),Fr=l(rs," 파일을 생성한다. "),$t=o(rs,"CODE",{});var a2=u($t);jr=l(a2,"store/store.go"),a2.forEach(n),Kr=l(rs," 파일에는 다음과 같은 코드를 작성한다."),rs.forEach(n),ro=i(s),wn=o(s,"PRE",{class:!0});var M3=u(wn);M3.forEach(n),io=i(s),pa=o(s,"P",{});var t2=u(pa);Vr=l(t2,"이와 같이 매장은 ID를 가지는 엔티티가 된다."),t2.forEach(n),ko=i(s),fo=o(s,"BR",{}),Eo=i(s),ea=o(s,"P",{});var p2=u(ea);Xr=l(p2,"각 매장에서는 커피, 커피에 관련된 악세사리, 매장별 음료를 팔고, 따라서 우리는 상품을 정의해야 한다."),p2.forEach(n),vo=i(s),oa=o(s,"P",{});var e2=u(oa);qr=l(e2,`여기까지는 비교적 간단한 모델링이었지만, 상품을 정의하는 것은 꽤 까다롭다. 상품은 엔티티일까, 아니면 밸류 오브젝트일까?
결론만 말하자면 상품은 밸류 오브젝트로 두는 것이 좋다. 왜냐하면,`),e2.forEach(n),mo=i(s),R=o(s,"UL",{});var kn=u(R);St=o(kn,"LI",{});var o2=u(St);Wr=l(o2,"각 상품은 불변성을 가진다고 볼 수 있으며"),o2.forEach(n),zr=i(kn),xt=o(kn,"LI",{});var c2=u(xt);Zr=l(c2,"상품은 도매인 개념을 측정, 설명, 수량화하며,"),c2.forEach(n),Jr=i(kn),ht=o(kn,"LI",{});var l2=u(ht);Qr=l(l2,"값만으로 동일한 타입의 다른 객체와 구분할 수 있으며,"),l2.forEach(n),Yr=i(kn),Rt=o(kn,"LI",{});var u2=u(Rt);gr=l(u2,"엔티티인지 밸류 오브젝트인지 애매한 것들은 일단 밸류 오브젝트로 처리하고 나중에 엔티티로 변경하는 것이 더 안전한 선택이기 때문이다."),u2.forEach(n),kn.forEach(n),_o=i(s),fs=o(s,"P",{});var be=u(fs);Mt=o(be,"CODE",{});var r2=u(Mt);si=l(r2,"internal"),r2.forEach(n),ni=l(be," 폴더 안에 "),Ot=o(be,"CODE",{});var i2=u(Ot);ai=l(i2,"product.go"),i2.forEach(n),ti=l(be," 파일을 생성하고, 다음과 같이 작성한다."),be.forEach(n),bo=i(s),yn=o(s,"PRE",{class:!0});var O3=u(yn);O3.forEach(n),wo=i(s),yo=o(s,"BR",{}),Co=i(s),xs=o(s,"P",{});var Jl=u(xs);pi=l(Jl,`이제 매장 도메인으로 다시 돌아가서, 매장에서 판매하는 상품을 정의해야 한다.
`),Bt=o(Jl,"CODE",{});var k2=u(Bt);ei=l(k2,"store/store.go"),k2.forEach(n),oi=l(Jl," 파일을 다음과 같이 수정한다."),Jl.forEach(n),Do=i(s),Cn=o(s,"PRE",{class:!0});var B3=u(Cn);B3.forEach(n),Po=i(s),$o=o(s,"BR",{}),So=i(s),ca=o(s,"P",{});var f2=u(ca);ci=l(f2,"사용자가 상품을 구매할 때 카드를 사용하는지 혹은 현금을 사용하는지, 카드를 사용했다면 어떤 카드인지에 대한 정보를 표현할 수 있어야 한다."),f2.forEach(n),xo=i(s),w=o(s,"P",{});var W=u(w);At=o(W,"CODE",{});var d2=u(At);li=l(d2,"payment"),d2.forEach(n),ui=l(W," 도메인을 정의할 것이다. "),It=o(W,"CODE",{});var E2=u(It);ri=l(E2,"internal"),E2.forEach(n),ii=l(W," 폴더 안에 "),Lt=o(W,"CODE",{});var v2=u(Lt);ki=l(v2,"payment"),v2.forEach(n),fi=l(W," 폴더를 만들고, 그 아래 "),Nt=o(W,"CODE",{});var m2=u(Nt);di=l(m2,"means.go"),m2.forEach(n),Ei=l(W," 파일을 생성한다. "),Tt=o(W,"CODE",{});var _2=u(Tt);vi=l(_2,"payment/means.go"),_2.forEach(n),mi=l(W," 파일에는 다음과 같은 코드를 작성한다."),W.forEach(n),ho=i(s),Dn=o(s,"PRE",{class:!0});var A3=u(Dn);A3.forEach(n),Ro=i(s),M=o(s,"P",{});var fn=u(M);_i=l(fn,"지불 수단을 나타내기 위한 타입인 "),Ht=o(fn,"CODE",{});var b2=u(Ht);bi=l(b2,"Means"),b2.forEach(n),wi=l(fn,`는 string에 대한 alias이다.
또한 카드에 대한 정보를 나타내는 `),Ut=o(fn,"CODE",{});var w2=u(Ut);yi=l(w2,"CardDetails"),w2.forEach(n),Ci=l(fn," 타입을 정의하였다. 실제 카드 결제가 동작하는 방식과는 다소 거리가 있으나, 본 예제에서는 "),Gt=o(fn,"CODE",{});var y2=u(Gt);Di=l(y2,"cardToken"),y2.forEach(n),Pi=l(fn,"을 사용하여 결제를 처리한다고 가정한다."),fn.forEach(n),Mo=i(s),hs=o(s,"P",{});var Ql=u(hs);$i=l(Ql,"또한 현금 및 CoffeeBux 결제에 관련된 상수를 정의하였는데, 이는 결제 수단을 나타내는 "),Ft=o(Ql,"CODE",{});var C2=u(Ft);Si=l(C2,"Means"),C2.forEach(n),xi=l(Ql," 타입의 값으로 사용된다."),Ql.forEach(n),Oo=i(s),Bo=o(s,"BR",{}),Ao=i(s),la=o(s,"P",{});var D2=u(la);hi=l(D2,`다음으로는 상품의 구매에 관련된 도메인을 작성해야 한다.
coffee lover가 상품을 구매할 때 필요한 정보에 대해 잘 이해하고 있는지, 그리고 알아야 할 추가적인 도메인 정보는 없는지에 대해 도메인 전문가와 대화해야 할 타이밍이 아마 이쯤이 될 것이다.`),D2.forEach(n),Io=i(s),P=o(s,"P",{});var Es=u(P);jt=o(Es,"CODE",{});var P2=u(jt);Ri=l(P2,"internal"),P2.forEach(n),Mi=l(Es," 폴더 안에 "),Kt=o(Es,"CODE",{});var $2=u(Kt);Oi=l($2,"purchase"),$2.forEach(n),Bi=l(Es," 폴더를 만들고, 그 아래 "),Vt=o(Es,"CODE",{});var S2=u(Vt);Ai=l(S2,"purchase.go"),S2.forEach(n),Ii=l(Es," 파일을 생성한다. "),Xt=o(Es,"CODE",{});var x2=u(Xt);Li=l(x2,"purchase/purchase.go"),x2.forEach(n),Ni=l(Es," 파일에는 다음과 같은 코드를 작성한다."),Es.forEach(n),Lo=i(s),Pn=o(s,"PRE",{class:!0});var I3=u(Pn);I3.forEach(n),No=i(s),$n=o(s,"P",{});var pd=u($n);qt=o(pd,"CODE",{});var h2=u(qt);Ti=l(h2,"Purchase"),h2.forEach(n),Hi=l(pd,"는 ID를 가지는 엔티티여야 한다. 만약 사용자가 구매를 취소하고 싶을 때, ID를 통해 구매를 취소할 수 있어야 하기 때문이다."),pd.forEach(n),To=i(s),Ho=o(s,"BR",{}),Uo=i(s),D=o(s,"P",{});var is=u(D);Ui=l(is,"이제 멤버십에 관한 도메인을 정의할 차례이다. "),Wt=o(is,"CODE",{});var R2=u(Wt);Gi=l(R2,"internal"),R2.forEach(n),Fi=l(is," 폴더 안에 "),zt=o(is,"CODE",{});var M2=u(zt);ji=l(M2,"membership"),M2.forEach(n),Ki=l(is," 폴더를 만들고, 그 아래 "),Zt=o(is,"CODE",{});var O2=u(Zt);Vi=l(O2,"coffeebux.go"),O2.forEach(n),Xi=l(is," 파일을 생성한다. "),Jt=o(is,"CODE",{});var B2=u(Jt);qi=l(B2,"membership/coffeebux.go"),B2.forEach(n),Wi=l(is," 파일에는 다음과 같은 코드를 작성한다."),is.forEach(n),Go=i(s),Sn=o(s,"PRE",{class:!0});var L3=u(Sn);L3.forEach(n),Fo=i(s),jo=o(s,"BR",{}),Ko=i(s),ua=o(s,"P",{});var A2=u(ua);zi=l(A2,"여기까지, 모든 도메인 모델이 정의되었다. 지금까지의 작업이 반영된 패키지 구조는 다음과 같다."),A2.forEach(n),Vo=i(s),xn=o(s,"PRE",{class:!0});var N3=u(xn);N3.forEach(n),Xo=i(s),qo=o(s,"BR",{}),Wo=o(s,"BR",{}),zo=i(s),Rs=o(s,"H3",{id:!0});var ed=u(Rs);Ms=o(ed,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var I2=u(Ms);Qt=o(I2,"SPAN",{class:!0}),u(Qt).forEach(n),I2.forEach(n),Zi=l(ed,"도메인 서비스 작성"),ed.forEach(n),Zo=i(s),Os=o(s,"P",{});var Yl=u(Os);Ji=l(Yl,"이제 도메인 서비스를 작성할 차례이다. "),Yt=o(Yl,"CODE",{});var L2=u(Yt);Qi=l(L2,"Purchase"),L2.forEach(n),Yi=l(Yl,"가 서비스 로직이 작성되기에 가장 적절하다고 볼 수 있는데, 이유는 다음과 같다."),Yl.forEach(n),Jo=i(s),ns=o(s,"UL",{});var Ma=u(ns);gt=o(Ma,"LI",{});var N2=u(gt);gi=l(N2,"도매인 내의 중요한 비즈니스 로직이 수행될 것이며,"),N2.forEach(n),sk=i(Ma),sp=o(Ma,"LI",{});var T2=u(sp);nk=l(T2,"일부 값을 계산해야 하며,"),T2.forEach(n),ak=i(Ma),np=o(Ma,"LI",{});var H2=u(np);tk=l(H2,"레포지토리 레이어에 접근해야 하기 때문이다."),H2.forEach(n),Ma.forEach(n),Qo=i(s),Bs=o(s,"P",{});var gl=u(Bs);pk=l(gl,"프로그램을 방어적으로 작성하려면 서비스를 얇게 유지하는 것이 좋고, 따라서 로직 코드를 최대한 도메인 객체에까지 내리는게 좋다. "),ap=o(gl,"CODE",{});var U2=u(ap);ek=l(U2,"purchase/purchase.go"),U2.forEach(n),ok=l(gl,"를 열어, 다음과 같이 각 상품의 가격을 합하여 총 가격을 계산하고, 구매건에 대한 ID를 생성하는 메소드를 추가한다."),gl.forEach(n),Yo=i(s),H(As.$$.fragment,s),go=i(s),Is=o(s,"P",{});var su=u(Is);ck=l(su,"이어서, "),tp=o(su,"CODE",{});var G2=u(tp);lk=l(G2,"purchase/purchase.go"),G2.forEach(n),uk=l(su,"에 서비스를 계속 작성한다."),su.forEach(n),sc=i(s),H(Ls.$$.fragment,s),nc=i(s),O=o(s,"P",{});var dn=u(O);rk=l(dn,"이 서비스는 "),pp=o(dn,"CODE",{});var F2=u(pp);ik=l(F2,"Purchase"),F2.forEach(n),kk=l(dn," 객체에 필요한 값을 추가하기 위해 "),ep=o(dn,"CODE",{});var j2=u(ep);fk=l(j2,"validateAndEnrich"),j2.forEach(n),dk=l(dn," 메소드를 호출한다. 이후, 결제 수단에 따라 결제를 처리하고, 결제가 성공적으로 이루어지면 "),op=o(dn,"CODE",{});var K2=u(op);Ek=l(K2,"Purchase"),K2.forEach(n),vk=l(dn," 객체를 저장한다."),dn.forEach(n),ac=i(s),tc=o(s,"BR",{}),pc=i(s),V=o(s,"P",{});var Fn=u(V);cp=o(Fn,"CODE",{});var V2=u(cp);mk=l(V2,"purchase.validateAndEnrich()"),V2.forEach(n),_k=l(Fn,`를 호출하고 나서 결제 수단에 따라 처리해야 할 몇 가지 로직이 있다.
카드 결제의 경우 `),lp=o(Fn,"CODE",{});var X2=u(lp);bk=l(X2,"CardService"),X2.forEach(n),wk=l(Fn,"를 통해 카드 결제를 처리하므로, "),up=o(Fn,"CODE",{});var q2=u(up);yk=l(q2,"CardService"),q2.forEach(n),Ck=l(Fn,` 인터페이스를 정의할 것이다.
이렇게 인터페이스로 정의하면 개발자 혹은 개발팀이 나뉘어져 있을 때, 정해진 인터페이스를 통해 서로간의 의존성을 줄이면서도 개발 속도를 높이며 원활한 협업이 가능해진다.`),Fn.forEach(n),ec=i(s),as=o(s,"P",{});var Oa=u(as);Dk=l(Oa,"다음으로, 레포지토리 인터페이스를 정의할 것이다. "),rp=o(Oa,"CODE",{});var W2=u(rp);Pk=l(W2,"purchase"),W2.forEach(n),$k=l(Oa," 디렉토리에 "),ip=o(Oa,"CODE",{});var z2=u(ip);Sk=l(z2,"repository.go"),z2.forEach(n),xk=l(Oa," 파일을 생성하고, 다음과 같이 작성한다."),Oa.forEach(n),oc=i(s),hn=o(s,"PRE",{class:!0});var T3=u(hn);T3.forEach(n),cc=i(s),ra=o(s,"P",{});var Z2=u(ra);hk=l(Z2,"이렇게 인터페이스를 정의하여 사용하는 것은 좋은 방법이다. 레포지토리의 구현체가 어떤 데이터베이스에 의존하든, 인터페이스만 충족시키면 되기 때문이다."),Z2.forEach(n),lc=i(s),ia=o(s,"P",{});var J2=u(ia);Rk=l(J2,"지금까지의 작업이 반영된 패키지 구조는 다음과 같다. 프로젝트의 대략적인 윤곽이 잡히고 있다!"),J2.forEach(n),uc=i(s),Rn=o(s,"PRE",{class:!0});var H3=u(Rn);H3.forEach(n),rc=i(s),ic=o(s,"BR",{}),kc=o(s,"BR",{}),fc=i(s),Ns=o(s,"H3",{id:!0});var od=u(Ns);Ts=o(od,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Q2=u(Ts);kp=o(Q2,"SPAN",{class:!0}),u(kp).forEach(n),Q2.forEach(n),Mk=l(od,"레포지토리 작성"),od.forEach(n),dc=i(s),ka=o(s,"P",{});var Y2=u(ka);Ok=l(Y2,"MongoDB를 사용하여 레포지토리 계층을 구현할 것이다. 먼저, MongoDB Golang Driver를 설치한다."),Y2.forEach(n),Ec=i(s),Mn=o(s,"PRE",{class:!0});var U3=u(Mn);U3.forEach(n),vc=i(s),ts=o(s,"P",{});var Ba=u(ts);Bk=l(Ba,"그리고 "),fp=o(Ba,"CODE",{});var g2=u(fp);Ak=l(g2,"Purchase"),g2.forEach(n),Ik=l(Ba," 모델을 저장하기 위한 레포지토리를 작성할 것이므로, "),dp=o(Ba,"CODE",{});var sE=u(dp);Lk=l(sE,"purchase/repository.go"),sE.forEach(n),Nk=l(Ba," 파일에 다음과 같이 이어서 작성한다."),Ba.forEach(n),mc=i(s),H(Hs.$$.fragment,s),_c=i(s),ps=o(s,"P",{});var Aa=u(ps);Tk=l(Aa,"다음으로 이전에 선언한 "),Ep=o(Aa,"CODE",{});var nE=u(Ep);Hk=l(nE,"Repository"),nE.forEach(n),Uk=l(Aa," 인터페이스를 충족시키기 위해 "),vp=o(Aa,"CODE",{});var aE=u(vp);Gk=l(aE,"Store"),aE.forEach(n),Fk=l(Aa," 메소드를 작성한다."),Aa.forEach(n),bc=i(s),On=o(s,"PRE",{class:!0});var G3=u(On);G3.forEach(n),wc=i(s),b=o(s,"P",{});var N=u(b);jk=l(N,"여기에서 "),mp=o(N,"CODE",{});var tE=u(mp);Kk=l(tE,"toMongoPurchase"),tE.forEach(n),Vk=l(N," 함수는 "),_p=o(N,"CODE",{});var pE=u(_p);Xk=l(pE,"Purchase"),pE.forEach(n),qk=l(N," 객체를 "),bp=o(N,"CODE",{});var eE=u(bp);Wk=l(eE,"MongoPurchase"),eE.forEach(n),zk=l(N,` 객체로 변환하는 어댑터 함수이며,
`),wp=o(N,"CODE",{});var oE=u(wp);Zk=l(oE,"MongoPurchase"),oE.forEach(n),Jk=l(N,"는 "),yp=o(N,"CODE",{});var cE=u(yp);Qk=l(cE,"Purchase"),cE.forEach(n),Yk=l(N," 객체를 저장하기 위해 MongoDB에 저장되는 도큐먼트의 구조체 타입이다."),N.forEach(n),yc=i(s),B=o(s,"P",{});var En=u(B);gk=l(En,"계속해서 "),Cp=o(En,"CODE",{});var lE=u(Cp);sf=l(lE,"purchase/repository.go"),lE.forEach(n),nf=l(En,"에 "),Dp=o(En,"CODE",{});var uE=u(Dp);af=l(uE,"mongoPurchase"),uE.forEach(n),tf=l(En,"와 "),Pp=o(En,"CODE",{});var rE=u(Pp);pf=l(rE,"toMongoPurchase"),rE.forEach(n),ef=l(En,"를 구현한다."),En.forEach(n),Cc=i(s),H(Us.$$.fragment,s),Dc=i(s),fa=o(s,"P",{});var iE=u(fa);of=l(iE,"이와 같이 MongoDB에 대한 의존성과 Purchase 애그리거트를 디커플링할 수 있다. 다른 도메인 모델도 마찬가지로 데이터베이스 모델과 디커플링해야 한다."),iE.forEach(n),Pc=i(s),da=o(s,"P",{});var kE=u(da);cf=l(kE,"지금까지의 작업이 반영된 패키지 구조는 다음과 같다."),kE.forEach(n),$c=i(s),Bn=o(s,"PRE",{class:!0});var F3=u(Bn);F3.forEach(n),Sc=i(s),xc=o(s,"BR",{}),hc=o(s,"BR",{}),Rc=i(s),Gs=o(s,"H3",{id:!0});var cd=u(Gs);Fs=o(cd,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var fE=u(Fs);$p=o(fE,"SPAN",{class:!0}),u($p).forEach(n),fE.forEach(n),lf=l(cd,"인프라스트럭처 서비스 작성"),cd.forEach(n),Mc=i(s),js=o(s,"P",{});var nu=u(js);uf=l(nu,"결제 서비스를 위해 "),Sp=o(nu,"EM",{});var dE=u(Sp);rf=l(dE,"Stripe"),dE.forEach(n),kf=l(nu,`라는 것을 써볼 것이다.
Mongo 레포지토리처럼 Stripe에 대한 의존성을 디커플링하기 위해 인터페이스를 정의할 것이다.`),nu.forEach(n),Oc=i(s),Ea=o(s,"P",{});var EE=u(Ea);ff=l(EE,"먼저, 다음 명령어로 Stripe Golang SDK를 설치한다."),EE.forEach(n),Bc=i(s),An=o(s,"PRE",{class:!0});var j3=u(An);j3.forEach(n),Ac=i(s),va=o(s,"P",{});var vE=u(va);df=l(vE,"이거 뭔데 73버전까지 있는거지..?"),vE.forEach(n),Ic=i(s),es=o(s,"P",{});var Ia=u(es);Ef=l(Ia,"아무튼 "),xp=o(Ia,"CODE",{});var mE=u(xp);vf=l(mE,"payment"),mE.forEach(n),mf=l(Ia," 폴더에 "),hp=o(Ia,"CODE",{});var _E=u(hp);_f=l(_E,"stripe.go"),_E.forEach(n),bf=l(Ia," 파일을 생성하고, 다음과 같이 작성한다."),Ia.forEach(n),Lc=i(s),In=o(s,"PRE",{class:!0});var K3=u(In);K3.forEach(n),Nc=i(s),os=o(s,"P",{});var La=u(os);wf=l(La,"그리고 "),Rp=o(La,"CODE",{});var bE=u(Rp);yf=l(bE,"CardChargeService"),bE.forEach(n),Cf=l(La," 인터페이스를 충족시키기 위해 "),Mp=o(La,"CODE",{});var wE=u(Mp);Df=l(wE,"ChargeCard"),wE.forEach(n),Pf=l(La," 메소드를 작성한다."),La.forEach(n),Tc=i(s),H(Ks.$$.fragment,s),Hc=i(s),ma=o(s,"P",{});var yE=u(ma);$f=l(yE,"이와 같이 외부 리소스인 Stripe를 사용하는 코드를 인프라스트럭처 레이어에 작성하였다."),yE.forEach(n),Uc=i(s),Gc=o(s,"BR",{}),Fc=o(s,"BR",{}),jc=i(s),Vs=o(s,"H2",{id:!0});var ld=u(Vs);Xs=o(ld,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var CE=u(Xs);Op=o(CE,"SPAN",{class:!0}),u(Op).forEach(n),CE.forEach(n),Sf=l(ld,"기능 추가 구현하기"),ld.forEach(n),Kc=i(s),Vc=o(s,"HR",{}),Xc=i(s),_a=o(s,"P",{});var DE=u(_a);xf=l(DE,"DDD의 장점 중 하나는 모듈성 덕분에 새로운 기능을 추가하기가 쉽다는 것이다. 아직 비즈니스 요구사항을 모두 충족시킨 것은 아니기 떄문에, 남은 요구사항을 충족시키기 위해 기능을 추가해보자."),DE.forEach(n),qc=i(s),qs=o(s,"H3",{id:!0});var ud=u(qs);Ws=o(ud,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var PE=u(Ws);Bp=o(PE,"SPAN",{class:!0}),u(Bp).forEach(n),PE.forEach(n),hf=l(ud,"멤버십 프로그램 구현"),ud.forEach(n),Wc=i(s),zs=o(s,"P",{});var au=u(zs);Rf=l(au,"요구사항 중 10회 구매시 1회 무료 음료를 제공하는 멤버십 프로그램이 있다. 이를 구현하기 위해 "),Ap=o(au,"CODE",{});var $E=u(Ap);Mf=l($E,"membership/coffeebux.go"),$E.forEach(n),Of=l(au," 파일에 다음과 같은 메소드를 추가한다."),au.forEach(n),zc=i(s),Ln=o(s,"PRE",{class:!0});var V3=u(Ln);V3.forEach(n),Zc=i(s),$=o(s,"P",{});var vs=u($);Ip=o(vs,"CODE",{});var SE=u(Ip);Bf=l(SE,"AddStamp"),SE.forEach(n),Af=l(vs," 무료 음료를 제공하는 로직을 구현한 메소드이다. 이제 "),Lp=o(vs,"CODE",{});var xE=u(Lp);If=l(xE,"purchase/purchase.go"),xE.forEach(n),Lf=l(vs," 파일의 "),Np=o(vs,"CODE",{});var hE=u(Np);Nf=l(hE,"CompletePurchase"),hE.forEach(n),Tf=l(vs," 메소드에서 "),Tp=o(vs,"EM",{});var RE=u(Tp);Hf=l(RE,"coffeebux"),RE.forEach(n),Uf=l(vs," 스탬프를 쌓는 로직을 추가한다."),vs.forEach(n),Jc=i(s),H(Zs.$$.fragment,s),Qc=i(s),S=o(s,"P",{});var ms=u(S);Hp=o(ms,"CODE",{});var ME=u(Hp);Gf=l(ME,"CompletePurchase"),ME.forEach(n),Ff=l(ms,"의 파라미터로 "),Up=o(ms,"CODE",{});var OE=u(Up);jf=l(OE,"coffeeBuxCard"),OE.forEach(n),Kf=l(ms,"를 추가하였는데, 고객이 멤버십을 가지고 있지 않을 수 있기 때문에 "),Gp=o(ms,"CODE",{});var BE=u(Gp);Vf=l(BE,"nil"),BE.forEach(n),Xf=l(ms," 여부를 검사해야 한다. 검사 이후에는 단지 "),Fp=o(ms,"CODE",{});var AE=u(Fp);qf=l(AE,"AddStamp"),AE.forEach(n),Wf=l(ms," 메소드를 호출함으로써, 아주 쉽게 멤버십 프로그램을 구현할 수 있다."),ms.forEach(n),Yc=i(s),gc=o(s,"BR",{}),sl=i(s),cs=o(s,"P",{});var Na=u(cs);zf=l(Na,"이제 결제 수단으로 CoffeeBux를 사용할 수 있도록 구현해야 하는데, 이는 결제 도메인과 멤버십 도메인에 모두 속하기 때문에 어디에 구현해야 할지 고민이 될 수 있다. 이를 구현하는 데는 여러 가지 방법이 있을 수 있으며, 정답은 없다. 이번 예제에서는 결제 도메인에 구현할 것이다. "),jp=o(Na,"CODE",{});var IE=u(jp);Zf=l(IE,"purchase/purchase.go"),IE.forEach(n),Jf=l(Na," 파일을 열어 다음과 같이 "),Kp=o(Na,"CODE",{});var LE=u(Kp);Qf=l(LE,"Pay"),LE.forEach(n),Yf=l(Na," 메소드를 추가한다."),Na.forEach(n),nl=i(s),H(Js.$$.fragment,s),al=i(s),ba=o(s,"P",{});var NE=u(ba);gf=l(NE,"이와 같이 사용할 수 있는 무료 음료의 수를 확인하고, 충분한 음료가 있다면 무료 음료의 수를 차감한다."),NE.forEach(n),tl=i(s),pl=o(s,"BR",{}),el=i(s),A=o(s,"P",{});var vn=u(A);s1=l(vn,"남은 것은 구매 서비스의 "),Vp=o(vn,"CODE",{});var TE=u(Vp);n1=l(TE,"CompletePurchase"),TE.forEach(n),a1=l(vn," 메소드에서 결제 수단으로 CoffeeBux를 사용할 수 있도록 구현하는 것이다. "),Xp=o(vn,"CODE",{});var HE=u(Xp);t1=l(HE,"purchase/purchase.go"),HE.forEach(n),p1=l(vn," 파일을 열어 다음과 같이 "),qp=o(vn,"CODE",{});var UE=u(qp);e1=l(UE,"CompletePurchase"),UE.forEach(n),o1=l(vn," 메소드를 수정한다."),vn.forEach(n),ol=i(s),H(Qs.$$.fragment,s),cl=i(s),Ys=o(s,"P",{});var tu=u(Ys);c1=l(tu,`이와 같이 결제 수단으로 CoffeeBux를 사용할 수 있도록 구현하였다.
이 때 CoffeeBux를 사용하여도 `),Wp=o(tu,"CODE",{});var GE=u(Wp);l1=l(GE,"AddStamp"),GE.forEach(n),u1=l(tu," 메소드를 호출하여 멤버십 포인트가 쌓이도록 구현하였는데, 이러한 비즈니스 불변성은 도메인 전문가와의 대화를 통해 확인할 수 있다."),tu.forEach(n),ll=i(s),ul=o(s,"BR",{}),rl=o(s,"BR",{}),il=i(s),gs=o(s,"H3",{id:!0});var rd=u(gs);sn=o(rd,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var FE=u(sn);zp=o(FE,"SPAN",{class:!0}),u(zp).forEach(n),FE.forEach(n),r1=l(rd,"매장별 할인 캠페인 구현"),rd.forEach(n),kl=i(s),ls=o(s,"P",{});var Ta=u(ls);i1=l(Ta,"매장별 할인 정보를 저장하기 위해서는 레포지토리 계층이 필요하다. "),Zp=o(Ta,"CODE",{});var jE=u(Zp);k1=l(jE,"store"),jE.forEach(n),f1=l(Ta," 폴더에 "),Jp=o(Ta,"CODE",{});var KE=u(Jp);d1=l(KE,"repository.go"),KE.forEach(n),E1=l(Ta," 파일을 생성하고, 다음과 같이 작성한다."),Ta.forEach(n),fl=i(s),H(nn.$$.fragment,s),dl=i(s),wa=o(s,"P",{});var VE=u(wa);v1=l(VE,"이 코드는 이전의 레포지토리 레이어와 비슷하다. 다만 현재 각각의 레포지토리 레이어에서 Mongo 연결 풀을 중복으로 생성하고 있는데, 이를 다른 패키지로 분리하여 공유하는 것이 향후 개선사항이 될 수 있다."),VE.forEach(n),El=i(s),X=o(s,"P",{});var jn=u(X);Qp=o(jn,"CODE",{});var XE=u(Qp);m1=l(XE,"GetStoreDiscount"),XE.forEach(n),_1=l(jn," 메소드를 사용할 때 에러 체크를 하는 것을 알 수있는데, 만약 "),Yp=o(jn,"CODE",{});var qE=u(Yp);b1=l(qE,"ErrNoDocuments"),qE.forEach(n),w1=l(jn," 에러가 발생하면 할인이 적용되지 않은 것이므로 "),gp=o(jn,"CODE",{});var WE=u(gp);y1=l(WE,"ErrNoDiscount"),WE.forEach(n),C1=l(jn," 에러를 반환하며, 이는 실제 에러라기보다는 할인이 적용되지 않았음을 명시적으로 알리는 것이다."),jn.forEach(n),vl=i(s),ml=o(s,"BR",{}),_l=i(s),us=o(s,"P",{});var Ha=u(us);D1=l(Ha,"이렇게 구현된 매장별 할인을 구매 서비스에 추가할 것이다. "),se=o(Ha,"CODE",{});var zE=u(se);P1=l(zE,"purchase/purchase.go"),zE.forEach(n),$1=l(Ha," 파일을 열어 "),ne=o(Ha,"CODE",{});var ZE=u(ne);S1=l(ZE,"StoreService"),ZE.forEach(n),x1=l(Ha," 인터페이스를 정의하고, 이를 구매 서비스 구조체에 추가한다."),Ha.forEach(n),bl=i(s),Nn=o(s,"PRE",{class:!0});var X3=u(Nn);X3.forEach(n),wl=i(s),an=o(s,"P",{});var pu=u(an);h1=l(pu,"이후 "),ae=o(pu,"CODE",{});var JE=u(ae);R1=l(JE,"CompletePurchase"),JE.forEach(n),M1=l(pu," 메소드에서 매장별 할인을 적용하는 로직을 추가한다."),pu.forEach(n),yl=i(s),H(tn.$$.fragment,s),Cl=i(s),ya=o(s,"P",{});var QE=u(ya);O1=l(QE,"이렇게 이것저것 추가하고 나니 가독성도 떨어지고 도메인이 복잡해졌다. 리팩토링이 필요해 보인다."),QE.forEach(n),Dl=i(s),H(pn.$$.fragment,s),Pl=i(s),en=o(s,"P",{});var eu=u(en);B1=l(eu,"이와 같이 "),te=o(eu,"CODE",{});var YE=u(te);A1=l(YE,"calculateStoreSpecificDiscount"),YE.forEach(n),I1=l(eu,"함수로 따로 분리하였고, 훨씬 더 보기 깔끔해진 만큼 도메인 전문가와 이야기하기 더 쉬울 것이다."),eu.forEach(n),$l=i(s),Sl=o(s,"BR",{}),xl=i(s),I=o(s,"P",{});var mn=u(I);L1=l(mn,"마지막으로 "),pe=o(mn,"CODE",{});var gE=u(pe);N1=l(gE,"store/store.go"),gE.forEach(n),T1=l(mn,"를 열어 "),ee=o(mn,"CODE",{});var s3=u(ee);H1=l(s3,"StoreService"),s3.forEach(n),U1=l(mn,"를 충족시키는 "),oe=o(mn,"CODE",{});var n3=u(oe);G1=l(n3,"Service"),n3.forEach(n),F1=l(mn," 구조체를 작성한다."),mn.forEach(n),hl=i(s),Tn=o(s,"PRE",{class:!0});var q3=u(Tn);q3.forEach(n),Rl=i(s),Ml=o(s,"BR",{}),Ol=i(s),Ca=o(s,"P",{});var a3=u(Ca);j1=l(a3,"이로써 Domain Driven Design 기반의 전체 서비스가 완성되었다. 지금까지의 작업이 반영된 패키지 구조는 다음과 같다."),a3.forEach(n),Bl=i(s),Hn=o(s,"PRE",{class:!0});var W3=u(Hn);W3.forEach(n),Al=i(s),Il=o(s,"BR",{}),Ll=o(s,"BR",{}),Nl=i(s),on=o(s,"H2",{id:!0});var id=u(on);cn=o(id,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var t3=u(cn);ce=o(t3,"SPAN",{class:!0}),u(ce).forEach(n),t3.forEach(n),K1=l(id,"마치며"),id.forEach(n),Tl=i(s),Hl=o(s,"HR",{}),Ul=i(s),Da=o(s,"P",{});var p3=u(Da);V1=l(p3,`이렇게 모놀리식 아키텍처에 DDD를 적용해보았다.
현재로서는 서비스만 구현되어 있지만 REST API 등 인터페이스가 정의된다면 어떻게 구현해야 할지 고민해보는 것도 좋을 것 같다.
또한 유닛 테스트 또는 통합 테스트를 작성해보는 것도 좋을 것 같다.`),p3.forEach(n),Gl=i(s),Pa=o(s,"P",{});var e3=u(Pa);X1=l(e3,`DDD가 적용되지 않은 기존 코드에서, 이 포스트에서와 같이 레포지토리 패턴을 사용하고 도메인 객체를 사용하도록 리팩토링하는 것은 꽤 노력이 요구되는 일일 수 있다.
하지만 인프라스트럭처 레이어를 적용하는 것은 꽤 권장되는 방법이다.
비즈니스 로직과 인프라스트럭처를 분리함으로써, 비즈니스 로직을 테스트하기가 훨씬 쉬워지기 때문이다.`),e3.forEach(n),Fl=i(s),jl=o(s,"BR",{}),Kl=o(s,"BR",{}),Vl=i(s),ln=o(s,"H2",{id:!0});var kd=u(ln);un=o(kd,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var o3=u(un);le=o(o3,"SPAN",{class:!0}),u(le).forEach(n),o3.forEach(n),q1=l(kd,"References"),kd.forEach(n),Xl=i(s),ql=o(s,"HR",{}),Wl=i(s),q=o(s,"CENTER",{});var Kn=u(q);ue=o(Kn,"P",{});var c3=u(ue);W1=l(c3,"["),c3.forEach(n),z1=i(Kn),H(Un.$$.fragment,Kn),Z1=l(Kn,`
](https://learning.oreilly.com/library/view/domain-driven-design-with/9781804613450/) `),J1=o(Kn,"BR",{}),Q1=l(Kn,`
[Matthew Boyle, Domain-Driven Design with Golang』, O'Reilly Media, Inc.](https://learning.oreilly.com/library/view/domain-driven-design-with/9781804613450/)`),Kn.forEach(n),this.h()},h(){f(Ua,"class","icon icon-link"),f(bs,"aria-hidden","true"),f(bs,"tabindex","-1"),f(bs,"href","#모놀리식-애플리케이션이란"),f(_s,"id","모놀리식-애플리케이션이란"),f(za,"class","icon icon-link"),f(ys,"aria-hidden","true"),f(ys,"tabindex","-1"),f(ys,"href","#애플리케이션의-요구사항"),f(ws,"id","애플리케이션의-요구사항"),f(it,"class","icon icon-link"),f(Ps,"aria-hidden","true"),f(Ps,"tabindex","-1"),f(Ps,"href","#프로젝트-시작"),f(Ds,"id","프로젝트-시작"),f(_n,"class","language-bash"),f(dt,"class","icon icon-link"),f(Ss,"aria-hidden","true"),f(Ss,"tabindex","-1"),f(Ss,"href","#도메인-모델-작성"),f($s,"id","도메인-모델-작성"),f(bn,"class","language-go"),f(wn,"class","language-go"),f(yn,"class","language-go"),f(Cn,"class","language-go"),f(Dn,"class","language-go"),f(Pn,"class","language-go"),f(Sn,"class","language-go"),f(xn,"class","language-bash"),f(Qt,"class","icon icon-link"),f(Ms,"aria-hidden","true"),f(Ms,"tabindex","-1"),f(Ms,"href","#도메인-서비스-작성"),f(Rs,"id","도메인-서비스-작성"),f(hn,"class","language-go"),f(Rn,"class","language-bash"),f(kp,"class","icon icon-link"),f(Ts,"aria-hidden","true"),f(Ts,"tabindex","-1"),f(Ts,"href","#레포지토리-작성"),f(Ns,"id","레포지토리-작성"),f(Mn,"class","language-bash"),f(On,"class","language-go"),f(Bn,"class","language-bash"),f($p,"class","icon icon-link"),f(Fs,"aria-hidden","true"),f(Fs,"tabindex","-1"),f(Fs,"href","#인프라스트럭처-서비스-작성"),f(Gs,"id","인프라스트럭처-서비스-작성"),f(An,"class","language-bash"),f(In,"class","language-go"),f(Op,"class","icon icon-link"),f(Xs,"aria-hidden","true"),f(Xs,"tabindex","-1"),f(Xs,"href","#기능-추가-구현하기"),f(Vs,"id","기능-추가-구현하기"),f(Bp,"class","icon icon-link"),f(Ws,"aria-hidden","true"),f(Ws,"tabindex","-1"),f(Ws,"href","#멤버십-프로그램-구현"),f(qs,"id","멤버십-프로그램-구현"),f(Ln,"class","language-go"),f(zp,"class","icon icon-link"),f(sn,"aria-hidden","true"),f(sn,"tabindex","-1"),f(sn,"href","#매장별-할인-캠페인-구현"),f(gs,"id","매장별-할인-캠페인-구현"),f(Nn,"class","language-go"),f(Tn,"class","language-go"),f(Hn,"class","language-bash"),f(ce,"class","icon icon-link"),f(cn,"aria-hidden","true"),f(cn,"tabindex","-1"),f(cn,"href","#마치며"),f(on,"id","마치며"),f(le,"class","icon icon-link"),f(un,"aria-hidden","true"),f(un,"tabindex","-1"),f(un,"href","#references"),f(ln,"id","references")},m(s,t){p(s,k,t),a(k,v),p(s,d,t),p(s,E,t),p(s,we,t),p(s,ye,t),p(s,_s,t),a(_s,bs),a(bs,Ua),a(_s,ou),p(s,Ce,t),p(s,De,t),p(s,Pe,t),p(s,Vn,t),a(Vn,cu),p(s,$e,t),p(s,Xn,t),a(Xn,lu),p(s,Se,t),p(s,J,t),a(J,Ga),a(Ga,uu),a(J,ru),a(J,Fa),a(Fa,iu),a(J,ku),a(J,ja),a(ja,fu),p(s,xe,t),p(s,qn,t),a(qn,du),p(s,he,t),p(s,y,t),a(y,Ka),a(Ka,Eu),a(y,vu),a(y,Va),a(Va,mu),a(y,_u),a(y,Xa),a(Xa,bu),a(y,wu),a(y,qa),a(qa,yu),a(y,Cu),a(y,Wa),a(Wa,Du),p(s,Re,t),p(s,Wn,t),a(Wn,Pu),p(s,Me,t),p(s,Oe,t),p(s,Be,t),p(s,Ae,t),p(s,ws,t),a(ws,ys),a(ys,za),a(ws,$u),p(s,Ie,t),p(s,Q,t),a(Q,Su),a(Q,Za),a(Za,xu),a(Q,hu),a(Q,Ja),a(Ja,Ru),a(Q,Mu),p(s,Le,t),p(s,zn,t),a(zn,Ou),p(s,Ne,t),p(s,Cs,t),a(Cs,Bu),a(Cs,Qa),a(Qa,Au),a(Cs,Iu),p(s,Te,t),p(s,Zn,t),a(Zn,Lu),p(s,He,t),p(s,Ue,t),p(s,Ge,t),p(s,Jn,t),a(Jn,Nu),p(s,Fe,t),p(s,Y,t),a(Y,Qn),a(Qn,Ya),a(Ya,Tu),a(Qn,Hu),a(Y,Uu),a(Y,Yn),a(Yn,ga),a(ga,Gu),a(Yn,Fu),a(Y,ju),a(Y,gn),a(gn,st),a(st,Ku),a(gn,Vu),p(s,je,t),p(s,sa,t),a(sa,Xu),p(s,Ke,t),p(s,h,t),a(h,nt),a(nt,qu),a(h,Wu),a(h,at),a(at,zu),a(h,Zu),a(h,tt),a(tt,Ju),a(h,Qu),a(h,pt),a(pt,Yu),p(s,Ve,t),p(s,na,t),a(na,gu),p(s,Xe,t),p(s,_,t),a(_,et),a(et,sr),a(_,nr),a(_,ot),a(ot,ar),a(_,tr),a(_,ct),a(ct,pr),a(_,er),a(_,lt),a(lt,or),a(_,cr),a(_,ut),a(ut,lr),a(_,ur),a(_,rt),a(rt,rr),p(s,qe,t),p(s,aa,t),a(aa,ir),p(s,We,t),p(s,ze,t),p(s,Ze,t),p(s,Je,t),p(s,Ds,t),a(Ds,Ps),a(Ps,it),a(Ds,kr),p(s,Qe,t),p(s,Ye,t),p(s,ge,t),p(s,ta,t),a(ta,fr),p(s,so,t),p(s,_n,t),_n.innerHTML=l3,p(s,no,t),p(s,g,t),a(g,dr),a(g,kt),a(kt,Er),a(g,vr),a(g,ft),a(ft,mr),a(g,_r),p(s,ao,t),p(s,$s,t),a($s,Ss),a(Ss,dt),a($s,br),p(s,to,t),p(s,ss,t),a(ss,wr),a(ss,Et),a(Et,yr),a(ss,Cr),a(ss,vt),a(vt,Dr),a(ss,Pr),p(s,po,t),p(s,ks,t),a(ks,mt),a(mt,$r),a(ks,Sr),a(ks,_t),a(_t,xr),a(ks,hr),p(s,eo,t),p(s,bn,t),bn.innerHTML=u3,p(s,oo,t),p(s,K,t),a(K,bt),a(bt,Rr),a(K,Mr),a(K,wt),a(wt,Or),a(K,Br),a(K,yt),a(yt,Ar),a(K,Ir),p(s,co,t),p(s,lo,t),p(s,uo,t),p(s,C,t),a(C,Lr),a(C,Ct),a(Ct,Nr),a(C,Tr),a(C,Dt),a(Dt,Hr),a(C,Ur),a(C,Pt),a(Pt,Gr),a(C,Fr),a(C,$t),a($t,jr),a(C,Kr),p(s,ro,t),p(s,wn,t),wn.innerHTML=r3,p(s,io,t),p(s,pa,t),a(pa,Vr),p(s,ko,t),p(s,fo,t),p(s,Eo,t),p(s,ea,t),a(ea,Xr),p(s,vo,t),p(s,oa,t),a(oa,qr),p(s,mo,t),p(s,R,t),a(R,St),a(St,Wr),a(R,zr),a(R,xt),a(xt,Zr),a(R,Jr),a(R,ht),a(ht,Qr),a(R,Yr),a(R,Rt),a(Rt,gr),p(s,_o,t),p(s,fs,t),a(fs,Mt),a(Mt,si),a(fs,ni),a(fs,Ot),a(Ot,ai),a(fs,ti),p(s,bo,t),p(s,yn,t),yn.innerHTML=i3,p(s,wo,t),p(s,yo,t),p(s,Co,t),p(s,xs,t),a(xs,pi),a(xs,Bt),a(Bt,ei),a(xs,oi),p(s,Do,t),p(s,Cn,t),Cn.innerHTML=k3,p(s,Po,t),p(s,$o,t),p(s,So,t),p(s,ca,t),a(ca,ci),p(s,xo,t),p(s,w,t),a(w,At),a(At,li),a(w,ui),a(w,It),a(It,ri),a(w,ii),a(w,Lt),a(Lt,ki),a(w,fi),a(w,Nt),a(Nt,di),a(w,Ei),a(w,Tt),a(Tt,vi),a(w,mi),p(s,ho,t),p(s,Dn,t),Dn.innerHTML=f3,p(s,Ro,t),p(s,M,t),a(M,_i),a(M,Ht),a(Ht,bi),a(M,wi),a(M,Ut),a(Ut,yi),a(M,Ci),a(M,Gt),a(Gt,Di),a(M,Pi),p(s,Mo,t),p(s,hs,t),a(hs,$i),a(hs,Ft),a(Ft,Si),a(hs,xi),p(s,Oo,t),p(s,Bo,t),p(s,Ao,t),p(s,la,t),a(la,hi),p(s,Io,t),p(s,P,t),a(P,jt),a(jt,Ri),a(P,Mi),a(P,Kt),a(Kt,Oi),a(P,Bi),a(P,Vt),a(Vt,Ai),a(P,Ii),a(P,Xt),a(Xt,Li),a(P,Ni),p(s,Lo,t),p(s,Pn,t),Pn.innerHTML=d3,p(s,No,t),p(s,$n,t),a($n,qt),a(qt,Ti),a($n,Hi),p(s,To,t),p(s,Ho,t),p(s,Uo,t),p(s,D,t),a(D,Ui),a(D,Wt),a(Wt,Gi),a(D,Fi),a(D,zt),a(zt,ji),a(D,Ki),a(D,Zt),a(Zt,Vi),a(D,Xi),a(D,Jt),a(Jt,qi),a(D,Wi),p(s,Go,t),p(s,Sn,t),Sn.innerHTML=E3,p(s,Fo,t),p(s,jo,t),p(s,Ko,t),p(s,ua,t),a(ua,zi),p(s,Vo,t),p(s,xn,t),xn.innerHTML=v3,p(s,Xo,t),p(s,qo,t),p(s,Wo,t),p(s,zo,t),p(s,Rs,t),a(Rs,Ms),a(Ms,Qt),a(Rs,Zi),p(s,Zo,t),p(s,Os,t),a(Os,Ji),a(Os,Yt),a(Yt,Qi),a(Os,Yi),p(s,Jo,t),p(s,ns,t),a(ns,gt),a(gt,gi),a(ns,sk),a(ns,sp),a(sp,nk),a(ns,ak),a(ns,np),a(np,tk),p(s,Qo,t),p(s,Bs,t),a(Bs,pk),a(Bs,ap),a(ap,ek),a(Bs,ok),p(s,Yo,t),U(As,s,t),p(s,go,t),p(s,Is,t),a(Is,ck),a(Is,tp),a(tp,lk),a(Is,uk),p(s,sc,t),U(Ls,s,t),p(s,nc,t),p(s,O,t),a(O,rk),a(O,pp),a(pp,ik),a(O,kk),a(O,ep),a(ep,fk),a(O,dk),a(O,op),a(op,Ek),a(O,vk),p(s,ac,t),p(s,tc,t),p(s,pc,t),p(s,V,t),a(V,cp),a(cp,mk),a(V,_k),a(V,lp),a(lp,bk),a(V,wk),a(V,up),a(up,yk),a(V,Ck),p(s,ec,t),p(s,as,t),a(as,Dk),a(as,rp),a(rp,Pk),a(as,$k),a(as,ip),a(ip,Sk),a(as,xk),p(s,oc,t),p(s,hn,t),hn.innerHTML=m3,p(s,cc,t),p(s,ra,t),a(ra,hk),p(s,lc,t),p(s,ia,t),a(ia,Rk),p(s,uc,t),p(s,Rn,t),Rn.innerHTML=_3,p(s,rc,t),p(s,ic,t),p(s,kc,t),p(s,fc,t),p(s,Ns,t),a(Ns,Ts),a(Ts,kp),a(Ns,Mk),p(s,dc,t),p(s,ka,t),a(ka,Ok),p(s,Ec,t),p(s,Mn,t),Mn.innerHTML=b3,p(s,vc,t),p(s,ts,t),a(ts,Bk),a(ts,fp),a(fp,Ak),a(ts,Ik),a(ts,dp),a(dp,Lk),a(ts,Nk),p(s,mc,t),U(Hs,s,t),p(s,_c,t),p(s,ps,t),a(ps,Tk),a(ps,Ep),a(Ep,Hk),a(ps,Uk),a(ps,vp),a(vp,Gk),a(ps,Fk),p(s,bc,t),p(s,On,t),On.innerHTML=w3,p(s,wc,t),p(s,b,t),a(b,jk),a(b,mp),a(mp,Kk),a(b,Vk),a(b,_p),a(_p,Xk),a(b,qk),a(b,bp),a(bp,Wk),a(b,zk),a(b,wp),a(wp,Zk),a(b,Jk),a(b,yp),a(yp,Qk),a(b,Yk),p(s,yc,t),p(s,B,t),a(B,gk),a(B,Cp),a(Cp,sf),a(B,nf),a(B,Dp),a(Dp,af),a(B,tf),a(B,Pp),a(Pp,pf),a(B,ef),p(s,Cc,t),U(Us,s,t),p(s,Dc,t),p(s,fa,t),a(fa,of),p(s,Pc,t),p(s,da,t),a(da,cf),p(s,$c,t),p(s,Bn,t),Bn.innerHTML=y3,p(s,Sc,t),p(s,xc,t),p(s,hc,t),p(s,Rc,t),p(s,Gs,t),a(Gs,Fs),a(Fs,$p),a(Gs,lf),p(s,Mc,t),p(s,js,t),a(js,uf),a(js,Sp),a(Sp,rf),a(js,kf),p(s,Oc,t),p(s,Ea,t),a(Ea,ff),p(s,Bc,t),p(s,An,t),An.innerHTML=C3,p(s,Ac,t),p(s,va,t),a(va,df),p(s,Ic,t),p(s,es,t),a(es,Ef),a(es,xp),a(xp,vf),a(es,mf),a(es,hp),a(hp,_f),a(es,bf),p(s,Lc,t),p(s,In,t),In.innerHTML=D3,p(s,Nc,t),p(s,os,t),a(os,wf),a(os,Rp),a(Rp,yf),a(os,Cf),a(os,Mp),a(Mp,Df),a(os,Pf),p(s,Tc,t),U(Ks,s,t),p(s,Hc,t),p(s,ma,t),a(ma,$f),p(s,Uc,t),p(s,Gc,t),p(s,Fc,t),p(s,jc,t),p(s,Vs,t),a(Vs,Xs),a(Xs,Op),a(Vs,Sf),p(s,Kc,t),p(s,Vc,t),p(s,Xc,t),p(s,_a,t),a(_a,xf),p(s,qc,t),p(s,qs,t),a(qs,Ws),a(Ws,Bp),a(qs,hf),p(s,Wc,t),p(s,zs,t),a(zs,Rf),a(zs,Ap),a(Ap,Mf),a(zs,Of),p(s,zc,t),p(s,Ln,t),Ln.innerHTML=P3,p(s,Zc,t),p(s,$,t),a($,Ip),a(Ip,Bf),a($,Af),a($,Lp),a(Lp,If),a($,Lf),a($,Np),a(Np,Nf),a($,Tf),a($,Tp),a(Tp,Hf),a($,Uf),p(s,Jc,t),U(Zs,s,t),p(s,Qc,t),p(s,S,t),a(S,Hp),a(Hp,Gf),a(S,Ff),a(S,Up),a(Up,jf),a(S,Kf),a(S,Gp),a(Gp,Vf),a(S,Xf),a(S,Fp),a(Fp,qf),a(S,Wf),p(s,Yc,t),p(s,gc,t),p(s,sl,t),p(s,cs,t),a(cs,zf),a(cs,jp),a(jp,Zf),a(cs,Jf),a(cs,Kp),a(Kp,Qf),a(cs,Yf),p(s,nl,t),U(Js,s,t),p(s,al,t),p(s,ba,t),a(ba,gf),p(s,tl,t),p(s,pl,t),p(s,el,t),p(s,A,t),a(A,s1),a(A,Vp),a(Vp,n1),a(A,a1),a(A,Xp),a(Xp,t1),a(A,p1),a(A,qp),a(qp,e1),a(A,o1),p(s,ol,t),U(Qs,s,t),p(s,cl,t),p(s,Ys,t),a(Ys,c1),a(Ys,Wp),a(Wp,l1),a(Ys,u1),p(s,ll,t),p(s,ul,t),p(s,rl,t),p(s,il,t),p(s,gs,t),a(gs,sn),a(sn,zp),a(gs,r1),p(s,kl,t),p(s,ls,t),a(ls,i1),a(ls,Zp),a(Zp,k1),a(ls,f1),a(ls,Jp),a(Jp,d1),a(ls,E1),p(s,fl,t),U(nn,s,t),p(s,dl,t),p(s,wa,t),a(wa,v1),p(s,El,t),p(s,X,t),a(X,Qp),a(Qp,m1),a(X,_1),a(X,Yp),a(Yp,b1),a(X,w1),a(X,gp),a(gp,y1),a(X,C1),p(s,vl,t),p(s,ml,t),p(s,_l,t),p(s,us,t),a(us,D1),a(us,se),a(se,P1),a(us,$1),a(us,ne),a(ne,S1),a(us,x1),p(s,bl,t),p(s,Nn,t),Nn.innerHTML=$3,p(s,wl,t),p(s,an,t),a(an,h1),a(an,ae),a(ae,R1),a(an,M1),p(s,yl,t),U(tn,s,t),p(s,Cl,t),p(s,ya,t),a(ya,O1),p(s,Dl,t),U(pn,s,t),p(s,Pl,t),p(s,en,t),a(en,B1),a(en,te),a(te,A1),a(en,I1),p(s,$l,t),p(s,Sl,t),p(s,xl,t),p(s,I,t),a(I,L1),a(I,pe),a(pe,N1),a(I,T1),a(I,ee),a(ee,H1),a(I,U1),a(I,oe),a(oe,G1),a(I,F1),p(s,hl,t),p(s,Tn,t),Tn.innerHTML=S3,p(s,Rl,t),p(s,Ml,t),p(s,Ol,t),p(s,Ca,t),a(Ca,j1),p(s,Bl,t),p(s,Hn,t),Hn.innerHTML=x3,p(s,Al,t),p(s,Il,t),p(s,Ll,t),p(s,Nl,t),p(s,on,t),a(on,cn),a(cn,ce),a(on,K1),p(s,Tl,t),p(s,Hl,t),p(s,Ul,t),p(s,Da,t),a(Da,V1),p(s,Gl,t),p(s,Pa,t),a(Pa,X1),p(s,Fl,t),p(s,jl,t),p(s,Kl,t),p(s,Vl,t),p(s,ln,t),a(ln,un),a(un,le),a(ln,q1),p(s,Xl,t),p(s,ql,t),p(s,Wl,t),p(s,q,t),a(q,ue),a(ue,W1),a(q,z1),U(Un,q,null),a(q,Z1),a(q,J1),a(q,Q1),zl=!0},p(s,[t]){const $a={};t&1&&($a.$$scope={dirty:t,ctx:s}),As.$set($a);const re={};t&1&&(re.$$scope={dirty:t,ctx:s}),Ls.$set(re);const ie={};t&1&&(ie.$$scope={dirty:t,ctx:s}),Hs.$set(ie);const ke={};t&1&&(ke.$$scope={dirty:t,ctx:s}),Us.$set(ke);const ds={};t&1&&(ds.$$scope={dirty:t,ctx:s}),Ks.$set(ds);const fe={};t&1&&(fe.$$scope={dirty:t,ctx:s}),Zs.$set(fe);const de={};t&1&&(de.$$scope={dirty:t,ctx:s}),Js.$set(de);const Ee={};t&1&&(Ee.$$scope={dirty:t,ctx:s}),Qs.$set(Ee);const ve={};t&1&&(ve.$$scope={dirty:t,ctx:s}),nn.$set(ve);const x={};t&1&&(x.$$scope={dirty:t,ctx:s}),tn.$set(x);const me={};t&1&&(me.$$scope={dirty:t,ctx:s}),pn.$set(me)},i(s){zl||(G(As.$$.fragment,s),G(Ls.$$.fragment,s),G(Hs.$$.fragment,s),G(Us.$$.fragment,s),G(Ks.$$.fragment,s),G(Zs.$$.fragment,s),G(Js.$$.fragment,s),G(Qs.$$.fragment,s),G(nn.$$.fragment,s),G(tn.$$.fragment,s),G(pn.$$.fragment,s),G(Un.$$.fragment,s),zl=!0)},o(s){F(As.$$.fragment,s),F(Ls.$$.fragment,s),F(Hs.$$.fragment,s),F(Us.$$.fragment,s),F(Ks.$$.fragment,s),F(Zs.$$.fragment,s),F(Js.$$.fragment,s),F(Qs.$$.fragment,s),F(nn.$$.fragment,s),F(tn.$$.fragment,s),F(pn.$$.fragment,s),F(Un.$$.fragment,s),zl=!1},d(s){s&&n(k),s&&n(d),s&&n(E),s&&n(we),s&&n(ye),s&&n(_s),s&&n(Ce),s&&n(De),s&&n(Pe),s&&n(Vn),s&&n($e),s&&n(Xn),s&&n(Se),s&&n(J),s&&n(xe),s&&n(qn),s&&n(he),s&&n(y),s&&n(Re),s&&n(Wn),s&&n(Me),s&&n(Oe),s&&n(Be),s&&n(Ae),s&&n(ws),s&&n(Ie),s&&n(Q),s&&n(Le),s&&n(zn),s&&n(Ne),s&&n(Cs),s&&n(Te),s&&n(Zn),s&&n(He),s&&n(Ue),s&&n(Ge),s&&n(Jn),s&&n(Fe),s&&n(Y),s&&n(je),s&&n(sa),s&&n(Ke),s&&n(h),s&&n(Ve),s&&n(na),s&&n(Xe),s&&n(_),s&&n(qe),s&&n(aa),s&&n(We),s&&n(ze),s&&n(Ze),s&&n(Je),s&&n(Ds),s&&n(Qe),s&&n(Ye),s&&n(ge),s&&n(ta),s&&n(so),s&&n(_n),s&&n(no),s&&n(g),s&&n(ao),s&&n($s),s&&n(to),s&&n(ss),s&&n(po),s&&n(ks),s&&n(eo),s&&n(bn),s&&n(oo),s&&n(K),s&&n(co),s&&n(lo),s&&n(uo),s&&n(C),s&&n(ro),s&&n(wn),s&&n(io),s&&n(pa),s&&n(ko),s&&n(fo),s&&n(Eo),s&&n(ea),s&&n(vo),s&&n(oa),s&&n(mo),s&&n(R),s&&n(_o),s&&n(fs),s&&n(bo),s&&n(yn),s&&n(wo),s&&n(yo),s&&n(Co),s&&n(xs),s&&n(Do),s&&n(Cn),s&&n(Po),s&&n($o),s&&n(So),s&&n(ca),s&&n(xo),s&&n(w),s&&n(ho),s&&n(Dn),s&&n(Ro),s&&n(M),s&&n(Mo),s&&n(hs),s&&n(Oo),s&&n(Bo),s&&n(Ao),s&&n(la),s&&n(Io),s&&n(P),s&&n(Lo),s&&n(Pn),s&&n(No),s&&n($n),s&&n(To),s&&n(Ho),s&&n(Uo),s&&n(D),s&&n(Go),s&&n(Sn),s&&n(Fo),s&&n(jo),s&&n(Ko),s&&n(ua),s&&n(Vo),s&&n(xn),s&&n(Xo),s&&n(qo),s&&n(Wo),s&&n(zo),s&&n(Rs),s&&n(Zo),s&&n(Os),s&&n(Jo),s&&n(ns),s&&n(Qo),s&&n(Bs),s&&n(Yo),j(As,s),s&&n(go),s&&n(Is),s&&n(sc),j(Ls,s),s&&n(nc),s&&n(O),s&&n(ac),s&&n(tc),s&&n(pc),s&&n(V),s&&n(ec),s&&n(as),s&&n(oc),s&&n(hn),s&&n(cc),s&&n(ra),s&&n(lc),s&&n(ia),s&&n(uc),s&&n(Rn),s&&n(rc),s&&n(ic),s&&n(kc),s&&n(fc),s&&n(Ns),s&&n(dc),s&&n(ka),s&&n(Ec),s&&n(Mn),s&&n(vc),s&&n(ts),s&&n(mc),j(Hs,s),s&&n(_c),s&&n(ps),s&&n(bc),s&&n(On),s&&n(wc),s&&n(b),s&&n(yc),s&&n(B),s&&n(Cc),j(Us,s),s&&n(Dc),s&&n(fa),s&&n(Pc),s&&n(da),s&&n($c),s&&n(Bn),s&&n(Sc),s&&n(xc),s&&n(hc),s&&n(Rc),s&&n(Gs),s&&n(Mc),s&&n(js),s&&n(Oc),s&&n(Ea),s&&n(Bc),s&&n(An),s&&n(Ac),s&&n(va),s&&n(Ic),s&&n(es),s&&n(Lc),s&&n(In),s&&n(Nc),s&&n(os),s&&n(Tc),j(Ks,s),s&&n(Hc),s&&n(ma),s&&n(Uc),s&&n(Gc),s&&n(Fc),s&&n(jc),s&&n(Vs),s&&n(Kc),s&&n(Vc),s&&n(Xc),s&&n(_a),s&&n(qc),s&&n(qs),s&&n(Wc),s&&n(zs),s&&n(zc),s&&n(Ln),s&&n(Zc),s&&n($),s&&n(Jc),j(Zs,s),s&&n(Qc),s&&n(S),s&&n(Yc),s&&n(gc),s&&n(sl),s&&n(cs),s&&n(nl),j(Js,s),s&&n(al),s&&n(ba),s&&n(tl),s&&n(pl),s&&n(el),s&&n(A),s&&n(ol),j(Qs,s),s&&n(cl),s&&n(Ys),s&&n(ll),s&&n(ul),s&&n(rl),s&&n(il),s&&n(gs),s&&n(kl),s&&n(ls),s&&n(fl),j(nn,s),s&&n(dl),s&&n(wa),s&&n(El),s&&n(X),s&&n(vl),s&&n(ml),s&&n(_l),s&&n(us),s&&n(bl),s&&n(Nn),s&&n(wl),s&&n(an),s&&n(yl),j(tn,s),s&&n(Cl),s&&n(ya),s&&n(Dl),j(pn,s),s&&n(Pl),s&&n(en),s&&n($l),s&&n(Sl),s&&n(xl),s&&n(I),s&&n(hl),s&&n(Tn),s&&n(Rl),s&&n(Ml),s&&n(Ol),s&&n(Ca),s&&n(Bl),s&&n(Hn),s&&n(Al),s&&n(Il),s&&n(Ll),s&&n(Nl),s&&n(on),s&&n(Tl),s&&n(Hl),s&&n(Ul),s&&n(Da),s&&n(Gl),s&&n(Pa),s&&n(Fl),s&&n(jl),s&&n(Kl),s&&n(Vl),s&&n(ln),s&&n(Xl),s&&n(ql),s&&n(Wl),s&&n(q),j(Un)}}}const fv={title:"모놀리식 애플리케이션에 DDD 적용하기",date:"2023-07-20T00:00:00.000Z",excerpt:"Applying DDD to a Monolithic Application",categories:["Golang","Backend","Architecture","Domain Driven Design"],coverImage:"/post_img/Backend/Architecture/DDD/cover.png",coverWidth:16,coverHeight:9,indexed:!1,exposed:!0};class dv extends z3{constructor(k){super(),Z3(this,k,null,uv,J3,{})}}export{dv as default,fv as metadata};
