import{S as Gc,i as Mc,s as Nc,k as t,a as r,q as o,y as Fc,l as e,c as u,m as i,r as c,h as n,z as Ic,n as f,p as ac,b as p,E as a,A as $c,M as zc,g as Zc,d as qc,B as Uc}from"./index.d78780bf.js";import{I as Vc}from"./Image.605b14b5.js";function jc(tc){let Os,Wn,Ds,Xt,Xn,Yn,hn,gn,L,G,Is,Yt,sa,na,aa,ta,ea,M,N,$s,ht,la,xs,gt,pa,w,zs,se,ne,ps,ae,Bs,te,ee,le,Zs,pe,oe,qs,ce,oa,os,ec=`<code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">"fmt"</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">var</span> a <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">1</span>         <span class="token comment">// variable declaration</span>
	<span class="token keyword">var</span> b <span class="token builtin">string</span>          <span class="token comment">// declare string variable. it's value would be zero value of string ("")</span>
	<span class="token keyword">var</span> c<span class="token punctuation">,</span> d <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">,</span> <span class="token string">"456"</span> <span class="token comment">// multiple declaration. their type would be int, string</span>
	<span class="token keyword">var</span> <span class="token punctuation">(</span>                 <span class="token comment">// inside parentheses, variables can be declared line by line</span>
		e    <span class="token builtin">int</span>            <span class="token comment">//</span>
		f    <span class="token operator">=</span> <span class="token number">20</span>           <span class="token comment">// it's type would be int</span>
		g<span class="token punctuation">,</span> h <span class="token operator">=</span> <span class="token number">1.23</span><span class="token punctuation">,</span> <span class="token string">"4.56"</span> <span class="token comment">// multiple declaration, only specified their values</span>
		i<span class="token punctuation">,</span> j <span class="token builtin">string</span>         <span class="token comment">// only specified their types</span>
	<span class="token punctuation">)</span>
	<span class="token keyword">var</span> 한글개꿀ㅋㅋ <span class="token operator">=</span> <span class="token number">1</span> <span class="token comment">// 한글도 되긴 하는데 이러지 맙시다</span></code>`,ca,ia,ra,S,Us,ie,re,Vs,ue,fe,ua,cs,lc=`<code class="language-go">	k <span class="token operator">:=</span> <span class="token number">10</span>        <span class="token comment">// variable declaration by := operator</span>
	k<span class="token punctuation">,</span> l <span class="token operator">:=</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">20</span> <span class="token comment">// multiple declaration</span></code>`,fa,T,js,ke,be,Hs,me,ve,ka,R,is,F,Js,de,Ee,v,Ks,_e,ye,Qs,we,Pe,Ws,Ce,Re,Xs,Oe,De,Ys,xe,Be,hs,He,Ae,Se,k,Te,gs,Le,Ge,sn,Me,Ne,nn,Fe,Ie,an,$e,ze,tn,Ze,qe,en,Ue,Ve,ln,je,Je,pn,Ke,Qe,on,We,Xe,cn,Ye,he,ba,ma,va,I,ge,rn,sl,nl,da,rs,pc=`<code class="language-go">	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> e<span class="token punctuation">,</span> f<span class="token punctuation">,</span> g<span class="token punctuation">,</span> h<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> k<span class="token punctuation">,</span> l<span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>asd<span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>한글개꿀ㅋㅋ<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code>`,Ea,_a,ya,wa,$,z,un,al,Pa,Z,tl,fn,el,ll,Ca,us,oc=`<code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">"fmt"</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">const</span> a <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">1</span>         <span class="token comment">// typed</span>
	<span class="token keyword">const</span> b<span class="token punctuation">,</span> c <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">,</span> <span class="token string">"456"</span> <span class="token comment">// untyped, multiple declaration</span>
	<span class="token keyword">const</span> <span class="token punctuation">(</span>                 <span class="token comment">// decalaration constants using parentheses</span>
		d    <span class="token operator">=</span> <span class="token number">20</span>           <span class="token comment">// inside parentheses, constants can be declared line by line</span>
		e<span class="token punctuation">,</span> f <span class="token operator">=</span> <span class="token number">1.23</span><span class="token punctuation">,</span> <span class="token string">"4.56"</span> <span class="token comment">// multiple decalaration</span>
	<span class="token punctuation">)</span>

	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> e<span class="token punctuation">,</span> f<span class="token punctuation">)</span></code>`,Ra,Oa,Da,As,pl,xa,fs,cc=`<code class="language-go">	<span class="token keyword">var</span> i <span class="token builtin">int</span> <span class="token operator">=</span> a <span class="token comment">// constants can be value of variables when their types are same</span>
	<span class="token comment">// var f float64 = a // if types are different, it occurs error</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code>`,Ba,Ha,Aa,Sa,q,U,kn,ol,Ta,La,Ga,Ss,cl,Ma,Na,Fa,Ia,V,j,bn,il,$a,J,rl,mn,ul,fl,za,ks,ic=`<code class="language-go"><span class="token keyword">var</span> flag <span class="token builtin">bool</span> <span class="token comment">// initial value is false</span>
<span class="token keyword">var</span> isAwesome <span class="token operator">=</span> <span class="token boolean">true</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>flag<span class="token punctuation">,</span> isAwesome<span class="token punctuation">)</span></code>`,Za,qa,Ua,Va,K,Q,vn,kl,ja,Ts,bl,Ja,bs,rc=`<code class="language-go"><span class="token keyword">var</span> i8 <span class="token builtin">int8</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">128</span>                  <span class="token comment">// 8-bit signed integer</span>
<span class="token keyword">var</span> i64 <span class="token builtin">int64</span> <span class="token operator">=</span> <span class="token number">9223372036854775807</span> <span class="token comment">// 64-bit signed integer</span>
<span class="token keyword">var</span> u32 <span class="token builtin">uint32</span> <span class="token operator">=</span> <span class="token number">4294967295</span>         <span class="token comment">// 32-bit unsigned integer</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i8<span class="token punctuation">,</span> i64<span class="token punctuation">,</span> u32<span class="token punctuation">)</span></code>`,Ka,Qa,Wa,O,ml,dn,vl,dl,En,El,_l,Xa,ms,uc=`<code class="language-go"><span class="token keyword">var</span> b <span class="token builtin">byte</span> <span class="token operator">=</span> <span class="token number">123</span> <span class="token comment">// byte: 8-bit unsigned integer</span>
<span class="token keyword">var</span> uint8_ <span class="token builtin">uint8</span> <span class="token operator">=</span> <span class="token number">234</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>b <span class="token operator">==</span> uint8_<span class="token punctuation">)</span> <span class="token comment">// doesn't occur error</span></code>`,Ya,ha,ga,D,yl,_n,wl,Pl,Cl,Rl,st,vs,fc=`<code class="language-go"><span class="token keyword">var</span> i <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">9223372036854775807</span> <span class="token comment">// signed int. its size(32 or 64bits) is decided at compile time, determined by its hardware</span>
<span class="token keyword">var</span> ui <span class="token builtin">uint</span> <span class="token operator">=</span> <span class="token number">0</span>                 <span class="token comment">// unsigned int</span>
<span class="token comment">// fmt.Println(i == i64) occurs error</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> ui<span class="token punctuation">)</span></code>`,nt,at,tt,d,Ol,yn,Dl,xl,wn,Bl,Hl,Pn,Al,Sl,Cn,Tl,Ll,et,lt,pt,P,Gl,Rn,Ml,Nl,On,Fl,Il,Dn,$l,zl,ot,ds,kc=`<code class="language-go">fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token number">1_2_3_4</span><span class="token punctuation">,</span> <span class="token number">123_456_789_123123_456</span><span class="token punctuation">)</span> <span class="token comment">// numbers can distinguished by underbar(_)</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token number">0x1234</span><span class="token punctuation">,</span> <span class="token number">0o1234</span><span class="token punctuation">,</span> <span class="token number">0b1101</span><span class="token punctuation">)</span>          <span class="token comment">// hexadecimal, octal, binary representation</span></code>`,ct,it,rt,ut,W,X,xn,Zl,ft,x,ql,Bn,Ul,Vl,Hn,jl,Jl,kt,Es,bc=`<code class="language-go"><span class="token keyword">var</span> f32 <span class="token builtin">float32</span> <span class="token operator">=</span> <span class="token number">0.5</span>   <span class="token comment">// f32 : 32-bits floating point number</span>
<span class="token keyword">var</span> f64 <span class="token builtin">float32</span> <span class="token operator">=</span> <span class="token number">0.524</span> <span class="token comment">// f64 : 64-bits floating point number</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>f32<span class="token punctuation">,</span> f64<span class="token punctuation">)</span></code>`,bt,mt,vt,Y,Kl,An,Ql,Wl,dt,_s,mc=`<code class="language-go"><span class="token keyword">var</span> c64 <span class="token builtin">complex64</span> <span class="token operator">=</span> <span class="token function">complex</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">// c64 : 복소수(float32 + float32)</span>
c128 <span class="token operator">:=</span> <span class="token function">complex</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>             <span class="token comment">// c128 : 복소수(float64 + float64)</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>c64<span class="token punctuation">,</span> c128<span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">real</span><span class="token punctuation">(</span>c128<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token comment">// 실수부</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">imag</span><span class="token punctuation">(</span>c128<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token comment">// 허수부</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>cmplx<span class="token punctuation">.</span><span class="token function">Abs</span><span class="token punctuation">(</span>c128<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 절댓값..?</span></code>`,Et,_t,yt,wt,h,g,Sn,Xl,Pt,B,Yl,Tn,hl,gl,Ln,sp,np,Ct,ys,vc=`<code class="language-go"><span class="token keyword">var</span> s1 <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">"qwe"</span>
<span class="token keyword">var</span> s2 <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">"asd"</span>

fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s1 <span class="token operator">==</span> s2<span class="token punctuation">)</span> <span class="token comment">// comparison operators between string</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s1 <span class="token operator">></span> s2<span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s1 <span class="token operator">+</span> s2<span class="token punctuation">)</span></code>`,Rt,Ot,Dt,m,Gn,ap,tp,Mn,ep,lp,Nn,pp,op,Fn,cp,ip,In,rp,up,$n,fp,kp,xt,ws,dc=`<code class="language-go"><span class="token keyword">var</span> character <span class="token builtin">rune</span> <span class="token operator">=</span> <span class="token char">'a'</span> <span class="token comment">// rune represents a single character</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>character<span class="token punctuation">)</span></code>`,Bt,Ht,At,St,ss,ns,zn,bp,Tt,E,mp,Zn,vp,dp,qn,Ep,_p,Un,yp,wp,Vn,Pp,Cp,Lt,Ps,Ec=`<code class="language-go"><span class="token comment">// type conversion between int and float</span>
<span class="token keyword">var</span> x <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">10</span>
<span class="token keyword">var</span> y <span class="token builtin">float64</span> <span class="token operator">=</span> <span class="token number">30.2</span>
<span class="token keyword">var</span> z <span class="token builtin">float64</span> <span class="token operator">=</span> <span class="token function">float64</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> y
<span class="token keyword">var</span> d <span class="token builtin">int</span> <span class="token operator">=</span> x <span class="token operator">+</span> <span class="token function">int</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>z<span class="token punctuation">,</span> d<span class="token punctuation">)</span></code>`,Gt,Mt,Nt,Ft,as,ts,jn,Rp,It,$t,zt,C,Jn,Op,Dp,Cs,xp,Bp,Hp,Zt,qt,Ut,Vt;return Cs=new Vc({props:{alt:"Learning Go Book Cover",src:"https://learning.oreilly.com/covers/urn:orm:book:9781492077206/400w/"}}),{c(){Os=t("br"),Wn=r(),Ds=t("p"),Xt=o("본 글은 Golang을 공부하며 주요 내용이라 생각되는 것들을 기록해둔 자료이며, Ubuntu 20.04 LTS 기준으로 작성되었습니다."),Xn=r(),Yn=t("br"),hn=t("br"),gn=r(),L=t("h2"),G=t("a"),Is=t("span"),Yt=o("Variables and Constants"),sa=r(),na=t("hr"),aa=r(),ta=t("br"),ea=r(),M=t("h3"),N=t("a"),$s=t("span"),ht=o("Variables"),la=r(),xs=t("p"),gt=o("Go에서 변수는 아래와 같이 선언 및 초기화할 수 있다. 특이사항은 다음과 같다."),pa=r(),w=t("ol"),zs=t("li"),se=o("C/C++과는 달리, 타입이 변수명 뒤에 옴"),ne=r(),ps=t("li"),ae=o("변수를 생성하고 값을 할당하지 않는 C나 C++와는 달리, 변수를 생성하면 기본적으로 할당되는 값인 "),Bs=t("span"),te=o("zero value"),ee=o("가 존재함"),le=r(),Zs=t("li"),pe=o("변수가 선언만 되고 사용되지 않으면 에러가 발생함"),oe=r(),qs=t("li"),ce=o("권장되지는 않지만 전역변수도 됨"),oa=r(),os=t("pre"),ca=r(),ia=t("br"),ra=r(),S=t("p"),Us=t("code"),ie=o(":="),re=o(" 연산자를 활용하여 변수를 선언할 수도 있다. 변수의 타입은 초기화되는 값에 따라 결정된다. c++의 "),Vs=t("code"),ue=o("auto"),fe=o(" 키워드와 비슷한 듯 하다."),ua=r(),cs=t("pre"),fa=r(),T=t("p"),js=t("code"),ke=o(":="),be=o(" 연산자는 편리하지만 주의해서 사용해야 한다. "),Hs=t("span"),me=o("Shadowing"),ve=o("이 발생할 수도 있기 때문이다."),ka=r(),R=t("blockquote"),is=t("h3"),F=t("a"),Js=t("span"),de=o("Shadowing이란?"),Ee=r(),v=t("p"),Ks=t("code"),_e=o("var"),ye=o(` 키워드는 동일한 이름을 가진 변수를 선언할 때 에러가 발생하는데 반해,
위 예제에서는 `),Qs=t("code"),we=o("k"),Pe=o("가 선언되고, 그 아래 줄에서 "),Ws=t("code"),Ce=o("l"),Re=o("과 함께 "),Xs=t("code"),Oe=o("k"),De=o("가 다시 선언된 것을 확인할 수 있다("),Ys=t("code"),xe=o("k"),Be=o(`만 다시 선언하면 에러가 발생한다).
이 경우 해당 Block이 끝날 때까지, 앞서 선언한 `),hs=t("code"),He=o("k"),Ae=o("의 값인 10에 접근할 수 없게 된다."),Se=r(),k=t("p"),Te=o("이런 현상을 Shadowing이라고 하며, "),gs=t("code"),Le=o(":="),Ge=o(` 연산자를 사용할 때 주의해야 하는 이유이다.
특히 함수의 파라미터나, `),sn=t("code"),Me=o("fmt"),Ne=o("같은 패키지 이름이나, 심지어는 "),nn=t("code"),Fe=o("nil"),Ie=o(" 또는 "),an=t("code"),$e=o("false"),ze=o(` 같은 리터럴들도 Shadowing할 수 있다.
`),tn=t("code"),Ze=o("var"),qe=o(" 키워드는 함수의 타입을 명시해주는 효과도 있고 Shadowing의 염려가 없으므로 "),en=t("code"),Ue=o("var"),Ve=o(`가 조금 더 안전한 선택지이다.
반면 `),ln=t("code"),je=o("if"),Je=o(", "),pn=t("code"),Ke=o("switch"),Qe=o(", "),on=t("code"),We=o("for"),Xe=o("문이나 에러 핸들링 등에서는 "),cn=t("code"),Ye=o(":="),he=o("을 주로 사용한다."),ba=r(),ma=t("br"),va=r(),I=t("p"),ge=o("변수가 선언만 되고 사용되지 않으면 에러가 발생하니, "),rn=t("code"),sl=o("fmt.Println()"),nl=o(" 함수를 활용하여 모두 출력해주자."),da=r(),rs=t("pre"),Ea=r(),_a=t("br"),ya=t("br"),wa=r(),$=t("h3"),z=t("a"),un=t("span"),al=o("Constants"),Pa=r(),Z=t("p"),tl=o("상수의 선언은 변수와 유사하다. "),fn=t("code"),el=o("const"),ll=o(" 키워드를 사용한다"),Ca=r(),us=t("pre"),Ra=r(),Oa=t("br"),Da=r(),As=t("p"),pl=o("상수로 선언된 값을 변수에 할당할 때, 타입이 다르면 에러가 발생한다."),xa=r(),fs=t("pre"),Ba=r(),Ha=t("br"),Aa=t("br"),Sa=r(),q=t("h2"),U=t("a"),kn=t("span"),ol=o("Primitive Types"),Ta=r(),La=t("hr"),Ga=r(),Ss=t("p"),cl=o("Go의 타입들에는 아래와 같은 특징이 존재한다."),Ma=r(),Na=t("br"),Fa=t("br"),Ia=r(),V=t("h3"),j=t("a"),bn=t("span"),il=o("bool"),$a=r(),J=t("p"),rl=o("bool은 다른 언어와 크게 다르지 않다. Zero value는 "),mn=t("code"),ul=o("false"),fl=o("이다."),za=r(),ks=t("pre"),Za=r(),qa=t("br"),Ua=t("br"),Va=r(),K=t("h3"),Q=t("a"),vn=t("span"),kl=o("int"),ja=r(),Ts=t("p"),bl=o(`int는 C/C++와 유사하다. Zero value는 0이며, signed와 unsigned로 구분된다.
또한 8bit, 16bit, 32bit, 64bit중 변수의 크기를 결정할 수 있으며, (u)int 뒤에 크기를 붙임으로써 나타낸다.`),Ja=r(),bs=t("pre"),Ka=r(),Qa=t("br"),Wa=r(),O=t("p"),ml=o("이 중 "),dn=t("code"),vl=o("byte"),dl=o("라는 자료형은 "),En=t("code"),El=o("uint8"),_l=o("과 동일한 것으로 처리된다."),Xa=r(),ms=t("pre"),Ya=r(),ha=t("br"),ga=r(),D=t("p"),yl=o("크기를 붙이지 않은 "),_n=t("code"),wl=o("int"),Pl=o("라는 자료형도 존재하는데, 32bit와 64bit중에서 정해진다. 이는 어떤 하드웨어를 사용하는지에 따라, 실행할때 결정된다."),Cl=t("br"),Rl=o(`
다만 컴퓨터가 64bit를 사용하는 경우라고 해도, int와 int64끼리의 연산은 에러가 발생한다. int는 플랫폼마다, 하드웨어마다 실행시 크기가 다르기 때문이다.`),st=r(),vs=t("pre"),nt=r(),at=t("br"),tt=r(),d=t("p"),Ol=o("일반적인 경우 "),yn=t("code"),Dl=o("(u)int"),xl=o(` 타입을 선택하는 것이 권장되지만,
바이너리 파일 처리나 네트워크 통신 등, 정수 자료형의 특정한 크기를 사용해야 하는 경우라면 `),wn=t("code"),Bl=o("(u)int8"),Hl=o("~"),Pn=t("code"),Al=o("(u)int64"),Sl=o(` 에서 타입을 선택한다.
또는 라이브러리 함수를 작성하는 경우, 함수의 파라미터나 변수로 `),Cn=t("code"),Tl=o("(u)int64"),Ll=o("를 선택하는 것이 좋다고 한다."),et=r(),lt=t("br"),pt=r(),P=t("p"),Gl=o("정수를 표기할 때 언더바(_)로 구분할 수 있다. 또한 앞에 "),Rn=t("code"),Ml=o("0x"),Nl=o(", "),On=t("code"),Fl=o("0o"),Il=o(", "),Dn=t("code"),$l=o("0b"),zl=o("를 붙여 각각 16, 8, 2진수로 표현할 수 있다."),ot=r(),ds=t("pre"),ct=r(),it=t("br"),rt=t("br"),ut=r(),W=t("h3"),X=t("a"),xn=t("span"),Zl=o("float"),ft=r(),x=t("p"),ql=o("실수를 표현하는 타입은 32bit인 "),Bn=t("code"),Ul=o("float32"),Vl=o("와 64bit인 "),Hn=t("code"),jl=o("float64"),Jl=o(" 두 가지로 구분된다. C/C++와 유사하게 부동소숫점(Floating point) 방식을 사용한다."),kt=r(),Es=t("pre"),bt=r(),mt=t("br"),vt=r(),Y=t("p"),Kl=o("또한 복소수를 표현하는 "),An=t("code"),Ql=o("complex"),Wl=o(" 타입도 존재한다. 다만 복소수가 필요한 수학, 물리 관련된 코드를 굳이 Go를..?"),dt=r(),_s=t("pre"),Et=r(),_t=t("br"),yt=t("br"),wt=r(),h=t("h3"),g=t("a"),Sn=t("span"),Xl=o("string"),Pt=r(),B=t("p"),Yl=o("문자열을 표현하는 "),Tn=t("code"),hl=o("string"),gl=o(" 타입이 존재한다. 아래 코드는 기본적인 선언과 연산자들이다. Zero value는 "),Ln=t("code"),sp=o('""'),np=o("이다. 또한 Go의 기본 문자열 인코딩은 UTF-8이다."),Ct=r(),ys=t("pre"),Rt=r(),Ot=t("br"),Dt=r(),m=t("p"),Gn=t("code"),ap=o("string"),tp=o("을 구성하는 각 문자들은 "),Mn=t("code"),ep=o("rune"),lp=o(" 타입이다. "),Nn=t("code"),pp=o("byte"),op=o("가 "),Fn=t("code"),cp=o("uint8"),ip=o("과 동의어인 것처럼, "),In=t("code"),rp=o("rune"),up=o("은 "),$n=t("code"),fp=o("int32"),kp=o("와 동의어이다."),xt=r(),ws=t("pre"),Bt=r(),Ht=t("br"),At=t("br"),St=r(),ss=t("h3"),ns=t("a"),zn=t("span"),bp=o("Type Conversion"),Tt=r(),E=t("p"),mp=o("Go에서는 서로 다른 타입들간의 변환이 가능하다. 함수처럼 타입명에 괄호를 붙이면 된다. 이를테면 "),Zn=t("code"),vp=o("int16"),dp=o("에서 "),qn=t("code"),Ep=o("int32"),_p=o("로의 변환부터, "),Un=t("code"),yp=o("int"),wp=o("와 "),Vn=t("code"),Pp=o("float64"),Cp=o(" 사이의 변환 등도 가능하다"),Lt=r(),Ps=t("pre"),Gt=r(),Mt=t("br"),Nt=t("br"),Ft=r(),as=t("h2"),ts=t("a"),jn=t("span"),Rp=o("References"),It=r(),$t=t("hr"),zt=r(),C=t("center"),Jn=t("p"),Op=o("["),Dp=r(),Fc(Cs.$$.fragment),xp=o(`
](https://learning.oreilly.com/library/view/learning-go/9781492077206/) `),Bp=t("br"),Hp=o(`
[Jon Bodner, 『Learning Go』, O'Reilly Media, Inc.](https://learning.oreilly.com/library/view/learning-go/9781492077206/)`),Zt=r(),qt=t("br"),Ut=t("br"),this.h()},l(s){Os=e(s,"BR",{}),Wn=u(s),Ds=e(s,"P",{});var l=i(Ds);Xt=c(l,"본 글은 Golang을 공부하며 주요 내용이라 생각되는 것들을 기록해둔 자료이며, Ubuntu 20.04 LTS 기준으로 작성되었습니다."),l.forEach(n),Xn=u(s),Yn=e(s,"BR",{}),hn=e(s,"BR",{}),gn=u(s),L=e(s,"H2",{id:!0});var Ap=i(L);G=e(Ap,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Zp=i(G);Is=e(Zp,"SPAN",{class:!0}),i(Is).forEach(n),Zp.forEach(n),Yt=c(Ap,"Variables and Constants"),Ap.forEach(n),sa=u(s),na=e(s,"HR",{}),aa=u(s),ta=e(s,"BR",{}),ea=u(s),M=e(s,"H3",{id:!0});var Sp=i(M);N=e(Sp,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var qp=i(N);$s=e(qp,"SPAN",{class:!0}),i($s).forEach(n),qp.forEach(n),ht=c(Sp,"Variables"),Sp.forEach(n),la=u(s),xs=e(s,"P",{});var Up=i(xs);gt=c(Up,"Go에서 변수는 아래와 같이 선언 및 초기화할 수 있다. 특이사항은 다음과 같다."),Up.forEach(n),pa=u(s),w=e(s,"OL",{});var es=i(w);zs=e(es,"LI",{});var Vp=i(zs);se=c(Vp,"C/C++과는 달리, 타입이 변수명 뒤에 옴"),Vp.forEach(n),ne=u(es),ps=e(es,"LI",{});var jt=i(ps);ae=c(jt,"변수를 생성하고 값을 할당하지 않는 C나 C++와는 달리, 변수를 생성하면 기본적으로 할당되는 값인 "),Bs=e(jt,"SPAN",{style:!0});var jp=i(Bs);te=c(jp,"zero value"),jp.forEach(n),ee=c(jt,"가 존재함"),jt.forEach(n),le=u(es),Zs=e(es,"LI",{});var Jp=i(Zs);pe=c(Jp,"변수가 선언만 되고 사용되지 않으면 에러가 발생함"),Jp.forEach(n),oe=u(es),qs=e(es,"LI",{});var Kp=i(qs);ce=c(Kp,"권장되지는 않지만 전역변수도 됨"),Kp.forEach(n),es.forEach(n),oa=u(s),os=e(s,"PRE",{class:!0});var _c=i(os);_c.forEach(n),ca=u(s),ia=e(s,"BR",{}),ra=u(s),S=e(s,"P",{});var Kn=i(S);Us=e(Kn,"CODE",{});var Qp=i(Us);ie=c(Qp,":="),Qp.forEach(n),re=c(Kn," 연산자를 활용하여 변수를 선언할 수도 있다. 변수의 타입은 초기화되는 값에 따라 결정된다. c++의 "),Vs=e(Kn,"CODE",{});var Wp=i(Vs);ue=c(Wp,"auto"),Wp.forEach(n),fe=c(Kn," 키워드와 비슷한 듯 하다."),Kn.forEach(n),ua=u(s),cs=e(s,"PRE",{class:!0});var yc=i(cs);yc.forEach(n),fa=u(s),T=e(s,"P",{});var Qn=i(T);js=e(Qn,"CODE",{});var Xp=i(js);ke=c(Xp,":="),Xp.forEach(n),be=c(Qn," 연산자는 편리하지만 주의해서 사용해야 한다. "),Hs=e(Qn,"SPAN",{style:!0});var Yp=i(Hs);me=c(Yp,"Shadowing"),Yp.forEach(n),ve=c(Qn,"이 발생할 수도 있기 때문이다."),Qn.forEach(n),ka=u(s),R=e(s,"BLOCKQUOTE",{});var Ls=i(R);is=e(Ls,"H3",{id:!0});var Tp=i(is);F=e(Tp,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var hp=i(F);Js=e(hp,"SPAN",{class:!0}),i(Js).forEach(n),hp.forEach(n),de=c(Tp,"Shadowing이란?"),Tp.forEach(n),Ee=u(Ls),v=e(Ls,"P",{});var _=i(v);Ks=e(_,"CODE",{});var gp=i(Ks);_e=c(gp,"var"),gp.forEach(n),ye=c(_,` 키워드는 동일한 이름을 가진 변수를 선언할 때 에러가 발생하는데 반해,
위 예제에서는 `),Qs=e(_,"CODE",{});var so=i(Qs);we=c(so,"k"),so.forEach(n),Pe=c(_,"가 선언되고, 그 아래 줄에서 "),Ws=e(_,"CODE",{});var no=i(Ws);Ce=c(no,"l"),no.forEach(n),Re=c(_,"과 함께 "),Xs=e(_,"CODE",{});var ao=i(Xs);Oe=c(ao,"k"),ao.forEach(n),De=c(_,"가 다시 선언된 것을 확인할 수 있다("),Ys=e(_,"CODE",{});var to=i(Ys);xe=c(to,"k"),to.forEach(n),Be=c(_,`만 다시 선언하면 에러가 발생한다).
이 경우 해당 Block이 끝날 때까지, 앞서 선언한 `),hs=e(_,"CODE",{});var eo=i(hs);He=c(eo,"k"),eo.forEach(n),Ae=c(_,"의 값인 10에 접근할 수 없게 된다."),_.forEach(n),Se=u(Ls),k=e(Ls,"P",{});var b=i(k);Te=c(b,"이런 현상을 Shadowing이라고 하며, "),gs=e(b,"CODE",{});var lo=i(gs);Le=c(lo,":="),lo.forEach(n),Ge=c(b,` 연산자를 사용할 때 주의해야 하는 이유이다.
특히 함수의 파라미터나, `),sn=e(b,"CODE",{});var po=i(sn);Me=c(po,"fmt"),po.forEach(n),Ne=c(b,"같은 패키지 이름이나, 심지어는 "),nn=e(b,"CODE",{});var oo=i(nn);Fe=c(oo,"nil"),oo.forEach(n),Ie=c(b," 또는 "),an=e(b,"CODE",{});var co=i(an);$e=c(co,"false"),co.forEach(n),ze=c(b,` 같은 리터럴들도 Shadowing할 수 있다.
`),tn=e(b,"CODE",{});var io=i(tn);Ze=c(io,"var"),io.forEach(n),qe=c(b," 키워드는 함수의 타입을 명시해주는 효과도 있고 Shadowing의 염려가 없으므로 "),en=e(b,"CODE",{});var ro=i(en);Ue=c(ro,"var"),ro.forEach(n),Ve=c(b,`가 조금 더 안전한 선택지이다.
반면 `),ln=e(b,"CODE",{});var uo=i(ln);je=c(uo,"if"),uo.forEach(n),Je=c(b,", "),pn=e(b,"CODE",{});var fo=i(pn);Ke=c(fo,"switch"),fo.forEach(n),Qe=c(b,", "),on=e(b,"CODE",{});var ko=i(on);We=c(ko,"for"),ko.forEach(n),Xe=c(b,"문이나 에러 핸들링 등에서는 "),cn=e(b,"CODE",{});var bo=i(cn);Ye=c(bo,":="),bo.forEach(n),he=c(b,"을 주로 사용한다."),b.forEach(n),Ls.forEach(n),ba=u(s),ma=e(s,"BR",{}),va=u(s),I=e(s,"P",{});var Jt=i(I);ge=c(Jt,"변수가 선언만 되고 사용되지 않으면 에러가 발생하니, "),rn=e(Jt,"CODE",{});var mo=i(rn);sl=c(mo,"fmt.Println()"),mo.forEach(n),nl=c(Jt," 함수를 활용하여 모두 출력해주자."),Jt.forEach(n),da=u(s),rs=e(s,"PRE",{class:!0});var wc=i(rs);wc.forEach(n),Ea=u(s),_a=e(s,"BR",{}),ya=e(s,"BR",{}),wa=u(s),$=e(s,"H3",{id:!0});var Lp=i($);z=e(Lp,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var vo=i(z);un=e(vo,"SPAN",{class:!0}),i(un).forEach(n),vo.forEach(n),al=c(Lp,"Constants"),Lp.forEach(n),Pa=u(s),Z=e(s,"P",{});var Kt=i(Z);tl=c(Kt,"상수의 선언은 변수와 유사하다. "),fn=e(Kt,"CODE",{});var Eo=i(fn);el=c(Eo,"const"),Eo.forEach(n),ll=c(Kt," 키워드를 사용한다"),Kt.forEach(n),Ca=u(s),us=e(s,"PRE",{class:!0});var Pc=i(us);Pc.forEach(n),Ra=u(s),Oa=e(s,"BR",{}),Da=u(s),As=e(s,"P",{});var _o=i(As);pl=c(_o,"상수로 선언된 값을 변수에 할당할 때, 타입이 다르면 에러가 발생한다."),_o.forEach(n),xa=u(s),fs=e(s,"PRE",{class:!0});var Cc=i(fs);Cc.forEach(n),Ba=u(s),Ha=e(s,"BR",{}),Aa=e(s,"BR",{}),Sa=u(s),q=e(s,"H2",{id:!0});var Gp=i(q);U=e(Gp,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var yo=i(U);kn=e(yo,"SPAN",{class:!0}),i(kn).forEach(n),yo.forEach(n),ol=c(Gp,"Primitive Types"),Gp.forEach(n),Ta=u(s),La=e(s,"HR",{}),Ga=u(s),Ss=e(s,"P",{});var wo=i(Ss);cl=c(wo,"Go의 타입들에는 아래와 같은 특징이 존재한다."),wo.forEach(n),Ma=u(s),Na=e(s,"BR",{}),Fa=e(s,"BR",{}),Ia=u(s),V=e(s,"H3",{id:!0});var Mp=i(V);j=e(Mp,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Po=i(j);bn=e(Po,"SPAN",{class:!0}),i(bn).forEach(n),Po.forEach(n),il=c(Mp,"bool"),Mp.forEach(n),$a=u(s),J=e(s,"P",{});var Qt=i(J);rl=c(Qt,"bool은 다른 언어와 크게 다르지 않다. Zero value는 "),mn=e(Qt,"CODE",{});var Co=i(mn);ul=c(Co,"false"),Co.forEach(n),fl=c(Qt,"이다."),Qt.forEach(n),za=u(s),ks=e(s,"PRE",{class:!0});var Rc=i(ks);Rc.forEach(n),Za=u(s),qa=e(s,"BR",{}),Ua=e(s,"BR",{}),Va=u(s),K=e(s,"H3",{id:!0});var Np=i(K);Q=e(Np,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Ro=i(Q);vn=e(Ro,"SPAN",{class:!0}),i(vn).forEach(n),Ro.forEach(n),kl=c(Np,"int"),Np.forEach(n),ja=u(s),Ts=e(s,"P",{});var Oo=i(Ts);bl=c(Oo,`int는 C/C++와 유사하다. Zero value는 0이며, signed와 unsigned로 구분된다.
또한 8bit, 16bit, 32bit, 64bit중 변수의 크기를 결정할 수 있으며, (u)int 뒤에 크기를 붙임으로써 나타낸다.`),Oo.forEach(n),Ja=u(s),bs=e(s,"PRE",{class:!0});var Oc=i(bs);Oc.forEach(n),Ka=u(s),Qa=e(s,"BR",{}),Wa=u(s),O=e(s,"P",{});var Gs=i(O);ml=c(Gs,"이 중 "),dn=e(Gs,"CODE",{});var Do=i(dn);vl=c(Do,"byte"),Do.forEach(n),dl=c(Gs,"라는 자료형은 "),En=e(Gs,"CODE",{});var xo=i(En);El=c(xo,"uint8"),xo.forEach(n),_l=c(Gs,"과 동일한 것으로 처리된다."),Gs.forEach(n),Xa=u(s),ms=e(s,"PRE",{class:!0});var Dc=i(ms);Dc.forEach(n),Ya=u(s),ha=e(s,"BR",{}),ga=u(s),D=e(s,"P",{});var Ms=i(D);yl=c(Ms,"크기를 붙이지 않은 "),_n=e(Ms,"CODE",{});var Bo=i(_n);wl=c(Bo,"int"),Bo.forEach(n),Pl=c(Ms,"라는 자료형도 존재하는데, 32bit와 64bit중에서 정해진다. 이는 어떤 하드웨어를 사용하는지에 따라, 실행할때 결정된다."),Cl=e(Ms,"BR",{}),Rl=c(Ms,`
다만 컴퓨터가 64bit를 사용하는 경우라고 해도, int와 int64끼리의 연산은 에러가 발생한다. int는 플랫폼마다, 하드웨어마다 실행시 크기가 다르기 때문이다.`),Ms.forEach(n),st=u(s),vs=e(s,"PRE",{class:!0});var xc=i(vs);xc.forEach(n),nt=u(s),at=e(s,"BR",{}),tt=u(s),d=e(s,"P",{});var H=i(d);Ol=c(H,"일반적인 경우 "),yn=e(H,"CODE",{});var Ho=i(yn);Dl=c(Ho,"(u)int"),Ho.forEach(n),xl=c(H,` 타입을 선택하는 것이 권장되지만,
바이너리 파일 처리나 네트워크 통신 등, 정수 자료형의 특정한 크기를 사용해야 하는 경우라면 `),wn=e(H,"CODE",{});var Ao=i(wn);Bl=c(Ao,"(u)int8"),Ao.forEach(n),Hl=c(H,"~"),Pn=e(H,"CODE",{});var So=i(Pn);Al=c(So,"(u)int64"),So.forEach(n),Sl=c(H,` 에서 타입을 선택한다.
또는 라이브러리 함수를 작성하는 경우, 함수의 파라미터나 변수로 `),Cn=e(H,"CODE",{});var To=i(Cn);Tl=c(To,"(u)int64"),To.forEach(n),Ll=c(H,"를 선택하는 것이 좋다고 한다."),H.forEach(n),et=u(s),lt=e(s,"BR",{}),pt=u(s),P=e(s,"P",{});var ls=i(P);Gl=c(ls,"정수를 표기할 때 언더바(_)로 구분할 수 있다. 또한 앞에 "),Rn=e(ls,"CODE",{});var Lo=i(Rn);Ml=c(Lo,"0x"),Lo.forEach(n),Nl=c(ls,", "),On=e(ls,"CODE",{});var Go=i(On);Fl=c(Go,"0o"),Go.forEach(n),Il=c(ls,", "),Dn=e(ls,"CODE",{});var Mo=i(Dn);$l=c(Mo,"0b"),Mo.forEach(n),zl=c(ls,"를 붙여 각각 16, 8, 2진수로 표현할 수 있다."),ls.forEach(n),ot=u(s),ds=e(s,"PRE",{class:!0});var Bc=i(ds);Bc.forEach(n),ct=u(s),it=e(s,"BR",{}),rt=e(s,"BR",{}),ut=u(s),W=e(s,"H3",{id:!0});var Fp=i(W);X=e(Fp,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var No=i(X);xn=e(No,"SPAN",{class:!0}),i(xn).forEach(n),No.forEach(n),Zl=c(Fp,"float"),Fp.forEach(n),ft=u(s),x=e(s,"P",{});var Ns=i(x);ql=c(Ns,"실수를 표현하는 타입은 32bit인 "),Bn=e(Ns,"CODE",{});var Fo=i(Bn);Ul=c(Fo,"float32"),Fo.forEach(n),Vl=c(Ns,"와 64bit인 "),Hn=e(Ns,"CODE",{});var Io=i(Hn);jl=c(Io,"float64"),Io.forEach(n),Jl=c(Ns," 두 가지로 구분된다. C/C++와 유사하게 부동소숫점(Floating point) 방식을 사용한다."),Ns.forEach(n),kt=u(s),Es=e(s,"PRE",{class:!0});var Hc=i(Es);Hc.forEach(n),bt=u(s),mt=e(s,"BR",{}),vt=u(s),Y=e(s,"P",{});var Wt=i(Y);Kl=c(Wt,"또한 복소수를 표현하는 "),An=e(Wt,"CODE",{});var $o=i(An);Ql=c($o,"complex"),$o.forEach(n),Wl=c(Wt," 타입도 존재한다. 다만 복소수가 필요한 수학, 물리 관련된 코드를 굳이 Go를..?"),Wt.forEach(n),dt=u(s),_s=e(s,"PRE",{class:!0});var Ac=i(_s);Ac.forEach(n),Et=u(s),_t=e(s,"BR",{}),yt=e(s,"BR",{}),wt=u(s),h=e(s,"H3",{id:!0});var Ip=i(h);g=e(Ip,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var zo=i(g);Sn=e(zo,"SPAN",{class:!0}),i(Sn).forEach(n),zo.forEach(n),Xl=c(Ip,"string"),Ip.forEach(n),Pt=u(s),B=e(s,"P",{});var Fs=i(B);Yl=c(Fs,"문자열을 표현하는 "),Tn=e(Fs,"CODE",{});var Zo=i(Tn);hl=c(Zo,"string"),Zo.forEach(n),gl=c(Fs," 타입이 존재한다. 아래 코드는 기본적인 선언과 연산자들이다. Zero value는 "),Ln=e(Fs,"CODE",{});var qo=i(Ln);sp=c(qo,'""'),qo.forEach(n),np=c(Fs,"이다. 또한 Go의 기본 문자열 인코딩은 UTF-8이다."),Fs.forEach(n),Ct=u(s),ys=e(s,"PRE",{class:!0});var Sc=i(ys);Sc.forEach(n),Rt=u(s),Ot=e(s,"BR",{}),Dt=u(s),m=e(s,"P",{});var y=i(m);Gn=e(y,"CODE",{});var Uo=i(Gn);ap=c(Uo,"string"),Uo.forEach(n),tp=c(y,"을 구성하는 각 문자들은 "),Mn=e(y,"CODE",{});var Vo=i(Mn);ep=c(Vo,"rune"),Vo.forEach(n),lp=c(y," 타입이다. "),Nn=e(y,"CODE",{});var jo=i(Nn);pp=c(jo,"byte"),jo.forEach(n),op=c(y,"가 "),Fn=e(y,"CODE",{});var Jo=i(Fn);cp=c(Jo,"uint8"),Jo.forEach(n),ip=c(y,"과 동의어인 것처럼, "),In=e(y,"CODE",{});var Ko=i(In);rp=c(Ko,"rune"),Ko.forEach(n),up=c(y,"은 "),$n=e(y,"CODE",{});var Qo=i($n);fp=c(Qo,"int32"),Qo.forEach(n),kp=c(y,"와 동의어이다."),y.forEach(n),xt=u(s),ws=e(s,"PRE",{class:!0});var Tc=i(ws);Tc.forEach(n),Bt=u(s),Ht=e(s,"BR",{}),At=e(s,"BR",{}),St=u(s),ss=e(s,"H3",{id:!0});var $p=i(ss);ns=e($p,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Wo=i(ns);zn=e(Wo,"SPAN",{class:!0}),i(zn).forEach(n),Wo.forEach(n),bp=c($p,"Type Conversion"),$p.forEach(n),Tt=u(s),E=e(s,"P",{});var A=i(E);mp=c(A,"Go에서는 서로 다른 타입들간의 변환이 가능하다. 함수처럼 타입명에 괄호를 붙이면 된다. 이를테면 "),Zn=e(A,"CODE",{});var Xo=i(Zn);vp=c(Xo,"int16"),Xo.forEach(n),dp=c(A,"에서 "),qn=e(A,"CODE",{});var Yo=i(qn);Ep=c(Yo,"int32"),Yo.forEach(n),_p=c(A,"로의 변환부터, "),Un=e(A,"CODE",{});var ho=i(Un);yp=c(ho,"int"),ho.forEach(n),wp=c(A,"와 "),Vn=e(A,"CODE",{});var go=i(Vn);Pp=c(go,"float64"),go.forEach(n),Cp=c(A," 사이의 변환 등도 가능하다"),A.forEach(n),Lt=u(s),Ps=e(s,"PRE",{class:!0});var Lc=i(Ps);Lc.forEach(n),Gt=u(s),Mt=e(s,"BR",{}),Nt=e(s,"BR",{}),Ft=u(s),as=e(s,"H2",{id:!0});var zp=i(as);ts=e(zp,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var sc=i(ts);jn=e(sc,"SPAN",{class:!0}),i(jn).forEach(n),sc.forEach(n),Rp=c(zp,"References"),zp.forEach(n),It=u(s),$t=e(s,"HR",{}),zt=u(s),C=e(s,"CENTER",{});var Rs=i(C);Jn=e(Rs,"P",{});var nc=i(Jn);Op=c(nc,"["),nc.forEach(n),Dp=u(Rs),Ic(Cs.$$.fragment,Rs),xp=c(Rs,`
](https://learning.oreilly.com/library/view/learning-go/9781492077206/) `),Bp=e(Rs,"BR",{}),Hp=c(Rs,`
[Jon Bodner, 『Learning Go』, O'Reilly Media, Inc.](https://learning.oreilly.com/library/view/learning-go/9781492077206/)`),Rs.forEach(n),Zt=u(s),qt=e(s,"BR",{}),Ut=e(s,"BR",{}),this.h()},h(){f(Is,"class","icon icon-link"),f(G,"aria-hidden","true"),f(G,"tabindex","-1"),f(G,"href","#variables-and-constants"),f(L,"id","variables-and-constants"),f($s,"class","icon icon-link"),f(N,"aria-hidden","true"),f(N,"tabindex","-1"),f(N,"href","#variables"),f(M,"id","variables"),ac(Bs,"background-color","#FFF5B1"),f(os,"class","language-go"),f(cs,"class","language-go"),ac(Hs,"background-color","#FFF5B1"),f(Js,"class","icon icon-link"),f(F,"aria-hidden","true"),f(F,"tabindex","-1"),f(F,"href","#shadowing이란"),f(is,"id","shadowing이란"),f(rs,"class","language-go"),f(un,"class","icon icon-link"),f(z,"aria-hidden","true"),f(z,"tabindex","-1"),f(z,"href","#constants"),f($,"id","constants"),f(us,"class","language-go"),f(fs,"class","language-go"),f(kn,"class","icon icon-link"),f(U,"aria-hidden","true"),f(U,"tabindex","-1"),f(U,"href","#primitive-types"),f(q,"id","primitive-types"),f(bn,"class","icon icon-link"),f(j,"aria-hidden","true"),f(j,"tabindex","-1"),f(j,"href","#bool"),f(V,"id","bool"),f(ks,"class","language-go"),f(vn,"class","icon icon-link"),f(Q,"aria-hidden","true"),f(Q,"tabindex","-1"),f(Q,"href","#int"),f(K,"id","int"),f(bs,"class","language-go"),f(ms,"class","language-go"),f(vs,"class","language-go"),f(ds,"class","language-go"),f(xn,"class","icon icon-link"),f(X,"aria-hidden","true"),f(X,"tabindex","-1"),f(X,"href","#float"),f(W,"id","float"),f(Es,"class","language-go"),f(_s,"class","language-go"),f(Sn,"class","icon icon-link"),f(g,"aria-hidden","true"),f(g,"tabindex","-1"),f(g,"href","#string"),f(h,"id","string"),f(ys,"class","language-go"),f(ws,"class","language-go"),f(zn,"class","icon icon-link"),f(ns,"aria-hidden","true"),f(ns,"tabindex","-1"),f(ns,"href","#type-conversion"),f(ss,"id","type-conversion"),f(Ps,"class","language-go"),f(jn,"class","icon icon-link"),f(ts,"aria-hidden","true"),f(ts,"tabindex","-1"),f(ts,"href","#references"),f(as,"id","references")},m(s,l){p(s,Os,l),p(s,Wn,l),p(s,Ds,l),a(Ds,Xt),p(s,Xn,l),p(s,Yn,l),p(s,hn,l),p(s,gn,l),p(s,L,l),a(L,G),a(G,Is),a(L,Yt),p(s,sa,l),p(s,na,l),p(s,aa,l),p(s,ta,l),p(s,ea,l),p(s,M,l),a(M,N),a(N,$s),a(M,ht),p(s,la,l),p(s,xs,l),a(xs,gt),p(s,pa,l),p(s,w,l),a(w,zs),a(zs,se),a(w,ne),a(w,ps),a(ps,ae),a(ps,Bs),a(Bs,te),a(ps,ee),a(w,le),a(w,Zs),a(Zs,pe),a(w,oe),a(w,qs),a(qs,ce),p(s,oa,l),p(s,os,l),os.innerHTML=ec,p(s,ca,l),p(s,ia,l),p(s,ra,l),p(s,S,l),a(S,Us),a(Us,ie),a(S,re),a(S,Vs),a(Vs,ue),a(S,fe),p(s,ua,l),p(s,cs,l),cs.innerHTML=lc,p(s,fa,l),p(s,T,l),a(T,js),a(js,ke),a(T,be),a(T,Hs),a(Hs,me),a(T,ve),p(s,ka,l),p(s,R,l),a(R,is),a(is,F),a(F,Js),a(is,de),a(R,Ee),a(R,v),a(v,Ks),a(Ks,_e),a(v,ye),a(v,Qs),a(Qs,we),a(v,Pe),a(v,Ws),a(Ws,Ce),a(v,Re),a(v,Xs),a(Xs,Oe),a(v,De),a(v,Ys),a(Ys,xe),a(v,Be),a(v,hs),a(hs,He),a(v,Ae),a(R,Se),a(R,k),a(k,Te),a(k,gs),a(gs,Le),a(k,Ge),a(k,sn),a(sn,Me),a(k,Ne),a(k,nn),a(nn,Fe),a(k,Ie),a(k,an),a(an,$e),a(k,ze),a(k,tn),a(tn,Ze),a(k,qe),a(k,en),a(en,Ue),a(k,Ve),a(k,ln),a(ln,je),a(k,Je),a(k,pn),a(pn,Ke),a(k,Qe),a(k,on),a(on,We),a(k,Xe),a(k,cn),a(cn,Ye),a(k,he),p(s,ba,l),p(s,ma,l),p(s,va,l),p(s,I,l),a(I,ge),a(I,rn),a(rn,sl),a(I,nl),p(s,da,l),p(s,rs,l),rs.innerHTML=pc,p(s,Ea,l),p(s,_a,l),p(s,ya,l),p(s,wa,l),p(s,$,l),a($,z),a(z,un),a($,al),p(s,Pa,l),p(s,Z,l),a(Z,tl),a(Z,fn),a(fn,el),a(Z,ll),p(s,Ca,l),p(s,us,l),us.innerHTML=oc,p(s,Ra,l),p(s,Oa,l),p(s,Da,l),p(s,As,l),a(As,pl),p(s,xa,l),p(s,fs,l),fs.innerHTML=cc,p(s,Ba,l),p(s,Ha,l),p(s,Aa,l),p(s,Sa,l),p(s,q,l),a(q,U),a(U,kn),a(q,ol),p(s,Ta,l),p(s,La,l),p(s,Ga,l),p(s,Ss,l),a(Ss,cl),p(s,Ma,l),p(s,Na,l),p(s,Fa,l),p(s,Ia,l),p(s,V,l),a(V,j),a(j,bn),a(V,il),p(s,$a,l),p(s,J,l),a(J,rl),a(J,mn),a(mn,ul),a(J,fl),p(s,za,l),p(s,ks,l),ks.innerHTML=ic,p(s,Za,l),p(s,qa,l),p(s,Ua,l),p(s,Va,l),p(s,K,l),a(K,Q),a(Q,vn),a(K,kl),p(s,ja,l),p(s,Ts,l),a(Ts,bl),p(s,Ja,l),p(s,bs,l),bs.innerHTML=rc,p(s,Ka,l),p(s,Qa,l),p(s,Wa,l),p(s,O,l),a(O,ml),a(O,dn),a(dn,vl),a(O,dl),a(O,En),a(En,El),a(O,_l),p(s,Xa,l),p(s,ms,l),ms.innerHTML=uc,p(s,Ya,l),p(s,ha,l),p(s,ga,l),p(s,D,l),a(D,yl),a(D,_n),a(_n,wl),a(D,Pl),a(D,Cl),a(D,Rl),p(s,st,l),p(s,vs,l),vs.innerHTML=fc,p(s,nt,l),p(s,at,l),p(s,tt,l),p(s,d,l),a(d,Ol),a(d,yn),a(yn,Dl),a(d,xl),a(d,wn),a(wn,Bl),a(d,Hl),a(d,Pn),a(Pn,Al),a(d,Sl),a(d,Cn),a(Cn,Tl),a(d,Ll),p(s,et,l),p(s,lt,l),p(s,pt,l),p(s,P,l),a(P,Gl),a(P,Rn),a(Rn,Ml),a(P,Nl),a(P,On),a(On,Fl),a(P,Il),a(P,Dn),a(Dn,$l),a(P,zl),p(s,ot,l),p(s,ds,l),ds.innerHTML=kc,p(s,ct,l),p(s,it,l),p(s,rt,l),p(s,ut,l),p(s,W,l),a(W,X),a(X,xn),a(W,Zl),p(s,ft,l),p(s,x,l),a(x,ql),a(x,Bn),a(Bn,Ul),a(x,Vl),a(x,Hn),a(Hn,jl),a(x,Jl),p(s,kt,l),p(s,Es,l),Es.innerHTML=bc,p(s,bt,l),p(s,mt,l),p(s,vt,l),p(s,Y,l),a(Y,Kl),a(Y,An),a(An,Ql),a(Y,Wl),p(s,dt,l),p(s,_s,l),_s.innerHTML=mc,p(s,Et,l),p(s,_t,l),p(s,yt,l),p(s,wt,l),p(s,h,l),a(h,g),a(g,Sn),a(h,Xl),p(s,Pt,l),p(s,B,l),a(B,Yl),a(B,Tn),a(Tn,hl),a(B,gl),a(B,Ln),a(Ln,sp),a(B,np),p(s,Ct,l),p(s,ys,l),ys.innerHTML=vc,p(s,Rt,l),p(s,Ot,l),p(s,Dt,l),p(s,m,l),a(m,Gn),a(Gn,ap),a(m,tp),a(m,Mn),a(Mn,ep),a(m,lp),a(m,Nn),a(Nn,pp),a(m,op),a(m,Fn),a(Fn,cp),a(m,ip),a(m,In),a(In,rp),a(m,up),a(m,$n),a($n,fp),a(m,kp),p(s,xt,l),p(s,ws,l),ws.innerHTML=dc,p(s,Bt,l),p(s,Ht,l),p(s,At,l),p(s,St,l),p(s,ss,l),a(ss,ns),a(ns,zn),a(ss,bp),p(s,Tt,l),p(s,E,l),a(E,mp),a(E,Zn),a(Zn,vp),a(E,dp),a(E,qn),a(qn,Ep),a(E,_p),a(E,Un),a(Un,yp),a(E,wp),a(E,Vn),a(Vn,Pp),a(E,Cp),p(s,Lt,l),p(s,Ps,l),Ps.innerHTML=Ec,p(s,Gt,l),p(s,Mt,l),p(s,Nt,l),p(s,Ft,l),p(s,as,l),a(as,ts),a(ts,jn),a(as,Rp),p(s,It,l),p(s,$t,l),p(s,zt,l),p(s,C,l),a(C,Jn),a(Jn,Op),a(C,Dp),$c(Cs,C,null),a(C,xp),a(C,Bp),a(C,Hp),p(s,Zt,l),p(s,qt,l),p(s,Ut,l),Vt=!0},p:zc,i(s){Vt||(Zc(Cs.$$.fragment,s),Vt=!0)},o(s){qc(Cs.$$.fragment,s),Vt=!1},d(s){s&&n(Os),s&&n(Wn),s&&n(Ds),s&&n(Xn),s&&n(Yn),s&&n(hn),s&&n(gn),s&&n(L),s&&n(sa),s&&n(na),s&&n(aa),s&&n(ta),s&&n(ea),s&&n(M),s&&n(la),s&&n(xs),s&&n(pa),s&&n(w),s&&n(oa),s&&n(os),s&&n(ca),s&&n(ia),s&&n(ra),s&&n(S),s&&n(ua),s&&n(cs),s&&n(fa),s&&n(T),s&&n(ka),s&&n(R),s&&n(ba),s&&n(ma),s&&n(va),s&&n(I),s&&n(da),s&&n(rs),s&&n(Ea),s&&n(_a),s&&n(ya),s&&n(wa),s&&n($),s&&n(Pa),s&&n(Z),s&&n(Ca),s&&n(us),s&&n(Ra),s&&n(Oa),s&&n(Da),s&&n(As),s&&n(xa),s&&n(fs),s&&n(Ba),s&&n(Ha),s&&n(Aa),s&&n(Sa),s&&n(q),s&&n(Ta),s&&n(La),s&&n(Ga),s&&n(Ss),s&&n(Ma),s&&n(Na),s&&n(Fa),s&&n(Ia),s&&n(V),s&&n($a),s&&n(J),s&&n(za),s&&n(ks),s&&n(Za),s&&n(qa),s&&n(Ua),s&&n(Va),s&&n(K),s&&n(ja),s&&n(Ts),s&&n(Ja),s&&n(bs),s&&n(Ka),s&&n(Qa),s&&n(Wa),s&&n(O),s&&n(Xa),s&&n(ms),s&&n(Ya),s&&n(ha),s&&n(ga),s&&n(D),s&&n(st),s&&n(vs),s&&n(nt),s&&n(at),s&&n(tt),s&&n(d),s&&n(et),s&&n(lt),s&&n(pt),s&&n(P),s&&n(ot),s&&n(ds),s&&n(ct),s&&n(it),s&&n(rt),s&&n(ut),s&&n(W),s&&n(ft),s&&n(x),s&&n(kt),s&&n(Es),s&&n(bt),s&&n(mt),s&&n(vt),s&&n(Y),s&&n(dt),s&&n(_s),s&&n(Et),s&&n(_t),s&&n(yt),s&&n(wt),s&&n(h),s&&n(Pt),s&&n(B),s&&n(Ct),s&&n(ys),s&&n(Rt),s&&n(Ot),s&&n(Dt),s&&n(m),s&&n(xt),s&&n(ws),s&&n(Bt),s&&n(Ht),s&&n(At),s&&n(St),s&&n(ss),s&&n(Tt),s&&n(E),s&&n(Lt),s&&n(Ps),s&&n(Gt),s&&n(Mt),s&&n(Nt),s&&n(Ft),s&&n(as),s&&n(It),s&&n($t),s&&n(zt),s&&n(C),Uc(Cs),s&&n(Zt),s&&n(qt),s&&n(Ut)}}}const Qc={title:"변수와 원시 타입",date:"2022-07-21T00:00:00.000Z",excerpt:"Primitive Types and Variable Declaration",categories:["Golang","Basic Golang"],coverImage:"/post_img/Go/Golang_basics/cover.png",coverWidth:16,coverHeight:9,indexed:!1,exposed:!0};class Wc extends Gc{constructor(Os){super(),Mc(this,Os,null,jc,Nc,{})}}export{Wc as default,Qc as metadata};
