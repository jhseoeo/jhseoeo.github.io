import{S as vo,i as mo,s as _o,k as p,q as c,a as o,l as n,m as r,r as u,h as e,c as i,n as f,b as l,E as t,M as un}from"./index.d78780bf.js";function wo(Rr){let P,$l,Ie,De,Oe,Ge,y,x,Qs,gl,de,Ve,We,Y,Z,st,et,je,As,at,Xe,Ke,ze,Ue,R,S,$s,lt,qe,Je,Fe,Cs,tt,Ye,Ls,pt,Ze,k,gs,nt,rt,se,ot,it,ee,ct,ut,ae,ft,kt,le,Et,bt,te,vt,mt,pe,_t,wt,ne,Pt,yt,re,xt,Rt,oe,St,Qe,$e,ge,sa,A,C,ie,At,ea,aa,la,Hs,Ct,ta,Ts,Lt,pa,Bs,Ht,na,ra,oa,ia,L,H,ce,Tt,ca,ua,fa,hs,Bt,ka,Q,Sr=`<code class="language-bash"><span class="token function">wget</span> https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-8.12.0-linux-x86_64.tar.gz
<span class="token function">wget</span> https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-8.12.0-linux-x86_64.tar.gz.sha512
shasum <span class="token parameter variable">-a</span> <span class="token number">512</span> <span class="token parameter variable">-c</span> elasticsearch-8.12.0-linux-x86_64.tar.gz.sha512
<span class="token function">tar</span> <span class="token parameter variable">-xzf</span> elasticsearch-8.12.0-linux-x86_64.tar.gz
<span class="token builtin class-name">cd</span> elasticsearch-8.12.0/</code>`,Ea,b,ht,ue,Nt,Mt,fe,It,Dt,ke,Ot,Gt,$,dt,Vt,ba,g,Ar='<code class="language-bash"><span class="token function">vim</span> config/jvm.options</code>',va,ss,Cr=`<code class="language-text+">...
-Xms512m
-Xmx512m
...</code>`,ma,m,Wt,Ee,jt,Xt,be,Kt,zt,_a,wa,Pa,T,Ut,ve,qt,Jt,ya,es,Lr='<code class="language-bash"><span class="token function">vim</span> config/elasticsearch.yml</code>',xa,as,Hr=`<code class="language-text+">network.host: 0.0.0.0
http.port: 9200</code>`,Ra,v,Ft,me,Yt,Zt,_e,Qt,$t,we,gt,sp,Sa,Aa,Ca,La,B,h,Pe,ep,Ha,Ta,Ba,N,M,ye,ap,ha,I,lp,xe,tp,pp,Na,Ns,np,Ma,ls,Tr=`<code class="language-bash"><span class="token comment"># 1. Swap 파일 확인</span>
<span class="token comment"># 아무것도 출력되지 않으면 Swap 파일이 없는 것</span>
<span class="token function">sudo</span> <span class="token function">swapon</span> <span class="token parameter variable">-s</span>

<span class="token comment"># 2. Swap 파일 생성</span>
<span class="token function">sudo</span> fallocate <span class="token parameter variable">-l</span> 2G /swapfile

<span class="token comment"># 3. Swap 파일 권한 설정</span>
<span class="token function">sudo</span> <span class="token function">chmod</span> <span class="token number">600</span> /swapfile

<span class="token comment"># 4. Swap memory로 설정</span>
<span class="token function">sudo</span> <span class="token function">mkswap</span> /swapfile
<span class="token function">sudo</span> <span class="token function">swapon</span> /swapfile

<span class="token comment"># 5. Swap 파일이 잘 설정되었는지 확인</span>
<span class="token comment"># 2G의 Swap memory가 추가된 것을 확인할 수 있다.</span>
<span class="token function">sudo</span> <span class="token function">swapon</span> <span class="token parameter variable">-s</span>
<span class="token function">free</span> <span class="token parameter variable">-h</span></code>`,Ia,D,rp,Re,op,ip,Da,ts,Br='<code class="language-bash"><span class="token function">sudo</span> <span class="token function">vim</span> /etc/fstab</code>',Oa,ps,hr='<code class="language-text+">/swapfile swap swap defaults 0 0</code>',Ga,da,Va,Wa,O,G,Se,cp,ja,Ms,up,Xa,ns,Nr=`<code class="language-text+">[2] bootstrap checks failed. You must address the points described in the following [2] lines before starting Elasticsearch. For more information see [https://www.elastic.co/guide/en/elasticsearch/reference/8.12/bootstrap-checks.html]
bootstrap check failure [1] of [2]: max number of threads [3511] for user [ubuntu] is too low, increase to at least [4096]; for more information see [https://www.elastic.co/guide/en/elasticsearch/reference/8.12/max-number-threads-check.html]
bootstrap check failure [2] of [2]: max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144]; for more information see [https://www.elastic.co/guide/en/elasticsearch/reference/8.12/_maximum_map_count_check.html]</code>`,Ka,Is,fp,za,Ua,qa,d,kp,Ae,Ep,bp,Ja,rs,Mr='<code class="language-bash"><span class="token function">sudo</span> <span class="token function">vim</span> /etc/sysctl.conf</code>',Fa,os,Ir='<code class="language-text+">vm.max_map_count=262144</code>',Ya,Ds,vp,Za,is,Dr='<code class="language-bash"><span class="token function">sudo</span> <span class="token function">sysctl</span> <span class="token parameter variable">-p</span></code>',Qa,$a,ga,cs,us,mp,_p,sl,Os,wp,el,Gs,Pp,al,ds,yp,ll,Vs,xp,tl,fs,Or=`<code class="language-bash"><span class="token comment"># 참고용입니다</span>

<span class="token comment">## 현재 스택 사이즈 확인 (기본값은 8192KB인 것을 확인)</span>
<span class="token builtin class-name">ulimit</span> <span class="token parameter variable">-s</span>

<span class="token comment">## 스택 사이즈를 4096KB로 줄이기</span>
<span class="token builtin class-name">ulimit</span> <span class="token parameter variable">-s</span> <span class="token number">4096</span></code>`,pl,Ws,Rp,nl,ks,Gr='<code class="language-bash"><span class="token function">cat</span> /proc/sys/kernel/threads-max</code>',rl,V,Sp,Ce,Ap,Cp,ol,Es,dr='<code class="language-bash"><span class="token function">sudo</span> <span class="token function">vim</span> /etc/security/limits.conf</code>',il,bs,Vr=`<code class="language-text+">* hard nproc 4096
* soft nproc 4096</code>`,cl,vs,Lp,ms,Hp,ul,W,Tp,Le,Bp,hp,fl,kl,El,bl,j,X,He,Np,vl,js,Mp,ml,_s,Wr='<code class="language-bash">./bin/elasticsearch</code>',_l,Xs,Ip,wl,ws,jr=`<code class="language-text+">━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
✅ Elasticsearch security features have been automatically configured!
✅ Authentication is enabled and cluster connections are encrypted.

ℹ️  Password for the elastic user (reset with &#96;bin/elasticsearch-reset-password -u elastic&#96;):
  ★★★★★★★★★★★★★★★★★★★★★★

ℹ️  HTTP CA certificate SHA-256 fingerprint:
  ★★★★★★★★★★★★★★★★★★★★★★

ℹ️  Configure Kibana to use this cluster:
• Run Kibana and click the configuration link in the terminal when Kibana starts.
• Copy the following enrollment token and paste it into Kibana in your browser (valid for the next 30 minutes):
  ★★★★★★★★★★★★★★★★★★★★★★

ℹ️ Configure other nodes to join this cluster:
• Copy the following enrollment token and start new Elasticsearch nodes with &#96;bin/elasticsearch --enrollment-token &lt;token&gt;&#96; (valid for the next 30 minutes):
  ★★★★★★★★★★★★★★★★★★★★★★

  If you&#39;re running in Docker, copy the enrollment token and run:
  &#96;docker run -e &quot;ENROLLMENT_TOKEN=&lt;token&gt;&quot; docker.elastic.co/elasticsearch/elasticsearch:8.12.0&#96;
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━</code>`,Pl,Ks,Dp,yl,_,Op,Te,Gp,dp,Be,Vp,Wp,xl,Ps,Xr='<code class="language-bash"><span class="token function">curl</span> <span class="token parameter variable">-k</span> <span class="token parameter variable">-u</span> elastic:<span class="token punctuation">[</span>비밀번호<span class="token punctuation">]</span> https://localhost:9200</code>',Rl,ys,Kr=`<code class="language-json"><span class="token punctuation">&#123;</span>
	<span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"my-elasticsearch-instance"</span><span class="token punctuation">,</span>
	<span class="token property">"cluster_name"</span><span class="token operator">:</span> <span class="token string">"elasticsearch"</span><span class="token punctuation">,</span>
	<span class="token property">"cluster_uuid"</span><span class="token operator">:</span> <span class="token string">"3V00Nk6NSKy2DJqshxTsUw"</span><span class="token punctuation">,</span>
	<span class="token property">"version"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
		<span class="token property">"number"</span><span class="token operator">:</span> <span class="token string">"8.12.0"</span><span class="token punctuation">,</span>
		<span class="token property">"build_flavor"</span><span class="token operator">:</span> <span class="token string">"default"</span><span class="token punctuation">,</span>
		<span class="token property">"build_type"</span><span class="token operator">:</span> <span class="token string">"tar"</span><span class="token punctuation">,</span>
		<span class="token property">"build_hash"</span><span class="token operator">:</span> <span class="token string">"1665f706fd9354802c02146c1e6b5c0fbcddfbc9"</span><span class="token punctuation">,</span>
		<span class="token property">"build_date"</span><span class="token operator">:</span> <span class="token string">"2024-01-11T10:05:27.953830042Z"</span><span class="token punctuation">,</span>
		<span class="token property">"build_snapshot"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
		<span class="token property">"lucene_version"</span><span class="token operator">:</span> <span class="token string">"9.9.1"</span><span class="token punctuation">,</span>
		<span class="token property">"minimum_wire_compatibility_version"</span><span class="token operator">:</span> <span class="token string">"7.17.0"</span><span class="token punctuation">,</span>
		<span class="token property">"minimum_index_compatibility_version"</span><span class="token operator">:</span> <span class="token string">"7.0.0"</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
	<span class="token property">"tagline"</span><span class="token operator">:</span> <span class="token string">"You Know, for Search"</span>
<span class="token punctuation">&#125;</span></code>`,Sl,zs,jp,Al,Cl,Ll,Hl,K,z,he,Xp,Tl,Bl,hl,U,Kp,Ne,zp,Up,Nl,Us,qp,Ml,xs,zr=`<code class="language-bash"><span class="token function">sudo</span> iptables <span class="token parameter variable">-I</span> INPUT <span class="token number">6</span> <span class="token parameter variable">-m</span> state <span class="token parameter variable">--state</span> NEW <span class="token parameter variable">-p</span> tcp <span class="token parameter variable">--dport</span> <span class="token number">9200</span> <span class="token parameter variable">-j</span> ACCEPT
<span class="token function">sudo</span> netfilter-persistent save</code>`,Il,qs,Jp,Dl,Rs,Ur='<code class="language-bash"><span class="token function">curl</span> <span class="token parameter variable">-k</span> <span class="token parameter variable">-u</span> elastic:<span class="token punctuation">[</span>비밀번호<span class="token punctuation">]</span> https://<span class="token punctuation">[</span>PUBLIC IP<span class="token punctuation">]</span>:9200</code>',Ol,Ss,qr=`<code class="language-json"><span class="token punctuation">&#123;</span>
	<span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"my-elasticsearch-instance"</span><span class="token punctuation">,</span>
	<span class="token property">"cluster_name"</span><span class="token operator">:</span> <span class="token string">"elasticsearch"</span><span class="token punctuation">,</span>
	<span class="token property">"cluster_uuid"</span><span class="token operator">:</span> <span class="token string">"3V00Nk6NSKy2DJqshxTsUw"</span><span class="token punctuation">,</span>
	<span class="token property">"version"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
		<span class="token property">"number"</span><span class="token operator">:</span> <span class="token string">"8.12.0"</span><span class="token punctuation">,</span>
		<span class="token property">"build_flavor"</span><span class="token operator">:</span> <span class="token string">"default"</span><span class="token punctuation">,</span>
		<span class="token property">"build_type"</span><span class="token operator">:</span> <span class="token string">"tar"</span><span class="token punctuation">,</span>
		<span class="token property">"build_hash"</span><span class="token operator">:</span> <span class="token string">"1665f706fd9354802c02146c1e6b5c0fbcddfbc9"</span><span class="token punctuation">,</span>
		<span class="token property">"build_date"</span><span class="token operator">:</span> <span class="token string">"2024-01-11T10:05:27.953830042Z"</span><span class="token punctuation">,</span>
		<span class="token property">"build_snapshot"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
		<span class="token property">"lucene_version"</span><span class="token operator">:</span> <span class="token string">"9.9.1"</span><span class="token punctuation">,</span>
		<span class="token property">"minimum_wire_compatibility_version"</span><span class="token operator">:</span> <span class="token string">"7.17.0"</span><span class="token punctuation">,</span>
		<span class="token property">"minimum_index_compatibility_version"</span><span class="token operator">:</span> <span class="token string">"7.0.0"</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
	<span class="token property">"tagline"</span><span class="token operator">:</span> <span class="token string">"You Know, for Search"</span>
<span class="token punctuation">&#125;</span></code>`,Gl,Js,Fp,dl,Vl,Wl,jl,q,J,Me,Yp,Xl,Kl,zl,Fs,Zp;return{c(){P=p("p"),$l=c(`프로젝트에서 Elasticsearch를 사용해야 하는데, Elastic Cloud를 쓰다가 Free trial 기간이 끝나서 대안을 모색하게 되었다.
AWS 제공하는 서비스 중에는 OpenSearch라는 게 있다. 프로젝트 인프라가 AWS에 있어서 관리하기 편하긴 하지만 Elasticsearch와 사용법이 좀 미묘하게 다른 느낌이고, 나는 프리 티어가 끝나서 돈 빠져나가는 게 싫었다.
그런 와중 Oracle Cloud의 프리 티어가 무려 평생 무료로(!) 컴퓨팅 인스턴스를 제공한다는 소식을 듣고 바로 가입했다. 여기에 Elasticsearch를 설치해보자.`),Ie=o(),De=p("br"),Oe=p("br"),Ge=o(),y=p("h2"),x=p("a"),Qs=p("span"),gl=c("1. Oracle Cloud 가입"),de=o(),Ve=p("hr"),We=o(),Y=p("p"),Z=p("a"),st=c("https://www.oracle.com/cloud/"),et=c(`에 접속하여 가입을 진행한다.
가입시 VISA/Mastercard/AMEX 카드가 필요한데 등록만 하고 사용하지 않으면 돈이 빠져나가지 않는 모양이다.
얼마 전까지 요상하게 가입이 안되서 가입을 못하고 있었는데, 최근 가입에 성공했다.`),je=o(),As=p("p"),at=c("근데 현재 서울 리전은 사용량이 많아서 못 쓰고, 춘천에 있는 리전을 사용해야 한다. 큰 차이는 없을 것 같다."),Xe=o(),Ke=p("br"),ze=p("br"),Ue=o(),R=p("h2"),S=p("a"),$s=p("span"),lt=c("2. VCN 설정"),qe=o(),Je=p("hr"),Fe=o(),Cs=p("p"),tt=c("모든 것의 시작은 VCN(Virtual Cloud Network) 설정이다. AWS의 VPC와 대응되는 개념이라 할 수 있다."),Ye=o(),Ls=p("p"),pt=c(`Subnet, Route Table, Security List 등을 설정해주면 된다.
AWS와 특별히 다른 점이 없어서 쉽게 설정할 수 있을 것이다.`),Ze=o(),k=p("ol"),gs=p("li"),nt=c("VCN 생성"),rt=o(),se=p("li"),ot=c("Subnet 생성 (본 포스트에서는 Public으로 진행)"),it=o(),ee=p("li"),ct=c("Route Table 생성"),ut=o(),ae=p("li"),ft=c("Internet Gateway 생성"),kt=o(),le=p("li"),Et=c("Route Table에 Route Rule 추가 (Destination CIDR Block:0.0.0.0/0, Target: Internet Gateway)"),bt=o(),te=p("li"),vt=c("Security List 생성"),mt=o(),pe=p("li"),_t=c("Security List에 Ingress/Egress Rule 추가 (Destination CIDR Block:0.0.0.0/0, All Protocols, All traffic for all ports 오픈)"),wt=o(),ne=p("li"),Pt=c("Subnet에 Security List 연결"),yt=o(),re=p("li"),xt=c("Network Security Group 생성"),Rt=o(),oe=p("li"),St=c("Network Security Group에 Ingress/Egress Rule 추가 (22, 80, 9200 포트 등 오픈)"),Qe=o(),$e=p("br"),ge=p("br"),sa=o(),A=p("h2"),C=p("a"),ie=p("span"),At=c("3. 인스턴스 생성"),ea=o(),aa=p("hr"),la=o(),Hs=p("p"),Ct=c(`Elasticsearch의 권장 메모리 용량은 4GB 이상이다. 그러나 슬프게도 프리 티어 인스턴스는 1GB까지만 무료이다.
ARM 기반의 인스턴스를 생성하면 6GB 메모리의 인스턴스도 생성할 수 있는것 같은데, 춘천 리전에서는 ARM 인스턴스를 사용할 수 없는 모양이다 ㅠ
눈물을 머금고 메모리 1GB짜리 x86 인스턴스를 생성하자.`),ta=o(),Ts=p("p"),Lt=c(`오라클 클라우드의 인스턴스 생성은 AWS보다 더 직관적이라고 할 수 있다. 설정할 것이 많지 않기 때문이다. 그래서 딱히 어려울 건 없는 듯 하다.
앞서 설정한 VCN을 선택하고, SSH 키를 등록하고, 보안 리스트를 선택하고, 인스턴스를 생성하면 된다.
근데 AWS의 Elastic IP에 대응되는 개념을 못 찾았는데, 이건 나중에 찾아봐야겠다.`),pa=o(),Bs=p("p"),Ht=c(`본인의 경우 Ubuntu 22.04를 선택하여 진행하였다.
따라서 포스트의 나머지 부분 또한 Ubuntu 22.04 기준으로 진행될 것이다.`),na=o(),ra=p("br"),oa=p("br"),ia=o(),L=p("h2"),H=p("a"),ce=p("span"),Tt=c("4. Elasticsearch 설치 및 설정"),ca=o(),ua=p("hr"),fa=o(),hs=p("p"),Bt=c("인스턴스에 ssh로 접속하여 Elasticsearch를 설치하자."),ka=o(),Q=p("pre"),Ea=o(),b=p("p"),ht=c(`메모리가 1GB밖에 안되기 때문에, JVM의 heap size를 수정해줘야 한다.
`),ue=p("code"),Nt=c("config/jvm.options"),Mt=c(" 파일에서 "),fe=p("code"),It=c("-Xms"),Dt=c("와 "),ke=p("code"),Ot=c("-Xmx"),Gt=c(` 옵션을 수정해주자.
Elasticsearch 문서에 따르면 메모리의 최대 절반 정도까지 할당해주는 것이 좋다고 한다. (`),$=p("a"),dt=c("https://www.elastic.co/guide/en/elasticsearch/reference/current/advanced-configuration.html#set-jvm-heap-size"),Vt=c(")"),ba=o(),g=p("pre"),va=o(),ss=p("pre"),ma=o(),m=p("p"),Wt=c("만약 "),Ee=p("code"),jt=c("-Xms"),Xt=c("와 "),be=p("code"),Kt=c("-Xmx"),zt=c("의 값이 다르면 Elasticsearch가 실행되지 않는다. 작더라도 둘 다 같은 값으로 설정해주자."),_a=o(),wa=p("br"),Pa=o(),T=p("p"),Ut=c("외부에서 elasticsearch에 접속하기 위해서는 "),ve=p("code"),qt=c("config/elasticsearch.yml"),Jt=c(" 파일에서 설정을 변경해주어야 한다."),ya=o(),es=p("pre"),xa=o(),as=p("pre"),Ra=o(),v=p("p"),Ft=c("elasticsearch를 설치한 직후에는 위 "),me=p("code"),Yt=c("network.host"),Zt=c("와 "),_e=p("code"),Qt=c("http.port"),$t=c(` 설정이 주석처리되어 있다. 주석을 해제하고 위와 같이 설정해주자.
`),we=p("code"),gt=c("http.port"),sp=c("는 기본적으로 9200번 포트를 사용하는데, 다른 포트를 사용해도 된다. 단 그렇다면 해당 포트를 보안 리스트에서 오픈해주어야 한다."),Sa=o(),Aa=p("br"),Ca=p("br"),La=o(),B=p("h2"),h=p("a"),Pe=p("span"),ep=c("5. 실행 환경 설정"),Ha=o(),Ta=p("hr"),Ba=o(),N=p("h3"),M=p("a"),ye=p("span"),ap=c("5.1. Swap space 추가"),ha=o(),I=p("p"),lp=c(`일어나지 않길 바랬지만, 메모리 문제가 발생하고 말았다.
이 상태로 실행하고 나니, Elasticsearch가 실행되지 않는다. 실행 후 몇 초 있으면 인스턴스 자체가 죽어버리는 상황이다.
tmux 띄워서 `),xe=p("code"),tp=c("free -h"),pp=c("로 메모리 사용량을 확인해보니, 사용 가능한 메모리가 남아있지 않는 것을 확인하였다."),Na=o(),Ns=p("p"),np=c(`결국 프리 티어 인스턴스의 1GB짜리 메모리는 역시나 부족했다. 눈물을 머금고 Swap space를 추가해야 한다.
Ubuntu 기준, Swap space를 추가하는 방법은 다음과 같다.`),Ma=o(),ls=p("pre"),Ia=o(),D=p("p"),rp=c("이후, 재부팅 이후에도 swap space가 유지되도록 "),Re=p("code"),op=c("/etc/fstab"),ip=c(" 파일을 열고, 최하단에 다음과 같이 추가해주자."),Da=o(),ts=p("pre"),Oa=o(),ps=p("pre"),Ga=o(),da=p("br"),Va=p("br"),Wa=o(),O=p("h3"),G=p("a"),Se=p("span"),cp=c("5.2. 쓰레드 수와 가상 메모리 크기 설정"),ja=o(),Ms=p("p"),up=c("이 상태에서도 Elasticsearch가 실행되지 않는다. 로그를 살펴보니 bootstrap checks에서 다음과 같은 두 가지 에러가 발생하는 것을 확인하였다."),Xa=o(),ns=p("pre"),Ka=o(),Is=p("p"),fp=c(`max number of threads는 프로세스당 최대 쓰레드 수를 의미하며, max map count는 가상 메모리 크기를 의미한다.
프리 티어 인스턴스이다 보니, 여러모로 제한이 많은 것 같다.`),za=o(),Ua=p("br"),qa=o(),d=p("p"),kp=c("max map count를 수정하는 것은 어렵지 않다. "),Ae=p("code"),Ep=c("/etc/sysctl.conf"),bp=c(" 파일을 열고, 최하단에 다음과 같이 추가해주자."),Ja=o(),rs=p("pre"),Fa=o(),os=p("pre"),Ya=o(),Ds=p("p"),vp=c("이후, 설정을 적용해주자."),Za=o(),is=p("pre"),Qa=o(),$a=p("br"),ga=o(),cs=p("p"),us=p("a"),mp=c("리눅스에서 프로세스당 쓰레드 수는 기본적으로 실제 메모리 크기에 따라 결정되는 모양이다"),_p=c(`.
따라서 최대 쓰레드 수를 직접 변경해줄 필요가 있다.`),sl=o(),Os=p("p"),wp=c(`변경하기에 앞서, 최대 쓰레드의 수는 스택 사이즈와 관련이 있다.
운영체제 공부 열심히 했다면 짐작할 수 있겠지만, 쓰레드가 생성되면 생성된 쓰레드가 할당받는 스택 공간이 필요하다. 스택 공간이 한정적이기 때문에, 쓰레드의 수도 한정적이다.`),el=o(),Gs=p("p"),Pp=c(`따라서, 스택 공간을 늘리면 쓰레드의 수도 늘어날 것이다. 즉, 가상 메모리 크기를 늘리면 된다.
우리는 이미 Swap space를 추가하여 가상 메모리를 늘렸다. 할 일이 하나 줄은 셈이다.`),al=o(),ds=p("p"),yp=c(`또는, 스택 사이즈를 줄이면 생성할 수 있는 쓰레드 수가 늘어날 것이다. 쓰레드가 할당받는 스택 사이즈를 줄이면 자연히 더 많은 쓰레드가 생성될 수 있을 것이다.
다만 우리는 이미 가상 메모리를 늘렸으니, 아래의 스택 사이즈를 줄이는 방법은 참고용으로만 보자.`),ll=o(),Vs=p("p"),xp=c("스택 사이즈를 줄이는 방법은 다음과 같다. 아래 명령어대로 진행하면 스택 사이즈를 줄일 수 있다."),tl=o(),fs=p("pre"),pl=o(),Ws=p("p"),Rp=c("다음으로, 최대 쓰레드 수를 실제로 늘려주자. 현재 사용자의 최대 쓰레드 수를 확인하려면 다음 명령어를 입력하자."),nl=o(),ks=p("pre"),rl=o(),V=p("p"),Sp=c("다음과 같이 "),Ce=p("code"),Ap=c("/etc/security/limits.conf"),Cp=c(" 파일을 열고, 최하단에 다음과 같이 추가해주자."),ol=o(),Es=p("pre"),il=o(),bs=p("pre"),cl=o(),vs=p("p"),Lp=c("여기서 hard와 soft의 차이가 궁금할 수 있는데, 잘 설명된 포스트가 있다. "),ms=p("a"),Hp=c("https://lannstark.tistory.com/101"),ul=o(),W=p("p"),Tp=c("설정을 적용하려면 재부팅해야 한다. "),Le=p("code"),Bp=c("sudo reboot"),hp=c("으로 재부팅해도 되고, 클라우드 콘솔에서 재부팅해도 된다."),fl=o(),kl=p("br"),El=p("br"),bl=o(),j=p("h2"),X=p("a"),He=p("span"),Np=c("6. Elasticsearch 실행"),vl=o(),js=p("p"),Mp=c("드디어 Elasticsearch를 실행해볼 차례이다."),ml=o(),_s=p("pre"),_l=o(),Xs=p("p"),Ip=c("잘 실행됐다면 로그에 다음과 같은 메시지가 출력될 것이다."),wl=o(),ws=p("pre"),Pl=o(),Ks=p("p"),Dp=c("이렇게 비밀번호와 토큰값을 비롯하여 여러 정보가 출력되는데, 키바나를 사용한다던지 다른 노드를 클러스터에 추가한다던지 하는 등의 작업을 할 때 사용할 수 있다. 일단 지금 단계에서 필요한 값은 아니니 생략하자."),yl=o(),_=p("p"),Op=c("여기에서 elasticsearch에 접속하려면 가장 위의 "),Te=p("code"),Gp=c("Password for the elastic user"),dp=c(`에 있는 비밀번호를 사용하면 된다.
curl을 날릴 때 `),Be=p("code"),Vp=c("-u"),Wp=c(" 옵션을 통해 비밀번호를 입력하면 된다. 이제 잘 실행되는지 확인해보자."),xl=o(),Ps=p("pre"),Rl=o(),ys=p("pre"),Sl=o(),zs=p("p"),jp=c("잘 출력된다!"),Al=o(),Cl=p("br"),Ll=p("br"),Hl=o(),K=p("h2"),z=p("a"),he=p("span"),Xp=c("7. 외부 접속 설정"),Tl=o(),Bl=p("hr"),hl=o(),U=p("p"),Kp=c("오라클 클라우드의 우분투는 내부 방화벽이 있어서, 외부에서 접근하려고 하면 "),Ne=p("code"),zp=c("No route to host"),Up=c(` 에러가 발생한다.
VCN의 Security Group 설정 말고도, 리눅스 내부 방화벽 설정도 해주어야 한다.`),Nl=o(),Us=p("p"),qp=c(`보통은 ufw가 주로 사용되는 것 같은데, 오라클 클라우드의 우분투에서는 iptables를 사용한다.
다음과 같이 9200번 포트를 오픈해주자.`),Ml=o(),xs=p("pre"),Il=o(),qs=p("p"),Jp=c("이후, 다시 외부에서 접속해보자."),Dl=o(),Rs=p("pre"),Ol=o(),Ss=p("pre"),Gl=o(),Js=p("p"),Fp=c("마찬가지로, 잘 출력된다! 잘 되는게 아주 보기 좋다."),dl=o(),Vl=p("br"),Wl=p("br"),jl=o(),q=p("h2"),J=p("a"),Me=p("span"),Yp=c("8. 마치며"),Xl=o(),Kl=p("hr"),zl=o(),Fs=p("p"),Zp=c(`elasticsearch는 분산 환경에서 사용됨을 염두에 두고 설계되었기 때문에, 단순한 테스트 및 개발 환경을 구축하는 것만으로도 돈이 쭉쭉 빠져나갈 수밖에 없는 것 같다.
하지만 내 지갑은 소중하니까… 시행착오 끝에 elasticsearch를 프리 티어에 올릴 수 있었다.`),this.h()},l(s){P=n(s,"P",{});var a=r(P);$l=u(a,`프로젝트에서 Elasticsearch를 사용해야 하는데, Elastic Cloud를 쓰다가 Free trial 기간이 끝나서 대안을 모색하게 되었다.
AWS 제공하는 서비스 중에는 OpenSearch라는 게 있다. 프로젝트 인프라가 AWS에 있어서 관리하기 편하긴 하지만 Elasticsearch와 사용법이 좀 미묘하게 다른 느낌이고, 나는 프리 티어가 끝나서 돈 빠져나가는 게 싫었다.
그런 와중 Oracle Cloud의 프리 티어가 무려 평생 무료로(!) 컴퓨팅 인스턴스를 제공한다는 소식을 듣고 바로 가입했다. 여기에 Elasticsearch를 설치해보자.`),a.forEach(e),Ie=i(s),De=n(s,"BR",{}),Oe=n(s,"BR",{}),Ge=i(s),y=n(s,"H2",{id:!0});var Qp=r(y);x=n(Qp,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var fn=r(x);Qs=n(fn,"SPAN",{class:!0}),r(Qs).forEach(e),fn.forEach(e),gl=u(Qp,"1. Oracle Cloud 가입"),Qp.forEach(e),de=i(s),Ve=n(s,"HR",{}),We=i(s),Y=n(s,"P",{});var $p=r(Y);Z=n($p,"A",{href:!0,rel:!0});var kn=r(Z);st=u(kn,"https://www.oracle.com/cloud/"),kn.forEach(e),et=u($p,`에 접속하여 가입을 진행한다.
가입시 VISA/Mastercard/AMEX 카드가 필요한데 등록만 하고 사용하지 않으면 돈이 빠져나가지 않는 모양이다.
얼마 전까지 요상하게 가입이 안되서 가입을 못하고 있었는데, 최근 가입에 성공했다.`),$p.forEach(e),je=i(s),As=n(s,"P",{});var En=r(As);at=u(En,"근데 현재 서울 리전은 사용량이 많아서 못 쓰고, 춘천에 있는 리전을 사용해야 한다. 큰 차이는 없을 것 같다."),En.forEach(e),Xe=i(s),Ke=n(s,"BR",{}),ze=n(s,"BR",{}),Ue=i(s),R=n(s,"H2",{id:!0});var gp=r(R);S=n(gp,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var bn=r(S);$s=n(bn,"SPAN",{class:!0}),r($s).forEach(e),bn.forEach(e),lt=u(gp,"2. VCN 설정"),gp.forEach(e),qe=i(s),Je=n(s,"HR",{}),Fe=i(s),Cs=n(s,"P",{});var vn=r(Cs);tt=u(vn,"모든 것의 시작은 VCN(Virtual Cloud Network) 설정이다. AWS의 VPC와 대응되는 개념이라 할 수 있다."),vn.forEach(e),Ye=i(s),Ls=n(s,"P",{});var mn=r(Ls);pt=u(mn,`Subnet, Route Table, Security List 등을 설정해주면 된다.
AWS와 특별히 다른 점이 없어서 쉽게 설정할 수 있을 것이다.`),mn.forEach(e),Ze=i(s),k=n(s,"OL",{});var E=r(k);gs=n(E,"LI",{});var _n=r(gs);nt=u(_n,"VCN 생성"),_n.forEach(e),rt=i(E),se=n(E,"LI",{});var wn=r(se);ot=u(wn,"Subnet 생성 (본 포스트에서는 Public으로 진행)"),wn.forEach(e),it=i(E),ee=n(E,"LI",{});var Pn=r(ee);ct=u(Pn,"Route Table 생성"),Pn.forEach(e),ut=i(E),ae=n(E,"LI",{});var yn=r(ae);ft=u(yn,"Internet Gateway 생성"),yn.forEach(e),kt=i(E),le=n(E,"LI",{});var xn=r(le);Et=u(xn,"Route Table에 Route Rule 추가 (Destination CIDR Block:0.0.0.0/0, Target: Internet Gateway)"),xn.forEach(e),bt=i(E),te=n(E,"LI",{});var Rn=r(te);vt=u(Rn,"Security List 생성"),Rn.forEach(e),mt=i(E),pe=n(E,"LI",{});var Sn=r(pe);_t=u(Sn,"Security List에 Ingress/Egress Rule 추가 (Destination CIDR Block:0.0.0.0/0, All Protocols, All traffic for all ports 오픈)"),Sn.forEach(e),wt=i(E),ne=n(E,"LI",{});var An=r(ne);Pt=u(An,"Subnet에 Security List 연결"),An.forEach(e),yt=i(E),re=n(E,"LI",{});var Cn=r(re);xt=u(Cn,"Network Security Group 생성"),Cn.forEach(e),Rt=i(E),oe=n(E,"LI",{});var Ln=r(oe);St=u(Ln,"Network Security Group에 Ingress/Egress Rule 추가 (22, 80, 9200 포트 등 오픈)"),Ln.forEach(e),E.forEach(e),Qe=i(s),$e=n(s,"BR",{}),ge=n(s,"BR",{}),sa=i(s),A=n(s,"H2",{id:!0});var sn=r(A);C=n(sn,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Hn=r(C);ie=n(Hn,"SPAN",{class:!0}),r(ie).forEach(e),Hn.forEach(e),At=u(sn,"3. 인스턴스 생성"),sn.forEach(e),ea=i(s),aa=n(s,"HR",{}),la=i(s),Hs=n(s,"P",{});var Tn=r(Hs);Ct=u(Tn,`Elasticsearch의 권장 메모리 용량은 4GB 이상이다. 그러나 슬프게도 프리 티어 인스턴스는 1GB까지만 무료이다.
ARM 기반의 인스턴스를 생성하면 6GB 메모리의 인스턴스도 생성할 수 있는것 같은데, 춘천 리전에서는 ARM 인스턴스를 사용할 수 없는 모양이다 ㅠ
눈물을 머금고 메모리 1GB짜리 x86 인스턴스를 생성하자.`),Tn.forEach(e),ta=i(s),Ts=n(s,"P",{});var Bn=r(Ts);Lt=u(Bn,`오라클 클라우드의 인스턴스 생성은 AWS보다 더 직관적이라고 할 수 있다. 설정할 것이 많지 않기 때문이다. 그래서 딱히 어려울 건 없는 듯 하다.
앞서 설정한 VCN을 선택하고, SSH 키를 등록하고, 보안 리스트를 선택하고, 인스턴스를 생성하면 된다.
근데 AWS의 Elastic IP에 대응되는 개념을 못 찾았는데, 이건 나중에 찾아봐야겠다.`),Bn.forEach(e),pa=i(s),Bs=n(s,"P",{});var hn=r(Bs);Ht=u(hn,`본인의 경우 Ubuntu 22.04를 선택하여 진행하였다.
따라서 포스트의 나머지 부분 또한 Ubuntu 22.04 기준으로 진행될 것이다.`),hn.forEach(e),na=i(s),ra=n(s,"BR",{}),oa=n(s,"BR",{}),ia=i(s),L=n(s,"H2",{id:!0});var en=r(L);H=n(en,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Nn=r(H);ce=n(Nn,"SPAN",{class:!0}),r(ce).forEach(e),Nn.forEach(e),Tt=u(en,"4. Elasticsearch 설치 및 설정"),en.forEach(e),ca=i(s),ua=n(s,"HR",{}),fa=i(s),hs=n(s,"P",{});var Mn=r(hs);Bt=u(Mn,"인스턴스에 ssh로 접속하여 Elasticsearch를 설치하자."),Mn.forEach(e),ka=i(s),Q=n(s,"PRE",{class:!0});var Jr=r(Q);Jr.forEach(e),Ea=i(s),b=n(s,"P",{});var w=r(b);ht=u(w,`메모리가 1GB밖에 안되기 때문에, JVM의 heap size를 수정해줘야 한다.
`),ue=n(w,"CODE",{});var In=r(ue);Nt=u(In,"config/jvm.options"),In.forEach(e),Mt=u(w," 파일에서 "),fe=n(w,"CODE",{});var Dn=r(fe);It=u(Dn,"-Xms"),Dn.forEach(e),Dt=u(w,"와 "),ke=n(w,"CODE",{});var On=r(ke);Ot=u(On,"-Xmx"),On.forEach(e),Gt=u(w,` 옵션을 수정해주자.
Elasticsearch 문서에 따르면 메모리의 최대 절반 정도까지 할당해주는 것이 좋다고 한다. (`),$=n(w,"A",{href:!0,rel:!0});var Gn=r($);dt=u(Gn,"https://www.elastic.co/guide/en/elasticsearch/reference/current/advanced-configuration.html#set-jvm-heap-size"),Gn.forEach(e),Vt=u(w,")"),w.forEach(e),ba=i(s),g=n(s,"PRE",{class:!0});var Fr=r(g);Fr.forEach(e),va=i(s),ss=n(s,"PRE",{class:!0});var Yr=r(ss);Yr.forEach(e),ma=i(s),m=n(s,"P",{});var Ys=r(m);Wt=u(Ys,"만약 "),Ee=n(Ys,"CODE",{});var dn=r(Ee);jt=u(dn,"-Xms"),dn.forEach(e),Xt=u(Ys,"와 "),be=n(Ys,"CODE",{});var Vn=r(be);Kt=u(Vn,"-Xmx"),Vn.forEach(e),zt=u(Ys,"의 값이 다르면 Elasticsearch가 실행되지 않는다. 작더라도 둘 다 같은 값으로 설정해주자."),Ys.forEach(e),_a=i(s),wa=n(s,"BR",{}),Pa=i(s),T=n(s,"P",{});var Ul=r(T);Ut=u(Ul,"외부에서 elasticsearch에 접속하기 위해서는 "),ve=n(Ul,"CODE",{});var Wn=r(ve);qt=u(Wn,"config/elasticsearch.yml"),Wn.forEach(e),Jt=u(Ul," 파일에서 설정을 변경해주어야 한다."),Ul.forEach(e),ya=i(s),es=n(s,"PRE",{class:!0});var Zr=r(es);Zr.forEach(e),xa=i(s),as=n(s,"PRE",{class:!0});var Qr=r(as);Qr.forEach(e),Ra=i(s),v=n(s,"P",{});var F=r(v);Ft=u(F,"elasticsearch를 설치한 직후에는 위 "),me=n(F,"CODE",{});var jn=r(me);Yt=u(jn,"network.host"),jn.forEach(e),Zt=u(F,"와 "),_e=n(F,"CODE",{});var Xn=r(_e);Qt=u(Xn,"http.port"),Xn.forEach(e),$t=u(F,` 설정이 주석처리되어 있다. 주석을 해제하고 위와 같이 설정해주자.
`),we=n(F,"CODE",{});var Kn=r(we);gt=u(Kn,"http.port"),Kn.forEach(e),sp=u(F,"는 기본적으로 9200번 포트를 사용하는데, 다른 포트를 사용해도 된다. 단 그렇다면 해당 포트를 보안 리스트에서 오픈해주어야 한다."),F.forEach(e),Sa=i(s),Aa=n(s,"BR",{}),Ca=n(s,"BR",{}),La=i(s),B=n(s,"H2",{id:!0});var an=r(B);h=n(an,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var zn=r(h);Pe=n(zn,"SPAN",{class:!0}),r(Pe).forEach(e),zn.forEach(e),ep=u(an,"5. 실행 환경 설정"),an.forEach(e),Ha=i(s),Ta=n(s,"HR",{}),Ba=i(s),N=n(s,"H3",{id:!0});var ln=r(N);M=n(ln,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Un=r(M);ye=n(Un,"SPAN",{class:!0}),r(ye).forEach(e),Un.forEach(e),ap=u(ln,"5.1. Swap space 추가"),ln.forEach(e),ha=i(s),I=n(s,"P",{});var ql=r(I);lp=u(ql,`일어나지 않길 바랬지만, 메모리 문제가 발생하고 말았다.
이 상태로 실행하고 나니, Elasticsearch가 실행되지 않는다. 실행 후 몇 초 있으면 인스턴스 자체가 죽어버리는 상황이다.
tmux 띄워서 `),xe=n(ql,"CODE",{});var qn=r(xe);tp=u(qn,"free -h"),qn.forEach(e),pp=u(ql,"로 메모리 사용량을 확인해보니, 사용 가능한 메모리가 남아있지 않는 것을 확인하였다."),ql.forEach(e),Na=i(s),Ns=n(s,"P",{});var Jn=r(Ns);np=u(Jn,`결국 프리 티어 인스턴스의 1GB짜리 메모리는 역시나 부족했다. 눈물을 머금고 Swap space를 추가해야 한다.
Ubuntu 기준, Swap space를 추가하는 방법은 다음과 같다.`),Jn.forEach(e),Ma=i(s),ls=n(s,"PRE",{class:!0});var $r=r(ls);$r.forEach(e),Ia=i(s),D=n(s,"P",{});var Jl=r(D);rp=u(Jl,"이후, 재부팅 이후에도 swap space가 유지되도록 "),Re=n(Jl,"CODE",{});var Fn=r(Re);op=u(Fn,"/etc/fstab"),Fn.forEach(e),ip=u(Jl," 파일을 열고, 최하단에 다음과 같이 추가해주자."),Jl.forEach(e),Da=i(s),ts=n(s,"PRE",{class:!0});var gr=r(ts);gr.forEach(e),Oa=i(s),ps=n(s,"PRE",{class:!0});var so=r(ps);so.forEach(e),Ga=i(s),da=n(s,"BR",{}),Va=n(s,"BR",{}),Wa=i(s),O=n(s,"H3",{id:!0});var tn=r(O);G=n(tn,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Yn=r(G);Se=n(Yn,"SPAN",{class:!0}),r(Se).forEach(e),Yn.forEach(e),cp=u(tn,"5.2. 쓰레드 수와 가상 메모리 크기 설정"),tn.forEach(e),ja=i(s),Ms=n(s,"P",{});var Zn=r(Ms);up=u(Zn,"이 상태에서도 Elasticsearch가 실행되지 않는다. 로그를 살펴보니 bootstrap checks에서 다음과 같은 두 가지 에러가 발생하는 것을 확인하였다."),Zn.forEach(e),Xa=i(s),ns=n(s,"PRE",{class:!0});var eo=r(ns);eo.forEach(e),Ka=i(s),Is=n(s,"P",{});var Qn=r(Is);fp=u(Qn,`max number of threads는 프로세스당 최대 쓰레드 수를 의미하며, max map count는 가상 메모리 크기를 의미한다.
프리 티어 인스턴스이다 보니, 여러모로 제한이 많은 것 같다.`),Qn.forEach(e),za=i(s),Ua=n(s,"BR",{}),qa=i(s),d=n(s,"P",{});var Fl=r(d);kp=u(Fl,"max map count를 수정하는 것은 어렵지 않다. "),Ae=n(Fl,"CODE",{});var $n=r(Ae);Ep=u($n,"/etc/sysctl.conf"),$n.forEach(e),bp=u(Fl," 파일을 열고, 최하단에 다음과 같이 추가해주자."),Fl.forEach(e),Ja=i(s),rs=n(s,"PRE",{class:!0});var ao=r(rs);ao.forEach(e),Fa=i(s),os=n(s,"PRE",{class:!0});var lo=r(os);lo.forEach(e),Ya=i(s),Ds=n(s,"P",{});var gn=r(Ds);vp=u(gn,"이후, 설정을 적용해주자."),gn.forEach(e),Za=i(s),is=n(s,"PRE",{class:!0});var to=r(is);to.forEach(e),Qa=i(s),$a=n(s,"BR",{}),ga=i(s),cs=n(s,"P",{});var pn=r(cs);us=n(pn,"A",{href:!0,rel:!0});var sr=r(us);mp=u(sr,"리눅스에서 프로세스당 쓰레드 수는 기본적으로 실제 메모리 크기에 따라 결정되는 모양이다"),sr.forEach(e),_p=u(pn,`.
따라서 최대 쓰레드 수를 직접 변경해줄 필요가 있다.`),pn.forEach(e),sl=i(s),Os=n(s,"P",{});var er=r(Os);wp=u(er,`변경하기에 앞서, 최대 쓰레드의 수는 스택 사이즈와 관련이 있다.
운영체제 공부 열심히 했다면 짐작할 수 있겠지만, 쓰레드가 생성되면 생성된 쓰레드가 할당받는 스택 공간이 필요하다. 스택 공간이 한정적이기 때문에, 쓰레드의 수도 한정적이다.`),er.forEach(e),el=i(s),Gs=n(s,"P",{});var ar=r(Gs);Pp=u(ar,`따라서, 스택 공간을 늘리면 쓰레드의 수도 늘어날 것이다. 즉, 가상 메모리 크기를 늘리면 된다.
우리는 이미 Swap space를 추가하여 가상 메모리를 늘렸다. 할 일이 하나 줄은 셈이다.`),ar.forEach(e),al=i(s),ds=n(s,"P",{});var lr=r(ds);yp=u(lr,`또는, 스택 사이즈를 줄이면 생성할 수 있는 쓰레드 수가 늘어날 것이다. 쓰레드가 할당받는 스택 사이즈를 줄이면 자연히 더 많은 쓰레드가 생성될 수 있을 것이다.
다만 우리는 이미 가상 메모리를 늘렸으니, 아래의 스택 사이즈를 줄이는 방법은 참고용으로만 보자.`),lr.forEach(e),ll=i(s),Vs=n(s,"P",{});var tr=r(Vs);xp=u(tr,"스택 사이즈를 줄이는 방법은 다음과 같다. 아래 명령어대로 진행하면 스택 사이즈를 줄일 수 있다."),tr.forEach(e),tl=i(s),fs=n(s,"PRE",{class:!0});var po=r(fs);po.forEach(e),pl=i(s),Ws=n(s,"P",{});var pr=r(Ws);Rp=u(pr,"다음으로, 최대 쓰레드 수를 실제로 늘려주자. 현재 사용자의 최대 쓰레드 수를 확인하려면 다음 명령어를 입력하자."),pr.forEach(e),nl=i(s),ks=n(s,"PRE",{class:!0});var no=r(ks);no.forEach(e),rl=i(s),V=n(s,"P",{});var Yl=r(V);Sp=u(Yl,"다음과 같이 "),Ce=n(Yl,"CODE",{});var nr=r(Ce);Ap=u(nr,"/etc/security/limits.conf"),nr.forEach(e),Cp=u(Yl," 파일을 열고, 최하단에 다음과 같이 추가해주자."),Yl.forEach(e),ol=i(s),Es=n(s,"PRE",{class:!0});var ro=r(Es);ro.forEach(e),il=i(s),bs=n(s,"PRE",{class:!0});var oo=r(bs);oo.forEach(e),cl=i(s),vs=n(s,"P",{});var nn=r(vs);Lp=u(nn,"여기서 hard와 soft의 차이가 궁금할 수 있는데, 잘 설명된 포스트가 있다. "),ms=n(nn,"A",{href:!0,rel:!0});var rr=r(ms);Hp=u(rr,"https://lannstark.tistory.com/101"),rr.forEach(e),nn.forEach(e),ul=i(s),W=n(s,"P",{});var Zl=r(W);Tp=u(Zl,"설정을 적용하려면 재부팅해야 한다. "),Le=n(Zl,"CODE",{});var or=r(Le);Bp=u(or,"sudo reboot"),or.forEach(e),hp=u(Zl,"으로 재부팅해도 되고, 클라우드 콘솔에서 재부팅해도 된다."),Zl.forEach(e),fl=i(s),kl=n(s,"BR",{}),El=n(s,"BR",{}),bl=i(s),j=n(s,"H2",{id:!0});var rn=r(j);X=n(rn,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var ir=r(X);He=n(ir,"SPAN",{class:!0}),r(He).forEach(e),ir.forEach(e),Np=u(rn,"6. Elasticsearch 실행"),rn.forEach(e),vl=i(s),js=n(s,"P",{});var cr=r(js);Mp=u(cr,"드디어 Elasticsearch를 실행해볼 차례이다."),cr.forEach(e),ml=i(s),_s=n(s,"PRE",{class:!0});var io=r(_s);io.forEach(e),_l=i(s),Xs=n(s,"P",{});var ur=r(Xs);Ip=u(ur,"잘 실행됐다면 로그에 다음과 같은 메시지가 출력될 것이다."),ur.forEach(e),wl=i(s),ws=n(s,"PRE",{class:!0});var co=r(ws);co.forEach(e),Pl=i(s),Ks=n(s,"P",{});var fr=r(Ks);Dp=u(fr,"이렇게 비밀번호와 토큰값을 비롯하여 여러 정보가 출력되는데, 키바나를 사용한다던지 다른 노드를 클러스터에 추가한다던지 하는 등의 작업을 할 때 사용할 수 있다. 일단 지금 단계에서 필요한 값은 아니니 생략하자."),fr.forEach(e),yl=i(s),_=n(s,"P",{});var Zs=r(_);Op=u(Zs,"여기에서 elasticsearch에 접속하려면 가장 위의 "),Te=n(Zs,"CODE",{});var kr=r(Te);Gp=u(kr,"Password for the elastic user"),kr.forEach(e),dp=u(Zs,`에 있는 비밀번호를 사용하면 된다.
curl을 날릴 때 `),Be=n(Zs,"CODE",{});var Er=r(Be);Vp=u(Er,"-u"),Er.forEach(e),Wp=u(Zs," 옵션을 통해 비밀번호를 입력하면 된다. 이제 잘 실행되는지 확인해보자."),Zs.forEach(e),xl=i(s),Ps=n(s,"PRE",{class:!0});var uo=r(Ps);uo.forEach(e),Rl=i(s),ys=n(s,"PRE",{class:!0});var fo=r(ys);fo.forEach(e),Sl=i(s),zs=n(s,"P",{});var br=r(zs);jp=u(br,"잘 출력된다!"),br.forEach(e),Al=i(s),Cl=n(s,"BR",{}),Ll=n(s,"BR",{}),Hl=i(s),K=n(s,"H2",{id:!0});var on=r(K);z=n(on,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var vr=r(z);he=n(vr,"SPAN",{class:!0}),r(he).forEach(e),vr.forEach(e),Xp=u(on,"7. 외부 접속 설정"),on.forEach(e),Tl=i(s),Bl=n(s,"HR",{}),hl=i(s),U=n(s,"P",{});var Ql=r(U);Kp=u(Ql,"오라클 클라우드의 우분투는 내부 방화벽이 있어서, 외부에서 접근하려고 하면 "),Ne=n(Ql,"CODE",{});var mr=r(Ne);zp=u(mr,"No route to host"),mr.forEach(e),Up=u(Ql,` 에러가 발생한다.
VCN의 Security Group 설정 말고도, 리눅스 내부 방화벽 설정도 해주어야 한다.`),Ql.forEach(e),Nl=i(s),Us=n(s,"P",{});var _r=r(Us);qp=u(_r,`보통은 ufw가 주로 사용되는 것 같은데, 오라클 클라우드의 우분투에서는 iptables를 사용한다.
다음과 같이 9200번 포트를 오픈해주자.`),_r.forEach(e),Ml=i(s),xs=n(s,"PRE",{class:!0});var ko=r(xs);ko.forEach(e),Il=i(s),qs=n(s,"P",{});var wr=r(qs);Jp=u(wr,"이후, 다시 외부에서 접속해보자."),wr.forEach(e),Dl=i(s),Rs=n(s,"PRE",{class:!0});var Eo=r(Rs);Eo.forEach(e),Ol=i(s),Ss=n(s,"PRE",{class:!0});var bo=r(Ss);bo.forEach(e),Gl=i(s),Js=n(s,"P",{});var Pr=r(Js);Fp=u(Pr,"마찬가지로, 잘 출력된다! 잘 되는게 아주 보기 좋다."),Pr.forEach(e),dl=i(s),Vl=n(s,"BR",{}),Wl=n(s,"BR",{}),jl=i(s),q=n(s,"H2",{id:!0});var cn=r(q);J=n(cn,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var yr=r(J);Me=n(yr,"SPAN",{class:!0}),r(Me).forEach(e),yr.forEach(e),Yp=u(cn,"8. 마치며"),cn.forEach(e),Xl=i(s),Kl=n(s,"HR",{}),zl=i(s),Fs=n(s,"P",{});var xr=r(Fs);Zp=u(xr,`elasticsearch는 분산 환경에서 사용됨을 염두에 두고 설계되었기 때문에, 단순한 테스트 및 개발 환경을 구축하는 것만으로도 돈이 쭉쭉 빠져나갈 수밖에 없는 것 같다.
하지만 내 지갑은 소중하니까… 시행착오 끝에 elasticsearch를 프리 티어에 올릴 수 있었다.`),xr.forEach(e),this.h()},h(){f(Qs,"class","icon icon-link"),f(x,"aria-hidden","true"),f(x,"tabindex","-1"),f(x,"href","#1-oracle-cloud-가입"),f(y,"id","1-oracle-cloud-가입"),f(Z,"href","https://www.oracle.com/cloud/"),f(Z,"rel","nofollow"),f($s,"class","icon icon-link"),f(S,"aria-hidden","true"),f(S,"tabindex","-1"),f(S,"href","#2-vcn-설정"),f(R,"id","2-vcn-설정"),f(ie,"class","icon icon-link"),f(C,"aria-hidden","true"),f(C,"tabindex","-1"),f(C,"href","#3-인스턴스-생성"),f(A,"id","3-인스턴스-생성"),f(ce,"class","icon icon-link"),f(H,"aria-hidden","true"),f(H,"tabindex","-1"),f(H,"href","#4-elasticsearch-설치-및-설정"),f(L,"id","4-elasticsearch-설치-및-설정"),f(Q,"class","language-bash"),f($,"href","https://www.elastic.co/guide/en/elasticsearch/reference/current/advanced-configuration.html#set-jvm-heap-size"),f($,"rel","nofollow"),f(g,"class","language-bash"),f(ss,"class","language-text+"),f(es,"class","language-bash"),f(as,"class","language-text+"),f(Pe,"class","icon icon-link"),f(h,"aria-hidden","true"),f(h,"tabindex","-1"),f(h,"href","#5-실행-환경-설정"),f(B,"id","5-실행-환경-설정"),f(ye,"class","icon icon-link"),f(M,"aria-hidden","true"),f(M,"tabindex","-1"),f(M,"href","#51-swap-space-추가"),f(N,"id","51-swap-space-추가"),f(ls,"class","language-bash"),f(ts,"class","language-bash"),f(ps,"class","language-text+"),f(Se,"class","icon icon-link"),f(G,"aria-hidden","true"),f(G,"tabindex","-1"),f(G,"href","#52-쓰레드-수와-가상-메모리-크기-설정"),f(O,"id","52-쓰레드-수와-가상-메모리-크기-설정"),f(ns,"class","language-text+"),f(rs,"class","language-bash"),f(os,"class","language-text+"),f(is,"class","language-bash"),f(us,"href","https://stackoverflow.com/questions/344203/maximum-number-of-threads-per-process-in-linux"),f(us,"rel","nofollow"),f(fs,"class","language-bash"),f(ks,"class","language-bash"),f(Es,"class","language-bash"),f(bs,"class","language-text+"),f(ms,"href","https://lannstark.tistory.com/101"),f(ms,"rel","nofollow"),f(He,"class","icon icon-link"),f(X,"aria-hidden","true"),f(X,"tabindex","-1"),f(X,"href","#6-elasticsearch-실행"),f(j,"id","6-elasticsearch-실행"),f(_s,"class","language-bash"),f(ws,"class","language-text+"),f(Ps,"class","language-bash"),f(ys,"class","language-json"),f(he,"class","icon icon-link"),f(z,"aria-hidden","true"),f(z,"tabindex","-1"),f(z,"href","#7-외부-접속-설정"),f(K,"id","7-외부-접속-설정"),f(xs,"class","language-bash"),f(Rs,"class","language-bash"),f(Ss,"class","language-json"),f(Me,"class","icon icon-link"),f(J,"aria-hidden","true"),f(J,"tabindex","-1"),f(J,"href","#8-마치며"),f(q,"id","8-마치며")},m(s,a){l(s,P,a),t(P,$l),l(s,Ie,a),l(s,De,a),l(s,Oe,a),l(s,Ge,a),l(s,y,a),t(y,x),t(x,Qs),t(y,gl),l(s,de,a),l(s,Ve,a),l(s,We,a),l(s,Y,a),t(Y,Z),t(Z,st),t(Y,et),l(s,je,a),l(s,As,a),t(As,at),l(s,Xe,a),l(s,Ke,a),l(s,ze,a),l(s,Ue,a),l(s,R,a),t(R,S),t(S,$s),t(R,lt),l(s,qe,a),l(s,Je,a),l(s,Fe,a),l(s,Cs,a),t(Cs,tt),l(s,Ye,a),l(s,Ls,a),t(Ls,pt),l(s,Ze,a),l(s,k,a),t(k,gs),t(gs,nt),t(k,rt),t(k,se),t(se,ot),t(k,it),t(k,ee),t(ee,ct),t(k,ut),t(k,ae),t(ae,ft),t(k,kt),t(k,le),t(le,Et),t(k,bt),t(k,te),t(te,vt),t(k,mt),t(k,pe),t(pe,_t),t(k,wt),t(k,ne),t(ne,Pt),t(k,yt),t(k,re),t(re,xt),t(k,Rt),t(k,oe),t(oe,St),l(s,Qe,a),l(s,$e,a),l(s,ge,a),l(s,sa,a),l(s,A,a),t(A,C),t(C,ie),t(A,At),l(s,ea,a),l(s,aa,a),l(s,la,a),l(s,Hs,a),t(Hs,Ct),l(s,ta,a),l(s,Ts,a),t(Ts,Lt),l(s,pa,a),l(s,Bs,a),t(Bs,Ht),l(s,na,a),l(s,ra,a),l(s,oa,a),l(s,ia,a),l(s,L,a),t(L,H),t(H,ce),t(L,Tt),l(s,ca,a),l(s,ua,a),l(s,fa,a),l(s,hs,a),t(hs,Bt),l(s,ka,a),l(s,Q,a),Q.innerHTML=Sr,l(s,Ea,a),l(s,b,a),t(b,ht),t(b,ue),t(ue,Nt),t(b,Mt),t(b,fe),t(fe,It),t(b,Dt),t(b,ke),t(ke,Ot),t(b,Gt),t(b,$),t($,dt),t(b,Vt),l(s,ba,a),l(s,g,a),g.innerHTML=Ar,l(s,va,a),l(s,ss,a),ss.innerHTML=Cr,l(s,ma,a),l(s,m,a),t(m,Wt),t(m,Ee),t(Ee,jt),t(m,Xt),t(m,be),t(be,Kt),t(m,zt),l(s,_a,a),l(s,wa,a),l(s,Pa,a),l(s,T,a),t(T,Ut),t(T,ve),t(ve,qt),t(T,Jt),l(s,ya,a),l(s,es,a),es.innerHTML=Lr,l(s,xa,a),l(s,as,a),as.innerHTML=Hr,l(s,Ra,a),l(s,v,a),t(v,Ft),t(v,me),t(me,Yt),t(v,Zt),t(v,_e),t(_e,Qt),t(v,$t),t(v,we),t(we,gt),t(v,sp),l(s,Sa,a),l(s,Aa,a),l(s,Ca,a),l(s,La,a),l(s,B,a),t(B,h),t(h,Pe),t(B,ep),l(s,Ha,a),l(s,Ta,a),l(s,Ba,a),l(s,N,a),t(N,M),t(M,ye),t(N,ap),l(s,ha,a),l(s,I,a),t(I,lp),t(I,xe),t(xe,tp),t(I,pp),l(s,Na,a),l(s,Ns,a),t(Ns,np),l(s,Ma,a),l(s,ls,a),ls.innerHTML=Tr,l(s,Ia,a),l(s,D,a),t(D,rp),t(D,Re),t(Re,op),t(D,ip),l(s,Da,a),l(s,ts,a),ts.innerHTML=Br,l(s,Oa,a),l(s,ps,a),ps.innerHTML=hr,l(s,Ga,a),l(s,da,a),l(s,Va,a),l(s,Wa,a),l(s,O,a),t(O,G),t(G,Se),t(O,cp),l(s,ja,a),l(s,Ms,a),t(Ms,up),l(s,Xa,a),l(s,ns,a),ns.innerHTML=Nr,l(s,Ka,a),l(s,Is,a),t(Is,fp),l(s,za,a),l(s,Ua,a),l(s,qa,a),l(s,d,a),t(d,kp),t(d,Ae),t(Ae,Ep),t(d,bp),l(s,Ja,a),l(s,rs,a),rs.innerHTML=Mr,l(s,Fa,a),l(s,os,a),os.innerHTML=Ir,l(s,Ya,a),l(s,Ds,a),t(Ds,vp),l(s,Za,a),l(s,is,a),is.innerHTML=Dr,l(s,Qa,a),l(s,$a,a),l(s,ga,a),l(s,cs,a),t(cs,us),t(us,mp),t(cs,_p),l(s,sl,a),l(s,Os,a),t(Os,wp),l(s,el,a),l(s,Gs,a),t(Gs,Pp),l(s,al,a),l(s,ds,a),t(ds,yp),l(s,ll,a),l(s,Vs,a),t(Vs,xp),l(s,tl,a),l(s,fs,a),fs.innerHTML=Or,l(s,pl,a),l(s,Ws,a),t(Ws,Rp),l(s,nl,a),l(s,ks,a),ks.innerHTML=Gr,l(s,rl,a),l(s,V,a),t(V,Sp),t(V,Ce),t(Ce,Ap),t(V,Cp),l(s,ol,a),l(s,Es,a),Es.innerHTML=dr,l(s,il,a),l(s,bs,a),bs.innerHTML=Vr,l(s,cl,a),l(s,vs,a),t(vs,Lp),t(vs,ms),t(ms,Hp),l(s,ul,a),l(s,W,a),t(W,Tp),t(W,Le),t(Le,Bp),t(W,hp),l(s,fl,a),l(s,kl,a),l(s,El,a),l(s,bl,a),l(s,j,a),t(j,X),t(X,He),t(j,Np),l(s,vl,a),l(s,js,a),t(js,Mp),l(s,ml,a),l(s,_s,a),_s.innerHTML=Wr,l(s,_l,a),l(s,Xs,a),t(Xs,Ip),l(s,wl,a),l(s,ws,a),ws.innerHTML=jr,l(s,Pl,a),l(s,Ks,a),t(Ks,Dp),l(s,yl,a),l(s,_,a),t(_,Op),t(_,Te),t(Te,Gp),t(_,dp),t(_,Be),t(Be,Vp),t(_,Wp),l(s,xl,a),l(s,Ps,a),Ps.innerHTML=Xr,l(s,Rl,a),l(s,ys,a),ys.innerHTML=Kr,l(s,Sl,a),l(s,zs,a),t(zs,jp),l(s,Al,a),l(s,Cl,a),l(s,Ll,a),l(s,Hl,a),l(s,K,a),t(K,z),t(z,he),t(K,Xp),l(s,Tl,a),l(s,Bl,a),l(s,hl,a),l(s,U,a),t(U,Kp),t(U,Ne),t(Ne,zp),t(U,Up),l(s,Nl,a),l(s,Us,a),t(Us,qp),l(s,Ml,a),l(s,xs,a),xs.innerHTML=zr,l(s,Il,a),l(s,qs,a),t(qs,Jp),l(s,Dl,a),l(s,Rs,a),Rs.innerHTML=Ur,l(s,Ol,a),l(s,Ss,a),Ss.innerHTML=qr,l(s,Gl,a),l(s,Js,a),t(Js,Fp),l(s,dl,a),l(s,Vl,a),l(s,Wl,a),l(s,jl,a),l(s,q,a),t(q,J),t(J,Me),t(q,Yp),l(s,Xl,a),l(s,Kl,a),l(s,zl,a),l(s,Fs,a),t(Fs,Zp)},p:un,i:un,o:un,d(s){s&&e(P),s&&e(Ie),s&&e(De),s&&e(Oe),s&&e(Ge),s&&e(y),s&&e(de),s&&e(Ve),s&&e(We),s&&e(Y),s&&e(je),s&&e(As),s&&e(Xe),s&&e(Ke),s&&e(ze),s&&e(Ue),s&&e(R),s&&e(qe),s&&e(Je),s&&e(Fe),s&&e(Cs),s&&e(Ye),s&&e(Ls),s&&e(Ze),s&&e(k),s&&e(Qe),s&&e($e),s&&e(ge),s&&e(sa),s&&e(A),s&&e(ea),s&&e(aa),s&&e(la),s&&e(Hs),s&&e(ta),s&&e(Ts),s&&e(pa),s&&e(Bs),s&&e(na),s&&e(ra),s&&e(oa),s&&e(ia),s&&e(L),s&&e(ca),s&&e(ua),s&&e(fa),s&&e(hs),s&&e(ka),s&&e(Q),s&&e(Ea),s&&e(b),s&&e(ba),s&&e(g),s&&e(va),s&&e(ss),s&&e(ma),s&&e(m),s&&e(_a),s&&e(wa),s&&e(Pa),s&&e(T),s&&e(ya),s&&e(es),s&&e(xa),s&&e(as),s&&e(Ra),s&&e(v),s&&e(Sa),s&&e(Aa),s&&e(Ca),s&&e(La),s&&e(B),s&&e(Ha),s&&e(Ta),s&&e(Ba),s&&e(N),s&&e(ha),s&&e(I),s&&e(Na),s&&e(Ns),s&&e(Ma),s&&e(ls),s&&e(Ia),s&&e(D),s&&e(Da),s&&e(ts),s&&e(Oa),s&&e(ps),s&&e(Ga),s&&e(da),s&&e(Va),s&&e(Wa),s&&e(O),s&&e(ja),s&&e(Ms),s&&e(Xa),s&&e(ns),s&&e(Ka),s&&e(Is),s&&e(za),s&&e(Ua),s&&e(qa),s&&e(d),s&&e(Ja),s&&e(rs),s&&e(Fa),s&&e(os),s&&e(Ya),s&&e(Ds),s&&e(Za),s&&e(is),s&&e(Qa),s&&e($a),s&&e(ga),s&&e(cs),s&&e(sl),s&&e(Os),s&&e(el),s&&e(Gs),s&&e(al),s&&e(ds),s&&e(ll),s&&e(Vs),s&&e(tl),s&&e(fs),s&&e(pl),s&&e(Ws),s&&e(nl),s&&e(ks),s&&e(rl),s&&e(V),s&&e(ol),s&&e(Es),s&&e(il),s&&e(bs),s&&e(cl),s&&e(vs),s&&e(ul),s&&e(W),s&&e(fl),s&&e(kl),s&&e(El),s&&e(bl),s&&e(j),s&&e(vl),s&&e(js),s&&e(ml),s&&e(_s),s&&e(_l),s&&e(Xs),s&&e(wl),s&&e(ws),s&&e(Pl),s&&e(Ks),s&&e(yl),s&&e(_),s&&e(xl),s&&e(Ps),s&&e(Rl),s&&e(ys),s&&e(Sl),s&&e(zs),s&&e(Al),s&&e(Cl),s&&e(Ll),s&&e(Hl),s&&e(K),s&&e(Tl),s&&e(Bl),s&&e(hl),s&&e(U),s&&e(Nl),s&&e(Us),s&&e(Ml),s&&e(xs),s&&e(Il),s&&e(qs),s&&e(Dl),s&&e(Rs),s&&e(Ol),s&&e(Ss),s&&e(Gl),s&&e(Js),s&&e(dl),s&&e(Vl),s&&e(Wl),s&&e(jl),s&&e(q),s&&e(Xl),s&&e(Kl),s&&e(zl),s&&e(Fs)}}}class yo extends vo{constructor(P){super(),mo(this,P,null,wo,_o,{})}}export{yo as default};
