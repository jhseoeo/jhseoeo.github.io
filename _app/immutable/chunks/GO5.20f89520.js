import{S as kc,i as fc,s as dc,k as p,a as i,q as l,y as mc,l as e,c as r,m as u,r as c,h as s,z as bc,n as k,b as o,E as a,A as vc,M as Ec,g as yc,d as _c,B as wc}from"./index.d78780bf.js";import{I as Rc}from"./Image.605b14b5.js";function Pc(Gl){let Cn,Is,Nn,zt,$s,zs,qs,Js,T,S,Ln,qt,Zs,Ks,Us,Ws,Qs,j,M,Gn,Jt,Xs,On,Zt,Ys,on,Fl=`<code class="language-go"><span class="token keyword">func</span> <span class="token function">div</span><span class="token punctuation">(</span>numerator <span class="token builtin">int</span><span class="token punctuation">,</span> denominator <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span> <span class="token comment">// parameters and each type of this, and the return type specified here</span>
	<span class="token comment">// if there is no return type specified (as like main function), no return statement is needed in the function body.</span>
	<span class="token keyword">if</span> denominator <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token number">0</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">return</span> numerator <span class="token operator">/</span> denominator
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	res <span class="token operator">:=</span> <span class="token function">div</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code>`,hs,H,Kt,Fn,Ut,Wt,gs,na,sa,aa,L,G,Vn,Qt,ta,Bn,Xt,pa,x,Yt,In,ht,gt,$n,np,ea,ln,Vl=`<code class="language-go"><span class="token keyword">type</span> MyFuncOpts <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
	FirstName <span class="token builtin">string</span>
	LastName  <span class="token builtin">string</span>
	Age       <span class="token builtin">int</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">MyFunc</span><span class="token punctuation">(</span>opts MyFuncOpts<span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">return</span> opts<span class="token punctuation">.</span>FirstName <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> opts<span class="token punctuation">.</span>LastName <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> strconv<span class="token punctuation">.</span><span class="token function">Itoa</span><span class="token punctuation">(</span>opts<span class="token punctuation">.</span>Age<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code>`,oa,la,ca,ua,F,V,zn,sp,ia,I,ap,qn,tp,pp,ra,cn,Il=`<code class="language-go"><span class="token keyword">func</span> <span class="token function">addTo</span><span class="token punctuation">(</span>base <span class="token builtin">int</span><span class="token punctuation">,</span> vals <span class="token operator">...</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span> <span class="token comment">// put three dots(...) before type to declare a parameter as variadic</span>
	<span class="token keyword">var</span> res <span class="token builtin">int</span>
	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> vals <span class="token punctuation">&#123;</span>
		res <span class="token operator">+=</span> v
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">return</span> res
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	addVal1 <span class="token operator">:=</span> <span class="token function">addTo</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>            <span class="token comment">// we can pass parameters as multiple parameters</span>
	addVal2 <span class="token operator">:=</span> <span class="token function">addTo</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">&#125;</span><span class="token operator">...</span><span class="token punctuation">)</span> <span class="token comment">// we can pass parameters as slice, but must put three dots(...) after slice.</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>addVal1<span class="token punctuation">,</span> addVal2<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code>`,ka,$,ep,Jn,op,lp,fa,da,ma,ba,z,q,Zn,cp,va,P,up,Kn,ip,rp,Un,kp,fp,Ea,J,dp,Wn,mp,bp,ya,un,$l=`<code class="language-go"><span class="token keyword">func</span> <span class="token function">divAndRemainder</span><span class="token punctuation">(</span>numerator <span class="token builtin">int</span><span class="token punctuation">,</span> denomiator <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> denomiator <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"cannot divide by zero"</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> numerator <span class="token operator">/</span> denomiator<span class="token punctuation">,</span> numerator <span class="token operator">%</span> denomiator<span class="token punctuation">,</span> <span class="token boolean">nil</span> <span class="token comment">// must return all of return values, without parantheses</span>
		<span class="token comment">// if there is no error, just return nil for error.</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	result1<span class="token punctuation">,</span> remainder1<span class="token punctuation">,</span> err1 <span class="token operator">:=</span> <span class="token function">divAndRemainder</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// if we try assigning multiple return values into a single variable, there will be a compile-time error</span>
	result2<span class="token punctuation">,</span> <span class="token boolean">_</span><span class="token punctuation">,</span> err2 <span class="token operator">:=</span> <span class="token function">divAndRemainder_Named</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>    <span class="token comment">// if we don't need to get remainder as variable, just using _, we can ignore it</span>
<span class="token punctuation">&#125;</span></code>`,_a,b,vp,Qn,Ep,yp,Xn,_p,wp,Rp,Pp,Yn,Cp,Np,wa,Ra,Pa,Ca,Z,K,hn,Op,Na,U,Bp,gn,xp,Dp,Oa,m,Ap,Tp,Sp,jp,Mp,ns,Hp,Lp,ss,Gp,Fp,as,Vp,Ip,Ba,rn,zl=`<code class="language-go"><span class="token keyword">func</span> <span class="token function">divAndRemainder_Named</span><span class="token punctuation">(</span>numerator <span class="token builtin">int</span><span class="token punctuation">,</span> denomiator <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>result <span class="token builtin">int</span><span class="token punctuation">,</span> remainder <span class="token builtin">int</span><span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> denomiator <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>
		err <span class="token operator">=</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"cannot divide by zero"</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span> result<span class="token punctuation">,</span> remainder<span class="token punctuation">,</span> err
		<span class="token comment">// return 0, 0, errors.New("cannot divide by zero") // this statement is also legal. it is not essential to use name of return value</span>
	<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
		result <span class="token operator">=</span> numerator <span class="token operator">/</span> denomiator
		remainder <span class="token operator">=</span> numerator <span class="token operator">%</span> denomiator
		<span class="token keyword">return</span> result<span class="token punctuation">,</span> remainder<span class="token punctuation">,</span> err
		<span class="token comment">// return // blank return can reduce amount of typing, but it is less readable.</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,xa,v,$p,ts,zp,qp,ps,Jp,Zp,es,Kp,Up,os,Wp,Qp,Da,Aa,Ta,Sa,W,Q,ls,Xp,ja,xn,Yp,Ma,kn,ql=`<code class="language-go"><span class="token keyword">func</span> <span class="token function">add</span><span class="token punctuation">(</span>i <span class="token builtin">int</span><span class="token punctuation">,</span> j <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> i <span class="token operator">+</span> j <span class="token punctuation">&#125;</span>
<span class="token keyword">func</span> <span class="token function">sub</span><span class="token punctuation">(</span>i <span class="token builtin">int</span><span class="token punctuation">,</span> j <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> i <span class="token operator">-</span> j <span class="token punctuation">&#125;</span>
<span class="token keyword">func</span> <span class="token function">mul</span><span class="token punctuation">(</span>i <span class="token builtin">int</span><span class="token punctuation">,</span> j <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> i <span class="token operator">*</span> j <span class="token punctuation">&#125;</span>
<span class="token keyword">func</span> <span class="token function">div</span><span class="token punctuation">(</span>i <span class="token builtin">int</span><span class="token punctuation">,</span> j <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> i <span class="token operator">/</span> j <span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">var</span> opMap <span class="token operator">=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">func</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span><span class="token punctuation">&#123;</span>
		<span class="token string">"+"</span><span class="token punctuation">:</span> add<span class="token punctuation">,</span>
		<span class="token string">"-"</span><span class="token punctuation">:</span> sub<span class="token punctuation">,</span>
		<span class="token string">"*"</span><span class="token punctuation">:</span> mul<span class="token punctuation">,</span>
		<span class="token string">"/"</span><span class="token punctuation">:</span> div<span class="token punctuation">,</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,Ha,C,hp,cs,gp,ne,us,se,ae,La,X,te,is,pe,ee,Ga,fn,Jl=`<code class="language-go"><span class="token keyword">func</span> <span class="token function">add</span><span class="token punctuation">(</span>i <span class="token builtin">int</span><span class="token punctuation">,</span> j <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> i <span class="token operator">+</span> j <span class="token punctuation">&#125;</span>
<span class="token keyword">func</span> <span class="token function">sub</span><span class="token punctuation">(</span>i <span class="token builtin">int</span><span class="token punctuation">,</span> j <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> i <span class="token operator">-</span> j <span class="token punctuation">&#125;</span>
<span class="token keyword">func</span> <span class="token function">mul</span><span class="token punctuation">(</span>i <span class="token builtin">int</span><span class="token punctuation">,</span> j <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> i <span class="token operator">*</span> j <span class="token punctuation">&#125;</span>
<span class="token keyword">func</span> <span class="token function">div</span><span class="token punctuation">(</span>i <span class="token builtin">int</span><span class="token punctuation">,</span> j <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> i <span class="token operator">/</span> j <span class="token punctuation">&#125;</span>

<span class="token keyword">type</span> opFuncType <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">var</span> opMap <span class="token operator">=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span>opFuncType<span class="token punctuation">&#123;</span>
		<span class="token string">"+"</span><span class="token punctuation">:</span> add<span class="token punctuation">,</span>
		<span class="token string">"-"</span><span class="token punctuation">:</span> sub<span class="token punctuation">,</span>
		<span class="token string">"*"</span><span class="token punctuation">:</span> mul<span class="token punctuation">,</span>
		<span class="token string">"/"</span><span class="token punctuation">:</span> div<span class="token punctuation">,</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,Fa,Va,Ia,$a,Y,h,rs,oe,za,Dn,le,qa,dn,Zl=`<code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	pow <span class="token operator">:=</span> <span class="token keyword">func</span><span class="token punctuation">(</span>num <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span> <span class="token comment">// using keyword &#96;func&#96;, we can declare an anonyymous function</span>
		<span class="token comment">// if we put a function name on anonymous function, it will occur a compile-time error</span>
		<span class="token keyword">return</span> num <span class="token operator">*</span> num
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">func</span><span class="token punctuation">(</span>j <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Printing"</span><span class="token punctuation">,</span> <span class="token function">pow</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"from inside of an anonymous function"</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#125;</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token comment">// anonymous function are declared and called immediately</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,Ja,Za,Ka,Ua,g,nn,ks,ce,Wa,Qa,Xa,D,fs,ue,ie,ds,re,ke,Ya,ha,ga,E,ms,fe,de,bs,me,be,vs,ve,Ee,Es,ye,_e,nt,mn,Kl=`<code class="language-go"><span class="token keyword">type</span> Person <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
	FirstName <span class="token builtin">string</span>
	LastName  <span class="token builtin">string</span>
	Age       <span class="token builtin">int</span>
<span class="token punctuation">&#125;</span>

people <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>Person<span class="token punctuation">&#123;</span>
	<span class="token punctuation">&#123;</span><span class="token string">"Kimkim"</span><span class="token punctuation">,</span> <span class="token string">"Kim"</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
	<span class="token punctuation">&#123;</span><span class="token string">"Junhyuk"</span><span class="token punctuation">,</span> <span class="token string">"Seo"</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
	<span class="token punctuation">&#123;</span><span class="token string">"Leelee"</span><span class="token punctuation">,</span> <span class="token string">"Lee"</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// we can pass functions as parameter in Go</span>
sort<span class="token punctuation">.</span><span class="token function">Slice</span><span class="token punctuation">(</span>people<span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>i <span class="token builtin">int</span><span class="token punctuation">,</span> j <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">&#123;</span> <span class="token comment">// sort.Slice sorts the slice using function that is passed in</span>
	<span class="token keyword">return</span> people<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Age <span class="token operator">&lt;</span> people<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>Age <span class="token comment">// sorting by Age field</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>people<span class="token punctuation">)</span>

sort<span class="token punctuation">.</span><span class="token function">Slice</span><span class="token punctuation">(</span>people<span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>i <span class="token builtin">int</span><span class="token punctuation">,</span> j <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">return</span> people<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>LastName <span class="token operator">&lt;</span> people<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>LastName
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>people<span class="token punctuation">)</span></code>`,st,An,we,at,tt,pt,bn,Ul=`<code class="language-go"><span class="token keyword">func</span> <span class="token function">makeMult</span><span class="token punctuation">(</span>base <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">return</span> <span class="token keyword">func</span><span class="token punctuation">(</span>factor <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> base <span class="token operator">*</span> factor
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	twoBase <span class="token operator">:=</span> <span class="token function">makeMult</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
	threeBase <span class="token operator">:=</span> <span class="token function">makeMult</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>

	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">twoBase</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">threeBase</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,et,Tn,Re,ot,lt,ct,ut,sn,an,ys,Pe,it,rt,kt,N,Ce,_s,Ne,Oe,Be,xe,ft,vn,Wl=`<code class="language-go"><span class="token keyword">func</span> <span class="token function">getFile</span><span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>os<span class="token punctuation">.</span>File<span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	file<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err
	<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span> <span class="token comment">// it returns resource and a closure that cleans up the resource</span>
		<span class="token keyword">return</span> file<span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> file<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token boolean">_</span><span class="token punctuation">,</span> closer<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">getFile</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>Args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">defer</span> <span class="token function">closer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// releases the resource by using defer and closer function</span>
<span class="token punctuation">&#125;</span></code>`,dt,mt,bt,w,ws,De,Ae,Rs,Te,Se,Ps,je,Me,vt,En,Ql=`<code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	j <span class="token operator">:=</span> <span class="token number">2</span>

	<span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span>i <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span>

	j<span class="token operator">++</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code>`,Et,Sn,He,yt,yn,Xl=`<code class="language-go"><span class="token number">3</span>
<span class="token number">2</span></code>`,_t,f,Le,Cs,Ge,Fe,Ns,Ve,Ie,Os,$e,ze,Bs,qe,Je,xs,Ze,Ke,Ue,We,Ds,Qe,Xe,As,Ye,he,Ts,ge,no,Ss,so,ao,wt,Rt,Pt,_n,Yl=`<code class="language-go"><span class="token keyword">func</span> <span class="token function">DoSomeInserts</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> db <span class="token operator">*</span>sql<span class="token punctuation">.</span>DB<span class="token punctuation">,</span> value1<span class="token punctuation">,</span> value2 <span class="token builtin">string</span><span class="token punctuation">)</span>
                  <span class="token punctuation">(</span>err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    tx<span class="token punctuation">,</span> err <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">BeginTx</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> err
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
            err <span class="token operator">=</span> tx<span class="token punctuation">.</span><span class="token function">Commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
            tx<span class="token punctuation">.</span><span class="token function">Rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">=</span> tx<span class="token punctuation">.</span><span class="token function">ExecContext</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token string">"INSERT INTO FOO (val) values $1"</span><span class="token punctuation">,</span> value1<span class="token punctuation">)</span>
    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> err
    <span class="token punctuation">&#125;</span>
    <span class="token comment">// use tx to do more database inserts here</span>
    <span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">&#125;</span></code>`,Ct,y,to,js,po,eo,Ms,oo,lo,Hs,co,uo,Nt,Ot,Bt,xt,tn,pn,Ls,io,Dt,At,Tt,R,Gs,ro,ko,wn,fo,mo,bo,St,jt,Mt,Ht;return wn=new Rc({props:{alt:"Learning Go Book Cover",src:"https://learning.oreilly.com/covers/urn:orm:book:9781492077206/400w/"}}),{c(){Cn=p("br"),Is=i(),Nn=p("p"),zt=l("본 글은 Golang을 공부하며 주요 내용이라 생각되는 것들을 기록해둔 자료이며, Ubuntu 20.04 LTS 기준으로 작성되었습니다."),$s=i(),zs=p("br"),qs=p("br"),Js=i(),T=p("h2"),S=p("a"),Ln=p("span"),qt=l("Functions"),Zs=i(),Ks=p("hr"),Us=i(),Ws=p("br"),Qs=i(),j=p("h3"),M=p("a"),Gn=p("span"),Jt=l("Declaration and Invocation"),Xs=i(),On=p("p"),Zt=l(`함수에는 파라미터들과 그 타입, 반환형의 타입을 명시한다. 파라미터의 타입은 변수 선언처럼 타입이 뒤에 온다.
파라미터와 함수 body 사이에 반환형이 위치한다.`),Ys=i(),on=p("pre"),hs=i(),H=p("p"),Kt=l("파라미터들의 타입이 중복되면 생략할 수 있다. 위 함수의 선언 부분을 "),Fn=p("code"),Ut=l("func div(numerator denominator int) int {"),Wt=l("로 대체하여도 동일하게 동작한다."),gs=i(),na=p("br"),sa=p("br"),aa=i(),L=p("h3"),G=p("a"),Vn=p("span"),Qt=l("Emulating Named Parameters using Struct"),ta=i(),Bn=p("p"),Xt=l(`Go는 named parameter나, parameter의 default value를 지원하지 않는다(Optional parameter가 없다).
다시 말해, 함수가 있으면 그 함수의 모든 파라미터를 넘겨줘야 한다.`),pa=i(),x=p("p"),Yt=l("named parameter는 함수의 파라미터가 많을 때 유용하기 때문에, "),In=p("code"),ht=l("struct"),gt=l(`로 이를 대체할 수는 있다.
다만 애초에 함수의 파라미터가 많은 게 그리 이상적인 상황은 아니긴 하다.
아래의 코드는 `),$n=p("code"),np=l("struct"),ea=i(),ln=p("pre"),oa=i(),la=p("br"),ca=p("br"),ua=i(),F=p("h3"),V=p("a"),zn=p("span"),sp=l("Variadic Parameter"),ia=i(),I=p("p"),ap=l("파라미터의 타입 앞에 "),qn=p("code"),tp=l("..."),pp=l("를 붙여 variadic parameter로 만들 수 있다. Python의 *args랑 비슷하다."),ra=i(),cn=p("pre"),ka=i(),$=p("p"),ep=l("Slice의 뒤에 "),Jn=p("code"),op=l("..."),lp=l("를 붙여, variadic parameter와 대응시킬 수도 있다."),fa=i(),da=p("br"),ma=p("br"),ba=i(),z=p("h3"),q=p("a"),Zn=p("span"),cp=l("Multiple Return Values"),va=i(),P=p("p"),up=l(`Go의 특이한 점은 함수가 반환할 수 있는 값이 여러 개 존재한다는 것이다.
`),Kn=p("code"),ip=l("Tuple"),rp=l("형으로 값을 반환하는 Python과 그나마 유사한데, 사실 이것도 "),Un=p("code"),kp=l("Tuple"),fp=l("로 묶어서 보내는 거라 엄연히 다르다."),Ea=i(),J=p("p"),dp=l(`반환 값을 여러개 설정하려면 반환형을 써야 할 위치에 반환형들을 순서대로 나열한 뒤 소괄호로 묶으면 된다.
`),Wn=p("code"),mp=l("return"),bp=l("할 때 괄호로 묶어줄 필요는 없다."),ya=i(),un=p("pre"),_a=i(),b=p("p"),vp=l("함수에서 반환된 값들을 변수에 저장할 때는 "),Qn=p("code"),Ep=l("range"),yp=l("를 쓸 때와 유사하게, 컴마("),Xn=p("code"),_p=l(","),wp=l(")로 구분하여 순서대로 변수을 나열하면 된다."),Rp=p("br"),Pp=l(`
언더바(`),Yn=p("code"),Cp=l("_"),Np=l(")를 사용하면 저장할 필요 없는 변수는 생략할 수 있다. 이 역시도 앞서 봤던 패턴이다."),wa=i(),Ra=p("br"),Pa=p("br"),Ca=i(),Z=p("h3"),K=p("a"),hn=p("span"),Op=l("Named Return Values"),Na=i(),U=p("p"),Bp=l("반환할 값들을 변수로 지정할 수 있는데, 이를 "),gn=p("strong"),xp=l("Named return value"),Dp=l(`라 한다.
Named return value들은 기본적으로 Zero value로 초기화된다.
또한 Named return value를 사용할 경우 반환할 값이 하나여도 소괄호로 둘러싸줘야 한다.`),Oa=i(),m=p("p"),Ap=l("단, Named Return Value를 사용하면 두 가지 잠재적 문제점이 생길 수 있다."),Tp=p("br"),Sp=l(`
하나는 Named return value을 shadowing할 수도 있다는 문제이다.`),jp=p("br"),Mp=l(`
또 하나는 `),ns=p("code"),Hp=l("return result, remainder, err"),Lp=l(" 대신에 "),ss=p("code"),Gp=l('return 0, 0, errors.New("cannot divide by zero")'),Fp=l(` 이런 식으로
Named return value를 사용하지 않고 `),as=p("code"),Vp=l("return"),Ip=l(`하여도 문제가 없다.
이 때문에 코드가 일관적으로 작성되지 않을 수도 있다는 점이다.`),Ba=i(),rn=p("pre"),xa=i(),v=p("p"),$p=l("Named Return Value를 사용하면 "),ts=p("strong"),zp=l("Blank return"),qp=l(`이란 것이 가능한데,
`),ps=p("code"),Jp=l("return result, remainder, err"),Zp=l(" 대신 "),es=p("code"),Kp=l("return"),Up=l("만 적어도 "),os=p("code"),Wp=l("result, remainder, err"),Qp=l(`가 반환된다.
Named return value가 명시된 순서대로 반환하는 것이다.`),Da=i(),Aa=p("br"),Ta=p("br"),Sa=i(),W=p("h3"),Q=p("a"),ls=p("span"),Xp=l("Functions Are Value"),ja=i(),xn=p("p"),Yp=l("다른 많은 언어에서 그러하듯, Go에서 함수는 값으로 여겨진다. 다시 말해 변수에 집어넣거나 할 수 있다."),Ma=i(),kn=p("pre"),Ha=i(),C=p("p"),hp=l("예제는 4개의 함수를 "),cs=p("code"),gp=l("map"),ne=l("의 값으로 집어넣은 예제이다. 이 때 map의 value 타입은 "),us=p("code"),se=l("func(int, int), int"),ae=l("가 된다."),La=i(),X=p("p"),te=l("아래 예제처럼 "),is=p("code"),pe=l("type"),ee=l(" 키워드를 사용하여 타입을 간략화할 수도 있다."),Ga=i(),fn=p("pre"),Fa=i(),Va=p("br"),Ia=p("br"),$a=i(),Y=p("h3"),h=p("a"),rs=p("span"),oe=l("Anonymous Function"),za=i(),Dn=p("p"),le=l("함수를 선언할 때 함수명만 지우면 익명함수가 된다. 익명함수를 즉시 호출하려면 익명함수 뒤에 소괄호를 붙여 파라미터만 보내주면 된다."),qa=i(),dn=p("pre"),Ja=i(),Za=p("br"),Ka=p("br"),Ua=i(),g=p("h2"),nn=p("a"),ks=p("span"),ce=l("Closure"),Wa=i(),Qa=p("hr"),Xa=i(),D=p("p"),fs=p("strong"),ue=l("Closure"),ie=l("란 특정한 함수 안에서 선언된 함수를 의미한다. 대체로 파라미터로 넘겨지거나, "),ds=p("code"),re=l("return"),ke=l("을 통해 반환된다."),Ya=i(),ha=p("br"),ga=i(),E=p("p"),ms=p("code"),fe=l("sort.Slice()"),de=l("함수는 파라미터로 정렬할 데이터와 원소들의 대소를 비교하여 "),bs=p("code"),me=l("bool"),be=l(`값을 반환하는 함수를 인자로 받는다.
이 함수의 `),vs=p("code"),ve=l("true"),Ee=l(" 및 "),Es=p("code"),ye=l("false"),_e=l(" 여부에 따라 Slice가 정렬된다."),nt=i(),mn=p("pre"),st=i(),An=p("p"),we=l("ㅇㅇ"),at=i(),tt=p("br"),pt=i(),bn=p("pre"),et=i(),Tn=p("p"),Re=l("위 예제는 함수의 반환형이 Closure인 예제이다. 익명 함수로 반환되었다."),ot=i(),lt=p("br"),ct=p("br"),ut=i(),sn=p("h2"),an=p("a"),ys=p("span"),Pe=l("defer"),it=i(),rt=p("hr"),kt=i(),N=p("p"),Ce=l("Go에는 "),_s=p("strong"),Ne=l("defer"),Oe=l("라는 키워드가 존재한다. 다른 언어에는 없는데 Go에만 있는 것 같다."),Be=p("br"),xe=l(`
일반적으로 파일이나 네트워크 연결 등, 임시적으로 쓰이는 자원들을 다시 반납하기 위해 사용되는 것 같다.`),ft=i(),vn=p("pre"),dt=i(),mt=p("br"),bt=i(),w=p("p"),ws=p("code"),De=l("defer"),Ae=l(" 키워드가 쓰인 "),Rs=p("em"),Te=l("Closure"),Se=l("는 값을 "),Ps=p("code"),je=l("return"),Me=l("한 후 해당 함수가 끝나기 직전 실행된다."),vt=i(),En=p("pre"),Et=i(),Sn=p("p"),He=l("위 코드의 실행 결과는 다음과 같다."),yt=i(),yn=p("pre"),_t=i(),f=p("p"),Le=l("먼저 "),Cs=p("code"),Ge=l("defer"),Fe=l("에 의해 "),Ns=p("code"),Ve=l("2"),Ie=l("를 출력하도록 예약된다. 이후 "),Os=p("code"),$e=l("j"),ze=l("가 "),Bs=p("code"),qe=l("3"),Je=l("이 되어 출력이 되고, "),xs=p("code"),Ze=l("main"),Ke=l("함수가 끝나기 직전에 2가 출력되는 것이다."),Ue=p("br"),We=i(),Ds=p("code"),Qe=l("j"),Xe=l("값이 "),As=p("code"),Ye=l("3"),he=l("으로 변했다고 "),Ts=p("code"),ge=l("defer"),no=l("에 의해 실행되는 "),Ss=p("em"),so=l("Closure"),ao=l("의 출력 결과가 3으로 바뀌지 않는다."),wt=i(),Rt=p("br"),Pt=i(),_n=p("pre"),Ct=i(),y=p("p"),to=l("위 예제는 "),js=p("code"),po=l("defer"),eo=l("가 DB write에 사용된 예제이다. db write 과정에서 에러가 발생하지 않았다면 "),Ms=p("em"),oo=l("commit"),lo=l(", 에러가 발생하였다면 "),Hs=p("em"),co=l("rollback"),uo=l("한다."),Nt=i(),Ot=p("br"),Bt=p("br"),xt=i(),tn=p("h2"),pn=p("a"),Ls=p("span"),io=l("References"),Dt=i(),At=p("hr"),Tt=i(),R=p("center"),Gs=p("p"),ro=l("["),ko=i(),mc(wn.$$.fragment),fo=l(`
](https://learning.oreilly.com/library/view/learning-go/9781492077206/)`),mo=p("br"),bo=l(`
[Jon Bodner, 『Learning Go』, O'Reilly Media, Inc.](https://learning.oreilly.com/library/view/learning-go/9781492077206/)`),St=i(),jt=p("br"),Mt=p("br"),this.h()},l(n){Cn=e(n,"BR",{}),Is=r(n),Nn=e(n,"P",{});var t=u(Nn);zt=c(t,"본 글은 Golang을 공부하며 주요 내용이라 생각되는 것들을 기록해둔 자료이며, Ubuntu 20.04 LTS 기준으로 작성되었습니다."),t.forEach(s),$s=r(n),zs=e(n,"BR",{}),qs=e(n,"BR",{}),Js=r(n),T=e(n,"H2",{id:!0});var vo=u(T);S=e(vo,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var xo=u(S);Ln=e(xo,"SPAN",{class:!0}),u(Ln).forEach(s),xo.forEach(s),qt=c(vo,"Functions"),vo.forEach(s),Zs=r(n),Ks=e(n,"HR",{}),Us=r(n),Ws=e(n,"BR",{}),Qs=r(n),j=e(n,"H3",{id:!0});var Eo=u(j);M=e(Eo,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Do=u(M);Gn=e(Do,"SPAN",{class:!0}),u(Gn).forEach(s),Do.forEach(s),Jt=c(Eo,"Declaration and Invocation"),Eo.forEach(s),Xs=r(n),On=e(n,"P",{});var Ao=u(On);Zt=c(Ao,`함수에는 파라미터들과 그 타입, 반환형의 타입을 명시한다. 파라미터의 타입은 변수 선언처럼 타입이 뒤에 온다.
파라미터와 함수 body 사이에 반환형이 위치한다.`),Ao.forEach(s),Ys=r(n),on=e(n,"PRE",{class:!0});var hl=u(on);hl.forEach(s),hs=r(n),H=e(n,"P",{});var Lt=u(H);Kt=c(Lt,"파라미터들의 타입이 중복되면 생략할 수 있다. 위 함수의 선언 부분을 "),Fn=e(Lt,"CODE",{});var To=u(Fn);Ut=c(To,"func div(numerator denominator int) int {"),To.forEach(s),Wt=c(Lt,"로 대체하여도 동일하게 동작한다."),Lt.forEach(s),gs=r(n),na=e(n,"BR",{}),sa=e(n,"BR",{}),aa=r(n),L=e(n,"H3",{id:!0});var yo=u(L);G=e(yo,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var So=u(G);Vn=e(So,"SPAN",{class:!0}),u(Vn).forEach(s),So.forEach(s),Qt=c(yo,"Emulating Named Parameters using Struct"),yo.forEach(s),ta=r(n),Bn=e(n,"P",{});var jo=u(Bn);Xt=c(jo,`Go는 named parameter나, parameter의 default value를 지원하지 않는다(Optional parameter가 없다).
다시 말해, 함수가 있으면 그 함수의 모든 파라미터를 넘겨줘야 한다.`),jo.forEach(s),pa=r(n),x=e(n,"P",{});var Fs=u(x);Yt=c(Fs,"named parameter는 함수의 파라미터가 많을 때 유용하기 때문에, "),In=e(Fs,"CODE",{});var Mo=u(In);ht=c(Mo,"struct"),Mo.forEach(s),gt=c(Fs,`로 이를 대체할 수는 있다.
다만 애초에 함수의 파라미터가 많은 게 그리 이상적인 상황은 아니긴 하다.
아래의 코드는 `),$n=e(Fs,"CODE",{});var Ho=u($n);np=c(Ho,"struct"),Ho.forEach(s),Fs.forEach(s),ea=r(n),ln=e(n,"PRE",{class:!0});var gl=u(ln);gl.forEach(s),oa=r(n),la=e(n,"BR",{}),ca=e(n,"BR",{}),ua=r(n),F=e(n,"H3",{id:!0});var _o=u(F);V=e(_o,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Lo=u(V);zn=e(Lo,"SPAN",{class:!0}),u(zn).forEach(s),Lo.forEach(s),sp=c(_o,"Variadic Parameter"),_o.forEach(s),ia=r(n),I=e(n,"P",{});var Gt=u(I);ap=c(Gt,"파라미터의 타입 앞에 "),qn=e(Gt,"CODE",{});var Go=u(qn);tp=c(Go,"..."),Go.forEach(s),pp=c(Gt,"를 붙여 variadic parameter로 만들 수 있다. Python의 *args랑 비슷하다."),Gt.forEach(s),ra=r(n),cn=e(n,"PRE",{class:!0});var nc=u(cn);nc.forEach(s),ka=r(n),$=e(n,"P",{});var Ft=u($);ep=c(Ft,"Slice의 뒤에 "),Jn=e(Ft,"CODE",{});var Fo=u(Jn);op=c(Fo,"..."),Fo.forEach(s),lp=c(Ft,"를 붙여, variadic parameter와 대응시킬 수도 있다."),Ft.forEach(s),fa=r(n),da=e(n,"BR",{}),ma=e(n,"BR",{}),ba=r(n),z=e(n,"H3",{id:!0});var wo=u(z);q=e(wo,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Vo=u(q);Zn=e(Vo,"SPAN",{class:!0}),u(Zn).forEach(s),Vo.forEach(s),cp=c(wo,"Multiple Return Values"),wo.forEach(s),va=r(n),P=e(n,"P",{});var jn=u(P);up=c(jn,`Go의 특이한 점은 함수가 반환할 수 있는 값이 여러 개 존재한다는 것이다.
`),Kn=e(jn,"CODE",{});var Io=u(Kn);ip=c(Io,"Tuple"),Io.forEach(s),rp=c(jn,"형으로 값을 반환하는 Python과 그나마 유사한데, 사실 이것도 "),Un=e(jn,"CODE",{});var $o=u(Un);kp=c($o,"Tuple"),$o.forEach(s),fp=c(jn,"로 묶어서 보내는 거라 엄연히 다르다."),jn.forEach(s),Ea=r(n),J=e(n,"P",{});var Vt=u(J);dp=c(Vt,`반환 값을 여러개 설정하려면 반환형을 써야 할 위치에 반환형들을 순서대로 나열한 뒤 소괄호로 묶으면 된다.
`),Wn=e(Vt,"CODE",{});var zo=u(Wn);mp=c(zo,"return"),zo.forEach(s),bp=c(Vt,"할 때 괄호로 묶어줄 필요는 없다."),Vt.forEach(s),ya=r(n),un=e(n,"PRE",{class:!0});var sc=u(un);sc.forEach(s),_a=r(n),b=e(n,"P",{});var O=u(b);vp=c(O,"함수에서 반환된 값들을 변수에 저장할 때는 "),Qn=e(O,"CODE",{});var qo=u(Qn);Ep=c(qo,"range"),qo.forEach(s),yp=c(O,"를 쓸 때와 유사하게, 컴마("),Xn=e(O,"CODE",{});var Jo=u(Xn);_p=c(Jo,","),Jo.forEach(s),wp=c(O,")로 구분하여 순서대로 변수을 나열하면 된다."),Rp=e(O,"BR",{}),Pp=c(O,`
언더바(`),Yn=e(O,"CODE",{});var Zo=u(Yn);Cp=c(Zo,"_"),Zo.forEach(s),Np=c(O,")를 사용하면 저장할 필요 없는 변수는 생략할 수 있다. 이 역시도 앞서 봤던 패턴이다."),O.forEach(s),wa=r(n),Ra=e(n,"BR",{}),Pa=e(n,"BR",{}),Ca=r(n),Z=e(n,"H3",{id:!0});var Ro=u(Z);K=e(Ro,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Ko=u(K);hn=e(Ko,"SPAN",{class:!0}),u(hn).forEach(s),Ko.forEach(s),Op=c(Ro,"Named Return Values"),Ro.forEach(s),Na=r(n),U=e(n,"P",{});var It=u(U);Bp=c(It,"반환할 값들을 변수로 지정할 수 있는데, 이를 "),gn=e(It,"STRONG",{});var Uo=u(gn);xp=c(Uo,"Named return value"),Uo.forEach(s),Dp=c(It,`라 한다.
Named return value들은 기본적으로 Zero value로 초기화된다.
또한 Named return value를 사용할 경우 반환할 값이 하나여도 소괄호로 둘러싸줘야 한다.`),It.forEach(s),Oa=r(n),m=e(n,"P",{});var _=u(m);Ap=c(_,"단, Named Return Value를 사용하면 두 가지 잠재적 문제점이 생길 수 있다."),Tp=e(_,"BR",{}),Sp=c(_,`
하나는 Named return value을 shadowing할 수도 있다는 문제이다.`),jp=e(_,"BR",{}),Mp=c(_,`
또 하나는 `),ns=e(_,"CODE",{});var Wo=u(ns);Hp=c(Wo,"return result, remainder, err"),Wo.forEach(s),Lp=c(_," 대신에 "),ss=e(_,"CODE",{});var Qo=u(ss);Gp=c(Qo,'return 0, 0, errors.New("cannot divide by zero")'),Qo.forEach(s),Fp=c(_,` 이런 식으로
Named return value를 사용하지 않고 `),as=e(_,"CODE",{});var Xo=u(as);Vp=c(Xo,"return"),Xo.forEach(s),Ip=c(_,`하여도 문제가 없다.
이 때문에 코드가 일관적으로 작성되지 않을 수도 있다는 점이다.`),_.forEach(s),Ba=r(n),rn=e(n,"PRE",{class:!0});var ac=u(rn);ac.forEach(s),xa=r(n),v=e(n,"P",{});var B=u(v);$p=c(B,"Named Return Value를 사용하면 "),ts=e(B,"STRONG",{});var Yo=u(ts);zp=c(Yo,"Blank return"),Yo.forEach(s),qp=c(B,`이란 것이 가능한데,
`),ps=e(B,"CODE",{});var ho=u(ps);Jp=c(ho,"return result, remainder, err"),ho.forEach(s),Zp=c(B," 대신 "),es=e(B,"CODE",{});var go=u(es);Kp=c(go,"return"),go.forEach(s),Up=c(B,"만 적어도 "),os=e(B,"CODE",{});var nl=u(os);Wp=c(nl,"result, remainder, err"),nl.forEach(s),Qp=c(B,`가 반환된다.
Named return value가 명시된 순서대로 반환하는 것이다.`),B.forEach(s),Da=r(n),Aa=e(n,"BR",{}),Ta=e(n,"BR",{}),Sa=r(n),W=e(n,"H3",{id:!0});var Po=u(W);Q=e(Po,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var sl=u(Q);ls=e(sl,"SPAN",{class:!0}),u(ls).forEach(s),sl.forEach(s),Xp=c(Po,"Functions Are Value"),Po.forEach(s),ja=r(n),xn=e(n,"P",{});var al=u(xn);Yp=c(al,"다른 많은 언어에서 그러하듯, Go에서 함수는 값으로 여겨진다. 다시 말해 변수에 집어넣거나 할 수 있다."),al.forEach(s),Ma=r(n),kn=e(n,"PRE",{class:!0});var tc=u(kn);tc.forEach(s),Ha=r(n),C=e(n,"P",{});var Mn=u(C);hp=c(Mn,"예제는 4개의 함수를 "),cs=e(Mn,"CODE",{});var tl=u(cs);gp=c(tl,"map"),tl.forEach(s),ne=c(Mn,"의 값으로 집어넣은 예제이다. 이 때 map의 value 타입은 "),us=e(Mn,"CODE",{});var pl=u(us);se=c(pl,"func(int, int), int"),pl.forEach(s),ae=c(Mn,"가 된다."),Mn.forEach(s),La=r(n),X=e(n,"P",{});var $t=u(X);te=c($t,"아래 예제처럼 "),is=e($t,"CODE",{});var el=u(is);pe=c(el,"type"),el.forEach(s),ee=c($t," 키워드를 사용하여 타입을 간략화할 수도 있다."),$t.forEach(s),Ga=r(n),fn=e(n,"PRE",{class:!0});var pc=u(fn);pc.forEach(s),Fa=r(n),Va=e(n,"BR",{}),Ia=e(n,"BR",{}),$a=r(n),Y=e(n,"H3",{id:!0});var Co=u(Y);h=e(Co,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var ol=u(h);rs=e(ol,"SPAN",{class:!0}),u(rs).forEach(s),ol.forEach(s),oe=c(Co,"Anonymous Function"),Co.forEach(s),za=r(n),Dn=e(n,"P",{});var ll=u(Dn);le=c(ll,"함수를 선언할 때 함수명만 지우면 익명함수가 된다. 익명함수를 즉시 호출하려면 익명함수 뒤에 소괄호를 붙여 파라미터만 보내주면 된다."),ll.forEach(s),qa=r(n),dn=e(n,"PRE",{class:!0});var ec=u(dn);ec.forEach(s),Ja=r(n),Za=e(n,"BR",{}),Ka=e(n,"BR",{}),Ua=r(n),g=e(n,"H2",{id:!0});var No=u(g);nn=e(No,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var cl=u(nn);ks=e(cl,"SPAN",{class:!0}),u(ks).forEach(s),cl.forEach(s),ce=c(No,"Closure"),No.forEach(s),Wa=r(n),Qa=e(n,"HR",{}),Xa=r(n),D=e(n,"P",{});var Vs=u(D);fs=e(Vs,"STRONG",{});var ul=u(fs);ue=c(ul,"Closure"),ul.forEach(s),ie=c(Vs,"란 특정한 함수 안에서 선언된 함수를 의미한다. 대체로 파라미터로 넘겨지거나, "),ds=e(Vs,"CODE",{});var il=u(ds);re=c(il,"return"),il.forEach(s),ke=c(Vs,"을 통해 반환된다."),Vs.forEach(s),Ya=r(n),ha=e(n,"BR",{}),ga=r(n),E=e(n,"P",{});var A=u(E);ms=e(A,"CODE",{});var rl=u(ms);fe=c(rl,"sort.Slice()"),rl.forEach(s),de=c(A,"함수는 파라미터로 정렬할 데이터와 원소들의 대소를 비교하여 "),bs=e(A,"CODE",{});var kl=u(bs);me=c(kl,"bool"),kl.forEach(s),be=c(A,`값을 반환하는 함수를 인자로 받는다.
이 함수의 `),vs=e(A,"CODE",{});var fl=u(vs);ve=c(fl,"true"),fl.forEach(s),Ee=c(A," 및 "),Es=e(A,"CODE",{});var dl=u(Es);ye=c(dl,"false"),dl.forEach(s),_e=c(A," 여부에 따라 Slice가 정렬된다."),A.forEach(s),nt=r(n),mn=e(n,"PRE",{class:!0});var oc=u(mn);oc.forEach(s),st=r(n),An=e(n,"P",{});var ml=u(An);we=c(ml,"ㅇㅇ"),ml.forEach(s),at=r(n),tt=e(n,"BR",{}),pt=r(n),bn=e(n,"PRE",{class:!0});var lc=u(bn);lc.forEach(s),et=r(n),Tn=e(n,"P",{});var bl=u(Tn);Re=c(bl,"위 예제는 함수의 반환형이 Closure인 예제이다. 익명 함수로 반환되었다."),bl.forEach(s),ot=r(n),lt=e(n,"BR",{}),ct=e(n,"BR",{}),ut=r(n),sn=e(n,"H2",{id:!0});var Oo=u(sn);an=e(Oo,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var vl=u(an);ys=e(vl,"SPAN",{class:!0}),u(ys).forEach(s),vl.forEach(s),Pe=c(Oo,"defer"),Oo.forEach(s),it=r(n),rt=e(n,"HR",{}),kt=r(n),N=e(n,"P",{});var Hn=u(N);Ce=c(Hn,"Go에는 "),_s=e(Hn,"STRONG",{});var El=u(_s);Ne=c(El,"defer"),El.forEach(s),Oe=c(Hn,"라는 키워드가 존재한다. 다른 언어에는 없는데 Go에만 있는 것 같다."),Be=e(Hn,"BR",{}),xe=c(Hn,`
일반적으로 파일이나 네트워크 연결 등, 임시적으로 쓰이는 자원들을 다시 반납하기 위해 사용되는 것 같다.`),Hn.forEach(s),ft=r(n),vn=e(n,"PRE",{class:!0});var cc=u(vn);cc.forEach(s),dt=r(n),mt=e(n,"BR",{}),bt=r(n),w=e(n,"P",{});var Rn=u(w);ws=e(Rn,"CODE",{});var yl=u(ws);De=c(yl,"defer"),yl.forEach(s),Ae=c(Rn," 키워드가 쓰인 "),Rs=e(Rn,"EM",{});var _l=u(Rs);Te=c(_l,"Closure"),_l.forEach(s),Se=c(Rn,"는 값을 "),Ps=e(Rn,"CODE",{});var wl=u(Ps);je=c(wl,"return"),wl.forEach(s),Me=c(Rn,"한 후 해당 함수가 끝나기 직전 실행된다."),Rn.forEach(s),vt=r(n),En=e(n,"PRE",{class:!0});var uc=u(En);uc.forEach(s),Et=r(n),Sn=e(n,"P",{});var Rl=u(Sn);He=c(Rl,"위 코드의 실행 결과는 다음과 같다."),Rl.forEach(s),yt=r(n),yn=e(n,"PRE",{class:!0});var ic=u(yn);ic.forEach(s),_t=r(n),f=e(n,"P",{});var d=u(f);Le=c(d,"먼저 "),Cs=e(d,"CODE",{});var Pl=u(Cs);Ge=c(Pl,"defer"),Pl.forEach(s),Fe=c(d,"에 의해 "),Ns=e(d,"CODE",{});var Cl=u(Ns);Ve=c(Cl,"2"),Cl.forEach(s),Ie=c(d,"를 출력하도록 예약된다. 이후 "),Os=e(d,"CODE",{});var Nl=u(Os);$e=c(Nl,"j"),Nl.forEach(s),ze=c(d,"가 "),Bs=e(d,"CODE",{});var Ol=u(Bs);qe=c(Ol,"3"),Ol.forEach(s),Je=c(d,"이 되어 출력이 되고, "),xs=e(d,"CODE",{});var Bl=u(xs);Ze=c(Bl,"main"),Bl.forEach(s),Ke=c(d,"함수가 끝나기 직전에 2가 출력되는 것이다."),Ue=e(d,"BR",{}),We=r(d),Ds=e(d,"CODE",{});var xl=u(Ds);Qe=c(xl,"j"),xl.forEach(s),Xe=c(d,"값이 "),As=e(d,"CODE",{});var Dl=u(As);Ye=c(Dl,"3"),Dl.forEach(s),he=c(d,"으로 변했다고 "),Ts=e(d,"CODE",{});var Al=u(Ts);ge=c(Al,"defer"),Al.forEach(s),no=c(d,"에 의해 실행되는 "),Ss=e(d,"EM",{});var Tl=u(Ss);so=c(Tl,"Closure"),Tl.forEach(s),ao=c(d,"의 출력 결과가 3으로 바뀌지 않는다."),d.forEach(s),wt=r(n),Rt=e(n,"BR",{}),Pt=r(n),_n=e(n,"PRE",{class:!0});var rc=u(_n);rc.forEach(s),Ct=r(n),y=e(n,"P",{});var en=u(y);to=c(en,"위 예제는 "),js=e(en,"CODE",{});var Sl=u(js);po=c(Sl,"defer"),Sl.forEach(s),eo=c(en,"가 DB write에 사용된 예제이다. db write 과정에서 에러가 발생하지 않았다면 "),Ms=e(en,"EM",{});var jl=u(Ms);oo=c(jl,"commit"),jl.forEach(s),lo=c(en,", 에러가 발생하였다면 "),Hs=e(en,"EM",{});var Ml=u(Hs);co=c(Ml,"rollback"),Ml.forEach(s),uo=c(en,"한다."),en.forEach(s),Nt=r(n),Ot=e(n,"BR",{}),Bt=e(n,"BR",{}),xt=r(n),tn=e(n,"H2",{id:!0});var Bo=u(tn);pn=e(Bo,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Hl=u(pn);Ls=e(Hl,"SPAN",{class:!0}),u(Ls).forEach(s),Hl.forEach(s),io=c(Bo,"References"),Bo.forEach(s),Dt=r(n),At=e(n,"HR",{}),Tt=r(n),R=e(n,"CENTER",{});var Pn=u(R);Gs=e(Pn,"P",{});var Ll=u(Gs);ro=c(Ll,"["),Ll.forEach(s),ko=r(Pn),bc(wn.$$.fragment,Pn),fo=c(Pn,`
](https://learning.oreilly.com/library/view/learning-go/9781492077206/)`),mo=e(Pn,"BR",{}),bo=c(Pn,`
[Jon Bodner, 『Learning Go』, O'Reilly Media, Inc.](https://learning.oreilly.com/library/view/learning-go/9781492077206/)`),Pn.forEach(s),St=r(n),jt=e(n,"BR",{}),Mt=e(n,"BR",{}),this.h()},h(){k(Ln,"class","icon icon-link"),k(S,"aria-hidden","true"),k(S,"tabindex","-1"),k(S,"href","#functions"),k(T,"id","functions"),k(Gn,"class","icon icon-link"),k(M,"aria-hidden","true"),k(M,"tabindex","-1"),k(M,"href","#declaration-and-invocation"),k(j,"id","declaration-and-invocation"),k(on,"class","language-go"),k(Vn,"class","icon icon-link"),k(G,"aria-hidden","true"),k(G,"tabindex","-1"),k(G,"href","#emulating-named-parameters-using-struct"),k(L,"id","emulating-named-parameters-using-struct"),k(ln,"class","language-go"),k(zn,"class","icon icon-link"),k(V,"aria-hidden","true"),k(V,"tabindex","-1"),k(V,"href","#variadic-parameter"),k(F,"id","variadic-parameter"),k(cn,"class","language-go"),k(Zn,"class","icon icon-link"),k(q,"aria-hidden","true"),k(q,"tabindex","-1"),k(q,"href","#multiple-return-values"),k(z,"id","multiple-return-values"),k(un,"class","language-go"),k(hn,"class","icon icon-link"),k(K,"aria-hidden","true"),k(K,"tabindex","-1"),k(K,"href","#named-return-values"),k(Z,"id","named-return-values"),k(rn,"class","language-go"),k(ls,"class","icon icon-link"),k(Q,"aria-hidden","true"),k(Q,"tabindex","-1"),k(Q,"href","#functions-are-value"),k(W,"id","functions-are-value"),k(kn,"class","language-go"),k(fn,"class","language-go"),k(rs,"class","icon icon-link"),k(h,"aria-hidden","true"),k(h,"tabindex","-1"),k(h,"href","#anonymous-function"),k(Y,"id","anonymous-function"),k(dn,"class","language-go"),k(ks,"class","icon icon-link"),k(nn,"aria-hidden","true"),k(nn,"tabindex","-1"),k(nn,"href","#closure"),k(g,"id","closure"),k(mn,"class","language-go"),k(bn,"class","language-go"),k(ys,"class","icon icon-link"),k(an,"aria-hidden","true"),k(an,"tabindex","-1"),k(an,"href","#defer"),k(sn,"id","defer"),k(vn,"class","language-go"),k(En,"class","language-go"),k(yn,"class","language-go"),k(_n,"class","language-go"),k(Ls,"class","icon icon-link"),k(pn,"aria-hidden","true"),k(pn,"tabindex","-1"),k(pn,"href","#references"),k(tn,"id","references")},m(n,t){o(n,Cn,t),o(n,Is,t),o(n,Nn,t),a(Nn,zt),o(n,$s,t),o(n,zs,t),o(n,qs,t),o(n,Js,t),o(n,T,t),a(T,S),a(S,Ln),a(T,qt),o(n,Zs,t),o(n,Ks,t),o(n,Us,t),o(n,Ws,t),o(n,Qs,t),o(n,j,t),a(j,M),a(M,Gn),a(j,Jt),o(n,Xs,t),o(n,On,t),a(On,Zt),o(n,Ys,t),o(n,on,t),on.innerHTML=Fl,o(n,hs,t),o(n,H,t),a(H,Kt),a(H,Fn),a(Fn,Ut),a(H,Wt),o(n,gs,t),o(n,na,t),o(n,sa,t),o(n,aa,t),o(n,L,t),a(L,G),a(G,Vn),a(L,Qt),o(n,ta,t),o(n,Bn,t),a(Bn,Xt),o(n,pa,t),o(n,x,t),a(x,Yt),a(x,In),a(In,ht),a(x,gt),a(x,$n),a($n,np),o(n,ea,t),o(n,ln,t),ln.innerHTML=Vl,o(n,oa,t),o(n,la,t),o(n,ca,t),o(n,ua,t),o(n,F,t),a(F,V),a(V,zn),a(F,sp),o(n,ia,t),o(n,I,t),a(I,ap),a(I,qn),a(qn,tp),a(I,pp),o(n,ra,t),o(n,cn,t),cn.innerHTML=Il,o(n,ka,t),o(n,$,t),a($,ep),a($,Jn),a(Jn,op),a($,lp),o(n,fa,t),o(n,da,t),o(n,ma,t),o(n,ba,t),o(n,z,t),a(z,q),a(q,Zn),a(z,cp),o(n,va,t),o(n,P,t),a(P,up),a(P,Kn),a(Kn,ip),a(P,rp),a(P,Un),a(Un,kp),a(P,fp),o(n,Ea,t),o(n,J,t),a(J,dp),a(J,Wn),a(Wn,mp),a(J,bp),o(n,ya,t),o(n,un,t),un.innerHTML=$l,o(n,_a,t),o(n,b,t),a(b,vp),a(b,Qn),a(Qn,Ep),a(b,yp),a(b,Xn),a(Xn,_p),a(b,wp),a(b,Rp),a(b,Pp),a(b,Yn),a(Yn,Cp),a(b,Np),o(n,wa,t),o(n,Ra,t),o(n,Pa,t),o(n,Ca,t),o(n,Z,t),a(Z,K),a(K,hn),a(Z,Op),o(n,Na,t),o(n,U,t),a(U,Bp),a(U,gn),a(gn,xp),a(U,Dp),o(n,Oa,t),o(n,m,t),a(m,Ap),a(m,Tp),a(m,Sp),a(m,jp),a(m,Mp),a(m,ns),a(ns,Hp),a(m,Lp),a(m,ss),a(ss,Gp),a(m,Fp),a(m,as),a(as,Vp),a(m,Ip),o(n,Ba,t),o(n,rn,t),rn.innerHTML=zl,o(n,xa,t),o(n,v,t),a(v,$p),a(v,ts),a(ts,zp),a(v,qp),a(v,ps),a(ps,Jp),a(v,Zp),a(v,es),a(es,Kp),a(v,Up),a(v,os),a(os,Wp),a(v,Qp),o(n,Da,t),o(n,Aa,t),o(n,Ta,t),o(n,Sa,t),o(n,W,t),a(W,Q),a(Q,ls),a(W,Xp),o(n,ja,t),o(n,xn,t),a(xn,Yp),o(n,Ma,t),o(n,kn,t),kn.innerHTML=ql,o(n,Ha,t),o(n,C,t),a(C,hp),a(C,cs),a(cs,gp),a(C,ne),a(C,us),a(us,se),a(C,ae),o(n,La,t),o(n,X,t),a(X,te),a(X,is),a(is,pe),a(X,ee),o(n,Ga,t),o(n,fn,t),fn.innerHTML=Jl,o(n,Fa,t),o(n,Va,t),o(n,Ia,t),o(n,$a,t),o(n,Y,t),a(Y,h),a(h,rs),a(Y,oe),o(n,za,t),o(n,Dn,t),a(Dn,le),o(n,qa,t),o(n,dn,t),dn.innerHTML=Zl,o(n,Ja,t),o(n,Za,t),o(n,Ka,t),o(n,Ua,t),o(n,g,t),a(g,nn),a(nn,ks),a(g,ce),o(n,Wa,t),o(n,Qa,t),o(n,Xa,t),o(n,D,t),a(D,fs),a(fs,ue),a(D,ie),a(D,ds),a(ds,re),a(D,ke),o(n,Ya,t),o(n,ha,t),o(n,ga,t),o(n,E,t),a(E,ms),a(ms,fe),a(E,de),a(E,bs),a(bs,me),a(E,be),a(E,vs),a(vs,ve),a(E,Ee),a(E,Es),a(Es,ye),a(E,_e),o(n,nt,t),o(n,mn,t),mn.innerHTML=Kl,o(n,st,t),o(n,An,t),a(An,we),o(n,at,t),o(n,tt,t),o(n,pt,t),o(n,bn,t),bn.innerHTML=Ul,o(n,et,t),o(n,Tn,t),a(Tn,Re),o(n,ot,t),o(n,lt,t),o(n,ct,t),o(n,ut,t),o(n,sn,t),a(sn,an),a(an,ys),a(sn,Pe),o(n,it,t),o(n,rt,t),o(n,kt,t),o(n,N,t),a(N,Ce),a(N,_s),a(_s,Ne),a(N,Oe),a(N,Be),a(N,xe),o(n,ft,t),o(n,vn,t),vn.innerHTML=Wl,o(n,dt,t),o(n,mt,t),o(n,bt,t),o(n,w,t),a(w,ws),a(ws,De),a(w,Ae),a(w,Rs),a(Rs,Te),a(w,Se),a(w,Ps),a(Ps,je),a(w,Me),o(n,vt,t),o(n,En,t),En.innerHTML=Ql,o(n,Et,t),o(n,Sn,t),a(Sn,He),o(n,yt,t),o(n,yn,t),yn.innerHTML=Xl,o(n,_t,t),o(n,f,t),a(f,Le),a(f,Cs),a(Cs,Ge),a(f,Fe),a(f,Ns),a(Ns,Ve),a(f,Ie),a(f,Os),a(Os,$e),a(f,ze),a(f,Bs),a(Bs,qe),a(f,Je),a(f,xs),a(xs,Ze),a(f,Ke),a(f,Ue),a(f,We),a(f,Ds),a(Ds,Qe),a(f,Xe),a(f,As),a(As,Ye),a(f,he),a(f,Ts),a(Ts,ge),a(f,no),a(f,Ss),a(Ss,so),a(f,ao),o(n,wt,t),o(n,Rt,t),o(n,Pt,t),o(n,_n,t),_n.innerHTML=Yl,o(n,Ct,t),o(n,y,t),a(y,to),a(y,js),a(js,po),a(y,eo),a(y,Ms),a(Ms,oo),a(y,lo),a(y,Hs),a(Hs,co),a(y,uo),o(n,Nt,t),o(n,Ot,t),o(n,Bt,t),o(n,xt,t),o(n,tn,t),a(tn,pn),a(pn,Ls),a(tn,io),o(n,Dt,t),o(n,At,t),o(n,Tt,t),o(n,R,t),a(R,Gs),a(Gs,ro),a(R,ko),vc(wn,R,null),a(R,fo),a(R,mo),a(R,bo),o(n,St,t),o(n,jt,t),o(n,Mt,t),Ht=!0},p:Ec,i(n){Ht||(yc(wn.$$.fragment,n),Ht=!0)},o(n){_c(wn.$$.fragment,n),Ht=!1},d(n){n&&s(Cn),n&&s(Is),n&&s(Nn),n&&s($s),n&&s(zs),n&&s(qs),n&&s(Js),n&&s(T),n&&s(Zs),n&&s(Ks),n&&s(Us),n&&s(Ws),n&&s(Qs),n&&s(j),n&&s(Xs),n&&s(On),n&&s(Ys),n&&s(on),n&&s(hs),n&&s(H),n&&s(gs),n&&s(na),n&&s(sa),n&&s(aa),n&&s(L),n&&s(ta),n&&s(Bn),n&&s(pa),n&&s(x),n&&s(ea),n&&s(ln),n&&s(oa),n&&s(la),n&&s(ca),n&&s(ua),n&&s(F),n&&s(ia),n&&s(I),n&&s(ra),n&&s(cn),n&&s(ka),n&&s($),n&&s(fa),n&&s(da),n&&s(ma),n&&s(ba),n&&s(z),n&&s(va),n&&s(P),n&&s(Ea),n&&s(J),n&&s(ya),n&&s(un),n&&s(_a),n&&s(b),n&&s(wa),n&&s(Ra),n&&s(Pa),n&&s(Ca),n&&s(Z),n&&s(Na),n&&s(U),n&&s(Oa),n&&s(m),n&&s(Ba),n&&s(rn),n&&s(xa),n&&s(v),n&&s(Da),n&&s(Aa),n&&s(Ta),n&&s(Sa),n&&s(W),n&&s(ja),n&&s(xn),n&&s(Ma),n&&s(kn),n&&s(Ha),n&&s(C),n&&s(La),n&&s(X),n&&s(Ga),n&&s(fn),n&&s(Fa),n&&s(Va),n&&s(Ia),n&&s($a),n&&s(Y),n&&s(za),n&&s(Dn),n&&s(qa),n&&s(dn),n&&s(Ja),n&&s(Za),n&&s(Ka),n&&s(Ua),n&&s(g),n&&s(Wa),n&&s(Qa),n&&s(Xa),n&&s(D),n&&s(Ya),n&&s(ha),n&&s(ga),n&&s(E),n&&s(nt),n&&s(mn),n&&s(st),n&&s(An),n&&s(at),n&&s(tt),n&&s(pt),n&&s(bn),n&&s(et),n&&s(Tn),n&&s(ot),n&&s(lt),n&&s(ct),n&&s(ut),n&&s(sn),n&&s(it),n&&s(rt),n&&s(kt),n&&s(N),n&&s(ft),n&&s(vn),n&&s(dt),n&&s(mt),n&&s(bt),n&&s(w),n&&s(vt),n&&s(En),n&&s(Et),n&&s(Sn),n&&s(yt),n&&s(yn),n&&s(_t),n&&s(f),n&&s(wt),n&&s(Rt),n&&s(Pt),n&&s(_n),n&&s(Ct),n&&s(y),n&&s(Nt),n&&s(Ot),n&&s(Bt),n&&s(xt),n&&s(tn),n&&s(Dt),n&&s(At),n&&s(Tt),n&&s(R),wc(wn),n&&s(St),n&&s(jt),n&&s(Mt)}}}const Oc={title:"함수",date:"2022-07-31T00:00:00.000Z",excerpt:"Functions",categories:["Golang","Basic Golang"],coverImage:"/post_img/Go/Golang_basics/cover.png",coverWidth:16,coverHeight:9,indexed:!1,exposed:!0};class Bc extends kc{constructor(Cn){super(),fc(this,Cn,null,Pc,dc,{})}}export{Bc as default,Oc as metadata};
