import{S as Ey,i as vy,s as by,k as e,a as i,q as t,l as o,c as r,m as c,r as p,h as s,n as k,U as m8,b as u,E as a,M as Y4}from"./index.d78780bf.js";function _y(w8){let st,jl,at,t1,ql,Wl,Kl,Ql,Ln,Gn,Ep,p1,$l,zl,Jl,tt,e1,Vl,Xl,Yl,pt,o1,Zl,hl,nu,su,An,Nn,vp,c1,au,tu,pu,q,l1,bp,u1,i1,_p,r1,k1,mp,f1,d1,eu,et,E1,ou,Us,P8=`<code class="language-go"><span class="token keyword">package</span> adder

<span class="token keyword">func</span> <span class="token function">addNumbers</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> x <span class="token operator">+</span> x
<span class="token punctuation">&#125;</span></code>`,cu,ot,v1,lu,js,y8=`<code class="language-go"><span class="token keyword">package</span> adder

<span class="token keyword">import</span> <span class="token string">"testing"</span>

<span class="token keyword">func</span> <span class="token function">Test_addNumbers</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	result <span class="token operator">:=</span> <span class="token function">addNumbers</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> result <span class="token operator">!=</span> <span class="token number">5</span> <span class="token punctuation">&#123;</span>
		t<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token string">"incorrect result: expected 5, got"</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,uu,W,b1,wp,_1,m1,Pp,w1,P1,yp,y1,C1,iu,O,D1,Cp,T1,O1,Dp,x1,R1,Tp,M1,S1,Op,L1,G1,xp,A1,N1,ru,cn,B1,Rp,g1,H1,Mp,I1,F1,ku,K,U1,Sp,j1,q1,Lp,W1,K1,Gp,Q1,$1,fu,qs,C8=`<code class="language-text">$ go test
--- FAIL: Test_addNumbers (0.00s)
    adder_test.go:8: incorrect result: expected 5, got 4
FAIL
exit status 1
FAIL    github.com/jhseoeo/learning-go/13/adder     0.001s</code>`,du,Q,z1,Ap,J1,V1,Np,X1,Y1,Bp,Z1,h1,Eu,Ws,D8=`<code class="language-go">$ <span class="token keyword">go</span> test
PASS
ok      github<span class="token punctuation">.</span>com<span class="token operator">/</span>jhseoeo<span class="token operator">/</span>learning<span class="token operator">-</span><span class="token keyword">go</span><span class="token operator">/</span><span class="token number">13</span><span class="token operator">/</span>adder     <span class="token number">0</span><span class="token punctuation">.</span>001s</code>`,vu,h,gp,n2,s2,Hp,a2,t2,Ip,p2,e2,bu,_u,mu,wu,Bn,gn,Fp,o2,Pu,L,Up,c2,l2,jp,u2,i2,qp,r2,k2,Wp,f2,d2,Kp,E2,v2,yu,Ks,T8='<code class="language-go">t<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"incorrect result: expected %d, but got %d"</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span></code>',Cu,b,Qp,b2,_2,$p,m2,w2,zp,P2,y2,Jp,C2,D2,Vp,T2,O2,Xp,x2,R2,Yp,M2,S2,Zp,L2,G2,Du,E,A2,hp,N2,B2,ne,g2,H2,se,I2,F2,ae,U2,j2,te,q2,W2,pe,K2,Q2,ee,$2,z2,oe,J2,V2,Tu,Ou,xu,Ru,Hn,In,ce,X2,Mu,Fn,Y2,le,Z2,h2,Su,Qs,O8=`<code class="language-go"><span class="token keyword">package</span> testmain

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">"fmt"</span>
	<span class="token string">"os"</span>
	<span class="token string">"testing"</span>
	<span class="token string">"time"</span>
<span class="token punctuation">)</span>

<span class="token keyword">var</span> testTime time<span class="token punctuation">.</span>Time

<span class="token keyword">func</span> <span class="token function">TestMain</span><span class="token punctuation">(</span>m <span class="token operator">*</span>testing<span class="token punctuation">.</span>M<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Set up stuff for tests here"</span><span class="token punctuation">)</span>
	testTime <span class="token operator">=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	exitval <span class="token operator">:=</span> m<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Clean up stuff after tests here"</span><span class="token punctuation">)</span>
	os<span class="token punctuation">.</span><span class="token function">Exit</span><span class="token punctuation">(</span>exitval<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">TestFirst</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"TestFirst uses stuff set up in TestMain"</span><span class="token punctuation">,</span> testTime<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">TestSecond</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"TestSecond uses stuff set up in TestMain"</span><span class="token punctuation">,</span> testTime<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code>`,Lu,f,ue,nd,sd,ie,ad,td,re,pd,ed,ke,od,cd,fe,ld,ud,de,id,rd,Ee,kd,fd,ve,dd,Ed,be,vd,bd,_e,_d,md,me,wd,Pd,we,yd,Cd,Gu,$s,Pe,Dd,Td,Au,zs,x8=`<code class="language-text">$ go test
Set up stuff for tests here
TestFirst uses stuff set up in TestMain 2023-02-06 00:32:52.707847138 +0900 KST m=+0.000167689
TestSecond uses stuff set up in TestMain 2023-02-06 00:32:52.707847138 +0900 KST m=+0.000167689
PASS
Clean up stuff after tests here
ok      github.com/jhseoeo/learning-go/13/testmain  0.001s</code>`,Nu,nn,ye,Od,xd,Ce,Rd,Md,De,Sd,Ld,Bu,Un,Te,Gd,Ad,Oe,Nd,gu,jn,Bd,xe,gd,Hd,Hu,m,Re,Id,Fd,Me,Ud,jd,Se,qd,Wd,Le,Kd,Qd,Ge,$d,zd,Ae,Jd,Vd,Ne,Xd,Yd,Iu,Js,R8=`<code class="language-go"><span class="token keyword">package</span> cleanup

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">"fmt"</span>
	<span class="token string">"os"</span>
	<span class="token string">"testing"</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">createFile</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	f<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token string">"tempfile"</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">,</span> err
	<span class="token punctuation">&#125;</span>
	t<span class="token punctuation">.</span><span class="token function">Cleanup</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		os<span class="token punctuation">.</span><span class="token function">Remove</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span> f<span class="token punctuation">.</span><span class="token function">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">TestFileProcessing</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	fName<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">createFile</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		t<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>fName<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code>`,Fu,Uu,ju,qu,qn,Wn,Be,Zd,Wu,G,ge,hd,nE,He,sE,aE,Ie,tE,pE,Fe,eE,oE,Ue,cE,lE,Ku,Kn,uE,Vs,iE,rE,Qu,$u,zu,Ju,Qn,$n,je,kE,Vu,ct,fE,Xu,zn,dE,qe,EE,vE,Yu,$,bE,We,_E,mE,Ke,wE,PE,Qe,yE,CE,Zu,Xs,M8=`<code class="language-go"><span class="token keyword">package</span> adder

<span class="token keyword">func</span> <span class="token function">AddNumbers</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">return</span> x <span class="token operator">+</span> x
<span class="token punctuation">&#125;</span></code>`,hu,ln,DE,$e,TE,OE,ze,xE,RE,ni,Ys,S8=`<code class="language-go"><span class="token keyword">package</span> adder_test

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">"testing"</span>

	<span class="token string">"github.com/jhseoeo/learning-go/13-tests/adder"</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">TestAddNumbers</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	result <span class="token operator">:=</span> adder<span class="token punctuation">.</span><span class="token function">AddNumbers</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> result <span class="token operator">!=</span> <span class="token number">5</span> <span class="token punctuation">&#123;</span>
		t<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token string">"incorrect result: expected 5, got"</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,si,x,ME,Je,SE,LE,Ve,GE,AE,Xe,NE,BE,Ye,gE,HE,Ze,IE,FE,ai,un,UE,he,jE,qE,no,WE,KE,ti,pi,ei,oi,Jn,Vn,so,QE,ci,R,$E,ao,zE,JE,to,VE,XE,po,YE,ZE,eo,hE,n3,oo,s3,a3,li,Zs,L8=`<code class="language-go"><span class="token keyword">type</span> Person <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
    Name      <span class="token builtin">string</span>
    Age       <span class="token builtin">int</span>
    DateAdded time<span class="token punctuation">.</span>Time
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">CreatePerson</span><span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">,</span> age <span class="token builtin">int</span><span class="token punctuation">)</span> Person <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> Person<span class="token punctuation">&#123;</span>
        Name<span class="token punctuation">:</span>      name<span class="token punctuation">,</span>
        Age<span class="token punctuation">:</span>       age<span class="token punctuation">,</span>
        DateAdded<span class="token punctuation">:</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,ui,lt,t3,ii,hs,G8=`<code class="language-go"><span class="token keyword">package</span> cmp_test

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">"testing"</span>

	<span class="token string">"github.com/google/go-cmp/cmp"</span>
	testcmp <span class="token string">"github.com/jhseoeo/learning-go/13-tests/cmp"</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">TestCreatePerson</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	expected <span class="token operator">:=</span> testcmp<span class="token punctuation">.</span>Person<span class="token punctuation">&#123;</span>
		Name<span class="token punctuation">:</span> <span class="token string">"Dennis"</span><span class="token punctuation">,</span>
		Age<span class="token punctuation">:</span>  <span class="token number">37</span><span class="token punctuation">,</span>
	<span class="token punctuation">&#125;</span>

	result <span class="token operator">:=</span> testcmp<span class="token punctuation">.</span><span class="token function">CreatePerson</span><span class="token punctuation">(</span><span class="token string">"Dennis"</span><span class="token punctuation">,</span> <span class="token number">37</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> diff <span class="token operator">:=</span> cmp<span class="token punctuation">.</span><span class="token function">Diff</span><span class="token punctuation">(</span>expected<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span> diff <span class="token operator">!=</span> <span class="token string">""</span> <span class="token punctuation">&#123;</span>
		t<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span>diff<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,ri,rn,p3,co,e3,o3,lo,c3,l3,ki,Pn,uo,u3,i3,io,r3,k3,fi,na,A8=`<code class="language-text">$ go test
--- FAIL: TestCreatePerson (0.00s)
    cmp_test.go:18:   cmp.Person&#123;
                Name:      "Dennis",
                Age:       37,
        -       DateAdded: s"0001-01-01 00:00:00 +0000 UTC",
        +       DateAdded: s"2023-02-07 00:47:22.742817119 +0900 KST m=+0.000517803",
          &#125;

FAIL
exit status 1
FAIL    github.com/jhseoeo/learning-go/13-tests/cmp 0.001s</code>`,di,C,ro,f3,d3,ko,E3,v3,fo,b3,_3,Eo,m3,w3,vo,P3,y3,bo,C3,D3,Ei,sa,N8=`<code class="language-go"><span class="token keyword">func</span> <span class="token function">TestCreatePerson_IgnoreDate</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	expected <span class="token operator">:=</span> testcmp<span class="token punctuation">.</span>Person<span class="token punctuation">&#123;</span>
		Name<span class="token punctuation">:</span> <span class="token string">"Dennis"</span><span class="token punctuation">,</span>
		Age<span class="token punctuation">:</span>  <span class="token number">37</span><span class="token punctuation">,</span>
	<span class="token punctuation">&#125;</span>
	result <span class="token operator">:=</span> testcmp<span class="token punctuation">.</span><span class="token function">CreatePerson</span><span class="token punctuation">(</span><span class="token string">"Dennis"</span><span class="token punctuation">,</span> <span class="token number">37</span><span class="token punctuation">)</span>
	comparer <span class="token operator">:=</span> cmp<span class="token punctuation">.</span><span class="token function">Comparer</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y testcmp<span class="token punctuation">.</span>Person<span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> x<span class="token punctuation">.</span>Name <span class="token operator">==</span> y<span class="token punctuation">.</span>Name <span class="token operator">&amp;&amp;</span> x<span class="token punctuation">.</span>Age <span class="token operator">==</span> y<span class="token punctuation">.</span>Age
	<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> diff <span class="token operator">:=</span> cmp<span class="token punctuation">.</span><span class="token function">Diff</span><span class="token punctuation">(</span>expected<span class="token punctuation">,</span> result<span class="token punctuation">,</span> comparer<span class="token punctuation">)</span><span class="token punctuation">;</span> diff <span class="token operator">!=</span> <span class="token string">""</span> <span class="token punctuation">&#123;</span>
		t<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span>diff<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">if</span> result<span class="token punctuation">.</span>DateAdded<span class="token punctuation">.</span><span class="token function">IsZero</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		t<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token string">"DateAdded was not assigned"</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>

<span class="token punctuation">&#125;</span></code>`,vi,I,_o,T3,O3,mo,x3,R3,wo,M3,S3,Po,L3,G3,bi,Xn,A3,yo,N3,B3,_i,yn,Co,g3,H3,aa,I3,F3,mi,wi,Pi,yi,Yn,Zn,Do,U3,Ci,Di,Ti,hn,j3,To,q3,W3,Oi,ns,K3,Oo,Q3,$3,xi,ta,B8=`<code class="language-go"><span class="token keyword">package</span> table

<span class="token keyword">import</span> <span class="token string">"fmt"</span>

<span class="token keyword">func</span> <span class="token function">DoMath</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2 <span class="token builtin">int</span><span class="token punctuation">,</span> op <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">switch</span> op <span class="token punctuation">&#123;</span>
	<span class="token keyword">case</span> <span class="token string">"+"</span><span class="token punctuation">:</span>
		<span class="token keyword">return</span> num1 <span class="token operator">+</span> num2<span class="token punctuation">,</span> <span class="token boolean">nil</span>
	<span class="token keyword">case</span> <span class="token string">"-"</span><span class="token punctuation">:</span>
		<span class="token keyword">return</span> num1 <span class="token operator">-</span> num2<span class="token punctuation">,</span> <span class="token boolean">nil</span>
	<span class="token keyword">case</span> <span class="token string">"*"</span><span class="token punctuation">:</span>
		<span class="token keyword">return</span> num1 <span class="token operator">*</span> num2<span class="token punctuation">,</span> <span class="token boolean">nil</span>
	<span class="token keyword">case</span> <span class="token string">"/"</span><span class="token punctuation">:</span>
		<span class="token keyword">if</span> num2 <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"division by zero"</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#125;</span>
		<span class="token keyword">return</span> num1 <span class="token operator">/</span> num2<span class="token punctuation">,</span> <span class="token boolean">nil</span>
	<span class="token keyword">default</span><span class="token punctuation">:</span>
		<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"unknown operator %v"</span><span class="token punctuation">,</span> op<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,Ri,ut,z3,Mi,pa,g8=`<code class="language-go"><span class="token keyword">func</span> <span class="token function">TestDoMath</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    result<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">DoMath</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"+"</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> result <span class="token operator">!=</span> <span class="token number">4</span> <span class="token punctuation">&#123;</span>
        t<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token string">"Should have been 4, got"</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
        t<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token string">"Should have been nil error, got"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
    result2<span class="token punctuation">,</span> err2 <span class="token operator">:=</span> <span class="token function">DoMath</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"-"</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> result2 <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>
        t<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token string">"Should have been 0, got"</span><span class="token punctuation">,</span> result2<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span> err2 <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
        t<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token string">"Should have been nil error, got"</span><span class="token punctuation">,</span> err2<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">// and so on...</span>
<span class="token punctuation">&#125;</span></code>`,Si,it,J3,Li,ea,H8=`<code class="language-go">data <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
		name     <span class="token builtin">string</span>
		num1     <span class="token builtin">int</span>
		num2     <span class="token builtin">int</span>
		op       <span class="token builtin">string</span>
		expected <span class="token builtin">int</span>
		errMsg   <span class="token builtin">string</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>
		<span class="token punctuation">&#123;</span><span class="token string">"addition"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"+"</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
		<span class="token punctuation">&#123;</span><span class="token string">"subtraction"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"-"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
		<span class="token punctuation">&#123;</span><span class="token string">"multiplication"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"*"</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
		<span class="token punctuation">&#123;</span><span class="token string">"division"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"/"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
		<span class="token punctuation">&#123;</span><span class="token string">"bad_division"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"/"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&#96;division by zero&#96;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
	<span class="token punctuation">&#125;</span></code>`,Gi,v,V3,xo,X3,Y3,Ro,Z3,h3,Mo,nv,sv,So,av,tv,Lo,pv,ev,Go,ov,cv,Ao,lv,uv,No,iv,rv,Ai,oa,I8=`<code class="language-text">$ go test -v
=== RUN   TestDoMath
=== RUN   TestDoMath/addition
=== RUN   TestDoMath/subtraction
=== RUN   TestDoMath/multiplication
=== RUN   TestDoMath/division
=== RUN   TestDoMath/bad_division
--- PASS: TestDoMath (0.00s)
    --- PASS: TestDoMath/addition (0.00s)
    --- PASS: TestDoMath/subtraction (0.00s)
    --- PASS: TestDoMath/multiplication (0.00s)
    --- PASS: TestDoMath/division (0.00s)
    --- PASS: TestDoMath/bad_division (0.00s)
PASS
ok      github.com/jhseoeo/learning-go/13-tests/table       0.001s</code>`,Ni,rt,sn,kv,Bo,fv,dv,go,Ev,vv,Ho,bv,_v,Bi,gi,Hi,Ii,ss,as,Io,mv,Fi,kt,wv,Ui,ca,F8='<code class="language-text">go test -v -cover -coverprofile=c.out</code>',ji,z,Pv,Fo,yv,Cv,Uo,Dv,Tv,jo,Ov,xv,qi,la,U8=`<code class="language-text">$ go test -v -cover -coverprofile=c.out

...
coverage: 87.5% of statements</code>`,Wi,ft,Rv,Ki,ua,j8=`<code class="language-text">mode: set
github.com/jhseoeo/learning-go/13-tests/table/table.go:5.53,6.12 1 1
github.com/jhseoeo/learning-go/13-tests/table/table.go:7.11,8.26 1 1
github.com/jhseoeo/learning-go/13-tests/table/table.go:9.11,10.26 1 1
github.com/jhseoeo/learning-go/13-tests/table/table.go:11.11,12.26 1 1
github.com/jhseoeo/learning-go/13-tests/table/table.go:13.11,14.16 1 1
github.com/jhseoeo/learning-go/13-tests/table/table.go:17.3,17.26 1 1
github.com/jhseoeo/learning-go/13-tests/table/table.go:18.10,19.50 1 0
github.com/jhseoeo/learning-go/13-tests/table/table.go:14.16,16.4 1 1</code>`,Qi,dt,Mv,$i,zi,Ji,ts,Sv,qo,Lv,Gv,Vi,ia,q8='<code class="language-text">go tool cover -html=c.out</code>',Xi,Et,Av,Yi,vt,bt,Z4,Zi,_t,Nv,hi,kn,Bv,Wo,gv,Hv,Ko,Iv,Fv,nr,ra,W8='<code class="language-go"><span class="token punctuation">&#123;</span><span class="token string">"bad_op"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"?"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&#96;unknown operator ?&#96;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span></code>',sr,mt,Uv,ar,ka,K8='<code class="language-text">go test -v -cover -coverprofile=c.out &amp;&amp; go tool cover -html=c.out</code>',tr,ps,jv,Qo,qv,Wv,pr,wt,$o,Kv,er,or,cr,lr,es,os,zo,Qv,ur,Pt,$v,ir,yt,zv,rr,fa,Q8=`<code class="language-go"><span class="token keyword">func</span> <span class="token function">FileLen</span><span class="token punctuation">(</span>f <span class="token builtin">string</span><span class="token punctuation">,</span> bufsize <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	file<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">,</span> err
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">defer</span> file<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	count <span class="token operator">:=</span> <span class="token number">0</span>
	buf <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> bufsize<span class="token punctuation">)</span>
	<span class="token keyword">for</span> <span class="token punctuation">&#123;</span>
		num<span class="token punctuation">,</span> err <span class="token operator">:=</span> file<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span>
		count <span class="token operator">+=</span> num
		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">break</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">return</span> count<span class="token punctuation">,</span> <span class="token boolean">nil</span>
<span class="token punctuation">&#125;</span></code>`,kr,Ct,Jv,fr,Dt,Vv,dr,da,$8=`<code class="language-go"><span class="token keyword">package</span> bench_test

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">"math/rand"</span>
	<span class="token string">"os"</span>
	<span class="token string">"testing"</span>

	<span class="token string">"github.com/jhseoeo/learning-go/13-tests/bench"</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">TestMain</span><span class="token punctuation">(</span>m <span class="token operator">*</span>testing<span class="token punctuation">.</span>M<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token function">makeData</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	exitVal <span class="token operator">:=</span> m<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	os<span class="token punctuation">.</span><span class="token function">Remove</span><span class="token punctuation">(</span><span class="token string">"testdata/data.txt"</span><span class="token punctuation">)</span>
	os<span class="token punctuation">.</span><span class="token function">Exit</span><span class="token punctuation">(</span>exitVal<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">makeData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	file<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token string">"testdata/data.txt"</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		<span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">defer</span> file<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	rand<span class="token punctuation">.</span><span class="token function">Seed</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10000</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>
		data <span class="token operator">:=</span> <span class="token function">makeWord</span><span class="token punctuation">(</span>rand<span class="token punctuation">.</span><span class="token function">Intn</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>
		file<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">makeWord</span><span class="token punctuation">(</span>l <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span> <span class="token punctuation">&#123;</span>
	out <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> l<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>
		out<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'a'</span> <span class="token operator">+</span> <span class="token function">byte</span><span class="token punctuation">(</span>rand<span class="token punctuation">.</span><span class="token function">Intn</span><span class="token punctuation">(</span><span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
	out<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'&#92;n'</span>
	<span class="token keyword">return</span> out
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">TestFileLen</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	result<span class="token punctuation">,</span> err <span class="token operator">:=</span> bench<span class="token punctuation">.</span><span class="token function">FileLen</span><span class="token punctuation">(</span><span class="token string">"testdata/data.txt"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		t<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">if</span> result <span class="token operator">!=</span> <span class="token number">65204</span> <span class="token punctuation">&#123;</span>
		t<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token string">"Expected 65204, got"</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,Er,Tt,Xv,vr,Ot,Jo,Yv,br,_r,mr,N,Zv,Vo,hv,nb,Xo,sb,ab,Yo,tb,pb,Zo,eb,ob,wr,xt,cb,Pr,Ea,z8=`<code class="language-go"><span class="token keyword">var</span> blackhole <span class="token builtin">int</span>

<span class="token keyword">func</span> <span class="token function">BenchmarkFileLen1</span><span class="token punctuation">(</span>b <span class="token operator">*</span>testing<span class="token punctuation">.</span>B<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>N<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>
		result<span class="token punctuation">,</span> err <span class="token operator">:=</span> bench<span class="token punctuation">.</span><span class="token function">FileLen</span><span class="token punctuation">(</span><span class="token string">"testdata/data.txt"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
			b<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
		<span class="token punctuation">&#125;</span>
		blackhole <span class="token operator">=</span> result
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,yr,fn,lb,ho,ub,ib,nc,rb,kb,Cr,cs,fb,sc,db,Eb,Dr,B,vb,ac,bb,_b,tc,mb,wb,pc,Pb,yb,ec,Cb,Db,Tr,ls,Tb,oc,Ob,xb,Or,va,J8='<code class="language-text">BenchmarkFileLen1-12	66	17917232 ns/op	129 B/op 	4 allocs/op</code>',xr,Rt,Rb,Rr,g,Mt,cc,Mb,Sb,Lb,St,lc,Gb,Ab,Nb,Lt,uc,Bb,gb,Hb,Gt,ic,Ib,Fb,Ub,At,rc,jb,qb,Mr,Sr,Lr,Nt,Wb,Gr,ba,V8=`<code class="language-go"><span class="token keyword">var</span> blackhole <span class="token builtin">int</span>

<span class="token keyword">func</span> <span class="token function">BenchmarkFileLen2</span><span class="token punctuation">(</span>b <span class="token operator">*</span>testing<span class="token punctuation">.</span>B<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">,</span> <span class="token number">1000000</span><span class="token punctuation">&#125;</span> <span class="token punctuation">&#123;</span>
		b<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"FileLen-%d"</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>b <span class="token operator">*</span>testing<span class="token punctuation">.</span>B<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>N<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>
				result<span class="token punctuation">,</span> err <span class="token operator">:=</span> bench<span class="token punctuation">.</span><span class="token function">FileLen</span><span class="token punctuation">(</span><span class="token string">"testdata/data.txt"</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span>
				<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
					b<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
				<span class="token punctuation">&#125;</span>
				blackhole <span class="token operator">=</span> result
			<span class="token punctuation">&#125;</span>
		<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,Ar,Cn,kc,Kb,Qb,fc,$b,zb,Nr,_a,X8=`<code class="language-text">BenchmarkFileLen2/FileLen-1-12			66		17921247 ns/op	129 B/op		4 allocs/op
BenchmarkFileLen2/FileLen-10-12			667		1791381 ns/op	144 B/op		4 allocs/op
BenchmarkFileLen2/FileLen-100-12		6368	187415 ns/op	240 B/op		4 allocs/op
BenchmarkFileLen2/FileLen-1000-12		52539	22864 ns/op		1152 B/op		4 allocs/op
BenchmarkFileLen2/FileLen-10000-12		183391	6271 ns/op		10368 B/op		4 allocs/op
BenchmarkFileLen2/FileLen-1000000-12	24865	47952 ns/op		1007753 B/op	4 allocs/op</code>`,Br,Bt,Jb,gr,gt,ma,Vb,wa,Xb,Yb,Hr,Ir,Fr,Ur,us,is,dc,Zb,jr,Ht,hb,qr,It,n5,Wr,Ft,s5,Kr,Pa,Y8=`<code class="language-go"><span class="token keyword">type</span> Processor <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
	Solver MathSolver
<span class="token punctuation">&#125;</span>

<span class="token keyword">type</span> MathSolver <span class="token keyword">interface</span> <span class="token punctuation">&#123;</span>
	<span class="token function">Resolve</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> expression <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">float64</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code>`,Qr,an,Ec,a5,t5,vc,p5,e5,bc,o5,c5,$r,tn,_c,l5,u5,mc,i5,r5,wc,k5,f5,zr,ya,Z8=`<code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>p Processor<span class="token punctuation">)</span> <span class="token function">ProecessExpression</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> r io<span class="token punctuation">.</span>Reader<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">float64</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	curExpression<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">readToNewLine</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">,</span> err
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>curExpression<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">,</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"no expression to read"</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
	answer<span class="token punctuation">,</span> err <span class="token operator">:=</span> p<span class="token punctuation">.</span>Solver<span class="token punctuation">.</span><span class="token function">Resolve</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> curExpression<span class="token punctuation">)</span>
	<span class="token keyword">return</span> answer<span class="token punctuation">,</span> err
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">readToNewLine</span><span class="token punctuation">(</span>r io<span class="token punctuation">.</span>Reader<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">var</span> out <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span>
	b <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
	<span class="token keyword">for</span> <span class="token punctuation">&#123;</span>
		<span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> r<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">if</span> err <span class="token operator">==</span> io<span class="token punctuation">.</span>EOF <span class="token punctuation">&#123;</span>
				<span class="token keyword">return</span> <span class="token function">string</span><span class="token punctuation">(</span>out<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>
			<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
				<span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">,</span> err
			<span class="token punctuation">&#125;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token keyword">if</span> b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'&#92;n'</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">break</span>
		<span class="token punctuation">&#125;</span>
		out <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>out<span class="token punctuation">,</span> b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">return</span> <span class="token function">string</span><span class="token punctuation">(</span>out<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>
<span class="token punctuation">&#125;</span></code>`,Jr,Dn,Pc,d5,E5,yc,v5,b5,Vr,Ca,h8=`<code class="language-go"><span class="token keyword">type</span> MathSolverStub <span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>ms MathSolverStub<span class="token punctuation">)</span> <span class="token function">Resolve</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> expr <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">float64</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">switch</span> expr <span class="token punctuation">&#123;</span>
	<span class="token keyword">case</span> <span class="token string">"2 + 2 * 10"</span><span class="token punctuation">:</span>
		<span class="token keyword">return</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>
	<span class="token keyword">case</span> <span class="token string">"( 2 + 2 ) * 10"</span><span class="token punctuation">:</span>
		<span class="token keyword">return</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>
	<span class="token keyword">case</span> <span class="token string">"( 2 + 2 * 10"</span><span class="token punctuation">:</span>
		<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">,</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"invalid expression: ( 2 + 2 * 10"</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>
<span class="token punctuation">&#125;</span></code>`,Xr,Ut,_5,Yr,Da,nP=`<code class="language-go"><span class="token keyword">func</span> <span class="token function">TestProcessorProcessExpression</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	p <span class="token operator">:=</span> solver<span class="token punctuation">.</span>Processor<span class="token punctuation">&#123;</span>MathSolverStub<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>
	in <span class="token operator">:=</span> strings<span class="token punctuation">.</span><span class="token function">NewReader</span><span class="token punctuation">(</span><span class="token string">&#96;2 + 2 * 10
( 2 + 2 ) * 10
( 2 + 2 * 10&#96;</span><span class="token punctuation">)</span>
	data <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">float64</span><span class="token punctuation">&#123;</span><span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">&#125;</span>
	hasErr <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">bool</span><span class="token punctuation">&#123;</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span>
	<span class="token keyword">for</span> i<span class="token punctuation">,</span> d <span class="token operator">:=</span> <span class="token keyword">range</span> data <span class="token punctuation">&#123;</span>
		result<span class="token punctuation">,</span> err <span class="token operator">:=</span> p<span class="token punctuation">.</span><span class="token function">ProecessExpression</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> in<span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>hasErr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">&#123;</span>
			t<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#125;</span>
		<span class="token keyword">if</span> result <span class="token operator">!=</span> d <span class="token punctuation">&#123;</span>
			t<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"Expected result %f, got %f"</span><span class="token punctuation">,</span> d<span class="token punctuation">,</span> result<span class="token punctuation">)</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,Zr,jt,m5,hr,nk,sk,qt,w5,ak,Ta,sP=`<code class="language-go"><span class="token keyword">type</span> Entities <span class="token keyword">interface</span> <span class="token punctuation">&#123;</span>
	<span class="token function">GetUser</span><span class="token punctuation">(</span>id <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>User<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span>
	<span class="token function">GetPets</span><span class="token punctuation">(</span>userId <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span>Pet<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span>
	<span class="token function">GetChildren</span><span class="token punctuation">(</span>userId <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span>Person<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span>
	<span class="token function">GetFriends</span><span class="token punctuation">(</span>userId <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span>Person<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span>
	<span class="token function">SaveUser</span><span class="token punctuation">(</span>user User<span class="token punctuation">)</span> <span class="token builtin">error</span>
<span class="token punctuation">&#125;</span></code>`,tk,Wt,P5,pk,Kt,y5,ek,Oa,aP=`<code class="language-go"><span class="token keyword">type</span> Logic <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
	Entities Entities
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>l Logic<span class="token punctuation">)</span> <span class="token function">GetPetNames</span><span class="token punctuation">(</span>userId <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	pets<span class="token punctuation">,</span> err <span class="token operator">:=</span> l<span class="token punctuation">.</span>Entities<span class="token punctuation">.</span><span class="token function">GetPets</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err
	<span class="token punctuation">&#125;</span>

	out <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>pets<span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> p <span class="token operator">:=</span> <span class="token keyword">range</span> pets <span class="token punctuation">&#123;</span>
		out <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>out<span class="token punctuation">,</span> p<span class="token punctuation">.</span>Name<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">return</span> out<span class="token punctuation">,</span> <span class="token boolean">nil</span>
<span class="token punctuation">&#125;</span></code>`,ok,_,C5,Cc,D5,T5,Dc,O5,x5,Tc,R5,M5,Oc,S5,L5,xc,G5,A5,Rc,N5,B5,Mc,g5,H5,ck,dn,I5,Sc,F5,U5,Lc,j5,q5,lk,xa,tP=`<code class="language-go"><span class="token keyword">type</span> GetPetNamesStub <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
	Entities
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>ps GetPetNamesStub<span class="token punctuation">)</span> <span class="token function">GetPets</span><span class="token punctuation">(</span>userId <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span>Pet<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">switch</span> userId <span class="token punctuation">&#123;</span>
	<span class="token keyword">case</span> <span class="token string">"1"</span><span class="token punctuation">:</span>
		<span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>Pet<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>Name<span class="token punctuation">:</span> <span class="token string">"Bubbles"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>
	<span class="token keyword">case</span> <span class="token string">"2"</span><span class="token punctuation">:</span>
		<span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>Pet<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>Name<span class="token punctuation">:</span> <span class="token string">"Stampy"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>Name<span class="token punctuation">:</span> <span class="token string">"Snowball"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>
	<span class="token keyword">default</span><span class="token punctuation">:</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"invalid id: %s"</span><span class="token punctuation">,</span> userId<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,uk,F,Gc,W5,K5,Ac,Q5,$5,Nc,z5,J5,Bc,V5,X5,ik,rs,Y5,gc,Z5,h5,rk,Ra,pP=`<code class="language-go"><span class="token keyword">func</span> <span class="token function">TestLogicGetPetNames</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	data <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
		name     <span class="token builtin">string</span>
		userID   <span class="token builtin">string</span>
		petNames <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>
		<span class="token punctuation">&#123;</span><span class="token string">"case1"</span><span class="token punctuation">,</span> <span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">&#123;</span><span class="token string">"Bubbles"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
		<span class="token punctuation">&#123;</span><span class="token string">"case2"</span><span class="token punctuation">,</span> <span class="token string">"2"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">&#123;</span><span class="token string">"Stampy"</span><span class="token punctuation">,</span> <span class="token string">"Snowball"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
		<span class="token punctuation">&#123;</span><span class="token string">"case3"</span><span class="token punctuation">,</span> <span class="token string">"3"</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
	<span class="token punctuation">&#125;</span>

	l <span class="token operator">:=</span> Logic<span class="token punctuation">&#123;</span>GetPetNamesStub<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>
	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> d <span class="token operator">:=</span> <span class="token keyword">range</span> data <span class="token punctuation">&#123;</span>
		t<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			petNames<span class="token punctuation">,</span> err <span class="token operator">:=</span> l<span class="token punctuation">.</span><span class="token function">GetPetNames</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>userID<span class="token punctuation">)</span>
			<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
				t<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
			<span class="token punctuation">&#125;</span>
			<span class="token keyword">if</span> diff <span class="token operator">:=</span> cmp<span class="token punctuation">.</span><span class="token function">Diff</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>petNames<span class="token punctuation">,</span> petNames<span class="token punctuation">)</span><span class="token punctuation">;</span> diff <span class="token operator">!=</span> <span class="token string">""</span> <span class="token punctuation">&#123;</span>
				t<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span>diff<span class="token punctuation">)</span>
			<span class="token punctuation">&#125;</span>
		<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,kk,w,n0,Hc,s0,a0,Ic,t0,p0,Fc,e0,o0,Uc,c0,l0,jc,u0,i0,qc,r0,k0,fk,Qt,f0,dk,Ek,vk,$t,d0,bk,ks,E0,Wc,v0,b0,_k,Ma,eP=`<code class="language-go"><span class="token keyword">type</span> EntitiesStub <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
	getUser     <span class="token keyword">func</span><span class="token punctuation">(</span>id <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>User<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span>
	getPets     <span class="token keyword">func</span><span class="token punctuation">(</span>userId <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span>Pet<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span>
	getChildren <span class="token keyword">func</span><span class="token punctuation">(</span>userId <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span>Person<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span>
	getFriends  <span class="token keyword">func</span><span class="token punctuation">(</span>userId <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span>Person<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span>
	saveUser    <span class="token keyword">func</span><span class="token punctuation">(</span>user User<span class="token punctuation">)</span> <span class="token builtin">error</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>es EntitiesStub<span class="token punctuation">)</span> <span class="token function">GetUser</span><span class="token punctuation">(</span>id <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>User<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">return</span> es<span class="token punctuation">.</span><span class="token function">getUser</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>es EntitiesStub<span class="token punctuation">)</span> <span class="token function">GetPets</span><span class="token punctuation">(</span>userId <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span>Pet<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">return</span> es<span class="token punctuation">.</span><span class="token function">getPets</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>es EntitiesStub<span class="token punctuation">)</span> <span class="token function">GetChildren</span><span class="token punctuation">(</span>userId <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span>Person<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">return</span> es<span class="token punctuation">.</span><span class="token function">getChildren</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>es EntitiesStub<span class="token punctuation">)</span> <span class="token function">GetFriends</span><span class="token punctuation">(</span>userId <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span>Person<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">return</span> es<span class="token punctuation">.</span><span class="token function">getFriends</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>es EntitiesStub<span class="token punctuation">)</span> <span class="token function">SaveUser</span><span class="token punctuation">(</span>user User<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">return</span> es<span class="token punctuation">.</span><span class="token function">saveUser</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code>`,mk,Tn,Kc,_0,m0,Qc,w0,P0,wk,Sa,oP=`<code class="language-go"><span class="token keyword">func</span> <span class="token function">TestLogicGetPetNames2</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	data <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
		name     <span class="token builtin">string</span>
		getPets  <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span>Pet<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span>
		userId   <span class="token builtin">string</span>
		petNames <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span>
		errMsg   <span class="token builtin">string</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>
		<span class="token punctuation">&#123;</span><span class="token string">"case1"</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>userId <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span>Pet<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>Pet<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>Name<span class="token punctuation">:</span> <span class="token string">"Bubbles"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token boolean">nil</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">&#123;</span><span class="token string">"Bubbles"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
		<span class="token punctuation">&#123;</span><span class="token string">"case2"</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>userId <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span>Pet<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"invalid id: 3"</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">"3"</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token string">"invalid id: 3"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
	<span class="token punctuation">&#125;</span>

	l <span class="token operator">:=</span> Logic<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>

	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> d <span class="token operator">:=</span> <span class="token keyword">range</span> data <span class="token punctuation">&#123;</span>
		t<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			l<span class="token punctuation">.</span>Entities <span class="token operator">=</span> EntitiesStub<span class="token punctuation">&#123;</span>getPets<span class="token punctuation">:</span> d<span class="token punctuation">.</span>getPets<span class="token punctuation">&#125;</span>
			petNames<span class="token punctuation">,</span> err <span class="token operator">:=</span> l<span class="token punctuation">.</span><span class="token function">GetPetNames</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>userId<span class="token punctuation">)</span>
			<span class="token keyword">if</span> diff <span class="token operator">:=</span> cmp<span class="token punctuation">.</span><span class="token function">Diff</span><span class="token punctuation">(</span>petNames<span class="token punctuation">,</span> d<span class="token punctuation">.</span>petNames<span class="token punctuation">)</span><span class="token punctuation">;</span> diff <span class="token operator">!=</span> <span class="token string">""</span> <span class="token punctuation">&#123;</span>
				t<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span>diff<span class="token punctuation">)</span>
			<span class="token punctuation">&#125;</span>

			<span class="token keyword">var</span> errMsg <span class="token builtin">string</span>
			<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
				errMsg <span class="token operator">=</span> err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
			<span class="token punctuation">&#125;</span>
			<span class="token keyword">if</span> errMsg <span class="token operator">!=</span> d<span class="token punctuation">.</span>errMsg <span class="token punctuation">&#123;</span>
				t<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"Expected error &#96;%s&#96;, got &#96;%s&#96;"</span><span class="token punctuation">,</span> d<span class="token punctuation">.</span>errMsg<span class="token punctuation">,</span> errMsg<span class="token punctuation">)</span>
			<span class="token punctuation">&#125;</span>
		<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,Pk,M,y0,$c,C0,D0,zc,T0,O0,Jc,x0,R0,Vc,M0,S0,Xc,L0,G0,yk,fs,Yc,A0,N0,On,B0,La,g0,H0,Ga,I0,F0,Ck,Dk,Tk,Ok,ds,Es,Zc,U0,xk,vs,j0,hc,q0,W0,Rk,Aa,nl,K0,Q0,Mk,Na,cP=`<code class="language-go"><span class="token keyword">type</span> RemoteSolver <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
	MathServerURL <span class="token builtin">string</span>
	Client        <span class="token operator">*</span>http<span class="token punctuation">.</span>Client
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>rs RemoteSolver<span class="token punctuation">)</span> <span class="token function">RemoteSolver</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> expression <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">float64</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	req<span class="token punctuation">,</span> err <span class="token operator">:=</span> http<span class="token punctuation">.</span><span class="token function">NewRequestWithContext</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> http<span class="token punctuation">.</span>MethodGet<span class="token punctuation">,</span> rs<span class="token punctuation">.</span>MathServerURL<span class="token operator">+</span><span class="token string">"?expression="</span><span class="token operator">+</span>url<span class="token punctuation">.</span><span class="token function">QueryEscape</span><span class="token punctuation">(</span>expression<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">,</span> err
	<span class="token punctuation">&#125;</span>
	res<span class="token punctuation">,</span> err <span class="token operator">:=</span> rs<span class="token punctuation">.</span>Client<span class="token punctuation">.</span><span class="token function">Do</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">,</span> err
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">defer</span> res<span class="token punctuation">.</span>Body<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	contents<span class="token punctuation">,</span> err <span class="token operator">:=</span> ioutil<span class="token punctuation">.</span><span class="token function">ReadAll</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>Body<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">,</span> err
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">if</span> res<span class="token punctuation">.</span>StatusCode <span class="token operator">!=</span> http<span class="token punctuation">.</span>StatusOK <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">,</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token function">string</span><span class="token punctuation">(</span>contents<span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
	result<span class="token punctuation">,</span> err <span class="token operator">:=</span> strconv<span class="token punctuation">.</span><span class="token function">ParseFloat</span><span class="token punctuation">(</span><span class="token function">string</span><span class="token punctuation">(</span>contents<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">,</span> err
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">return</span> result<span class="token punctuation">,</span> <span class="token boolean">nil</span>
<span class="token punctuation">&#125;</span></code>`,Sk,J,$0,sl,z0,J0,al,V0,X0,tl,Y0,Z0,Lk,Ba,lP=`<code class="language-go"><span class="token keyword">type</span> info <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
	expression <span class="token builtin">string</span>
	code       <span class="token builtin">int</span>
	body       <span class="token builtin">string</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">var</span> io info</code>`,Gk,bs,h0,pl,n_,s_,Ak,ga,uP=`<code class="language-go">server <span class="token operator">:=</span> httptest<span class="token punctuation">.</span><span class="token function">NewServer</span><span class="token punctuation">(</span>
	http<span class="token punctuation">.</span><span class="token function">HandlerFunc</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		expression <span class="token operator">:=</span> r<span class="token punctuation">.</span>URL<span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">"expression"</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span> expression <span class="token operator">!=</span> io<span class="token punctuation">.</span>expression <span class="token punctuation">&#123;</span>
			w<span class="token punctuation">.</span><span class="token function">WriteHeader</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusBadRequest<span class="token punctuation">)</span>
			fmt<span class="token punctuation">.</span><span class="token function">Fprintf</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">"expected expression '%s', got '%s'"</span><span class="token punctuation">,</span> io<span class="token punctuation">.</span>expression<span class="token punctuation">,</span> expression<span class="token punctuation">)</span>
			<span class="token keyword">return</span>
		<span class="token punctuation">&#125;</span>
		w<span class="token punctuation">.</span><span class="token function">WriteHeader</span><span class="token punctuation">(</span>io<span class="token punctuation">.</span>code<span class="token punctuation">)</span>
		w<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>io<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">defer</span> server<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

rs <span class="token operator">:=</span> RemoteSolver<span class="token punctuation">&#123;</span>
	MathServerURL<span class="token punctuation">:</span> server<span class="token punctuation">.</span>URL<span class="token punctuation">,</span>
	Client<span class="token punctuation">:</span>        server<span class="token punctuation">.</span><span class="token function">Client</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span></code>`,Nk,D,el,a_,t_,ol,p_,e_,cl,o_,c_,ll,l_,u_,ul,i_,r_,il,k_,f_,Bk,zt,d_,gk,Ha,iP=`<code class="language-go">data <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
	name   <span class="token builtin">string</span>
	io     info
	result <span class="token builtin">float64</span>
	errMsg <span class="token builtin">string</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>
	<span class="token punctuation">&#123;</span><span class="token string">"case1"</span><span class="token punctuation">,</span> info<span class="token punctuation">&#123;</span><span class="token string">"2 + 2 * 10"</span><span class="token punctuation">,</span> http<span class="token punctuation">.</span>StatusOK<span class="token punctuation">,</span> <span class="token string">"22"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
	<span class="token punctuation">&#123;</span><span class="token string">"case2"</span><span class="token punctuation">,</span> info<span class="token punctuation">&#123;</span><span class="token string">"( 2 + 2 ) * 10"</span><span class="token punctuation">,</span> http<span class="token punctuation">.</span>StatusOK<span class="token punctuation">,</span> <span class="token string">"40"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
	<span class="token punctuation">&#123;</span><span class="token string">"case3"</span><span class="token punctuation">,</span> info<span class="token punctuation">&#123;</span><span class="token string">"( 2 + 2 * 10"</span><span class="token punctuation">,</span> http<span class="token punctuation">.</span>StatusBadRequest<span class="token punctuation">,</span>
		<span class="token string">"invalid expression: ( 2 + 2 * 10"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
		<span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"invalid expression: ( 2 + 2 * 10"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> d <span class="token operator">:=</span> <span class="token keyword">range</span> data <span class="token punctuation">&#123;</span>
	t<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		io <span class="token operator">=</span> d<span class="token punctuation">.</span>io
		result<span class="token punctuation">,</span> err <span class="token operator">:=</span> rs<span class="token punctuation">.</span><span class="token function">Resolve</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> d<span class="token punctuation">.</span>io<span class="token punctuation">.</span>expression<span class="token punctuation">)</span>
		<span class="token keyword">if</span> result <span class="token operator">!=</span> d<span class="token punctuation">.</span>result <span class="token punctuation">&#123;</span>
			t<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"io &#96;%f&#96;, got &#96;%f&#96;"</span><span class="token punctuation">,</span> d<span class="token punctuation">.</span>result<span class="token punctuation">,</span> result<span class="token punctuation">)</span>
		<span class="token punctuation">&#125;</span>
		<span class="token keyword">var</span> errMsg <span class="token builtin">string</span>
		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
			errMsg <span class="token operator">=</span> err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#125;</span>
		<span class="token keyword">if</span> errMsg <span class="token operator">!=</span> d<span class="token punctuation">.</span>errMsg <span class="token punctuation">&#123;</span>
			t<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"io error &#96;%s&#96;, got &#96;%s&#96;"</span><span class="token punctuation">,</span> d<span class="token punctuation">.</span>errMsg<span class="token punctuation">,</span> errMsg<span class="token punctuation">)</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code>`,Hk,_s,E_,rl,v_,b_,Ik,Fk,Uk,jk,ms,ws,kl,__,qk,Ia,fl,m_,w_,Wk,Jt,P_,Kk,En,y_,dl,C_,D_,El,T_,O_,Qk,Vt,x_,$k,Fa,rP=`<code class="language-bash"><span class="token function">docker</span> pull jonbodner/math-server
<span class="token function">docker</span> run <span class="token parameter variable">-p</span> <span class="token number">8080</span>:8080 jonbodner/math-server</code>`,zk,Xt,R_,Jk,Ua,kP=`<code class="language-go"><span class="token comment">// +build integration</span>

<span class="token keyword">package</span> solver

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">"context"</span>
	<span class="token string">"net/http"</span>
	<span class="token string">"testing"</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">TestRemoteSolver_ResolveIntegration</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	rs <span class="token operator">:=</span> RemoteSolver<span class="token punctuation">&#123;</span>
		MathServerURL<span class="token punctuation">:</span> <span class="token string">"http://localhost:8080"</span><span class="token punctuation">,</span>
		Client<span class="token punctuation">:</span>        http<span class="token punctuation">.</span>DefaultClient<span class="token punctuation">,</span>
	<span class="token punctuation">&#125;</span>

	data <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
		name       <span class="token builtin">string</span>
		expression <span class="token builtin">string</span>
		result     <span class="token builtin">float64</span>
		errMsg     <span class="token builtin">string</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>
		<span class="token punctuation">&#123;</span><span class="token string">"case1"</span><span class="token punctuation">,</span> <span class="token string">"2 + 2 * 10"</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
		<span class="token punctuation">&#123;</span><span class="token string">"case2"</span><span class="token punctuation">,</span> <span class="token string">"( 2 + 2 ) * 10"</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
		<span class="token punctuation">&#123;</span><span class="token string">"case3"</span><span class="token punctuation">,</span> <span class="token string">"( 2 + 2 * 10"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"invalid expression: ( 2 + 2 * 10"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> d <span class="token operator">:=</span> <span class="token keyword">range</span> data <span class="token punctuation">&#123;</span>
		t<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			result<span class="token punctuation">,</span> err <span class="token operator">:=</span> rs<span class="token punctuation">.</span><span class="token function">Resolve</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> d<span class="token punctuation">.</span>expression<span class="token punctuation">)</span>
			<span class="token keyword">if</span> result <span class="token operator">!=</span> d<span class="token punctuation">.</span>result <span class="token punctuation">&#123;</span>
				t<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"expected &#96;%f&#96;, got &#96;%f&#96;"</span><span class="token punctuation">,</span> d<span class="token punctuation">.</span>result<span class="token punctuation">,</span> result<span class="token punctuation">)</span>
			<span class="token punctuation">&#125;</span>

			<span class="token keyword">var</span> errMsg <span class="token builtin">string</span>
			<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
				errMsg <span class="token operator">=</span> err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
			<span class="token punctuation">&#125;</span>
			<span class="token keyword">if</span> errMsg <span class="token operator">!=</span> d<span class="token punctuation">.</span>errMsg <span class="token punctuation">&#123;</span>
				t<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"expected error &#96;%s&#96;, got &#96;%s&#96;"</span><span class="token punctuation">,</span> d<span class="token punctuation">.</span>errMsg<span class="token punctuation">,</span> errMsg<span class="token punctuation">)</span>
			<span class="token punctuation">&#125;</span>
		<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
</code>`,Vk,Ps,M_,vl,S_,L_,Xk,Yt,G_,Yk,ja,fP='<code class="language-bash">go <span class="token builtin class-name">test</span> <span class="token parameter variable">-tags</span> integration</code>',Zk,xn,bl,A_,N_,_l,B_,g_,hk,ys,Cs,ml,H_,I_,wl,F_,U_,j_,qa,q_,Wa,W_,K_,nf,sf,af,tf,Ds,Ts,Pl,Q_,pf,Os,$_,yl,z_,J_,ef,xs,V_,Cl,X_,Y_,of,Zt,Z_,cf,Ka,dP=`<code class="language-go"><span class="token keyword">func</span> <span class="token function">getCounter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">var</span> counter <span class="token builtin">int</span>
	<span class="token keyword">var</span> wg sync<span class="token punctuation">.</span>WaitGroup
	wg<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>

    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">:=</span> <span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>
                counter<span class="token operator">++</span>
            <span class="token punctuation">&#125;</span>
            wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>

    wg<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> counter
<span class="token punctuation">&#125;</span></code>`,lf,Rs,h_,Dl,n4,s4,uf,Qa,EP=`<code class="language-go"><span class="token keyword">func</span> <span class="token function">TestGetCounter</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	counter <span class="token operator">:=</span> <span class="token function">getCounter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> counter <span class="token operator">!=</span> <span class="token number">5000</span> <span class="token punctuation">&#123;</span>
		t<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token string">"unexpected counter:"</span><span class="token punctuation">,</span> counter<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,rf,Ms,a4,Tl,t4,p4,kf,$a,vP=`<code class="language-text">--- FAIL: TestGetCounter (0.00s)
    race_test.go:8: unexpected counter: 4116
FAIL
exit status 1
FAIL    github.com/jhseoeo/learning-go/13-tests/race        0.001s</code>`,ff,ht,e4,df,vn,o4,Ol,c4,l4,xl,u4,i4,Ef,pn,Rl,r4,k4,Ml,f4,d4,Sl,E4,v4,vf,za,bP=`<code class="language-text">$ go test -race
==================
WARNING: DATA RACE
Read at 0x00c000018248 by goroutine 10:
  github.com/jhseoeo/learning-go/13-tests/race.getCounter.func1()
      /home/junhyuk/Programming/Golang/13-tests/race/race.go:13 +0x46

Previous write at 0x00c000018248 by goroutine 8:
  github.com/jhseoeo/learning-go/13-tests/race.getCounter.func1()
      /home/junhyuk/Programming/Golang/13-tests/race/race.go:13 +0x58

Goroutine 10 (running) created at:
  github.com/jhseoeo/learning-go/13-tests/race.getCounter()
      /home/junhyuk/Programming/Golang/13-tests/race/race.go:11 +0x8d
  github.com/jhseoeo/learning-go/13-tests/race.TestGetCounter()
      /home/junhyuk/Programming/Golang/13-tests/race/race_test.go:6 +0x2b
  testing.tRunner()
      /usr/local/go/src/testing/testing.go:1439 +0x213
  testing.(*T).Run.func1()
      /usr/local/go/src/testing/testing.go:1486 +0x47

Goroutine 8 (finished) created at:
  github.com/jhseoeo/learning-go/13-tests/race.getCounter()
      /home/junhyuk/Programming/Golang/13-tests/race/race.go:11 +0x8d
  github.com/jhseoeo/learning-go/13-tests/race.TestGetCounter()
      /home/junhyuk/Programming/Golang/13-tests/race/race_test.go:6 +0x2b
  testing.tRunner()
      /usr/local/go/src/testing/testing.go:1439 +0x213
  testing.(*T).Run.func1()
      /usr/local/go/src/testing/testing.go:1486 +0x47
==================
--- FAIL: TestGetCounter (0.00s)
    race_test.go:8: unexpected counter: 30131
    testing.go:1312: race detected during execution of test
FAIL
exit status 1
FAIL    github.com/jhseoeo/learning-go/13-tests/race        0.007s</code>`,bf,np,b4,_f,mf,wf,bn,_4,Ll,m4,w4,Gl,P4,y4,Pf,yf,Cf,Df,Ss,Ls,Al,C4,Tf,Of,xf,sp,Rn,Ja,ap,h4,D4,T4,O4,Va,x4,Rf,Mf,Sf;return{c(){st=e("br"),jl=i(),at=e("p"),t1=t("본 글은 Golang을 공부하며 주요 내용이라 생각되는 것들을 기록해둔 자료이며, Ubuntu 22.04 LTS 기준으로 작성되었습니다."),ql=i(),Wl=e("br"),Kl=e("br"),Ql=i(),Ln=e("h2"),Gn=e("a"),Ep=e("span"),p1=t("Introduction"),$l=i(),zl=e("hr"),Jl=i(),tt=e("p"),e1=t("정말 오랜만에 Golang 포스팅을 다시 하게 되었다. 학업에 치이다 보니 잠시 Golang을 멀리 했었는데, 오랜만에 쓰려니 어디까지 했었는지 감이 잘 안온다. 기존에 내가 썼던 글 다시 보고 최대한 감을 되찾아 써보려 한다."),Vl=i(),Xl=e("br"),Yl=i(),pt=e("p"),o1=t(`지난 20년간 테스트의 자동화는 코드 품질을 향상시키는 데 지대한 공헌을 했다.
Go에서 표준 라이브러리로 테스트에 관련된 기능을 포함하는 것은 그리 놀라운 일이 아니다.
게다가 아주 쉽기 때문에, 테스트를 기피할 변명거리도 없을 것이다.
이번 챕터에서는 우리가 작성한 Go 코드를 테스트하고, 테스트를 unit test 및 integration test로 묶고, 코드 커버리지를 평가하고, 벤치마크를 작성하고, race checker를 이용하여 코드에서 동시성 문제를 확인하는 방법을 알아볼 것이다.
이를 위해 테스트 가능한 코드를 작성하는 방법과, 이를 통해 코드 품질이 향상되는 이유에 대해 알아볼 것이다.`),Zl=i(),hl=e("br"),nu=e("br"),su=i(),An=e("h2"),Nn=e("a"),vp=e("span"),c1=t("The Basics of Testing"),au=i(),tu=e("hr"),pu=i(),q=e("p"),l1=t(`Go의 테스트는 라이브러리와 도구로 나뉜다.
표준 라이브러리의 `),bp=e("code"),u1=t("testing"),i1=t(` 패키지는 테스트를 작성하기 위한 타입과 함수를 제공한다.
한편 Go와 함께 번들로 제공되는 `),_p=e("code"),r1=t("gotest"),k1=t(`라는 도구는 테스트를 실행하고 보고를 생성한다.
다른 언어와는 달리 Go의 테스트는 프로덕션 코드와 같은 디렉토리 및 같은 패키지에 배치한다.
테스트가 같은 패키지에 위치하기 때문에, export되지 않은 함수나 변수에 액세스하여 테스트할 `),mp=e("strong"),f1=t("수"),d1=t(` 있다.
또한 이후에는 공개된 API만을 테스트하는 방법에 대해서도 알아볼 것이다.`),eu=i(),et=e("p"),E1=t("먼저, 간단한 함수를 작성해 보자."),ou=i(),Us=e("pre"),cu=i(),ot=e("p"),v1=t("또한, 이에 대응하는 테스트 코드도 작성해준다."),lu=i(),js=e("pre"),uu=i(),W=e("p"),b1=t("모든 테스트는 "),wp=e("em"),_1=t("_test.go"),m1=t(`로 끝나는 이름을 가진 파일에 작성된다.
만약 `),Pp=e("em"),w1=t("foo.go"),P1=t(" 파일에 대한 테스트를 하고자 한다면, 테스트는 "),yp=e("em"),y1=t("foo_test.go"),C1=t("라는 파일에 작성되어야 할 것이다."),iu=i(),O=e("p"),D1=t("테스트 함수는 "),Cp=e("code"),T1=t("Test"),O1=t("로 시작하며, "),Dp=e("code"),x1=t("*testing.T"),R1=t(" 타입의 단일 파라미터를 받는다. 보통 이 파라미터의 이름은 "),Tp=e("code"),M1=t("t"),S1=t(`로 한다. 함수는 아무 것도 반환하지 않는다.
테스트의 이름은 그 대상을 문서화하기 위한 것이기 때문에, 테스트할 대상을 잘 설명할 수 있도록 지어주어야 한다.
함수에 대한 unit test를 작성할 때는 `),Op=e("code"),L1=t("Test"),G1=t(` 다음에 함수 이름을 넣는 것이 일반적이다.
만약 export되지 않은 함수에 대한 테스트라면 `),xp=e("code"),A1=t("Test"),N1=t("와 함수 이름 사이에 언더바(_)를 넣기도 한다."),ru=i(),cn=e("p"),B1=t(`또한, 표준 Go 코드를 사용하여 테스트 중인 코드를 호출하고 응답이 예상대로 이루어지는지 확인한다.
만약 결과가 옳지 않다면, `),Rp=e("code"),g1=t("fmt.Print()"),H1=t("와 유사하게 동작하는 "),Mp=e("code"),I1=t("t.Error()"),F1=t(" 메소드를 통해 에러 보고를 만든다. 다른 에러 보고 메소드에 대해서도 차차 살펴볼 것이다."),ku=i(),K=e("p"),U1=t("바이너리를 빌드할 때 "),Sp=e("code"),j1=t("go build"),q1=t(", 실행할 때 "),Lp=e("code"),W1=t("go run"),K1=t(" 명령어를 치듯, 테스트 할 때는 "),Gp=e("code"),Q1=t("go test"),$1=t("를 치면 된다."),fu=i(),qs=e("pre"),du=i(),Q=e("p"),z1=t(`이렇듯 테스트가 성공하지 못했음을 확인하였다. 우리가 작성한 함수에서 버그를 찾아 고쳐주자.
`),Ap=e("code"),J1=t("return x + x"),V1=t("를 "),Np=e("code"),X1=t("return x + y"),Y1=t("로 고쳐주고 다시 "),Bp=e("code"),Z1=t("go test"),h1=t("를 실행하면 테스트가 성공적으로 끝남을 확인할 수 있다."),Eu=i(),Ws=e("pre"),vu=i(),h=e("p"),gp=e("code"),n2=t("go test"),s2=t(` 명령어는 어떤 패키지에서 테스트를 진행할 지 명시할 수 있다.
`),Hp=e("code"),a2=t("./..."),t2=t(`를 붙이면 현재 디렉토리와 모든 하위 디렉토리에 대해서 테스트를 진행한다.
`),Ip=e("code"),p2=t("-v"),e2=t(" 플래그가 있으면 verbose output을 출력한다."),bu=i(),_u=e("br"),mu=e("br"),wu=i(),Bn=e("h3"),gn=e("a"),Fp=e("span"),o2=t("Reporting Test Failures"),Pu=i(),L=e("p"),Up=e("code"),c2=t("*testing.T"),l2=t(`에는 테스트 실패를 보고하기 위한 몇 개의 메소드가 있다.
`),jp=e("code"),u2=t("fmt.Print()"),i2=t("와 유사한 "),qp=e("code"),r2=t("Error()"),k2=t("가 있듯, 포매팅을 할 수 있는 "),Wp=e("code"),f2=t("fmt.Printf()"),d2=t("와 유사한 형태의 "),Kp=e("code"),E2=t("Errorf()"),v2=t("가 존재한다."),yu=i(),Ks=e("pre"),Cu=i(),b=e("p"),Qp=e("code"),b2=t("Error()"),_2=t("나 "),$p=e("code"),m2=t("Errorf()"),w2=t(`는 테스트가 실패했음을 명시하기 위해 사용되지만, 테스트되는 함수의 코루틴은 계속해서 실행된다.
만약 테스트가 실패하면 그 이상의 처리를 멈춰야 한다고 생각한다면 `),zp=e("code"),P2=t("Fatal()"),y2=t(" 및 "),Jp=e("code"),C2=t("Fatalf()"),D2=t(" 메소드를 사용하면 된다. "),Vp=e("code"),T2=t("Fatal()"),O2=t("은 "),Xp=e("code"),x2=t("Error()"),R2=t("와, "),Yp=e("code"),M2=t("Fatalf()"),S2=t("는 "),Zp=e("code"),L2=t("Errorf()"),G2=t(`와 유사하다.
이들의 차이점은 테스트 실패 메시지가 생성되자마자 테스트 함수가 즉시 종료된다는 점이다.
다만 모든 테스트가 종료되는 것이 아니라, 현재 진행중인 테스트만 종료되는 것이다. 다른 나머지 테스트는 이후에 계속 진행된다.`),Du=i(),E=e("p"),A2=t("언제 "),hp=e("code"),N2=t("Error()"),B2=t("/"),ne=e("code"),g2=t("Errorf()"),H2=t("를, 그리고 언제 "),se=e("code"),I2=t("Fatal()"),F2=t("/"),ae=e("code"),U2=t("Fatalf()"),j2=t(`를 써야 할까?
만일 테스트 실패로 인해 동일한 테스트 함수의 이후 테스트가 항상 실패하거나, 테스트가 panic 상태에 빠지는 경우 `),te=e("code"),q2=t("Fatal()"),W2=t("/"),pe=e("code"),K2=t("Fatalf()"),Q2=t(`를 사용한다.
만약 여러 개의 서로 다른 항목에 대해 테스트하는 경우 `),ee=e("code"),$2=t("Error()"),z2=t("/"),oe=e("code"),J2=t("Errorf()"),V2=t("를 사용해야 최대한 많은 문제를 발견하여 테스트를 여러 번 돌릴 일 없게 만들어준다."),Tu=i(),Ou=e("br"),xu=e("br"),Ru=i(),Hn=e("h3"),In=e("a"),ce=e("span"),X2=t("Setting Up and Tearing Down"),Mu=i(),Fn=e("p"),Y2=t(`테스트를 실행하기 전에 설정하고, 테스트가 완료되면 제거할 수 있는 특정 상태가 있을 수 있다.
이 경우 `),le=e("code"),Z2=t("TestMain"),h2=t("함수를 사용하여 이러한 상태를 관리한다."),Su=i(),Qs=e("pre"),Lu=i(),f=e("p"),ue=e("code"),nd=t("*testing.M"),sd=t(" 타입의 파라미터를 받는 함수 "),ie=e("code"),ad=t("TestMain()"),td=t("을 선언하였고, 패키지 레벨 변수 "),re=e("code"),pd=t("testTime"),ed=t("을 참조하는 "),ke=e("code"),od=t("TestFirst()"),cd=t(", "),fe=e("code"),ld=t("TestSecond()"),ud=t(` 함수가 있다.
`),de=e("code"),id=t("TestMain()"),rd=t(" 함수가 있는 패키지에서 "),Ee=e("code"),kd=t("go test"),fd=t("를 실행하면 테스트를 직접 호출하는 대신 "),ve=e("code"),dd=t("TestMain()"),Ed=t(` 함수가 호출된다.
일단 상태가 설정되면, `),be=e("code"),vd=t("*testing.M"),bd=t("의 "),_e=e("code"),_d=t("Run()"),md=t(` 메소드를 호출한다.
`),me=e("code"),wd=t("Run()"),Pd=t(` 메소드는 exit code를 반환하며, 0은 모든 테스트에 통과했음을 나타낸다.
마지막으로 이 exit code와 함께 `),we=e("code"),yd=t("os.Exit()"),Cd=t("를 호출하면 된다."),Gu=i(),$s=e("p"),Pe=e("code"),Dd=t("go test"),Td=t("를 실행한 결과는 다음과 같다."),Au=i(),zs=e("pre"),Nu=i(),nn=e("p"),ye=e("code"),Od=t("TestMain()"),xd=t("은 딱 한 번만 호출되며, 패키지당 하나의 "),Ce=e("code"),Rd=t("TestMain()"),Md=t(`만 사용할 수 있다.
`),De=e("code"),Sd=t("TestMain()"),Ld=t("을 유용하게 사용할 만한 상황은 다음과 같다."),Bu=i(),Un=e("ul"),Te=e("li"),Gd=t("데이터베이스 등, 외부 repository를 구축해야 하는 경우"),Ad=i(),Oe=e("li"),Nd=t("테스트하는 코드가 초기화해야 하는 패키지 레벨 변수에 의존하는 경우"),gu=i(),jn=e("p"),Bd=t(`이전에 언급하였듯 애초에 패키지 레벨 변수의 사용은 웬만하면 자제해야 한다. 프로그램에서 데이터가 어떻게 흘러가는지 이해하기 어렵게 만들기 때문이다.
따라서 `),xe=e("code"),gd=t("TestMain()"),Hd=t("을 사용해야 하는 경우, 그보다 코드를 리팩토링하는 것을 먼저 고려해보는 것이 낫다."),Hu=i(),m=e("p"),Re=e("code"),Id=t("*testing.T"),Fd=t("의 "),Me=e("code"),Ud=t("Cleanup()"),jd=t(` 메소드는 하나의 테스트를 위해 생성된 임시 리소스를 청소하는 데 사용한다.
`),Se=e("code"),qd=t("Cleanup()"),Wd=t(` 메소드는 반환값 및 파라미터가 없는 함수 하나를 파라미터로 받는데, 이 함수는 테스트가 완료되면 실행된다.
간단한 테스트라면 `),Le=e("code"),Kd=t("defer"),Qd=t(`문을 사용하더라도 동일한 결과를 얻을 수 있을것이다.
하지만 아래와 같이 샘플 데이터를 설정할 때 helper function에 의존하는 경우 `),Ge=e("code"),$d=t("Cleanup()"),zd=t(`이 유용하다.
`),Ae=e("code"),Jd=t("defer"),Vd=t("처럼 "),Ne=e("code"),Xd=t("Cleanup()"),Yd=t("을 여러 번 호출하여도 괜찮으며, 마지막에 추가된 함수가 먼저 호출된다."),Iu=i(),Js=e("pre"),Fu=i(),Uu=e("br"),ju=e("br"),qu=i(),qn=e("h3"),Wn=e("a"),Be=e("span"),Zd=t("Storing Sample Test Data"),Wu=i(),G=e("p"),ge=e("code"),hd=t("go test"),nE=t(` 명령어는 현재의 패키지 디렉토리를 작업 디렉토리로 설정한다.
만약 특정 패키지에서 함수를 테스트하고자 할 때 샘플 데이터를 사용하고 싶다면, `),He=e("em"),sE=t("testdata"),aE=t(`라는 서브디렉토리를 만들면 된다. 이 디렉토리명은 Go에서 테스트 파일을 저장하는 공간으로 지정되어 있다.
`),Ie=e("em"),tE=t("testdata"),pE=t(`에서 데이터를 읽어올 때는 반드시 상대경로를 사용한다.
`),Fe=e("code"),eE=t("go test"),oE=t(" 명령어는 작업 디렉토리를 현재 패키지로 변경하기 때문에, 각각의 패키지는 상대 경로를 통해 "),Ue=e("em"),cE=t("testdata"),lE=t("에 접근할 것이다."),Ku=i(),Kn=e("p"),uE=t("예제 코드는 "),Vs=e("a"),iE=t("여기"),rE=t("에서 찾아볼 수 있다."),Qu=i(),$u=e("br"),zu=e("br"),Ju=i(),Qn=e("h3"),$n=e("a"),je=e("span"),kE=t("Testing Your Public API"),Vu=i(),ct=e("p"),fE=t(`우리가 작성한 테스트 코드는 프로덕션 코드와 동일한 패키지에 위치하였다.
이 같은 방식으로 export된 함수나 export되지 않은 함수까지도 테스트할 수 있었다.`),Xu=i(),zn=e("p"),dE=t(`만약 패키지의 Public API만 테스트하려는 거라면, 이를 위한 Go의 규칙이 마련되어 있다.
프로덕션 코드와 같은 디렉토리에 테스트 코드를 두는 것은 동일하지만, 패키지 명으로 `),qe=e("code"),EE=t("[패키지명]_test"),vE=t("를 사용한다."),Yu=i(),$=e("p"),bE=t("맨 처음 작성하였던 "),We=e("code"),_E=t("adder"),mE=t("의 예제를 떠올려보자. 맨 처음의 "),Ke=e("code"),wE=t("adder"),PE=t("는 export되지 않는 함수였다. 이번에는 export되게끔 아래와 같이 작성한다. 파일명은 "),Qe=e("em"),yE=t("adder_public.go"),CE=t("로 하였다."),Zu=i(),Xs=e("pre"),hu=i(),ln=e("p"),DE=t(`이렇게 export된 Public API에 대해, 테스트 코드를 아래와 같이 작성해준다.
파일명 또한 기존 테스트 코드처럼 뒤에 `),$e=e("em"),TE=t("_test"),OE=t("를 붙여, "),ze=e("em"),xE=t("adder_public_test.go"),RE=t("로 하였다."),ni=i(),Ys=e("pre"),si=i(),x=e("p"),ME=t("주목할 점은 테스트 코드의 패키지명이 "),Je=e("code"),SE=t("adder_test"),LE=t("라는 것이다. 패키지가 다르기 때문에 "),Ve=e("code"),GE=t("AddNumbers()"),AE=t("를 "),Xe=e("code"),NE=t("adder"),BE=t("로부터 import해와야 하며, "),Ye=e("code"),gE=t("adder.AddNumbers()"),HE=t(`로 호출한다.
또한 테스트의 이름 설정 규칙에 따라, 테스트 함수의 이름은 `),Ze=e("code"),IE=t("AddNumbers()"),FE=t(" 함수와 매칭되어야 한다."),ai=i(),un=e("p"),UE=t(`패키지 안에서 export된 함수를 호출할 수 있는 것처럼, 소스 코드와 동일한 패키지에서 Public API를 테스트할 수 있다.
위와 같은 `),he=e("code"),jE=t("_test"),qE=t(` 접미사 패키지를 사용하면 export된 함수, 메소드, 타입, 상수, 변수에만 접근이 가능해지기 때문에, 블랙 박스 테스팅이 강제된다.
또한 `),no=e("code"),WE=t("_test"),KE=t("가 붙은 패키지와 붙지 않은 두 개의 패키지가 동일한 디렉토리에 있을 수 있다."),ti=i(),pi=e("br"),ei=e("br"),oi=i(),Jn=e("h3"),Vn=e("a"),so=e("span"),QE=t("Use go-cmp to Compare Test Results"),ci=i(),R=e("p"),$E=t(`복합 유형 인스턴스끼리 정확히 비교하는 코드는 다소 길어질 수 있다.
`),ao=e("code"),zE=t("reflect.DeepEqual()"),JE=t(`을 사용하여 struct, map, slice를 비교할 수 있지만 더 나은 방법이 있다.
구글은 `),to=e("code"),VE=t("go-cmp"),XE=t(`라는 서드파티 모듈을 출시했다.
`),po=e("code"),YE=t("go-cmp"),ZE=t(`는 비교를 하여 일치하지 않는부분에 대한 상세한 설명을 제공한다.
간단한 `),eo=e("code"),hE=t("struct"),n3=t("와 함께 "),oo=e("code"),s3=t("go-cmp"),a3=t("를 사용해보자."),li=i(),Zs=e("pre"),ui=i(),lt=e("p"),t3=t(`먼저 구조체 타입과 이에 대한 Factory 함수를 정의해주었다.
이제 테스트 코드를 작성해보자.`),ii=i(),hs=e("pre"),ri=i(),rn=e("p"),p3=t("먼저, 테스트 코드를 실행하려면 "),co=e("code"),e3=t("github.com/google/go-cmp/cmp"),o3=t(`를 임포트해주어야 한다.
`),lo=e("code"),c3=t("cmp.Diff()"),l3=t(` 함수는 예상되는 출력값과 테스트하는 함수의 실제 출력값을 파라미터로 받는다.
그리고 두 입력 간의 불일치가 있다면 이에 대한 설명을 출력한다. 만약 입력이 일치한다면, 빈 문자열을 반환한다.`),ki=i(),Pn=e("p"),uo=e("code"),u3=t("go test"),i3=t("를 입력하여, "),io=e("code"),r3=t("go-cmp"),k3=t("가 어떤 결과를 내놓았을 지 확인해보자."),fi=i(),na=e("pre"),di=i(),C=e("p"),ro=e("code"),f3=t("+"),d3=t("와 "),ko=e("code"),E3=t("-"),v3=t(`가 있는 라인에서 예측값과 실제 값의 차이를 나타낸다.
위 예제의 경우 `),fo=e("code"),b3=t("DateAdded"),_3=t(" 필드가 일치하지 않았기 때문에 실패하였다. "),Eo=e("code"),m3=t("DateAdded"),w3=t(" 필드는 "),vo=e("code"),P3=t("testcmp.CreatePerson()"),y3=t("를 통해서만 제대로 처리할 수 있기 때문에, "),bo=e("code"),C3=t("DateAdded"),D3=t(` 필드는 검사 대상에서 제외할 필요가 있다.
아래와 같이 비교 함수를 정의해서, 비교하고자 하는 필드를 지정할수 있다.`),Ei=i(),sa=e("pre"),vi=i(),I=e("p"),_o=e("code"),T3=t("cmp.Comparer()"),O3=t(`에 두 인스턴스를 비교하는 익명 함수를 전달하여 비교 함수를 생성하였다.
전달되는 익명 함수는 반드시 동일한 타입의 두 파라미터를 입력으로 받아, bool 타입을 반환한다.
또한 symmetric(파라미터의 순서가 중요치 않음), deterministic(입력이 같다면 출력이 반드시 같음), pure(파라미터를 변경하지 않음)한 함수여야 한다.
위 예제에서는 `),mo=e("code"),x3=t("Name"),R3=t(" 및 "),wo=e("code"),M3=t("Age"),S3=t(" 필드만 비교하여 "),Po=e("code"),L3=t("DateAdded"),G3=t(" 필드는 생략하였다."),bi=i(),Xn=e("p"),A3=t("이후 "),yo=e("code"),N3=t("cmp.Diff()"),B3=t("를 호출할 때 비교 함수를 마지막 파라미터로 함께 보내주면 된다."),_i=i(),yn=e("p"),Co=e("code"),g3=t("go-cmp"),H3=t("에 대한 간략한 사용법을 리뷰하였다. 추가적인 사용 예는 "),aa=e("a"),I3=t("문서"),F3=t("를 참고해보자!"),mi=i(),wi=e("br"),Pi=e("br"),yi=i(),Yn=e("h2"),Zn=e("a"),Do=e("span"),U3=t("Table Tests"),Ci=i(),Di=e("hr"),Ti=i(),hn=e("p"),j3=t(`일반적으로 함수가 올바르게 동작하는 지 확인하기 위해서는 하나 이상의 테스트케이스가 필요한 법이다.
테스트 함수를 여러 개 작성하거나, 동일한 테스트 함수 내에서 여러 번의 테스트를 수행할 수 있지만 테스트 로직은 대개 반복적이다.
데이터와 함수를 설정하고, 입력을 명시하고, 출력을 확인하고, 예측값과 실제 출력값을 비교하는 절차를 반복하는 것이다.
이런 코드를 반복하여 작성하는 것보단 `),To=e("em"),q3=t("table test"),W3=t("라 불리는 패턴을 사용하는 것이 좋을 수 있다."),Oi=i(),ns=e("p"),K3=t("가령, "),Oo=e("code"),Q3=t("table"),$3=t(" 패키지에서 아래와 같은 함수를 테스트한다고 가정해보자."),xi=i(),ta=e("pre"),Ri=i(),ut=e("p"),z3=t(`이런 함수를 테스트하려면 각각의 경우에 대해 입력을 집어넣어서 유효한 결과를 성공적으로 반환하는지, 또는 에러를 잘 반환하는지 등 확인해볼 필요가 있다.
테스트 코드를 아래와 같이 작성할 수도 있지만, 그야말로 쌩노가다이다..!`),Mi=i(),pa=e("pre"),Si=i(),it=e("p"),J3=t(`이러한 반복되는 코드를 table test로 교체해보자.
먼저, 익명 구조체의 slice를 선언한다. 이 구조체는 테스트명, 입력 파라미터, 반환값을 포함한다.
slice의 각 항목은 각각의 테스트 케이스를 의미한다.`),Li=i(),ea=e("pre"),Gi=i(),v=e("p"),V3=t("이제 "),xo=e("code"),X3=t("data"),Y3=t("에서 반복문을 돌며, 각 테스트 케이스별로 "),Ro=e("code"),Z3=t("*testing.T"),h3=t("의 "),Mo=e("code"),nv=t("Run()"),sv=t(` 메소드를 수행할 것이다.
`),So=e("code"),av=t("Run()"),tv=t("은 테스트 케이스의 이름과 "),Lo=e("code"),pv=t("*testing.T"),ev=t(` 단일 파라미터를 가진 함수를 파라미터로 받는다.
이 함수 안에서는 `),Go=e("code"),ov=t("DoMath()"),cv=t("를 호출하여 "),Ao=e("code"),lv=t("data"),uv=t(`의 각 필드값을 사용하여 반복적으로 테스트를 진행한다.
또한 테스트 명령어 입력시 `),No=e("code"),iv=t("-v"),rv=t(" 플래그를 주면 각 테스트케이스가 테스트명과 함께 출력된다."),Ai=i(),oa=e("pre"),Ni=i(),rt=e("blockquote"),sn=e("p"),kv=t("위 예제에서는 "),Bo=e("code"),fv=t("error"),dv=t("의 에러 메시지를 비교하여 예측 에러와 실제 에러를 비교하지만, 실제로는 "),go=e("code"),Ev=t("errors.Is()"),vv=t(" 또는 "),Ho=e("code"),bv=t("errors.As()"),_v=t("를 사용하여 에러를 검증하는 편이 더 이상적이다."),Bi=i(),gi=e("br"),Hi=e("br"),Ii=i(),ss=e("h2"),as=e("a"),Io=e("span"),mv=t("Code Coverage"),Fi=i(),kt=e("p"),wv=t("Code Coverage는 놓친 테스트 케이스를 찾아낼 수 있는 유용한 도구이다. 다만 100%의 Code Coverage라고 해서 코드가 어떠한 입력에 대해 버그를 일으키지 않으리라는 것을 의미하지는 않는다."),Ui=i(),ca=e("pre"),ji=i(),z=e("p"),Pv=t("위와 같이 "),Fo=e("code"),yv=t("go test"),Cv=t(" 명령어에 "),Uo=e("code"),Dv=t("-cover"),Tv=t(`플래그를 달면 Code Coverage를 계산할 수 있다.
또한 `),jo=e("code"),Ov=t("-coverprofile"),xv=t(" 플래그로 출력 파일명을 명시하면 coverage에 대한 정보를 파일로 저장할 수 있다."),qi=i(),la=e("pre"),Wi=i(),ft=e("p"),Rv=t("이처럼 coverage의 달성률을 보여주며, 파일은 아래와 같이 저장된다."),Ki=i(),ua=e("pre"),Qi=i(),dt=e("p"),Mv=t("마지막이 0으로 끝나는 라인이, 테스트 케이스에 의해 cover되지 않은 코드의 위치를 의미한다."),$i=i(),zi=e("br"),Ji=i(),ts=e("p"),Sv=t("이 방식도 충분히 좋지만, 조금 더 직관적인 도구가 "),qo=e("code"),Lv=t("cover"),Gv=t(`라는 도구이다. HTML로 coverage 정보를 소스코드와 함께 나타내주기 때문에 매우 직관적이다.
아래 명령어를 통해 실행해보자.`),Vi=i(),ia=e("pre"),Xi=i(),Et=e("p"),Av=t("명령어를 입력하면 브라우저가 열리고, 아래 사진처럼 보다 직관적으로 붉게 색칠된 영역의 코드를 통해 테스트 케이스에 의해 cover되지 않은 코드를 보여준다!"),Yi=i(),vt=e("p"),bt=e("img"),Zi=i(),_t=e("p"),Nv=t("단순한 인터페이스이다. 좌측 상단 콤보박스에 테스트된 파일의 목록이 나타나며, 회색/빨상색/초록색으로 코드가 cover되는지 여부를 나타낸다."),hi=i(),kn=e("p"),Bv=t("우리는 잘못된 연산자 기호를 입력 파라미터로 넘기는 테스트케이스를 작성하지 않았기 때문에, "),Wo=e("code"),gv=t("default"),Hv=t(" case가 cover되지 않았다. 만약 테스트 "),Ko=e("strong"),Iv=t("케이스"),Fv=t(" slice에 다음과 같은 항목을 추가한다면 문제가 해결될 것이다."),nr=i(),ra=e("pre"),sr=i(),mt=e("p"),Uv=t("추가하였다면 아래 명령어를 입력하여 재실행해보자."),ar=i(),ka=e("pre"),tr=i(),ps=e("p"),jv=t("이전에 cover되지 않았던 "),Qo=e("code"),qv=t("default"),Wv=t(" case가 통과한 것을 알 수 있을 것이다. 귀찮으니 사진은 생략해야지~"),pr=i(),wt=e("blockquote"),$o=e("p"),Kv=t("다시 한번 강조하지만, 100%의 Code Coverage라고 해서 코드에 버그가 없는 것이 아니니 Code Coverage만 철썩같이 믿는 일은 없도록 해야 한다..!"),er=i(),or=e("br"),cr=e("br"),lr=i(),es=e("h2"),os=e("a"),zo=e("span"),Qv=t("Benchmarks"),ur=i(),Pt=e("p"),$v=t(`작성된 코드가 얼마나 빠른지/느린지, 즉 성능을 판단하는 것은 매우 어려운 일이다.
이를 우리가 스스로 판단하기 보단 Go에서 제공하는 도구를 사용하는 것이 훨씬 좋을 것이다.`),ir=i(),yt=e("p"),zv=t("아래의 예제 함수를 보자."),rr=i(),fa=e("pre"),kr=i(),Ct=e("p"),Jv=t(`파일 내 문자의 수를 세는 간단한 함수로, 파일명과 파일로부터 읽어올 버퍼의 크기를 파라미터로 받는다.
당연히 버퍼의 크기에 따라 이터레이션을 도는 횟수가 달라질 테니, 버퍼 크기에 따라 성능 차이가 많이 날 것이다.`),fr=i(),Dt=e("p"),Vv=t("먼저, 함수가 문제 없이 잘 동작하는지 확인해보도록 하자"),dr=i(),da=e("pre"),Er=i(),Tt=e("p"),Xv=t(`랜덤 시드가 고정값이라, 아마 테스트에 통과하긴 할 것이다.
그리고 우리의 목표는, 최적의 버퍼 크기를 찾아내는 것이다.`),vr=i(),Ot=e("blockquote"),Jo=e("p"),Yv=t(`최적화를 하기 위해 긴 여정을 떠나기에 앞서, 진짜 최적화를 할 필요가 있는 것인지에 대해 검토하는 게 좋다.
가령, 프로그램이 이미 응답 속도나 메모리 요구사항을 충족하고 있다면 기능 추가나 버그 수정에 시간을 쓰는 게 낫다.
비즈니스 요구사항에 따라 응답 속도 및 메모리 요구사항이 정의된다.`),br=i(),_r=e("br"),mr=i(),N=e("p"),Zv=t("Go에서 벤치마크 함수를 작성하려면, 테스트 코드에서 "),Vo=e("code"),hv=t("Benchmark"),nb=t(`로 시작하는 함수 이름을 지어주면 된다.
또한 `),Xo=e("code"),sb=t("*testing.B"),ab=t(" 타입의 단일 파라미터를 받으며, "),Yo=e("code"),tb=t("*testing.B"),pb=t("는 벤치마킹 관련 기능과 함께 "),Zo=e("code"),eb=t("*testing.T"),ob=t("의 모든 기능을 포함한다."),wr=i(),xt=e("p"),cb=t("먼저, 버퍼 크기가 1 바이트인 경우의 벤치마크를 측정해보자."),Pr=i(),Ea=e("pre"),yr=i(),fn=e("p"),lb=t("위 코드에서 패키지 레벨 변수인 "),ho=e("code"),ub=t("blackhole"),ib=t(`을 사용하는 것이 다소 의아해 보인다.
책에서는 `),nc=e("code"),rb=t("FileLen()"),kb=t("을 반복 호출하는 과정에서 컴파일러가 알아서 최적화하는 것을 막기 위함이라고 하는 모양이다."),Cr=i(),cs=e("p"),fb=t("아무튼, Go의 벤치마크는 반드시 0부터 "),sc=e("code"),db=t("b.N"),Eb=t(`만큼의 이터레이션을 돌아야 한다.
테스트 프레임워크는 타이밍 결과가 정확할 때까지 N 값을 늘려가며 벤치마크 함수를 돌릴 것이다.
출력된 결과에 대해서는 조금 있다 확인할 것이다.`),Dr=i(),B=e("p"),vb=t("벤치마크를 돌리기 위해서는 "),ac=e("code"),bb=t("go test"),_b=t(" 명령어에 "),tc=e("code"),mb=t("-bench"),wb=t(` 플래그를 추가해주면 된다.
이 플래그는 실행하고자 하는 벤치마크의 이름을 표현하는 정규식을 받는다. `),pc=e("code"),Pb=t("-bench=."),yb=t(`와 같이 주면 모든 벤치마크를 실행한다.
한편 `),ec=e("code"),Cb=t("-benchmem"),Db=t(` 플래그를 추가하면 벤치마크 출력에 메모리 할당 관련 정보를 포함한다.
또한 벤치마크 이전에 테스트가 실행되므로, 테스트가 통과될 때만 코드를 벤치마크할 수 있다.`),Tr=i(),ls=e("p"),Tb=t("다음은 "),oc=e("code"),Ob=t("-benchmem"),xb=t(" 플래그를 활성화하여 명령어를 입력한 뒤, 출력된 결과를 확인해보자."),Or=i(),va=e("pre"),xr=i(),Rt=e("p"),Rb=t("각 정보는 다음과 같은 의미를 갖는다."),Rr=i(),g=e("ul"),Mt=e("li"),cc=e("code"),Mb=t("BenchmarkFileLen1-12"),Sb=t(": 벤치마크명-벤치마크의 GOMAXPROCS 값"),Lb=i(),St=e("li"),lc=e("code"),Gb=t("66"),Ab=t(": 안정적인 결과를 얻기 위해 실행한 테스트의 수"),Nb=i(),Lt=e("li"),uc=e("code"),Bb=t("17917232 ns/op"),gb=t(": 하나의 벤치마크를 통과하는 데 걸린 시간(나노초)"),Hb=i(),Gt=e("li"),ic=e("code"),Ib=t("129 B/op"),Fb=t(": 하나의 벤치마크를 통과하는데 할당된 바이트 수"),Ub=i(),At=e("li"),rc=e("code"),jb=t("4 allocs/op"),qb=t(": 하나의 벤치마크를 통과하는 동안 힙에서 바이트를 할당한 횟수 (할당된 바이트 수보다 작거나 같음)"),Mr=i(),Sr=e("br"),Lr=i(),Nt=e("p"),Wb=t("이제 1 바이트 말고, 버퍼 크기를 키워서 벤치마크를 돌려보자."),Gr=i(),ba=e("pre"),Ar=i(),Cn=e("p"),kc=e("code"),Kb=t("t.Run()"),Qb=t("을 통해 table test를 하던 것처럼, "),fc=e("code"),$b=t("b.Run()"),zb=t(`으로 여러 입력의 벤치마크를 실행할 수 있다.
다음과 같은 결과를 얻었다.`),Nr=i(),_a=e("pre"),Br=i(),Bt=e("p"),Jb=t(`어느 정도 충분히 예상할 수 있는 결과였다.
버퍼의 크기를 늘릴 수록 메모리 할당 회수가 적어지니 코드가 빠르게 돌아간다. 한편 버퍼의 크기가 파일의 크기에 비해 커지면 불필요한 할당이 생겨 결과가 느려진다. 위 예제에서는 10000 바이트의 버퍼가 최적의 크기임을 알 수 있다.
또한, 성능을 높이려면 메모리를 많이 써야 하고, 메모리를 적게 쓰려면 성능을 포기해야 하는 trade-off에 대해서도 확인할 수 있다.`),gr=i(),gt=e("blockquote"),ma=e("p"),Vb=t(`벤치마킹을 통해 성능 및 메모리 문제를 발견했다면, 다음 단계는 문제가 정확히 무엇인지 파악하는 것이다.
Go에는 프로그램의 CPU 및 메모리 사용량 데이터를 수집하는 프로파일링 및 시각화 도구가 포함되어 있다.
이에 대한 내용은 `),wa=e("a"),Xb=t("여기"),Yb=t("를 참고하면 좋을 것 같다."),Hr=i(),Ir=e("br"),Fr=e("br"),Ur=i(),us=e("h2"),is=e("a"),dc=e("span"),Zb=t("Stubs"),jr=i(),Ht=e("p"),hb=t("지금까지 우리가 작성한 테스트는 다른 코드에 의존하지 않는 함수에 대한 테스트였다. 하지만 대부분의 코드는 의존성으로 가득하다!"),qr=i(),It=e("p"),n5=t(`Go에서는 함수 호출을 추상화하는 두 가지 방법이 있는데, 바로 함수 타입을 정의하는 것과 인터페이스를 정의하는 것이다.
이러한 추상화는 프로덕션 코드를 모듈화함으로써 유닛 테스트를 수월하게 할 수 있게끔 해준다.`),Wr=i(),Ft=e("p"),s5=t("아래의 예제를 살펴보자."),Kr=i(),Pa=e("pre"),Qr=i(),an=e("p"),Ec=e("code"),a5=t("Processor"),t5=t("라는 구조체 타입과 "),vc=e("code"),p5=t("MathSolver"),e5=t("라는 인터페이스 타입을 작성하였다. "),bc=e("code"),o5=t("MathSolver"),c5=t("의 구현체는 추후 작성할 것이다."),$r=i(),tn=e("p"),_c=e("code"),l5=t("Processor"),u5=t("는 "),mc=e("code"),i5=t("io.Reader"),r5=t("로부터 표현식을 읽어 계산된 값을 반환하는 메소드 "),wc=e("code"),k5=t("ProcessExpression()"),f5=t("를 가지고 있다."),zr=i(),ya=e("pre"),Jr=i(),Dn=e("p"),Pc=e("code"),d5=t("ProcessExpression()"),E5=t(`을 테스트하기 위한 코드를 작성해보자.
먼저, 필요한 것은 `),yc=e("code"),v5=t("Reslove()"),b5=t(" 메소드를 충족시키는 간단한 Stub을 정의하는 것이다."),Vr=i(),Ca=e("pre"),Xr=i(),Ut=e("p"),_5=t("다음으로, 이 Stub을 사용하는 유닛 테스트를 작성하는 것이다. 실제로는 에러 메시지에 대한 검증까지도 해야 하지만, 테스트의 간소화를 위해 생략하였다."),Yr=i(),Da=e("pre"),Zr=i(),jt=e("p"),m5=t("이렇게 작성한 코드에 대해 테스트를 돌려 보면, 잘 동작함을 확인할 수 있다."),hr=i(),nk=e("br"),sk=i(),qt=e("p"),w5=t(`대부분의 Go의 인터페이스는 1개 내지는 2개 정도의 메소드만을 명시하지만, 가끔은 그 이상의 많은 메소드를 가진 인터페이스를 작성하게 될 떄도 있을 것이다.
가령, 아래와 같은 인터페이스가 있다고 해보자.`),ak=i(),Ta=e("pre"),tk=i(),Wt=e("p"),P5=t("이렇게 거대한 인터페이스의 테스트 코드를 작성하는 방법은 크게 두 가지 패턴이 있다."),pk=i(),Kt=e("p"),y5=t(`하나는 구조체에 인터페이스를 임베드하는 것이다.
인터페이스를 구조체에 임베딩하면 자동으로 인터페이스의 모든 메소드가 구조체에서 정의된다.
다만 메소드에 대한 구현이 되는 것까진 아니기 때문에, 현재 테스트에서 사용할 메소드는 구현해주어야 한다.`),ek=i(),Oa=e("pre"),ok=i(),_=e("p"),C5=t("위와 같이, "),Cc=e("code"),D5=t("Entities"),T5=t("를 필드로 갖는 구조체 "),Dc=e("code"),O5=t("Logic"),x5=t("과 테스트하고자 하는 메소드인 "),Tc=e("code"),R5=t("GetPetNames()"),M5=t(`를 작성하였다.
이 메소드에서는 `),Oc=e("code"),S5=t("Entities"),L5=t("의 "),xc=e("code"),G5=t("GetPets()"),A5=t(` 메소드 하나밖에 사용하지 않는다.
따라서 `),Rc=e("code"),N5=t("Entities"),B5=t("의 모든 메소드에 대한 Stub을 만들어주기 보단, "),Mc=e("code"),g5=t("GetPets()"),H5=t("의 Stub만 만들어주는 게 편할 것이다."),ck=i(),dn=e("p"),I5=t("아래처럼, "),Sc=e("code"),F5=t("Entities"),U5=t("를 임베딩하는 구조체를 만들고, "),Lc=e("code"),j5=t("GetPets()"),q5=t("의 Stub을 만들어보자."),lk=i(),xa=e("pre"),uk=i(),F=e("p"),Gc=e("code"),W5=t("GetPetNamesStub"),K5=t("에서 "),Ac=e("code"),Q5=t("GetPets()"),$5=t("를 제외한 다른 메소드들은 구현되지 않긴 하지만 정의는 되어 있으므로 "),Nc=e("code"),z5=t("Entities"),J5=t(`를 충족시킨다.
따라서 위처럼 `),Bc=e("code"),V5=t("GetPets()"),X5=t("만 작성해도 된다."),ik=i(),rs=e("p"),Y5=t("이제 "),gc=e("code"),Z5=t("GetPetNames()"),h5=t("의 유닛 테스트를 작성할 수 있다. 테스트 코드를 작성해보자!"),rk=i(),Ra=e("pre"),kk=i(),w=e("p"),n0=t("이대로 "),Hc=e("code"),s0=t("go test"),a0=t("를 실행하면 아마 "),Ic=e("code"),t0=t("case1"),p0=t(", "),Fc=e("code"),e0=t("case2"),o0=t("에서 테스트를 통과하지 못할 텐데, "),Uc=e("code"),c0=t("GetPetNames()"),l0=t("에 작은 버그가 있어서 그렇다. 에러를 해결하고 나면 "),jc=e("code"),u0=t("case1"),i0=t(", "),qc=e("code"),r0=t("case2"),k0=t("를 통과하는 것을 볼 수 있을 것이다."),fk=i(),Qt=e("p"),f0=t("이처럼 인터페이스를 구조체에 임베드하여 사용하는 경우, 구현하지 않은 메소드를 호출해선 안된다. 아마 테스트 중 panic이 발생할 것이다! 따라서 인터페이스의 메소드 중, 테스트하는 함수에서 사용되는 것은 반드시 구현해줘야 한다."),dk=i(),Ek=e("br"),vk=i(),$t=e("p"),d0=t(`인터페이스에서 1~2개 정도의 메소드를 구현하는 것은 단일 테스트에서는 별 문제가 없다.
하지만 입/출력이 다른 여러 테스트에서 동일한 메소드를 호출해야 할 때 문제가 발생할 수 있다.
이런 경우, 모든 테스트에 대해 가능한 모든 결과를 구현체 내에 포함하거나, 각 테스트에 대해 구현체를 다시 작성해야 한다.
이러한 구현체는 이해하거나 유지보수하기 매우 어려울 것이다.`),bk=i(),ks=e("p"),E0=t(`더 좋은 방식은 함수 필드를 통해 우회하여 메소를 호출하는 Stub 구조체를 만드는 것이다.
`),Wc=e("code"),v0=t("Entities"),b0=t("에 정의된 각 메소드와 일치하게끔, Stub 구조체의 함수 필드를 정의해준다."),_k=i(),Ma=e("pre"),mk=i(),Tn=e("p"),Kc=e("code"),_0=t("EntitiesStub"),m0=t("에 함수 필드를 정의하고, "),Qc=e("code"),w0=t("Entities"),P0=t(` 인터페이스를 충족시키게끔 메소드를 정의해준다.
각각의 메소드에서는 대응되는 함수 필드를 호출한다.`),wk=i(),Sa=e("pre"),Pk=i(),M=e("p"),y0=t(`위 예제의 Table test에서는 ‘data’ 구조체에 함수 필드를 추가해주었으며, getPets를 호출했을 때 반환할 데이터를 이 함수 필드에 명시할 수 있다.
이와 같이 Stub을 작성하는 경우, 각 테스트 케이스에서 Stub이 반환해야 하는 값이 확실하다는 장점이 있다.
각 테스트마다 새로운 `),$c=e("code"),C0=t("EntitiesStub"),D0=t(" 인스턴스가 생성되고, "),zc=e("code"),T0=t("EntitiesStub"),O0=t("의 함수 필드인 "),Jc=e("code"),x0=t("getPets()"),R0=t("에는 "),Vc=e("code"),M0=t("data"),S0=t("에 명시된 함수 필드가 할당되므로, 직접 작성한 테스트 데이터로 "),Xc=e("code"),L0=t("GetPetNames()"),G0=t("를 테스트할 수 있다."),yk=i(),fs=e("blockquote"),Yc=e("p"),A0=t(`Mock과 Stub은 자주 혼용되는 단어이지만 실제로는 서로 다른 개념이다.
요약하자면 Stub은 주어진 입력에 대한 출력값을 검사하는 것이라면, Mock은 주어진 입력에 대해 일련의 호출이 예상된 순서로 발생하는지 검사하는 것이다.`),N0=i(),On=e("p"),B0=t(`본 장에서 Stub 코드를 작성하였듯, Mock 관련 코드도 작성할 수 있다.
가장 유명한 Mock 괸련 라이브러리는 구글의 `),La=e("a"),g0=t("gomock"),H0=t("과 Stretchr사의 "),Ga=e("a"),I0=t("testify"),F0=t(`이다.
후자가 github star 수는 더 높다!`),Ck=i(),Dk=e("br"),Tk=e("br"),Ok=i(),ds=e("h2"),Es=e("a"),Zc=e("span"),U0=t("httptest"),xk=i(),vs=e("p"),j0=t(`HTTP 서비스를 호출하는 함수의 테스트 코드를 작성하는 것은 쉽지 않다.
보통 이런 경우 Integration test가 되며, 함수가 호출하는 서비스의 테스트 인스턴스를 준비해야 했다.
하지만 Go는 표준 라이브러리에 `),hc=e("code"),q0=t("net/http/httptest"),W0=t(" 패키지를 포함하고 있으며, 덕분에 HTTP 서비스의 stub을 작성하기가 굉장히 쉽다."),Rk=i(),Aa=e("p"),nl=e("code"),K0=t("solver"),Q0=t(" 패키지로 되돌아가서, 표현식을 평가하기 위해 HTTP 서비스를 호출하는 MathSolver의 구현체를 작성해보자."),Mk=i(),Na=e("pre"),Sk=i(),J=e("p"),$0=t("이제, "),sl=e("code"),z0=t("httptest"),J0=t(` 라이브러리를 사용하여 서버를 구축하지 않고 이 코드를 테스트할 것이다.
먼저, 함수로 전달된 데이터가 서버에 도착하는지 확인해야 한다.
따라서 테스트 함수 안에서 입력과 출력을 저장할 `),al=e("code"),V0=t("info"),X0=t("라고 하는 타입을 선언하고, 현재 입출력이 할당될 "),tl=e("code"),Y0=t("io"),Z0=t("라는 변수를 정의한다."),Lk=i(),Ba=e("pre"),Gk=i(),bs=e("p"),h0=t("다음으로, 가짜 원격 서버를 구축하고 이를 사용하여 "),pl=e("code"),n_=t("RemoteSolver"),s_=t(" 인스턴스를 구성한다."),Ak=i(),ga=e("pre"),Nk=i(),D=e("p"),el=e("code"),a_=t("httptest.NewServer()"),t_=t(" 함수는 사용되지 않는 무작위 포트에 http 서버를 열며, 요청을 처리하기 위한 "),ol=e("code"),p_=t("http.Handler"),e_=t(` 구현체를 설정해주어야 한다.
이것은 서버이기 때문에 테스트가 끝나면 닫아줘야 한다. 위 예제에서는 `),cl=e("code"),o_=t("defer"),c_=t("를 통해 close한다. 그리고 "),ll=e("code"),l_=t("URL"),u_=t("과 "),ul=e("code"),i_=t("http.Client"),r_=t("를 "),il=e("code"),k_=t("RemoteSolver"),f_=t("에 전달한다."),Bk=i(),zt=e("p"),d_=t("이렇게 셋업하고 나면, 테스트 함수의 나머지 부분은 다른 Table test와 크게 다를 바 없다."),gk=i(),Ha=e("pre"),Hk=i(),_s=e("p"),E_=t("위 코드에서 변수 "),rl=e("code"),v_=t("io"),b_=t(`는 Stub 서버용과 테스트 함수 양쪽에서 Closure에 의해 캡처된다.
테스트 코드 쪽에서 write, Stub 쪽에서 read가 일어나는데, 이와 같은 방식은 이러한 테스트 코드라면 몰라도 프로덕션 코드에서는 지양해야 한다.`),Ik=i(),Fk=e("br"),Uk=e("br"),jk=i(),ms=e("h2"),ws=e("a"),kl=e("span"),__=t("Integration Test"),qk=i(),Ia=e("p"),fl=e("code"),m_=t("httptest"),w_=t(" 등을 쓰면 외부 서비스에 대한 테스트를 생략할 수 있지만, Integration Test를 작성해야 할 때가 올 것이며, 이를 통해 서비스 API에 대한 이해가 올바른지 확인할 수 있을 것이다."),Wk=i(),Jt=e("p"),P_=t(`문제는 자동화된 테스트를 그룹화하는 방법을 찾는 것이다.
적랍한 환경이 있는 경우에만 Integration Test를 실행해야 할 것이며, 일반적으로 Integration Test는 Unit Test보다 느리기 때문에 자주 실행하진 않을 것이다.`),Kk=i(),En=e("p"),y_=t("Go의 컴파일러는 코드를 컴파일할 때 "),dl=e("em"),C_=t("build tag"),D_=t(`를 사용할 수 있게 해준다.
빌드 태그는 파일의 첫 번째 줄에 `),El=e("code"),T_=t("// +build"),O_=t(`로 시작하는 주석을 달아서 지정할 수 있다.
빌드 태그의 원래 의도는 서로 다른 코드가 다른 플랫폼에서 컴파일될 수 있게끔 하기 위한 것이지만, 테스트 그룹을 나눌 때도 유용하다.
빌드 태그가 없는 파일의 테스트는 항상 실행되며, 이들은 외부 리소스에 의존하지 않는 Unit test이다.
반면 빌드 태그가 있는 테스트는 필요한 리소스가 있을 때만 실행된다.`),Qk=i(),Vt=e("p"),x_=t(`solver 패키지로 돌아와서, Integration Test를 작성할 것이다.
그 이전에 다음과 같은 Docker 명령어를 쳐서 서버 이미지를 다운받고, 8080 포트로 로컬 서버를 열어보자.`),$k=i(),Fa=e("pre"),zk=i(),Xt=e("p"),R_=t("이제 Resolve 메소드가 서버와 잘 통신하는지 테스트하는 Integration Test를 작성해볼 것이다."),Jk=i(),Ua=e("pre"),Vk=i(),Ps=e("p"),M_=t("파일의 맨 처음 부분은 "),vl=e("code"),S_=t("// +build integration"),L_=t("로 시작하며, 다른 부분은 이전에 작성하였던 table test와 크게 다르지 않다!"),Xk=i(),Yt=e("p"),G_=t("이렇게, 빌드 태그를 지정한 테스트를 실행하려면 다음과 같이 명령어를 실행하면 된다."),Yk=i(),ja=e("pre"),Zk=i(),xn=e("p"),bl=e("code"),A_=t("-v"),N_=t(` 플래그로 인해 어떤 테스트가 실행되었나 확인할 수 있을 것이다.
앞서 설명하였듯, 테스트 태그를 지정하지 않은 테스트들도 `),_l=e("code"),B_=t("integration"),g_=t(" 태그의 테스트와 함께 모두 실행된 것을 확인할 수 있다."),hk=i(),ys=e("blockquote"),Cs=e("p"),ml=e("code"),H_=t("go test"),I_=t("에는 "),wl=e("code"),F_=t("-short"),U_=t(` 플래그를 통해 테스트 시간이 오래 소요되는 항목을 생략할 수 있는 기능이 있다.
다만 short flag를 사용하면 안된다는 목소리도 있고, 좀 의견이 분분한 모양이다.`),j_=i(),qa=e("p"),q_=t("short flag에 대해 알고 싶다면 "),Wa=e("a"),W_=t("여기"),K_=t("를 참고하자."),nf=i(),sf=e("br"),af=e("br"),tf=i(),Ds=e("h2"),Ts=e("a"),Pl=e("span"),Q_=t("Race Checker"),pf=i(),Os=e("p"),$_=t(`동시성 문제를 해결하기 위해 Go에서는 여러 가지 지원을 해주지만, 버그는 여전히 발생할 수 있다.
이를테면 서로 다른 고루틴이 lock 없이 하나의 변수에 접근하는 일은 충분히 발생할 수 있는 일이다.
이러한 상황을 `),yl=e("em"),z_=t("data race"),J_=t("라고 한다."),ef=i(),xs=e("p"),V_=t("Go에서는 "),Cl=e("em"),X_=t("Race Checker"),Y_=t(`를 통해 이러한 버그를 찾아내는 데 도움을 받을 수 있다.
코드에서 모든 data race를 찾아낸다고 보장하지는 않지만, data race를 찾을 경우 찾은 데이터에 적절한 lock을 설정해줘야 한다.`),of=i(),Zt=e("p"),Z_=t("다음의 예제를 살펴보자."),cf=i(),Ka=e("pre"),lf=i(),Rs=e("p"),h_=t("만약 race condition을 배제한다면, "),Dl=e("code"),n4=t("getCounter()"),s4=t("의 반환값은 5000일 것이다. 하지만 race condition때문에 현실은 그렇지가 않다. 테스트 함수를 작성해보자."),uf=i(),Qa=e("pre"),rf=i(),Ms=e("p"),a4=t(`간단한 테스트 함수이다. 출력된 결과가 예상값인 5000인지 아닌지만 테스트해주고 있다.
`),Tl=e("code"),t4=t("go test"),p4=t("를 입력하여 테스트를 수행하면,"),kf=i(),$a=e("pre"),ff=i(),ht=e("p"),e4=t("테스트를 통과할 때도 있지만, 가끔 이렇게 결과가 5000이 아닐 때가 있다!"),df=i(),vn=e("p"),o4=t("공유된 변수 "),Ol=e("code"),c4=t("counter"),l4=t(`에 접근하여 값을 증가시키는 과정에서, data race로 인해 변수의 값 갱신이 누락되는 현상이 생기는 것이다.
아주 간단한 예제를 소개했지만, 실제로 코드에서는 data race를 유발하는 원인을 훨씬 찾기 힘들 것이다.
그만큼 `),xl=e("em"),u4=t("Race Checker"),i4=t("가 상당히 유용하게 사용될 수 있다!"),Ef=i(),pn=e("p"),Rl=e("em"),r4=t("Race Checker"),k4=t("를 사용하려면 "),Ml=e("code"),f4=t("go test"),d4=t(" 명령어에 "),Sl=e("code"),E4=t("-race"),v4=t(" 플래그를 붙이면 된다."),vf=i(),za=e("pre"),bf=i(),np=e("p"),b4=t("이처럼 race condition을 유발하는 코드 라인, 고루틴이 생성된 라인 등을 추적해준다."),_f=i(),mf=e("br"),wf=i(),bn=e("p"),_4=t("프로그램을 빌드할 때도 "),Ll=e("code"),m4=t("-race"),w4=t(" 플래그를 붙여서 race checker를 실행할 수 있다. 이렇게 하면 빌드 이전에 테스트를 거치지 않고도 data race를 추적해볼 수 있다. 다만 "),Gl=e("code"),P4=t("-race"),y4=t(" 플래그가 붙은 채로 빌드된 바이너리는 속도가 매우 느리기 때문에, 프로덕션 코드에서는 절대 권장되지 않는다."),Pf=i(),yf=e("br"),Cf=e("br"),Df=i(),Ss=e("h2"),Ls=e("a"),Al=e("span"),C4=t("References"),Tf=i(),Of=e("hr"),xf=i(),sp=e("center"),Rn=e("p"),Ja=e("a"),ap=e("img"),D4=i(),T4=e("br"),O4=i(),Va=e("a"),x4=t("Jon Bodner, 『Learning Go』, O’Reilly Media, Inc."),Rf=i(),Mf=e("br"),Sf=e("br"),this.h()},l(n){st=o(n,"BR",{}),jl=r(n),at=o(n,"P",{});var l=c(at);t1=p(l,"본 글은 Golang을 공부하며 주요 내용이라 생각되는 것들을 기록해둔 자료이며, Ubuntu 22.04 LTS 기준으로 작성되었습니다."),l.forEach(s),ql=r(n),Wl=o(n,"BR",{}),Kl=o(n,"BR",{}),Ql=r(n),Ln=o(n,"H2",{id:!0});var R4=c(Ln);Gn=o(R4,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var nm=c(Gn);Ep=o(nm,"SPAN",{class:!0}),c(Ep).forEach(s),nm.forEach(s),p1=p(R4,"Introduction"),R4.forEach(s),$l=r(n),zl=o(n,"HR",{}),Jl=r(n),tt=o(n,"P",{});var sm=c(tt);e1=p(sm,"정말 오랜만에 Golang 포스팅을 다시 하게 되었다. 학업에 치이다 보니 잠시 Golang을 멀리 했었는데, 오랜만에 쓰려니 어디까지 했었는지 감이 잘 안온다. 기존에 내가 썼던 글 다시 보고 최대한 감을 되찾아 써보려 한다."),sm.forEach(s),Vl=r(n),Xl=o(n,"BR",{}),Yl=r(n),pt=o(n,"P",{});var am=c(pt);o1=p(am,`지난 20년간 테스트의 자동화는 코드 품질을 향상시키는 데 지대한 공헌을 했다.
Go에서 표준 라이브러리로 테스트에 관련된 기능을 포함하는 것은 그리 놀라운 일이 아니다.
게다가 아주 쉽기 때문에, 테스트를 기피할 변명거리도 없을 것이다.
이번 챕터에서는 우리가 작성한 Go 코드를 테스트하고, 테스트를 unit test 및 integration test로 묶고, 코드 커버리지를 평가하고, 벤치마크를 작성하고, race checker를 이용하여 코드에서 동시성 문제를 확인하는 방법을 알아볼 것이다.
이를 위해 테스트 가능한 코드를 작성하는 방법과, 이를 통해 코드 품질이 향상되는 이유에 대해 알아볼 것이다.`),am.forEach(s),Zl=r(n),hl=o(n,"BR",{}),nu=o(n,"BR",{}),su=r(n),An=o(n,"H2",{id:!0});var M4=c(An);Nn=o(M4,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var tm=c(Nn);vp=o(tm,"SPAN",{class:!0}),c(vp).forEach(s),tm.forEach(s),c1=p(M4,"The Basics of Testing"),M4.forEach(s),au=r(n),tu=o(n,"HR",{}),pu=r(n),q=o(n,"P",{});var Gs=c(q);l1=p(Gs,`Go의 테스트는 라이브러리와 도구로 나뉜다.
표준 라이브러리의 `),bp=o(Gs,"CODE",{});var pm=c(bp);u1=p(pm,"testing"),pm.forEach(s),i1=p(Gs,` 패키지는 테스트를 작성하기 위한 타입과 함수를 제공한다.
한편 Go와 함께 번들로 제공되는 `),_p=o(Gs,"CODE",{});var em=c(_p);r1=p(em,"gotest"),em.forEach(s),k1=p(Gs,`라는 도구는 테스트를 실행하고 보고를 생성한다.
다른 언어와는 달리 Go의 테스트는 프로덕션 코드와 같은 디렉토리 및 같은 패키지에 배치한다.
테스트가 같은 패키지에 위치하기 때문에, export되지 않은 함수나 변수에 액세스하여 테스트할 `),mp=o(Gs,"STRONG",{});var om=c(mp);f1=p(om,"수"),om.forEach(s),d1=p(Gs,` 있다.
또한 이후에는 공개된 API만을 테스트하는 방법에 대해서도 알아볼 것이다.`),Gs.forEach(s),eu=r(n),et=o(n,"P",{});var cm=c(et);E1=p(cm,"먼저, 간단한 함수를 작성해 보자."),cm.forEach(s),ou=r(n),Us=o(n,"PRE",{class:!0});var _P=c(Us);_P.forEach(s),cu=r(n),ot=o(n,"P",{});var lm=c(ot);v1=p(lm,"또한, 이에 대응하는 테스트 코드도 작성해준다."),lm.forEach(s),lu=r(n),js=o(n,"PRE",{class:!0});var mP=c(js);mP.forEach(s),uu=r(n),W=o(n,"P",{});var As=c(W);b1=p(As,"모든 테스트는 "),wp=o(As,"EM",{});var um=c(wp);_1=p(um,"_test.go"),um.forEach(s),m1=p(As,`로 끝나는 이름을 가진 파일에 작성된다.
만약 `),Pp=o(As,"EM",{});var im=c(Pp);w1=p(im,"foo.go"),im.forEach(s),P1=p(As," 파일에 대한 테스트를 하고자 한다면, 테스트는 "),yp=o(As,"EM",{});var rm=c(yp);y1=p(rm,"foo_test.go"),rm.forEach(s),C1=p(As,"라는 파일에 작성되어야 할 것이다."),As.forEach(s),iu=r(n),O=o(n,"P",{});var V=c(O);D1=p(V,"테스트 함수는 "),Cp=o(V,"CODE",{});var km=c(Cp);T1=p(km,"Test"),km.forEach(s),O1=p(V,"로 시작하며, "),Dp=o(V,"CODE",{});var fm=c(Dp);x1=p(fm,"*testing.T"),fm.forEach(s),R1=p(V," 타입의 단일 파라미터를 받는다. 보통 이 파라미터의 이름은 "),Tp=o(V,"CODE",{});var dm=c(Tp);M1=p(dm,"t"),dm.forEach(s),S1=p(V,`로 한다. 함수는 아무 것도 반환하지 않는다.
테스트의 이름은 그 대상을 문서화하기 위한 것이기 때문에, 테스트할 대상을 잘 설명할 수 있도록 지어주어야 한다.
함수에 대한 unit test를 작성할 때는 `),Op=o(V,"CODE",{});var Em=c(Op);L1=p(Em,"Test"),Em.forEach(s),G1=p(V,` 다음에 함수 이름을 넣는 것이 일반적이다.
만약 export되지 않은 함수에 대한 테스트라면 `),xp=o(V,"CODE",{});var vm=c(xp);A1=p(vm,"Test"),vm.forEach(s),N1=p(V,"와 함수 이름 사이에 언더바(_)를 넣기도 한다."),V.forEach(s),ru=r(n),cn=o(n,"P",{});var tp=c(cn);B1=p(tp,`또한, 표준 Go 코드를 사용하여 테스트 중인 코드를 호출하고 응답이 예상대로 이루어지는지 확인한다.
만약 결과가 옳지 않다면, `),Rp=o(tp,"CODE",{});var bm=c(Rp);g1=p(bm,"fmt.Print()"),bm.forEach(s),H1=p(tp,"와 유사하게 동작하는 "),Mp=o(tp,"CODE",{});var _m=c(Mp);I1=p(_m,"t.Error()"),_m.forEach(s),F1=p(tp," 메소드를 통해 에러 보고를 만든다. 다른 에러 보고 메소드에 대해서도 차차 살펴볼 것이다."),tp.forEach(s),ku=r(n),K=o(n,"P",{});var Ns=c(K);U1=p(Ns,"바이너리를 빌드할 때 "),Sp=o(Ns,"CODE",{});var mm=c(Sp);j1=p(mm,"go build"),mm.forEach(s),q1=p(Ns,", 실행할 때 "),Lp=o(Ns,"CODE",{});var wm=c(Lp);W1=p(wm,"go run"),wm.forEach(s),K1=p(Ns," 명령어를 치듯, 테스트 할 때는 "),Gp=o(Ns,"CODE",{});var Pm=c(Gp);Q1=p(Pm,"go test"),Pm.forEach(s),$1=p(Ns,"를 치면 된다."),Ns.forEach(s),fu=r(n),qs=o(n,"PRE",{class:!0});var wP=c(qs);wP.forEach(s),du=r(n),Q=o(n,"P",{});var Bs=c(Q);z1=p(Bs,`이렇듯 테스트가 성공하지 못했음을 확인하였다. 우리가 작성한 함수에서 버그를 찾아 고쳐주자.
`),Ap=o(Bs,"CODE",{});var ym=c(Ap);J1=p(ym,"return x + x"),ym.forEach(s),V1=p(Bs,"를 "),Np=o(Bs,"CODE",{});var Cm=c(Np);X1=p(Cm,"return x + y"),Cm.forEach(s),Y1=p(Bs,"로 고쳐주고 다시 "),Bp=o(Bs,"CODE",{});var Dm=c(Bp);Z1=p(Dm,"go test"),Dm.forEach(s),h1=p(Bs,"를 실행하면 테스트가 성공적으로 끝남을 확인할 수 있다."),Bs.forEach(s),Eu=r(n),Ws=o(n,"PRE",{class:!0});var PP=c(Ws);PP.forEach(s),vu=r(n),h=o(n,"P",{});var Xa=c(h);gp=o(Xa,"CODE",{});var Tm=c(gp);n2=p(Tm,"go test"),Tm.forEach(s),s2=p(Xa,` 명령어는 어떤 패키지에서 테스트를 진행할 지 명시할 수 있다.
`),Hp=o(Xa,"CODE",{});var Om=c(Hp);a2=p(Om,"./..."),Om.forEach(s),t2=p(Xa,`를 붙이면 현재 디렉토리와 모든 하위 디렉토리에 대해서 테스트를 진행한다.
`),Ip=o(Xa,"CODE",{});var xm=c(Ip);p2=p(xm,"-v"),xm.forEach(s),e2=p(Xa," 플래그가 있으면 verbose output을 출력한다."),Xa.forEach(s),bu=r(n),_u=o(n,"BR",{}),mu=o(n,"BR",{}),wu=r(n),Bn=o(n,"H3",{id:!0});var S4=c(Bn);gn=o(S4,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Rm=c(gn);Fp=o(Rm,"SPAN",{class:!0}),c(Fp).forEach(s),Rm.forEach(s),o2=p(S4,"Reporting Test Failures"),S4.forEach(s),Pu=r(n),L=o(n,"P",{});var en=c(L);Up=o(en,"CODE",{});var Mm=c(Up);c2=p(Mm,"*testing.T"),Mm.forEach(s),l2=p(en,`에는 테스트 실패를 보고하기 위한 몇 개의 메소드가 있다.
`),jp=o(en,"CODE",{});var Sm=c(jp);u2=p(Sm,"fmt.Print()"),Sm.forEach(s),i2=p(en,"와 유사한 "),qp=o(en,"CODE",{});var Lm=c(qp);r2=p(Lm,"Error()"),Lm.forEach(s),k2=p(en,"가 있듯, 포매팅을 할 수 있는 "),Wp=o(en,"CODE",{});var Gm=c(Wp);f2=p(Gm,"fmt.Printf()"),Gm.forEach(s),d2=p(en,"와 유사한 형태의 "),Kp=o(en,"CODE",{});var Am=c(Kp);E2=p(Am,"Errorf()"),Am.forEach(s),v2=p(en,"가 존재한다."),en.forEach(s),yu=r(n),Ks=o(n,"PRE",{class:!0});var yP=c(Ks);yP.forEach(s),Cu=r(n),b=o(n,"P",{});var T=c(b);Qp=o(T,"CODE",{});var Nm=c(Qp);b2=p(Nm,"Error()"),Nm.forEach(s),_2=p(T,"나 "),$p=o(T,"CODE",{});var Bm=c($p);m2=p(Bm,"Errorf()"),Bm.forEach(s),w2=p(T,`는 테스트가 실패했음을 명시하기 위해 사용되지만, 테스트되는 함수의 코루틴은 계속해서 실행된다.
만약 테스트가 실패하면 그 이상의 처리를 멈춰야 한다고 생각한다면 `),zp=o(T,"CODE",{});var gm=c(zp);P2=p(gm,"Fatal()"),gm.forEach(s),y2=p(T," 및 "),Jp=o(T,"CODE",{});var Hm=c(Jp);C2=p(Hm,"Fatalf()"),Hm.forEach(s),D2=p(T," 메소드를 사용하면 된다. "),Vp=o(T,"CODE",{});var Im=c(Vp);T2=p(Im,"Fatal()"),Im.forEach(s),O2=p(T,"은 "),Xp=o(T,"CODE",{});var Fm=c(Xp);x2=p(Fm,"Error()"),Fm.forEach(s),R2=p(T,"와, "),Yp=o(T,"CODE",{});var Um=c(Yp);M2=p(Um,"Fatalf()"),Um.forEach(s),S2=p(T,"는 "),Zp=o(T,"CODE",{});var jm=c(Zp);L2=p(jm,"Errorf()"),jm.forEach(s),G2=p(T,`와 유사하다.
이들의 차이점은 테스트 실패 메시지가 생성되자마자 테스트 함수가 즉시 종료된다는 점이다.
다만 모든 테스트가 종료되는 것이 아니라, 현재 진행중인 테스트만 종료되는 것이다. 다른 나머지 테스트는 이후에 계속 진행된다.`),T.forEach(s),Du=r(n),E=o(n,"P",{});var P=c(E);A2=p(P,"언제 "),hp=o(P,"CODE",{});var qm=c(hp);N2=p(qm,"Error()"),qm.forEach(s),B2=p(P,"/"),ne=o(P,"CODE",{});var Wm=c(ne);g2=p(Wm,"Errorf()"),Wm.forEach(s),H2=p(P,"를, 그리고 언제 "),se=o(P,"CODE",{});var Km=c(se);I2=p(Km,"Fatal()"),Km.forEach(s),F2=p(P,"/"),ae=o(P,"CODE",{});var Qm=c(ae);U2=p(Qm,"Fatalf()"),Qm.forEach(s),j2=p(P,`를 써야 할까?
만일 테스트 실패로 인해 동일한 테스트 함수의 이후 테스트가 항상 실패하거나, 테스트가 panic 상태에 빠지는 경우 `),te=o(P,"CODE",{});var $m=c(te);q2=p($m,"Fatal()"),$m.forEach(s),W2=p(P,"/"),pe=o(P,"CODE",{});var zm=c(pe);K2=p(zm,"Fatalf()"),zm.forEach(s),Q2=p(P,`를 사용한다.
만약 여러 개의 서로 다른 항목에 대해 테스트하는 경우 `),ee=o(P,"CODE",{});var Jm=c(ee);$2=p(Jm,"Error()"),Jm.forEach(s),z2=p(P,"/"),oe=o(P,"CODE",{});var Vm=c(oe);J2=p(Vm,"Errorf()"),Vm.forEach(s),V2=p(P,"를 사용해야 최대한 많은 문제를 발견하여 테스트를 여러 번 돌릴 일 없게 만들어준다."),P.forEach(s),Tu=r(n),Ou=o(n,"BR",{}),xu=o(n,"BR",{}),Ru=r(n),Hn=o(n,"H3",{id:!0});var L4=c(Hn);In=o(L4,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Xm=c(In);ce=o(Xm,"SPAN",{class:!0}),c(ce).forEach(s),Xm.forEach(s),X2=p(L4,"Setting Up and Tearing Down"),L4.forEach(s),Mu=r(n),Fn=o(n,"P",{});var Lf=c(Fn);Y2=p(Lf,`테스트를 실행하기 전에 설정하고, 테스트가 완료되면 제거할 수 있는 특정 상태가 있을 수 있다.
이 경우 `),le=o(Lf,"CODE",{});var Ym=c(le);Z2=p(Ym,"TestMain"),Ym.forEach(s),h2=p(Lf,"함수를 사용하여 이러한 상태를 관리한다."),Lf.forEach(s),Su=r(n),Qs=o(n,"PRE",{class:!0});var CP=c(Qs);CP.forEach(s),Lu=r(n),f=o(n,"P",{});var d=c(f);ue=o(d,"CODE",{});var Zm=c(ue);nd=p(Zm,"*testing.M"),Zm.forEach(s),sd=p(d," 타입의 파라미터를 받는 함수 "),ie=o(d,"CODE",{});var hm=c(ie);ad=p(hm,"TestMain()"),hm.forEach(s),td=p(d,"을 선언하였고, 패키지 레벨 변수 "),re=o(d,"CODE",{});var n6=c(re);pd=p(n6,"testTime"),n6.forEach(s),ed=p(d,"을 참조하는 "),ke=o(d,"CODE",{});var s6=c(ke);od=p(s6,"TestFirst()"),s6.forEach(s),cd=p(d,", "),fe=o(d,"CODE",{});var a6=c(fe);ld=p(a6,"TestSecond()"),a6.forEach(s),ud=p(d,` 함수가 있다.
`),de=o(d,"CODE",{});var t6=c(de);id=p(t6,"TestMain()"),t6.forEach(s),rd=p(d," 함수가 있는 패키지에서 "),Ee=o(d,"CODE",{});var p6=c(Ee);kd=p(p6,"go test"),p6.forEach(s),fd=p(d,"를 실행하면 테스트를 직접 호출하는 대신 "),ve=o(d,"CODE",{});var e6=c(ve);dd=p(e6,"TestMain()"),e6.forEach(s),Ed=p(d,` 함수가 호출된다.
일단 상태가 설정되면, `),be=o(d,"CODE",{});var o6=c(be);vd=p(o6,"*testing.M"),o6.forEach(s),bd=p(d,"의 "),_e=o(d,"CODE",{});var c6=c(_e);_d=p(c6,"Run()"),c6.forEach(s),md=p(d,` 메소드를 호출한다.
`),me=o(d,"CODE",{});var l6=c(me);wd=p(l6,"Run()"),l6.forEach(s),Pd=p(d,` 메소드는 exit code를 반환하며, 0은 모든 테스트에 통과했음을 나타낸다.
마지막으로 이 exit code와 함께 `),we=o(d,"CODE",{});var u6=c(we);yd=p(u6,"os.Exit()"),u6.forEach(s),Cd=p(d,"를 호출하면 된다."),d.forEach(s),Gu=r(n),$s=o(n,"P",{});var G4=c($s);Pe=o(G4,"CODE",{});var i6=c(Pe);Dd=p(i6,"go test"),i6.forEach(s),Td=p(G4,"를 실행한 결과는 다음과 같다."),G4.forEach(s),Au=r(n),zs=o(n,"PRE",{class:!0});var DP=c(zs);DP.forEach(s),Nu=r(n),nn=o(n,"P",{});var Ya=c(nn);ye=o(Ya,"CODE",{});var r6=c(ye);Od=p(r6,"TestMain()"),r6.forEach(s),xd=p(Ya,"은 딱 한 번만 호출되며, 패키지당 하나의 "),Ce=o(Ya,"CODE",{});var k6=c(Ce);Rd=p(k6,"TestMain()"),k6.forEach(s),Md=p(Ya,`만 사용할 수 있다.
`),De=o(Ya,"CODE",{});var f6=c(De);Sd=p(f6,"TestMain()"),f6.forEach(s),Ld=p(Ya,"을 유용하게 사용할 만한 상황은 다음과 같다."),Ya.forEach(s),Bu=r(n),Un=o(n,"UL",{});var Gf=c(Un);Te=o(Gf,"LI",{});var d6=c(Te);Gd=p(d6,"데이터베이스 등, 외부 repository를 구축해야 하는 경우"),d6.forEach(s),Ad=r(Gf),Oe=o(Gf,"LI",{});var E6=c(Oe);Nd=p(E6,"테스트하는 코드가 초기화해야 하는 패키지 레벨 변수에 의존하는 경우"),E6.forEach(s),Gf.forEach(s),gu=r(n),jn=o(n,"P",{});var Af=c(jn);Bd=p(Af,`이전에 언급하였듯 애초에 패키지 레벨 변수의 사용은 웬만하면 자제해야 한다. 프로그램에서 데이터가 어떻게 흘러가는지 이해하기 어렵게 만들기 때문이다.
따라서 `),xe=o(Af,"CODE",{});var v6=c(xe);gd=p(v6,"TestMain()"),v6.forEach(s),Hd=p(Af,"을 사용해야 하는 경우, 그보다 코드를 리팩토링하는 것을 먼저 고려해보는 것이 낫다."),Af.forEach(s),Hu=r(n),m=o(n,"P",{});var A=c(m);Re=o(A,"CODE",{});var b6=c(Re);Id=p(b6,"*testing.T"),b6.forEach(s),Fd=p(A,"의 "),Me=o(A,"CODE",{});var _6=c(Me);Ud=p(_6,"Cleanup()"),_6.forEach(s),jd=p(A,` 메소드는 하나의 테스트를 위해 생성된 임시 리소스를 청소하는 데 사용한다.
`),Se=o(A,"CODE",{});var m6=c(Se);qd=p(m6,"Cleanup()"),m6.forEach(s),Wd=p(A,` 메소드는 반환값 및 파라미터가 없는 함수 하나를 파라미터로 받는데, 이 함수는 테스트가 완료되면 실행된다.
간단한 테스트라면 `),Le=o(A,"CODE",{});var w6=c(Le);Kd=p(w6,"defer"),w6.forEach(s),Qd=p(A,`문을 사용하더라도 동일한 결과를 얻을 수 있을것이다.
하지만 아래와 같이 샘플 데이터를 설정할 때 helper function에 의존하는 경우 `),Ge=o(A,"CODE",{});var P6=c(Ge);$d=p(P6,"Cleanup()"),P6.forEach(s),zd=p(A,`이 유용하다.
`),Ae=o(A,"CODE",{});var y6=c(Ae);Jd=p(y6,"defer"),y6.forEach(s),Vd=p(A,"처럼 "),Ne=o(A,"CODE",{});var C6=c(Ne);Xd=p(C6,"Cleanup()"),C6.forEach(s),Yd=p(A,"을 여러 번 호출하여도 괜찮으며, 마지막에 추가된 함수가 먼저 호출된다."),A.forEach(s),Iu=r(n),Js=o(n,"PRE",{class:!0});var TP=c(Js);TP.forEach(s),Fu=r(n),Uu=o(n,"BR",{}),ju=o(n,"BR",{}),qu=r(n),qn=o(n,"H3",{id:!0});var A4=c(qn);Wn=o(A4,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var D6=c(Wn);Be=o(D6,"SPAN",{class:!0}),c(Be).forEach(s),D6.forEach(s),Zd=p(A4,"Storing Sample Test Data"),A4.forEach(s),Wu=r(n),G=o(n,"P",{});var on=c(G);ge=o(on,"CODE",{});var T6=c(ge);hd=p(T6,"go test"),T6.forEach(s),nE=p(on,` 명령어는 현재의 패키지 디렉토리를 작업 디렉토리로 설정한다.
만약 특정 패키지에서 함수를 테스트하고자 할 때 샘플 데이터를 사용하고 싶다면, `),He=o(on,"EM",{});var O6=c(He);sE=p(O6,"testdata"),O6.forEach(s),aE=p(on,`라는 서브디렉토리를 만들면 된다. 이 디렉토리명은 Go에서 테스트 파일을 저장하는 공간으로 지정되어 있다.
`),Ie=o(on,"EM",{});var x6=c(Ie);tE=p(x6,"testdata"),x6.forEach(s),pE=p(on,`에서 데이터를 읽어올 때는 반드시 상대경로를 사용한다.
`),Fe=o(on,"CODE",{});var R6=c(Fe);eE=p(R6,"go test"),R6.forEach(s),oE=p(on," 명령어는 작업 디렉토리를 현재 패키지로 변경하기 때문에, 각각의 패키지는 상대 경로를 통해 "),Ue=o(on,"EM",{});var M6=c(Ue);cE=p(M6,"testdata"),M6.forEach(s),lE=p(on,"에 접근할 것이다."),on.forEach(s),Ku=r(n),Kn=o(n,"P",{});var Nf=c(Kn);uE=p(Nf,"예제 코드는 "),Vs=o(Nf,"A",{href:!0,rel:!0});var S6=c(Vs);iE=p(S6,"여기"),S6.forEach(s),rE=p(Nf,"에서 찾아볼 수 있다."),Nf.forEach(s),Qu=r(n),$u=o(n,"BR",{}),zu=o(n,"BR",{}),Ju=r(n),Qn=o(n,"H3",{id:!0});var N4=c(Qn);$n=o(N4,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var L6=c($n);je=o(L6,"SPAN",{class:!0}),c(je).forEach(s),L6.forEach(s),kE=p(N4,"Testing Your Public API"),N4.forEach(s),Vu=r(n),ct=o(n,"P",{});var G6=c(ct);fE=p(G6,`우리가 작성한 테스트 코드는 프로덕션 코드와 동일한 패키지에 위치하였다.
이 같은 방식으로 export된 함수나 export되지 않은 함수까지도 테스트할 수 있었다.`),G6.forEach(s),Xu=r(n),zn=o(n,"P",{});var Bf=c(zn);dE=p(Bf,`만약 패키지의 Public API만 테스트하려는 거라면, 이를 위한 Go의 규칙이 마련되어 있다.
프로덕션 코드와 같은 디렉토리에 테스트 코드를 두는 것은 동일하지만, 패키지 명으로 `),qe=o(Bf,"CODE",{});var A6=c(qe);EE=p(A6,"[패키지명]_test"),A6.forEach(s),vE=p(Bf,"를 사용한다."),Bf.forEach(s),Yu=r(n),$=o(n,"P",{});var gs=c($);bE=p(gs,"맨 처음 작성하였던 "),We=o(gs,"CODE",{});var N6=c(We);_E=p(N6,"adder"),N6.forEach(s),mE=p(gs,"의 예제를 떠올려보자. 맨 처음의 "),Ke=o(gs,"CODE",{});var B6=c(Ke);wE=p(B6,"adder"),B6.forEach(s),PE=p(gs,"는 export되지 않는 함수였다. 이번에는 export되게끔 아래와 같이 작성한다. 파일명은 "),Qe=o(gs,"EM",{});var g6=c(Qe);yE=p(g6,"adder_public.go"),g6.forEach(s),CE=p(gs,"로 하였다."),gs.forEach(s),Zu=r(n),Xs=o(n,"PRE",{class:!0});var OP=c(Xs);OP.forEach(s),hu=r(n),ln=o(n,"P",{});var pp=c(ln);DE=p(pp,`이렇게 export된 Public API에 대해, 테스트 코드를 아래와 같이 작성해준다.
파일명 또한 기존 테스트 코드처럼 뒤에 `),$e=o(pp,"EM",{});var H6=c($e);TE=p(H6,"_test"),H6.forEach(s),OE=p(pp,"를 붙여, "),ze=o(pp,"EM",{});var I6=c(ze);xE=p(I6,"adder_public_test.go"),I6.forEach(s),RE=p(pp,"로 하였다."),pp.forEach(s),ni=r(n),Ys=o(n,"PRE",{class:!0});var xP=c(Ys);xP.forEach(s),si=r(n),x=o(n,"P",{});var X=c(x);ME=p(X,"주목할 점은 테스트 코드의 패키지명이 "),Je=o(X,"CODE",{});var F6=c(Je);SE=p(F6,"adder_test"),F6.forEach(s),LE=p(X,"라는 것이다. 패키지가 다르기 때문에 "),Ve=o(X,"CODE",{});var U6=c(Ve);GE=p(U6,"AddNumbers()"),U6.forEach(s),AE=p(X,"를 "),Xe=o(X,"CODE",{});var j6=c(Xe);NE=p(j6,"adder"),j6.forEach(s),BE=p(X,"로부터 import해와야 하며, "),Ye=o(X,"CODE",{});var q6=c(Ye);gE=p(q6,"adder.AddNumbers()"),q6.forEach(s),HE=p(X,`로 호출한다.
또한 테스트의 이름 설정 규칙에 따라, 테스트 함수의 이름은 `),Ze=o(X,"CODE",{});var W6=c(Ze);IE=p(W6,"AddNumbers()"),W6.forEach(s),FE=p(X," 함수와 매칭되어야 한다."),X.forEach(s),ai=r(n),un=o(n,"P",{});var ep=c(un);UE=p(ep,`패키지 안에서 export된 함수를 호출할 수 있는 것처럼, 소스 코드와 동일한 패키지에서 Public API를 테스트할 수 있다.
위와 같은 `),he=o(ep,"CODE",{});var K6=c(he);jE=p(K6,"_test"),K6.forEach(s),qE=p(ep,` 접미사 패키지를 사용하면 export된 함수, 메소드, 타입, 상수, 변수에만 접근이 가능해지기 때문에, 블랙 박스 테스팅이 강제된다.
또한 `),no=o(ep,"CODE",{});var Q6=c(no);WE=p(Q6,"_test"),Q6.forEach(s),KE=p(ep,"가 붙은 패키지와 붙지 않은 두 개의 패키지가 동일한 디렉토리에 있을 수 있다."),ep.forEach(s),ti=r(n),pi=o(n,"BR",{}),ei=o(n,"BR",{}),oi=r(n),Jn=o(n,"H3",{id:!0});var B4=c(Jn);Vn=o(B4,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var $6=c(Vn);so=o($6,"SPAN",{class:!0}),c(so).forEach(s),$6.forEach(s),QE=p(B4,"Use go-cmp to Compare Test Results"),B4.forEach(s),ci=r(n),R=o(n,"P",{});var Y=c(R);$E=p(Y,`복합 유형 인스턴스끼리 정확히 비교하는 코드는 다소 길어질 수 있다.
`),ao=o(Y,"CODE",{});var z6=c(ao);zE=p(z6,"reflect.DeepEqual()"),z6.forEach(s),JE=p(Y,`을 사용하여 struct, map, slice를 비교할 수 있지만 더 나은 방법이 있다.
구글은 `),to=o(Y,"CODE",{});var J6=c(to);VE=p(J6,"go-cmp"),J6.forEach(s),XE=p(Y,`라는 서드파티 모듈을 출시했다.
`),po=o(Y,"CODE",{});var V6=c(po);YE=p(V6,"go-cmp"),V6.forEach(s),ZE=p(Y,`는 비교를 하여 일치하지 않는부분에 대한 상세한 설명을 제공한다.
간단한 `),eo=o(Y,"CODE",{});var X6=c(eo);hE=p(X6,"struct"),X6.forEach(s),n3=p(Y,"와 함께 "),oo=o(Y,"CODE",{});var Y6=c(oo);s3=p(Y6,"go-cmp"),Y6.forEach(s),a3=p(Y,"를 사용해보자."),Y.forEach(s),li=r(n),Zs=o(n,"PRE",{class:!0});var RP=c(Zs);RP.forEach(s),ui=r(n),lt=o(n,"P",{});var Z6=c(lt);t3=p(Z6,`먼저 구조체 타입과 이에 대한 Factory 함수를 정의해주었다.
이제 테스트 코드를 작성해보자.`),Z6.forEach(s),ii=r(n),hs=o(n,"PRE",{class:!0});var MP=c(hs);MP.forEach(s),ri=r(n),rn=o(n,"P",{});var op=c(rn);p3=p(op,"먼저, 테스트 코드를 실행하려면 "),co=o(op,"CODE",{});var h6=c(co);e3=p(h6,"github.com/google/go-cmp/cmp"),h6.forEach(s),o3=p(op,`를 임포트해주어야 한다.
`),lo=o(op,"CODE",{});var n7=c(lo);c3=p(n7,"cmp.Diff()"),n7.forEach(s),l3=p(op,` 함수는 예상되는 출력값과 테스트하는 함수의 실제 출력값을 파라미터로 받는다.
그리고 두 입력 간의 불일치가 있다면 이에 대한 설명을 출력한다. 만약 입력이 일치한다면, 빈 문자열을 반환한다.`),op.forEach(s),ki=r(n),Pn=o(n,"P",{});var Nl=c(Pn);uo=o(Nl,"CODE",{});var s7=c(uo);u3=p(s7,"go test"),s7.forEach(s),i3=p(Nl,"를 입력하여, "),io=o(Nl,"CODE",{});var a7=c(io);r3=p(a7,"go-cmp"),a7.forEach(s),k3=p(Nl,"가 어떤 결과를 내놓았을 지 확인해보자."),Nl.forEach(s),fi=r(n),na=o(n,"PRE",{class:!0});var SP=c(na);SP.forEach(s),di=r(n),C=o(n,"P",{});var U=c(C);ro=o(U,"CODE",{});var t7=c(ro);f3=p(t7,"+"),t7.forEach(s),d3=p(U,"와 "),ko=o(U,"CODE",{});var p7=c(ko);E3=p(p7,"-"),p7.forEach(s),v3=p(U,`가 있는 라인에서 예측값과 실제 값의 차이를 나타낸다.
위 예제의 경우 `),fo=o(U,"CODE",{});var e7=c(fo);b3=p(e7,"DateAdded"),e7.forEach(s),_3=p(U," 필드가 일치하지 않았기 때문에 실패하였다. "),Eo=o(U,"CODE",{});var o7=c(Eo);m3=p(o7,"DateAdded"),o7.forEach(s),w3=p(U," 필드는 "),vo=o(U,"CODE",{});var c7=c(vo);P3=p(c7,"testcmp.CreatePerson()"),c7.forEach(s),y3=p(U,"를 통해서만 제대로 처리할 수 있기 때문에, "),bo=o(U,"CODE",{});var l7=c(bo);C3=p(l7,"DateAdded"),l7.forEach(s),D3=p(U,` 필드는 검사 대상에서 제외할 필요가 있다.
아래와 같이 비교 함수를 정의해서, 비교하고자 하는 필드를 지정할수 있다.`),U.forEach(s),Ei=r(n),sa=o(n,"PRE",{class:!0});var LP=c(sa);LP.forEach(s),vi=r(n),I=o(n,"P",{});var Mn=c(I);_o=o(Mn,"CODE",{});var u7=c(_o);T3=p(u7,"cmp.Comparer()"),u7.forEach(s),O3=p(Mn,`에 두 인스턴스를 비교하는 익명 함수를 전달하여 비교 함수를 생성하였다.
전달되는 익명 함수는 반드시 동일한 타입의 두 파라미터를 입력으로 받아, bool 타입을 반환한다.
또한 symmetric(파라미터의 순서가 중요치 않음), deterministic(입력이 같다면 출력이 반드시 같음), pure(파라미터를 변경하지 않음)한 함수여야 한다.
위 예제에서는 `),mo=o(Mn,"CODE",{});var i7=c(mo);x3=p(i7,"Name"),i7.forEach(s),R3=p(Mn," 및 "),wo=o(Mn,"CODE",{});var r7=c(wo);M3=p(r7,"Age"),r7.forEach(s),S3=p(Mn," 필드만 비교하여 "),Po=o(Mn,"CODE",{});var k7=c(Po);L3=p(k7,"DateAdded"),k7.forEach(s),G3=p(Mn," 필드는 생략하였다."),Mn.forEach(s),bi=r(n),Xn=o(n,"P",{});var gf=c(Xn);A3=p(gf,"이후 "),yo=o(gf,"CODE",{});var f7=c(yo);N3=p(f7,"cmp.Diff()"),f7.forEach(s),B3=p(gf,"를 호출할 때 비교 함수를 마지막 파라미터로 함께 보내주면 된다."),gf.forEach(s),_i=r(n),yn=o(n,"P",{});var Bl=c(yn);Co=o(Bl,"CODE",{});var d7=c(Co);g3=p(d7,"go-cmp"),d7.forEach(s),H3=p(Bl,"에 대한 간략한 사용법을 리뷰하였다. 추가적인 사용 예는 "),aa=o(Bl,"A",{href:!0,rel:!0});var E7=c(aa);I3=p(E7,"문서"),E7.forEach(s),F3=p(Bl,"를 참고해보자!"),Bl.forEach(s),mi=r(n),wi=o(n,"BR",{}),Pi=o(n,"BR",{}),yi=r(n),Yn=o(n,"H2",{id:!0});var g4=c(Yn);Zn=o(g4,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var v7=c(Zn);Do=o(v7,"SPAN",{class:!0}),c(Do).forEach(s),v7.forEach(s),U3=p(g4,"Table Tests"),g4.forEach(s),Ci=r(n),Di=o(n,"HR",{}),Ti=r(n),hn=o(n,"P",{});var Hf=c(hn);j3=p(Hf,`일반적으로 함수가 올바르게 동작하는 지 확인하기 위해서는 하나 이상의 테스트케이스가 필요한 법이다.
테스트 함수를 여러 개 작성하거나, 동일한 테스트 함수 내에서 여러 번의 테스트를 수행할 수 있지만 테스트 로직은 대개 반복적이다.
데이터와 함수를 설정하고, 입력을 명시하고, 출력을 확인하고, 예측값과 실제 출력값을 비교하는 절차를 반복하는 것이다.
이런 코드를 반복하여 작성하는 것보단 `),To=o(Hf,"EM",{});var b7=c(To);q3=p(b7,"table test"),b7.forEach(s),W3=p(Hf,"라 불리는 패턴을 사용하는 것이 좋을 수 있다."),Hf.forEach(s),Oi=r(n),ns=o(n,"P",{});var If=c(ns);K3=p(If,"가령, "),Oo=o(If,"CODE",{});var _7=c(Oo);Q3=p(_7,"table"),_7.forEach(s),$3=p(If," 패키지에서 아래와 같은 함수를 테스트한다고 가정해보자."),If.forEach(s),xi=r(n),ta=o(n,"PRE",{class:!0});var GP=c(ta);GP.forEach(s),Ri=r(n),ut=o(n,"P",{});var m7=c(ut);z3=p(m7,`이런 함수를 테스트하려면 각각의 경우에 대해 입력을 집어넣어서 유효한 결과를 성공적으로 반환하는지, 또는 에러를 잘 반환하는지 등 확인해볼 필요가 있다.
테스트 코드를 아래와 같이 작성할 수도 있지만, 그야말로 쌩노가다이다..!`),m7.forEach(s),Mi=r(n),pa=o(n,"PRE",{class:!0});var AP=c(pa);AP.forEach(s),Si=r(n),it=o(n,"P",{});var w7=c(it);J3=p(w7,`이러한 반복되는 코드를 table test로 교체해보자.
먼저, 익명 구조체의 slice를 선언한다. 이 구조체는 테스트명, 입력 파라미터, 반환값을 포함한다.
slice의 각 항목은 각각의 테스트 케이스를 의미한다.`),w7.forEach(s),Li=r(n),ea=o(n,"PRE",{class:!0});var NP=c(ea);NP.forEach(s),Gi=r(n),v=o(n,"P",{});var y=c(v);V3=p(y,"이제 "),xo=o(y,"CODE",{});var P7=c(xo);X3=p(P7,"data"),P7.forEach(s),Y3=p(y,"에서 반복문을 돌며, 각 테스트 케이스별로 "),Ro=o(y,"CODE",{});var y7=c(Ro);Z3=p(y7,"*testing.T"),y7.forEach(s),h3=p(y,"의 "),Mo=o(y,"CODE",{});var C7=c(Mo);nv=p(C7,"Run()"),C7.forEach(s),sv=p(y,` 메소드를 수행할 것이다.
`),So=o(y,"CODE",{});var D7=c(So);av=p(D7,"Run()"),D7.forEach(s),tv=p(y,"은 테스트 케이스의 이름과 "),Lo=o(y,"CODE",{});var T7=c(Lo);pv=p(T7,"*testing.T"),T7.forEach(s),ev=p(y,` 단일 파라미터를 가진 함수를 파라미터로 받는다.
이 함수 안에서는 `),Go=o(y,"CODE",{});var O7=c(Go);ov=p(O7,"DoMath()"),O7.forEach(s),cv=p(y,"를 호출하여 "),Ao=o(y,"CODE",{});var x7=c(Ao);lv=p(x7,"data"),x7.forEach(s),uv=p(y,`의 각 필드값을 사용하여 반복적으로 테스트를 진행한다.
또한 테스트 명령어 입력시 `),No=o(y,"CODE",{});var R7=c(No);iv=p(R7,"-v"),R7.forEach(s),rv=p(y," 플래그를 주면 각 테스트케이스가 테스트명과 함께 출력된다."),y.forEach(s),Ai=r(n),oa=o(n,"PRE",{class:!0});var BP=c(oa);BP.forEach(s),Ni=r(n),rt=o(n,"BLOCKQUOTE",{});var M7=c(rt);sn=o(M7,"P",{});var Hs=c(sn);kv=p(Hs,"위 예제에서는 "),Bo=o(Hs,"CODE",{});var S7=c(Bo);fv=p(S7,"error"),S7.forEach(s),dv=p(Hs,"의 에러 메시지를 비교하여 예측 에러와 실제 에러를 비교하지만, 실제로는 "),go=o(Hs,"CODE",{});var L7=c(go);Ev=p(L7,"errors.Is()"),L7.forEach(s),vv=p(Hs," 또는 "),Ho=o(Hs,"CODE",{});var G7=c(Ho);bv=p(G7,"errors.As()"),G7.forEach(s),_v=p(Hs,"를 사용하여 에러를 검증하는 편이 더 이상적이다."),Hs.forEach(s),M7.forEach(s),Bi=r(n),gi=o(n,"BR",{}),Hi=o(n,"BR",{}),Ii=r(n),ss=o(n,"H2",{id:!0});var H4=c(ss);as=o(H4,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var A7=c(as);Io=o(A7,"SPAN",{class:!0}),c(Io).forEach(s),A7.forEach(s),mv=p(H4,"Code Coverage"),H4.forEach(s),Fi=r(n),kt=o(n,"P",{});var N7=c(kt);wv=p(N7,"Code Coverage는 놓친 테스트 케이스를 찾아낼 수 있는 유용한 도구이다. 다만 100%의 Code Coverage라고 해서 코드가 어떠한 입력에 대해 버그를 일으키지 않으리라는 것을 의미하지는 않는다."),N7.forEach(s),Ui=r(n),ca=o(n,"PRE",{class:!0});var gP=c(ca);gP.forEach(s),ji=r(n),z=o(n,"P",{});var Is=c(z);Pv=p(Is,"위와 같이 "),Fo=o(Is,"CODE",{});var B7=c(Fo);yv=p(B7,"go test"),B7.forEach(s),Cv=p(Is," 명령어에 "),Uo=o(Is,"CODE",{});var g7=c(Uo);Dv=p(g7,"-cover"),g7.forEach(s),Tv=p(Is,`플래그를 달면 Code Coverage를 계산할 수 있다.
또한 `),jo=o(Is,"CODE",{});var H7=c(jo);Ov=p(H7,"-coverprofile"),H7.forEach(s),xv=p(Is," 플래그로 출력 파일명을 명시하면 coverage에 대한 정보를 파일로 저장할 수 있다."),Is.forEach(s),qi=r(n),la=o(n,"PRE",{class:!0});var HP=c(la);HP.forEach(s),Wi=r(n),ft=o(n,"P",{});var I7=c(ft);Rv=p(I7,"이처럼 coverage의 달성률을 보여주며, 파일은 아래와 같이 저장된다."),I7.forEach(s),Ki=r(n),ua=o(n,"PRE",{class:!0});var IP=c(ua);IP.forEach(s),Qi=r(n),dt=o(n,"P",{});var F7=c(dt);Mv=p(F7,"마지막이 0으로 끝나는 라인이, 테스트 케이스에 의해 cover되지 않은 코드의 위치를 의미한다."),F7.forEach(s),$i=r(n),zi=o(n,"BR",{}),Ji=r(n),ts=o(n,"P",{});var Ff=c(ts);Sv=p(Ff,"이 방식도 충분히 좋지만, 조금 더 직관적인 도구가 "),qo=o(Ff,"CODE",{});var U7=c(qo);Lv=p(U7,"cover"),U7.forEach(s),Gv=p(Ff,`라는 도구이다. HTML로 coverage 정보를 소스코드와 함께 나타내주기 때문에 매우 직관적이다.
아래 명령어를 통해 실행해보자.`),Ff.forEach(s),Vi=r(n),ia=o(n,"PRE",{class:!0});var FP=c(ia);FP.forEach(s),Xi=r(n),Et=o(n,"P",{});var j7=c(Et);Av=p(j7,"명령어를 입력하면 브라우저가 열리고, 아래 사진처럼 보다 직관적으로 붉게 색칠된 영역의 코드를 통해 테스트 케이스에 의해 cover되지 않은 코드를 보여준다!"),j7.forEach(s),Yi=r(n),vt=o(n,"P",{});var q7=c(vt);bt=o(q7,"IMG",{src:!0,alt:!0}),q7.forEach(s),Zi=r(n),_t=o(n,"P",{});var W7=c(_t);Nv=p(W7,"단순한 인터페이스이다. 좌측 상단 콤보박스에 테스트된 파일의 목록이 나타나며, 회색/빨상색/초록색으로 코드가 cover되는지 여부를 나타낸다."),W7.forEach(s),hi=r(n),kn=o(n,"P",{});var cp=c(kn);Bv=p(cp,"우리는 잘못된 연산자 기호를 입력 파라미터로 넘기는 테스트케이스를 작성하지 않았기 때문에, "),Wo=o(cp,"CODE",{});var K7=c(Wo);gv=p(K7,"default"),K7.forEach(s),Hv=p(cp," case가 cover되지 않았다. 만약 테스트 "),Ko=o(cp,"STRONG",{});var Q7=c(Ko);Iv=p(Q7,"케이스"),Q7.forEach(s),Fv=p(cp," slice에 다음과 같은 항목을 추가한다면 문제가 해결될 것이다."),cp.forEach(s),nr=r(n),ra=o(n,"PRE",{class:!0});var UP=c(ra);UP.forEach(s),sr=r(n),mt=o(n,"P",{});var $7=c(mt);Uv=p($7,"추가하였다면 아래 명령어를 입력하여 재실행해보자."),$7.forEach(s),ar=r(n),ka=o(n,"PRE",{class:!0});var jP=c(ka);jP.forEach(s),tr=r(n),ps=o(n,"P",{});var Uf=c(ps);jv=p(Uf,"이전에 cover되지 않았던 "),Qo=o(Uf,"CODE",{});var z7=c(Qo);qv=p(z7,"default"),z7.forEach(s),Wv=p(Uf," case가 통과한 것을 알 수 있을 것이다. 귀찮으니 사진은 생략해야지~"),Uf.forEach(s),pr=r(n),wt=o(n,"BLOCKQUOTE",{});var J7=c(wt);$o=o(J7,"P",{});var V7=c($o);Kv=p(V7,"다시 한번 강조하지만, 100%의 Code Coverage라고 해서 코드에 버그가 없는 것이 아니니 Code Coverage만 철썩같이 믿는 일은 없도록 해야 한다..!"),V7.forEach(s),J7.forEach(s),er=r(n),or=o(n,"BR",{}),cr=o(n,"BR",{}),lr=r(n),es=o(n,"H2",{id:!0});var I4=c(es);os=o(I4,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var X7=c(os);zo=o(X7,"SPAN",{class:!0}),c(zo).forEach(s),X7.forEach(s),Qv=p(I4,"Benchmarks"),I4.forEach(s),ur=r(n),Pt=o(n,"P",{});var Y7=c(Pt);$v=p(Y7,`작성된 코드가 얼마나 빠른지/느린지, 즉 성능을 판단하는 것은 매우 어려운 일이다.
이를 우리가 스스로 판단하기 보단 Go에서 제공하는 도구를 사용하는 것이 훨씬 좋을 것이다.`),Y7.forEach(s),ir=r(n),yt=o(n,"P",{});var Z7=c(yt);zv=p(Z7,"아래의 예제 함수를 보자."),Z7.forEach(s),rr=r(n),fa=o(n,"PRE",{class:!0});var qP=c(fa);qP.forEach(s),kr=r(n),Ct=o(n,"P",{});var h7=c(Ct);Jv=p(h7,`파일 내 문자의 수를 세는 간단한 함수로, 파일명과 파일로부터 읽어올 버퍼의 크기를 파라미터로 받는다.
당연히 버퍼의 크기에 따라 이터레이션을 도는 횟수가 달라질 테니, 버퍼 크기에 따라 성능 차이가 많이 날 것이다.`),h7.forEach(s),fr=r(n),Dt=o(n,"P",{});var n9=c(Dt);Vv=p(n9,"먼저, 함수가 문제 없이 잘 동작하는지 확인해보도록 하자"),n9.forEach(s),dr=r(n),da=o(n,"PRE",{class:!0});var WP=c(da);WP.forEach(s),Er=r(n),Tt=o(n,"P",{});var s9=c(Tt);Xv=p(s9,`랜덤 시드가 고정값이라, 아마 테스트에 통과하긴 할 것이다.
그리고 우리의 목표는, 최적의 버퍼 크기를 찾아내는 것이다.`),s9.forEach(s),vr=r(n),Ot=o(n,"BLOCKQUOTE",{});var a9=c(Ot);Jo=o(a9,"P",{});var t9=c(Jo);Yv=p(t9,`최적화를 하기 위해 긴 여정을 떠나기에 앞서, 진짜 최적화를 할 필요가 있는 것인지에 대해 검토하는 게 좋다.
가령, 프로그램이 이미 응답 속도나 메모리 요구사항을 충족하고 있다면 기능 추가나 버그 수정에 시간을 쓰는 게 낫다.
비즈니스 요구사항에 따라 응답 속도 및 메모리 요구사항이 정의된다.`),t9.forEach(s),a9.forEach(s),br=r(n),_r=o(n,"BR",{}),mr=r(n),N=o(n,"P",{});var _n=c(N);Zv=p(_n,"Go에서 벤치마크 함수를 작성하려면, 테스트 코드에서 "),Vo=o(_n,"CODE",{});var p9=c(Vo);hv=p(p9,"Benchmark"),p9.forEach(s),nb=p(_n,`로 시작하는 함수 이름을 지어주면 된다.
또한 `),Xo=o(_n,"CODE",{});var e9=c(Xo);sb=p(e9,"*testing.B"),e9.forEach(s),ab=p(_n," 타입의 단일 파라미터를 받으며, "),Yo=o(_n,"CODE",{});var o9=c(Yo);tb=p(o9,"*testing.B"),o9.forEach(s),pb=p(_n,"는 벤치마킹 관련 기능과 함께 "),Zo=o(_n,"CODE",{});var c9=c(Zo);eb=p(c9,"*testing.T"),c9.forEach(s),ob=p(_n,"의 모든 기능을 포함한다."),_n.forEach(s),wr=r(n),xt=o(n,"P",{});var l9=c(xt);cb=p(l9,"먼저, 버퍼 크기가 1 바이트인 경우의 벤치마크를 측정해보자."),l9.forEach(s),Pr=r(n),Ea=o(n,"PRE",{class:!0});var KP=c(Ea);KP.forEach(s),yr=r(n),fn=o(n,"P",{});var lp=c(fn);lb=p(lp,"위 코드에서 패키지 레벨 변수인 "),ho=o(lp,"CODE",{});var u9=c(ho);ub=p(u9,"blackhole"),u9.forEach(s),ib=p(lp,`을 사용하는 것이 다소 의아해 보인다.
책에서는 `),nc=o(lp,"CODE",{});var i9=c(nc);rb=p(i9,"FileLen()"),i9.forEach(s),kb=p(lp,"을 반복 호출하는 과정에서 컴파일러가 알아서 최적화하는 것을 막기 위함이라고 하는 모양이다."),lp.forEach(s),Cr=r(n),cs=o(n,"P",{});var jf=c(cs);fb=p(jf,"아무튼, Go의 벤치마크는 반드시 0부터 "),sc=o(jf,"CODE",{});var r9=c(sc);db=p(r9,"b.N"),r9.forEach(s),Eb=p(jf,`만큼의 이터레이션을 돌아야 한다.
테스트 프레임워크는 타이밍 결과가 정확할 때까지 N 값을 늘려가며 벤치마크 함수를 돌릴 것이다.
출력된 결과에 대해서는 조금 있다 확인할 것이다.`),jf.forEach(s),Dr=r(n),B=o(n,"P",{});var mn=c(B);vb=p(mn,"벤치마크를 돌리기 위해서는 "),ac=o(mn,"CODE",{});var k9=c(ac);bb=p(k9,"go test"),k9.forEach(s),_b=p(mn," 명령어에 "),tc=o(mn,"CODE",{});var f9=c(tc);mb=p(f9,"-bench"),f9.forEach(s),wb=p(mn,` 플래그를 추가해주면 된다.
이 플래그는 실행하고자 하는 벤치마크의 이름을 표현하는 정규식을 받는다. `),pc=o(mn,"CODE",{});var d9=c(pc);Pb=p(d9,"-bench=."),d9.forEach(s),yb=p(mn,`와 같이 주면 모든 벤치마크를 실행한다.
한편 `),ec=o(mn,"CODE",{});var E9=c(ec);Cb=p(E9,"-benchmem"),E9.forEach(s),Db=p(mn,` 플래그를 추가하면 벤치마크 출력에 메모리 할당 관련 정보를 포함한다.
또한 벤치마크 이전에 테스트가 실행되므로, 테스트가 통과될 때만 코드를 벤치마크할 수 있다.`),mn.forEach(s),Tr=r(n),ls=o(n,"P",{});var qf=c(ls);Tb=p(qf,"다음은 "),oc=o(qf,"CODE",{});var v9=c(oc);Ob=p(v9,"-benchmem"),v9.forEach(s),xb=p(qf," 플래그를 활성화하여 명령어를 입력한 뒤, 출력된 결과를 확인해보자."),qf.forEach(s),Or=r(n),va=o(n,"PRE",{class:!0});var QP=c(va);QP.forEach(s),xr=r(n),Rt=o(n,"P",{});var b9=c(Rt);Rb=p(b9,"각 정보는 다음과 같은 의미를 갖는다."),b9.forEach(s),Rr=r(n),g=o(n,"UL",{});var wn=c(g);Mt=o(wn,"LI",{});var F4=c(Mt);cc=o(F4,"CODE",{});var _9=c(cc);Mb=p(_9,"BenchmarkFileLen1-12"),_9.forEach(s),Sb=p(F4,": 벤치마크명-벤치마크의 GOMAXPROCS 값"),F4.forEach(s),Lb=r(wn),St=o(wn,"LI",{});var U4=c(St);lc=o(U4,"CODE",{});var m9=c(lc);Gb=p(m9,"66"),m9.forEach(s),Ab=p(U4,": 안정적인 결과를 얻기 위해 실행한 테스트의 수"),U4.forEach(s),Nb=r(wn),Lt=o(wn,"LI",{});var j4=c(Lt);uc=o(j4,"CODE",{});var w9=c(uc);Bb=p(w9,"17917232 ns/op"),w9.forEach(s),gb=p(j4,": 하나의 벤치마크를 통과하는 데 걸린 시간(나노초)"),j4.forEach(s),Hb=r(wn),Gt=o(wn,"LI",{});var q4=c(Gt);ic=o(q4,"CODE",{});var P9=c(ic);Ib=p(P9,"129 B/op"),P9.forEach(s),Fb=p(q4,": 하나의 벤치마크를 통과하는데 할당된 바이트 수"),q4.forEach(s),Ub=r(wn),At=o(wn,"LI",{});var W4=c(At);rc=o(W4,"CODE",{});var y9=c(rc);jb=p(y9,"4 allocs/op"),y9.forEach(s),qb=p(W4,": 하나의 벤치마크를 통과하는 동안 힙에서 바이트를 할당한 횟수 (할당된 바이트 수보다 작거나 같음)"),W4.forEach(s),wn.forEach(s),Mr=r(n),Sr=o(n,"BR",{}),Lr=r(n),Nt=o(n,"P",{});var C9=c(Nt);Wb=p(C9,"이제 1 바이트 말고, 버퍼 크기를 키워서 벤치마크를 돌려보자."),C9.forEach(s),Gr=r(n),ba=o(n,"PRE",{class:!0});var $P=c(ba);$P.forEach(s),Ar=r(n),Cn=o(n,"P",{});var gl=c(Cn);kc=o(gl,"CODE",{});var D9=c(kc);Kb=p(D9,"t.Run()"),D9.forEach(s),Qb=p(gl,"을 통해 table test를 하던 것처럼, "),fc=o(gl,"CODE",{});var T9=c(fc);$b=p(T9,"b.Run()"),T9.forEach(s),zb=p(gl,`으로 여러 입력의 벤치마크를 실행할 수 있다.
다음과 같은 결과를 얻었다.`),gl.forEach(s),Nr=r(n),_a=o(n,"PRE",{class:!0});var zP=c(_a);zP.forEach(s),Br=r(n),Bt=o(n,"P",{});var O9=c(Bt);Jb=p(O9,`어느 정도 충분히 예상할 수 있는 결과였다.
버퍼의 크기를 늘릴 수록 메모리 할당 회수가 적어지니 코드가 빠르게 돌아간다. 한편 버퍼의 크기가 파일의 크기에 비해 커지면 불필요한 할당이 생겨 결과가 느려진다. 위 예제에서는 10000 바이트의 버퍼가 최적의 크기임을 알 수 있다.
또한, 성능을 높이려면 메모리를 많이 써야 하고, 메모리를 적게 쓰려면 성능을 포기해야 하는 trade-off에 대해서도 확인할 수 있다.`),O9.forEach(s),gr=r(n),gt=o(n,"BLOCKQUOTE",{});var x9=c(gt);ma=o(x9,"P",{});var Wf=c(ma);Vb=p(Wf,`벤치마킹을 통해 성능 및 메모리 문제를 발견했다면, 다음 단계는 문제가 정확히 무엇인지 파악하는 것이다.
Go에는 프로그램의 CPU 및 메모리 사용량 데이터를 수집하는 프로파일링 및 시각화 도구가 포함되어 있다.
이에 대한 내용은 `),wa=o(Wf,"A",{href:!0,rel:!0});var R9=c(wa);Xb=p(R9,"여기"),R9.forEach(s),Yb=p(Wf,"를 참고하면 좋을 것 같다."),Wf.forEach(s),x9.forEach(s),Hr=r(n),Ir=o(n,"BR",{}),Fr=o(n,"BR",{}),Ur=r(n),us=o(n,"H2",{id:!0});var K4=c(us);is=o(K4,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var M9=c(is);dc=o(M9,"SPAN",{class:!0}),c(dc).forEach(s),M9.forEach(s),Zb=p(K4,"Stubs"),K4.forEach(s),jr=r(n),Ht=o(n,"P",{});var S9=c(Ht);hb=p(S9,"지금까지 우리가 작성한 테스트는 다른 코드에 의존하지 않는 함수에 대한 테스트였다. 하지만 대부분의 코드는 의존성으로 가득하다!"),S9.forEach(s),qr=r(n),It=o(n,"P",{});var L9=c(It);n5=p(L9,`Go에서는 함수 호출을 추상화하는 두 가지 방법이 있는데, 바로 함수 타입을 정의하는 것과 인터페이스를 정의하는 것이다.
이러한 추상화는 프로덕션 코드를 모듈화함으로써 유닛 테스트를 수월하게 할 수 있게끔 해준다.`),L9.forEach(s),Wr=r(n),Ft=o(n,"P",{});var G9=c(Ft);s5=p(G9,"아래의 예제를 살펴보자."),G9.forEach(s),Kr=r(n),Pa=o(n,"PRE",{class:!0});var JP=c(Pa);JP.forEach(s),Qr=r(n),an=o(n,"P",{});var Za=c(an);Ec=o(Za,"CODE",{});var A9=c(Ec);a5=p(A9,"Processor"),A9.forEach(s),t5=p(Za,"라는 구조체 타입과 "),vc=o(Za,"CODE",{});var N9=c(vc);p5=p(N9,"MathSolver"),N9.forEach(s),e5=p(Za,"라는 인터페이스 타입을 작성하였다. "),bc=o(Za,"CODE",{});var B9=c(bc);o5=p(B9,"MathSolver"),B9.forEach(s),c5=p(Za,"의 구현체는 추후 작성할 것이다."),Za.forEach(s),$r=r(n),tn=o(n,"P",{});var ha=c(tn);_c=o(ha,"CODE",{});var g9=c(_c);l5=p(g9,"Processor"),g9.forEach(s),u5=p(ha,"는 "),mc=o(ha,"CODE",{});var H9=c(mc);i5=p(H9,"io.Reader"),H9.forEach(s),r5=p(ha,"로부터 표현식을 읽어 계산된 값을 반환하는 메소드 "),wc=o(ha,"CODE",{});var I9=c(wc);k5=p(I9,"ProcessExpression()"),I9.forEach(s),f5=p(ha,"를 가지고 있다."),ha.forEach(s),zr=r(n),ya=o(n,"PRE",{class:!0});var VP=c(ya);VP.forEach(s),Jr=r(n),Dn=o(n,"P",{});var Hl=c(Dn);Pc=o(Hl,"CODE",{});var F9=c(Pc);d5=p(F9,"ProcessExpression()"),F9.forEach(s),E5=p(Hl,`을 테스트하기 위한 코드를 작성해보자.
먼저, 필요한 것은 `),yc=o(Hl,"CODE",{});var U9=c(yc);v5=p(U9,"Reslove()"),U9.forEach(s),b5=p(Hl," 메소드를 충족시키는 간단한 Stub을 정의하는 것이다."),Hl.forEach(s),Vr=r(n),Ca=o(n,"PRE",{class:!0});var XP=c(Ca);XP.forEach(s),Xr=r(n),Ut=o(n,"P",{});var j9=c(Ut);_5=p(j9,"다음으로, 이 Stub을 사용하는 유닛 테스트를 작성하는 것이다. 실제로는 에러 메시지에 대한 검증까지도 해야 하지만, 테스트의 간소화를 위해 생략하였다."),j9.forEach(s),Yr=r(n),Da=o(n,"PRE",{class:!0});var YP=c(Da);YP.forEach(s),Zr=r(n),jt=o(n,"P",{});var q9=c(jt);m5=p(q9,"이렇게 작성한 코드에 대해 테스트를 돌려 보면, 잘 동작함을 확인할 수 있다."),q9.forEach(s),hr=r(n),nk=o(n,"BR",{}),sk=r(n),qt=o(n,"P",{});var W9=c(qt);w5=p(W9,`대부분의 Go의 인터페이스는 1개 내지는 2개 정도의 메소드만을 명시하지만, 가끔은 그 이상의 많은 메소드를 가진 인터페이스를 작성하게 될 떄도 있을 것이다.
가령, 아래와 같은 인터페이스가 있다고 해보자.`),W9.forEach(s),ak=r(n),Ta=o(n,"PRE",{class:!0});var ZP=c(Ta);ZP.forEach(s),tk=r(n),Wt=o(n,"P",{});var K9=c(Wt);P5=p(K9,"이렇게 거대한 인터페이스의 테스트 코드를 작성하는 방법은 크게 두 가지 패턴이 있다."),K9.forEach(s),pk=r(n),Kt=o(n,"P",{});var Q9=c(Kt);y5=p(Q9,`하나는 구조체에 인터페이스를 임베드하는 것이다.
인터페이스를 구조체에 임베딩하면 자동으로 인터페이스의 모든 메소드가 구조체에서 정의된다.
다만 메소드에 대한 구현이 되는 것까진 아니기 때문에, 현재 테스트에서 사용할 메소드는 구현해주어야 한다.`),Q9.forEach(s),ek=r(n),Oa=o(n,"PRE",{class:!0});var hP=c(Oa);hP.forEach(s),ok=r(n),_=o(n,"P",{});var S=c(_);C5=p(S,"위와 같이, "),Cc=o(S,"CODE",{});var $9=c(Cc);D5=p($9,"Entities"),$9.forEach(s),T5=p(S,"를 필드로 갖는 구조체 "),Dc=o(S,"CODE",{});var z9=c(Dc);O5=p(z9,"Logic"),z9.forEach(s),x5=p(S,"과 테스트하고자 하는 메소드인 "),Tc=o(S,"CODE",{});var J9=c(Tc);R5=p(J9,"GetPetNames()"),J9.forEach(s),M5=p(S,`를 작성하였다.
이 메소드에서는 `),Oc=o(S,"CODE",{});var V9=c(Oc);S5=p(V9,"Entities"),V9.forEach(s),L5=p(S,"의 "),xc=o(S,"CODE",{});var X9=c(xc);G5=p(X9,"GetPets()"),X9.forEach(s),A5=p(S,` 메소드 하나밖에 사용하지 않는다.
따라서 `),Rc=o(S,"CODE",{});var Y9=c(Rc);N5=p(Y9,"Entities"),Y9.forEach(s),B5=p(S,"의 모든 메소드에 대한 Stub을 만들어주기 보단, "),Mc=o(S,"CODE",{});var Z9=c(Mc);g5=p(Z9,"GetPets()"),Z9.forEach(s),H5=p(S,"의 Stub만 만들어주는 게 편할 것이다."),S.forEach(s),ck=r(n),dn=o(n,"P",{});var up=c(dn);I5=p(up,"아래처럼, "),Sc=o(up,"CODE",{});var h9=c(Sc);F5=p(h9,"Entities"),h9.forEach(s),U5=p(up,"를 임베딩하는 구조체를 만들고, "),Lc=o(up,"CODE",{});var nw=c(Lc);j5=p(nw,"GetPets()"),nw.forEach(s),q5=p(up,"의 Stub을 만들어보자."),up.forEach(s),lk=r(n),xa=o(n,"PRE",{class:!0});var ny=c(xa);ny.forEach(s),uk=r(n),F=o(n,"P",{});var Sn=c(F);Gc=o(Sn,"CODE",{});var sw=c(Gc);W5=p(sw,"GetPetNamesStub"),sw.forEach(s),K5=p(Sn,"에서 "),Ac=o(Sn,"CODE",{});var aw=c(Ac);Q5=p(aw,"GetPets()"),aw.forEach(s),$5=p(Sn,"를 제외한 다른 메소드들은 구현되지 않긴 하지만 정의는 되어 있으므로 "),Nc=o(Sn,"CODE",{});var tw=c(Nc);z5=p(tw,"Entities"),tw.forEach(s),J5=p(Sn,`를 충족시킨다.
따라서 위처럼 `),Bc=o(Sn,"CODE",{});var pw=c(Bc);V5=p(pw,"GetPets()"),pw.forEach(s),X5=p(Sn,"만 작성해도 된다."),Sn.forEach(s),ik=r(n),rs=o(n,"P",{});var Kf=c(rs);Y5=p(Kf,"이제 "),gc=o(Kf,"CODE",{});var ew=c(gc);Z5=p(ew,"GetPetNames()"),ew.forEach(s),h5=p(Kf,"의 유닛 테스트를 작성할 수 있다. 테스트 코드를 작성해보자!"),Kf.forEach(s),rk=r(n),Ra=o(n,"PRE",{class:!0});var sy=c(Ra);sy.forEach(s),kk=r(n),w=o(n,"P",{});var H=c(w);n0=p(H,"이대로 "),Hc=o(H,"CODE",{});var ow=c(Hc);s0=p(ow,"go test"),ow.forEach(s),a0=p(H,"를 실행하면 아마 "),Ic=o(H,"CODE",{});var cw=c(Ic);t0=p(cw,"case1"),cw.forEach(s),p0=p(H,", "),Fc=o(H,"CODE",{});var lw=c(Fc);e0=p(lw,"case2"),lw.forEach(s),o0=p(H,"에서 테스트를 통과하지 못할 텐데, "),Uc=o(H,"CODE",{});var uw=c(Uc);c0=p(uw,"GetPetNames()"),uw.forEach(s),l0=p(H,"에 작은 버그가 있어서 그렇다. 에러를 해결하고 나면 "),jc=o(H,"CODE",{});var iw=c(jc);u0=p(iw,"case1"),iw.forEach(s),i0=p(H,", "),qc=o(H,"CODE",{});var rw=c(qc);r0=p(rw,"case2"),rw.forEach(s),k0=p(H,"를 통과하는 것을 볼 수 있을 것이다."),H.forEach(s),fk=r(n),Qt=o(n,"P",{});var kw=c(Qt);f0=p(kw,"이처럼 인터페이스를 구조체에 임베드하여 사용하는 경우, 구현하지 않은 메소드를 호출해선 안된다. 아마 테스트 중 panic이 발생할 것이다! 따라서 인터페이스의 메소드 중, 테스트하는 함수에서 사용되는 것은 반드시 구현해줘야 한다."),kw.forEach(s),dk=r(n),Ek=o(n,"BR",{}),vk=r(n),$t=o(n,"P",{});var fw=c($t);d0=p(fw,`인터페이스에서 1~2개 정도의 메소드를 구현하는 것은 단일 테스트에서는 별 문제가 없다.
하지만 입/출력이 다른 여러 테스트에서 동일한 메소드를 호출해야 할 때 문제가 발생할 수 있다.
이런 경우, 모든 테스트에 대해 가능한 모든 결과를 구현체 내에 포함하거나, 각 테스트에 대해 구현체를 다시 작성해야 한다.
이러한 구현체는 이해하거나 유지보수하기 매우 어려울 것이다.`),fw.forEach(s),bk=r(n),ks=o(n,"P",{});var Qf=c(ks);E0=p(Qf,`더 좋은 방식은 함수 필드를 통해 우회하여 메소를 호출하는 Stub 구조체를 만드는 것이다.
`),Wc=o(Qf,"CODE",{});var dw=c(Wc);v0=p(dw,"Entities"),dw.forEach(s),b0=p(Qf,"에 정의된 각 메소드와 일치하게끔, Stub 구조체의 함수 필드를 정의해준다."),Qf.forEach(s),_k=r(n),Ma=o(n,"PRE",{class:!0});var ay=c(Ma);ay.forEach(s),mk=r(n),Tn=o(n,"P",{});var Il=c(Tn);Kc=o(Il,"CODE",{});var Ew=c(Kc);_0=p(Ew,"EntitiesStub"),Ew.forEach(s),m0=p(Il,"에 함수 필드를 정의하고, "),Qc=o(Il,"CODE",{});var vw=c(Qc);w0=p(vw,"Entities"),vw.forEach(s),P0=p(Il,` 인터페이스를 충족시키게끔 메소드를 정의해준다.
각각의 메소드에서는 대응되는 함수 필드를 호출한다.`),Il.forEach(s),wk=r(n),Sa=o(n,"PRE",{class:!0});var ty=c(Sa);ty.forEach(s),Pk=r(n),M=o(n,"P",{});var Z=c(M);y0=p(Z,`위 예제의 Table test에서는 ‘data’ 구조체에 함수 필드를 추가해주었으며, getPets를 호출했을 때 반환할 데이터를 이 함수 필드에 명시할 수 있다.
이와 같이 Stub을 작성하는 경우, 각 테스트 케이스에서 Stub이 반환해야 하는 값이 확실하다는 장점이 있다.
각 테스트마다 새로운 `),$c=o(Z,"CODE",{});var bw=c($c);C0=p(bw,"EntitiesStub"),bw.forEach(s),D0=p(Z," 인스턴스가 생성되고, "),zc=o(Z,"CODE",{});var _w=c(zc);T0=p(_w,"EntitiesStub"),_w.forEach(s),O0=p(Z,"의 함수 필드인 "),Jc=o(Z,"CODE",{});var mw=c(Jc);x0=p(mw,"getPets()"),mw.forEach(s),R0=p(Z,"에는 "),Vc=o(Z,"CODE",{});var ww=c(Vc);M0=p(ww,"data"),ww.forEach(s),S0=p(Z,"에 명시된 함수 필드가 할당되므로, 직접 작성한 테스트 데이터로 "),Xc=o(Z,"CODE",{});var Pw=c(Xc);L0=p(Pw,"GetPetNames()"),Pw.forEach(s),G0=p(Z,"를 테스트할 수 있다."),Z.forEach(s),yk=r(n),fs=o(n,"BLOCKQUOTE",{});var $f=c(fs);Yc=o($f,"P",{});var yw=c(Yc);A0=p(yw,`Mock과 Stub은 자주 혼용되는 단어이지만 실제로는 서로 다른 개념이다.
요약하자면 Stub은 주어진 입력에 대한 출력값을 검사하는 것이라면, Mock은 주어진 입력에 대해 일련의 호출이 예상된 순서로 발생하는지 검사하는 것이다.`),yw.forEach(s),N0=r($f),On=o($f,"P",{});var ip=c(On);B0=p(ip,`본 장에서 Stub 코드를 작성하였듯, Mock 관련 코드도 작성할 수 있다.
가장 유명한 Mock 괸련 라이브러리는 구글의 `),La=o(ip,"A",{href:!0,rel:!0});var Cw=c(La);g0=p(Cw,"gomock"),Cw.forEach(s),H0=p(ip,"과 Stretchr사의 "),Ga=o(ip,"A",{href:!0,rel:!0});var Dw=c(Ga);I0=p(Dw,"testify"),Dw.forEach(s),F0=p(ip,`이다.
후자가 github star 수는 더 높다!`),ip.forEach(s),$f.forEach(s),Ck=r(n),Dk=o(n,"BR",{}),Tk=o(n,"BR",{}),Ok=r(n),ds=o(n,"H2",{id:!0});var Q4=c(ds);Es=o(Q4,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Tw=c(Es);Zc=o(Tw,"SPAN",{class:!0}),c(Zc).forEach(s),Tw.forEach(s),U0=p(Q4,"httptest"),Q4.forEach(s),xk=r(n),vs=o(n,"P",{});var zf=c(vs);j0=p(zf,`HTTP 서비스를 호출하는 함수의 테스트 코드를 작성하는 것은 쉽지 않다.
보통 이런 경우 Integration test가 되며, 함수가 호출하는 서비스의 테스트 인스턴스를 준비해야 했다.
하지만 Go는 표준 라이브러리에 `),hc=o(zf,"CODE",{});var Ow=c(hc);q0=p(Ow,"net/http/httptest"),Ow.forEach(s),W0=p(zf," 패키지를 포함하고 있으며, 덕분에 HTTP 서비스의 stub을 작성하기가 굉장히 쉽다."),zf.forEach(s),Rk=r(n),Aa=o(n,"P",{});var $4=c(Aa);nl=o($4,"CODE",{});var xw=c(nl);K0=p(xw,"solver"),xw.forEach(s),Q0=p($4," 패키지로 되돌아가서, 표현식을 평가하기 위해 HTTP 서비스를 호출하는 MathSolver의 구현체를 작성해보자."),$4.forEach(s),Mk=r(n),Na=o(n,"PRE",{class:!0});var py=c(Na);py.forEach(s),Sk=r(n),J=o(n,"P",{});var Fs=c(J);$0=p(Fs,"이제, "),sl=o(Fs,"CODE",{});var Rw=c(sl);z0=p(Rw,"httptest"),Rw.forEach(s),J0=p(Fs,` 라이브러리를 사용하여 서버를 구축하지 않고 이 코드를 테스트할 것이다.
먼저, 함수로 전달된 데이터가 서버에 도착하는지 확인해야 한다.
따라서 테스트 함수 안에서 입력과 출력을 저장할 `),al=o(Fs,"CODE",{});var Mw=c(al);V0=p(Mw,"info"),Mw.forEach(s),X0=p(Fs,"라고 하는 타입을 선언하고, 현재 입출력이 할당될 "),tl=o(Fs,"CODE",{});var Sw=c(tl);Y0=p(Sw,"io"),Sw.forEach(s),Z0=p(Fs,"라는 변수를 정의한다."),Fs.forEach(s),Lk=r(n),Ba=o(n,"PRE",{class:!0});var ey=c(Ba);ey.forEach(s),Gk=r(n),bs=o(n,"P",{});var Jf=c(bs);h0=p(Jf,"다음으로, 가짜 원격 서버를 구축하고 이를 사용하여 "),pl=o(Jf,"CODE",{});var Lw=c(pl);n_=p(Lw,"RemoteSolver"),Lw.forEach(s),s_=p(Jf," 인스턴스를 구성한다."),Jf.forEach(s),Ak=r(n),ga=o(n,"PRE",{class:!0});var oy=c(ga);oy.forEach(s),Nk=r(n),D=o(n,"P",{});var j=c(D);el=o(j,"CODE",{});var Gw=c(el);a_=p(Gw,"httptest.NewServer()"),Gw.forEach(s),t_=p(j," 함수는 사용되지 않는 무작위 포트에 http 서버를 열며, 요청을 처리하기 위한 "),ol=o(j,"CODE",{});var Aw=c(ol);p_=p(Aw,"http.Handler"),Aw.forEach(s),e_=p(j,` 구현체를 설정해주어야 한다.
이것은 서버이기 때문에 테스트가 끝나면 닫아줘야 한다. 위 예제에서는 `),cl=o(j,"CODE",{});var Nw=c(cl);o_=p(Nw,"defer"),Nw.forEach(s),c_=p(j,"를 통해 close한다. 그리고 "),ll=o(j,"CODE",{});var Bw=c(ll);l_=p(Bw,"URL"),Bw.forEach(s),u_=p(j,"과 "),ul=o(j,"CODE",{});var gw=c(ul);i_=p(gw,"http.Client"),gw.forEach(s),r_=p(j,"를 "),il=o(j,"CODE",{});var Hw=c(il);k_=p(Hw,"RemoteSolver"),Hw.forEach(s),f_=p(j,"에 전달한다."),j.forEach(s),Bk=r(n),zt=o(n,"P",{});var Iw=c(zt);d_=p(Iw,"이렇게 셋업하고 나면, 테스트 함수의 나머지 부분은 다른 Table test와 크게 다를 바 없다."),Iw.forEach(s),gk=r(n),Ha=o(n,"PRE",{class:!0});var cy=c(Ha);cy.forEach(s),Hk=r(n),_s=o(n,"P",{});var Vf=c(_s);E_=p(Vf,"위 코드에서 변수 "),rl=o(Vf,"CODE",{});var Fw=c(rl);v_=p(Fw,"io"),Fw.forEach(s),b_=p(Vf,`는 Stub 서버용과 테스트 함수 양쪽에서 Closure에 의해 캡처된다.
테스트 코드 쪽에서 write, Stub 쪽에서 read가 일어나는데, 이와 같은 방식은 이러한 테스트 코드라면 몰라도 프로덕션 코드에서는 지양해야 한다.`),Vf.forEach(s),Ik=r(n),Fk=o(n,"BR",{}),Uk=o(n,"BR",{}),jk=r(n),ms=o(n,"H2",{id:!0});var z4=c(ms);ws=o(z4,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Uw=c(ws);kl=o(Uw,"SPAN",{class:!0}),c(kl).forEach(s),Uw.forEach(s),__=p(z4,"Integration Test"),z4.forEach(s),qk=r(n),Ia=o(n,"P",{});var J4=c(Ia);fl=o(J4,"CODE",{});var jw=c(fl);m_=p(jw,"httptest"),jw.forEach(s),w_=p(J4," 등을 쓰면 외부 서비스에 대한 테스트를 생략할 수 있지만, Integration Test를 작성해야 할 때가 올 것이며, 이를 통해 서비스 API에 대한 이해가 올바른지 확인할 수 있을 것이다."),J4.forEach(s),Wk=r(n),Jt=o(n,"P",{});var qw=c(Jt);P_=p(qw,`문제는 자동화된 테스트를 그룹화하는 방법을 찾는 것이다.
적랍한 환경이 있는 경우에만 Integration Test를 실행해야 할 것이며, 일반적으로 Integration Test는 Unit Test보다 느리기 때문에 자주 실행하진 않을 것이다.`),qw.forEach(s),Kk=r(n),En=o(n,"P",{});var rp=c(En);y_=p(rp,"Go의 컴파일러는 코드를 컴파일할 때 "),dl=o(rp,"EM",{});var Ww=c(dl);C_=p(Ww,"build tag"),Ww.forEach(s),D_=p(rp,`를 사용할 수 있게 해준다.
빌드 태그는 파일의 첫 번째 줄에 `),El=o(rp,"CODE",{});var Kw=c(El);T_=p(Kw,"// +build"),Kw.forEach(s),O_=p(rp,`로 시작하는 주석을 달아서 지정할 수 있다.
빌드 태그의 원래 의도는 서로 다른 코드가 다른 플랫폼에서 컴파일될 수 있게끔 하기 위한 것이지만, 테스트 그룹을 나눌 때도 유용하다.
빌드 태그가 없는 파일의 테스트는 항상 실행되며, 이들은 외부 리소스에 의존하지 않는 Unit test이다.
반면 빌드 태그가 있는 테스트는 필요한 리소스가 있을 때만 실행된다.`),rp.forEach(s),Qk=r(n),Vt=o(n,"P",{});var Qw=c(Vt);x_=p(Qw,`solver 패키지로 돌아와서, Integration Test를 작성할 것이다.
그 이전에 다음과 같은 Docker 명령어를 쳐서 서버 이미지를 다운받고, 8080 포트로 로컬 서버를 열어보자.`),Qw.forEach(s),$k=r(n),Fa=o(n,"PRE",{class:!0});var ly=c(Fa);ly.forEach(s),zk=r(n),Xt=o(n,"P",{});var $w=c(Xt);R_=p($w,"이제 Resolve 메소드가 서버와 잘 통신하는지 테스트하는 Integration Test를 작성해볼 것이다."),$w.forEach(s),Jk=r(n),Ua=o(n,"PRE",{class:!0});var uy=c(Ua);uy.forEach(s),Vk=r(n),Ps=o(n,"P",{});var Xf=c(Ps);M_=p(Xf,"파일의 맨 처음 부분은 "),vl=o(Xf,"CODE",{});var zw=c(vl);S_=p(zw,"// +build integration"),zw.forEach(s),L_=p(Xf,"로 시작하며, 다른 부분은 이전에 작성하였던 table test와 크게 다르지 않다!"),Xf.forEach(s),Xk=r(n),Yt=o(n,"P",{});var Jw=c(Yt);G_=p(Jw,"이렇게, 빌드 태그를 지정한 테스트를 실행하려면 다음과 같이 명령어를 실행하면 된다."),Jw.forEach(s),Yk=r(n),ja=o(n,"PRE",{class:!0});var iy=c(ja);iy.forEach(s),Zk=r(n),xn=o(n,"P",{});var Fl=c(xn);bl=o(Fl,"CODE",{});var Vw=c(bl);A_=p(Vw,"-v"),Vw.forEach(s),N_=p(Fl,` 플래그로 인해 어떤 테스트가 실행되었나 확인할 수 있을 것이다.
앞서 설명하였듯, 테스트 태그를 지정하지 않은 테스트들도 `),_l=o(Fl,"CODE",{});var Xw=c(_l);B_=p(Xw,"integration"),Xw.forEach(s),g_=p(Fl," 태그의 테스트와 함께 모두 실행된 것을 확인할 수 있다."),Fl.forEach(s),hk=r(n),ys=o(n,"BLOCKQUOTE",{});var Yf=c(ys);Cs=o(Yf,"P",{});var Ul=c(Cs);ml=o(Ul,"CODE",{});var Yw=c(ml);H_=p(Yw,"go test"),Yw.forEach(s),I_=p(Ul,"에는 "),wl=o(Ul,"CODE",{});var Zw=c(wl);F_=p(Zw,"-short"),Zw.forEach(s),U_=p(Ul,` 플래그를 통해 테스트 시간이 오래 소요되는 항목을 생략할 수 있는 기능이 있다.
다만 short flag를 사용하면 안된다는 목소리도 있고, 좀 의견이 분분한 모양이다.`),Ul.forEach(s),j_=r(Yf),qa=o(Yf,"P",{});var Zf=c(qa);q_=p(Zf,"short flag에 대해 알고 싶다면 "),Wa=o(Zf,"A",{href:!0,rel:!0});var hw=c(Wa);W_=p(hw,"여기"),hw.forEach(s),K_=p(Zf,"를 참고하자."),Zf.forEach(s),Yf.forEach(s),nf=r(n),sf=o(n,"BR",{}),af=o(n,"BR",{}),tf=r(n),Ds=o(n,"H2",{id:!0});var V4=c(Ds);Ts=o(V4,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var n8=c(Ts);Pl=o(n8,"SPAN",{class:!0}),c(Pl).forEach(s),n8.forEach(s),Q_=p(V4,"Race Checker"),V4.forEach(s),pf=r(n),Os=o(n,"P",{});var hf=c(Os);$_=p(hf,`동시성 문제를 해결하기 위해 Go에서는 여러 가지 지원을 해주지만, 버그는 여전히 발생할 수 있다.
이를테면 서로 다른 고루틴이 lock 없이 하나의 변수에 접근하는 일은 충분히 발생할 수 있는 일이다.
이러한 상황을 `),yl=o(hf,"EM",{});var s8=c(yl);z_=p(s8,"data race"),s8.forEach(s),J_=p(hf,"라고 한다."),hf.forEach(s),ef=r(n),xs=o(n,"P",{});var n1=c(xs);V_=p(n1,"Go에서는 "),Cl=o(n1,"EM",{});var a8=c(Cl);X_=p(a8,"Race Checker"),a8.forEach(s),Y_=p(n1,`를 통해 이러한 버그를 찾아내는 데 도움을 받을 수 있다.
코드에서 모든 data race를 찾아낸다고 보장하지는 않지만, data race를 찾을 경우 찾은 데이터에 적절한 lock을 설정해줘야 한다.`),n1.forEach(s),of=r(n),Zt=o(n,"P",{});var t8=c(Zt);Z_=p(t8,"다음의 예제를 살펴보자."),t8.forEach(s),cf=r(n),Ka=o(n,"PRE",{class:!0});var ry=c(Ka);ry.forEach(s),lf=r(n),Rs=o(n,"P",{});var s1=c(Rs);h_=p(s1,"만약 race condition을 배제한다면, "),Dl=o(s1,"CODE",{});var p8=c(Dl);n4=p(p8,"getCounter()"),p8.forEach(s),s4=p(s1,"의 반환값은 5000일 것이다. 하지만 race condition때문에 현실은 그렇지가 않다. 테스트 함수를 작성해보자."),s1.forEach(s),uf=r(n),Qa=o(n,"PRE",{class:!0});var ky=c(Qa);ky.forEach(s),rf=r(n),Ms=o(n,"P",{});var a1=c(Ms);a4=p(a1,`간단한 테스트 함수이다. 출력된 결과가 예상값인 5000인지 아닌지만 테스트해주고 있다.
`),Tl=o(a1,"CODE",{});var e8=c(Tl);t4=p(e8,"go test"),e8.forEach(s),p4=p(a1,"를 입력하여 테스트를 수행하면,"),a1.forEach(s),kf=r(n),$a=o(n,"PRE",{class:!0});var fy=c($a);fy.forEach(s),ff=r(n),ht=o(n,"P",{});var o8=c(ht);e4=p(o8,"테스트를 통과할 때도 있지만, 가끔 이렇게 결과가 5000이 아닐 때가 있다!"),o8.forEach(s),df=r(n),vn=o(n,"P",{});var kp=c(vn);o4=p(kp,"공유된 변수 "),Ol=o(kp,"CODE",{});var c8=c(Ol);c4=p(c8,"counter"),c8.forEach(s),l4=p(kp,`에 접근하여 값을 증가시키는 과정에서, data race로 인해 변수의 값 갱신이 누락되는 현상이 생기는 것이다.
아주 간단한 예제를 소개했지만, 실제로 코드에서는 data race를 유발하는 원인을 훨씬 찾기 힘들 것이다.
그만큼 `),xl=o(kp,"EM",{});var l8=c(xl);u4=p(l8,"Race Checker"),l8.forEach(s),i4=p(kp,"가 상당히 유용하게 사용될 수 있다!"),kp.forEach(s),Ef=r(n),pn=o(n,"P",{});var nt=c(pn);Rl=o(nt,"EM",{});var u8=c(Rl);r4=p(u8,"Race Checker"),u8.forEach(s),k4=p(nt,"를 사용하려면 "),Ml=o(nt,"CODE",{});var i8=c(Ml);f4=p(i8,"go test"),i8.forEach(s),d4=p(nt," 명령어에 "),Sl=o(nt,"CODE",{});var r8=c(Sl);E4=p(r8,"-race"),r8.forEach(s),v4=p(nt," 플래그를 붙이면 된다."),nt.forEach(s),vf=r(n),za=o(n,"PRE",{class:!0});var dy=c(za);dy.forEach(s),bf=r(n),np=o(n,"P",{});var k8=c(np);b4=p(k8,"이처럼 race condition을 유발하는 코드 라인, 고루틴이 생성된 라인 등을 추적해준다."),k8.forEach(s),_f=r(n),mf=o(n,"BR",{}),wf=r(n),bn=o(n,"P",{});var fp=c(bn);_4=p(fp,"프로그램을 빌드할 때도 "),Ll=o(fp,"CODE",{});var f8=c(Ll);m4=p(f8,"-race"),f8.forEach(s),w4=p(fp," 플래그를 붙여서 race checker를 실행할 수 있다. 이렇게 하면 빌드 이전에 테스트를 거치지 않고도 data race를 추적해볼 수 있다. 다만 "),Gl=o(fp,"CODE",{});var d8=c(Gl);P4=p(d8,"-race"),d8.forEach(s),y4=p(fp," 플래그가 붙은 채로 빌드된 바이너리는 속도가 매우 느리기 때문에, 프로덕션 코드에서는 절대 권장되지 않는다."),fp.forEach(s),Pf=r(n),yf=o(n,"BR",{}),Cf=o(n,"BR",{}),Df=r(n),Ss=o(n,"H2",{id:!0});var X4=c(Ss);Ls=o(X4,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var E8=c(Ls);Al=o(E8,"SPAN",{class:!0}),c(Al).forEach(s),E8.forEach(s),C4=p(X4,"References"),X4.forEach(s),Tf=r(n),Of=o(n,"HR",{}),xf=r(n),sp=o(n,"CENTER",{});var v8=c(sp);Rn=o(v8,"P",{});var dp=c(Rn);Ja=o(dp,"A",{href:!0,rel:!0});var b8=c(Ja);ap=o(b8,"IMG",{src:!0,alt:!0}),b8.forEach(s),D4=r(dp),T4=o(dp,"BR",{}),O4=r(dp),Va=o(dp,"A",{href:!0,rel:!0});var _8=c(Va);x4=p(_8,"Jon Bodner, 『Learning Go』, O’Reilly Media, Inc."),_8.forEach(s),dp.forEach(s),v8.forEach(s),Rf=r(n),Mf=o(n,"BR",{}),Sf=o(n,"BR",{}),this.h()},h(){k(Ep,"class","icon icon-link"),k(Gn,"aria-hidden","true"),k(Gn,"tabindex","-1"),k(Gn,"href","#introduction"),k(Ln,"id","introduction"),k(vp,"class","icon icon-link"),k(Nn,"aria-hidden","true"),k(Nn,"tabindex","-1"),k(Nn,"href","#the-basics-of-testing"),k(An,"id","the-basics-of-testing"),k(Us,"class","language-go"),k(js,"class","language-go"),k(qs,"class","language-text"),k(Ws,"class","language-go"),k(Fp,"class","icon icon-link"),k(gn,"aria-hidden","true"),k(gn,"tabindex","-1"),k(gn,"href","#reporting-test-failures"),k(Bn,"id","reporting-test-failures"),k(Ks,"class","language-go"),k(ce,"class","icon icon-link"),k(In,"aria-hidden","true"),k(In,"tabindex","-1"),k(In,"href","#setting-up-and-tearing-down"),k(Hn,"id","setting-up-and-tearing-down"),k(Qs,"class","language-go"),k(zs,"class","language-text"),k(Js,"class","language-go"),k(Be,"class","icon icon-link"),k(Wn,"aria-hidden","true"),k(Wn,"tabindex","-1"),k(Wn,"href","#storing-sample-test-data"),k(qn,"id","storing-sample-test-data"),k(Vs,"href","https://github.com/learning-go-book/test_examples/tree/master/text"),k(Vs,"rel","nofollow"),k(je,"class","icon icon-link"),k($n,"aria-hidden","true"),k($n,"tabindex","-1"),k($n,"href","#testing-your-public-api"),k(Qn,"id","testing-your-public-api"),k(Xs,"class","language-go"),k(Ys,"class","language-go"),k(so,"class","icon icon-link"),k(Vn,"aria-hidden","true"),k(Vn,"tabindex","-1"),k(Vn,"href","#use-go-cmp-to-compare-test-results"),k(Jn,"id","use-go-cmp-to-compare-test-results"),k(Zs,"class","language-go"),k(hs,"class","language-go"),k(na,"class","language-text"),k(sa,"class","language-go"),k(aa,"href","https://pkg.go.dev/github.com/google/go-cmp@v0.5.9/cmp"),k(aa,"rel","nofollow"),k(Do,"class","icon icon-link"),k(Zn,"aria-hidden","true"),k(Zn,"tabindex","-1"),k(Zn,"href","#table-tests"),k(Yn,"id","table-tests"),k(ta,"class","language-go"),k(pa,"class","language-go"),k(ea,"class","language-go"),k(oa,"class","language-text"),k(Io,"class","icon icon-link"),k(as,"aria-hidden","true"),k(as,"tabindex","-1"),k(as,"href","#code-coverage"),k(ss,"id","code-coverage"),k(ca,"class","language-text"),k(la,"class","language-text"),k(ua,"class","language-text"),k(ia,"class","language-text"),m8(bt.src,Z4="/post_img/Go/Golang_basics/GO13/2023-02-08-01-35-22.png")||k(bt,"src",Z4),k(bt,"alt","go cover screenshot"),k(ra,"class","language-go"),k(ka,"class","language-text"),k(zo,"class","icon icon-link"),k(os,"aria-hidden","true"),k(os,"tabindex","-1"),k(os,"href","#benchmarks"),k(es,"id","benchmarks"),k(fa,"class","language-go"),k(da,"class","language-go"),k(Ea,"class","language-go"),k(va,"class","language-text"),k(ba,"class","language-go"),k(_a,"class","language-text"),k(wa,"href","https://oreil.ly/HHe9c"),k(wa,"rel","nofollow"),k(dc,"class","icon icon-link"),k(is,"aria-hidden","true"),k(is,"tabindex","-1"),k(is,"href","#stubs"),k(us,"id","stubs"),k(Pa,"class","language-go"),k(ya,"class","language-go"),k(Ca,"class","language-go"),k(Da,"class","language-go"),k(Ta,"class","language-go"),k(Oa,"class","language-go"),k(xa,"class","language-go"),k(Ra,"class","language-go"),k(Ma,"class","language-go"),k(Sa,"class","language-go"),k(La,"href","https://github.com/golang/mock"),k(La,"rel","nofollow"),k(Ga,"href","https://github.com/stretchr/testify"),k(Ga,"rel","nofollow"),k(Zc,"class","icon icon-link"),k(Es,"aria-hidden","true"),k(Es,"tabindex","-1"),k(Es,"href","#httptest"),k(ds,"id","httptest"),k(Na,"class","language-go"),k(Ba,"class","language-go"),k(ga,"class","language-go"),k(Ha,"class","language-go"),k(kl,"class","icon icon-link"),k(ws,"aria-hidden","true"),k(ws,"tabindex","-1"),k(ws,"href","#integration-test"),k(ms,"id","integration-test"),k(Fa,"class","language-bash"),k(Ua,"class","language-go"),k(ja,"class","language-bash"),k(Wa,"href","https://learning.oreilly.com/library/view/learning-go/9781492077206/ch13.html#:-:text=Using%20the%20-short%20Flag"),k(Wa,"rel","nofollow"),k(Pl,"class","icon icon-link"),k(Ts,"aria-hidden","true"),k(Ts,"tabindex","-1"),k(Ts,"href","#race-checker"),k(Ds,"id","race-checker"),k(Ka,"class","language-go"),k(Qa,"class","language-go"),k($a,"class","language-text"),k(za,"class","language-text"),k(Al,"class","icon icon-link"),k(Ls,"aria-hidden","true"),k(Ls,"tabindex","-1"),k(Ls,"href","#references"),k(Ss,"id","references"),m8(ap.src,h4="https://learning.oreilly.com/covers/urn:orm:book:9781492077206/400w/")||k(ap,"src",h4),k(ap,"alt","Learning Go Book Cover"),k(Ja,"href","https://learning.oreilly.com/library/view/learning-go/9781492077206/"),k(Ja,"rel","nofollow"),k(Va,"href","https://learning.oreilly.com/library/view/learning-go/9781492077206/"),k(Va,"rel","nofollow")},m(n,l){u(n,st,l),u(n,jl,l),u(n,at,l),a(at,t1),u(n,ql,l),u(n,Wl,l),u(n,Kl,l),u(n,Ql,l),u(n,Ln,l),a(Ln,Gn),a(Gn,Ep),a(Ln,p1),u(n,$l,l),u(n,zl,l),u(n,Jl,l),u(n,tt,l),a(tt,e1),u(n,Vl,l),u(n,Xl,l),u(n,Yl,l),u(n,pt,l),a(pt,o1),u(n,Zl,l),u(n,hl,l),u(n,nu,l),u(n,su,l),u(n,An,l),a(An,Nn),a(Nn,vp),a(An,c1),u(n,au,l),u(n,tu,l),u(n,pu,l),u(n,q,l),a(q,l1),a(q,bp),a(bp,u1),a(q,i1),a(q,_p),a(_p,r1),a(q,k1),a(q,mp),a(mp,f1),a(q,d1),u(n,eu,l),u(n,et,l),a(et,E1),u(n,ou,l),u(n,Us,l),Us.innerHTML=P8,u(n,cu,l),u(n,ot,l),a(ot,v1),u(n,lu,l),u(n,js,l),js.innerHTML=y8,u(n,uu,l),u(n,W,l),a(W,b1),a(W,wp),a(wp,_1),a(W,m1),a(W,Pp),a(Pp,w1),a(W,P1),a(W,yp),a(yp,y1),a(W,C1),u(n,iu,l),u(n,O,l),a(O,D1),a(O,Cp),a(Cp,T1),a(O,O1),a(O,Dp),a(Dp,x1),a(O,R1),a(O,Tp),a(Tp,M1),a(O,S1),a(O,Op),a(Op,L1),a(O,G1),a(O,xp),a(xp,A1),a(O,N1),u(n,ru,l),u(n,cn,l),a(cn,B1),a(cn,Rp),a(Rp,g1),a(cn,H1),a(cn,Mp),a(Mp,I1),a(cn,F1),u(n,ku,l),u(n,K,l),a(K,U1),a(K,Sp),a(Sp,j1),a(K,q1),a(K,Lp),a(Lp,W1),a(K,K1),a(K,Gp),a(Gp,Q1),a(K,$1),u(n,fu,l),u(n,qs,l),qs.innerHTML=C8,u(n,du,l),u(n,Q,l),a(Q,z1),a(Q,Ap),a(Ap,J1),a(Q,V1),a(Q,Np),a(Np,X1),a(Q,Y1),a(Q,Bp),a(Bp,Z1),a(Q,h1),u(n,Eu,l),u(n,Ws,l),Ws.innerHTML=D8,u(n,vu,l),u(n,h,l),a(h,gp),a(gp,n2),a(h,s2),a(h,Hp),a(Hp,a2),a(h,t2),a(h,Ip),a(Ip,p2),a(h,e2),u(n,bu,l),u(n,_u,l),u(n,mu,l),u(n,wu,l),u(n,Bn,l),a(Bn,gn),a(gn,Fp),a(Bn,o2),u(n,Pu,l),u(n,L,l),a(L,Up),a(Up,c2),a(L,l2),a(L,jp),a(jp,u2),a(L,i2),a(L,qp),a(qp,r2),a(L,k2),a(L,Wp),a(Wp,f2),a(L,d2),a(L,Kp),a(Kp,E2),a(L,v2),u(n,yu,l),u(n,Ks,l),Ks.innerHTML=T8,u(n,Cu,l),u(n,b,l),a(b,Qp),a(Qp,b2),a(b,_2),a(b,$p),a($p,m2),a(b,w2),a(b,zp),a(zp,P2),a(b,y2),a(b,Jp),a(Jp,C2),a(b,D2),a(b,Vp),a(Vp,T2),a(b,O2),a(b,Xp),a(Xp,x2),a(b,R2),a(b,Yp),a(Yp,M2),a(b,S2),a(b,Zp),a(Zp,L2),a(b,G2),u(n,Du,l),u(n,E,l),a(E,A2),a(E,hp),a(hp,N2),a(E,B2),a(E,ne),a(ne,g2),a(E,H2),a(E,se),a(se,I2),a(E,F2),a(E,ae),a(ae,U2),a(E,j2),a(E,te),a(te,q2),a(E,W2),a(E,pe),a(pe,K2),a(E,Q2),a(E,ee),a(ee,$2),a(E,z2),a(E,oe),a(oe,J2),a(E,V2),u(n,Tu,l),u(n,Ou,l),u(n,xu,l),u(n,Ru,l),u(n,Hn,l),a(Hn,In),a(In,ce),a(Hn,X2),u(n,Mu,l),u(n,Fn,l),a(Fn,Y2),a(Fn,le),a(le,Z2),a(Fn,h2),u(n,Su,l),u(n,Qs,l),Qs.innerHTML=O8,u(n,Lu,l),u(n,f,l),a(f,ue),a(ue,nd),a(f,sd),a(f,ie),a(ie,ad),a(f,td),a(f,re),a(re,pd),a(f,ed),a(f,ke),a(ke,od),a(f,cd),a(f,fe),a(fe,ld),a(f,ud),a(f,de),a(de,id),a(f,rd),a(f,Ee),a(Ee,kd),a(f,fd),a(f,ve),a(ve,dd),a(f,Ed),a(f,be),a(be,vd),a(f,bd),a(f,_e),a(_e,_d),a(f,md),a(f,me),a(me,wd),a(f,Pd),a(f,we),a(we,yd),a(f,Cd),u(n,Gu,l),u(n,$s,l),a($s,Pe),a(Pe,Dd),a($s,Td),u(n,Au,l),u(n,zs,l),zs.innerHTML=x8,u(n,Nu,l),u(n,nn,l),a(nn,ye),a(ye,Od),a(nn,xd),a(nn,Ce),a(Ce,Rd),a(nn,Md),a(nn,De),a(De,Sd),a(nn,Ld),u(n,Bu,l),u(n,Un,l),a(Un,Te),a(Te,Gd),a(Un,Ad),a(Un,Oe),a(Oe,Nd),u(n,gu,l),u(n,jn,l),a(jn,Bd),a(jn,xe),a(xe,gd),a(jn,Hd),u(n,Hu,l),u(n,m,l),a(m,Re),a(Re,Id),a(m,Fd),a(m,Me),a(Me,Ud),a(m,jd),a(m,Se),a(Se,qd),a(m,Wd),a(m,Le),a(Le,Kd),a(m,Qd),a(m,Ge),a(Ge,$d),a(m,zd),a(m,Ae),a(Ae,Jd),a(m,Vd),a(m,Ne),a(Ne,Xd),a(m,Yd),u(n,Iu,l),u(n,Js,l),Js.innerHTML=R8,u(n,Fu,l),u(n,Uu,l),u(n,ju,l),u(n,qu,l),u(n,qn,l),a(qn,Wn),a(Wn,Be),a(qn,Zd),u(n,Wu,l),u(n,G,l),a(G,ge),a(ge,hd),a(G,nE),a(G,He),a(He,sE),a(G,aE),a(G,Ie),a(Ie,tE),a(G,pE),a(G,Fe),a(Fe,eE),a(G,oE),a(G,Ue),a(Ue,cE),a(G,lE),u(n,Ku,l),u(n,Kn,l),a(Kn,uE),a(Kn,Vs),a(Vs,iE),a(Kn,rE),u(n,Qu,l),u(n,$u,l),u(n,zu,l),u(n,Ju,l),u(n,Qn,l),a(Qn,$n),a($n,je),a(Qn,kE),u(n,Vu,l),u(n,ct,l),a(ct,fE),u(n,Xu,l),u(n,zn,l),a(zn,dE),a(zn,qe),a(qe,EE),a(zn,vE),u(n,Yu,l),u(n,$,l),a($,bE),a($,We),a(We,_E),a($,mE),a($,Ke),a(Ke,wE),a($,PE),a($,Qe),a(Qe,yE),a($,CE),u(n,Zu,l),u(n,Xs,l),Xs.innerHTML=M8,u(n,hu,l),u(n,ln,l),a(ln,DE),a(ln,$e),a($e,TE),a(ln,OE),a(ln,ze),a(ze,xE),a(ln,RE),u(n,ni,l),u(n,Ys,l),Ys.innerHTML=S8,u(n,si,l),u(n,x,l),a(x,ME),a(x,Je),a(Je,SE),a(x,LE),a(x,Ve),a(Ve,GE),a(x,AE),a(x,Xe),a(Xe,NE),a(x,BE),a(x,Ye),a(Ye,gE),a(x,HE),a(x,Ze),a(Ze,IE),a(x,FE),u(n,ai,l),u(n,un,l),a(un,UE),a(un,he),a(he,jE),a(un,qE),a(un,no),a(no,WE),a(un,KE),u(n,ti,l),u(n,pi,l),u(n,ei,l),u(n,oi,l),u(n,Jn,l),a(Jn,Vn),a(Vn,so),a(Jn,QE),u(n,ci,l),u(n,R,l),a(R,$E),a(R,ao),a(ao,zE),a(R,JE),a(R,to),a(to,VE),a(R,XE),a(R,po),a(po,YE),a(R,ZE),a(R,eo),a(eo,hE),a(R,n3),a(R,oo),a(oo,s3),a(R,a3),u(n,li,l),u(n,Zs,l),Zs.innerHTML=L8,u(n,ui,l),u(n,lt,l),a(lt,t3),u(n,ii,l),u(n,hs,l),hs.innerHTML=G8,u(n,ri,l),u(n,rn,l),a(rn,p3),a(rn,co),a(co,e3),a(rn,o3),a(rn,lo),a(lo,c3),a(rn,l3),u(n,ki,l),u(n,Pn,l),a(Pn,uo),a(uo,u3),a(Pn,i3),a(Pn,io),a(io,r3),a(Pn,k3),u(n,fi,l),u(n,na,l),na.innerHTML=A8,u(n,di,l),u(n,C,l),a(C,ro),a(ro,f3),a(C,d3),a(C,ko),a(ko,E3),a(C,v3),a(C,fo),a(fo,b3),a(C,_3),a(C,Eo),a(Eo,m3),a(C,w3),a(C,vo),a(vo,P3),a(C,y3),a(C,bo),a(bo,C3),a(C,D3),u(n,Ei,l),u(n,sa,l),sa.innerHTML=N8,u(n,vi,l),u(n,I,l),a(I,_o),a(_o,T3),a(I,O3),a(I,mo),a(mo,x3),a(I,R3),a(I,wo),a(wo,M3),a(I,S3),a(I,Po),a(Po,L3),a(I,G3),u(n,bi,l),u(n,Xn,l),a(Xn,A3),a(Xn,yo),a(yo,N3),a(Xn,B3),u(n,_i,l),u(n,yn,l),a(yn,Co),a(Co,g3),a(yn,H3),a(yn,aa),a(aa,I3),a(yn,F3),u(n,mi,l),u(n,wi,l),u(n,Pi,l),u(n,yi,l),u(n,Yn,l),a(Yn,Zn),a(Zn,Do),a(Yn,U3),u(n,Ci,l),u(n,Di,l),u(n,Ti,l),u(n,hn,l),a(hn,j3),a(hn,To),a(To,q3),a(hn,W3),u(n,Oi,l),u(n,ns,l),a(ns,K3),a(ns,Oo),a(Oo,Q3),a(ns,$3),u(n,xi,l),u(n,ta,l),ta.innerHTML=B8,u(n,Ri,l),u(n,ut,l),a(ut,z3),u(n,Mi,l),u(n,pa,l),pa.innerHTML=g8,u(n,Si,l),u(n,it,l),a(it,J3),u(n,Li,l),u(n,ea,l),ea.innerHTML=H8,u(n,Gi,l),u(n,v,l),a(v,V3),a(v,xo),a(xo,X3),a(v,Y3),a(v,Ro),a(Ro,Z3),a(v,h3),a(v,Mo),a(Mo,nv),a(v,sv),a(v,So),a(So,av),a(v,tv),a(v,Lo),a(Lo,pv),a(v,ev),a(v,Go),a(Go,ov),a(v,cv),a(v,Ao),a(Ao,lv),a(v,uv),a(v,No),a(No,iv),a(v,rv),u(n,Ai,l),u(n,oa,l),oa.innerHTML=I8,u(n,Ni,l),u(n,rt,l),a(rt,sn),a(sn,kv),a(sn,Bo),a(Bo,fv),a(sn,dv),a(sn,go),a(go,Ev),a(sn,vv),a(sn,Ho),a(Ho,bv),a(sn,_v),u(n,Bi,l),u(n,gi,l),u(n,Hi,l),u(n,Ii,l),u(n,ss,l),a(ss,as),a(as,Io),a(ss,mv),u(n,Fi,l),u(n,kt,l),a(kt,wv),u(n,Ui,l),u(n,ca,l),ca.innerHTML=F8,u(n,ji,l),u(n,z,l),a(z,Pv),a(z,Fo),a(Fo,yv),a(z,Cv),a(z,Uo),a(Uo,Dv),a(z,Tv),a(z,jo),a(jo,Ov),a(z,xv),u(n,qi,l),u(n,la,l),la.innerHTML=U8,u(n,Wi,l),u(n,ft,l),a(ft,Rv),u(n,Ki,l),u(n,ua,l),ua.innerHTML=j8,u(n,Qi,l),u(n,dt,l),a(dt,Mv),u(n,$i,l),u(n,zi,l),u(n,Ji,l),u(n,ts,l),a(ts,Sv),a(ts,qo),a(qo,Lv),a(ts,Gv),u(n,Vi,l),u(n,ia,l),ia.innerHTML=q8,u(n,Xi,l),u(n,Et,l),a(Et,Av),u(n,Yi,l),u(n,vt,l),a(vt,bt),u(n,Zi,l),u(n,_t,l),a(_t,Nv),u(n,hi,l),u(n,kn,l),a(kn,Bv),a(kn,Wo),a(Wo,gv),a(kn,Hv),a(kn,Ko),a(Ko,Iv),a(kn,Fv),u(n,nr,l),u(n,ra,l),ra.innerHTML=W8,u(n,sr,l),u(n,mt,l),a(mt,Uv),u(n,ar,l),u(n,ka,l),ka.innerHTML=K8,u(n,tr,l),u(n,ps,l),a(ps,jv),a(ps,Qo),a(Qo,qv),a(ps,Wv),u(n,pr,l),u(n,wt,l),a(wt,$o),a($o,Kv),u(n,er,l),u(n,or,l),u(n,cr,l),u(n,lr,l),u(n,es,l),a(es,os),a(os,zo),a(es,Qv),u(n,ur,l),u(n,Pt,l),a(Pt,$v),u(n,ir,l),u(n,yt,l),a(yt,zv),u(n,rr,l),u(n,fa,l),fa.innerHTML=Q8,u(n,kr,l),u(n,Ct,l),a(Ct,Jv),u(n,fr,l),u(n,Dt,l),a(Dt,Vv),u(n,dr,l),u(n,da,l),da.innerHTML=$8,u(n,Er,l),u(n,Tt,l),a(Tt,Xv),u(n,vr,l),u(n,Ot,l),a(Ot,Jo),a(Jo,Yv),u(n,br,l),u(n,_r,l),u(n,mr,l),u(n,N,l),a(N,Zv),a(N,Vo),a(Vo,hv),a(N,nb),a(N,Xo),a(Xo,sb),a(N,ab),a(N,Yo),a(Yo,tb),a(N,pb),a(N,Zo),a(Zo,eb),a(N,ob),u(n,wr,l),u(n,xt,l),a(xt,cb),u(n,Pr,l),u(n,Ea,l),Ea.innerHTML=z8,u(n,yr,l),u(n,fn,l),a(fn,lb),a(fn,ho),a(ho,ub),a(fn,ib),a(fn,nc),a(nc,rb),a(fn,kb),u(n,Cr,l),u(n,cs,l),a(cs,fb),a(cs,sc),a(sc,db),a(cs,Eb),u(n,Dr,l),u(n,B,l),a(B,vb),a(B,ac),a(ac,bb),a(B,_b),a(B,tc),a(tc,mb),a(B,wb),a(B,pc),a(pc,Pb),a(B,yb),a(B,ec),a(ec,Cb),a(B,Db),u(n,Tr,l),u(n,ls,l),a(ls,Tb),a(ls,oc),a(oc,Ob),a(ls,xb),u(n,Or,l),u(n,va,l),va.innerHTML=J8,u(n,xr,l),u(n,Rt,l),a(Rt,Rb),u(n,Rr,l),u(n,g,l),a(g,Mt),a(Mt,cc),a(cc,Mb),a(Mt,Sb),a(g,Lb),a(g,St),a(St,lc),a(lc,Gb),a(St,Ab),a(g,Nb),a(g,Lt),a(Lt,uc),a(uc,Bb),a(Lt,gb),a(g,Hb),a(g,Gt),a(Gt,ic),a(ic,Ib),a(Gt,Fb),a(g,Ub),a(g,At),a(At,rc),a(rc,jb),a(At,qb),u(n,Mr,l),u(n,Sr,l),u(n,Lr,l),u(n,Nt,l),a(Nt,Wb),u(n,Gr,l),u(n,ba,l),ba.innerHTML=V8,u(n,Ar,l),u(n,Cn,l),a(Cn,kc),a(kc,Kb),a(Cn,Qb),a(Cn,fc),a(fc,$b),a(Cn,zb),u(n,Nr,l),u(n,_a,l),_a.innerHTML=X8,u(n,Br,l),u(n,Bt,l),a(Bt,Jb),u(n,gr,l),u(n,gt,l),a(gt,ma),a(ma,Vb),a(ma,wa),a(wa,Xb),a(ma,Yb),u(n,Hr,l),u(n,Ir,l),u(n,Fr,l),u(n,Ur,l),u(n,us,l),a(us,is),a(is,dc),a(us,Zb),u(n,jr,l),u(n,Ht,l),a(Ht,hb),u(n,qr,l),u(n,It,l),a(It,n5),u(n,Wr,l),u(n,Ft,l),a(Ft,s5),u(n,Kr,l),u(n,Pa,l),Pa.innerHTML=Y8,u(n,Qr,l),u(n,an,l),a(an,Ec),a(Ec,a5),a(an,t5),a(an,vc),a(vc,p5),a(an,e5),a(an,bc),a(bc,o5),a(an,c5),u(n,$r,l),u(n,tn,l),a(tn,_c),a(_c,l5),a(tn,u5),a(tn,mc),a(mc,i5),a(tn,r5),a(tn,wc),a(wc,k5),a(tn,f5),u(n,zr,l),u(n,ya,l),ya.innerHTML=Z8,u(n,Jr,l),u(n,Dn,l),a(Dn,Pc),a(Pc,d5),a(Dn,E5),a(Dn,yc),a(yc,v5),a(Dn,b5),u(n,Vr,l),u(n,Ca,l),Ca.innerHTML=h8,u(n,Xr,l),u(n,Ut,l),a(Ut,_5),u(n,Yr,l),u(n,Da,l),Da.innerHTML=nP,u(n,Zr,l),u(n,jt,l),a(jt,m5),u(n,hr,l),u(n,nk,l),u(n,sk,l),u(n,qt,l),a(qt,w5),u(n,ak,l),u(n,Ta,l),Ta.innerHTML=sP,u(n,tk,l),u(n,Wt,l),a(Wt,P5),u(n,pk,l),u(n,Kt,l),a(Kt,y5),u(n,ek,l),u(n,Oa,l),Oa.innerHTML=aP,u(n,ok,l),u(n,_,l),a(_,C5),a(_,Cc),a(Cc,D5),a(_,T5),a(_,Dc),a(Dc,O5),a(_,x5),a(_,Tc),a(Tc,R5),a(_,M5),a(_,Oc),a(Oc,S5),a(_,L5),a(_,xc),a(xc,G5),a(_,A5),a(_,Rc),a(Rc,N5),a(_,B5),a(_,Mc),a(Mc,g5),a(_,H5),u(n,ck,l),u(n,dn,l),a(dn,I5),a(dn,Sc),a(Sc,F5),a(dn,U5),a(dn,Lc),a(Lc,j5),a(dn,q5),u(n,lk,l),u(n,xa,l),xa.innerHTML=tP,u(n,uk,l),u(n,F,l),a(F,Gc),a(Gc,W5),a(F,K5),a(F,Ac),a(Ac,Q5),a(F,$5),a(F,Nc),a(Nc,z5),a(F,J5),a(F,Bc),a(Bc,V5),a(F,X5),u(n,ik,l),u(n,rs,l),a(rs,Y5),a(rs,gc),a(gc,Z5),a(rs,h5),u(n,rk,l),u(n,Ra,l),Ra.innerHTML=pP,u(n,kk,l),u(n,w,l),a(w,n0),a(w,Hc),a(Hc,s0),a(w,a0),a(w,Ic),a(Ic,t0),a(w,p0),a(w,Fc),a(Fc,e0),a(w,o0),a(w,Uc),a(Uc,c0),a(w,l0),a(w,jc),a(jc,u0),a(w,i0),a(w,qc),a(qc,r0),a(w,k0),u(n,fk,l),u(n,Qt,l),a(Qt,f0),u(n,dk,l),u(n,Ek,l),u(n,vk,l),u(n,$t,l),a($t,d0),u(n,bk,l),u(n,ks,l),a(ks,E0),a(ks,Wc),a(Wc,v0),a(ks,b0),u(n,_k,l),u(n,Ma,l),Ma.innerHTML=eP,u(n,mk,l),u(n,Tn,l),a(Tn,Kc),a(Kc,_0),a(Tn,m0),a(Tn,Qc),a(Qc,w0),a(Tn,P0),u(n,wk,l),u(n,Sa,l),Sa.innerHTML=oP,u(n,Pk,l),u(n,M,l),a(M,y0),a(M,$c),a($c,C0),a(M,D0),a(M,zc),a(zc,T0),a(M,O0),a(M,Jc),a(Jc,x0),a(M,R0),a(M,Vc),a(Vc,M0),a(M,S0),a(M,Xc),a(Xc,L0),a(M,G0),u(n,yk,l),u(n,fs,l),a(fs,Yc),a(Yc,A0),a(fs,N0),a(fs,On),a(On,B0),a(On,La),a(La,g0),a(On,H0),a(On,Ga),a(Ga,I0),a(On,F0),u(n,Ck,l),u(n,Dk,l),u(n,Tk,l),u(n,Ok,l),u(n,ds,l),a(ds,Es),a(Es,Zc),a(ds,U0),u(n,xk,l),u(n,vs,l),a(vs,j0),a(vs,hc),a(hc,q0),a(vs,W0),u(n,Rk,l),u(n,Aa,l),a(Aa,nl),a(nl,K0),a(Aa,Q0),u(n,Mk,l),u(n,Na,l),Na.innerHTML=cP,u(n,Sk,l),u(n,J,l),a(J,$0),a(J,sl),a(sl,z0),a(J,J0),a(J,al),a(al,V0),a(J,X0),a(J,tl),a(tl,Y0),a(J,Z0),u(n,Lk,l),u(n,Ba,l),Ba.innerHTML=lP,u(n,Gk,l),u(n,bs,l),a(bs,h0),a(bs,pl),a(pl,n_),a(bs,s_),u(n,Ak,l),u(n,ga,l),ga.innerHTML=uP,u(n,Nk,l),u(n,D,l),a(D,el),a(el,a_),a(D,t_),a(D,ol),a(ol,p_),a(D,e_),a(D,cl),a(cl,o_),a(D,c_),a(D,ll),a(ll,l_),a(D,u_),a(D,ul),a(ul,i_),a(D,r_),a(D,il),a(il,k_),a(D,f_),u(n,Bk,l),u(n,zt,l),a(zt,d_),u(n,gk,l),u(n,Ha,l),Ha.innerHTML=iP,u(n,Hk,l),u(n,_s,l),a(_s,E_),a(_s,rl),a(rl,v_),a(_s,b_),u(n,Ik,l),u(n,Fk,l),u(n,Uk,l),u(n,jk,l),u(n,ms,l),a(ms,ws),a(ws,kl),a(ms,__),u(n,qk,l),u(n,Ia,l),a(Ia,fl),a(fl,m_),a(Ia,w_),u(n,Wk,l),u(n,Jt,l),a(Jt,P_),u(n,Kk,l),u(n,En,l),a(En,y_),a(En,dl),a(dl,C_),a(En,D_),a(En,El),a(El,T_),a(En,O_),u(n,Qk,l),u(n,Vt,l),a(Vt,x_),u(n,$k,l),u(n,Fa,l),Fa.innerHTML=rP,u(n,zk,l),u(n,Xt,l),a(Xt,R_),u(n,Jk,l),u(n,Ua,l),Ua.innerHTML=kP,u(n,Vk,l),u(n,Ps,l),a(Ps,M_),a(Ps,vl),a(vl,S_),a(Ps,L_),u(n,Xk,l),u(n,Yt,l),a(Yt,G_),u(n,Yk,l),u(n,ja,l),ja.innerHTML=fP,u(n,Zk,l),u(n,xn,l),a(xn,bl),a(bl,A_),a(xn,N_),a(xn,_l),a(_l,B_),a(xn,g_),u(n,hk,l),u(n,ys,l),a(ys,Cs),a(Cs,ml),a(ml,H_),a(Cs,I_),a(Cs,wl),a(wl,F_),a(Cs,U_),a(ys,j_),a(ys,qa),a(qa,q_),a(qa,Wa),a(Wa,W_),a(qa,K_),u(n,nf,l),u(n,sf,l),u(n,af,l),u(n,tf,l),u(n,Ds,l),a(Ds,Ts),a(Ts,Pl),a(Ds,Q_),u(n,pf,l),u(n,Os,l),a(Os,$_),a(Os,yl),a(yl,z_),a(Os,J_),u(n,ef,l),u(n,xs,l),a(xs,V_),a(xs,Cl),a(Cl,X_),a(xs,Y_),u(n,of,l),u(n,Zt,l),a(Zt,Z_),u(n,cf,l),u(n,Ka,l),Ka.innerHTML=dP,u(n,lf,l),u(n,Rs,l),a(Rs,h_),a(Rs,Dl),a(Dl,n4),a(Rs,s4),u(n,uf,l),u(n,Qa,l),Qa.innerHTML=EP,u(n,rf,l),u(n,Ms,l),a(Ms,a4),a(Ms,Tl),a(Tl,t4),a(Ms,p4),u(n,kf,l),u(n,$a,l),$a.innerHTML=vP,u(n,ff,l),u(n,ht,l),a(ht,e4),u(n,df,l),u(n,vn,l),a(vn,o4),a(vn,Ol),a(Ol,c4),a(vn,l4),a(vn,xl),a(xl,u4),a(vn,i4),u(n,Ef,l),u(n,pn,l),a(pn,Rl),a(Rl,r4),a(pn,k4),a(pn,Ml),a(Ml,f4),a(pn,d4),a(pn,Sl),a(Sl,E4),a(pn,v4),u(n,vf,l),u(n,za,l),za.innerHTML=bP,u(n,bf,l),u(n,np,l),a(np,b4),u(n,_f,l),u(n,mf,l),u(n,wf,l),u(n,bn,l),a(bn,_4),a(bn,Ll),a(Ll,m4),a(bn,w4),a(bn,Gl),a(Gl,P4),a(bn,y4),u(n,Pf,l),u(n,yf,l),u(n,Cf,l),u(n,Df,l),u(n,Ss,l),a(Ss,Ls),a(Ls,Al),a(Ss,C4),u(n,Tf,l),u(n,Of,l),u(n,xf,l),u(n,sp,l),a(sp,Rn),a(Rn,Ja),a(Ja,ap),a(Rn,D4),a(Rn,T4),a(Rn,O4),a(Rn,Va),a(Va,x4),u(n,Rf,l),u(n,Mf,l),u(n,Sf,l)},p:Y4,i:Y4,o:Y4,d(n){n&&s(st),n&&s(jl),n&&s(at),n&&s(ql),n&&s(Wl),n&&s(Kl),n&&s(Ql),n&&s(Ln),n&&s($l),n&&s(zl),n&&s(Jl),n&&s(tt),n&&s(Vl),n&&s(Xl),n&&s(Yl),n&&s(pt),n&&s(Zl),n&&s(hl),n&&s(nu),n&&s(su),n&&s(An),n&&s(au),n&&s(tu),n&&s(pu),n&&s(q),n&&s(eu),n&&s(et),n&&s(ou),n&&s(Us),n&&s(cu),n&&s(ot),n&&s(lu),n&&s(js),n&&s(uu),n&&s(W),n&&s(iu),n&&s(O),n&&s(ru),n&&s(cn),n&&s(ku),n&&s(K),n&&s(fu),n&&s(qs),n&&s(du),n&&s(Q),n&&s(Eu),n&&s(Ws),n&&s(vu),n&&s(h),n&&s(bu),n&&s(_u),n&&s(mu),n&&s(wu),n&&s(Bn),n&&s(Pu),n&&s(L),n&&s(yu),n&&s(Ks),n&&s(Cu),n&&s(b),n&&s(Du),n&&s(E),n&&s(Tu),n&&s(Ou),n&&s(xu),n&&s(Ru),n&&s(Hn),n&&s(Mu),n&&s(Fn),n&&s(Su),n&&s(Qs),n&&s(Lu),n&&s(f),n&&s(Gu),n&&s($s),n&&s(Au),n&&s(zs),n&&s(Nu),n&&s(nn),n&&s(Bu),n&&s(Un),n&&s(gu),n&&s(jn),n&&s(Hu),n&&s(m),n&&s(Iu),n&&s(Js),n&&s(Fu),n&&s(Uu),n&&s(ju),n&&s(qu),n&&s(qn),n&&s(Wu),n&&s(G),n&&s(Ku),n&&s(Kn),n&&s(Qu),n&&s($u),n&&s(zu),n&&s(Ju),n&&s(Qn),n&&s(Vu),n&&s(ct),n&&s(Xu),n&&s(zn),n&&s(Yu),n&&s($),n&&s(Zu),n&&s(Xs),n&&s(hu),n&&s(ln),n&&s(ni),n&&s(Ys),n&&s(si),n&&s(x),n&&s(ai),n&&s(un),n&&s(ti),n&&s(pi),n&&s(ei),n&&s(oi),n&&s(Jn),n&&s(ci),n&&s(R),n&&s(li),n&&s(Zs),n&&s(ui),n&&s(lt),n&&s(ii),n&&s(hs),n&&s(ri),n&&s(rn),n&&s(ki),n&&s(Pn),n&&s(fi),n&&s(na),n&&s(di),n&&s(C),n&&s(Ei),n&&s(sa),n&&s(vi),n&&s(I),n&&s(bi),n&&s(Xn),n&&s(_i),n&&s(yn),n&&s(mi),n&&s(wi),n&&s(Pi),n&&s(yi),n&&s(Yn),n&&s(Ci),n&&s(Di),n&&s(Ti),n&&s(hn),n&&s(Oi),n&&s(ns),n&&s(xi),n&&s(ta),n&&s(Ri),n&&s(ut),n&&s(Mi),n&&s(pa),n&&s(Si),n&&s(it),n&&s(Li),n&&s(ea),n&&s(Gi),n&&s(v),n&&s(Ai),n&&s(oa),n&&s(Ni),n&&s(rt),n&&s(Bi),n&&s(gi),n&&s(Hi),n&&s(Ii),n&&s(ss),n&&s(Fi),n&&s(kt),n&&s(Ui),n&&s(ca),n&&s(ji),n&&s(z),n&&s(qi),n&&s(la),n&&s(Wi),n&&s(ft),n&&s(Ki),n&&s(ua),n&&s(Qi),n&&s(dt),n&&s($i),n&&s(zi),n&&s(Ji),n&&s(ts),n&&s(Vi),n&&s(ia),n&&s(Xi),n&&s(Et),n&&s(Yi),n&&s(vt),n&&s(Zi),n&&s(_t),n&&s(hi),n&&s(kn),n&&s(nr),n&&s(ra),n&&s(sr),n&&s(mt),n&&s(ar),n&&s(ka),n&&s(tr),n&&s(ps),n&&s(pr),n&&s(wt),n&&s(er),n&&s(or),n&&s(cr),n&&s(lr),n&&s(es),n&&s(ur),n&&s(Pt),n&&s(ir),n&&s(yt),n&&s(rr),n&&s(fa),n&&s(kr),n&&s(Ct),n&&s(fr),n&&s(Dt),n&&s(dr),n&&s(da),n&&s(Er),n&&s(Tt),n&&s(vr),n&&s(Ot),n&&s(br),n&&s(_r),n&&s(mr),n&&s(N),n&&s(wr),n&&s(xt),n&&s(Pr),n&&s(Ea),n&&s(yr),n&&s(fn),n&&s(Cr),n&&s(cs),n&&s(Dr),n&&s(B),n&&s(Tr),n&&s(ls),n&&s(Or),n&&s(va),n&&s(xr),n&&s(Rt),n&&s(Rr),n&&s(g),n&&s(Mr),n&&s(Sr),n&&s(Lr),n&&s(Nt),n&&s(Gr),n&&s(ba),n&&s(Ar),n&&s(Cn),n&&s(Nr),n&&s(_a),n&&s(Br),n&&s(Bt),n&&s(gr),n&&s(gt),n&&s(Hr),n&&s(Ir),n&&s(Fr),n&&s(Ur),n&&s(us),n&&s(jr),n&&s(Ht),n&&s(qr),n&&s(It),n&&s(Wr),n&&s(Ft),n&&s(Kr),n&&s(Pa),n&&s(Qr),n&&s(an),n&&s($r),n&&s(tn),n&&s(zr),n&&s(ya),n&&s(Jr),n&&s(Dn),n&&s(Vr),n&&s(Ca),n&&s(Xr),n&&s(Ut),n&&s(Yr),n&&s(Da),n&&s(Zr),n&&s(jt),n&&s(hr),n&&s(nk),n&&s(sk),n&&s(qt),n&&s(ak),n&&s(Ta),n&&s(tk),n&&s(Wt),n&&s(pk),n&&s(Kt),n&&s(ek),n&&s(Oa),n&&s(ok),n&&s(_),n&&s(ck),n&&s(dn),n&&s(lk),n&&s(xa),n&&s(uk),n&&s(F),n&&s(ik),n&&s(rs),n&&s(rk),n&&s(Ra),n&&s(kk),n&&s(w),n&&s(fk),n&&s(Qt),n&&s(dk),n&&s(Ek),n&&s(vk),n&&s($t),n&&s(bk),n&&s(ks),n&&s(_k),n&&s(Ma),n&&s(mk),n&&s(Tn),n&&s(wk),n&&s(Sa),n&&s(Pk),n&&s(M),n&&s(yk),n&&s(fs),n&&s(Ck),n&&s(Dk),n&&s(Tk),n&&s(Ok),n&&s(ds),n&&s(xk),n&&s(vs),n&&s(Rk),n&&s(Aa),n&&s(Mk),n&&s(Na),n&&s(Sk),n&&s(J),n&&s(Lk),n&&s(Ba),n&&s(Gk),n&&s(bs),n&&s(Ak),n&&s(ga),n&&s(Nk),n&&s(D),n&&s(Bk),n&&s(zt),n&&s(gk),n&&s(Ha),n&&s(Hk),n&&s(_s),n&&s(Ik),n&&s(Fk),n&&s(Uk),n&&s(jk),n&&s(ms),n&&s(qk),n&&s(Ia),n&&s(Wk),n&&s(Jt),n&&s(Kk),n&&s(En),n&&s(Qk),n&&s(Vt),n&&s($k),n&&s(Fa),n&&s(zk),n&&s(Xt),n&&s(Jk),n&&s(Ua),n&&s(Vk),n&&s(Ps),n&&s(Xk),n&&s(Yt),n&&s(Yk),n&&s(ja),n&&s(Zk),n&&s(xn),n&&s(hk),n&&s(ys),n&&s(nf),n&&s(sf),n&&s(af),n&&s(tf),n&&s(Ds),n&&s(pf),n&&s(Os),n&&s(ef),n&&s(xs),n&&s(of),n&&s(Zt),n&&s(cf),n&&s(Ka),n&&s(lf),n&&s(Rs),n&&s(uf),n&&s(Qa),n&&s(rf),n&&s(Ms),n&&s(kf),n&&s($a),n&&s(ff),n&&s(ht),n&&s(df),n&&s(vn),n&&s(Ef),n&&s(pn),n&&s(vf),n&&s(za),n&&s(bf),n&&s(np),n&&s(_f),n&&s(mf),n&&s(wf),n&&s(bn),n&&s(Pf),n&&s(yf),n&&s(Cf),n&&s(Df),n&&s(Ss),n&&s(Tf),n&&s(Of),n&&s(xf),n&&s(sp),n&&s(Rf),n&&s(Mf),n&&s(Sf)}}}const wy={title:"테스트 작성",date:"2023-02-06T00:00:00.000Z",excerpt:"Writing Tests",categories:["Golang","Basic Golang"],coverImage:"/post_img/Go/Golang_basics/cover.png",coverWidth:16,coverHeight:9,indexed:!1,exposed:!0};class Py extends Ey{constructor(st){super(),vy(this,st,null,_y,by,{})}}export{Py as default,wy as metadata};
