import{S as Er,i as vr,s as wr,k as o,q as l,a as i,y as O,l as e,m as c,r as u,h as s,c as k,z as M,n as f,U as Dr,b as p,E as a,A,g as I,d as G,B as N,M as L}from"./index.5621e629.js";import{C as g}from"./CodeBlockWrapper.c301ace2.js";function br(w){let r,E=`<code class="language-go"><span class="token keyword">package</span> chapter8

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">"context"</span>
	<span class="token string">"errors"</span>
	<span class="token string">"fmt"</span>
<span class="token punctuation">)</span>

<span class="token keyword">type</span> EmailSender <span class="token keyword">interface</span> <span class="token punctuation">&#123;</span>
	<span class="token function">SendEmailReceipt</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> email <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">type</span> CardCharger <span class="token keyword">interface</span> <span class="token punctuation">&#123;</span>
	<span class="token function">ChargeCard</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> cardToken <span class="token builtin">string</span><span class="token punctuation">,</span> amountInCent <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">error</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">type</span> CookieStockChecker <span class="token keyword">interface</span> <span class="token punctuation">&#123;</span>
	<span class="token function">AmountInStock</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token builtin">int</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">type</span> CookieService <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
	emailSender        EmailSender
	cardCharger        CardCharger
	cookieStockChecker CookieStockChecker
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">NewCookieService</span><span class="token punctuation">(</span>e EmailSender<span class="token punctuation">,</span> c CardCharger<span class="token punctuation">,</span> a CookieStockChecker<span class="token punctuation">)</span> <span class="token operator">*</span>CookieService <span class="token punctuation">&#123;</span>
	<span class="token keyword">return</span> <span class="token operator">&amp;</span>CookieService<span class="token punctuation">&#123;</span>
		emailSender<span class="token punctuation">:</span>        e<span class="token punctuation">,</span>
		cardCharger<span class="token punctuation">:</span>        c<span class="token punctuation">,</span>
		cookieStockChecker<span class="token punctuation">:</span> a<span class="token punctuation">,</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>CookieService<span class="token punctuation">)</span> <span class="token function">PurchaseCookies</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> amountOfCookies <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">&#123;</span>
	<span class="token comment">// TODO: 쿠키 가격 결정하는 로직 추가</span>
	<span class="token keyword">const</span> priceOfCookie <span class="token operator">=</span> <span class="token number">5</span>

	cookiesInStock <span class="token operator">:=</span> c<span class="token punctuation">.</span>cookieStockChecker<span class="token punctuation">.</span><span class="token function">AmountInStock</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span>
	<span class="token keyword">if</span> cookiesInStock <span class="token operator">&lt;</span> amountOfCookies <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"not enough cookies in stock"</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>

	cost <span class="token operator">:=</span> priceOfCookie <span class="token operator">*</span> amountOfCookies

	err <span class="token operator">:=</span> c<span class="token punctuation">.</span>cardCharger<span class="token punctuation">.</span><span class="token function">ChargeCard</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token string">"some-token"</span><span class="token punctuation">,</span> cost<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"failed to charge card: %w"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>

	err <span class="token operator">=</span> c<span class="token punctuation">.</span>emailSender<span class="token punctuation">.</span><span class="token function">SendEmailReceipt</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token string">"some-email"</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"failed to send email receipt: %w"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">&#125;</span></code>`;return{c(){r=o("pre"),this.h()},l(m){r=e(m,"PRE",{class:!0});var _=c(r);_.forEach(s),this.h()},h(){f(r,"class","language-go")},m(m,_){p(m,r,_),r.innerHTML=E},p:L,d(m){m&&s(r)}}}function Cr(w){let r,E=`<code class="language-go"><span class="token keyword">func</span> <span class="token function">Test_CookiePurchases</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	t<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token string">&#96;Given a user tries to purchase a cookie and we have them in stock,
    when they tap their card, they get charged and then receive an email receipt a few moments later.&#96;</span><span class="token punctuation">,</span>
		<span class="token keyword">func</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			ctrl <span class="token operator">:=</span> gomock<span class="token punctuation">.</span><span class="token function">NewController</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span>
			e <span class="token operator">:=</span> mocks<span class="token punctuation">.</span><span class="token function">NewMockEmailSender</span><span class="token punctuation">(</span>ctrl<span class="token punctuation">)</span>
			c <span class="token operator">:=</span> mocks<span class="token punctuation">.</span><span class="token function">NewMockCardCharger</span><span class="token punctuation">(</span>ctrl<span class="token punctuation">)</span>
			s <span class="token operator">:=</span> mocks<span class="token punctuation">.</span><span class="token function">NewMockCookieStockChecker</span><span class="token punctuation">(</span>ctrl<span class="token punctuation">)</span>
			ctx <span class="token operator">:=</span> context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

			<span class="token keyword">const</span> cookiesToBuy <span class="token operator">=</span> <span class="token number">5</span>
			<span class="token keyword">const</span> totalExpectedCost <span class="token operator">=</span> <span class="token number">25</span>

			cs<span class="token punctuation">,</span> err <span class="token operator">:=</span> chapter8<span class="token punctuation">.</span><span class="token function">NewCookieService</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> c<span class="token punctuation">,</span> s<span class="token punctuation">)</span>
			<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
				t<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">"unexpected error: %v"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
			<span class="token punctuation">&#125;</span>

			gomock<span class="token punctuation">.</span><span class="token function">InOrder</span><span class="token punctuation">(</span>
				s<span class="token punctuation">.</span><span class="token function">EXPECT</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">AmountInStock</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Times</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Return</span><span class="token punctuation">(</span>cookiesToBuy<span class="token punctuation">)</span><span class="token punctuation">,</span>
				c<span class="token punctuation">.</span><span class="token function">EXPECT</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ChargeCard</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token string">"some-token"</span><span class="token punctuation">,</span> totalExpectedCost<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Times</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Return</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
				e<span class="token punctuation">.</span><span class="token function">EXPECT</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SendEmailReceipt</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token string">"some-email"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Times</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Return</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
			<span class="token punctuation">)</span>

			err <span class="token operator">=</span> cs<span class="token punctuation">.</span><span class="token function">PurchaseCookies</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> cookiesToBuy<span class="token punctuation">)</span>
			<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
				t<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">"unexpected error: %v"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
			<span class="token punctuation">&#125;</span>
		<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code>`;return{c(){r=o("pre"),this.h()},l(m){r=e(m,"PRE",{class:!0});var _=c(r);_.forEach(s),this.h()},h(){f(r,"class","language-go")},m(m,_){p(m,r,_),r.innerHTML=E},p:L,d(m){m&&s(r)}}}function Tr(w){let r,E=`<code class="language-go">	t<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token string">&#96;Given a user tries to purchase a cookie and we don't have any in stock, we return an error to the cashier
      so they can apologize to the customer.&#96;</span><span class="token punctuation">,</span>
		<span class="token keyword">func</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			t<span class="token punctuation">.</span><span class="token function">FailNow</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

	t<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token string">&#96;Given a user tries to purchase a cookie, we have them in stock, but their card gets declined, we return
   an error to the cashier so that we can ban the customer from the store.&#96;</span><span class="token punctuation">,</span>
		<span class="token keyword">func</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			t<span class="token punctuation">.</span><span class="token function">FailNow</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

	t<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token string">&#96;Given a user purchases a cookie and we have them in stock, their card is charged successfully but we
   fail to send an email, we return a message to the cashier so they know can notify the customer that they will not
   get an e-mail, but the transaction is still considered done.&#96;</span><span class="token punctuation">,</span>
		<span class="token keyword">func</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			t<span class="token punctuation">.</span><span class="token function">FailNow</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

	t<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token string">&#96;Given someone wants to purchase more cookies than we have in stock we only charge them for the ones we do have&#96;</span><span class="token punctuation">,</span>
		<span class="token keyword">func</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			t<span class="token punctuation">.</span><span class="token function">FailNow</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code>`;return{c(){r=o("pre"),this.h()},l(m){r=e(m,"PRE",{class:!0});var _=c(r);_.forEach(s),this.h()},h(){f(r,"class","language-go")},m(m,_){p(m,r,_),r.innerHTML=E},p:L,d(m){m&&s(r)}}}function hr(w){let r,E=`<code class="language-go">	t<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token string">&#96;Given a user tries to purchase a cookie and we don't have any in stock, we return an error to the cashier
      so they can apologize to the customer.&#96;</span><span class="token punctuation">,</span>
		<span class="token keyword">func</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			ctrl <span class="token operator">:=</span> gomock<span class="token punctuation">.</span><span class="token function">NewController</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span>
			e <span class="token operator">:=</span> mocks<span class="token punctuation">.</span><span class="token function">NewMockEmailSender</span><span class="token punctuation">(</span>ctrl<span class="token punctuation">)</span>
			c <span class="token operator">:=</span> mocks<span class="token punctuation">.</span><span class="token function">NewMockCardCharger</span><span class="token punctuation">(</span>ctrl<span class="token punctuation">)</span>
			s <span class="token operator">:=</span> mocks<span class="token punctuation">.</span><span class="token function">NewMockCookieStockChecker</span><span class="token punctuation">(</span>ctrl<span class="token punctuation">)</span>
			ctx <span class="token operator">:=</span> context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

			<span class="token keyword">const</span> cookiesToBuy <span class="token operator">=</span> <span class="token number">5</span>
			cs<span class="token punctuation">,</span> err <span class="token operator">:=</span> chapter8<span class="token punctuation">.</span><span class="token function">NewCookieService</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> c<span class="token punctuation">,</span> s<span class="token punctuation">)</span>
			<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
				t<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">"unexpected error: %v"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
			<span class="token punctuation">&#125;</span>

			gomock<span class="token punctuation">.</span><span class="token function">InOrder</span><span class="token punctuation">(</span>
				s<span class="token punctuation">.</span><span class="token function">EXPECT</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">AmountInStock</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Times</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Return</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
			<span class="token punctuation">)</span>
			err <span class="token operator">=</span> cs<span class="token punctuation">.</span><span class="token function">PurchaseCookies</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> cookiesToBuy<span class="token punctuation">)</span>
			<span class="token keyword">if</span> err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
				t<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">"expected error, got nil"</span><span class="token punctuation">)</span>
			<span class="token punctuation">&#125;</span>
		<span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code>`;return{c(){r=o("pre"),this.h()},l(m){r=e(m,"PRE",{class:!0});var _=c(r);_.forEach(s),this.h()},h(){f(r,"class","language-go")},m(m,_){p(m,r,_),r.innerHTML=E},p:L,d(m){m&&s(r)}}}function $r(w){let r,E=`<code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>CookieService<span class="token punctuation">)</span> <span class="token function">PurchaseCookies</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> amountOfCookies <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">const</span> priceOfCookie <span class="token operator">=</span> <span class="token number">50</span>

	cookiesInStock <span class="token operator">:=</span> c<span class="token punctuation">.</span>cookieStockChecker<span class="token punctuation">.</span><span class="token function">AmountInStock</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span>
	<span class="token keyword">if</span> cookiesInStock <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"no cookies in stock"</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">if</span> cookiesInStock <span class="token operator">&lt;</span> amountOfCookies <span class="token punctuation">&#123;</span>
		<span class="token comment">// TODO : 재고 부족시 로직 추가</span>
	<span class="token punctuation">&#125;</span>

	cost <span class="token operator">:=</span> priceOfCookie <span class="token operator">*</span> amountOfCookies

	err <span class="token operator">:=</span> c<span class="token punctuation">.</span>cardCharger<span class="token punctuation">.</span><span class="token function">ChargeCard</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token string">"some-token"</span><span class="token punctuation">,</span> cost<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"failed to charge card: %w"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>

	err <span class="token operator">=</span> c<span class="token punctuation">.</span>emailSender<span class="token punctuation">.</span><span class="token function">SendEmailReceipt</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token string">"some-email"</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"failed to send email receipt: %w"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">&#125;</span></code>`;return{c(){r=o("pre"),this.h()},l(m){r=e(m,"PRE",{class:!0});var _=c(r);_.forEach(s),this.h()},h(){f(r,"class","language-go")},m(m,_){p(m,r,_),r.innerHTML=E},p:L,d(m){m&&s(r)}}}function Pr(w){let r,E=`<code class="language-go">	t<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token string">&#96;Given a user tries to purchase a cookie, we have them in stock, but their card gets declined, we return
	an error to the cashier so that we can ban the customer from the store.&#96;</span><span class="token punctuation">,</span>
			<span class="token keyword">func</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
				ctrl <span class="token operator">:=</span> gomock<span class="token punctuation">.</span><span class="token function">NewController</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span>
				e <span class="token operator">:=</span> mocks<span class="token punctuation">.</span><span class="token function">NewMockEmailSender</span><span class="token punctuation">(</span>ctrl<span class="token punctuation">)</span>
				c <span class="token operator">:=</span> mocks<span class="token punctuation">.</span><span class="token function">NewMockCardCharger</span><span class="token punctuation">(</span>ctrl<span class="token punctuation">)</span>
				s <span class="token operator">:=</span> mocks<span class="token punctuation">.</span><span class="token function">NewMockCookieStockChecker</span><span class="token punctuation">(</span>ctrl<span class="token punctuation">)</span>
				ctx <span class="token operator">:=</span> context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

				<span class="token keyword">const</span> cookiesToBuy <span class="token operator">=</span> <span class="token number">5</span>
				<span class="token keyword">const</span> totalExpectedCost <span class="token operator">=</span> <span class="token number">250</span>
				cs<span class="token punctuation">,</span> err <span class="token operator">:=</span> chapter8<span class="token punctuation">.</span><span class="token function">NewCookieService</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> c<span class="token punctuation">,</span> s<span class="token punctuation">)</span>
				<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
					t<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">"unexpected error: %v"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
				<span class="token punctuation">&#125;</span>

				gomock<span class="token punctuation">.</span><span class="token function">InOrder</span><span class="token punctuation">(</span>
					s<span class="token punctuation">.</span><span class="token function">EXPECT</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">AmountInStock</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Times</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Return</span><span class="token punctuation">(</span>cookiesToBuy<span class="token punctuation">)</span><span class="token punctuation">,</span>
					c<span class="token punctuation">.</span><span class="token function">EXPECT</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ChargeCard</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token string">"some-token"</span><span class="token punctuation">,</span> totalExpectedCost<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Times</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Return</span><span class="token punctuation">(</span>errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"your card was declined"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
				<span class="token punctuation">)</span>
				err <span class="token operator">=</span> cs<span class="token punctuation">.</span><span class="token function">PurchaseCookies</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> cookiesToBuy<span class="token punctuation">)</span>
				<span class="token keyword">if</span> err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
					t<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">"expected error, got nil"</span><span class="token punctuation">)</span>
				<span class="token punctuation">&#125;</span>
				<span class="token keyword">if</span> err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token string">"your card was declined"</span> <span class="token punctuation">&#123;</span>
					t<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">"expected error, got %v"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
				<span class="token punctuation">&#125;</span>
			<span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code>`;return{c(){r=o("pre"),this.h()},l(m){r=e(m,"PRE",{class:!0});var _=c(r);_.forEach(s),this.h()},h(){f(r,"class","language-go")},m(m,_){p(m,r,_),r.innerHTML=E},p:L,d(m){m&&s(r)}}}function yr(w){let r,E=`<code class="language-go">	t<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token string">&#96;Given someone wants to purchase more cookies than we have in stock we only charge them for the ones we do have&#96;</span><span class="token punctuation">,</span>
		<span class="token keyword">func</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			ctrl <span class="token operator">:=</span> gomock<span class="token punctuation">.</span><span class="token function">NewController</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span>
			e <span class="token operator">:=</span> mocks<span class="token punctuation">.</span><span class="token function">NewMockEmailSender</span><span class="token punctuation">(</span>ctrl<span class="token punctuation">)</span>
			c <span class="token operator">:=</span> mocks<span class="token punctuation">.</span><span class="token function">NewMockCardCharger</span><span class="token punctuation">(</span>ctrl<span class="token punctuation">)</span>
			s <span class="token operator">:=</span> mocks<span class="token punctuation">.</span><span class="token function">NewMockCookieStockChecker</span><span class="token punctuation">(</span>ctrl<span class="token punctuation">)</span>
			ctx <span class="token operator">:=</span> context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

			<span class="token keyword">const</span> cookiesToBuy <span class="token operator">=</span> <span class="token number">5</span>
			<span class="token keyword">const</span> inStock <span class="token operator">=</span> <span class="token number">3</span>
			<span class="token keyword">const</span> totalExpectedCost <span class="token operator">=</span> <span class="token number">150</span>
			cs<span class="token punctuation">,</span> err <span class="token operator">:=</span> chapter8<span class="token punctuation">.</span><span class="token function">NewCookieService</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> c<span class="token punctuation">,</span> s<span class="token punctuation">)</span>
			<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
				t<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">"unexpected error: %v"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
			<span class="token punctuation">&#125;</span>

			gomock<span class="token punctuation">.</span><span class="token function">InOrder</span><span class="token punctuation">(</span>
				s<span class="token punctuation">.</span><span class="token function">EXPECT</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">AmountInStock</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Times</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Return</span><span class="token punctuation">(</span>inStock<span class="token punctuation">)</span><span class="token punctuation">,</span>
				c<span class="token punctuation">.</span><span class="token function">EXPECT</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ChargeCard</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token string">"some-token"</span><span class="token punctuation">,</span> totalExpectedCost<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Times</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Return</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
				e<span class="token punctuation">.</span><span class="token function">EXPECT</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SendEmailReceipt</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token string">"some-email"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Times</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Return</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
			<span class="token punctuation">)</span>

			err <span class="token operator">=</span> cs<span class="token punctuation">.</span><span class="token function">PurchaseCookies</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> cookiesToBuy<span class="token punctuation">)</span>
			<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
				t<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">"unexpected error: %v"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
			<span class="token punctuation">&#125;</span>
		<span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code>`;return{c(){r=o("pre"),this.h()},l(m){r=e(m,"PRE",{class:!0});var _=c(r);_.forEach(s),this.h()},h(){f(r,"class","language-go")},m(m,_){p(m,r,_),r.innerHTML=E},p:L,d(m){m&&s(r)}}}function xr(w){let r,E=`<code class="language-go">cookiesInStock <span class="token operator">:=</span> c<span class="token punctuation">.</span>cookieStockChecker<span class="token punctuation">.</span><span class="token function">AmountInStock</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span>
	<span class="token keyword">if</span> cookiesInStock <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"no cookies in stock"</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">if</span> cookiesInStock <span class="token operator">&lt;</span> amountOfCookies <span class="token punctuation">&#123;</span>
		amountOfCookies <span class="token operator">=</span> cookiesInStock
	<span class="token punctuation">&#125;</span></code>`;return{c(){r=o("pre"),this.h()},l(m){r=e(m,"PRE",{class:!0});var _=c(r);_.forEach(s),this.h()},h(){f(r,"class","language-go")},m(m,_){p(m,r,_),r.innerHTML=E},p:L,d(m){m&&s(r)}}}function Sr(w){let r,E=`<code class="language-go">	t<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token string">&#96;Given a user tries to purchase a cookie and we have them in stock,
    when they tap their card, they get charged and then receive an email receipt a few moments later.&#96;</span><span class="token punctuation">,</span>
		<span class="token keyword">func</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			ctrl <span class="token operator">:=</span> gomock<span class="token punctuation">.</span><span class="token function">NewController</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span>
			e <span class="token operator">:=</span> mocks<span class="token punctuation">.</span><span class="token function">NewMockEmailSender</span><span class="token punctuation">(</span>ctrl<span class="token punctuation">)</span>
			c <span class="token operator">:=</span> mocks<span class="token punctuation">.</span><span class="token function">NewMockCardCharger</span><span class="token punctuation">(</span>ctrl<span class="token punctuation">)</span>
			s <span class="token operator">:=</span> mocks<span class="token punctuation">.</span><span class="token function">NewMockCookieStockChecker</span><span class="token punctuation">(</span>ctrl<span class="token punctuation">)</span>
			ctx <span class="token operator">:=</span> context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

			<span class="token keyword">const</span> cookiesToBuy <span class="token operator">=</span> <span class="token number">5</span>
			<span class="token keyword">const</span> totalExpectedCost <span class="token operator">=</span> <span class="token number">250</span>
			<span class="token keyword">const</span> cardToken <span class="token operator">=</span> <span class="token string">"some-token"</span>
			<span class="token keyword">const</span> email <span class="token operator">=</span> <span class="token string">"some-email"</span>

			cs<span class="token punctuation">,</span> err <span class="token operator">:=</span> chapter8<span class="token punctuation">.</span><span class="token function">NewCookieService</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> c<span class="token punctuation">,</span> s<span class="token punctuation">)</span>
			<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
				t<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">"unexpected error: %v"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
			<span class="token punctuation">&#125;</span>

			gomock<span class="token punctuation">.</span><span class="token function">InOrder</span><span class="token punctuation">(</span>
				s<span class="token punctuation">.</span><span class="token function">EXPECT</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">AmountInStock</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Times</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Return</span><span class="token punctuation">(</span>cookiesToBuy<span class="token punctuation">)</span><span class="token punctuation">,</span>
				c<span class="token punctuation">.</span><span class="token function">EXPECT</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ChargeCard</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> cardToken<span class="token punctuation">,</span> totalExpectedCost<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Times</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Return</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
				e<span class="token punctuation">.</span><span class="token function">EXPECT</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SendEmailReceipt</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> email<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Times</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Return</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
			<span class="token punctuation">)</span>

			err <span class="token operator">=</span> cs<span class="token punctuation">.</span><span class="token function">PurchaseCookies</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> cookiesToBuy<span class="token punctuation">,</span> cardToken<span class="token punctuation">,</span> email<span class="token punctuation">)</span>
			<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
				t<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">"unexpected error: %v"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
			<span class="token punctuation">&#125;</span>
		<span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code>`;return{c(){r=o("pre"),this.h()},l(m){r=e(m,"PRE",{class:!0});var _=c(r);_.forEach(s),this.h()},h(){f(r,"class","language-go")},m(m,_){p(m,r,_),r.innerHTML=E},p:L,d(m){m&&s(r)}}}function Rr(w){let r,E=`<code class="language-go"><span class="token keyword">package</span> chapter8

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">"github.com/go-bdd/gobdd"</span>
	<span class="token string">"testing"</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">add</span><span class="token punctuation">(</span>t gobdd<span class="token punctuation">.</span>StepTest<span class="token punctuation">,</span> ctx gobdd<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> first <span class="token builtin">int</span><span class="token punctuation">,</span> second <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	res <span class="token operator">:=</span> first <span class="token operator">+</span> second
	ctx<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">"result"</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">check</span><span class="token punctuation">(</span>t gobdd<span class="token punctuation">.</span>StepTest<span class="token punctuation">,</span> ctx gobdd<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> sum <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	received<span class="token punctuation">,</span> err <span class="token operator">:=</span> ctx<span class="token punctuation">.</span><span class="token function">GetInt</span><span class="token punctuation">(</span><span class="token string">"result"</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		t<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">if</span> sum <span class="token operator">!=</span> received <span class="token punctuation">&#123;</span>
		t<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">"Expected %d, received %d"</span><span class="token punctuation">,</span> sum<span class="token punctuation">,</span> received<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">TestScenarios</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	suite <span class="token operator">:=</span> gobdd<span class="token punctuation">.</span><span class="token function">NewSuite</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span>
	suite<span class="token punctuation">.</span><span class="token function">AddStep</span><span class="token punctuation">(</span><span class="token string">&#96;I add (d+) and (d+)&#96;</span><span class="token punctuation">,</span> add<span class="token punctuation">)</span>
	suite<span class="token punctuation">.</span><span class="token function">AddStep</span><span class="token punctuation">(</span><span class="token string">&#96;the result should equal (d+)&#96;</span><span class="token punctuation">,</span> check<span class="token punctuation">)</span>
	suite<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code>`;return{c(){r=o("pre"),this.h()},l(m){r=e(m,"PRE",{class:!0});var _=c(r);_.forEach(s),this.h()},h(){f(r,"class","language-go")},m(m,_){p(m,r,_),r.innerHTML=E},p:L,d(m){m&&s(r)}}}function Br(w){let r,E,m,_,_t,dt,q,j,na,oe,Et,vt,wt,cs,ee,Dt,ls,ce,bt,b,xn,H,le,Sn,ue,sa,ie,ke,re,Rn,fe,aa,me,_e,de,Ee,ta,ve,we,pa,oa,De,be,ea,ca,Ce,Te,la,ua,he,$e,ia,ka,Pe,Ct,us,ye,Tt,ht,$t,is,xe,Pt,Bn,Se,ra,Re,yt,ks,Be,xt,T,fa,Oe,Me,ma,Ae,Ie,_a,Ge,Ne,da,ge,St,rs,Le,Rt,Bt,Ot,Mt,Q,U,Ea,He,At,F,va,Fe,We,wa,Xe,qe,It,On,Lk=`<code class="language-text">.
├── cookies.go
├── cookies_test.go
└── go.mod</code>`,Gt,y,je,Da,Qe,Ue,Mn,ze,Ze,Nt,z,Je,ba,Ke,Ve,gt,An,Hk=`<code class="language-go"><span class="token keyword">package</span> chapter8_test

<span class="token keyword">import</span> <span class="token string">"testing"</span>

<span class="token keyword">func</span> <span class="token function">Test_CookiePurchases</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	t<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token string">&#96;Given a user tries to purchase a cookie and we have them in stock,
    when they tap their card, they get charged and then receive an email receipt a few moments later.&#96;</span><span class="token punctuation">,</span>
		<span class="token keyword">func</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			t<span class="token punctuation">.</span><span class="token function">FailNow</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code>`,Lt,fs,Ye,Ht,Z,nc,Ca,sc,ac,Ft,ms,tc,Wt,In,Fk=`<code class="language-bash">$ go <span class="token builtin class-name">test</span> ./<span class="token punctuation">..</span>.
--- FAIL: Test_CookiePurchases <span class="token punctuation">(</span><span class="token number">0</span>.00s<span class="token punctuation">)</span>
    --- FAIL: Test_CookiePurchases/Given_a_user_tries_to_purchase_a_cookie_and_we_have_them_in_stock,_____when_they_tap_their_card,_they_get_charged_and_then_receive_an_email_receipt_a_few_moments_later. <span class="token punctuation">(</span><span class="token number">0</span>.00s<span class="token punctuation">)</span>
FAIL
<span class="token builtin class-name">exit</span> status <span class="token number">1</span>
FAIL    github.com/jhseoeo/Golang-DDD/chapter8  <span class="token number">0</span>.001s</code>`,Xt,_s,pc,qt,jt,Qt,Ut,J,K,Ta,oc,zt,V,ec,ha,cc,lc,Zt,Y,Jt,Kt,Vt,Yt,nn,sn,$a,uc,np,$,Pa,ic,kc,ya,rc,fc,xa,mc,_c,sp,an,dc,Gn,Ec,vc,ap,tn,wc,Sa,Dc,bc,tp,Nn,Wk='<code class="language-bash">go <span class="token function">install</span> github.com/golang/mock/mockgen@v1.6.0</code>',pp,pn,Cc,Ra,Tc,hc,op,gn,Xk=`<code class="language-go"><span class="token keyword">package</span> chapter8
<span class="token keyword">import</span> <span class="token boolean">_</span> <span class="token string">"github.com/golang/mock/mockgen/model"</span>
<span class="token comment">//go:generate mockgen -package mocks -destination chapter8/mocks/cookies.go github.com/jhseoeo/Golang-DDD/chapter8 CookieStockChecker,CardCharger,EmailSender</span></code>`,ep,x,$c,Ba,Pc,yc,Oa,xc,Sc,cp,Ln,qk=`<code class="language-text">.
├── chapter8
│   └── mocks
│       └── cookies.go
├── cookies.go
├── cookies_test.go
├── gen.go
├── go.mod
└── go.sum</code>`,lp,on,Rc,Ma,Bc,Oc,up,en,ip,D,Mc,Aa,Ac,Ic,Ia,Gc,Nc,Ga,gc,Lc,Na,Hc,Fc,ga,Wc,Xc,kp,Hn,La,qc,jc,rp,cn,Qc,Uc,zc,fp,ds,Zc,mp,Es,Jc,_p,vs,Kc,dp,ln,Vc,Ha,Yc,nl,Ep,un,vp,wp,Dp,bp,kn,rn,Fa,sl,Cp,ws,al,Tp,Ds,tl,hp,bs,pl,$p,fn,Pp,Cs,ol,yp,Ts,el,xp,mn,Sp,Rp,Bp,hs,cl,Op,_n,Mp,$s,ll,Ap,Fn,jk=`<code class="language-text">--- FAIL: Test_CookiePurchases/Given_a_user_tries_to_purchase_a_cookie,_we_have_them_in_stock,_but_their_card_gets_declined,_we_return____an_error_to_the_cashier_so_that_we_can_ban_the_customer_from_the_store. (0.00s)
        cookies_test.go:92: expected error, got failed to charge card: some error</code>`,Ip,S,ul,Wa,il,kl,Xa,rl,fl,Gp,Wn,Qk=`<code class="language-go">	err <span class="token operator">:=</span> c<span class="token punctuation">.</span>cardCharger<span class="token punctuation">.</span><span class="token function">ChargeCard</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token string">"some-token"</span><span class="token punctuation">,</span> cost<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> err
	<span class="token punctuation">&#125;</span></code>`,Np,Ps,ml,gp,Xn,Uk='<code class="language-text">--- PASS: Test_CookiePurchases/Given_a_user_tries_to_purchase_a_cookie,_we_have_them_in_stock,_but_their_card_gets_declined,_we_return____an_error_to_the_cashier_so_that_we_can_ban_the_customer_from_the_store. (0.00s)</code>',Lp,ys,_l,Hp,Fp,Wp,xs,dl,Xp,qn,zk=`<code class="language-go">	t<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token string">&#96;Given a user purchases a cookie and we have them in stock, their card is charged successfully but we
	fail to send an email, we return a message to the cashier so they know can notify the customer that they will not
	get an e-mail, but the transaction is still considered done.&#96;</span><span class="token punctuation">,</span>
			<span class="token keyword">func</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
				ctrl <span class="token operator">:=</span> gomock<span class="token punctuation">.</span><span class="token function">NewController</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span>
				e <span class="token operator">:=</span> mocks<span class="token punctuation">.</span><span class="token function">NewMockEmailSender</span><span class="token punctuation">(</span>ctrl<span class="token punctuation">)</span>
				c <span class="token operator">:=</span> mocks<span class="token punctuation">.</span><span class="token function">NewMockCardCharger</span><span class="token punctuation">(</span>ctrl<span class="token punctuation">)</span>
				s <span class="token operator">:=</span> mocks<span class="token punctuation">.</span><span class="token function">NewMockCookieStockChecker</span><span class="token punctuation">(</span>ctrl<span class="token punctuation">)</span>
				ctx <span class="token operator">:=</span> context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

				<span class="token keyword">const</span> cookiesToBuy <span class="token operator">=</span> <span class="token number">5</span>
				<span class="token keyword">const</span> totalExpectedCost <span class="token operator">=</span> <span class="token number">250</span>
				cs<span class="token punctuation">,</span> err <span class="token operator">:=</span> chapter8<span class="token punctuation">.</span><span class="token function">NewCookieService</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> c<span class="token punctuation">,</span> s<span class="token punctuation">)</span>
				<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
					t<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">"unexpected error: %v"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
				<span class="token punctuation">&#125;</span>

				gomock<span class="token punctuation">.</span><span class="token function">InOrder</span><span class="token punctuation">(</span>
					s<span class="token punctuation">.</span><span class="token function">EXPECT</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">AmountInStock</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Times</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Return</span><span class="token punctuation">(</span>cookiesToBuy<span class="token punctuation">)</span><span class="token punctuation">,</span>
					c<span class="token punctuation">.</span><span class="token function">EXPECT</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ChargeCard</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token string">"some-token"</span><span class="token punctuation">,</span> totalExpectedCost<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Times</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Return</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
					e<span class="token punctuation">.</span><span class="token function">EXPECT</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SendEmailReceipt</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token string">"some-email"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Times</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Return</span><span class="token punctuation">(</span>errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"failed to send email"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
				<span class="token punctuation">)</span>
				err <span class="token operator">=</span> cs<span class="token punctuation">.</span><span class="token function">PurchaseCookies</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> cookiesToBuy<span class="token punctuation">)</span>
				<span class="token keyword">if</span> err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
					t<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">"expected error, got nil"</span><span class="token punctuation">)</span>
				<span class="token punctuation">&#125;</span>
				<span class="token keyword">if</span> err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token string">"failed to send email"</span> <span class="token punctuation">&#123;</span>
					t<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">"expected error, got %v"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
				<span class="token punctuation">&#125;</span>
			<span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code>`,qp,Ss,El,jp,jn,Zk=`<code class="language-go">	err <span class="token operator">:=</span> c<span class="token punctuation">.</span>emailSender<span class="token punctuation">.</span><span class="token function">SendEmailReceipt</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token string">"some-email"</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> err
	<span class="token punctuation">&#125;</span></code>`,Qp,Rs,vl,Up,zp,Zp,Bs,wl,Jp,dn,Kp,Os,Dl,Vp,Qn,Jk=`<code class="language-text">--- FAIL: Test_CookiePurchases (0.00s)
    --- FAIL: Test_CookiePurchases/Given_someone_wants_to_purchase_more_cookies_than_we_have_in_stock_we_only_charge_them_for_the_ones_we_do_have (0.00s)
        cookies.go:47: Unexpected call to *mocks.MockCardCharger.ChargeCard([context.Background some-token 250]) at /home/junhyuk/Programming/Golang/Golang-DDD/chapter8/cookies.go:47 because:
            expected call at /home/junhyuk/Programming/Golang/Golang-DDD/chapter8/cookies_test.go:145 doesn't match the argument at index 2.
            Got: 250 (int)
            Want: is equal to 150 (int)
        controller.go:137: missing call(s) to *mocks.MockCardCharger.ChargeCard(is equal to context.Background (*context.emptyCtx), is equal to some-token (string), is equal to 150 (int)) /home/junhyuk/Programming/Golang/Golang-DDD/chapter8/cookies_test.go:145
        controller.go:137: missing call(s) to *mocks.MockEmailSender.SendEmailReceipt(is equal to context.Background (*context.emptyCtx), is equal to some-email (string)) /home/junhyuk/Programming/Golang/Golang-DDD/chapter8/cookies_test.go:146
        controller.go:137: aborting test due to missing call(s)
FAIL
exit status 1
FAIL    github.com/jhseoeo/Golang-DDD/chapter8  0.001s</code>`,Yp,Ms,bl,no,En,so,As,Cl,ao,to,po,vn,Tl,qa,hl,$l,oo,Un,Kk=`<code class="language-text">PASS
        github.com/jhseoeo/Golang-DDD/chapter8  coverage: 100.0% of statements
ok      github.com/jhseoeo/Golang-DDD/chapter8  0.002s</code>`,eo,Is,Pl,co,lo,uo,Gs,yl,io,Ns,xl,ko,ro,fo,gs,Sl,mo,Ls,Rl,_o,zn,Vk='<code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>CookieService<span class="token punctuation">)</span> <span class="token function">PurchaseCookies</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> amountOfCookies <span class="token builtin">int</span><span class="token punctuation">,</span> cardToken <span class="token builtin">string</span><span class="token punctuation">,</span> email <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">&#123;</span></code>',Eo,Hs,Bl,vo,wn,wo,Fs,Ol,Do,bo,Co,Ws,Ml,To,ho,$o,Po,Dn,bn,ja,Al,yo,Xs,Il,xo,R,Gl,Zn,Nl,gl,Jn,Ll,Hl,So,Kn,Cn,Qa,Fl,Wl,Xl,Ro,Vn,Yk='<code class="language-bash">go get github.com/go-bdd/gobdd</code>',Bo,B,ql,Ua,jl,Ql,za,Ul,zl,Oo,Yn,nr=`<code class="language-gherkin"><span class="token feature"><span class="token keyword">Feature:</span><span class="token important"> Adding numbers</span>
</span>    <span class="token scenario"><span class="token keyword">Scenario:</span><span class="token important"> add two numbers together</span></span>
        <span class="token atrule">When</span> <span class="token atrule">I</span> add 3 and 6
        <span class="token atrule">Then</span> the result should equal 9</code>`,Mo,Tn,Zl,Za,Jl,Kl,Ao,hn,Io,d,Vl,Ja,Yl,nu,Ka,su,au,Va,tu,pu,Ya,ou,eu,nt,cu,lu,st,uu,iu,at,ku,ru,tt,fu,mu,pt,_u,du,ot,Eu,vu,Go,P,et,wu,Du,ct,bu,Cu,lt,Tu,hu,No,go,Lo,qs,$u,Ho,Fo,Wo,Xo,$n,Pn,ut,Pu,qo,jo,Qo,js,W,ns,Qs,Fu,yu,xu,Su,ss,Ru,Uo;return Y=new g({props:{$$slots:{default:[br]},$$scope:{ctx:w}}}),en=new g({props:{$$slots:{default:[Cr]},$$scope:{ctx:w}}}),un=new g({props:{$$slots:{default:[Tr]},$$scope:{ctx:w}}}),fn=new g({props:{$$slots:{default:[hr]},$$scope:{ctx:w}}}),mn=new g({props:{$$slots:{default:[$r]},$$scope:{ctx:w}}}),_n=new g({props:{$$slots:{default:[Pr]},$$scope:{ctx:w}}}),dn=new g({props:{$$slots:{default:[yr]},$$scope:{ctx:w}}}),En=new g({props:{$$slots:{default:[xr]},$$scope:{ctx:w}}}),wn=new g({props:{$$slots:{default:[Sr]},$$scope:{ctx:w}}}),hn=new g({props:{$$slots:{default:[Rr]},$$scope:{ctx:w}}}),{c(){r=o("p"),E=l(`지금까지 DDD의 핵심적인 개념에 대해 알아보았다.
하지만 DDD 외에도 TDD, BDD 등 DDD와 함께 사용할 수 있는 여러 개발 방법론이 존재한다.
본 포스트에서는 이에 대해 알아보고, DDD와 함께 사용할 수 있는 방법에 대해 알아보려 한다.`),m=i(),_=o("br"),_t=o("br"),dt=i(),q=o("h2"),j=o("a"),na=o("span"),oe=l("TDD"),Et=i(),vt=o("hr"),wt=i(),cs=o("p"),ee=l(`TDD(Test Driven Development)는 소프트웨어를 개발하기 이전에 비즈니스 요구사항을 충족시키는 테스트를 먼저 작성하는 개발 방법론이다.
코드를 작성할 때 테스트케이스를 지속적으로 업데이트해야 하고, 테스트케이스를 통과하는 코드를 작성해야 한다.`),Dt=i(),ls=o("p"),ce=l("가령 TDD를 사용하여 애플리케이션에 새로운 기능을 추가하는 작업을 수행한다고 할 때, 다음과 같은 절차를 따른다."),bt=i(),b=o("ol"),xn=o("li"),H=o("p"),le=l(`코드를 작성하기 전에 테스트케이스를 작성한다.
`),Sn=o("em"),ue=l("“API 유저인 내가 홈 화면에서 "),sa=o("code"),ie=l("/balance"),ke=l(" 엔드포인트로 요청을 날려서 모든 계정의 잔고를 확인할 수 있어야 한다”"),re=l(`처럼 유저 스토리를 기반으로 테스트케이스를 작성할 수 있다.
또는 `),Rn=o("em"),fe=l("“Given API 사용자, When "),aa=o("code"),me=l("/balance"),_e=l(" 호출, Then 모든 통장의 잔고를 확인할 수 있음”"),de=l("과 같이 Given-When-Then(GWT) 패턴으로 작성할 수도 있다."),Ee=i(),ta=o("p"),ve=l("이 단계에서는 단 한 줄의 코드도 작성하지 않으며, 비즈니스 요구사항에 초점을 맞추어야 한다."),we=i(),pa=o("li"),oa=o("p"),De=l(`테스트를 실행한다. 코드를 작성하지 않았기 때문에, 테스트는 당연히 실패할 것이다.
이 단계는 테스트케이스와 테스트 프레임워크가 잘 설정되었는지 확인하는 단계이다.`),be=i(),ea=o("li"),ca=o("p"),Ce=l(`테스트를 통과하는 최소한의 코드를 작성한다.
이 단계에서 작성되는 코드는 특별히 예쁘고 깔끔할 필요 없다! 그저 테스트를 통과하기만 하면 된다.
비즈니스 불변성을 위반하지 않는 선에서 테스트를 통과하기 위한 모든 방법을 동원한다.`),Te=i(),la=o("li"),ua=o("p"),he=l(`테스트를 재실행한다. 새 테스트뿐 아니라, 기존의 테스트도 모두 통과해야 한다.
즉, 새로운 코드가 기존의 코드를 망가뜨리지 않았는지 확인한다.`),$e=i(),ia=o("li"),ka=o("p"),Pe=l(`코드를 리팩토링한다. 3단계에서 작성한 예쁘지 않은 코드를 예쁘게 리팩토링해주면 된다.
틈틈이 테스트를 실행하면서 코드가 잘 동작하는지 확인한다.`),Ct=i(),us=o("p"),ye=l(`이러한 절차를 반복하는 것이 TDD의 핵심이다.
TDD는 새로운 기능을 추가할 때 뿐만 아니라, 기존의 코드를 수정할 때에도 사용할 수 있다. 즉, 레거시 코드를 개선하거나 디버깅할 때에도 유용하다.`),Tt=i(),ht=o("br"),$t=i(),is=o("p"),xe=l("다음과 같은 Given-When-Then 테스트케이스가 있다고 가정해보자."),Pt=i(),Bn=o("p"),Se=l("제목: "),ra=o("em"),Re=l("고객이 쿠키를 구매하면, 이메일 영수증을 받는다."),yt=i(),ks=o("p"),Be=l("그렇다면 다음과 같은 합격 기준을 정의할 수 있다."),xt=i(),T=o("ul"),fa=o("li"),Oe=l("사용자가 쿠키를 구매할 때 쿠키 재고가 충분하다면 결제가 완료된 이후 잠시 뒤 이메일 영수증을 받는다."),Me=i(),ma=o("li"),Ae=l("사용자가 쿠키를 구매할 때 쿠키 재고가 충분하지 않다면 계산원에게 쿠키 재고가 부족하다는 알림을 보낸다."),Ie=i(),_a=o("li"),Ge=l("사용자가 쿠키를 구매할 때 쿠키 재고가 충분하지만 카드 결제가 실패한다면 계산원에게 카드 결제가 실패했다는 알림을 보낸다."),Ne=i(),da=o("li"),ge=l("결제가 완료되었지만 이메일 전송에 실패한 경우, 계산원에게 이메일 전송이 실패했다는 알림을 보낸다."),St=i(),rs=o("p"),Le=l("이제 TDD 절차에 따라 기능을 구현해볼 것이다."),Rt=i(),Bt=o("br"),Ot=o("br"),Mt=i(),Q=o("h3"),U=o("a"),Ea=o("span"),He=l("테스트 추가"),At=i(),F=o("p"),va=o("code"),Fe=l("cookies.go"),We=l(" 파일 및 "),wa=o("code"),Xe=l("cookies_test.go"),qe=l(" 파일을 생성한다."),It=i(),On=o("pre"),Gt=i(),y=o("p"),je=l("go는 테스트 파일의 이름이 "),Da=o("code"),Qe=l("_test.go"),Ue=l("로 끝나는 파일을 테스트 파일로 인식한다. 또한 빌드 시 테스트 파일은 무시된다. golang에서의 테스트에 관련한 자세한 내용은 "),Mn=o("a"),ze=l("여기"),Ze=l("를 참고하자."),Nt=i(),z=o("p"),Je=l("TDD 절차에 따라, 테스트를 먼저 작성해 보자! "),ba=o("code"),Ke=l("cookies_test.go"),Ve=l(" 파일에 다음과 같이 테스트케이스를 작성한다."),gt=i(),An=o("pre"),Lt=i(),fs=o("p"),Ye=l(`위 코드에서 확인할 수 있듯 테스트케이스의 이름에 합격 기준이 명시되었다.
바로 이 부분에서 TDD와 DDD가 잘 어울린다는 것을 알 수 있다. TDD의 합격 기준 자체가 도메인 전문가로부터 나온 셈이며, 이 내용이 테스트케이스에 명시됨으로써 도메인 전문가와 개발자 사이의 의사소통이 원활해진다.`),Ht=i(),Z=o("p"),nc=l("Go에서는 테스트가 비어 있으면 통과한 것으로 간주하기 때문에, "),Ca=o("code"),sc=l("t.FailNow()"),ac=l(`를 추가하여 테스트가 실패하도록 만들었다.
이와 같이, 원칙적으로 아직 작성하지 않은 테스트는 실패해야 한다.`),Ft=i(),ms=o("p"),tc=l("그럼 테스트를 실행해보자!"),Wt=i(),In=o("pre"),Xt=i(),_s=o("p"),pc=l("테스트가 성공적으로 실패했다..! 다음 단계로 넘어가보자."),qt=i(),jt=o("br"),Qt=o("br"),Ut=i(),J=o("h3"),K=o("a"),Ta=o("span"),oc=l("코드 작성"),zt=i(),V=o("p"),ec=l(`지금까지 테스트만을 작성했고, 코드는 한 줄도 작성하지 않았다.
이제 할 일은 `),ha=o("code"),cc=l("cookies.go"),lc=l(` 파일에 테스트를 통과할 수 있는 최소한의 코드를 작성하는 것이다.
거듭 언급하지만, 이 단계에서 코드를 특별히 예쁘게 작성할 필요는 없다.`),Zt=i(),O(Y.$$.fragment),Jt=i(),Kt=o("br"),Vt=o("br"),Yt=i(),nn=o("h3"),sn=o("a"),$a=o("span"),uc=l("테스트 실행"),np=i(),$=o("p"),Pa=o("code"),ic=l("PurchaseCookies"),kc=l(` 메서드는 몇 가지 인터페이스를 통해 의존성을 주입받는다.
이러한 경우 인터페이스를 Mocking하여 테스트를 쉽게 작성할 수 있다.
이를테면 이메일 전송시 오류가 발생하는 상황을 테스트하기 위해, `),ya=o("code"),rc=l("EmailSender"),fc=l(" 인터페이스에 대한 Mock을 만들어 "),xa=o("code"),mc=l("SendEmailReceipt"),_c=l(" 메서드가 오류를 반환하도록 만들 수 있다."),sp=i(),an=o("p"),dc=l("Golang 개발팀에서는 Mocking을 위해 "),Gn=o("a"),Ec=l("gomock"),vc=l(` 프레임워크를 제공한다.
이 프레임워크를 이용하여 mock을 만들어보자.`),ap=i(),tn=o("p"),wc=l("먼저, "),Sa=o("code"),Dc=l("gomock"),bc=l("을 설치한다."),tp=i(),Nn=o("pre"),pp=i(),pn=o("p"),Cc=l("이후 프로젝트 루트 디렉토리에 "),Ra=o("code"),Tc=l("gen.go"),hc=l(" 파일을 생성하고, 다음과 같이 작성한다."),op=i(),gn=o("pre"),ep=i(),x=o("p"),$c=l("이제 "),Ba=o("code"),Pc=l("go generate ./..."),yc=l(" 명령어를 실행하면, "),Oa=o("code"),xc=l("mocks"),Sc=l(" 디렉토리에 Mock이 생성된 것을 확인할 수 있다."),cp=i(),Ln=o("pre"),lp=i(),on=o("p"),Rc=l("마지막으로, 생성된 mock을 활용하여, "),Ma=o("code"),Bc=l("cookies_test.go"),Oc=l(" 파일을 다음과 같이 수정한다."),up=i(),O(en.$$.fragment),ip=i(),D=o("p"),Mc=l("위 테스트 코드에서는 "),Aa=o("code"),Ac=l("gomock"),Ic=l("을 통해 생성된 Mock을 사용하여 각 interface를 충족시키는 mock을 만들고, "),Ia=o("code"),Gc=l("NewCookieService"),Nc=l(" 메서드를 통해 "),Ga=o("code"),gc=l("CookieService"),Lc=l(`를 생성한다.
또한 `),Na=o("code"),Hc=l("gomock"),Fc=l(`의 기능을 이용하여, mock이 지정된 파라미터를 받았을 때 어떤 동작을 수행해야 하는지를 지정한다.
이후 `),ga=o("code"),Wc=l("PurchaseCookies"),Xc=l(" 메서드를 호출하고, 동작이 예상대로 수행되는지 확인할 수 있다.."),kp=i(),Hn=o("p"),La=o("code"),qc=l("go test"),jc=l(` 명령어를 통해 이 테스트를 실행하면 통과할 것이다. 테스트 설명에 명시된 기준을 충족시킨다.
하지만 코드에 몇 가지 TODO 태그가 남아있는 것을 확인할 수 있다.
도메인 전문가와의 질의를 진행한 후 이 부분을 수정해보자.`),rp=i(),cn=o("p"),Qc=l("Q. 쿠키의 가격은 어떻게 결정되나요?"),Uc=o("br"),zc=l(`
A. 나중에 변경될 수 있지만 당장은 50센트로 고정되어 있습니다.`),fp=i(),ds=o("p"),Zc=l(`Q. 쿠키 재고보다 더 많은 쿠키를 구매하려고 하면 어떻게 해야 할까요?
A. 일단 남아있는 재고만큼만 구매할 수 있도록 합니다.`),mp=i(),Es=o("p"),Jc=l(`Q. 사용자의 카드 토큰은 어떻게 얻나요?
A. 카드 결제하면 뿅 나와요`),_p=i(),vs=o("p"),Kc=l(`Q. 사용자의 이메일 주소는 어떻게 얻나요?
A. 이것도 결제하면 뿅 나와요`),dp=i(),ln=o("p"),Vc=l(`서비스가 어떻게 동작해야 할지 더 잘 이해할 수 있게 되었다.
다만 TDD니까, 코드를 수정하기에 앞서 테스트를 먼저 작성해야 한다.
테스트를 작성하기 위해 `),Ha=o("code"),Yc=l("cookies_test.go"),nl=l(" 파일에 다음과 같은 테스트 stub을 추가한다."),Ep=i(),O(un.$$.fragment),vp=i(),wp=o("br"),Dp=o("br"),bp=i(),kn=o("h3"),rn=o("a"),Fa=o("span"),sl=l("리팩토링"),Cp=i(),ws=o("p"),al=l(`TDD의 마지막 단계는 리팩토링이다.
위에서 진행하였던, 도메인 전문가와의 질의 내용을 반영하여 코드를 수정할 것이다.`),Tp=i(),Ds=o("p"),tl=l("일단 쿠키 가격이 50센트로 변경된다. 이를 반영하면 당연히 테스트는 실패할 것이다. 따라서 테스트 코드도 수정해준다. 당연한 얘기니 코드는 생략!"),hp=i(),bs=o("p"),pl=l("다른 테스트들도 작성할 것이다. 먼저, 쿠키 재고보다 더 많은 쿠키를 구매하려고 하면 어떻게 해야 할지에 대한 테스트를 작성한다."),$p=i(),O(fn.$$.fragment),Pp=i(),Cs=o("p"),ol=l("일단 이 테스트를 실행하면 성공할 것이다. 코드에서 쿠키 재고가 부족하면 에러를 반환하게끔 작성해두었기 때문."),yp=i(),Ts=o("p"),el=l("하지만 쿠키 재고가 있을 때는 남아있는 재고만큼만 구매할 수 있도록 하라는 요구사항이 있다. 이를 반영하여 코드를 수정해야 한다."),xp=i(),O(mn.$$.fragment),Sp=i(),Rp=o("br"),Bp=i(),hs=o("p"),cl=l("다음 단계의 테스트를 먼저 작성해보자. 카드 결제가 실패했을 때, 어떻게 처리할지에 대한 테스트이다."),Op=i(),O(_n.$$.fragment),Mp=i(),$s=o("p"),ll=l("테스트를 실행하면 다음과 같은 에러가 발생한다."),Ap=i(),Fn=o("pre"),Ip=i(),S=o("p"),ul=l(`얼추 보니 코드에서 반환하는 에러 메시지와 테스트에서 기대하는 에러 메시지가 다르다.
코드에서는 에러를 한번 `),Wa=o("code"),il=l("fmt.Errorf"),kl=l("로 감싸서 반환하고 있다. 따라서 테스트에서 기대하는 에러 메시지를 수정하거나, 코드에서 "),Xa=o("code"),rl=l("fmt.Errorf"),fl=l(`를 제거하면 테스트가 성공할 것이다. 코드를 수정하는 것이 더 좋아보이니, 코드를 수정해보자.
이를 반영하여 코드를 수정하고, 다시 테스트를 실행해보자.`),Gp=i(),Wn=o("pre"),Np=i(),Ps=o("p"),ml=l("이후 테스트를 실행하면 성공할 것이다."),gp=i(),Xn=o("pre"),Lp=i(),ys=o("p"),_l=l("이제 코드를 리팩토링하는 단계이지만, 달리 리팩토링할 부분이 없으니 생략하고 다음 단계로 넘어간다."),Hp=i(),Fp=o("br"),Wp=i(),xs=o("p"),dl=l(`다음 단계의 테스트는 이메일 전송이 실패했을 때, 어떻게 처리할지에 대한 테스트이다.
먼저 테스트를 작성한다.`),Xp=i(),qn=o("pre"),qp=i(),Ss=o("p"),El=l(`테스트를 실행하면 이전 단계와 동일한 에러가 발생한다. 해결 방법도 동일하다.
코드를 수정하거나, 테스트에서 기대하는 에러 메시지를 수정하면 된다. 마찬가지로 코드를 수정하는 것이 더 좋아보이니, 코드를 수정해보자.`),jp=i(),jn=o("pre"),Qp=i(),Rs=o("p"),vl=l("테스트를 다시 실행하면 성공할 것이다."),Up=i(),zp=o("br"),Zp=i(),Bs=o("p"),wl=l("마지막 테스트를 작성해보자."),Jp=i(),O(dn.$$.fragment),Kp=i(),Os=o("p"),Dl=l("위 테스트를 실행하면 다음과 같이 실패할 것이다."),Vp=i(),Qn=o("pre"),Yp=i(),Ms=o("p"),bl=l(`남아있는 쿠키 재고가 구매하려는 쿠키 재고보다 적을 때 처리하는 로직을 코드에 작성하지 않았기 때문에 테스트가 실패하는 것이다.
따라서 코드를 수정해보자.`),no=i(),O(En.$$.fragment),so=i(),As=o("p"),Cl=l("테스트를 다시 실행하면 성공할 것이다."),ao=i(),to=o("br"),po=i(),vn=o("p"),Tl=l("이제 모든 테스트 케이스가 통과하므로, "),qa=o("code"),hl=l("go test -cover"),$l=l(" 명령을 실행해보자."),oo=i(),Un=o("pre"),eo=i(),Is=o("p"),Pl=l("100% 커버리지를 달성한 것을 확인할 수 있다! 신난다🎉🎉"),co=i(),lo=o("br"),uo=i(),Gs=o("p"),yl=l(`다만 지금까지 작성한 테스트 코드에서 궁금증이 좀 생길 수 있다.
얼핏 봐도 상당한 코드 중복이 있다. 일정한 패턴이 보이는데, 적당히 묶어서 함수로 만들거나 하면 좋지 않을까?
이에 대한 대답은, 그래도 된다는 것이다. 실제로 Go에는 Table Test라고 하는 방식이 있어서, 테스트 코드를 더 깔끔하게 작성할 수 있다.`),io=i(),Ns=o("p"),xl=l(`하지만 이 책에서는 테스트 코드가 더 깔끔해지는 것보다는, 테스트 코드가 더 명확하게 보이는 것을 우선시한다.
테스트 코드는 그 자체로 일종의 문서 역할을 하기 때문에, 테스트 코드를 읽는 사람이 테스트 코드를 이해하기 쉽게 작성하는 것이 중요하다고 설명한다.`),ko=i(),ro=o("br"),fo=i(),gs=o("p"),Sl=l("아직 안 끝났다ㅠㅠ 아직 구현하지 않은 요구사항이 있다."),mo=i(),Ls=o("p"),Rl=l(`코드에는 카드 토큰과 이메일 주소가 하드코딩되어 있는데, 이는 요청할 때 파라미터로 받아오게 될 것이다.
따라서, 함수 정의를 바꿔야 한다.`),_o=i(),zn=o("pre"),Eo=i(),Hs=o("p"),Bl=l(`하지만 이렇게 변경하고 나면 기존에 작성한 테스트 코드들이 모두 실패할 것이다.
이에 맞게 테스트 코드를 수정해줄 필요가 있다.`),vo=i(),O(wn.$$.fragment),wo=i(),Fs=o("p"),Ol=l("이와 같이 테스트 코드를 수정해주면, 테스트가 다시 성공할 것이다."),Do=i(),bo=o("br"),Co=i(),Ws=o("p"),Ml=l("이 정도면 TDD로 개발하는 것에 대한 전반적인 감을 잡을 수 있을 것이다. 다음 단계인 BDD(Behavior-Driven Development)에 대해 알아보자."),To=i(),ho=o("br"),$o=o("br"),Po=i(),Dn=o("h2"),bn=o("a"),ja=o("span"),Al=l("BDD"),yo=i(),Xs=o("p"),Il=l("BDD는 TDD의 확장판같은 개념으로, 엔지니어-도메인 전문가-QA간의 긴밀한 협업을 가능하게 하는 개발 방법론이다."),xo=i(),R=o("p"),Gl=l(`BDD의 목표는 Domain-Specific Language(DSL)을 통해 더 높은 수준의 추상화를 제공하는 것이며, 이는 테스트로 실행 가능하다.
가장 유명한 BDD 테스트 프레임워크는 `),Zn=o("a"),Nl=l("Gherkin"),gl=l("과 "),Jn=o("a"),Ll=l("Cucumber"),Hl=l(`이다.
Gherkin은 몇 개의 키워드로 이루어진 언어를 제공하며, Cucumber는 이 언어를 읽어 소프트웨어가 예상대로 작동하는지 검증한다.`),So=i(),Kn=o("p"),Cn=o("a"),Qa=o("code"),Fl=l("go-bdd"),Wl=l(" 프레임워크"),Xl=l("를 활용하여 BDD 테스트를 작성해보자. 먼저, go-bdd를 설치한다."),Ro=i(),Vn=o("pre"),Bo=i(),B=o("p"),ql=l("이후 프로젝트 루트 디렉토리에 "),Ua=o("code"),jl=l("features"),Ql=l(" 디렉토리를 생성하고, "),za=o("code"),Ul=l("features/add.feature"),zl=l(" 파일을 생성한 후 다음과 같이 작성한다."),Oo=i(),Yn=o("pre"),Mo=i(),Tn=o("p"),Zl=l("그리고 "),Za=o("code"),Jl=l("add_test.go"),Kl=l(" 파일을 생성하여 다음과 같이 작성한다."),Ao=i(),O(hn.$$.fragment),Io=i(),d=o("p"),Vl=l("위 코드에서 "),Ja=o("code"),Yl=l("add"),nu=l(" 함수는 "),Ka=o("code"),su=l("bdd step"),au=l(` 함수인데, 함수 이름이 중요하다.
`),Va=o("code"),tu=l("add.feature"),pu=l(" 파일의 "),Ya=o("code"),ou=l("When I add 3 and 6"),eu=l("이라는 문장을 만나면, "),nt=o("code"),cu=l("add"),lu=l(` 함수가 실행된다.
만약 `),st=o("code"),uu=l("add"),iu=l(" 함수의 이름을 "),at=o("code"),ku=l("sum"),ru=l("으로 변경한다면, "),tt=o("code"),fu=l("add.feature"),mu=l(" 파일을 "),pt=o("code"),_u=l("When I sum 3 and 6"),du=l(`으로 변경해야 할 것이다.
이후 로직을 수행하고 나중에 `),ot=o("code"),Eu=l("check"),vu=l("에서 불러올 수 있도록 컨텍스트에 저장한다."),Go=i(),P=o("p"),et=o("code"),wu=l("check"),Du=l(` 함수는 실질적인 테스트를 수행하는 함수로, 검증은 이 함수에서 이루어진다.
다음으로 테스트 스위트를 생성하고, `),ct=o("code"),bu=l("add"),Cu=l("와 "),lt=o("code"),Tu=l("check"),hu=l(` 함수를 등록한다.
이 테스트를 수행한다면 통과할 것이다.`),No=i(),go=o("br"),Lo=i(),qs=o("p"),$u=l(`이와 같이 BDD는 자연어와 유사하여 직관성이 뛰어나지만, 테스트 코드를 작성하는 것이 번거로워진다.
앞선 예제의 경우 비교적 간단하지만, 실제로는 훨씬 복잡한 테스트 코드를 작성해야 할 것이다. 그 코드를 BDD로 작성한다고 생각해 보면 좀 어지러워진다.
도메인 전문가가 BDD를 이해할 수 있고, 자주 의사소통할 수 있다면 BDD를 사용하는 게 괜찮은 선택지일 수 있다.
하지만 그렇지 않다면 그냥 Unit Test를 작성하는 게 더 좋다.`),Ho=i(),Fo=o("br"),Wo=o("br"),Xo=i(),$n=o("h2"),Pn=o("a"),ut=o("span"),Pu=l("References"),qo=i(),jo=o("hr"),Qo=i(),js=o("center"),W=o("p"),ns=o("a"),Qs=o("img"),yu=i(),xu=o("br"),Su=i(),ss=o("a"),Ru=l("Matthew Boyle, Domain-Driven Design with Golang』, O’Reilly Media, Inc."),this.h()},l(n){r=e(n,"P",{});var t=c(r);E=u(t,`지금까지 DDD의 핵심적인 개념에 대해 알아보았다.
하지만 DDD 외에도 TDD, BDD 등 DDD와 함께 사용할 수 있는 여러 개발 방법론이 존재한다.
본 포스트에서는 이에 대해 알아보고, DDD와 함께 사용할 수 있는 방법에 대해 알아보려 한다.`),t.forEach(s),m=k(n),_=e(n,"BR",{}),_t=e(n,"BR",{}),dt=k(n),q=e(n,"H2",{id:!0});var Us=c(q);j=e(Us,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var it=c(j);na=e(it,"SPAN",{class:!0}),c(na).forEach(s),it.forEach(s),oe=u(Us,"TDD"),Us.forEach(s),Et=k(n),vt=e(n,"HR",{}),wt=k(n),cs=e(n,"P",{});var kt=c(cs);ee=u(kt,`TDD(Test Driven Development)는 소프트웨어를 개발하기 이전에 비즈니스 요구사항을 충족시키는 테스트를 먼저 작성하는 개발 방법론이다.
코드를 작성할 때 테스트케이스를 지속적으로 업데이트해야 하고, 테스트케이스를 통과하는 코드를 작성해야 한다.`),kt.forEach(s),Dt=k(n),ls=e(n,"P",{});var rt=c(ls);ce=u(rt,"가령 TDD를 사용하여 애플리케이션에 새로운 기능을 추가하는 작업을 수행한다고 할 때, 다음과 같은 절차를 따른다."),rt.forEach(s),bt=k(n),b=e(n,"OL",{});var C=c(b);xn=e(C,"LI",{});var as=c(xn);H=e(as,"P",{});var X=c(H);le=u(X,`코드를 작성하기 전에 테스트케이스를 작성한다.
`),Sn=e(X,"EM",{});var ts=c(Sn);ue=u(ts,"“API 유저인 내가 홈 화면에서 "),sa=e(ts,"CODE",{});var ft=c(sa);ie=u(ft,"/balance"),ft.forEach(s),ke=u(ts," 엔드포인트로 요청을 날려서 모든 계정의 잔고를 확인할 수 있어야 한다”"),ts.forEach(s),re=u(X,`처럼 유저 스토리를 기반으로 테스트케이스를 작성할 수 있다.
또는 `),Rn=e(X,"EM",{});var ps=c(Rn);fe=u(ps,"“Given API 사용자, When "),aa=e(ps,"CODE",{});var Wu=c(aa);me=u(Wu,"/balance"),Wu.forEach(s),_e=u(ps," 호출, Then 모든 통장의 잔고를 확인할 수 있음”"),ps.forEach(s),de=u(X,"과 같이 Given-When-Then(GWT) 패턴으로 작성할 수도 있다."),X.forEach(s),Ee=k(as),ta=e(as,"P",{});var Xu=c(ta);ve=u(Xu,"이 단계에서는 단 한 줄의 코드도 작성하지 않으며, 비즈니스 요구사항에 초점을 맞추어야 한다."),Xu.forEach(s),as.forEach(s),we=k(C),pa=e(C,"LI",{});var qu=c(pa);oa=e(qu,"P",{});var ju=c(oa);De=u(ju,`테스트를 실행한다. 코드를 작성하지 않았기 때문에, 테스트는 당연히 실패할 것이다.
이 단계는 테스트케이스와 테스트 프레임워크가 잘 설정되었는지 확인하는 단계이다.`),ju.forEach(s),qu.forEach(s),be=k(C),ea=e(C,"LI",{});var Qu=c(ea);ca=e(Qu,"P",{});var Uu=c(ca);Ce=u(Uu,`테스트를 통과하는 최소한의 코드를 작성한다.
이 단계에서 작성되는 코드는 특별히 예쁘고 깔끔할 필요 없다! 그저 테스트를 통과하기만 하면 된다.
비즈니스 불변성을 위반하지 않는 선에서 테스트를 통과하기 위한 모든 방법을 동원한다.`),Uu.forEach(s),Qu.forEach(s),Te=k(C),la=e(C,"LI",{});var zu=c(la);ua=e(zu,"P",{});var Zu=c(ua);he=u(Zu,`테스트를 재실행한다. 새 테스트뿐 아니라, 기존의 테스트도 모두 통과해야 한다.
즉, 새로운 코드가 기존의 코드를 망가뜨리지 않았는지 확인한다.`),Zu.forEach(s),zu.forEach(s),$e=k(C),ia=e(C,"LI",{});var Ju=c(ia);ka=e(Ju,"P",{});var Ku=c(ka);Pe=u(Ku,`코드를 리팩토링한다. 3단계에서 작성한 예쁘지 않은 코드를 예쁘게 리팩토링해주면 된다.
틈틈이 테스트를 실행하면서 코드가 잘 동작하는지 확인한다.`),Ku.forEach(s),Ju.forEach(s),C.forEach(s),Ct=k(n),us=e(n,"P",{});var Vu=c(us);ye=u(Vu,`이러한 절차를 반복하는 것이 TDD의 핵심이다.
TDD는 새로운 기능을 추가할 때 뿐만 아니라, 기존의 코드를 수정할 때에도 사용할 수 있다. 즉, 레거시 코드를 개선하거나 디버깅할 때에도 유용하다.`),Vu.forEach(s),Tt=k(n),ht=e(n,"BR",{}),$t=k(n),is=e(n,"P",{});var Yu=c(is);xe=u(Yu,"다음과 같은 Given-When-Then 테스트케이스가 있다고 가정해보자."),Yu.forEach(s),Pt=k(n),Bn=e(n,"P",{});var Bu=c(Bn);Se=u(Bu,"제목: "),ra=e(Bu,"EM",{});var ni=c(ra);Re=u(ni,"고객이 쿠키를 구매하면, 이메일 영수증을 받는다."),ni.forEach(s),Bu.forEach(s),yt=k(n),ks=e(n,"P",{});var si=c(ks);Be=u(si,"그렇다면 다음과 같은 합격 기준을 정의할 수 있다."),si.forEach(s),xt=k(n),T=e(n,"UL",{});var yn=c(T);fa=e(yn,"LI",{});var ai=c(fa);Oe=u(ai,"사용자가 쿠키를 구매할 때 쿠키 재고가 충분하다면 결제가 완료된 이후 잠시 뒤 이메일 영수증을 받는다."),ai.forEach(s),Me=k(yn),ma=e(yn,"LI",{});var ti=c(ma);Ae=u(ti,"사용자가 쿠키를 구매할 때 쿠키 재고가 충분하지 않다면 계산원에게 쿠키 재고가 부족하다는 알림을 보낸다."),ti.forEach(s),Ie=k(yn),_a=e(yn,"LI",{});var pi=c(_a);Ge=u(pi,"사용자가 쿠키를 구매할 때 쿠키 재고가 충분하지만 카드 결제가 실패한다면 계산원에게 카드 결제가 실패했다는 알림을 보낸다."),pi.forEach(s),Ne=k(yn),da=e(yn,"LI",{});var oi=c(da);ge=u(oi,"결제가 완료되었지만 이메일 전송에 실패한 경우, 계산원에게 이메일 전송이 실패했다는 알림을 보낸다."),oi.forEach(s),yn.forEach(s),St=k(n),rs=e(n,"P",{});var ei=c(rs);Le=u(ei,"이제 TDD 절차에 따라 기능을 구현해볼 것이다."),ei.forEach(s),Rt=k(n),Bt=e(n,"BR",{}),Ot=e(n,"BR",{}),Mt=k(n),Q=e(n,"H3",{id:!0});var Ou=c(Q);U=e(Ou,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var ci=c(U);Ea=e(ci,"SPAN",{class:!0}),c(Ea).forEach(s),ci.forEach(s),He=u(Ou,"테스트 추가"),Ou.forEach(s),At=k(n),F=e(n,"P",{});var mt=c(F);va=e(mt,"CODE",{});var li=c(va);Fe=u(li,"cookies.go"),li.forEach(s),We=u(mt," 파일 및 "),wa=e(mt,"CODE",{});var ui=c(wa);Xe=u(ui,"cookies_test.go"),ui.forEach(s),qe=u(mt," 파일을 생성한다."),mt.forEach(s),It=k(n),On=e(n,"PRE",{class:!0});var sr=c(On);sr.forEach(s),Gt=k(n),y=e(n,"P",{});var zs=c(y);je=u(zs,"go는 테스트 파일의 이름이 "),Da=e(zs,"CODE",{});var ii=c(Da);Qe=u(ii,"_test.go"),ii.forEach(s),Ue=u(zs,"로 끝나는 파일을 테스트 파일로 인식한다. 또한 빌드 시 테스트 파일은 무시된다. golang에서의 테스트에 관련한 자세한 내용은 "),Mn=e(zs,"A",{href:!0,rel:!0});var ki=c(Mn);ze=u(ki,"여기"),ki.forEach(s),Ze=u(zs,"를 참고하자."),zs.forEach(s),Nt=k(n),z=e(n,"P",{});var zo=c(z);Je=u(zo,"TDD 절차에 따라, 테스트를 먼저 작성해 보자! "),ba=e(zo,"CODE",{});var ri=c(ba);Ke=u(ri,"cookies_test.go"),ri.forEach(s),Ve=u(zo," 파일에 다음과 같이 테스트케이스를 작성한다."),zo.forEach(s),gt=k(n),An=e(n,"PRE",{class:!0});var ar=c(An);ar.forEach(s),Lt=k(n),fs=e(n,"P",{});var fi=c(fs);Ye=u(fi,`위 코드에서 확인할 수 있듯 테스트케이스의 이름에 합격 기준이 명시되었다.
바로 이 부분에서 TDD와 DDD가 잘 어울린다는 것을 알 수 있다. TDD의 합격 기준 자체가 도메인 전문가로부터 나온 셈이며, 이 내용이 테스트케이스에 명시됨으로써 도메인 전문가와 개발자 사이의 의사소통이 원활해진다.`),fi.forEach(s),Ht=k(n),Z=e(n,"P",{});var Zo=c(Z);nc=u(Zo,"Go에서는 테스트가 비어 있으면 통과한 것으로 간주하기 때문에, "),Ca=e(Zo,"CODE",{});var mi=c(Ca);sc=u(mi,"t.FailNow()"),mi.forEach(s),ac=u(Zo,`를 추가하여 테스트가 실패하도록 만들었다.
이와 같이, 원칙적으로 아직 작성하지 않은 테스트는 실패해야 한다.`),Zo.forEach(s),Ft=k(n),ms=e(n,"P",{});var _i=c(ms);tc=u(_i,"그럼 테스트를 실행해보자!"),_i.forEach(s),Wt=k(n),In=e(n,"PRE",{class:!0});var tr=c(In);tr.forEach(s),Xt=k(n),_s=e(n,"P",{});var di=c(_s);pc=u(di,"테스트가 성공적으로 실패했다..! 다음 단계로 넘어가보자."),di.forEach(s),qt=k(n),jt=e(n,"BR",{}),Qt=e(n,"BR",{}),Ut=k(n),J=e(n,"H3",{id:!0});var Mu=c(J);K=e(Mu,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Ei=c(K);Ta=e(Ei,"SPAN",{class:!0}),c(Ta).forEach(s),Ei.forEach(s),oc=u(Mu,"코드 작성"),Mu.forEach(s),zt=k(n),V=e(n,"P",{});var Jo=c(V);ec=u(Jo,`지금까지 테스트만을 작성했고, 코드는 한 줄도 작성하지 않았다.
이제 할 일은 `),ha=e(Jo,"CODE",{});var vi=c(ha);cc=u(vi,"cookies.go"),vi.forEach(s),lc=u(Jo,` 파일에 테스트를 통과할 수 있는 최소한의 코드를 작성하는 것이다.
거듭 언급하지만, 이 단계에서 코드를 특별히 예쁘게 작성할 필요는 없다.`),Jo.forEach(s),Zt=k(n),M(Y.$$.fragment,n),Jt=k(n),Kt=e(n,"BR",{}),Vt=e(n,"BR",{}),Yt=k(n),nn=e(n,"H3",{id:!0});var Au=c(nn);sn=e(Au,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var wi=c(sn);$a=e(wi,"SPAN",{class:!0}),c($a).forEach(s),wi.forEach(s),uc=u(Au,"테스트 실행"),Au.forEach(s),np=k(n),$=e(n,"P",{});var os=c($);Pa=e(os,"CODE",{});var Di=c(Pa);ic=u(Di,"PurchaseCookies"),Di.forEach(s),kc=u(os,` 메서드는 몇 가지 인터페이스를 통해 의존성을 주입받는다.
이러한 경우 인터페이스를 Mocking하여 테스트를 쉽게 작성할 수 있다.
이를테면 이메일 전송시 오류가 발생하는 상황을 테스트하기 위해, `),ya=e(os,"CODE",{});var bi=c(ya);rc=u(bi,"EmailSender"),bi.forEach(s),fc=u(os," 인터페이스에 대한 Mock을 만들어 "),xa=e(os,"CODE",{});var Ci=c(xa);mc=u(Ci,"SendEmailReceipt"),Ci.forEach(s),_c=u(os," 메서드가 오류를 반환하도록 만들 수 있다."),os.forEach(s),sp=k(n),an=e(n,"P",{});var Ko=c(an);dc=u(Ko,"Golang 개발팀에서는 Mocking을 위해 "),Gn=e(Ko,"A",{href:!0,rel:!0});var Ti=c(Gn);Ec=u(Ti,"gomock"),Ti.forEach(s),vc=u(Ko,` 프레임워크를 제공한다.
이 프레임워크를 이용하여 mock을 만들어보자.`),Ko.forEach(s),ap=k(n),tn=e(n,"P",{});var Vo=c(tn);wc=u(Vo,"먼저, "),Sa=e(Vo,"CODE",{});var hi=c(Sa);Dc=u(hi,"gomock"),hi.forEach(s),bc=u(Vo,"을 설치한다."),Vo.forEach(s),tp=k(n),Nn=e(n,"PRE",{class:!0});var pr=c(Nn);pr.forEach(s),pp=k(n),pn=e(n,"P",{});var Yo=c(pn);Cc=u(Yo,"이후 프로젝트 루트 디렉토리에 "),Ra=e(Yo,"CODE",{});var $i=c(Ra);Tc=u($i,"gen.go"),$i.forEach(s),hc=u(Yo," 파일을 생성하고, 다음과 같이 작성한다."),Yo.forEach(s),op=k(n),gn=e(n,"PRE",{class:!0});var or=c(gn);or.forEach(s),ep=k(n),x=e(n,"P",{});var Zs=c(x);$c=u(Zs,"이제 "),Ba=e(Zs,"CODE",{});var Pi=c(Ba);Pc=u(Pi,"go generate ./..."),Pi.forEach(s),yc=u(Zs," 명령어를 실행하면, "),Oa=e(Zs,"CODE",{});var yi=c(Oa);xc=u(yi,"mocks"),yi.forEach(s),Sc=u(Zs," 디렉토리에 Mock이 생성된 것을 확인할 수 있다."),Zs.forEach(s),cp=k(n),Ln=e(n,"PRE",{class:!0});var er=c(Ln);er.forEach(s),lp=k(n),on=e(n,"P",{});var ne=c(on);Rc=u(ne,"마지막으로, 생성된 mock을 활용하여, "),Ma=e(ne,"CODE",{});var xi=c(Ma);Bc=u(xi,"cookies_test.go"),xi.forEach(s),Oc=u(ne," 파일을 다음과 같이 수정한다."),ne.forEach(s),up=k(n),M(en.$$.fragment,n),ip=k(n),D=e(n,"P",{});var h=c(D);Mc=u(h,"위 테스트 코드에서는 "),Aa=e(h,"CODE",{});var Si=c(Aa);Ac=u(Si,"gomock"),Si.forEach(s),Ic=u(h,"을 통해 생성된 Mock을 사용하여 각 interface를 충족시키는 mock을 만들고, "),Ia=e(h,"CODE",{});var Ri=c(Ia);Gc=u(Ri,"NewCookieService"),Ri.forEach(s),Nc=u(h," 메서드를 통해 "),Ga=e(h,"CODE",{});var Bi=c(Ga);gc=u(Bi,"CookieService"),Bi.forEach(s),Lc=u(h,`를 생성한다.
또한 `),Na=e(h,"CODE",{});var Oi=c(Na);Hc=u(Oi,"gomock"),Oi.forEach(s),Fc=u(h,`의 기능을 이용하여, mock이 지정된 파라미터를 받았을 때 어떤 동작을 수행해야 하는지를 지정한다.
이후 `),ga=e(h,"CODE",{});var Mi=c(ga);Wc=u(Mi,"PurchaseCookies"),Mi.forEach(s),Xc=u(h," 메서드를 호출하고, 동작이 예상대로 수행되는지 확인할 수 있다.."),h.forEach(s),kp=k(n),Hn=e(n,"P",{});var Iu=c(Hn);La=e(Iu,"CODE",{});var Ai=c(La);qc=u(Ai,"go test"),Ai.forEach(s),jc=u(Iu,` 명령어를 통해 이 테스트를 실행하면 통과할 것이다. 테스트 설명에 명시된 기준을 충족시킨다.
하지만 코드에 몇 가지 TODO 태그가 남아있는 것을 확인할 수 있다.
도메인 전문가와의 질의를 진행한 후 이 부분을 수정해보자.`),Iu.forEach(s),rp=k(n),cn=e(n,"P",{});var se=c(cn);Qc=u(se,"Q. 쿠키의 가격은 어떻게 결정되나요?"),Uc=e(se,"BR",{}),zc=u(se,`
A. 나중에 변경될 수 있지만 당장은 50센트로 고정되어 있습니다.`),se.forEach(s),fp=k(n),ds=e(n,"P",{});var Ii=c(ds);Zc=u(Ii,`Q. 쿠키 재고보다 더 많은 쿠키를 구매하려고 하면 어떻게 해야 할까요?
A. 일단 남아있는 재고만큼만 구매할 수 있도록 합니다.`),Ii.forEach(s),mp=k(n),Es=e(n,"P",{});var Gi=c(Es);Jc=u(Gi,`Q. 사용자의 카드 토큰은 어떻게 얻나요?
A. 카드 결제하면 뿅 나와요`),Gi.forEach(s),_p=k(n),vs=e(n,"P",{});var Ni=c(vs);Kc=u(Ni,`Q. 사용자의 이메일 주소는 어떻게 얻나요?
A. 이것도 결제하면 뿅 나와요`),Ni.forEach(s),dp=k(n),ln=e(n,"P",{});var ae=c(ln);Vc=u(ae,`서비스가 어떻게 동작해야 할지 더 잘 이해할 수 있게 되었다.
다만 TDD니까, 코드를 수정하기에 앞서 테스트를 먼저 작성해야 한다.
테스트를 작성하기 위해 `),Ha=e(ae,"CODE",{});var gi=c(Ha);Yc=u(gi,"cookies_test.go"),gi.forEach(s),nl=u(ae," 파일에 다음과 같은 테스트 stub을 추가한다."),ae.forEach(s),Ep=k(n),M(un.$$.fragment,n),vp=k(n),wp=e(n,"BR",{}),Dp=e(n,"BR",{}),bp=k(n),kn=e(n,"H3",{id:!0});var Gu=c(kn);rn=e(Gu,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Li=c(rn);Fa=e(Li,"SPAN",{class:!0}),c(Fa).forEach(s),Li.forEach(s),sl=u(Gu,"리팩토링"),Gu.forEach(s),Cp=k(n),ws=e(n,"P",{});var Hi=c(ws);al=u(Hi,`TDD의 마지막 단계는 리팩토링이다.
위에서 진행하였던, 도메인 전문가와의 질의 내용을 반영하여 코드를 수정할 것이다.`),Hi.forEach(s),Tp=k(n),Ds=e(n,"P",{});var Fi=c(Ds);tl=u(Fi,"일단 쿠키 가격이 50센트로 변경된다. 이를 반영하면 당연히 테스트는 실패할 것이다. 따라서 테스트 코드도 수정해준다. 당연한 얘기니 코드는 생략!"),Fi.forEach(s),hp=k(n),bs=e(n,"P",{});var Wi=c(bs);pl=u(Wi,"다른 테스트들도 작성할 것이다. 먼저, 쿠키 재고보다 더 많은 쿠키를 구매하려고 하면 어떻게 해야 할지에 대한 테스트를 작성한다."),Wi.forEach(s),$p=k(n),M(fn.$$.fragment,n),Pp=k(n),Cs=e(n,"P",{});var Xi=c(Cs);ol=u(Xi,"일단 이 테스트를 실행하면 성공할 것이다. 코드에서 쿠키 재고가 부족하면 에러를 반환하게끔 작성해두었기 때문."),Xi.forEach(s),yp=k(n),Ts=e(n,"P",{});var qi=c(Ts);el=u(qi,"하지만 쿠키 재고가 있을 때는 남아있는 재고만큼만 구매할 수 있도록 하라는 요구사항이 있다. 이를 반영하여 코드를 수정해야 한다."),qi.forEach(s),xp=k(n),M(mn.$$.fragment,n),Sp=k(n),Rp=e(n,"BR",{}),Bp=k(n),hs=e(n,"P",{});var ji=c(hs);cl=u(ji,"다음 단계의 테스트를 먼저 작성해보자. 카드 결제가 실패했을 때, 어떻게 처리할지에 대한 테스트이다."),ji.forEach(s),Op=k(n),M(_n.$$.fragment,n),Mp=k(n),$s=e(n,"P",{});var Qi=c($s);ll=u(Qi,"테스트를 실행하면 다음과 같은 에러가 발생한다."),Qi.forEach(s),Ap=k(n),Fn=e(n,"PRE",{class:!0});var cr=c(Fn);cr.forEach(s),Ip=k(n),S=e(n,"P",{});var Js=c(S);ul=u(Js,`얼추 보니 코드에서 반환하는 에러 메시지와 테스트에서 기대하는 에러 메시지가 다르다.
코드에서는 에러를 한번 `),Wa=e(Js,"CODE",{});var Ui=c(Wa);il=u(Ui,"fmt.Errorf"),Ui.forEach(s),kl=u(Js,"로 감싸서 반환하고 있다. 따라서 테스트에서 기대하는 에러 메시지를 수정하거나, 코드에서 "),Xa=e(Js,"CODE",{});var zi=c(Xa);rl=u(zi,"fmt.Errorf"),zi.forEach(s),fl=u(Js,`를 제거하면 테스트가 성공할 것이다. 코드를 수정하는 것이 더 좋아보이니, 코드를 수정해보자.
이를 반영하여 코드를 수정하고, 다시 테스트를 실행해보자.`),Js.forEach(s),Gp=k(n),Wn=e(n,"PRE",{class:!0});var lr=c(Wn);lr.forEach(s),Np=k(n),Ps=e(n,"P",{});var Zi=c(Ps);ml=u(Zi,"이후 테스트를 실행하면 성공할 것이다."),Zi.forEach(s),gp=k(n),Xn=e(n,"PRE",{class:!0});var ur=c(Xn);ur.forEach(s),Lp=k(n),ys=e(n,"P",{});var Ji=c(ys);_l=u(Ji,"이제 코드를 리팩토링하는 단계이지만, 달리 리팩토링할 부분이 없으니 생략하고 다음 단계로 넘어간다."),Ji.forEach(s),Hp=k(n),Fp=e(n,"BR",{}),Wp=k(n),xs=e(n,"P",{});var Ki=c(xs);dl=u(Ki,`다음 단계의 테스트는 이메일 전송이 실패했을 때, 어떻게 처리할지에 대한 테스트이다.
먼저 테스트를 작성한다.`),Ki.forEach(s),Xp=k(n),qn=e(n,"PRE",{class:!0});var ir=c(qn);ir.forEach(s),qp=k(n),Ss=e(n,"P",{});var Vi=c(Ss);El=u(Vi,`테스트를 실행하면 이전 단계와 동일한 에러가 발생한다. 해결 방법도 동일하다.
코드를 수정하거나, 테스트에서 기대하는 에러 메시지를 수정하면 된다. 마찬가지로 코드를 수정하는 것이 더 좋아보이니, 코드를 수정해보자.`),Vi.forEach(s),jp=k(n),jn=e(n,"PRE",{class:!0});var kr=c(jn);kr.forEach(s),Qp=k(n),Rs=e(n,"P",{});var Yi=c(Rs);vl=u(Yi,"테스트를 다시 실행하면 성공할 것이다."),Yi.forEach(s),Up=k(n),zp=e(n,"BR",{}),Zp=k(n),Bs=e(n,"P",{});var nk=c(Bs);wl=u(nk,"마지막 테스트를 작성해보자."),nk.forEach(s),Jp=k(n),M(dn.$$.fragment,n),Kp=k(n),Os=e(n,"P",{});var sk=c(Os);Dl=u(sk,"위 테스트를 실행하면 다음과 같이 실패할 것이다."),sk.forEach(s),Vp=k(n),Qn=e(n,"PRE",{class:!0});var rr=c(Qn);rr.forEach(s),Yp=k(n),Ms=e(n,"P",{});var ak=c(Ms);bl=u(ak,`남아있는 쿠키 재고가 구매하려는 쿠키 재고보다 적을 때 처리하는 로직을 코드에 작성하지 않았기 때문에 테스트가 실패하는 것이다.
따라서 코드를 수정해보자.`),ak.forEach(s),no=k(n),M(En.$$.fragment,n),so=k(n),As=e(n,"P",{});var tk=c(As);Cl=u(tk,"테스트를 다시 실행하면 성공할 것이다."),tk.forEach(s),ao=k(n),to=e(n,"BR",{}),po=k(n),vn=e(n,"P",{});var te=c(vn);Tl=u(te,"이제 모든 테스트 케이스가 통과하므로, "),qa=e(te,"CODE",{});var pk=c(qa);hl=u(pk,"go test -cover"),pk.forEach(s),$l=u(te," 명령을 실행해보자."),te.forEach(s),oo=k(n),Un=e(n,"PRE",{class:!0});var fr=c(Un);fr.forEach(s),eo=k(n),Is=e(n,"P",{});var ok=c(Is);Pl=u(ok,"100% 커버리지를 달성한 것을 확인할 수 있다! 신난다🎉🎉"),ok.forEach(s),co=k(n),lo=e(n,"BR",{}),uo=k(n),Gs=e(n,"P",{});var ek=c(Gs);yl=u(ek,`다만 지금까지 작성한 테스트 코드에서 궁금증이 좀 생길 수 있다.
얼핏 봐도 상당한 코드 중복이 있다. 일정한 패턴이 보이는데, 적당히 묶어서 함수로 만들거나 하면 좋지 않을까?
이에 대한 대답은, 그래도 된다는 것이다. 실제로 Go에는 Table Test라고 하는 방식이 있어서, 테스트 코드를 더 깔끔하게 작성할 수 있다.`),ek.forEach(s),io=k(n),Ns=e(n,"P",{});var ck=c(Ns);xl=u(ck,`하지만 이 책에서는 테스트 코드가 더 깔끔해지는 것보다는, 테스트 코드가 더 명확하게 보이는 것을 우선시한다.
테스트 코드는 그 자체로 일종의 문서 역할을 하기 때문에, 테스트 코드를 읽는 사람이 테스트 코드를 이해하기 쉽게 작성하는 것이 중요하다고 설명한다.`),ck.forEach(s),ko=k(n),ro=e(n,"BR",{}),fo=k(n),gs=e(n,"P",{});var lk=c(gs);Sl=u(lk,"아직 안 끝났다ㅠㅠ 아직 구현하지 않은 요구사항이 있다."),lk.forEach(s),mo=k(n),Ls=e(n,"P",{});var uk=c(Ls);Rl=u(uk,`코드에는 카드 토큰과 이메일 주소가 하드코딩되어 있는데, 이는 요청할 때 파라미터로 받아오게 될 것이다.
따라서, 함수 정의를 바꿔야 한다.`),uk.forEach(s),_o=k(n),zn=e(n,"PRE",{class:!0});var mr=c(zn);mr.forEach(s),Eo=k(n),Hs=e(n,"P",{});var ik=c(Hs);Bl=u(ik,`하지만 이렇게 변경하고 나면 기존에 작성한 테스트 코드들이 모두 실패할 것이다.
이에 맞게 테스트 코드를 수정해줄 필요가 있다.`),ik.forEach(s),vo=k(n),M(wn.$$.fragment,n),wo=k(n),Fs=e(n,"P",{});var kk=c(Fs);Ol=u(kk,"이와 같이 테스트 코드를 수정해주면, 테스트가 다시 성공할 것이다."),kk.forEach(s),Do=k(n),bo=e(n,"BR",{}),Co=k(n),Ws=e(n,"P",{});var rk=c(Ws);Ml=u(rk,"이 정도면 TDD로 개발하는 것에 대한 전반적인 감을 잡을 수 있을 것이다. 다음 단계인 BDD(Behavior-Driven Development)에 대해 알아보자."),rk.forEach(s),To=k(n),ho=e(n,"BR",{}),$o=e(n,"BR",{}),Po=k(n),Dn=e(n,"H2",{id:!0});var Nu=c(Dn);bn=e(Nu,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var fk=c(bn);ja=e(fk,"SPAN",{class:!0}),c(ja).forEach(s),fk.forEach(s),Al=u(Nu,"BDD"),Nu.forEach(s),yo=k(n),Xs=e(n,"P",{});var mk=c(Xs);Il=u(mk,"BDD는 TDD의 확장판같은 개념으로, 엔지니어-도메인 전문가-QA간의 긴밀한 협업을 가능하게 하는 개발 방법론이다."),mk.forEach(s),xo=k(n),R=e(n,"P",{});var Ks=c(R);Gl=u(Ks,`BDD의 목표는 Domain-Specific Language(DSL)을 통해 더 높은 수준의 추상화를 제공하는 것이며, 이는 테스트로 실행 가능하다.
가장 유명한 BDD 테스트 프레임워크는 `),Zn=e(Ks,"A",{href:!0,rel:!0});var _k=c(Zn);Nl=u(_k,"Gherkin"),_k.forEach(s),gl=u(Ks,"과 "),Jn=e(Ks,"A",{href:!0,rel:!0});var dk=c(Jn);Ll=u(dk,"Cucumber"),dk.forEach(s),Hl=u(Ks,`이다.
Gherkin은 몇 개의 키워드로 이루어진 언어를 제공하며, Cucumber는 이 언어를 읽어 소프트웨어가 예상대로 작동하는지 검증한다.`),Ks.forEach(s),So=k(n),Kn=e(n,"P",{});var gu=c(Kn);Cn=e(gu,"A",{href:!0,rel:!0});var Lu=c(Cn);Qa=e(Lu,"CODE",{});var Ek=c(Qa);Fl=u(Ek,"go-bdd"),Ek.forEach(s),Wl=u(Lu," 프레임워크"),Lu.forEach(s),Xl=u(gu,"를 활용하여 BDD 테스트를 작성해보자. 먼저, go-bdd를 설치한다."),gu.forEach(s),Ro=k(n),Vn=e(n,"PRE",{class:!0});var _r=c(Vn);_r.forEach(s),Bo=k(n),B=e(n,"P",{});var Vs=c(B);ql=u(Vs,"이후 프로젝트 루트 디렉토리에 "),Ua=e(Vs,"CODE",{});var vk=c(Ua);jl=u(vk,"features"),vk.forEach(s),Ql=u(Vs," 디렉토리를 생성하고, "),za=e(Vs,"CODE",{});var wk=c(za);Ul=u(wk,"features/add.feature"),wk.forEach(s),zl=u(Vs," 파일을 생성한 후 다음과 같이 작성한다."),Vs.forEach(s),Oo=k(n),Yn=e(n,"PRE",{class:!0});var dr=c(Yn);dr.forEach(s),Mo=k(n),Tn=e(n,"P",{});var pe=c(Tn);Zl=u(pe,"그리고 "),Za=e(pe,"CODE",{});var Dk=c(Za);Jl=u(Dk,"add_test.go"),Dk.forEach(s),Kl=u(pe," 파일을 생성하여 다음과 같이 작성한다."),pe.forEach(s),Ao=k(n),M(hn.$$.fragment,n),Io=k(n),d=e(n,"P",{});var v=c(d);Vl=u(v,"위 코드에서 "),Ja=e(v,"CODE",{});var bk=c(Ja);Yl=u(bk,"add"),bk.forEach(s),nu=u(v," 함수는 "),Ka=e(v,"CODE",{});var Ck=c(Ka);su=u(Ck,"bdd step"),Ck.forEach(s),au=u(v,` 함수인데, 함수 이름이 중요하다.
`),Va=e(v,"CODE",{});var Tk=c(Va);tu=u(Tk,"add.feature"),Tk.forEach(s),pu=u(v," 파일의 "),Ya=e(v,"CODE",{});var hk=c(Ya);ou=u(hk,"When I add 3 and 6"),hk.forEach(s),eu=u(v,"이라는 문장을 만나면, "),nt=e(v,"CODE",{});var $k=c(nt);cu=u($k,"add"),$k.forEach(s),lu=u(v,` 함수가 실행된다.
만약 `),st=e(v,"CODE",{});var Pk=c(st);uu=u(Pk,"add"),Pk.forEach(s),iu=u(v," 함수의 이름을 "),at=e(v,"CODE",{});var yk=c(at);ku=u(yk,"sum"),yk.forEach(s),ru=u(v,"으로 변경한다면, "),tt=e(v,"CODE",{});var xk=c(tt);fu=u(xk,"add.feature"),xk.forEach(s),mu=u(v," 파일을 "),pt=e(v,"CODE",{});var Sk=c(pt);_u=u(Sk,"When I sum 3 and 6"),Sk.forEach(s),du=u(v,`으로 변경해야 할 것이다.
이후 로직을 수행하고 나중에 `),ot=e(v,"CODE",{});var Rk=c(ot);Eu=u(Rk,"check"),Rk.forEach(s),vu=u(v,"에서 불러올 수 있도록 컨텍스트에 저장한다."),v.forEach(s),Go=k(n),P=e(n,"P",{});var es=c(P);et=e(es,"CODE",{});var Bk=c(et);wu=u(Bk,"check"),Bk.forEach(s),Du=u(es,` 함수는 실질적인 테스트를 수행하는 함수로, 검증은 이 함수에서 이루어진다.
다음으로 테스트 스위트를 생성하고, `),ct=e(es,"CODE",{});var Ok=c(ct);bu=u(Ok,"add"),Ok.forEach(s),Cu=u(es,"와 "),lt=e(es,"CODE",{});var Mk=c(lt);Tu=u(Mk,"check"),Mk.forEach(s),hu=u(es,` 함수를 등록한다.
이 테스트를 수행한다면 통과할 것이다.`),es.forEach(s),No=k(n),go=e(n,"BR",{}),Lo=k(n),qs=e(n,"P",{});var Ak=c(qs);$u=u(Ak,`이와 같이 BDD는 자연어와 유사하여 직관성이 뛰어나지만, 테스트 코드를 작성하는 것이 번거로워진다.
앞선 예제의 경우 비교적 간단하지만, 실제로는 훨씬 복잡한 테스트 코드를 작성해야 할 것이다. 그 코드를 BDD로 작성한다고 생각해 보면 좀 어지러워진다.
도메인 전문가가 BDD를 이해할 수 있고, 자주 의사소통할 수 있다면 BDD를 사용하는 게 괜찮은 선택지일 수 있다.
하지만 그렇지 않다면 그냥 Unit Test를 작성하는 게 더 좋다.`),Ak.forEach(s),Ho=k(n),Fo=e(n,"BR",{}),Wo=e(n,"BR",{}),Xo=k(n),$n=e(n,"H2",{id:!0});var Hu=c($n);Pn=e(Hu,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Ik=c(Pn);ut=e(Ik,"SPAN",{class:!0}),c(ut).forEach(s),Ik.forEach(s),Pu=u(Hu,"References"),Hu.forEach(s),qo=k(n),jo=e(n,"HR",{}),Qo=k(n),js=e(n,"CENTER",{});var Gk=c(js);W=e(Gk,"P",{});var Ys=c(W);ns=e(Ys,"A",{href:!0,rel:!0});var Nk=c(ns);Qs=e(Nk,"IMG",{src:!0,alt:!0}),Nk.forEach(s),yu=k(Ys),xu=e(Ys,"BR",{}),Su=k(Ys),ss=e(Ys,"A",{href:!0,rel:!0});var gk=c(ss);Ru=u(gk,"Matthew Boyle, Domain-Driven Design with Golang』, O’Reilly Media, Inc."),gk.forEach(s),Ys.forEach(s),Gk.forEach(s),this.h()},h(){f(na,"class","icon icon-link"),f(j,"aria-hidden","true"),f(j,"tabindex","-1"),f(j,"href","#tdd"),f(q,"id","tdd"),f(Ea,"class","icon icon-link"),f(U,"aria-hidden","true"),f(U,"tabindex","-1"),f(U,"href","#테스트-추가"),f(Q,"id","테스트-추가"),f(On,"class","language-text"),f(Mn,"href","https://jhseoeo.github.io/posts/post/Go/Golang%20Basics/GO13"),f(Mn,"rel","nofollow"),f(An,"class","language-go"),f(In,"class","language-bash"),f(Ta,"class","icon icon-link"),f(K,"aria-hidden","true"),f(K,"tabindex","-1"),f(K,"href","#코드-작성"),f(J,"id","코드-작성"),f($a,"class","icon icon-link"),f(sn,"aria-hidden","true"),f(sn,"tabindex","-1"),f(sn,"href","#테스트-실행"),f(nn,"id","테스트-실행"),f(Gn,"href","https://github.com/golang/mock"),f(Gn,"rel","nofollow"),f(Nn,"class","language-bash"),f(gn,"class","language-go"),f(Ln,"class","language-text"),f(Fa,"class","icon icon-link"),f(rn,"aria-hidden","true"),f(rn,"tabindex","-1"),f(rn,"href","#리팩토링"),f(kn,"id","리팩토링"),f(Fn,"class","language-text"),f(Wn,"class","language-go"),f(Xn,"class","language-text"),f(qn,"class","language-go"),f(jn,"class","language-go"),f(Qn,"class","language-text"),f(Un,"class","language-text"),f(zn,"class","language-go"),f(ja,"class","icon icon-link"),f(bn,"aria-hidden","true"),f(bn,"tabindex","-1"),f(bn,"href","#bdd"),f(Dn,"id","bdd"),f(Zn,"href","https://cucumber.io/docs/gherkin/"),f(Zn,"rel","nofollow"),f(Jn,"href","https://cucumber.io/"),f(Jn,"rel","nofollow"),f(Cn,"href","https://github.com/go-bdd/gobdd"),f(Cn,"rel","nofollow"),f(Vn,"class","language-bash"),f(Yn,"class","language-gherkin"),f(ut,"class","icon icon-link"),f(Pn,"aria-hidden","true"),f(Pn,"tabindex","-1"),f(Pn,"href","#references"),f($n,"id","references"),Dr(Qs.src,Fu="https://learning.oreilly.com/covers/urn:orm:book:9781804613450/400w/")||f(Qs,"src",Fu),f(Qs,"alt","Domain-Driven Design with Golang Cover"),f(ns,"href","https://learning.oreilly.com/library/view/domain-driven-design-with/9781804613450/"),f(ns,"rel","nofollow"),f(ss,"href","https://learning.oreilly.com/library/view/domain-driven-design-with/9781804613450/"),f(ss,"rel","nofollow")},m(n,t){p(n,r,t),a(r,E),p(n,m,t),p(n,_,t),p(n,_t,t),p(n,dt,t),p(n,q,t),a(q,j),a(j,na),a(q,oe),p(n,Et,t),p(n,vt,t),p(n,wt,t),p(n,cs,t),a(cs,ee),p(n,Dt,t),p(n,ls,t),a(ls,ce),p(n,bt,t),p(n,b,t),a(b,xn),a(xn,H),a(H,le),a(H,Sn),a(Sn,ue),a(Sn,sa),a(sa,ie),a(Sn,ke),a(H,re),a(H,Rn),a(Rn,fe),a(Rn,aa),a(aa,me),a(Rn,_e),a(H,de),a(xn,Ee),a(xn,ta),a(ta,ve),a(b,we),a(b,pa),a(pa,oa),a(oa,De),a(b,be),a(b,ea),a(ea,ca),a(ca,Ce),a(b,Te),a(b,la),a(la,ua),a(ua,he),a(b,$e),a(b,ia),a(ia,ka),a(ka,Pe),p(n,Ct,t),p(n,us,t),a(us,ye),p(n,Tt,t),p(n,ht,t),p(n,$t,t),p(n,is,t),a(is,xe),p(n,Pt,t),p(n,Bn,t),a(Bn,Se),a(Bn,ra),a(ra,Re),p(n,yt,t),p(n,ks,t),a(ks,Be),p(n,xt,t),p(n,T,t),a(T,fa),a(fa,Oe),a(T,Me),a(T,ma),a(ma,Ae),a(T,Ie),a(T,_a),a(_a,Ge),a(T,Ne),a(T,da),a(da,ge),p(n,St,t),p(n,rs,t),a(rs,Le),p(n,Rt,t),p(n,Bt,t),p(n,Ot,t),p(n,Mt,t),p(n,Q,t),a(Q,U),a(U,Ea),a(Q,He),p(n,At,t),p(n,F,t),a(F,va),a(va,Fe),a(F,We),a(F,wa),a(wa,Xe),a(F,qe),p(n,It,t),p(n,On,t),On.innerHTML=Lk,p(n,Gt,t),p(n,y,t),a(y,je),a(y,Da),a(Da,Qe),a(y,Ue),a(y,Mn),a(Mn,ze),a(y,Ze),p(n,Nt,t),p(n,z,t),a(z,Je),a(z,ba),a(ba,Ke),a(z,Ve),p(n,gt,t),p(n,An,t),An.innerHTML=Hk,p(n,Lt,t),p(n,fs,t),a(fs,Ye),p(n,Ht,t),p(n,Z,t),a(Z,nc),a(Z,Ca),a(Ca,sc),a(Z,ac),p(n,Ft,t),p(n,ms,t),a(ms,tc),p(n,Wt,t),p(n,In,t),In.innerHTML=Fk,p(n,Xt,t),p(n,_s,t),a(_s,pc),p(n,qt,t),p(n,jt,t),p(n,Qt,t),p(n,Ut,t),p(n,J,t),a(J,K),a(K,Ta),a(J,oc),p(n,zt,t),p(n,V,t),a(V,ec),a(V,ha),a(ha,cc),a(V,lc),p(n,Zt,t),A(Y,n,t),p(n,Jt,t),p(n,Kt,t),p(n,Vt,t),p(n,Yt,t),p(n,nn,t),a(nn,sn),a(sn,$a),a(nn,uc),p(n,np,t),p(n,$,t),a($,Pa),a(Pa,ic),a($,kc),a($,ya),a(ya,rc),a($,fc),a($,xa),a(xa,mc),a($,_c),p(n,sp,t),p(n,an,t),a(an,dc),a(an,Gn),a(Gn,Ec),a(an,vc),p(n,ap,t),p(n,tn,t),a(tn,wc),a(tn,Sa),a(Sa,Dc),a(tn,bc),p(n,tp,t),p(n,Nn,t),Nn.innerHTML=Wk,p(n,pp,t),p(n,pn,t),a(pn,Cc),a(pn,Ra),a(Ra,Tc),a(pn,hc),p(n,op,t),p(n,gn,t),gn.innerHTML=Xk,p(n,ep,t),p(n,x,t),a(x,$c),a(x,Ba),a(Ba,Pc),a(x,yc),a(x,Oa),a(Oa,xc),a(x,Sc),p(n,cp,t),p(n,Ln,t),Ln.innerHTML=qk,p(n,lp,t),p(n,on,t),a(on,Rc),a(on,Ma),a(Ma,Bc),a(on,Oc),p(n,up,t),A(en,n,t),p(n,ip,t),p(n,D,t),a(D,Mc),a(D,Aa),a(Aa,Ac),a(D,Ic),a(D,Ia),a(Ia,Gc),a(D,Nc),a(D,Ga),a(Ga,gc),a(D,Lc),a(D,Na),a(Na,Hc),a(D,Fc),a(D,ga),a(ga,Wc),a(D,Xc),p(n,kp,t),p(n,Hn,t),a(Hn,La),a(La,qc),a(Hn,jc),p(n,rp,t),p(n,cn,t),a(cn,Qc),a(cn,Uc),a(cn,zc),p(n,fp,t),p(n,ds,t),a(ds,Zc),p(n,mp,t),p(n,Es,t),a(Es,Jc),p(n,_p,t),p(n,vs,t),a(vs,Kc),p(n,dp,t),p(n,ln,t),a(ln,Vc),a(ln,Ha),a(Ha,Yc),a(ln,nl),p(n,Ep,t),A(un,n,t),p(n,vp,t),p(n,wp,t),p(n,Dp,t),p(n,bp,t),p(n,kn,t),a(kn,rn),a(rn,Fa),a(kn,sl),p(n,Cp,t),p(n,ws,t),a(ws,al),p(n,Tp,t),p(n,Ds,t),a(Ds,tl),p(n,hp,t),p(n,bs,t),a(bs,pl),p(n,$p,t),A(fn,n,t),p(n,Pp,t),p(n,Cs,t),a(Cs,ol),p(n,yp,t),p(n,Ts,t),a(Ts,el),p(n,xp,t),A(mn,n,t),p(n,Sp,t),p(n,Rp,t),p(n,Bp,t),p(n,hs,t),a(hs,cl),p(n,Op,t),A(_n,n,t),p(n,Mp,t),p(n,$s,t),a($s,ll),p(n,Ap,t),p(n,Fn,t),Fn.innerHTML=jk,p(n,Ip,t),p(n,S,t),a(S,ul),a(S,Wa),a(Wa,il),a(S,kl),a(S,Xa),a(Xa,rl),a(S,fl),p(n,Gp,t),p(n,Wn,t),Wn.innerHTML=Qk,p(n,Np,t),p(n,Ps,t),a(Ps,ml),p(n,gp,t),p(n,Xn,t),Xn.innerHTML=Uk,p(n,Lp,t),p(n,ys,t),a(ys,_l),p(n,Hp,t),p(n,Fp,t),p(n,Wp,t),p(n,xs,t),a(xs,dl),p(n,Xp,t),p(n,qn,t),qn.innerHTML=zk,p(n,qp,t),p(n,Ss,t),a(Ss,El),p(n,jp,t),p(n,jn,t),jn.innerHTML=Zk,p(n,Qp,t),p(n,Rs,t),a(Rs,vl),p(n,Up,t),p(n,zp,t),p(n,Zp,t),p(n,Bs,t),a(Bs,wl),p(n,Jp,t),A(dn,n,t),p(n,Kp,t),p(n,Os,t),a(Os,Dl),p(n,Vp,t),p(n,Qn,t),Qn.innerHTML=Jk,p(n,Yp,t),p(n,Ms,t),a(Ms,bl),p(n,no,t),A(En,n,t),p(n,so,t),p(n,As,t),a(As,Cl),p(n,ao,t),p(n,to,t),p(n,po,t),p(n,vn,t),a(vn,Tl),a(vn,qa),a(qa,hl),a(vn,$l),p(n,oo,t),p(n,Un,t),Un.innerHTML=Kk,p(n,eo,t),p(n,Is,t),a(Is,Pl),p(n,co,t),p(n,lo,t),p(n,uo,t),p(n,Gs,t),a(Gs,yl),p(n,io,t),p(n,Ns,t),a(Ns,xl),p(n,ko,t),p(n,ro,t),p(n,fo,t),p(n,gs,t),a(gs,Sl),p(n,mo,t),p(n,Ls,t),a(Ls,Rl),p(n,_o,t),p(n,zn,t),zn.innerHTML=Vk,p(n,Eo,t),p(n,Hs,t),a(Hs,Bl),p(n,vo,t),A(wn,n,t),p(n,wo,t),p(n,Fs,t),a(Fs,Ol),p(n,Do,t),p(n,bo,t),p(n,Co,t),p(n,Ws,t),a(Ws,Ml),p(n,To,t),p(n,ho,t),p(n,$o,t),p(n,Po,t),p(n,Dn,t),a(Dn,bn),a(bn,ja),a(Dn,Al),p(n,yo,t),p(n,Xs,t),a(Xs,Il),p(n,xo,t),p(n,R,t),a(R,Gl),a(R,Zn),a(Zn,Nl),a(R,gl),a(R,Jn),a(Jn,Ll),a(R,Hl),p(n,So,t),p(n,Kn,t),a(Kn,Cn),a(Cn,Qa),a(Qa,Fl),a(Cn,Wl),a(Kn,Xl),p(n,Ro,t),p(n,Vn,t),Vn.innerHTML=Yk,p(n,Bo,t),p(n,B,t),a(B,ql),a(B,Ua),a(Ua,jl),a(B,Ql),a(B,za),a(za,Ul),a(B,zl),p(n,Oo,t),p(n,Yn,t),Yn.innerHTML=nr,p(n,Mo,t),p(n,Tn,t),a(Tn,Zl),a(Tn,Za),a(Za,Jl),a(Tn,Kl),p(n,Ao,t),A(hn,n,t),p(n,Io,t),p(n,d,t),a(d,Vl),a(d,Ja),a(Ja,Yl),a(d,nu),a(d,Ka),a(Ka,su),a(d,au),a(d,Va),a(Va,tu),a(d,pu),a(d,Ya),a(Ya,ou),a(d,eu),a(d,nt),a(nt,cu),a(d,lu),a(d,st),a(st,uu),a(d,iu),a(d,at),a(at,ku),a(d,ru),a(d,tt),a(tt,fu),a(d,mu),a(d,pt),a(pt,_u),a(d,du),a(d,ot),a(ot,Eu),a(d,vu),p(n,Go,t),p(n,P,t),a(P,et),a(et,wu),a(P,Du),a(P,ct),a(ct,bu),a(P,Cu),a(P,lt),a(lt,Tu),a(P,hu),p(n,No,t),p(n,go,t),p(n,Lo,t),p(n,qs,t),a(qs,$u),p(n,Ho,t),p(n,Fo,t),p(n,Wo,t),p(n,Xo,t),p(n,$n,t),a($n,Pn),a(Pn,ut),a($n,Pu),p(n,qo,t),p(n,jo,t),p(n,Qo,t),p(n,js,t),a(js,W),a(W,ns),a(ns,Qs),a(W,yu),a(W,xu),a(W,Su),a(W,ss),a(ss,Ru),Uo=!0},p(n,[t]){const Us={};t&1&&(Us.$$scope={dirty:t,ctx:n}),Y.$set(Us);const it={};t&1&&(it.$$scope={dirty:t,ctx:n}),en.$set(it);const kt={};t&1&&(kt.$$scope={dirty:t,ctx:n}),un.$set(kt);const rt={};t&1&&(rt.$$scope={dirty:t,ctx:n}),fn.$set(rt);const C={};t&1&&(C.$$scope={dirty:t,ctx:n}),mn.$set(C);const as={};t&1&&(as.$$scope={dirty:t,ctx:n}),_n.$set(as);const X={};t&1&&(X.$$scope={dirty:t,ctx:n}),dn.$set(X);const ts={};t&1&&(ts.$$scope={dirty:t,ctx:n}),En.$set(ts);const ft={};t&1&&(ft.$$scope={dirty:t,ctx:n}),wn.$set(ft);const ps={};t&1&&(ps.$$scope={dirty:t,ctx:n}),hn.$set(ps)},i(n){Uo||(I(Y.$$.fragment,n),I(en.$$.fragment,n),I(un.$$.fragment,n),I(fn.$$.fragment,n),I(mn.$$.fragment,n),I(_n.$$.fragment,n),I(dn.$$.fragment,n),I(En.$$.fragment,n),I(wn.$$.fragment,n),I(hn.$$.fragment,n),Uo=!0)},o(n){G(Y.$$.fragment,n),G(en.$$.fragment,n),G(un.$$.fragment,n),G(fn.$$.fragment,n),G(mn.$$.fragment,n),G(_n.$$.fragment,n),G(dn.$$.fragment,n),G(En.$$.fragment,n),G(wn.$$.fragment,n),G(hn.$$.fragment,n),Uo=!1},d(n){n&&s(r),n&&s(m),n&&s(_),n&&s(_t),n&&s(dt),n&&s(q),n&&s(Et),n&&s(vt),n&&s(wt),n&&s(cs),n&&s(Dt),n&&s(ls),n&&s(bt),n&&s(b),n&&s(Ct),n&&s(us),n&&s(Tt),n&&s(ht),n&&s($t),n&&s(is),n&&s(Pt),n&&s(Bn),n&&s(yt),n&&s(ks),n&&s(xt),n&&s(T),n&&s(St),n&&s(rs),n&&s(Rt),n&&s(Bt),n&&s(Ot),n&&s(Mt),n&&s(Q),n&&s(At),n&&s(F),n&&s(It),n&&s(On),n&&s(Gt),n&&s(y),n&&s(Nt),n&&s(z),n&&s(gt),n&&s(An),n&&s(Lt),n&&s(fs),n&&s(Ht),n&&s(Z),n&&s(Ft),n&&s(ms),n&&s(Wt),n&&s(In),n&&s(Xt),n&&s(_s),n&&s(qt),n&&s(jt),n&&s(Qt),n&&s(Ut),n&&s(J),n&&s(zt),n&&s(V),n&&s(Zt),N(Y,n),n&&s(Jt),n&&s(Kt),n&&s(Vt),n&&s(Yt),n&&s(nn),n&&s(np),n&&s($),n&&s(sp),n&&s(an),n&&s(ap),n&&s(tn),n&&s(tp),n&&s(Nn),n&&s(pp),n&&s(pn),n&&s(op),n&&s(gn),n&&s(ep),n&&s(x),n&&s(cp),n&&s(Ln),n&&s(lp),n&&s(on),n&&s(up),N(en,n),n&&s(ip),n&&s(D),n&&s(kp),n&&s(Hn),n&&s(rp),n&&s(cn),n&&s(fp),n&&s(ds),n&&s(mp),n&&s(Es),n&&s(_p),n&&s(vs),n&&s(dp),n&&s(ln),n&&s(Ep),N(un,n),n&&s(vp),n&&s(wp),n&&s(Dp),n&&s(bp),n&&s(kn),n&&s(Cp),n&&s(ws),n&&s(Tp),n&&s(Ds),n&&s(hp),n&&s(bs),n&&s($p),N(fn,n),n&&s(Pp),n&&s(Cs),n&&s(yp),n&&s(Ts),n&&s(xp),N(mn,n),n&&s(Sp),n&&s(Rp),n&&s(Bp),n&&s(hs),n&&s(Op),N(_n,n),n&&s(Mp),n&&s($s),n&&s(Ap),n&&s(Fn),n&&s(Ip),n&&s(S),n&&s(Gp),n&&s(Wn),n&&s(Np),n&&s(Ps),n&&s(gp),n&&s(Xn),n&&s(Lp),n&&s(ys),n&&s(Hp),n&&s(Fp),n&&s(Wp),n&&s(xs),n&&s(Xp),n&&s(qn),n&&s(qp),n&&s(Ss),n&&s(jp),n&&s(jn),n&&s(Qp),n&&s(Rs),n&&s(Up),n&&s(zp),n&&s(Zp),n&&s(Bs),n&&s(Jp),N(dn,n),n&&s(Kp),n&&s(Os),n&&s(Vp),n&&s(Qn),n&&s(Yp),n&&s(Ms),n&&s(no),N(En,n),n&&s(so),n&&s(As),n&&s(ao),n&&s(to),n&&s(po),n&&s(vn),n&&s(oo),n&&s(Un),n&&s(eo),n&&s(Is),n&&s(co),n&&s(lo),n&&s(uo),n&&s(Gs),n&&s(io),n&&s(Ns),n&&s(ko),n&&s(ro),n&&s(fo),n&&s(gs),n&&s(mo),n&&s(Ls),n&&s(_o),n&&s(zn),n&&s(Eo),n&&s(Hs),n&&s(vo),N(wn,n),n&&s(wo),n&&s(Fs),n&&s(Do),n&&s(bo),n&&s(Co),n&&s(Ws),n&&s(To),n&&s(ho),n&&s($o),n&&s(Po),n&&s(Dn),n&&s(yo),n&&s(Xs),n&&s(xo),n&&s(R),n&&s(So),n&&s(Kn),n&&s(Ro),n&&s(Vn),n&&s(Bo),n&&s(B),n&&s(Oo),n&&s(Yn),n&&s(Mo),n&&s(Tn),n&&s(Ao),N(hn,n),n&&s(Io),n&&s(d),n&&s(Go),n&&s(P),n&&s(No),n&&s(go),n&&s(Lo),n&&s(qs),n&&s(Ho),n&&s(Fo),n&&s(Wo),n&&s(Xo),n&&s($n),n&&s(qo),n&&s(jo),n&&s(Qo),n&&s(js)}}}const Ar={title:"DDD와 함께 TDD, BDD 사용하기",date:"2023-08-11T00:00:00.000Z",excerpt:"TDD, BDD, and DDD",categories:["Golang","Backend","Architecture","Domain Driven Design"],coverImage:"/post_img/Backend/Architecture/DDD/cover.png",coverWidth:16,coverHeight:9,indexed:!0,exposed:!0};class Ir extends Er{constructor(r){super(),vr(this,r,null,Br,wr,{})}}export{Ir as default,Ar as metadata};
