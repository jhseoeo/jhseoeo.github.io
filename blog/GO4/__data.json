{"type":"data","nodes":[null,{"type":"data","data":[{"PostContent":1,"meta":2},"\u003Cbr\u003E\n\u003Cp\u003E본 글은 Golang을 공부하며 주요 내용이라 생각되는 것들을 기록해둔 자료이며, Ubuntu 20.04 LTS 기준으로 작성되었습니다.\u003C\u002Fp\u003E\n\u003Cbr\u003E\u003Cbr\u003E\n\u003Ch2 id=\"shadowing\"\u003E\u003Ca aria-hidden=\"true\" tabindex=\"-1\" href=\"#shadowing\"\u003E\u003Cspan class=\"icon icon-link\"\u003E\u003C\u002Fspan\u003E\u003C\u002Fa\u003EShadowing\u003C\u002Fh2\u003E\n\u003Chr\u003E\n\u003Cp\u003EGo에서 기본적으로 \u003Ccode\u003EBlock\u003C\u002Fcode\u003E의 개념은 타 언어와 유사하다.\n\u003Ccode\u003Eif\u003C\u002Fcode\u003E, \u003Ccode\u003Efor\u003C\u002Fcode\u003E 등 흐름 제어 키워드들에 의해 중괄호가 시작되고, 해당 중괄호가 닫히는 영역까지를 \u003Ccode\u003EBlock\u003C\u002Fcode\u003E이라 한다.\u003C\u002Fp\u003E\n\u003Cpre class=\"language-go\"\u003E\u003C!-- HTML_TAG_START --\u003E\u003Ccode class=\"language-go\"\u003Ex1 \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E10\u003C\u002Fspan\u003E \u003Cspan class=\"token comment\"\u003E\u002F\u002F shadowed variable.\u003C\u002Fspan\u003E\n\u003Cspan class=\"token keyword\"\u003Eif\u003C\u002Fspan\u003E x1 \u003Cspan class=\"token operator\"\u003E\u003E\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E5\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n    fmt\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EPrintln\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Ex1\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token comment\"\u003E\u002F\u002F 10 =\u003E x1 is not yet shadowed\u003C\u002Fspan\u003E\n    x1 \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E5\u003C\u002Fspan\u003E         \u003Cspan class=\"token comment\"\u003E\u002F\u002F shadowing variable. from this line to end of this block\u003C\u002Fspan\u003E\n    fmt\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EPrintln\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Ex1\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token comment\"\u003E\u002F\u002F 5 =\u003E x1 is shadowed until if-blocks ends\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\nfmt\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EPrintln\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Ex1\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token comment\"\u003E\u002F\u002F 10 =\u003E if-block ends. x1 is not shadowed\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C!-- HTML_TAG_END --\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E이전 챕터에서도 다루었지만, Shadowing이 발생하면 해당 블록이 끝날 때까지 Shadowing된 변수에 접근할 수 없다.\u003C\u002Fp\u003E\n\u003Cbr\u003E\n\u003Cpre class=\"language-go\"\u003E\u003C!-- HTML_TAG_START --\u003E\u003Ccode class=\"language-go\"\u003E\t\u003Cspan class=\"token boolean\"\u003Etrue\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token builtin\"\u003Eint\u003C\u002Fspan\u003E \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E10\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E\"hi\"\u003C\u002Fspan\u003E\n\tfmt \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E\"oops\"\u003C\u002Fspan\u003E    \u003Cspan class=\"token comment\"\u003E\u002F\u002F fmt is shadowed\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C!-- HTML_TAG_END --\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E이렇게 패키지명이나 \u003Cem\u003Euniverse block\u003C\u002Fem\u003E의 구분자들을 Shadowing하는 것이 문법적으로는 가능하지만, \u003Cstrong\u003E절대\u003C\u002Fstrong\u003E 이렇게 하지 않도록 주의하자.\u003C\u002Fp\u003E\n\u003Cbr\u003E\n\u003Cp\u003E변수가 Shadowing되는 것을 확인할 수 있는 명령어가 존재한다. 외부 모듈이므로 설치 후 사용해주어야 한다.\u003C\u002Fp\u003E\n\u003Cpre class=\"language-bash\"\u003E\u003C!-- HTML_TAG_START --\u003E\u003Ccode class=\"language-bash\"\u003Ego \u003Cspan class=\"token function\"\u003Einstall\u003C\u002Fspan\u003E golang.org\u002Fx\u002Ftools\u002Fgo\u002Fanalysis\u002Fpasses\u002Fshadow\u002Fcmd\u002Fshadow@latest\nshadow .\u002F\u003Cspan class=\"token punctuation\"\u003E..\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C!-- HTML_TAG_END --\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E위와 같이 설치 후, \u003Ccode\u003Eshadow\u003C\u002Fcode\u003E 명령어를 통해 검사를 실시하고자 하는 파일을 지정한다.\u003C\u002Fp\u003E\n\u003Cpre class=\"language-bash\"\u003E\u003C!-- HTML_TAG_START --\u003E\u003Ccode class=\"language-bash\"\u003Edeclaration of \u003Cspan class=\"token string\"\u003E\"x\"\u003C\u002Fspan\u003E shadows declaration at line \u003Cspan class=\"token number\"\u003E6\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C!-- HTML_TAG_END --\u003E\u003C\u002Fpre\u003E\n\u003Cbr\u003E\u003Cbr\u003E\n\u003Ch2 id=\"if\"\u003E\u003Ca aria-hidden=\"true\" tabindex=\"-1\" href=\"#if\"\u003E\u003Cspan class=\"icon icon-link\"\u003E\u003C\u002Fspan\u003E\u003C\u002Fa\u003Eif\u003C\u002Fh2\u003E\n\u003Chr\u003E\n\u003Cp\u003EC 계열 프로그래밍 언어의 \u003Ccode\u003Eif\u003C\u002Fcode\u003E문과 크게 다르지 않다. 특이사항으로는 괄호를 생략한다.\u003C\u002Fp\u003E\n\u003Cpre class=\"language-go\"\u003E\u003C!-- HTML_TAG_START --\u003E\u003Ccode class=\"language-go\"\u003En1 \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E7\u003C\u002Fspan\u003E\n\u003Cspan class=\"token keyword\"\u003Eif\u003C\u002Fspan\u003E n1 \u003Cspan class=\"token operator\"\u003E==\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E0\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E        \u003Cspan class=\"token comment\"\u003E\u002F\u002F there is no parenthesis around the condition\u003C\u002Fspan\u003E\n    fmt\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EPrintln\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token string\"\u003E\"too low\"\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E \u003Cspan class=\"token keyword\"\u003Eelse\u003C\u002Fspan\u003E \u003Cspan class=\"token keyword\"\u003Eif\u003C\u002Fspan\u003E n1 \u003Cspan class=\"token operator\"\u003E\u003E\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E5\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n    fmt\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EPrintln\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token string\"\u003E\"too big :\"\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E n1\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E \u003Cspan class=\"token keyword\"\u003Eelse\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n    fmt\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EPrintln\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token string\"\u003E\"good :\"\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E n1\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C!-- HTML_TAG_END --\u003E\u003C\u002Fpre\u003E\n\u003Cbr\u003E\n\u003Cp\u003E특이사항으로는 \u003Ccode\u003Eif\u003C\u002Fcode\u003E문의 조건 확인 구문 안에서 변수 선언을 동시에 할 수 있다.\u003C\u002Fp\u003E\n\u003Cpre class=\"language-go\"\u003E\u003C!-- HTML_TAG_START --\u003E\u003Ccode class=\"language-go\"\u003E\u003Cspan class=\"token keyword\"\u003Eif\u003C\u002Fspan\u003E n2 \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E4\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E n2 \u003Cspan class=\"token operator\"\u003E==\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E0\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E \u003Cspan class=\"token comment\"\u003E\u002F\u002F both declaring variable and checking condition\u003C\u002Fspan\u003E\n    fmt\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EPrintln\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token string\"\u003E\"too low\"\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E \u003Cspan class=\"token keyword\"\u003Eelse\u003C\u002Fspan\u003E \u003Cspan class=\"token keyword\"\u003Eif\u003C\u002Fspan\u003E n2 \u003Cspan class=\"token operator\"\u003E\u003E\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E5\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n    fmt\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EPrintln\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token string\"\u003E\"too big :\"\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E n2\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E \u003Cspan class=\"token keyword\"\u003Eelse\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n    fmt\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EPrintln\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token string\"\u003E\"good :\"\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E n2\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"token comment\"\u003E\u002F\u002F fmt.Println(n2) \u002F\u002F it causes error. once a if\u002Felse statement ends, n1 is not accessable.\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C!-- HTML_TAG_END --\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E단, 이렇게 선언된 변수는 \u003Ccode\u003Eif\u003C\u002Fcode\u003E문 밖에선 접근할 수 없다.\u003C\u002Fp\u003E\n\u003Cbr\u003E\u003Cbr\u003E\n\u003Ch2 id=\"for\"\u003E\u003Ca aria-hidden=\"true\" tabindex=\"-1\" href=\"#for\"\u003E\u003Cspan class=\"icon icon-link\"\u003E\u003C\u002Fspan\u003E\u003C\u002Fa\u003Efor\u003C\u002Fh2\u003E\n\u003Chr\u003E\n\u003Cp\u003EGo의 \u003Ccode\u003Efor\u003C\u002Fcode\u003E문은 4가지 유형이 존재한다.\u003C\u002Fp\u003E\n\u003Col\u003E\u003Cli\u003E일반적인 \u003Ccode\u003Efor\u003C\u002Fcode\u003E문과 유사함 =&gt; \u003Ccode\u003Efor(int i = 0; i &lt; n; i++) {}\u003C\u002Fcode\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E일반적인 while문과 유사함 =&gt; \u003Ccode\u003Ewhile(condition)\u003C\u002Fcode\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E무한 루프 =&gt; \u003Ccode\u003Ewhile(True)\u003C\u002Fcode\u003E\u003C\u002Fli\u003E\n\u003Cli\u003Erange-based의 foreach문 =&gt; \u003Ccode\u003Efor(const auto&amp; element : containor) {}\u003C\u002Fcode\u003E\u003C\u002Fli\u003E\u003C\u002Fol\u003E\n\u003Cp\u003E하나씩 살펴보자.\u003C\u002Fp\u003E\n\u003Cbr\u003E\u003Cbr\u003E\n\u003Ch3 id=\"the-complete-for-statement\"\u003E\u003Ca aria-hidden=\"true\" tabindex=\"-1\" href=\"#the-complete-for-statement\"\u003E\u003Cspan class=\"icon icon-link\"\u003E\u003C\u002Fspan\u003E\u003C\u002Fa\u003EThe Complete for Statement\u003C\u002Fh3\u003E\n\u003Cpre class=\"language-go\"\u003E\u003C!-- HTML_TAG_START --\u003E\u003Ccode class=\"language-go\"\u003E\u003Cspan class=\"token keyword\"\u003Efor\u003C\u002Fspan\u003E i \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E0\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E i \u003Cspan class=\"token operator\"\u003E&lt;\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E10\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E i\u003Cspan class=\"token operator\"\u003E++\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n    fmt\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EPrint\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Ei\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C!-- HTML_TAG_END --\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E\u003Ccode\u003Eif\u003C\u002Fcode\u003E문처럼 괄호를 사용하지 않는다. 또한 변수를 초기화할 때 \u003Ccode\u003Evar\u003C\u002Fcode\u003E 키워드를 사용하지 않고, \u003Ccode\u003E:=\u003C\u002Fcode\u003E 연산자를 이용하여 초기화해야 한다.\u003C\u002Fp\u003E\n\u003Cbr\u003E\n\u003Ch3 id=\"condition-only-statements\"\u003E\u003Ca aria-hidden=\"true\" tabindex=\"-1\" href=\"#condition-only-statements\"\u003E\u003Cspan class=\"icon icon-link\"\u003E\u003C\u002Fspan\u003E\u003C\u002Fa\u003Econdition-only statements\u003C\u002Fh3\u003E\n\u003Cpre class=\"language-go\"\u003E\u003C!-- HTML_TAG_START --\u003E\u003Ccode class=\"language-go\"\u003Ei \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E1\u003C\u002Fspan\u003E\n\u003Cspan class=\"token keyword\"\u003Efor\u003C\u002Fspan\u003E i \u003Cspan class=\"token operator\"\u003E&lt;\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E100\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n    fmt\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EPrint\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Ei\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E\" \"\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n    i \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E i \u003Cspan class=\"token operator\"\u003E*\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E2\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C!-- HTML_TAG_END --\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E변수의 선언과 증감이 생략된 형태로, 다른 언어의 while문과 유사한 형태이다.\u003C\u002Fp\u003E\n\u003Cbr\u003E\n\u003Ch3 id=\"infinite-loop-and-break-continue-statements\"\u003E\u003Ca aria-hidden=\"true\" tabindex=\"-1\" href=\"#infinite-loop-and-break-continue-statements\"\u003E\u003Cspan class=\"icon icon-link\"\u003E\u003C\u002Fspan\u003E\u003C\u002Fa\u003Einfinite loop and break, continue statements\u003C\u002Fh3\u003E\n\u003Cpre class=\"language-go\"\u003E\u003C!-- HTML_TAG_START --\u003E\u003Ccode class=\"language-go\"\u003Ej \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E0\u003C\u002Fspan\u003E\n\u003Cspan class=\"token keyword\"\u003Efor\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n    \u003Cspan class=\"token keyword\"\u003Eif\u003C\u002Fspan\u003E j\u003Cspan class=\"token operator\"\u003E++\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E j \u003Cspan class=\"token operator\"\u003E\u003E\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E10\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n        \u003Cspan class=\"token keyword\"\u003Ebreak\u003C\u002Fspan\u003E \u003Cspan class=\"token comment\"\u003E\u002F\u002F if there is no break statement, loop will last until a keyboard interrupt(ctrl-c) occurs\u003C\u002Fspan\u003E\n    \u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E \u003Cspan class=\"token keyword\"\u003Eelse\u003C\u002Fspan\u003E \u003Cspan class=\"token keyword\"\u003Eif\u003C\u002Fspan\u003E j\u003Cspan class=\"token operator\"\u003E%\u003C\u002Fspan\u003E\u003Cspan class=\"token number\"\u003E2\u003C\u002Fspan\u003E \u003Cspan class=\"token operator\"\u003E==\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E0\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n        \u003Cspan class=\"token keyword\"\u003Econtinue\u003C\u002Fspan\u003E\n    \u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\n    fmt\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EPrint\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Ei\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E\" \"\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C!-- HTML_TAG_END --\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E\u003Ccode\u003Efor\u003C\u002Fcode\u003E 키워드 이후 아무런 표현식도 오지 않으면 무한루프를 돌게 된다. \u003Ccode\u003Ebreak\u003C\u002Fcode\u003E문과 \u003Ccode\u003Econtine\u003C\u002Fcode\u003E문도 사용 가능하다.\u003C\u002Fp\u003E\n\u003Cbr\u003E\n\u003Ch3 id=\"for-range-loop\"\u003E\u003Ca aria-hidden=\"true\" tabindex=\"-1\" href=\"#for-range-loop\"\u003E\u003Cspan class=\"icon icon-link\"\u003E\u003C\u002Fspan\u003E\u003C\u002Fa\u003Efor-range loop\u003C\u002Fh3\u003E\n\u003Cpre class=\"language-go\"\u003E\u003C!-- HTML_TAG_START --\u003E\u003Ccode class=\"language-go\"\u003E\u003Cspan class=\"token comment\"\u003E\u002F\u002F for-range loop (array, slice, string)\u003C\u002Fspan\u003E\nevenVals \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E]\u003C\u002Fspan\u003E\u003Cspan class=\"token builtin\"\u003Eint\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\u003Cspan class=\"token number\"\u003E2\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E4\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E6\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E8\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E10\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E12\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\n\u003Cspan class=\"token keyword\"\u003Efor\u003C\u002Fspan\u003E i\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E v \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E \u003Cspan class=\"token keyword\"\u003Erange\u003C\u002Fspan\u003E evenVals \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n    fmt\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EPrintln\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Ei\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E v\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token comment\"\u003E\u002F\u002F i is an key(index) of the data, v is value of the data\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"token comment\"\u003E\u002F\u002F ignoring the key in a for-range loop\u003C\u002Fspan\u003E\n\u003Cspan class=\"token keyword\"\u003Efor\u003C\u002Fspan\u003E \u003Cspan class=\"token boolean\"\u003E_\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E v \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E \u003Cspan class=\"token keyword\"\u003Erange\u003C\u002Fspan\u003E evenVals \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E \u003Cspan class=\"token comment\"\u003E\u002F\u002F using underscore(_), we can only access the value\u003C\u002Fspan\u003E\n    fmt\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EPrint\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Ev\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E\" \"\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token comment\"\u003E\u002F\u002F if you want, it is also possible to ignore the value by using underscore\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C!-- HTML_TAG_END --\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E다른 언어에 존재하는 \u003Ccode\u003Efor-each\u003C\u002Fcode\u003E 형태의 반복문과 유사한 형태이다. \u003Ccode\u003Erange\u003C\u002Fcode\u003E 키워드를 통해 각각 인덱스와 값에 접근할 수 있다.\n또한 변수 이름을 언더바(\u003Ccode\u003E_\u003C\u002Fcode\u003E)로 설정하면, 해당 값을 사용하지 않고 넘긴다는 의미가 된다. 적절히 사용할 수 있도록 하자.\u003C\u002Fp\u003E\n\u003Cbr\u003E\n\u003Cp\u003E\u003Ccode\u003Emap\u003C\u002Fcode\u003E 타입에 대해서도 for-range loop를 적용할 수 있다.\u003C\u002Fp\u003E\n\u003Cpre class=\"language-go\"\u003E\u003C!-- HTML_TAG_START --\u003E\u003Ccode class=\"language-go\"\u003E\u003Cspan class=\"token comment\"\u003E\u002F\u002F for-range loop (map)\u003C\u002Fspan\u003E\nnames \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E \u003Cspan class=\"token keyword\"\u003Emap\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"token builtin\"\u003Estring\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E]\u003C\u002Fspan\u003E\u003Cspan class=\"token builtin\"\u003Ebool\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n    \u003Cspan class=\"token string\"\u003E\"Fred\"\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token boolean\"\u003Etrue\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E\n    \u003Cspan class=\"token string\"\u003E\"Raul\"\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token boolean\"\u003Etrue\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E\n    \u003Cspan class=\"token string\"\u003E\"Will\"\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token boolean\"\u003Efalse\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"token keyword\"\u003Efor\u003C\u002Fspan\u003E k\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E v \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E \u003Cspan class=\"token keyword\"\u003Erange\u003C\u002Fspan\u003E names \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n    fmt\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EPrintln\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Ek\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E v\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"token keyword\"\u003Efor\u003C\u002Fspan\u003E k \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E \u003Cspan class=\"token keyword\"\u003Erange\u003C\u002Fspan\u003E names \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E \u003Cspan class=\"token comment\"\u003E\u002F\u002F by leave off second variable, it is possible to get key only.\u003C\u002Fspan\u003E\n    fmt\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EPrintln\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Ek\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E names\u003Cspan class=\"token punctuation\"\u003E[\u003C\u002Fspan\u003Ek\u003Cspan class=\"token punctuation\"\u003E]\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C!-- HTML_TAG_END --\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E대충 Python이랑 비슷한 것 같다.\u003C\u002Fp\u003E\n\u003Cbr\u003E\n\u003Cp\u003E\u003Ccode\u003Estring\u003C\u002Fcode\u003E에 대해서도 for-range loop가 가능하다.\u003C\u002Fp\u003E\n\u003Cpre class=\"language-go\"\u003E\u003C!-- HTML_TAG_START --\u003E\u003Ccode class=\"language-go\"\u003E\u003Cspan class=\"token comment\"\u003E\u002F\u002F for-range loop (string)\u003C\u002Fspan\u003E\nsamples \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E]\u003C\u002Fspan\u003E\u003Cspan class=\"token builtin\"\u003Estring\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\u003Cspan class=\"token string\"\u003E\"hello\"\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E\"안녕하세요\"\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"token keyword\"\u003Efor\u003C\u002Fspan\u003E \u003Cspan class=\"token boolean\"\u003E_\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E sample \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E \u003Cspan class=\"token keyword\"\u003Erange\u003C\u002Fspan\u003E samples \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n    \u003Cspan class=\"token keyword\"\u003Efor\u003C\u002Fspan\u003E i\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E r \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E \u003Cspan class=\"token keyword\"\u003Erange\u003C\u002Fspan\u003E sample \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E \u003Cspan class=\"token comment\"\u003E\u002F\u002F it iterates over the runes, not bytes\u003C\u002Fspan\u003E\n        fmt\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EPrintln\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Ei\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E r\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003Estring\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Er\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token comment\"\u003E\u002F\u002F key is the number of byte from the beginning of the string, type of value is rune\u003C\u002Fspan\u003E\n    \u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C!-- HTML_TAG_END --\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E특이사항은 \u003Ccode\u003Ebyte\u003C\u002Fcode\u003E 단위가 아닌 \u003Ccode\u003Erune\u003C\u002Fcode\u003E 단위로 iterating한다는 것.\n따라서 문자의 크기가 2바이트 이상인 경우, 인덱스가 점프하는 것을 확인할 수 있다.\u003C\u002Fp\u003E\n\u003Cbr\u003E\n\u003Cp\u003EGo에서의 \u003Ccode\u003Efor\u003C\u002Fcode\u003E문은 \u003Cstrong\u003ELabeling\u003C\u002Fstrong\u003E을 지원한다.\u003C\u002Fp\u003E\n\u003Cpre class=\"language-go\"\u003E\u003C!-- HTML_TAG_START --\u003E\u003Ccode class=\"language-go\"\u003E\u003Cspan class=\"token keyword\"\u003Efunc\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003Emain\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n\tsamples \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E]\u003C\u002Fspan\u003E\u003Cspan class=\"token builtin\"\u003Estring\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\u003Cspan class=\"token string\"\u003E\"hello\"\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E\"안녕hello\"\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\n\nouter\u003Cspan class=\"token punctuation\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token comment\"\u003E\u002F\u002F label of outer for-statements\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token keyword\"\u003Efor\u003C\u002Fspan\u003E \u003Cspan class=\"token boolean\"\u003E_\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E sample \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E \u003Cspan class=\"token keyword\"\u003Erange\u003C\u002Fspan\u003E samples \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n\t\t\u003Cspan class=\"token keyword\"\u003Efor\u003C\u002Fspan\u003E i\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E r \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E \u003Cspan class=\"token keyword\"\u003Erange\u003C\u002Fspan\u003E sample \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n\t\t\tfmt\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EPrintln\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Ei\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E r\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003Estring\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Er\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\t\t\t\u003Cspan class=\"token keyword\"\u003Eif\u003C\u002Fspan\u003E r \u003Cspan class=\"token operator\"\u003E==\u003C\u002Fspan\u003E \u003Cspan class=\"token char\"\u003E'l'\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n\t\t\t\t\u003Cspan class=\"token keyword\"\u003Econtinue\u003C\u002Fspan\u003E outer \u003Cspan class=\"token comment\"\u003E\u002F\u002F this leads to continue nested loop\u003C\u002Fspan\u003E\n\t\t\t\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\n\t\t\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\n\t\tfmt\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EPrintln\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token comment\"\u003E\u002F\u002F this line is not reached because all the strings contain 'l', and the process continued outer loop\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C!-- HTML_TAG_END --\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E바깥쪽 반복문에 \u003Ccode\u003Eouter\u003C\u002Fcode\u003E라는 Label이 붙어있다.\n그리고 안쪽 반복문에서 \u003Ccode\u003Econtinue outer\u003C\u002Fcode\u003E를 통해 \u003Ccode\u003Efor i, r := range sample {}\u003C\u002Fcode\u003E 블록이 아닌, \u003Ccode\u003Efor _, sample := range samples\u003C\u002Fcode\u003E 블록의 시작점으로 되돌아가고 있다.\u003C\u002Fp\u003E\n\u003Cbr\u003E\u003Cbr\u003E\n\u003Ch2 id=\"switch\"\u003E\u003Ca aria-hidden=\"true\" tabindex=\"-1\" href=\"#switch\"\u003E\u003Cspan class=\"icon icon-link\"\u003E\u003C\u002Fspan\u003E\u003C\u002Fa\u003Eswitch\u003C\u002Fh2\u003E\n\u003Chr\u003E\n\u003Cp\u003E보통 제한적인 상황에서만 사용되거나 \u003Ccode\u003Eswitch\u003C\u002Fcode\u003E문이 없는 다른 언어들과는 달리, Go는 \u003Ccode\u003Eswitch\u003C\u002Fcode\u003E문이 엄청 잘되어있다.\u003C\u002Fp\u003E\n\u003Cpre class=\"language-go\"\u003E\u003C!-- HTML_TAG_START --\u003E\u003Ccode class=\"language-go\"\u003Ewords \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E]\u003C\u002Fspan\u003E\u003Cspan class=\"token builtin\"\u003Estring\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\u003Cspan class=\"token string\"\u003E\"a\"\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E\"cow\"\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E\"smile\"\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E\"gopher\"\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E\"octopus\"\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E\"영어싫어\"\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E\"\"\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"token keyword\"\u003Efor\u003C\u002Fspan\u003E \u003Cspan class=\"token boolean\"\u003E_\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E word \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E \u003Cspan class=\"token keyword\"\u003Erange\u003C\u002Fspan\u003E words \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n    \u003Cspan class=\"token keyword\"\u003Eswitch\u003C\u002Fspan\u003E size \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003Elen\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Eword\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E size \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E \u003Cspan class=\"token comment\"\u003E\u002F\u002F as like if-statements, there is no parenthesis\u003C\u002Fspan\u003E\n    \u003Cspan class=\"token keyword\"\u003Ecase\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E1\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E2\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E3\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E4\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token comment\"\u003E\u002F\u002F using comma(,), we can make multiple matches\u003C\u002Fspan\u003E\n        fmt\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EPrintln\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Eword\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E\"is a short word!\"\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n    \u003Cspan class=\"token keyword\"\u003Ecase\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E5\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E:\u003C\u002Fspan\u003E\n        fmt\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EPrintln\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Eword\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E\"is exactly the right length:\"\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E size\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n        \u003Cspan class=\"token keyword\"\u003Ebreak\u003C\u002Fspan\u003E                         \u003Cspan class=\"token comment\"\u003E\u002F\u002F this makes it exits switch earlier\u003C\u002Fspan\u003E\n        fmt\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EPrintln\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token string\"\u003E\"not be printed\"\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token comment\"\u003E\u002F\u002F because of break above, this line is unreachable\u003C\u002Fspan\u003E\n    \u003Cspan class=\"token keyword\"\u003Ecase\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E6\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E7\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E8\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E9\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token comment\"\u003E\u002F\u002F empty case (nothing happened)\u003C\u002Fspan\u003E\n        \u003Cspan class=\"token comment\"\u003E\u002F\u002F fallthrough \u002F\u002F if keyword &#96;fallthrough&#96; is here, as like other languages, run next case's block\u003C\u002Fspan\u003E\n    \u003Cspan class=\"token keyword\"\u003Edefault\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E:\u003C\u002Fspan\u003E\n        fmt\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EPrintln\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Eword\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E\"is a wrong word\"\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n    \u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C!-- HTML_TAG_END --\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E여러 값에 대해 적용되는 \u003Ccode\u003Ecase\u003C\u002Fcode\u003E를 설정하려면 컴마(\u003Ccode\u003E,\u003C\u002Fcode\u003E)로 값들을 구분지어서 나열하면 된다.\u003Cbr\u003E\n특이사항은 \u003Ccode\u003Ecase\u003C\u002Fcode\u003E 블록에서 \u003Ccode\u003Ebreak\u003C\u002Fcode\u003E를 통한 탈출을 지원하긴 하지만, 다른 언어와 달리 반드시 사용하지 않아도 \u003Ccode\u003Ecase\u003C\u002Fcode\u003E 블록이 끝나면 알아서 탈출해준다.\n만약 \u003Ccode\u003Ecase\u003C\u002Fcode\u003E 블록이 끝나고 아래 \u003Ccode\u003Ecase\u003C\u002Fcode\u003E 블록도 실행되게끔 하고자 하는 경우, \u003Ccode\u003Efallthrough\u003C\u002Fcode\u003E 키워드를 사용하면 된다 한다. 다만 권장되지는 않는 듯 하다.\u003C\u002Fp\u003E\n\u003Cbr\u003E\n\u003Cp\u003E\u003Ccode\u003Eswitch\u003C\u002Fcode\u003E문에 아무런 변수도 할당하지 않는 경우, boolean expression의 true\u002Ffalse 여부에 따라 \u003Ccode\u003Ecase\u003C\u002Fcode\u003E 블록이 실행된다. \u003Ccode\u003Eif\u003C\u002Fcode\u003E\u002F\u003Ccode\u003Eelse\u003C\u002Fcode\u003E문이랑 비슷한듯.\u003C\u002Fp\u003E\n\u003Cpre class=\"language-go\"\u003E\u003C!-- HTML_TAG_START --\u003E\u003Ccode class=\"language-go\"\u003E\t\u003Cspan class=\"token comment\"\u003E\u002F\u002F blank switch, break a loop in switch\u002Fcase statements\u003C\u002Fspan\u003E\nloop\u003Cspan class=\"token punctuation\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token comment\"\u003E\u002F\u002F to break in switch\u002Fcase statement, attach a label to for-statements\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token keyword\"\u003Efor\u003C\u002Fspan\u003E i \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E0\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E i \u003Cspan class=\"token operator\"\u003E&lt;\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E10\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E i\u003Cspan class=\"token operator\"\u003E++\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n\t\t\u003Cspan class=\"token keyword\"\u003Eswitch\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E \u003Cspan class=\"token comment\"\u003E\u002F\u002F this is a blank switch. no variable\u003C\u002Fspan\u003E\n\t\t\u003Cspan class=\"token keyword\"\u003Ecase\u003C\u002Fspan\u003E i\u003Cspan class=\"token operator\"\u003E%\u003C\u002Fspan\u003E\u003Cspan class=\"token number\"\u003E2\u003C\u002Fspan\u003E \u003Cspan class=\"token operator\"\u003E==\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E0\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token comment\"\u003E\u002F\u002F here can be boolean expression\u003C\u002Fspan\u003E\n\t\t\tfmt\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EPrintln\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Ei\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E\"is even number\"\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\t\t\u003Cspan class=\"token keyword\"\u003Ecase\u003C\u002Fspan\u003E i\u003Cspan class=\"token operator\"\u003E%\u003C\u002Fspan\u003E\u003Cspan class=\"token number\"\u003E3\u003C\u002Fspan\u003E \u003Cspan class=\"token operator\"\u003E==\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E0\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E:\u003C\u002Fspan\u003E\n\t\t\tfmt\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EPrintln\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Ei\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E\"is divisible by 3 but not 2\"\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\t\t\u003Cspan class=\"token keyword\"\u003Ecase\u003C\u002Fspan\u003E i\u003Cspan class=\"token operator\"\u003E%\u003C\u002Fspan\u003E\u003Cspan class=\"token number\"\u003E7\u003C\u002Fspan\u003E \u003Cspan class=\"token operator\"\u003E==\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E0\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E:\u003C\u002Fspan\u003E\n\t\t\tfmt\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EPrintln\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token string\"\u003E\"exit the loop\"\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\t\t\t\u003Cspan class=\"token keyword\"\u003Ebreak\u003C\u002Fspan\u003E loop \u003Cspan class=\"token comment\"\u003E\u002F\u002F if this statement is just &#96;break&#96;, it cannot exit the loop. just proceed until the loop ends\u003C\u002Fspan\u003E\n\t\t\u003Cspan class=\"token keyword\"\u003Edefault\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E:\u003C\u002Fspan\u003E\n\t\t\tfmt\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EPrintln\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Ei\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E\"is boring\"\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\t\t\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C!-- HTML_TAG_END --\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E\u003Ccode\u003Ecase\u003C\u002Fcode\u003E안에서 \u003Ccode\u003Efor\u003C\u002Fcode\u003E문을 탈출하려면 위처럼 \u003Ccode\u003Ebreak\u003C\u002Fcode\u003E문에 Label을 명시해주어야 한다.\u003C\u002Fp\u003E\n\u003Cbr\u003E\u003Cbr\u003E\n\u003Ch2 id=\"goto\"\u003E\u003Ca aria-hidden=\"true\" tabindex=\"-1\" href=\"#goto\"\u003E\u003Cspan class=\"icon icon-link\"\u003E\u003C\u002Fspan\u003E\u003C\u002Fa\u003Egoto\u003C\u002Fh2\u003E\n\u003Chr\u003E\n\u003Cp\u003E놀랍게도 Go엔 \u003Ccode\u003Egoto\u003C\u002Fcode\u003E가 있다. \u003Ccode\u003Egoto\u003C\u002Fcode\u003E 자체가 가지고 있는 문제점을 해결하기 위해 몇 가지 보완이 이루어진 듯 하다.\u003C\u002Fp\u003E\n\u003Cpre class=\"language-go\"\u003E\u003C!-- HTML_TAG_START --\u003E\u003Ccode class=\"language-go\"\u003E\ta \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E10\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token comment\"\u003E\u002F\u002F goto skip \u002F\u002F cannot jump over variable declaration\u003C\u002Fspan\u003E\n\tb \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E20\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token keyword\"\u003Egoto\u003C\u002Fspan\u003E skip\nskip\u003Cspan class=\"token punctuation\"\u003E:\u003C\u002Fspan\u003E\n\tc \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E30\u003C\u002Fspan\u003E\n\n\tfmt\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EPrintln\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Ea\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E b\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E c\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token keyword\"\u003Eif\u003C\u002Fspan\u003E c \u003Cspan class=\"token operator\"\u003E\u003E\u003C\u002Fspan\u003E a \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n\t\t\u003Cspan class=\"token comment\"\u003E\u002F\u002F goto inner \u002F\u002F cannot jump into block\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\n\n\t\u003Cspan class=\"token keyword\"\u003Eif\u003C\u002Fspan\u003E a \u003Cspan class=\"token operator\"\u003E&lt;\u003C\u002Fspan\u003E b \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n\t\t\u003Cspan class=\"token keyword\"\u003Egoto\u003C\u002Fspan\u003E inner\n\tinner\u003Cspan class=\"token punctuation\"\u003E:\u003C\u002Fspan\u003E\n\t\tfmt\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EPrintln\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token string\"\u003E\"a is less than b\"\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C!-- HTML_TAG_END --\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E\u003Ccode\u003Egoto\u003C\u002Fcode\u003E를 통해 특정 block 안으로 들어가거나, 변수 선언 이전으로 되돌아가거나 할 수는 없다.\u003C\u002Fp\u003E\n\u003Cbr\u003E\n\u003Cp\u003E\u003Ccode\u003Egoto\u003C\u002Fcode\u003E가 유용하게 쓰이는 경우가 한 가지 있다.\u003C\u002Fp\u003E\n\u003Cpre class=\"language-go\"\u003E\u003C!-- HTML_TAG_START --\u003E\u003Ccode class=\"language-go\"\u003E    x \u003Cspan class=\"token operator\"\u003E:=\u003C\u002Fspan\u003E rand\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EIntn\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token number\"\u003E10\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\n\t\u003Cspan class=\"token keyword\"\u003Efor\u003C\u002Fspan\u003E x \u003Cspan class=\"token operator\"\u003E&lt;\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E100\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n\t\t\u003Cspan class=\"token keyword\"\u003Eif\u003C\u002Fspan\u003E a\u003Cspan class=\"token operator\"\u003E%\u003C\u002Fspan\u003E\u003Cspan class=\"token number\"\u003E5\u003C\u002Fspan\u003E \u003Cspan class=\"token operator\"\u003E==\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E0\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E&#123;\u003C\u002Fspan\u003E\n\t\t\t\u003Cspan class=\"token keyword\"\u003Egoto\u003C\u002Fspan\u003E done \u003Cspan class=\"token comment\"\u003E\u002F\u002F in this case, instead of using boolean flag, using goto makes code clearer and readable\u003C\u002Fspan\u003E\n\t\t\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\n\t\ta \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E a\u003Cspan class=\"token operator\"\u003E*\u003C\u002Fspan\u003E\u003Cspan class=\"token number\"\u003E2\u003C\u002Fspan\u003E \u003Cspan class=\"token operator\"\u003E+\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E1\u003C\u002Fspan\u003E\n\t\u003Cspan class=\"token punctuation\"\u003E&#125;\u003C\u002Fspan\u003E\n\n\tfmt\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EPrintln\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token string\"\u003E\"do something when the loop completes normally\"\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\ndone\u003Cspan class=\"token punctuation\"\u003E:\u003C\u002Fspan\u003E\n\tfmt\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EPrintln\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token string\"\u003E\"do complicated stuff no matter why we left the loop\"\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\tfmt\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EPrintln\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Ea\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C!-- HTML_TAG_END --\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E위처럼 flag를 설정하여, flag의 여부에 따라 추가적으로 처리를 해주어야 하는 경우이다.\n이 경우 위처럼 \u003Ccode\u003Egoto\u003C\u002Fcode\u003E를 사용하는 것이 \u003Ccode\u003Eif\u003C\u002Fcode\u003E를 사용하는 것보다 깔끔하다고 한다.\u003C\u002Fp\u003E\n\u003Cbr\u003E\u003Cbr\u003E\n\u003Ch2 id=\"references\"\u003E\u003Ca aria-hidden=\"true\" tabindex=\"-1\" href=\"#references\"\u003E\u003Cspan class=\"icon icon-link\"\u003E\u003C\u002Fspan\u003E\u003C\u002Fa\u003EReferences\u003C\u002Fh2\u003E\n\u003Chr\u003E\n\u003Ccenter\u003E\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Flearning.oreilly.com\u002Flibrary\u002Fview\u002Flearning-go\u002F9781492077206\u002F\" rel=\"nofollow\"\u003E\u003Cimg src=\"https:\u002F\u002Flearning.oreilly.com\u002Fcovers\u002Furn:orm:book:9781492077206\u002F400w\u002F\"\u003E\u003C\u002Fa\u003E \u003Cbr\u003E\n\u003Ca href=\"https:\u002F\u002Flearning.oreilly.com\u002Flibrary\u002Fview\u002Flearning-go\u002F9781492077206\u002F\" rel=\"nofollow\"\u003EJon Bodner, 『Learning Go』, O’Reilly Media, Inc.\u003C\u002Fa\u003E\u003C\u002Fp\u003E\u003C\u002Fcenter\u003E\n\u003Cbr\u003E\u003Cbr\u003E",{"title":3,"date":4,"excerpt":5,"categories":6,"coverImage":8,"coverWidth":9,"coverHeight":10,"slug":11},"블록, Shadowing, 흐름 제어문","2022-07-27T00:00:00.000Z","Blocks, Shadows, and Control Structures",[7],"Golang","\u002Fimages\u002Fjefferson-santos-fCEJGBzAkrU-unsplash.jpg",16,9,"GO4"],"uses":{"params":["post"]}}]}